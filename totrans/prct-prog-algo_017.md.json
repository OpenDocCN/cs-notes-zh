["```\n    Counter counter = new Counter(\"Volusia\");\n    counter.count = -16022;\n\n    ```", "```\n    // return the magnitude of this Vector\n    public double magnitude() {\n        return Math.sqrt(this.dot(this));\n    }\n\n    ```", "```\n    public interface Function {\n        public abstract double evaluate (double x);\n    }\n\n    ```", "```\n    Function f1 = new Square();\n    Function f2 = new GaussianPDF();\n    Function f3 = new Complex(1.0, 2.0);   // compile-time error\n\n    ```", "```\n    private int hash(Object x) {\n        return Math.abs(x.hashCode() % m);\n    }\n\n    ```", "```\n    Integer x = 17;  // Autoboxing (int -> Integer)\n    int a = x;       // Unboxing   (Integer -> int)\n\n    ```", "```\n    if (this.length() != that.length())\n        throw new IllegalArgumentException(\"Dimensions disagree.\");\n\n    ```", "```\n    assert count >= 0 : \"Negative count detected in increment()\";\n\n    ```", "```\n    public Vector minus(Vector that) {\n        return this.plus(that.scale(-1.0));\n    }\n\n    ```", "```\n    import java.util.Date\n\n    public class Appointment {\n        private Date date;\n        private String contact;\n\n        public Appointment(Date date) {\n            this.date = date;\n            this.contact = contact;\n        }\n\n        public Date getDate() {\n            return date;\n        }\n\n    ```", "```\n    public Counter(Counter x) {\n        count = x.count;\n    }\n\n    Counter counter1 = new Counter();\n    counter1.hit();\n    counter1.hit();\n    counter1.hit();\n    Counter counter2 = new Counter(counter1);\n    counter2.hit();\n    counter2.hit();\n    StdOut.println(counter1.get() + \" \" + counter2.get());    // 3 5\n\n    ```"]