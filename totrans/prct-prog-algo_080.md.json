["```\namino['TTA'] = 'Leucine'\n\n```", "```\nstdio.writeln(amino['TTA'])\n\n```", "```\nhash(x) % m\n\n```", "```\nclass Node:\n    def __init__(self, key, val):\n        self.key   = key\n        self.val   = val\n        self.left  = None\n        self.right = None\n\n```", "```\ndef inorder(x):\n    if x is None: return\n    inorder(x.left)\n    stdio.writeln(x.key)\n    inorder(x.right)\n\n```", "```\nfor i in range(n):        for v in a:\n    stdio.writeln(i)          stdio.writeln(v)\n\n```", "```\nst = SymbolTable()\n ...\nfor key in st:\n    stdio.writeln(str(key) + ' ' + str(st[key]))\n\n```", "```\nimport stdio\nst = dict()\nwhile not stdio.isEmpty():\n    word = stdio.readString()\n    st[word] = 1 + st.get(word, 0)\nfor word, frequency in st.iteritems():\n    stdio.writef('%s %4d\\n', word, frequency)\n\n```", "```\nimport stdio\ndistinct = set()\nwhile not stdio.isEmpty():\n    key = stdio.readString()\n    if key not in distinct:\n        distinct.add(key)\n        stdio.writeln(key)\n\n```", "```\nstopwords = {'and', 'at', 'of', 'or', on', 'the', 'to'}\ngrades = {'A+':4.33, 'A':4.0, 'A-':3.67, 'B+':3.33, 'B':3.0} \n\n```", "```\nfor word in sorted(st):\n\n```", "```\n    % python lookupmultiple.py amino.csv 3 0\n    Leucine\n    TTA TTG CTT CTC CTA CTG\n\n    ```", "```\n    E A S Y Q U E S T I O N\n\n    ```", "```\n    def __hash__(self):\n        return -17\n\n    ```", "```\n    best of it the time was\n\n    ```", "```\n    E A S Y Q U E S T I O N\n\n    ```", "```\n    2 252 401 398 330 363\n    399 387 219 266 382 381 278 363\n    3 923 220 911 244 898 258 362 363\n    4 924 278 347 621 299 392 358 363\n    5 925 202 910 245 363\n\n    ```", "```\n    10 15 18 21 23 24 30 31 38 41 42 45 50 55 59\n    60 61 63 71 77 78 83 84 85 86 88 91 92 93 94 98\n\n    ```", "```\n    a = list(set(a))\n\n    ```", "```\n     A+   A    A-   B+   B    B-   C+   C    C-   D    F\n    4.33 4.00 3.67 3.33 3.00 2.67 2.33 2.00 1.67 1.00 0.00\n\n    ```", "```\n    def _inRange(node, lo, hi):\n        if node is None: return True\n        if (lo is not None) and (node.item <= lo):  return False\n        if (hi is not None) and (hi <= node.item):  return False\n        if not _inRange(node.left, lo, node.item):  return False\n        if not _inRange(node.right, node.item, hi): return False    \n        return True\n    def _isBST(node):\n        return _inRange(node, None, None)\n\n    ```", "```\n    def mystery(node):\n        if node is None: return 1\n        return mystery(node.left) + mystery(node.right)\n\n    ```", "```\n    A = 5\n    B = 10\n    C = A + B\n    D = C * C\n    write(D)\n\n    ```", "```\n    UUU 13.2  UCU 19.6  UAU 16.5  UGU 12.4\n    UUC 23.5  UCC 10.6  UAC 14.7  UGC  8.0\n    UUA  5.8  UCA 16.1  UAA  0.7  UGA  0.3\n    UUG 17.6  UCG 11.8  UAG  0.2  UGG  9.5\n    CUU 21.2  CCU 10.4  CAU 13.3  CGU 10.5\n    CUC 13.5  CCC  4.9  CAC  8.2  CGC  4.2\n    CUA  6.5  CCA 41.0  CAA 24.9  CGA 10.7\n    CUG 10.7  CCG 10.1  CAG 11.4  CGG  3.7\n    AUU 27.1  ACU 25.6  AAU 27.2  AGU 11.9\n    AUC 23.3  ACC 13.3  AAC 21.0  AGC  6.8\n    AUA  5.9  ACA 17.1  AAA 32.7  AGA 14.2\n    AUG 22.3  ACG  9.2  AAG 23.9  AGG  2.8\n    GUU 25.7  GCU 24.2  GAU 49.4  GGU 11.8\n    GUC 15.3  GCC 12.6  GAC 22.1  GGC  7.0\n    GUA  8.7  GCA 16.8  GAA 39.8  GGA 47.2\n\n    ```"]