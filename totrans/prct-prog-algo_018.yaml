- en: '3.4   Case Study:   N-body Simulation'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://introcs.cs.princeton.edu/java/34nbody](https://introcs.cs.princeton.edu/java/34nbody)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this section, we write an object-oriented program that dynamically simulates
    the motion of *n* bodies under the influence of mutual gravitational attraction.
  prefs: []
  type: TYPE_NORMAL
- en: Bouncing balls.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The data type [Ball.java](Ball.java.html) represents a ball with a given position
    \((r_x, r_y)\) that moves with a fixed velocity \((v_x, v_y)\) in the box with
    coordinates between −1 and +1. When it collides with the boundary, it bounces
    according to the law of elastic collision.
  prefs: []
  type: TYPE_NORMAL
- en: '![adding vectors to move a ball](../Images/0a74711369e2da400dd552c6b1a0997f.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: The client [BouncingBalls.java](BouncingBalls.java.html) takes a command-line
    argument *n* and creates *n* random bouncing balls.
  prefs: []
  type: TYPE_NORMAL
- en: N-body simulation.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The bouncing ball simulation is based on *Newton''s first law of motion*: a
    body in motion remains in motion at the same velocity unless acted on by an outside
    force. Embellishing that example to incorporate gravity leads us to a basic problem
    that has fascinated scientists for ages. Given a system of *n* bodies, mutually
    affected by gravitational forces, the problem is to describe their motion.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Body data type.* The data type [Body.java](Body.java.html) represents a body
    with a given position \((r_x, r_y)\), velocity \((v_x, v_y)\), and mass \(m\).
    It applies *Newton''s third law of motion* (which explains the gravitational force
    between two bodies) to determine the net force acting on a body:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: $$ \boldsymbol{F} = G \frac{m_1 m_2}{r^2} $$
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: and *Newton's second law of motion* (which explains how outside forces directly
    affect acceleration and velocity).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $$ \boldsymbol{F} = m \boldsymbol{a} $$
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: It uses the [Vector.java](Vector.java.html) data type to represent displacement,
    velocity, and force as vector quantities.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Body data type API](../Images/4a3db88c0c4f95460fd93a35352e2586.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*Universe data type.* [Universe.java](Universe.java.html) takes a command-line
    argument `dt`, reads in a universe from standard input, and simulates the universe
    using time quantum `dt`. Here is an example of the data file format:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![data file format for n-body simulation](../Images/ae222ac7b21fbaf4ef22ec2e15af3439.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: The following static images for [2body.txt](2body.txt), [3body.txt](3body.txt),
    and [4body.txt](4body.txt) are made by modifying [Universe.java](Universe.java.html)
    and [Body.java](Body.java.html) to draw the bodies in white, and then black on
    a gray background.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Simulation of 2-, 3-, and 4-body systems](../Images/239e0e02a08d33b7c892b0e9e1e07e2a.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Develop an object-oriented version of [BouncingBall.java](../15inout/BouncingBall.java.html)
    from Section 1.5. Include a constructor for that starts each ball moving in a
    random direction at a random velocity (within reasonable limits) and a test client
    that takes an integer *n* from the command line and simulates the motion of *n*
    bouncing balls.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*: [Ball.java](Ball.java.html) and [BouncingBalls.java](BouncingBalls.java.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What happens in a universe where Newton's second law does not apply? This situation
    would correspond to `forceTo()` in `Body` always returning the zero vector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*: The bodies will move in straight lines, according to their initial
    velocities.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creative Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**N-body simulation trace.** Write a client [UniverseTrace.java](UniverseTrace.java.html)
    that produces traces of the n-body simulation system like the static images in
    the book.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Web Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Colored bouncing balls.** Modify [Ball.java](Ball.java.html) and [BouncingBalls.java](BouncingBalls.java.html)
    to associate a color with each ball. Name your programs [ColoredBall.java](ColoredBall.java.html)
    and [BouncingColoredBalls.java](BouncingColoredBalls.java.html).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Friction and drag.** Modify [Ball.java](Ball.java.html) to incorporate friction
    and drag. Name your data type [DeluxeBall.java](DeluxeBall.java.html).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Generative music based on a gravity simulator.** Generate music based on
    an n-body simulation where bodies makes notes when they collide. Simran Gleason''s
    [website](http://www.art.net/~simran/GenerativeMusic/kepler.html) describes the
    process and includes example videos.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
