- en: 2.2   Libraries and Clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://introcs.cs.princeton.edu/java/22library](https://introcs.cs.princeton.edu/java/22library)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Each program that you have written consists of Java code that resides in a
    single `.java` file. For large programs, keeping all the code in a single file
    is restrictive and unnecessary. Fortunately, it is very easy in Java to refer
    to a method in one file that is defined in another. This ability has two important
    consequences on our style of programming:'
  prefs: []
  type: TYPE_NORMAL
- en: It allows us to *extend the Java language* by developing libraries of static
    methods for use by any other program, keeping each library in its own file.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It enables *modular programming*, where we divide a program up into static methods,
    grouped together in some logical way.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using static methods in other programs.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To refer to a static method in one class that is defined in another, you must
    make both classes accessible to Java (for example, by putting them both in the
    same directory in your computer). Then, to call a method, prepend its class name
    and a period separator. For example, [SAT.java](SAT.java.html) calls the `cdf()`
    method in [Gaussian.java](Gaussian.java.html), which calls the `pdf()` method,
    which calls the `exp()` and `sqrt()` methods in [Math](https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html).
  prefs: []
  type: TYPE_NORMAL
- en: '![Modular programming diagram](../Images/08a4c662eefda06deca9e68e4a8aaba9.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: We describe several details about the process.
  prefs: []
  type: TYPE_NORMAL
- en: '*The public keyword.* The `public` modifier identifies the method as available
    for use by any other program. You can also identify methods as `private`, but
    you have no reason to do so at this point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Each module is a class.* We use the term *module* to refer to all the code
    that we keep in a single file. By convention, each module is a Java class that
    is kept in a file with the same name of the class but has a `.java` extension.
    In this chapter, each class is merely a set of static methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The .class file.* When you compile the program, the Java compiler makes a
    file with the class name followed by a `.class` extension that has the code of
    your program in a language more suited to your computer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Compile when necessary.* When you compile a program, Java typically compiles
    everything that needs to be compiled in order to run the program. For example,
    when you type `javac SAT.java`, the compiler will also check whether you modified
    `Gaussian.java` since the last time it was compiled. If so, it will also compile
    `Gaussian`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Multiple `main()` methods.* Both [SAT.java](SAT.java.html) and [Gaussian.java](Gaussian.java.html)
    have their own `main()` method. When you type `java` followed by a class name,
    Java transfers control to the machine code corresponding to the `main()` method
    defined in that class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Client, API, and Implementation](../Images/fe54cc3bca2868d5b52704ec28427319.png)'
  prefs: []
  type: TYPE_IMG
- en: Libraries.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We refer to a module whose methods are primarily intended for use by many other
    programs as a *library*.
  prefs: []
  type: TYPE_NORMAL
- en: '*Clients.* We use the term *client* to refer to a program that calls a given
    library method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*APIs.* Programmers normally think in terms of a *contract* between the client
    and the implementation that is a clear specification of what the method is to
    do.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Implementations.* We use the term *implementation* to describe the Java code
    that implements the methods in an API.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'As an example, [Gaussian.java](Gaussian.java.html) is an implementation of
    the following API:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Gaussian API](../Images/f8164ed7b1ae44ff509bd9c9acdc8f0c.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Random numbers.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[StdRandom.java](StdRandom.java.html) is a library for generating random numbers
    from various distributions.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Standard random API](../Images/7d3be812da4ce1d354533066395c0a25.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Input and output for arrays.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[StdArrayIO.java](StdArrayIO.java.html) is a library for reading arrays of
    primitive types from standard input and printing them to standard output.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Standard array IO](../Images/bcfcd188420bb95a4f5c8ba663769e6f.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Iterated function systems.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An [Iterated function system](http://www.cut-the-knot.org/ctk/ifs.shtml) (IFS)
    is a general way to produce fractals like the [Sierpinski triangle](https://en.wikipedia.org/wiki/Sierpinski_triangle)
    or [Barnsley fern](https://en.wikipedia.org/wiki/Barnsley_fern). As a first example,
    consider the following simple process: Start by plotting a point at one of the
    vertices of an equilateral triangle. Then pick one of the three vertices at random
    and plot a new point halfway between the point just plotted and that vertex. Continue
    performing the same operation.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Iterated function system](../Images/9f85fbf9d76716c8cb26f2bb3fe76188.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: '[Sierpinski.java](Sierpinski.java.html) simulates this process. Below are snapshots
    after 1,000, 10,000, and 100,000 steps.'
  prefs: []
  type: TYPE_NORMAL
- en: '| ![chaos game with 1,000 points](../Images/192178ce188a8f31eeeb6ca4cd13bdb9.png)
    |      | ![chaos game with 10,000 points](../Images/dfb5a428a0035a4c53441412d473f664.png)
    |      | ![chaos game with 100,000 points](../Images/f56b527fbdc550ebf867b68aeba9a6f6.png)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '[IFS.java](IFS.java.html) is a data-driven version program that simulates a
    generalization of this process. You can run it on the inputs [sierpinski.txt](sierpinski.txt),
    [barnsley.txt](barnsley.txt), [tree.txt](tree.txt), and [coral.txt](coral.txt).'
  prefs: []
  type: TYPE_NORMAL
- en: '![Iterated function system examples](../Images/0e214d0b393091d915b3dd999e58f074.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Standard statistics.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[StdStats.java](StdStats.java.html) is a library for statistical calculations
    and basic visualizations.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Standard Statistics API](../Images/7fc599c4e9f62cbe069bbf29e1a1d16f.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Bernoulli trials.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Bernoulli.java](Bernoulli.java.html) counts the number of heads found when
    a fair coin is flipped *n* times and compares the result with the predicted Gaussian
    distribution function. According to the [Central Limit Theorem](http://mathworld.wolfram.com/CentralLimitTheorem.html),
    the resulting histogram is extremely well approximated by the Gaussian distribution
    with mean *n*/2 and variance *n*/4.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Histogram of flipping 20 coins, 100000 times](../Images/02362d7379f9cdf90b1906e24a2ddd07.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Add to [Gaussian.java](Gaussian.java.html) an implementation of the three-argument
    static method `pdf(x, mu, sigma)` specified in the API that computes the Gaussian
    probability density function with a given mean μ and standard deviation σ, based
    on the formula \(\phi(x, \mu, \sigma)\) = \(\phi((x - \mu) / \sigma) / \sigma\).
    Also add an implementation of the associated cumulative distribution function
    `cdf(z, mu, sigma)`, based on the formula \(\Phi(z, \mu, \sigma)\) = \(\Phi((z
    - \mu) / \sigma)\).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a library of static method [Hyperbolic.java](Hyperbolic.java.html) that
    implements the *hyperbolic* functions based on the definitions \(\sinh(x) = (e^x
    - e^{-x}) / 2\) and \(\cosh(x) = (e^x + e^{-x}) / 2\), with \(\tanh(x)\), \(\coth(x)\),
    \(\text{sech}(x)\), and \(\text{csch}(x)\) defined in a manner analogous to standard
    trigonometric functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add to [StdRandom.java](StdRandom.java.html) a method `shuffle()` that takes
    an array of `double` values as argument and rearranges them in random order. Implement
    a test client that checks that each permutation of the array is produced about
    the same number of times. Add overloaded methods that take arrays of integers
    and strings.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Develop a full implementation of [StdArrayIO.java](StdArrayIO.java.html) (implement
    all 12 methods indicated in the API).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write a library [Matrix.java](Matrix.java.html) that implements the following
    API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Matrix API](../Images/a578f74b1d8403c5cb49910c6f373815.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: Write a [Matrix.java](Matrix.java.html) client [MarkovSquaring.java](MarkovSquaring.java.html)
    that implements the version of [Markov.java](../16pagerank/Markov.java.html) described
    in Section 1.6 but is based on squaring the matrix, instead of iterating the vector–matrix
    multiplication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creative Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Sicherman dice.** Suppose that you have two six-sided dice, one with faces
    labeled 1, 3, 4, 5, 6, and 8 and the other with faces labeled 1, 2, 2, 3, 3, and
    4\. Write a program [Sicherman.java](Sicherman.java.html) to compare the probabilities
    of occurrence of each of the values of the sum of the dice with those for a standard
    pair of dice. Use `StdRandom` and `StdStats`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*: dice with these properties are called [Sicherman dice](http://www.grand-illusions.com/toyshop/sicherman_dice/):
    they produce sums with the same frequency as regular dice (2 with probability
    1/36, 3 with probability 2/36, and so on).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Web Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Sample standard deviation.** The *sample standard deviation* of a sequence
    of *n* observations is defined similar to the standard deviation except that we
    divide by *n*−1 instead of *n*. Add a method `sampleStddev()` that computes this
    quantity.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Barnsley fern.** Write a program [Barnsley.java](Barnsley.java.html) that
    takes a command line argument N and plots a sequence of N points according to
    the following rules. Set (x, y) = (0.5, 0). Then update (x, y) to one of the following
    four quantities according to the probabilities given.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| PROBABILITY | NEW X | NEW Y |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 2% | 0.5 | 0.27y |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 15% | -0.139x + 0.263y + 0.57 | 0.246x + 0.224y - 0.036 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 13% | 0.170x - 0.215y + 0.408 | 0.222x + 0.176y + 0.0893 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 70% | 0.781x + 0.034y + 0.1075 | -0.032x + 0.739y + 0.27 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: The pictures below show the results after 500, 1000, and 10,000 iterations.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ![Barnsley fern](../Images/5614290cd45a155eecf3b92a5607d86b.png) | ![Barnsley
    fern](../Images/3e2c995f375686f0a39e711f34cb5fbf.png) | ![Barnsley fern](../Images/40e1da33f68a1844be4f69aa2f4a5518.png)
    |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '**Black-Scholes.** The [Black-Scholes](http://en.wikipedia.org/wiki/Black-Scholes)
    model predicts that the asset price at time t will be S'' = S exp { (rt - 0.5*sigma^2*t
    + sigma ε sqrt(t) }, where epsilon is a standard Gaussian random variable. Can
    use Monte Carlo simulate to estimate. To estimate the value of the option at time
    T, compute max(S'' - X, 0) and take mean over many trials of epsilon. The value
    of the option today is e^-rT * mean. European put = max(X - S'', 0). Reuse function.
    Name your program [BlackScholes.java](BlackScholes.java.html). See Exercise 2.1.30
    for an exact formula for this case.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Simulation.** Application: some kind of simulation which uses `StdRandom`
    and `StdStats` to flip coins and analyze mean/variance. [Ex: physics, financial
    based on [Black-Scholes hedge simulation](http://dybfin.wustl.edu/teaching/compufin/slides/cfinl5.html).
    Simulation needed to price options whose payoff depends on the price path, not
    just the price at the maturity time T. Ex: Asian average price call = max(0, S_bar
    - X) where S_bar is the average price of the asset from time 0 to T. [Lookback
    option](http://finance.bi.no/~bernt/gcc_prog/recipes/recipes/node14.html) = max(0,
    S(T) - min_t S_t). Idea: discretize time into N periods.] [another reference](http://www.scieng.ed.ac.uk/Students/Awards/Optionpricing.pdf)
    Break up simulation into various pieces encapsulated as functions.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Flaming fractals.** Implement a generalization of IFS to produce [fractal
    flames](http://www.flam3.com/) like [Water Lilies](flaming-fractal.jpg) by [Roger
    Johnston](http://content.techrepublic.com.com/2346-10878_11-33277.html?tag=gald).
    Flaming fractals differ from classic IFS by using nonlinear update functions (sinusoidal,
    spherical, swirl, horseshoe), using a log-density display to color pixels according
    to how many times they result in the process, and incorporating color based on
    which rule was applied to get to that point.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Random point on a sphere.** Use `StdRandom.gaussian()` to generate a random
    point on the surface of a sphere or hypersphere using the following method: generate
    N random values from the gaussian distribution, x[0], ..., x[N-1]. Then (x[0]/scale,
    ..., x[N-1]/scale) is a random point on the N-dimensional sphere, where scale
    = sqrt(x[0]^2 + ... + x[N-1]^2).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Coupon collector.** Write a modular program [CouponExperiment.java](CouponExperiment.java.html)
    that runs experiments to estimate the value of the quantity of interest in the
    coupon collector problem. Compare the experimental results from your program with
    the mathematical analysis, which says that the expected number of coupons collected
    before all N values are found should be about N times the Nth Harmonic number
    (1 + 1/2 + 1/3 + ... + 1/N) and the standard deviation should be about N π / sqrt(6).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Exponential distribution.** Add a method `exp()` to [StdRandom.java](StdRandom.java.html)
    that takes an argument λ and returns a random number from the *exponential distribution*
    with rate λ. Hint: If *x* is a random number uniformly distributed between 0 and
    1, then -ln *x* / λ is a random number from the exponential distribution with
    rate λ.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
