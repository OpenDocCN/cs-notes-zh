- en: 2.2   Libraries and Clients
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.2   库和客户端
- en: 原文：[https://introcs.cs.princeton.edu/java/22library](https://introcs.cs.princeton.edu/java/22library)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/java/22library](https://introcs.cs.princeton.edu/java/22library)
- en: 'Each program that you have written consists of Java code that resides in a
    single `.java` file. For large programs, keeping all the code in a single file
    is restrictive and unnecessary. Fortunately, it is very easy in Java to refer
    to a method in one file that is defined in another. This ability has two important
    consequences on our style of programming:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 您编写的每个程序都包含在一个`.java`文件中的Java代码。对于大型程序，将所有代码放在一个文件中是受限制和不必要的。幸运的是，在Java中很容易引用另一个文件中定义的方法。这种能力对我们的编程风格有两个重要的影响：
- en: It allows us to *extend the Java language* by developing libraries of static
    methods for use by any other program, keeping each library in its own file.
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它允许我们通过开发静态方法库来*扩展Java语言*，供任何其他程序使用，每个库都保存在自己的文件中。
- en: It enables *modular programming*, where we divide a program up into static methods,
    grouped together in some logical way.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它实现了*模块化编程*，我们将程序分成静态方法，以某种逻辑方式进行分组。
- en: Using static methods in other programs.
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在其他程序中使用静态方法。
- en: To refer to a static method in one class that is defined in another, you must
    make both classes accessible to Java (for example, by putting them both in the
    same directory in your computer). Then, to call a method, prepend its class name
    and a period separator. For example, [SAT.java](SAT.java.html) calls the `cdf()`
    method in [Gaussian.java](Gaussian.java.html), which calls the `pdf()` method,
    which calls the `exp()` and `sqrt()` methods in [Math](https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html).
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 要引用另一个类中定义的静态方法，您必须使Java可以访问这两个类（例如，通过将它们都放在计算机上的同一目录中）。然后，要调用方法，请在其类名和句点分隔符之前添加。例如，[SAT.java](SAT.java.html)
    调用[Gaussian.java](Gaussian.java.html) 中的`cdf()`方法，后者调用`pdf()`方法，后者调用[Math](https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html)中的`exp()`和`sqrt()`方法。
- en: '![Modular programming diagram](../Images/08a4c662eefda06deca9e68e4a8aaba9.png)'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![模块化编程图示](../Images/08a4c662eefda06deca9e68e4a8aaba9.png)'
- en: We describe several details about the process.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们描述了有关该过程的几个细节。
- en: '*The public keyword.* The `public` modifier identifies the method as available
    for use by any other program. You can also identify methods as `private`, but
    you have no reason to do so at this point.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*public关键字。* `public`修饰符将方法标识为可供任何其他程序使用。您也可以将方法标识为`private`，但在此时您没有理由这样做。'
- en: '*Each module is a class.* We use the term *module* to refer to all the code
    that we keep in a single file. By convention, each module is a Java class that
    is kept in a file with the same name of the class but has a `.java` extension.
    In this chapter, each class is merely a set of static methods.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*每个模块都是一个类。* 我们使用术语*模块*来指代我们在单个文件中保留的所有代码。按照惯例，每个模块都是一个Java类，保存在与类同名但具有`.java`扩展名的文件中。在本章中，每个类仅仅是一组静态方法。'
- en: '*The .class file.* When you compile the program, the Java compiler makes a
    file with the class name followed by a `.class` extension that has the code of
    your program in a language more suited to your computer.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*.class文件。* 当您编译程序时，Java编译器会生成一个以类名开头，后跟`.class`扩展名的文件，其中包含您的程序代码，以适合计算机的语言编写。'
- en: '*Compile when necessary.* When you compile a program, Java typically compiles
    everything that needs to be compiled in order to run the program. For example,
    when you type `javac SAT.java`, the compiler will also check whether you modified
    `Gaussian.java` since the last time it was compiled. If so, it will also compile
    `Gaussian`.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*必要时编译。* 当您编译程序时，Java通常会编译运行程序所需的所有内容。例如，当您键入`javac SAT.java`时，编译器还会检查自上次编译以来是否修改了`Gaussian.java`。如果是这样，它还会编译`Gaussian`。'
- en: '*Multiple `main()` methods.* Both [SAT.java](SAT.java.html) and [Gaussian.java](Gaussian.java.html)
    have their own `main()` method. When you type `java` followed by a class name,
    Java transfers control to the machine code corresponding to the `main()` method
    defined in that class.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*多个`main()`方法。* [SAT.java](SAT.java.html) 和[Gaussian.java](Gaussian.java.html)都有自己的`main()`方法。当您键入`java`后跟类名时，Java将控制转移到该类中定义的`main()`方法对应的机器代码。'
- en: '![Client, API, and Implementation](../Images/fe54cc3bca2868d5b52704ec28427319.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![客户端、API和实现](../Images/fe54cc3bca2868d5b52704ec28427319.png)'
- en: Libraries.
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 库。
- en: We refer to a module whose methods are primarily intended for use by many other
    programs as a *library*.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将那些方法主要用于许多其他程序的模块称为*库*。
- en: '*Clients.* We use the term *client* to refer to a program that calls a given
    library method.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*客户端。* 我们使用术语*客户端*来指代调用给定库方法的程序。'
- en: '*APIs.* Programmers normally think in terms of a *contract* between the client
    and the implementation that is a clear specification of what the method is to
    do.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*API。* 程序员通常以客户端和实现之间的*合同*来思考，这是方法应该执行的明确规范。'
- en: '*Implementations.* We use the term *implementation* to describe the Java code
    that implements the methods in an API.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实现。* 我们使用术语*实现*来描述实现API中方法的Java代码。'
- en: 'As an example, [Gaussian.java](Gaussian.java.html) is an implementation of
    the following API:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，[Gaussian.java](Gaussian.java.html) 是以下API的实现：
- en: '![Gaussian API](../Images/f8164ed7b1ae44ff509bd9c9acdc8f0c.png)'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![高斯API](../Images/f8164ed7b1ae44ff509bd9c9acdc8f0c.png)'
- en: Random numbers.
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机数。
- en: '[StdRandom.java](StdRandom.java.html) is a library for generating random numbers
    from various distributions.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[StdRandom.java](StdRandom.java.html) 是一个用于从各种分布生成随机数的库。'
- en: '![Standard random API](../Images/7d3be812da4ce1d354533066395c0a25.png)'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![标准随机API](../Images/7d3be812da4ce1d354533066395c0a25.png)'
- en: Input and output for arrays.
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组的输入和输出。
- en: '[StdArrayIO.java](StdArrayIO.java.html) is a library for reading arrays of
    primitive types from standard input and printing them to standard output.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '[StdArrayIO.java](StdArrayIO.java.html) 是一个用于从标准输入读取原始类型数组并将其打印到标准输出的库。'
- en: '![Standard array IO](../Images/bcfcd188420bb95a4f5c8ba663769e6f.png)'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![标准数组IO](../Images/bcfcd188420bb95a4f5c8ba663769e6f.png)'
- en: Iterated function systems.
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 迭代函数系统。
- en: 'An [Iterated function system](http://www.cut-the-knot.org/ctk/ifs.shtml) (IFS)
    is a general way to produce fractals like the [Sierpinski triangle](https://en.wikipedia.org/wiki/Sierpinski_triangle)
    or [Barnsley fern](https://en.wikipedia.org/wiki/Barnsley_fern). As a first example,
    consider the following simple process: Start by plotting a point at one of the
    vertices of an equilateral triangle. Then pick one of the three vertices at random
    and plot a new point halfway between the point just plotted and that vertex. Continue
    performing the same operation.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '[迭代函数系统](http://www.cut-the-knot.org/ctk/ifs.shtml)（IFS）是生成分形图像如[谢尔宾斯基三角形](https://en.wikipedia.org/wiki/Sierpinski_triangle)或[巴恩斯利蕨](https://en.wikipedia.org/wiki/Barnsley_fern)的一般方法。作为第一个例子，考虑以下简单过程：从等边三角形的一个顶点开始绘制一个点。然后随机选择三个顶点中的一个，并在刚刚绘制的点与该顶点之间的中点处绘制一个新点。继续执行相同的操作。'
- en: '![Iterated function system](../Images/9f85fbf9d76716c8cb26f2bb3fe76188.png)'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![迭代函数系统](../Images/9f85fbf9d76716c8cb26f2bb3fe76188.png)'
- en: '[Sierpinski.java](Sierpinski.java.html) simulates this process. Below are snapshots
    after 1,000, 10,000, and 100,000 steps.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[Sierpinski.java](Sierpinski.java.html)模拟这一过程。以下是1,000、10,000和100,000步后的快照。'
- en: '| ![chaos game with 1,000 points](../Images/192178ce188a8f31eeeb6ca4cd13bdb9.png)
    |      | ![chaos game with 10,000 points](../Images/dfb5a428a0035a4c53441412d473f664.png)
    |      | ![chaos game with 100,000 points](../Images/f56b527fbdc550ebf867b68aeba9a6f6.png)
    |'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ![1,000个点的混沌游戏](../Images/192178ce188a8f31eeeb6ca4cd13bdb9.png) |      |
    ![10,000个点的混沌游戏](../Images/dfb5a428a0035a4c53441412d473f664.png) |      | ![100,000个点的混沌游戏](../Images/f56b527fbdc550ebf867b68aeba9a6f6.png)
    |'
- en: '[IFS.java](IFS.java.html) is a data-driven version program that simulates a
    generalization of this process. You can run it on the inputs [sierpinski.txt](sierpinski.txt),
    [barnsley.txt](barnsley.txt), [tree.txt](tree.txt), and [coral.txt](coral.txt).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '[IFS.java](IFS.java.html)是一个模拟这一过程的数据驱动版本程序的通用化。您可以在输入[sierpinski.txt](sierpinski.txt)、[barnsley.txt](barnsley.txt)、[tree.txt](tree.txt)和[coral.txt](coral.txt)上运行它。'
- en: '![Iterated function system examples](../Images/0e214d0b393091d915b3dd999e58f074.png)'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![迭代函数系统示例](../Images/0e214d0b393091d915b3dd999e58f074.png)'
- en: Standard statistics.
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准统计。
- en: '[StdStats.java](StdStats.java.html) is a library for statistical calculations
    and basic visualizations.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '[StdStats.java](StdStats.java.html)是一个用于统计计算和基本可视化的库。'
- en: '![Standard Statistics API](../Images/7fc599c4e9f62cbe069bbf29e1a1d16f.png)'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![标准统计API](../Images/7fc599c4e9f62cbe069bbf29e1a1d16f.png)'
- en: Bernoulli trials.
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伯努利试验。
- en: '[Bernoulli.java](Bernoulli.java.html) counts the number of heads found when
    a fair coin is flipped *n* times and compares the result with the predicted Gaussian
    distribution function. According to the [Central Limit Theorem](http://mathworld.wolfram.com/CentralLimitTheorem.html),
    the resulting histogram is extremely well approximated by the Gaussian distribution
    with mean *n*/2 and variance *n*/4.'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[Bernoulli.java](Bernoulli.java.html)计算在抛掷公平硬币*n*次时找到正面的次数，并将结果与预测的高斯分布函数进行比较。根据[中心极限定理](http://mathworld.wolfram.com/CentralLimitTheorem.html)，得到的直方图极好地近似于均值为*n*/2，方差为*n*/4的高斯分布。'
- en: '![Histogram of flipping 20 coins, 100000 times](../Images/02362d7379f9cdf90b1906e24a2ddd07.png)'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![抛掷20枚硬币，100000次的直方图](../Images/02362d7379f9cdf90b1906e24a2ddd07.png)'
- en: Exercises
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Add to [Gaussian.java](Gaussian.java.html) an implementation of the three-argument
    static method `pdf(x, mu, sigma)` specified in the API that computes the Gaussian
    probability density function with a given mean μ and standard deviation σ, based
    on the formula \(\phi(x, \mu, \sigma)\) = \(\phi((x - \mu) / \sigma) / \sigma\).
    Also add an implementation of the associated cumulative distribution function
    `cdf(z, mu, sigma)`, based on the formula \(\Phi(z, \mu, \sigma)\) = \(\Phi((z
    - \mu) / \sigma)\).
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[Gaussian.java](Gaussian.java.html)中添加一个实现了三个参数的静态方法`pdf(x, mu, sigma)`，该方法根据给定的均值μ和标准差σ计算高斯概率密度函数，公式为\(\phi(x,
    \mu, \sigma)\) = \(\phi((x - \mu) / \sigma) / \sigma\)。还添加一个实现了相关累积分布函数`cdf(z,
    mu, sigma)`的方法，公式为\(\Phi(z, \mu, \sigma)\) = \(\Phi((z - \mu) / \sigma)\)。
- en: Write a library of static method [Hyperbolic.java](Hyperbolic.java.html) that
    implements the *hyperbolic* functions based on the definitions \(\sinh(x) = (e^x
    - e^{-x}) / 2\) and \(\cosh(x) = (e^x + e^{-x}) / 2\), with \(\tanh(x)\), \(\coth(x)\),
    \(\text{sech}(x)\), and \(\text{csch}(x)\) defined in a manner analogous to standard
    trigonometric functions.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个静态方法库[Hyperbolic.java](Hyperbolic.java.html)，根据定义\(\sinh(x) = (e^x - e^{-x})
    / 2\)和\(\cosh(x) = (e^x + e^{-x}) / 2\)，实现*双曲*函数，其中\(\tanh(x)\)、\(\coth(x)\)、\(\text{sech}(x)\)和\(\text{csch}(x)\)的定义方式类似于标准三角函数。
- en: Add to [StdRandom.java](StdRandom.java.html) a method `shuffle()` that takes
    an array of `double` values as argument and rearranges them in random order. Implement
    a test client that checks that each permutation of the array is produced about
    the same number of times. Add overloaded methods that take arrays of integers
    and strings.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[StdRandom.java](StdRandom.java.html)中添加一个方法`shuffle()`，该方法以`double`值数组作为参数，并以随机顺序重新排列它们。实现一个测试客户端，检查数组的每个排列大致相同次数地产生。添加重载方法，接受整数和字符串数组。
- en: Develop a full implementation of [StdArrayIO.java](StdArrayIO.java.html) (implement
    all 12 methods indicated in the API).
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发一个完整的[StdArrayIO.java](StdArrayIO.java.html)实现（实现API中指示的所有12个方法）。
- en: 'Write a library [Matrix.java](Matrix.java.html) that implements the following
    API:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个实现以下API的库[Matrix.java](Matrix.java.html)：
- en: '![Matrix API](../Images/a578f74b1d8403c5cb49910c6f373815.png)'
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![矩阵API](../Images/a578f74b1d8403c5cb49910c6f373815.png)'
- en: Write a [Matrix.java](Matrix.java.html) client [MarkovSquaring.java](MarkovSquaring.java.html)
    that implements the version of [Markov.java](../16pagerank/Markov.java.html) described
    in Section 1.6 but is based on squaring the matrix, instead of iterating the vector–matrix
    multiplication.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个[Matrix.java](Matrix.java.html)客户端[MarkovSquaring.java](MarkovSquaring.java.html)，实现第1.6节中描述的[Markov.java](../16pagerank/Markov.java.html)版本，但是基于矩阵的平方，而不是迭代向量-矩阵乘法。
- en: Creative Exercises
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
- en: '**Sicherman dice.** Suppose that you have two six-sided dice, one with faces
    labeled 1, 3, 4, 5, 6, and 8 and the other with faces labeled 1, 2, 2, 3, 3, and
    4\. Write a program [Sicherman.java](Sicherman.java.html) to compare the probabilities
    of occurrence of each of the values of the sum of the dice with those for a standard
    pair of dice. Use `StdRandom` and `StdStats`.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Sicherman骰子。** 假设你有两个六面骰子，一个面标有1、3、4、5、6和8，另一个面标有1、2、2、3、3和4。编写一个程序[Sicherman.java](Sicherman.java.html)来比较每个骰子和标准骰子的和值出现概率。使用`StdRandom`和`StdStats`。'
- en: '*Solution*: dice with these properties are called [Sicherman dice](http://www.grand-illusions.com/toyshop/sicherman_dice/):
    they produce sums with the same frequency as regular dice (2 with probability
    1/36, 3 with probability 2/36, and so on).'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：具有这些属性的骰子称为[Sicherman骰子](http://www.grand-illusions.com/toyshop/sicherman_dice/)：它们产生与常规骰子相同频率的和（2的概率为1/36，3的概率为2/36，依此类推）。'
- en: Web Exercises
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络练习
- en: '**Sample standard deviation.** The *sample standard deviation* of a sequence
    of *n* observations is defined similar to the standard deviation except that we
    divide by *n*−1 instead of *n*. Add a method `sampleStddev()` that computes this
    quantity.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**样本标准差。** 一系列n个观测值的*样本标准差*类似于标准差，只是我们除以*n*−1而不是*n*。添加一个计算这个量的方法`sampleStddev()`。'
- en: '**Barnsley fern.** Write a program [Barnsley.java](Barnsley.java.html) that
    takes a command line argument N and plots a sequence of N points according to
    the following rules. Set (x, y) = (0.5, 0). Then update (x, y) to one of the following
    four quantities according to the probabilities given.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Barnsley蕨类植物。** 编写一个程序[Barnsley.java](Barnsley.java.html)，接受一个命令行参数N，并根据以下规则绘制N个点的序列。设(x,
    y) = (0.5, 0)。然后根据给定的概率将(x, y)更新为以下四个量之一。'
- en: '| PROBABILITY | NEW X | NEW Y |'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 概率 | 新X | 新Y |'
- en: '| 2% | 0.5 | 0.27y |'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 2% | 0.5 | 0.27y |'
- en: '| 15% | -0.139x + 0.263y + 0.57 | 0.246x + 0.224y - 0.036 |'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 15% | -0.139x + 0.263y + 0.57 | 0.246x + 0.224y - 0.036 |'
- en: '| 13% | 0.170x - 0.215y + 0.408 | 0.222x + 0.176y + 0.0893 |'
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 13% | 0.170x - 0.215y + 0.408 | 0.222x + 0.176y + 0.0893 |'
- en: '| 70% | 0.781x + 0.034y + 0.1075 | -0.032x + 0.739y + 0.27 |'
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 70% | 0.781x + 0.034y + 0.1075 | -0.032x + 0.739y + 0.27 |'
- en: The pictures below show the results after 500, 1000, and 10,000 iterations.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下面的图片显示了500、1000和10,000次迭代后的结果。
- en: '| ![Barnsley fern](../Images/5614290cd45a155eecf3b92a5607d86b.png) | ![Barnsley
    fern](../Images/3e2c995f375686f0a39e711f34cb5fbf.png) | ![Barnsley fern](../Images/40e1da33f68a1844be4f69aa2f4a5518.png)
    |'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| ![Barnsley fern](../Images/5614290cd45a155eecf3b92a5607d86b.png) | ![Barnsley
    fern](../Images/3e2c995f375686f0a39e711f34cb5fbf.png) | ![Barnsley fern](../Images/40e1da33f68a1844be4f69aa2f4a5518.png)
    |'
- en: '**Black-Scholes.** The [Black-Scholes](http://en.wikipedia.org/wiki/Black-Scholes)
    model predicts that the asset price at time t will be S'' = S exp { (rt - 0.5*sigma^2*t
    + sigma ε sqrt(t) }, where epsilon is a standard Gaussian random variable. Can
    use Monte Carlo simulate to estimate. To estimate the value of the option at time
    T, compute max(S'' - X, 0) and take mean over many trials of epsilon. The value
    of the option today is e^-rT * mean. European put = max(X - S'', 0). Reuse function.
    Name your program [BlackScholes.java](BlackScholes.java.html). See Exercise 2.1.30
    for an exact formula for this case.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Black-Scholes。** [Black-Scholes](http://en.wikipedia.org/wiki/Black-Scholes)模型预测时间t时的资产价格将为S''
    = S exp { (rt - 0.5*sigma^2*t + sigma ε sqrt(t) }，其中epsilon是标准高斯随机变量。可以使用蒙特卡洛模拟来估计。要估算时间T时期权的价值，计算max(S''
    - X, 0)并在epsilon的许多试验中取平均值。今天期权的价值为e^-rT * 平均值。欧式看跌期权= max(X - S'', 0)。重用函数。将程序命名为[BlackScholes.java](BlackScholes.java.html)。参见练习2.1.30中针对此情况的精确公式。'
- en: '**Simulation.** Application: some kind of simulation which uses `StdRandom`
    and `StdStats` to flip coins and analyze mean/variance. [Ex: physics, financial
    based on [Black-Scholes hedge simulation](http://dybfin.wustl.edu/teaching/compufin/slides/cfinl5.html).
    Simulation needed to price options whose payoff depends on the price path, not
    just the price at the maturity time T. Ex: Asian average price call = max(0, S_bar
    - X) where S_bar is the average price of the asset from time 0 to T. [Lookback
    option](http://finance.bi.no/~bernt/gcc_prog/recipes/recipes/node14.html) = max(0,
    S(T) - min_t S_t). Idea: discretize time into N periods.] [another reference](http://www.scieng.ed.ac.uk/Students/Awards/Optionpricing.pdf)
    Break up simulation into various pieces encapsulated as functions.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**模拟。** 应用：某种使用`StdRandom`和`StdStats`翻转硬币并分析均值/方差的模拟。[例如：基于[Black-Scholes对冲模拟](http://dybfin.wustl.edu/teaching/compufin/slides/cfinl5.html)的物理、金融模拟。模拟需要定价依赖于价格路径而不仅仅是到期时间T的期权。例如：亚洲平均价格看涨期权=
    max(0, S_bar - X)，其中S_bar是从时间0到T资产的平均价格。[回顾期权](http://finance.bi.no/~bernt/gcc_prog/recipes/recipes/node14.html)
    = max(0, S(T) - min_t S_t)。思路：将时间离散化为N个期间。] [另一个参考资料](http://www.scieng.ed.ac.uk/Students/Awards/Optionpricing.pdf)
    将模拟分解为各种封装为函数的部分。'
- en: '**Flaming fractals.** Implement a generalization of IFS to produce [fractal
    flames](http://www.flam3.com/) like [Water Lilies](flaming-fractal.jpg) by [Roger
    Johnston](http://content.techrepublic.com.com/2346-10878_11-33277.html?tag=gald).
    Flaming fractals differ from classic IFS by using nonlinear update functions (sinusoidal,
    spherical, swirl, horseshoe), using a log-density display to color pixels according
    to how many times they result in the process, and incorporating color based on
    which rule was applied to get to that point.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**火焰分形。** 实现IFS的一般化，以生成类似[Water Lilies](flaming-fractal.jpg)的[分形火焰](http://www.flam3.com/)，由[Roger
    Johnston](http://content.techrepublic.com.com/2346-10878_11-33277.html?tag=gald)。火焰分形与经典IFS不同，它使用非线性更新函数（正弦、球形、漩涡、马蹄铁），使用对数密度显示根据它们导致过程的次数对像素进行着色，并根据应用哪个规则到达该点来加入颜色。'
- en: '**Random point on a sphere.** Use `StdRandom.gaussian()` to generate a random
    point on the surface of a sphere or hypersphere using the following method: generate
    N random values from the gaussian distribution, x[0], ..., x[N-1]. Then (x[0]/scale,
    ..., x[N-1]/scale) is a random point on the N-dimensional sphere, where scale
    = sqrt(x[0]^2 + ... + x[N-1]^2).'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**球面上的随机点。** 使用`StdRandom.gaussian()`生成球面或超球面表面上的随机点，方法如下：从高斯分布生成N个随机值x[0]，...，x[N-1]。然后(x[0]/scale,
    ..., x[N-1]/scale)是N维球面上的随机点，其中scale = sqrt(x[0]^2 + ... + x[N-1]^2)。'
- en: '**Coupon collector.** Write a modular program [CouponExperiment.java](CouponExperiment.java.html)
    that runs experiments to estimate the value of the quantity of interest in the
    coupon collector problem. Compare the experimental results from your program with
    the mathematical analysis, which says that the expected number of coupons collected
    before all N values are found should be about N times the Nth Harmonic number
    (1 + 1/2 + 1/3 + ... + 1/N) and the standard deviation should be about N π / sqrt(6).'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**优惠券收集者。** 编写一个模块化程序[CouponExperiment.java](CouponExperiment.java.html)，运行实验来估计优惠券收集者问题中感兴趣的数量的值。将您的程序的实验结果与数学分析进行比较，数学分析表明，在找到所有N个值之前收集的优惠券的期望数量应该大约是N倍第N个调和数（1
    + 1/2 + 1/3 + ... + 1/N），标准偏差应该大约是N π / sqrt(6)。'
- en: '**Exponential distribution.** Add a method `exp()` to [StdRandom.java](StdRandom.java.html)
    that takes an argument λ and returns a random number from the *exponential distribution*
    with rate λ. Hint: If *x* is a random number uniformly distributed between 0 and
    1, then -ln *x* / λ is a random number from the exponential distribution with
    rate λ.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**指数分布。** 在[StdRandom.java](StdRandom.java.html)中添加一个名为`exp()`的方法，该方法接受一个参数λ，并返回一个以速率λ为参数的*指数分布*中的随机数。提示：如果*x*是在0和1之间均匀分布的随机数，则-ln
    *x* / λ是从速率λ的指数分布中的随机数。'
