- en: 1.2   Built-in Types of Data
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://introcs.cs.princeton.edu/java/12types](https://introcs.cs.princeton.edu/java/12types)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A *data type* is a set of values and a set of operations defined on them. For
    example, we are familiar with numbers and with operations defined on them such
    as addition and multiplication. There are eight different built-in types of data
    in Java, mostly different kinds of numbers. We use the system type for strings
    of characters so frequently that we also consider it here.
  prefs: []
  type: TYPE_NORMAL
- en: '![built-in data types](../Images/9a0cdd93e50c2ec18c98b19e959e5520.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: '**Terminology.** We use the following code fragment to introduce some terminology:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The first line is a *declaration statement* that declares the names of three
    *variables* using the *identifiers* `a`, `b`, and c and their type to be `int`.
    The next three lines are *assignment statements* that change the values of the
    variables, using the *literals* `1234` and `99`, and the *expression* `a + b`,
    with the end result that `c` has the value `1333`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Characters and strings.** A `char` is an alphanumeric character or symbol,
    like the ones that you type. We usually do not perform any operations on characters
    other than assigning values to variables. A `String` is a sequence of characters.
    The most common operation that we perform on strings is known as *concatenation*:
    given two strings, chain them together to make a new string. For example, consider
    the following Java program fragment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The first statement declares three variables to be of type `String`. The next
    three statements assign values to them, with the end result that `c` has the value
    `"Hello, Bob"`. Using string concatenation, [Ruler.java](Ruler.java.html) prints
    the relative lengths of the subdivisions on a ruler.
  prefs: []
  type: TYPE_NORMAL
- en: '**Integers.** An `int` is an integer (whole number) between −2^(31) and 2^(31)
    − 1   (−2,147,483,648 to 2,147,483,647). We use `int`s frequently not just because
    they occur frequently in the real world, but also they naturally arise when expressing
    algorithms. Standard arithmetic operators for addition, multiplication, and division,
    for integers are built into Java, as illustrated in [IntOps.java](IntOps.java.html)
    and the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![int expressions](../Images/20da605b3abe08614c09d0f6a7def893.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: '**Floating-point numbers.** The `double` type is for representing *floating-point*
    numbers, e.g., for use in scientific applications. The internal representation
    is like scientific notation, so that we can compute with real numbers in a huge
    range. We can specify a floating point number using either a string of digits
    with a decimal point, e.g., `3.14159` for a six-digit approximation to the mathematical
    constant pi, or with a notation like scientific notation, e.g., `6.022E23` for
    Avogadro''s constant 6.022 × 10^(23). Standard arithmetic operators for addition,
    multiplication, and division, for doubles are built in to Java, as illustrated
    in [DoubleOps.java](DoubleOps.java.html) and the following table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![double expressions](../Images/21851d84bd07fa7b30e095dc58d8a49e.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: '[Quadratic.java](Quadratic.java.html) shows the use of doubles in computing
    the two roots of a quadratic equation using the quadratic formula.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Booleans.** The `boolean` type has just two values: `true` or `false`. The
    apparent simplicity is deceiving—booleans lie at the foundation of computer science.
    The most important operators defined for the `boolean` are for *and*, *or*, and
    *not*.'
  prefs: []
  type: TYPE_NORMAL
- en: '*and*:  `a && b` is true if both `a` and `b` are true, and false otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*or*:  `a || b` is true if either `a` or `b` is true (or both are true), and
    false otherwise'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*not*:  `!a` is true if `a` is false, and false otherwise.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Although these definitions are intuitive and easy to understand, it is worthwhile
    to fully specify each possibility for each operation in a *truth table*.
  prefs: []
  type: TYPE_NORMAL
- en: '![boolean operations](../Images/57f7a58a1275878f9f270266beca8669.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: '**Comparisons.** The *comparison* operators are *mixed-type* operations that
    take operands of one type (e.g., `int` or `double`) and produce a result of type
    `boolean`. These operations play a critical role in the process of developing
    more sophisticated programs.'
  prefs: []
  type: TYPE_NORMAL
- en: '![comparison operations](../Images/bf43b39fae1ccf51a93cbf4a1d3b541e.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: '[LeapYear.java](LeapYear.java.html) tests whether an integer corresponds to
    a leap year in the Gregorian calendar.'
  prefs: []
  type: TYPE_NORMAL
- en: Library methods and APIs.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many programming tasks involve using Java library methods in addition to the
    built-in operators. An *application programming interface* is a table summarizing
    the methods in a library.
  prefs: []
  type: TYPE_NORMAL
- en: '*Printing strings to the terminal window.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![printing to standard output](../Images/a157a4446e549f0eea018f67baf629df.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*Converting strings to primitive types.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![parsing command-line arguments](../Images/b682c180b76c01dc323d2b352765c5cd.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*Mathematical functions.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![math library](../Images/17b82002dfc1a3813fc6b2aaf93a2c3c.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: 'You can call a method by typing its name followed by *arguments*, enclosed
    in parentheses and separated by commas. Here are some examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '![library calls](../Images/313b31f8778d8e73360ef25a715d6e1a.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: We often find ourselves converting data from one type to another using one of
    the following approaches.
  prefs: []
  type: TYPE_NORMAL
- en: Type conversion.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We often find ourselves converting data from one type to another using one of
    the following approaches.
  prefs: []
  type: TYPE_NORMAL
- en: '*Explicit type conversion*. Call methods such as `Math.round()`, `Integer.parseInt()`,
    and `Double.parseDouble()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Automatic type conversion.* For primitive numeric types, the system automatically
    performs type conversion when we use a value whose type has a larger range of
    values than expected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Explicit casts.* Java also has some built-in type conversion methods for primitive
    types that you can use when you are aware that you might lose information, but
    you have to make your intention using something called a *cast*. [RandomInt.java](RandomInt.java.html)
    reads an integer command-line argument *n* and prints a "random" integer between
    0 and *n*−1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Automatic conversions for strings.* The built-in type `String` obeys special
    rules. One of these special rules is that you can easily convert any type of data
    to a `String` by using the `+` operator.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![type conversion](../Images/ba95aaec3b4e04f69fb7f903a5a19ce1.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Suppose that `a` and `b` are `int` values. What does the following sequence
    of statements do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: sets `a`, `b`, and `t` equal to the original value of `a`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Suppose that `a` and `b` are `int` values. Simplify the following expression:
    `(!(a < b) && !(a > b))`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*: `(a == b)`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The *exclusive or* operator `^` for `boolean` operands is defined to be `true`
    if they are different, `false` if they are the same. Give a truth table for this
    function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Why does `10/3` give `3` and not `3.33333333`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*: Since both 10 and 3 are integer literals, Java sees no need for
    type conversion and uses integer division. You should write `10.0/3.0` if you
    mean the numbers to be `double` literals. If you write `10/3.0` or `10.0/3`, Java
    does implicit conversion to get the same result.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What do each of the following print?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`System.out.println(2 + "bc");` prints: 2bc'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`System.out.println(2 + 3 + "bc");` prints: 5bc'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`System.out.println((2+3) + "bc");` prints: 5bc'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`System.out.println("bc" + (2+3));` prints: bc5'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`System.out.println("bc" + 2 + 3);` prints: bc23'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Explain each outcome.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Explain how to use [Quadratic.java](Quadratic.java.html) to find the square
    root of a number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*: to find the square root of c, find the roots of x^2 + 0x - c.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A physics student gets unexpected results when using the code
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_PRE
- en: to compute values according to the formula *F* = *G**m*[1]*m*[2] / *r*². Explain
    the problem and correct the code.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Solution*: It divides by `r`, then multiplies by `r` (instead of dividing
    by `r *r`). Use parentheses:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_PRE
- en: Write a program [Distance.java](Distance.java.html) that takes two integer command-line
    arguments *x* and *y* and prints the Euclidean distance from the point (*x*, *y*)
    to the origin (0, 0).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program [SumOfTwoDice.java](SumOfTwoDice.java.html) that prints the
    sum of two random integers between 1 and 6 (such as you might get when rolling
    dice).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program [SumOfSines.java](SumOfSines.java.html) that takes a double
    command-line argument t (in degrees) and prints the value of sin(2t) + sin(3t).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program [SpringSeason.java](SpringSeason.java.html) that takes two `int`
    values `m` and `d` from the command line and prints `true` if day `d` of month
    `m` is between March 20 (m = 3, d =20) and June 20 (m = 6, d = 20), `false` otherwise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creative Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Wind chill.** Given the temperature `t` (in Fahrenheit) and the wind speed
    `v` (in miles per hour), the National Weather Service defines the [wind chill](https://www.weather.gov/safety/cold-wind-chill-chart)
    to be:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: w = 35.74 + 0.6215 t + (0.4275 t - 35.75) v^(0.16)
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Write a program [WindChill.java](WindChill.java.html) that takes two `double`
    command-line arguments `t` and `v` and prints the wind chill. Use `Math.pow(a,
    b)` to compute a^b. Note: the formula is not valid if t is larger than 50 in absolute
    value or if v is larger than 120 or less than 3 (you may assume that the values
    you get are in that range).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Polar coordinates.** Write a program [CartesianToPolar.java](CartesianToPolar.java.html)
    that converts from Cartesian to [polar coordinates](http://mathworld.wolfram.com/PolarCoordinates.html).
    Your program should take two real numbers x and y on the command line and print
    the polar coordinates r and θ. Use the Java method `Math.atan2(y, x)`, which computes
    the arctangent value of y/x that is in the range from -π to π.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Day of the week.** Write a program [DayOfWeek.java](DayOfWeek.java.html)
    that takes a date as input and prints the day of the week that date falls on.
    Your program should take three command-line arguments: `m` (month), `d` (day),
    and `y` (year). For `m` use 1 for January, 2 for February, and so forth. For output
    print 0 for Sunday, 1 for Monday, 2 for Tuesday, and so forth. Use the following
    formulas, for the Gregorian calendar (where / denotes integer division):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*y*[0] = *y* − (14 − *m*) / 12'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*x* = *y*[0] + *y*[0] / 4 − *y*[0] / 100 + *y*[0] / 400'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*m*[0] = *m* + 12 × ((14 − *m*) / 12) − 2'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*d*[0] = (*d* + *x* + 31*m*[0] / 12) mod 7'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: For example, on which day of the week did February 14, 2000 fall?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Uniform random numbers.** Write a program [Stats5.java](Stats5.java.html)
    that prints five uniform random values between 0 and 1, their average value, and
    their minimum and maximum value. Use `Math.random()`, `Math.min()`, and `Math.max()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Three-sort.** Write a program [ThreeSort.java](ThreeSort.java.html) that
    takes three <t>int values from the command line and prints them in ascending order.
    Use `Math.min()` and `Math.max()`.</t>'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Dragon curves.** ![Dragon curves](../Images/fbb38f1e25e2d63c915d7d701754e02f.png)
    Write a program [Dragon.java](Dragon.java.html) to print the instructions for
    drawing the [dragon curves](https://en.wikipedia.org/wiki/Dragon_curve) of order
    0 through 5\. The instructions are strings of the characters `F`, `L`, and `R`,
    where `F` means "draw line while moving 1 unit forward", `L` means "turn left",
    and `R` means turn right. A dragon curve of order *n* is formed when you fold
    a strip of paper in half *n* times, then unfold to right angles. The key to solving
    this problem is to note that a curve of order *n* is a curve of order *n*−1 followed
    by an `L` followed by a curve of order *n*−1 traversed in reverse order, and then
    to figure out a similar description of the reverse curve.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Web Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a program [Swap.java](Swap.java.html) that takes two integer command-line
    arguments *a* and *b* and swaps their values using the swapping idiom described
    on p. 17. After each assignment statement, use `System.out.println()` to print
    a trace of the variables.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the following statement do where `grade` is a variable of type `int`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: Syntax error since `<=` is a binary operator. You can rewrite the
    expression as `(90 <= grade && grade <= 100)`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**RGB to YIQ color converter.** Write a program `RGBtoYIQ.java`that takes an
    RGB color (three integers between 0 and 255) and transforms it to a [YIQ color](http://en.wikipedia.org/wiki/YIQ)
    (three different real numbers *Y*, *I*, and *Q*, with 0 ≤ *Y* ≤ 1, –0.5957 ≤ *I*
    ≤ 0.5957, and –0.5226 ≤ *Q* ≤ 0.5226). Write a program `YIQtoRGB.java` that applies
    the inverse transformation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**CMYK to RGB color matching.** Write a program `CMYKtoRGB` that reads in four
    command line inputs C, M, Y, and K between 0 and 1, and prints the corresponding
    RGB parameters. Devise the appropriate formula by "inverting" the RGB to CMYK
    conversion formula.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the following code fragment print?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: It prints `0.0` since the integer division is done before the cast.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Why doesn't the following program print 4294967296 = 2^32?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: The product of the two `int` values is computed as an `int`, and
    then automatically converted to a `long`. But 65536 * 65536 = 2^32 overflows a
    32 bit `int` before it gets converted.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What is the value of `(Math.sqrt(2) * Math.sqrt(2) == 2)`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program [DivideByZero.java](DivideByZero.java.html) to see what happens
    when you divide an `int` or `double` by zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`(17 / 0)` and `(17 % 0)` result in a division by zero exception;'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(17.0 / 0.0)` results in a value `Infinity`;'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(17.0 % 0.0)` results in a value `NaN` that stands for "not a number."'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Guess the biggest number.** Consider the following game. Alice writes down
    two integers between 0 and 100 on two cards. Bob gets to select one of the two
    cards and see its value. After looking at the value, Bob commits to one of the
    two cards. If he chooses a card with the largest value, he wins; otherwise he
    loses. Devise a strategy (and corresponding computer program) for Bob so that
    he guarantees to win strictly more than half the time.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Fibonacci word.** Write a program `FibonacciWord.java` that prints the Fibonacci
    word of order 0 through 10. f(0) = "a", f(1) = "b", f(2) = "ba", f(3) = "bab",
    f(4) = "babba", and in general f(n) = f(n-1) followed by f(n-2). Use string concatenation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Standard deviation.** Modify Exercise 1.2.30 so that it prints the sample
    standard deviation in addition to the average.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program that reads in three parameters and prints `true` if all three
    are equal, and `false` otherwise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What happens if you compile LeapYear.java and execute it with
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: java LeapYear
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: java LeapYear 1975.5
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: java LeapYear -1975
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: java LeapYear 1975 1976 1977
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What does the compiler do if you try to write the following expression:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'What does the compiler do if you try to write the following expression:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: The compiler complains that the variable x might not have been
    initialized. Variables within `main` are not automatically initialized.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What does the following code fragment print.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write a program that takes four real-valued command line parameters x1, y1,
    x2, and y2 and prints the Euclidean distance between the points (x1, y1) and (x2,
    y2). Use `Math.sqrt()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program `Ordered.java` that reads in three integer command line arguments,
    `x`, `y`, and `z`. Create a boolean variable `b` that is `true` if the three values
    are either in ascending or in descending order, and `false` otherwise. Print the
    variable `b`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program [Divisibility.java](Divisibility.java.html) that reads in two
    command line inputs and prints `true` if both are divisible by 7, and `false`
    otherwise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Area of a triangle.** Write a program `TriangleArea.java` that takes three
    command line inputs a, b, and c, representing the side lengths of a triangle,
    and prints the area of the triangle using Heron''s formula: area = sqrt(s(s-a)(s-b)(s-c)),
    where s = (a + b + c) / 2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Equatorial to horizontal coordinates.** The *equatorial coordinate system*
    is widely used by astronomers to indicate the position of a star on the celestial
    sphere. The position is specified by its declination δ, its hour angle H, and
    its latitude φ. The *horizontal coordinate system* (a.k.a. Alt/Az coordinate system)
    is useful for determining the setting/rising time of celestial objects. The position
    is specified by its altitude (vertical angle from the horizon) and and its azimuth
    (horizontal angle). Given a star''s position using equatorial coordinates, find
    its position in horizontal coordinates using the formulas below.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Body mass index.** The [body mass index](http://en.wikipedia.org/wiki/Body_mass_index)
    (BMI) is the ratio of the weight of a person (in kilograms) to the square of the
    height (in meters). Write a program `BMI.java` that takes two command-line arguments,
    `weight` and `height`, and prints the BMI.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Temperature conversion.** What is wrong with the following code fragment
    to convert from Fahrenheit (F) to Celsius (C)?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Exponentiation.** What is wrong with the following code fragment to compute
    a², where `a` is of type `double`?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: In Java, `^` does not mean exponentiation (it''s the exclusive
    or function from logic). Use `a*a` instead. To compute a^x, use `Math.pow(a, x)`.
    Note that `Math.pow()` returns a `double` so that you would need an explicit cast
    if `a` and `b` in the above example were integers.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What of the following statements is legal?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: Only the second one.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Barring overflow, give a code fragment to compute the maximum of two integers
    `a` and `b` without using `Math.max()` or `if`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Discriminant of cubic polynomial.** Given the coefficients b, c, and d of
    the cubic polynomial x^3 + bx^2 + cx + d, write an expression to compute the *discriminant*
    b^2c^2 - 4c^3 - 4b^3d - 27d^2 + 18bcd.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Barycenter.** In a two-body system, the [barycenter](http://en.wikipedia.org/wiki/Barycenter)
    is the center of gravity about which the two celestial bodies orbit each other.
    Given the masses *m*[1] and *m*[2] of two bodies, and the shortest distance *a*
    between the two bodies, write a program to compute the distance from the center
    of the first (more massive) body to the barycenter: *r*[1] = *a* *m*[2] / (*m*[1]
    + *m*[2]).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Here are a few examples. Masses are in earth-mass units, distances are in kilometers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Earth-moon: *m*[1] = 1, *m*[2] = .0123, *a* = 384,000, *r*[1] = 4,670, *R*[1]
    = 6,380.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Pluto-Charon: *m*[1] = .0021, *m*[2] = .000254, *a* = 19,600, *r*[1] = 2,110,
    *R*[1] = 1,150.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Sun-Earth: *m*[1] = 333,000, *m*[2] = 1, *a* = 150,000,000, *r*[1] = 449, *R*[1]
    = 696,000.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that if *r*[1] is less than the radius of the first body *R*[1], then the
    barycenter lies within the first body.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Poison parentheses.** Find a legal Java expression that leads to a compile-time
    error when you add parentheses around a subexpression to to document the order
    of evaluation that would take place in their absence.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*: The literal value 2147483648 (2^31) is permitted only as an operand
    of the unary minus operator, i.e., -2147483648\. Enclosing it in parentheses,
    i.e., -(2147483648), leads to a compile-time error. Similar ideas with the literal
    value 9223372036854775808L (2^63).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Car loan payments.** Write a program [CarLoan.java](CarLoan.java.html) that
    reads in three command-line arguments P, Y, and R and calculates the monthly payments
    you would have to make over Y years to pay off a P dollar loan at R per cent interest
    compounded monthly. The formula is The formula is'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Caveat*: in Chapter 9, we will consider more accurate ways to compute this
    quantity, so before you go off to run an online bank, be sure to learn about roundoff
    error.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Write a program [Trig.java](Trig.java.html) to illustrate various trigonometric
    functions in the `Math` library, such as `Math.sin()`, `Math.cos()`, and `Math.toRadians()`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
