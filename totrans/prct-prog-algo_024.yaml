- en: '4.5   Case Study: Small-World Phenomenon'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.5   案例研究：小世界现象
- en: 原文：[https://introcs.cs.princeton.edu/java/45graph](https://introcs.cs.princeton.edu/java/45graph)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/java/45graph](https://introcs.cs.princeton.edu/java/45graph)
- en: The mathematical model that we use for studying the nature of pairwise connections
    among entities is known as the *graph*. Some graphs exhibit a specific property
    known as the [small-world phenomenon](https://en.wikipedia.org/wiki/Small-world_network).
    It is the basic idea that, even though each of us has relatively few acquaintances,
    there is a relatively short chain of acquaintances separating us from one another.
    ![Graph terminology](../Images/b1ee2e34677a3ee093662231a5ad7647.png)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用于研究实体之间成对连接性质的数学模型称为*图*。一些图表现出一种特定属性，称为[小世界现象](https://en.wikipedia.org/wiki/Small-world_network)。这是一个基本概念，即使我们每个人的熟人相对较少，但我们之间存在着相对较短的熟人链���![图术语](../Images/b1ee2e34677a3ee093662231a5ad7647.png)
- en: Graphs.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图。
- en: A *graph* is comprised of a set of *vertices* and a set of *edges*. Each edge
    represents a connection between two vertices. Two vertices are *neighbors* if
    they are connected by an edge, and the *degree* of a vertex is its number of neighbors.The
    list below suggests the diverse range of systems where graphs are appropriate
    starting points for understanding structure.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*图*由一组*顶点*和一组*边*组成。每条边代表两个顶点之间的连接。如果两个顶点由一条边连接，则它们是*邻居*，而顶点的*度*是其邻居的数量。下面的列表建议了各种系统，其中图是理解结构的合适起点。'
- en: '| GRAPH | VERTICES | EDGES |'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 图 | 顶点 | 边 |'
- en: '| circulatory | organ | blood vessel |'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 循环 | 器官 | 血管 |'
- en: '| skeletal | joint | bone |'
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 骨骼 | 关节 | 骨头 |'
- en: '| nervous | neuron | synapse |'
  id: totrans-8
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 神经 | 神经元 | 突触 |'
- en: '| social | person | relationship |'
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 社交 | 人 | 关系 |'
- en: '| epidemiological | person | infection |'
  id: totrans-10
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 流行病学 | 人 | 感染 |'
- en: '| chemical | molecule | bond |'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 化学 | 分子 | 键 |'
- en: '| n-body | particle | force |'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| n体 | 粒子 | 力 |'
- en: '| genetic | gene | mutation |'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 遗传 | 基因 | 突变 |'
- en: '| biochemical | protein | interaction |'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 生物化学 | 蛋白质 | 相互作用 |'
- en: '| transportation | intersection | road |'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 交通 | 交叉口 | 道路 |'
- en: '| Internet | computer | cable |'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 互联网 | 计算机 | 电缆 |'
- en: '| Web | web page | link |'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 网页 | 网页 | 链接 |'
- en: '| distribution | power station | power line |'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 分布 | 发电站 | 输电线 |'
- en: '| mechanical | joint | beam |'
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 机械 | 关节 | 梁 |'
- en: '| software | module | call |'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 软件 | 模块 | 调用 |'
- en: '| financial | account | transaction |'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 金融 | 账户 | 交易 |'
- en: Graph data type.
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图数据类型。
- en: 'Graph-processing algorithms generally first build an internal representation
    of a graph by adding edges, then process it by iterating over the vertices and
    over the vertices adjacent to a given vertex. The following API supports such
    processing:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图处理算法通常首先通过添加边来构建图的内部表示，然后通过迭代顶点和迭代给定顶点的邻居来处理它。以下API支持这样的处理：
- en: '![Graph API](../Images/da09471d645465e118068af175f228d2.png)'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![图API](../Images/da09471d645465e118068af175f228d2.png)'
- en: Graph implementation.
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图实现。
- en: '![Graph representation](../Images/e7f974141f23bab254f0cc219a8e784d.png) [Graph.java](Graph.java.html)
    implements this API. Its internal representation is a symbol table of sets: the
    keys are vertices and the values are the sets of neighbors (the vertices adjacent
    to the key) This representation uses the two data types [ST.java](ST.java.html)
    and [SET.java](SET.java.html).'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图表示](../Images/e7f974141f23bab254f0cc219a8e784d.png) [Graph.java](Graph.java.html)
    实现了这个API。其内部表示是一组集合的符号表：键是顶点，值是邻居的集合（与键相邻的顶点）此表示使用两种数据类型[ST.java](ST.java.html)和[SET.java](SET.java.html)。'
- en: 'Our implementation has three important properties:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的实现具有三个重要属性：
- en: Clients can efficiently iterate through the graph vertices.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户可以高效地遍历图的顶点。
- en: Clients can efficiently iterate through a vertex's neighbors.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 客户可以高效地遍历顶点的邻居。
- en: Space usage is proportional to the number of edges.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空间使用量与边的数量成正比。
- en: Performer–movie graphs.
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表演者-电影图。
- en: The performer–movie graph includes a vertex for each performer and movie and
    an edge between a performer and a movie if the performer appeared in the movie.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 表演者-电影图包括每个表演者和电影的顶点以及如果表演者出现在电影中则两者之间存在边。
- en: '![Movie-Performer graph](../Images/fbdd69c26d42a76df9f08d00e52c5013.png)'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![电影-表演者图](../Images/fbdd69c26d42a76df9f08d00e52c5013.png)'
- en: We provide a number of sample data files (encoded using UTF-8 for compatibility
    with `In`). Each line in a file consists of a movie, followed by a list of performers
    that appeared in the movie, separated by the `/` delimiter.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们提供了一些示例数据文件（使用UTF-8编码以与`In`兼容）。文件中的每一行都包括一部电影，后跟出现在电影中的表演者列表，由`/`分隔。
- en: '| FILE | DESCRIPTION | MOVIES | ACTORS | EDGES |'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| 文件 | 描述 | 电影 | 演员 | 边 |'
- en: '| [cast.06.txt](cast.06.txt) | movies release in 2006 | 8780 | 84236 | 103815
    |'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [cast.06.txt](cast.06.txt) | 2006年发行的电影 | 8780 | 84236 | 103815 |'
- en: '| [cast.00-06.txt](cast.00-06.txt) | movies release since 2000 | 52195 | 348497
    | 606531 |'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [cast.00-06.txt](cast.00-06.txt) | 自2000年以来的电影发行 | 52195 | 348497 | 606531
    |'
- en: '| [cast.G.txt](cast.G.txt) | movies rated G by MPAA | 1288 | 21177 | 28485
    |'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [cast.G.txt](cast.G.txt) | MPAA评级为G的电影 | 1288 | 21177 | 28485 |'
- en: '| [cast.PG.txt](cast.PG.txt) | movies rated PG by MPAA | 3687 | 74724 | 116715
    |'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [cast.PG.txt](cast.PG.txt) | MPAA评级为PG的电影 | 3687 | 74724 | 116715 |'
- en: '| [cast.PG13.txt](cast.PG13.txt) | movies rated PG-13 by MPAA | 2538 | 70325
    | 103265 |'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [cast.PG13.txt](cast.PG13.txt) | MPAA评级为PG-13的电影 | 2538 | 70325 | 103265
    |'
- en: '| [cast.mpaa.txt](cast.mpaa.txt) | movies rated by MPAA | 21861 | 280624 |
    627061 |'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [cast.mpaa.txt](cast.mpaa.txt) | MPAA评级的电影 | 21861 | 280624 | 627061 |'
- en: '| [cast.action.txt](cast.action.txt) | action movies | 14938 | 139861 | 266485
    |'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [cast.action.txt](cast.action.txt) | 动作电影 | 14938 | 139861 | 266485 |'
- en: '| [cast.rated.txt](cast.rated.txt) | popular movies | 4527 | 122406 | 217603
    |'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [cast.rated.txt](cast.rated.txt) | 热门电影 | 4527 | 122406 | 217603 |'
- en: '| [cast.all.txt](cast.all.txt) | over 250,000 movies | 285462 | 933864 | 3317266
    |'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [cast.all.txt](cast.all.txt) | 超过25万部电影 | 285462 | 933864 | 3317266 |'
- en: ''
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*These input files are as of November 2, 2006. The data is taken from the [Internet
    Movie Database](http://www.imdb.com/interfaces).*'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*这些输入文件截至2006年11月2日。数据来自[互联网电影数据库](http://www.imdb.com/interfaces)。*'
- en: '**Inverted index.** Program [IndexGraph.java](IndexGraph.java.html) takes a
    query which is the name of a movie (in which case it prints the list of performers
    that appear in that movie) or the name of a performer (in which case it prints
    the list of movies in which that performer has appeared).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**倒排索引。** 程序[IndexGraph.java](IndexGraph.java.html)接受一个查询，查询可以是电影的名称（在这种情况下打印出出现在该电影中的表演者列表）或表演者的名称（在这种情况下打印出该表演者出现在哪些电影中）。'
- en: Shortest paths in graphs.
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图中的最短路径。
- en: Given two vertices in a graph, a *path* is a sequence of edges connecting them.
    A *shortest path* is one with minimal length over all such paths.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在图中给定两个顶点，*路径*是连接它们的一系列边。*最短路径*是所有这样的路径中长度最小的路径。
- en: '![Shortest paths in a transportation graph](../Images/eaf09db73a814eb4bd2c8d34ba5a1180.png)'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![交通图中的最短路径](../Images/eaf09db73a814eb4bd2c8d34ba5a1180.png)'
- en: '[PathFinder.java](PathFinder.java.html) computes the shortest paths in a graph
    using a classic algorithm known as *breadth-first search*.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '[PathFinder.java](PathFinder.java.html) 使用一种被称为*广度优先搜索*的经典算法计算图中的最短路径。'
- en: Degrees of separation.
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分离度。
- en: 'One of the classic applications of shortest-paths algorithms is to find the
    *degrees of separation* of individuals in social networks. To fix ideas, we use
    the movie–performer. Kevin Bacon is a prolific actor who appeared in many movies.
    We assign every performer who has appeared in a movie a [Bacon number](http://oracleofbacon.org/):
    Bacon himself is 0, any performer who has been in the same cast as Bacon has a
    Kevin Bacon number of 1, any other performer (except Bacon) who has been in the
    same cast as a performer whose number is 1 has a Kevin Bacon number of 2, and
    so forth.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 最短路径算法的经典应用之一是在社交网络中找到个体之间的*分离度*。为了明确概念，我们使用电影-表演者。凯文·贝肯是一位出演过许多电影的多产演员。我们为每位出演过电影的表演者分配一个[贝肯数](http://oracleofbacon.org/)：贝肯本人是0，任何与贝肯同台演出的表演者的凯文·贝肯数为1，任何其他表演者（除了贝肯）与凯文·贝肯数为1的表演者同台演出的表演者的凯文·贝肯数为2，依此类推。
- en: Given the name of a performer, the *Kevin Bacon game* is to find some alternating
    sequence of movies and performers that lead back to Kevin Bacon. Remarkably, [PathFinder.java](PathFinder.java.html)
    provides a solution.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 给定表演者的名称，*凯文·贝肯游戏*是找到一��交替的电影和表演者序列，最终回到凯文·贝肯。令人惊讶的是，[PathFinder.java](PathFinder.java.html)提供了一个解决方案。
- en: '[PRE0]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The six degrees of separation rule suggests that most actors will have a Kevin
    Bacon number of 6 or less. In fact, most have a Kevin Bacon number of 3 or less!
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 六度分隔规则表明，大多数演员的凯文·贝肯数不会超过6。事实上，大多数演员的凯文·贝肯数不会超过3！
- en: Small-world graphs.
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 小世界图。
- en: 'Scientists have identified a particularly interesting class of graphs, known
    as *small-world graphs*, that arise in numerous applications in the natural and
    social sciences. Small-world graphs are characterized by the following three properties:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 科学家们已经确定了一类特别有趣的图，被称为*小世界图*，在自然和社会科学的许多应用中出现。小世界图具有以下三个特性：
- en: 'They are *sparse*: the number of edges is much smaller than the total potential
    number of edges for a graph with the specified number of vertices.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们是*稀疏的*：边的数量远小于具有指定顶点数的图的总潜在边数。
- en: 'They have short *average path lengths*: if you pick two random vertices, the
    length of the shortest path between them is short.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们具有较短的*平均路径长度*：如果你随机选择两个顶点，它们之间的最短路径长度很短。
- en: 'They exhibit *local clustering*: if two vertices are neighbors of a third vertex,
    then the two vertices are likely to be neighbors of each other.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它们表现出*局部聚类*：如果两个顶点是第三个顶点的邻居，则这两个顶点很可能是彼此的邻居。
- en: '![Calculating small-world graph characteristics](../Images/12c1bc2f386e097769c6c5be90c4e482.png)'
  id: totrans-62
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![计算小世界图特征](../Images/12c1bc2f386e097769c6c5be90c4e482.png)'
- en: '[SmallWorld.java](SmallWorld.java.html) computers the average degree, average
    path length, and clustering coefficient of a graph.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '[SmallWorld.java](SmallWorld.java.html) 计算图的平均度、平均路径长度和聚类系数。'
- en: Performer–performer graph.
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 表演者-表演者图。
- en: Our movie–performer graph is not a small-world graph, because it is bipartite
    and therefore has a clustering coefficient of 0. However, the simpler performer–performer
    graph defined by connecting two performers by an edge if they appeared in the
    same movie is a classic example of a small-world graph (after discarding performers
    not connected to Kevin Bacon). The diagram below illustrates the movie–performer
    and performer–performer graphs associated with a tiny movie-cast file.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的电影-表演者图不是一个小世界图，因为它是二部图，因此聚类系数为0。然而，通过将两个表演者连接起来（如果他们出现在同一部电影中）定义的更简单的表演者-表演者图是小世界图的一个经典例子（在丢弃未与凯文·贝肯相连的表演者后）。下面的图示说明了与一个小电影演员文件相关联的电影-表演者和表演者-表演者图。
- en: '![two different graph representations of a movie-cast file](../Images/af19bafd241bf8dd0a87bad327f4c014.png)'
  id: totrans-66
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![电影演员文件的两种不同图表示](../Images/af19bafd241bf8dd0a87bad327f4c014.png)'
- en: '[Performer.java](Performer.java.html) creates a performer–performer graph from
    a file in our movie-cast input format. You can use it to verify that the such
    graphs are small-world graphs.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '[Performer.java](Performer.java.html) 从我们的电影-演员输入格式的文件中创建一个表演者-表演者图。您可以使用它来验证这样的图是否是小世界图。'
- en: Exercises
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Add to [Graph.java](Graph.java.html) the implementations of `V()` and `E()`
    that return the number of vertices and edges in the graph, respectively.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[Graph.java](Graph.java.html)中添加`V()`和`E()`的实现，分别返回图中的顶点数和边数。
- en: Add to [Graph.java](Graph.java.html) a method `degree()` that takes a string
    argument and returns the degree of the specified vertex. Use this method to find
    the performer in the file `movies.txt` who has appeared in the most movies.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[Graph.java](Graph.java.html)中添加一个名为`degree()`的方法，该方法接受一个字符串参数，并返回指定顶点的度。使用此方法找到文件`movies.txt`中出现在最多电影中的表演者。
- en: Add to [Graph.java](Graph.java.html) a method `hasVertex()` that takes a string
    argument and returns `true` if it names a vertex in the graph, and `false` otherwise.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[Graph.java](Graph.java.html)中添加一个名为`hasVertex()`的方法，该方法接受一个字符串参数，并在图中命名一个顶点时返回`true`，否则返回`false`。
- en: Add to [Graph.java](Graph.java.html) a method `hasEdge()` that takes two string
    arguments and returns `true` if they specify an edge in the graph, and `false`
    otherwise.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[Graph.java](Graph.java.html)中添加一个`hasEdge()`方法，它接受两个字符串参数，并在图中指定一条边时返回`true`，否则返回`false`。
- en: '*True* or *false*: At some point during breadth-first search the queue can
    contain two vertices, one whose distance from the source is 7 and one whose distance
    is 9.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*真*或*假*：在广度优先搜索过程中的某个时刻，队列中可能包含两个顶点，一个距离源点为7，另一个距离为9。'
- en: '*Solution*: False. The queue can contain vertices of at most two distinct distances
    *d* and *d* + 1. Breadth-first search examines the vertices in increasing order
    of distance from the source. When examining a vertex at distance *d*, only vertices
    of distance *d*−1 can be enqueued.'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：错误。队列最多可以包含两个不同距离*d*和*d* + 1的顶点。广度优先搜索按照从源点到顶点的距离递增的顺序检查顶点。在检查距离为*d*的顶点时，只有距离为*d*−1的顶点可以入队。'
- en: Suppose you use a stack instead of a queue for breadth-first search in `PathFinder.java`.
    Does it still compute a path from the source to each vertex? Does it still computer
    shortest paths?
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设在`PathFinder.java`中使用栈而不是队列进行广度优先搜索。它仍然能够计算从源点到每个顶点的路径吗？它仍然能够计算最短路径吗？
- en: '*Solution*: Yes, no.'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：是的，不是。'
- en: What would be the effect of using a queue instead of a stack when forming the
    shortest paths in `pathTo()`?
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在`pathTo()`中使用队列而不是栈来形成最短路径时会产生什么影响？
- en: '*Solution*: It would return the vertices in reverse order.'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：它会返回顶点的逆序。'
- en: Creative Exercises
  id: totrans-79
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
- en: '**Histogram.** Write a program [BaconHistogram.java](BaconHistogram.java.html)
    that prints a histogram of Kevin Bacon numbers, indicating how many performers
    from [movies.txt](movies.txt) have a Bacon number of 0, 1, 2, 3, .... Include
    a category for those who have an infinite number (not connected at all to Kevin
    Bacon).'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**直方图。** 编写一个程序[BaconHistogram.java](BaconHistogram.java.html)，打印出凯文·贝肯数的直方图，指示有多少表演者来自[movies.txt](movies.txt)的贝肯数为0、1、2、3、...。包括那些与凯文·贝肯完全没有联系的人的类别。'
- en: '[PRE1]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Word ladder.** Write a program [WordLadder.java](WordLadder.java.html) that
    takes two 5-letter strings as command-line arguments,reads in a list of [5-letter
    words](words5.txt) from standard input, and prints out a shortest [word ladder](http://en.wikipedia.org/wiki/Word_ladder)
    using the words on standard input connecting the two strings (if it exists). Two
    words are adjacent in a word ladder chain if they differ in exactly one letter.
    As an example, the following word ladder connects `green` and `brown`:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**单词阶梯。** 编写一个程序[WordLadder.java](WordLadder.java.html)，以两个5个字母的字符串作为命令行参数，从标准输入读取[5个字母单词](words5.txt)列表，并打印出一个最短的[单词阶梯](http://en.wikipedia.org/wiki/Word_ladder)，使用标准输入上的单词连接这两个字符串（如果存在）。在单词阶梯链中，两个单词如果只相差一个字母，则相邻。例如，以下单词阶梯连接了`green`和`brown`：'
- en: '[PRE2]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This game, originally known as *doublet*, was invented by Lewis Carroll. You
    can also try out your program on this list of [6 letter words](words6.txt).
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这个游戏最初被称为*doublet*，是由刘易斯·卡罗尔发明的。你也可以尝试在这个[6个字母单词](words6.txt)列表上运行你的程序。
- en: '**All paths.** Write a [Graph.java](Graph.java.html) client [AllPaths.java](AllPaths.java.html)
    whose constructor takes a `Graph` as argument and supports operations to count
    or print *all* simple paths between two given vertices `s` and `t` in the graph.
    A *simple* path is a path that does not repeat any vertices. In two-dimensional
    grids, such paths are referred to as *self-avoiding walksWarning*: there might
    be exponentially paths, so don''t run this on large graphs.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**所有路径。** 编写一个[Graph.java](Graph.java.html)客户端[AllPaths.java](AllPaths.java.html)，其构造函数以`Graph`作为参数，并支持计算或打印图中两个给定顶点`s`和`t`之间的*所有*简单路径的操作。*简单*路径是不重复任何顶点的路径。在二维网格中，这样的路径被称为*避免自身的行走*。警告：可能存在指数级的路径，因此不要在大型图上运行此程序。'
- en: '**Directed graphs.** Implement a [Digraph.java](Digraph.java.html) data type
    that represents *directed* graph, where the direction of edges is significant:
    `addEdge(v, w)` means to add an edge from `v` to `w` but *not* from `w` to `v`.
    Replace `adjacentTo()` with two methods: one to give the set of vertices having
    edges directed to them *from* the argument vertex, and the other to give the set
    of vertices having edges directed from them *to* the argument vertex. Explain
    how [PathFinder.java](PathFinder.java.html) would need to be modified to find
    shortest paths in directed graphs.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**有向图。** 实现一个表示*有向*图的[Digraph.java](Digraph.java.html)数据类型，其中边的方向很重要：`addEdge(v,
    w)`表示从`v`到`w`添加一条边，但不是从`w`到`v`。用两种方法替换`adjacentTo()`：一种是给出具有从参数顶点*到*它们的边的顶点集合，另一种是给出具有从它们*到*参数顶点的边的顶点集合。解释如何修改[PathFinder.java](PathFinder.java.html)以在有向图中找到最短路径。'
- en: Web Exercises
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络练习
- en: '**All shortest pairs.** Write a program [AllShortestPaths.java](AllShortestPaths.java.html)
    that builds a graph from a file, and reads source-destination requests from standard
    input and prints a shortest path in the graph from the source to the destination.'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**所有最短路径。** 编写一个程序[AllShortestPaths.java](AllShortestPaths.java.html)，从文件中构建图形，从标准输入读取源-目标请求，并打印出图中从源到目标的最短路径。'
- en: '**Faster word ladders.** To speed things up (if the word list is very large),
    don''t write a nested loop to try all pairs of words to see if they are adjacent.
    To handle 5 letter words, first sort the word list. Words that only differ in
    their last letter will appear consecutively in the sorted list. Sort 4 more times,
    but cyclically shift the letters one position to the right so that words that
    differ in the ith letter will appear consecutively in one of the sorted lists.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更快的单词阶梯。** 为了加快速度（如果单词列表非常大），不要编写嵌套循环来尝试所有成对的单词，看它们是否相邻。为了处理5个字母的单词，首先对单词列表进行排序。只有最后一个字母不同的单词将连续出现在排序列表中。再排序4次，但将字母向右循环移动一个位置，以便在一个排序列表中连续出现在第i个字母不同的单词。'
- en: Try out this approach using a [larger word list](../data/words.txt) with words
    of different sizes. Two words of different lengths are neighbors if the smaller
    word is the same as the bigger word, minus the last letter, e.g., brow and brown.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用[更大的单词列表](../data/words.txt)尝试这种方法，其中包含不同长度的单词。两个长度不同的单词如果较小的单词与较大的单词相同，减去最后一个字���，则它们是相邻的，例如，brow
    和 brown。
- en: '**Checkers.** Extend the rules of checkers to an N-by-N checkerboard. Show
    how to determine whether a checker can become in king in the current move. (Use
    BFS or DFS.) Show how to determine whether black has a winning move. (Find an
    Euler path.)'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**跳棋。** 将跳棋规则扩展到一个 N×N 的跳棋棋盘。展示如何确定一个棋子是否可以在当前移动中变成国王。（使用 BFS 或 DFS。）展示如何确定黑方是否有获胜的着法。（找到一个欧拉路径。）'
- en: '**Combinational circuits.** Determining the truth value of a combinational
    circuit given its inputs is a graph reachability problem (on a directed acyclic
    graph).'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**组合电路。** 给定其输入，确定组合电路的真值是一个图可达性问题（在有向无环图上）。'
- en: '**Hex.** The game of Hex is played on a trapezoidal grid of hexagons....'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Hex。** Hex 游戏在一个六边形网格上进行...'
- en: Describe how to detect whether white or black has won the game using either
    BFS or DFS.
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述如何使用 BFS 或 DFS 检测白色或黑色谁赢得了比赛。
- en: 'Prove that the game cannot end in a tie. *Hint*: consider the set of cells
    reachable from the left side of the board.'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证明游戏不可能以平局结束。*提示*：考虑从棋盘左侧可达的单元格集合。
- en: 'Prove that the first player in Hex can always win if they play optimally. *Hint*:
    if the second player had a winning strategy, you could choose a random cell initially,
    and then just copy the second player''s winning strategy. In game theory, this
    technique is known as *strategy stealing*.'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 证明 Hex 游戏中，如果玩家采取最佳策略，第一位玩家总是能赢。*提示*：如果第二位玩家有一个获胜策略，您可以最初选择一个随机单元格，然后只需复制第二位玩家的获胜策略。在博弈论中，这种技术被称为*策略窃取*。
- en: Write a program [MovieStats.java](MovieStats.java.html) that reads in a movie
    data set and prints out the number of distinct actors and movies.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[MovieStats.java](MovieStats.java.html)，读取电影数据集并打印出不同演员和电影的数量。
- en: Modify [Bacon.java](Bacon.java.html) so that the user types two actors (one
    per line) and the program prints a shortest chain between the two actors.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改[Bacon.java](Bacon.java.html)，使用户输入两个演员（每行一个），程序打印两个演员之间的最短链。
- en: Modify `Graph.java` to include a method `iterator()` that returns an `Iterator`
    to the graph's vertices. Also, make `Graph` implement the `Iterable<String>` interface
    so that you can use it with foreach to iterate over the graph's vertices.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Graph.java`，包括一个返回图顶点的`Iterator`的方法`iterator()`。此外，使`Graph`实现`Iterable<String>`接口，以便您可以使用
    foreach 遍历图的顶点。
- en: '[PRE3]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Garbage collection.** Reference counting vs. mark-and-sweep. Automatic memory
    management in languages like Java is a challenging problem. Allocating memory
    is easy, but discovering when a program is finished with memory (and reclaiming
    it) is more difficult. Reference counting: doesn''t work with circular linked
    structure. Mark-and-sweep algorithm. Root = local variables and static variables.
    Run DFS from roots, marking all variables references from roots, and so on. Then,
    make second pass: free all unmarked objects and unmark all marked objects. Or
    a copying GC would then move all of the marked objects to a single memory area.
    Uses one extra bit per object. JVM must pause while garbage collection occurs.
    Fragments memory.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**垃圾回收。** 引用计数 vs. 标记-清除。像 Java 这样的语言中的自动内存管理是一个具有挑战性的问题。分配内存很容易，但发现程序何时完成内存（并回收它）更困难。引用计数：不适用于循环链接结构。标记-清除算法。根
    = 局部变量和静态变量。从根运行 DFS，标记所有从根引用的变量，依此类推。然后，进行第二遍：释放所有未标记的对象并取消标记所有标记的对象。或者复制 GC
    将所有标记的对象移动到单个内存区域。每个对象使用一个额外的位。JVM 在进行垃圾回收时必须暂停。碎片化内存。'
- en: '**Power law of web links.** (Micahel Mitzenmacher) The indegrees and outdegrees
    of World Wide Web obey a power law. Can be modeled by [preferred attachment](http://citeseer.nj.nec.com/553345.html)
    process. Suppose that each web page has exactly one outgoing link. Each page is
    created one at a time, starting with a single page that points to itself. With
    probability p < 1, it links to one of the existing pages, chosen uniformly at
    random. With probability 1-p it links to an existing page with probability proportional
    to the number of incoming links of that page. This rule reflects the common tendency
    for new web pages to point to popular pages. Write a program to simulate this
    process and plot a histogram of the number of incoming links. *Answer*: you should
    observe that the fraction of pages with indegree k is proportional to k^(-1 /
    (1 - p)).'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**网络链接的幂律**（Micahel Mitzenmacher）全球网络的入度和出度遵循幂律。可以通过[优先附加](http://citeseer.nj.nec.com/553345.html)过程建模。假设每个网页只有一个外链。每个页面逐一创建，从指向自身的单个页面开始。以概率
    p < 1，它链接到现有页面之一，随机选择。以概率 1-p，它链接到具有与该页面的入链数成比例的概率的现有页面。此规则反映了新网页指向热门页面的普遍倾向。编写一个程序来模拟这个过程，并绘制入链数的直方图。*答案*：您应该观察到具有入度
    k 的页面比例与 k^(-1 / (1 - p)) 成比例。'
