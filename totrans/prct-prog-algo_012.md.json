["```\npublic static long factorial(int n) { \n    if (n == 1) return 1; \n    return n * factorial(n-1); \n} \n\n```", "```\nfactorial(5) \n   factorial(4) \n      factorial(3) \n         factorial(2) \n            factorial(1) \n               return 1 \n            return 2*1 = 2 \n         return 3*2 = 6 \n      return 4*6 = 24 \n   return 5*24 = 120\n\n```", "```\ngcd(1440, 408) \n   gcd(408, 216) \n      gcd(216, 192) \n         gcd(192, 24)\n            gcd(24, 0)\n               return 24\n            return 24 \n         return 24 \n      return 24 \n   return 24 \n\n```", "```\n    public static double harmonic(int n) {\n        return harmonic(n-1) + 1.0/n;\n    }\n\n    ```", "```\n    public static double harmonic(int n) {\n        if (n == 1) return 1.0;\n        return harmonic(n) + 1.0/n;\n    } \n\n    ```", "```\n    public static double harmonic(int n) { \n       if (n == 0) return 0.0;\n       return harmonic(n-1) + 1.0/n; \n    } \n\n    ```", "```\n    // Warning: spectacularly inefficient.\n    public static long fibonacci(int n) {\n        if (n == 0) return 0;\n        if (n == 1) return 1;\n        return fibonacci(n-1) + fibonacci(n-2);\n    } \n\n    ```", "```\n    public static long fibonacci(int n) {\n        long[] f = new long[n+1];\n        f[0] = 0;\n        f[1] = 1;\n        for (int i = 2; i <= n; i++)\n            f[i] = f[i-1] + f[i-2];\n        return f[n];\n    }\n\n    ```", "```\n    - - G G C - - A - C C A C G\n    A C G G C G G A T - - A C G\n\n    ```", "```\n    opt[i][j] = 0                              if i = m or j = n\n              = opt[i+1][j+1] + 1              if s[i] = t[j]\n              = max(opt[i][j+1], opt[i+1][j])  otherwise\n\n    ```", "```\n    public static boolean gcdlike(int p, int q) {\n       if (q == 0) return (p == 1);\n       return gcdlike(q, p % q);\n    }\n\n    ```", "```\n    public static int mystery(int a, int b) {\n        if (b == 0)     return 0;\n        if (b % 2 == 0) return mystery(a+a, b/2);\n        return mystery(a+a, b/2) + a;\n    }\n\n    ```", "```\n    bca cba cab acb bac abc\n\n    ```", "```\n    ab ac ad ba bc bd ca cb cd da db dc \n\n    ```", "```\n     a ab abc ac b bc c\n\n    ```", "```\n    abc abd abe acd ace ade bcd bce bde cde \n\n    ```", "```\n    public static void collatz(int n) {\n        StdOut.print(n + \" \");\n        if (n == 1) return;\n        if (n % 2 == 0) collatz(n / 2);\n        else            collatz(3*n + 1);\n    }\n\n    ```", "```\n    > 7 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1 \n    > \n    > ```", "```\n    public static int mcCarthy(int n) {\n        if (n > 100) return n - 10;\n        else return mcCarthy(mcCarthy(n+11));\n     }\n\n    ```", "```\n    f(N) = 1               if N = 0\n         = 1 + 1 / f(N-1)  if N > 0\n\n    ```", "```\n    public static int mystery(int a, int b) {\n       if (0 == b) return 0;\n       else return a + mystery(a, b-1);\n    }\n\n    ```", "```\n    public static void mystery(int a, int b) {\n       if (a != b) {\n           int m = (a + b) / 2;\n           mystery(a, m);\n           StdOut.println(m);\n           mystery(m, b);\n       }\n    }\n\n    ```", "```\n    public static void mystery(int a, int b) {\n       if (a != b) {\n           int m = (a + b) / 2;\n           mystery(a, m - 1);\n           StdOut.println(m);\n           mystery(m + 1, b);\n       }\n    }\n\n    ```", "```\n    public static int mystery(int a, int b) {\n        if (a == b) StdOut.println(a);\n        else {\n           int m1 = (a + b    ) / 2;\n           int m2 = (a + b + 1) / 2;\n           mystery(a, m1);\n           mystery(m2, b);\n        }\n    }\n\n    ```", "```\n    public static int f(int n) {\n       if (n == 0) return 0;\n       if (n == 1) return 1;\n       if (n == 2) return 1;\n       return 2*f(n-2) + f(n-3);\n\n    ```", "```\n    F(n)   = 1                            if n = 1 or n = 2\n           = F((n+1)/2)2 + F((n-1)/2)2     if n is odd\n           = F(n/2 + 1)2 - F(n/2 - 1)2     if n is even\n\n    ```", "```\n    F(0) =  0\n    F(1) =  1\n    F(2n-1) = F(n-1)^2 + F(n)^2\n    F(2n) = (2F(n-1) + F(n)) * F(n)\n\n    ```", "```\n    public static void mystery(int n) {\n       if (n == 0 || n == 1) return;\n       mystery(n-2);\n       StdOut.println(n);\n       mystery(n-1);\n    }\n\n    ```", "```\n    if (n == 0) return;\n\n    ```", "```\n    public static int square(int n) {\n       if (n == 0) return 0;\n       return square(n-1) + 2*n - 1;\n    }\n\n    public static int cube(int n) {\n       if (n == 0) return 0;\n       return cube(n-1) + 3*(square(n)) - 3*n + 1;\n    }\n\n    ```", "```\n    public static int f(int n) {     public static int g(int n) {\n       if (n == 0) return 0;            if (n == 0) return 0;\n       return f(n-1) + g(n-1);          return g(n-1) + f(n);\n    }                                }\n\n    ```", "```\n    % java Sequence 5 23\n    23 = ((5 * 2 + 1) * 2 + 1)\n\n    % java Sequence 11 113\n    113 = ((((11 + 1) + 1) + 1) * 2 * 2 * 2 + 1)\n\n    ```", "```\n    * * * Q * * * *      * * * * Q * * * \n    * Q * * * * * *      * Q * * * * * * \n    * * * * * * Q *      * * * Q * * * * \n    * * Q * * * * *      * * * * * * Q * \n    * * * * * Q * *      * * Q * * * * * \n    * * * * * * * Q      * * * * * * * Q \n    * * * * Q * * *      * * * * * Q * * \n    Q * * * * * * *      Q * * * * * * * \n\n    ```", "```\n    public static int f(int x) {\n       if (x > 1000) return x - 4;\n       else return f(f(x+5));\n    }\n\n    ```", "```\n    public static String expr(double p) {\n       double r = Math.random();\n       if (r <= 1*p) return \"(\" + expr(p) + \" + \" + expr(p) + \")\";\n       if (r <= 2*p) return \"(\" + expr(p) + \" * \" + expr(p) + \")\";\n       return \"\" + (int) (100 * Math.random());\n    }\n\n    ```", "```\n    0 = {}         = {}\n    1 = {0}\t       = {{}}\n    2 = {0, 1}     = {{}, {{}}}\n    3 = {0, 1, 2}  = {{}, {{}}, {{}, {{}}}}\n\n    ```", "```\n    % java Subsequence abcd 3\n    abc abd acd bcd\n\n    ```", "```\n    s = \"ab\"  t = \"CD\"\n    abCD   CabD\n    aCbD   CaDb\n    aCDb   CDab\n\n    ```", "```\n    % java Partition 4      % java Partition 6\n    4                       6\n    3 1                     5 1\n    2 2                     4 2\n    2 1 1                   4 1 1\n    1 1 1 1                 3 3\n                            3 2 1\n                            3 1 1 1\n                            2 2 2\n                            2 2 1 1\n                            2 1 1 1 1\n                            1 1 1 1 1 1\n\n    ```", "```\n    % java JohnsonTrotter 3\n    012   (2 1)\n    021   (1 0)\n    201   (2 1)\n    210   (0 1)\n    120   (1 2)\n    102   (0 1)\n\n    ```", "```\n    % java PermutationsLex 3\n    012\n    021\n    102\n    120\n    201\n    210\n\n    ```", "```\n    // DO NOT RUN THIS CODE FOR LARGE INPUTS\n    public static long binomial(int n, int k) {\n        if (k == 0) return 1;\n        if (n == 0) return 0;\n        return binomial(n-1, k) + binomial(n-1, k-1);\n    }\n\n    ```"]