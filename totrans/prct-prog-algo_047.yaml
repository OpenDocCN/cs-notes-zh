- en: 8.4 Networking
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.4 网络
- en: 原文：[https://introcs.cs.princeton.edu/java/84network](https://introcs.cs.princeton.edu/java/84network)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/java/84network](https://introcs.cs.princeton.edu/java/84network)
- en: This section under major construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节正在进行重大改建。
- en: '[Timeline of Internet](http://www.zakon.org/robert/internet/timeline).'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[互联网时间线](http://www.zakon.org/robert/internet/timeline)。'
- en: '**Networking.** Client-server model, peer-to-peer networking.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络.** 客户端-服务器模型，点对点网络。'
- en: '**TCP/IP.** Created by Bob Kahn and Vint Cerf.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**TCP/IP.** 由鲍勃·卡恩（Bob Kahn）和文特·瑟夫（Vint Cerf）创建。'
- en: '**World Wide Web.** Vannevar Bush was a visionary who described what would
    become the Internet in a famous 1945 paper [As We May Think](http://www.theatlantic.com/unbound/flashbks/computer/bushf.htm).
    His paper describes a theoretical model for storing information and accessing
    it using links from one piece of data to another. Ted Nelson and Doug Englebart
    developed this idea into what we know know of as hypertext. In 1980, [Tim Berners-Lee](http://www.ibiblio.org/pioneers/lee.html)
    made Bush''s dream a reality. He formatted hypertext using HTML (Hypertext Markup
    Language) and wrote a browser which he called *WorldWideWeb* and the first web
    server info.cern.ch. Use of the WWW became popular in the mid 1990s and is now
    indispensable to everyday student life.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**万维网.** 范尼瓦·布什（Vannevar Bush）是一位有远见的人，他在一篇著名的1945年论文[我们可能认为的](http://www.theatlantic.com/unbound/flashbks/computer/bushf.htm)中描述了后来成为互联网的东西。他的论文描述了一种存储信息和使用链接从一条数据到另一条数据的理论模型。泰德·纳尔逊（Ted
    Nelson）和道格·恩格尔巴特（Doug Englebart）将这个想法发展成了我们现在所知道的超文本。1980年，[蒂姆·伯纳斯-李](http://www.ibiblio.org/pioneers/lee.html)实现了布什的梦想。他使用HTML（超文本标记语言）格式化超文本，并编写了一个他称之为*WorldWideWeb*的浏览器和第一个Web服务器info.cern.ch。在1990年代中期，使用WWW变得流行，现在已经成为日常学生生活中不可或缺的部分。'
- en: '**Protocols.**'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**协议.**'
- en: '[PRE0]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Web server.** Java makes it easy to communicate with a web server. The data
    type `URL` represents is a *uniform resource locator*. A resource can be a file
    or a website. To read the contents of a website, use our `In` class.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**Web 服务器.** Java使与Web服务器通信变得容易。数据类型`URL`代表的是*统一资源定位符*。资源可以是文件或网站。要读取网站的内容，请使用我们的`In`类。'
- en: '[PRE1]'
  id: totrans-10
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Traceroute.** How do my packets get from A to B, and how long does it take
    for them to get there?'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**Traceroute.** 我的数据包如何从A到B，需要多长时间才能到达？'
- en: '|'
  id: totrans-12
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE2]'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE2]'
- en: ''
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Mail.** The program [Mail.java](Mail.java.html) uses sockets to create a
    SMTP (simple mail transfer protocol) client on port 25\. It is a crude program
    for sending email.What happens if you change the originating and reply addresses
    in email? You may be surprised to learn that SMTP has no authentication mechanism,
    so you can make an email look like it came from anywhere. This is called *email
    spoofing*. Spoofing has some legitimate uses (e.g., a whistle-blower who wishes
    to remain anonymous), but it is mostly used by spammers to mask their identities.
    If you carefully examine the email header of such a forged email, you can see
    the IP number of the machine that connected to port 25. However, a casual Internet
    user will be duped. Of course, you should never use this deceptive technique without
    prior consent from the recipient. It is illegal in some jurisdictions.An *open
    relay* is an SMTP email server that processes mail that is neither to nor from
    a local user. If `smtp.princeton.edu` were an open relay, then you could run the
    `Mail.java` from any computer, even if it were outside the `princeton.edu` domain.
    Spammers regularly exploit such open relays to "launder" their email. Open relays
    enable a spammer to anonymously send vast amounts of email, using someone else''s
    resources. If you run a web server, be sure that you don''t run an open relay.**Echo
    client and server.** The program [EchoClient.java](EchoClient.java.html) establishes
    a connection with a server (on port 4444), reads lines from standard input, sends
    them to the server, and prints back out the server''s response. It uses [In.java](In.java.html)
    and [Out.java](Out.java.html). The program [EchoServer.java](EchoServer.java.html)
    is the companion server program. It listens for connection requests from clients
    on port 4444\. (You can any port from 1024 to 65,536; ports 0-1023 are reserved
    for "well-known" tasks, e.g., 80 for http, 21 for ftp). Upon receiving one, it
    establishes a connection, reads lines from the client, and echoes them back to
    the client. The statement'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**邮件.** 程序[Mail.java](Mail.java.html)使用套接字在端口25上创建一个SMTP（简单邮件传输协议）客户端。这是一个用于发送电子邮件的简陋程序。如果您更改电子邮件中的发件人和回复地址会发生什么？您可能会惊讶地发现，SMTP没有身份验证机制，因此您可以使电子邮件看起来像来自任何地方。这被称为*电子邮件欺骗*。欺骗有一些合法用途（例如，希望保持匿名的告密者），但大多数情况下被垃圾邮件发送者用来掩盖他们的身份。如果仔细检查这种伪造电子邮件的邮件头，您可以看到连接到端口25的机器的IP号码。然而，普通的互联网用户会被欺骗。当然，您不应该在未经收件人事先同意的情况下使用这种欺骗技术。在某些司法管辖区是违法的。*开放中继*是一个SMTP电子邮件服务器，处理既不��发件人也不是收件人的邮件。如果`smtp.princeton.edu`是一个开放中继，那么您可以从任何计算机上运行`Mail.java`，即使它在`princeton.edu`域之外。垃圾邮件发送者经常利用这样的开放中继来“洗钱”他们的电子邮件。开放中继使垃圾邮件发送者能够匿名发送大量电子邮件，使用他人的资源。如果您运行Web服务器，请确保不要运行开放中继。**回声客户端和服务器.**
    程序[EchoClient.java](EchoClient.java.html)与服务器建立连接（在端口4444上），从标准输入读取行，将它们发送到服务器，并将服务器的响应打印回来。它使用[In.java](In.java.html)和[Out.java](Out.java.html)。程序[EchoServer.java](EchoServer.java.html)是配套的服务器程序。它在端口4444上监听来自客户端的连接请求。
    （您可以使用从1024到65536的任何端口；端口0-1023保留用于“众所周知”的任务，例如，80用于http，21用于ftp）。收到请求后，它建立连接，从客户端读取行，并将它们回显给客户端。该语句'
- en: ''
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-17
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: ''
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: creates a `ServerSocket` that listens for connection requests on port 4444.
    The key line
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 创建一个在端口4444上监听连接请求的`ServerSocket`。关键行
- en: ''
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-21
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: ''
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'makes the server wait until a connection request arrives, and then creates
    a `Socket` connection with the client. This is a *blocking statement*: the program
    comes to a standstill until the `accept` method returns. The other key part of
    the server code is:'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 使服务器等待直到连接请求到达，然后与客户端创建`Socket`连接。这是一个*阻塞语句*：程序在`accept`方法返回之前停止。服务器代码的另一个关键部分是：
- en: ''
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE5]'
- en: ''
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this context, `in` is the input stream coming from the client and `out`
    is the output stream going to the client. This loop repeatedly reads strings from
    the client and echoes them back to the client. The call to `readLine()` is *blocking*
    so the program comes to a stop until it returns a `String`. When the client finally
    disconnects, `readLine()` returns `null` and the server can continue. To execute
    the server and the client, start the server, then execute the client program:'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 在这种情况下，`in`是来自客户端的输入流，`out`是发送到客户端的输出流。这个循环不断地从客户端读取字符串并将其回显给客户端。调用`readLine()`是*阻塞*的，因此程序会停止，直到它返回一个`String`。当客户端最终断开连接时，`readLine()`返回`null`，服务器可以继续。要执行服务器和客户端，请先启动服务器，然后执行客户端程序：
- en: ''
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE6]'
- en: ''
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'The program [ChatClient.java](ChatClient.java.html) is a simple GUI version
    of `EchoClient.java`. The user types messages into a `JTextField` and hits enter
    when they wish to send the message to the server. The results appear in a `JTextArea`.**Threads,
    deadlocking, and synchronization.** Two threads running in "parallel." A *race
    condition* occurs when two (or more threads) access shared data, and the resulting
    behavior is different, depending on "how the threads are scheduled." Avoid race
    conditions by *locking* an object so that it can''t be called by another thread
    until the object is unlocked.A thread might need to wait for another thread to
    be done with an object. *Deadlocking* can result. Need careful coordination. Unsynchronized
    blocks of code accessing the same value can corrupt state if you''re not careful.
    (Give example.) On the other hand, synchronized blocks of code accessing the same
    value can deadlock if you''re not careful. (Give example.) Even if methods `set()`
    and `get()` are synchronized, the code fragment `a.set(a.get() + 1)` can result
    in unpredictable behavior if another thread accesses `a` in between the calls
    to `a.get` and `a.set`. Avoid threaded programming when you can; it is notoriously
    hard to debug concurrency errors.**Chat server.** The echo client and server demonstrates
    two programs communicating over sockets. However, only one echo client can communicate
    with the server at a time. The program [ChatServer.java](ChatServer.java.html)
    uses threads to allow an arbitrary number of clients to connect at one time. Furthermore,
    it broadcasts each message it receives to all of the connected clients. This is
    a bare bones chatroom. It uses the helper classes [Connection.java](Connection.java.html)
    and [ConnectionListener.java](ConnectionListener.java.html). For the client program,
    we can reuse [ChatClient.java](ChatClient.java.html) exactly as is since it already
    behaves exactly as we wish: it sends messages to the server and echoes back everything
    that the server transmits.'
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 程序[ChatClient.java](ChatClient.java.html)是`EchoClient.java`的简单GUI版本。用户在`JTextField`中输入消息，然后在希望将消息发送到服务器时按下回车键。结果会显示在`JTextArea`中。**线程、死锁和同步。**
    两个线程同时运行。当两个（或更多）线程访问共享数据时，会发生*竞争条件*，并且结果行为会因"线程如何调度"而异。通过*锁定*对象来避免竞争条件，以便在对象解锁之前无法被另一个线程调用。一个线程可能需要等待另一个线程完成对对象的操作。可能会导致*死锁*。需要仔细协调。如果不小心，访问相同值的未同步代码块可能会破坏状态（给出示例）。另一方面，如果不小心，访问相同值的同步代码块可能会导致死锁（给出示例）。即使方法`set()`和`get()`是同步的，代码片段`a.set(a.get()
    + 1)`可能会导致不可预测的行为，如果另一个线程在调用`a.get`和`a.set`之间访问`a`。尽量避免使用线程编程；调试并发错误非常困难。**聊天服务器。**
    回声客户端和服务器演示了两个程序通过套接字进行通信。但是，一次只有一个回声客户端可以与服务器通信。程序[ChatServer.java](ChatServer.java.html)使用线程允许任意数量的客户端同时连接。此外，它将接收到的每条消息广播给所有连接的客户端。这是一个基本的聊天室。它使用辅助类[Connection.java](Connection.java.html)和[ConnectionListener.java](ConnectionListener.java.html)。对于客户端程序，我们可以完全重用[ChatClient.java](ChatClient.java.html)，因为它已经完全符合我们的要求：它将消息发送到服务器，并回显服务器传输的所有内容。
- en: ''
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '&#124;  &#124; ![](../Images/286de5f1642f483dcb9f536efc5b1ccf.png) &#124;'
  id: totrans-33
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '&#124;  &#124; ![](../Images/286de5f1642f483dcb9f536efc5b1ccf.png) &#124;'
- en: '&#124;   &#124;'
  id: totrans-34
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '&#124;   &#124;'
- en: '&#124;  &#124; ![](../Images/019e289b69e805cad5d9f1ad92d33682.png) &#124;'
  id: totrans-35
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '&#124;  &#124; ![](../Images/019e289b69e805cad5d9f1ad92d33682.png) &#124;'
- en: ''
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Threads.* Java makes dealing with threads as easy as possible, but it is still
    a difficult task because the flow of execution is no longer as clear.*Synchronization.*
    `Connection.java` is an example of a producer/consumer relationship. Each `Connection`
    reads in messages from the client. The `ConnectionListener` extracts messages
    from the `Connection` and broadcasts them to all of the clients. We must be careful
    to synchronize this activity so that each message is broadcast once and only once.
    When a message arrives form the client `setMessage()` is called and it sets the
    variable `message`. When it is ready to be broadcast to all clients, `getMessage()`
    is called to retrieve the string. Upon completion, it sets `message` to `null`
    to indicate that is done with the message. To ensure that `setMessage()` is never
    called twice consecutively before an intervening `getMessage()`, we lock the object
    using `wait()` and `notifyAll()`. If `setMessage()` is called before `getMessage()`
    broadcasts the previous message, then `message` is not `null`, so `setMessage()`
    executes the `wait()` statement. This blocks `setMessage()` from further execution
    until another method invokes `notifyAll()`. When `getMessage()` is done processing
    a message, it sets `message` to `null` and calls `notifyAll()` to unblock `setMessage()`.
    The `synchronized` keyword ensures that only one of the two methods `getMessage()`
    and `setMessage()` execute at a particular instant in time.'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*线程。* Java 使处理线程变得尽可能简单，但仍然是一个困难的任务，因为执行流程不再那么清晰。*同步。* `Connection.java` 是生产者/消费者关系的一个例子。每个
    `Connection` 从客户端读取消息。`ConnectionListener` 从 `Connection` 中提取消息并将其广播给所有客户端。我们必须小心地同步这个活动，以确保每条消息只广播一次。当一条消息从客户端到达时，会调用
    `setMessage()` 并设置变量 `message`。当准备将其广播给所有客户端时，会调用 `getMessage()` 来检索字符串。完成后，将
    `message` 设置为 `null` 表示已完成消息。为了确保在中间没有 `getMessage()` 之前不会连续调用两次 `setMessage()`，我们使用
    `wait()` 和 `notifyAll()` 锁定对象。如果在 `getMessage()` 广播上一条消息之前调用 `setMessage()`，那么
    `message` 不是 `null`，因此 `setMessage()` 执行 `wait()` 语句。这会阻止 `setMessage()` 进一步执行，直到另一个方法调用
    `notifyAll()`。当 `getMessage()` 处理完一条消息后，将 `message` 设置为 `null` 并调用 `notifyAll()`
    解除 `setMessage()` 的阻塞。`synchronized` 关键字确保在特定时间内只有 `getMessage()` 和 `setMessage()`
    中的一个方法执行。'
- en: ''
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE7]'
- en: ''
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Q + A
  id: totrans-41
  prefs:
  - PREF_BQ
  - PREF_H4
  type: TYPE_NORMAL
  zh: 问答
- en: ''
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Q.** Can a thread call a synchronized method on an object for which it already
    holds the lock?**A.** Yes. Java locks are reentrant.'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Q.** 一个线程能否在已经持有锁的对象上调用同步方法？**A.** 能。Java 锁是可重入的。'
- en: ''
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Creative Exercises
  id: totrans-45
  prefs:
  - PREF_BQ
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
- en: ''
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Stock quote.** Write a program that takes one command line parameter which
    is the three letter symbol of a stock and queries the web, say cbs.marketwatch.com,
    and prints out the current price of the stock.'
  id: totrans-47
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**股票报价。** 编写一个程序，它接受一个命令行参数，即股票的三个字母符号，并查询网站，比如 cbs.marketwatch.com，并打印出股票的当前价格。'
- en: '**Curl.** Curl is a Linux program that takes the name of a web page as a command
    line argument and prints out its contents.'
  id: totrans-48
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Curl.** Curl 是一个 Linux 程序，它以一个网页的名称作为命令行参数，并打印出其内容。'
- en: '**Dead link checker.** Write a program that takes the URL of a web page as
    a command line argument and checks all of the hyperlinks in the page to see if
    they are valid. Use regular expressions to identify the hyperlinks. To start,
    only check completely specified URLs, e.g., that start with `http://`. Then, allow
    relative hyperlinks.'
  id: totrans-49
  prefs:
  - PREF_BQ
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**死链接检查器。** 编写一个程序，它以一个网页的 URL 作为命令行参数，并检查页面中的所有超链接是否有效。使用正则表达式来识别超链接。首先，只检查完全指定的
    URL，例如以 `http://` 开头的。然后，允许相对超链接。'
- en: ''
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '|'
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '|'
