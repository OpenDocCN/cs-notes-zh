- en: 6.3   Suffix Arrays
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.3 后缀数组
- en: 原文：[https://algs4.cs.princeton.edu/63suffix](https://algs4.cs.princeton.edu/63suffix)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://algs4.cs.princeton.edu/63suffix](https://algs4.cs.princeton.edu/63suffix)
- en: This chapter under major construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章正在大规模施工中。
- en: Important note.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重要说明。
- en: '*Beginning with Oracle and OpenJDK Java 7, Update 6, the `substring()` method
    takes [linear time and space](http://java-performance.info/changes-to-string-java-1-7-0_06)
    in the size of the extracted substring (instead of constant time and space). The
    [String API](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html) provides
    no performance guarantees for any of its methods, including `substring()` and
    `charAt()`.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*从Oracle和OpenJDK Java 7，Update 6开始，`substring()`方法在提取的子串大小上花费[线性时间和空间](http://java-performance.info/changes-to-string-java-1-7-0_06)（而不是常数时间和空间）。[String
    API](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)对其所有方法，包括`substring()`和`charAt()`，都不提供性能保证。'
- en: The programs in the textbook and booksite have been updated to avoid any dependency
    on a constant-time substring operation. However, if you are using the third printing
    of the textbook (or earlier), consider yourself warned.*
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 课本和书站中的程序已经更新，不再依赖于常数时间的子串操作。但是，如果您使用的是课本的第三版印刷版（或更早版本），请自行考虑。*
- en: Suffix sorting and suffix arrays.
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 后缀排序和后缀数组。
- en: 'Suffix sorting: given a string, sort the suffixes of that string in ascending
    order. Resulting sorted list is called a *suffix array*. Program [SuffixArray.java](SuffixArray.java.html)
    builds a sufix array data structure.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 后缀排序：给定一个字符串，按升序对该字符串的后缀进行排序。排序后的列表称为*后缀数组*。程序[SuffixArray.java](SuffixArray.java.html)构建了一个后缀数组数据结构。
- en: Longest repeated substring.
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 最长重复子串。
- en: An application of sorting to computational biology and plagiarism detection.
    Program [LongestRepeatedSubstring.java](LongestRepeatedSubstring.java.html) solves
    the problem using a suffix array.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 将排序应用于计算生物学和抄袭检测。程序[LongestRepeatedSubstring.java](LongestRepeatedSubstring.java.html)使用后缀数组解决了这个问题。
- en: Keyword in context (KWIC).
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 上下文关键词（KWIC）。
- en: Given the suffix array, easy to search for a string or sentence via binary search.
    Memory is linear. Search is O(K log N) where K is the length of the string you
    are searching for. (Can be done in K + log N by using the lcp array.) Sometimes
    referred to as KWIK (key word in context) and collocations. Used by linguists.
    Concordancer = program to make concordance. A concordance of the Dead Sea Scrolls
    was famously reverse-engineered and turned into a readable text by Martin Abegg.
    Program [KWIK.java](KWIK.java.html).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 给定后缀数组，通过二分搜索很容易搜索字符串或句子。内存是线性的。搜索是O(K log N)，其中K是您要搜索的字符串的长度。（通过使用lcp数组，可以在K
    + log N内完成。）有时被称为KWIK（关键词上下文）和共现。被语言学家使用。Concordancer = 制作索引的程序。马丁·阿贝格（Martin
    Abegg）曾经将死海古卷的索引反向工程并转换为可读文本。程序[KWIK.java](KWIK.java.html)。
- en: Manber's algorithm.
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Manber算法。
- en: However, the input size is N, so we might hope to exploit the overlapping nature
    of the substrings and do better. Program [Manber.java](Manber.java.html) sorts
    string suffixes using a version of Manber-Myers repeated doubling algorithm. [Larsson](http://www.larsson.dogma.net/tr204.pdf)
    gave an O(N log N) analysis when the internal sorting routine is replaced with
    an O(N log N) comparison based sorting algorithm.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，输入大小为N，因此我们可能希望利用子串的重叠性质并取得更好的效果。程序[Manber.java](Manber.java.html)使用Manber-Myers重复加倍算法的版本对字符串后缀进行排序。[Larsson](http://www.larsson.dogma.net/tr204.pdf)在内部排序例程替换为O(N
    log N)基于比较的排序算法时给出了O(N log N)的分析。
- en: Kasai's algorithm.
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Kasai算法。
- en: Here is a description of [Kasai's algorithm](https://www.geeksforgeeks.org/%C2%AD%C2%ADkasais-algorithm-for-construction-of-lcp-array-from-suffix-array/)
    for computing the lcp array from a suffix array.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是描述[Kasai算法](https://www.geeksforgeeks.org/%C2%AD%C2%ADkasais-algorithm-for-construction-of-lcp-array-from-suffix-array/)计算lcp数组的内容。
- en: Q+A
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 问答
- en: Linear time suffix sorting.
  id: totrans-17
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 线性时间后缀排序。
- en: '[Skewed divide-and-conquer](../references/papers/karkkainen-sanders.pdf). The
    simplest linear time suffix sorting solution. Recursively sort the suffixes whose
    indices are {0, 1, 2} mod 3, and then merge.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[倾斜分治](../references/papers/karkkainen-sanders.pdf)。最简单的线性时间后缀排序解决方案。递归地对索引为{0,
    1, 2} mod 3的后缀进行排序，然后合并。'
- en: Exercises
  id: totrans-19
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Give the suffix array for the string "abacadaba". Also, give a table of `lcp(i)`
    values for i = 1 to n-1.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出字符串"abacadaba"的后缀数组。此外，给出i从1到n-1的`lcp(i)`值表。
- en: Repeat the previous question for the string "mississippi".
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对字符串"mississippi"重复上一个问题。
- en: How many bytes are used to create a `SuffixArray` object with a string of length
    n?
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个长度为n的`SuffixArray`对象需要多少字节？
- en: What's wrong with the following code fragment to compute all the suffixes for
    suffix sort?
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下面的代码片段计算后缀排序的所有后缀有什么问题？
- en: '[PRE0]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Answer*: quadratic time *and* quadratic space.'
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案*：二次时间 *和* 二次空间。'
- en: What's wrong with the following code fragment to compute all the cyclic suffixes
    for suffix sort?
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下面的代码片段计算后缀排序的所有循环后缀有什么问题？
- en: '[PRE1]'
  id: totrans-27
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Answer*: quadratic time *and* quadratic space.'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案*：二次时间 *和* 二次空间。'
- en: What's wrong with the following code fragment to compute all the cyclic suffixes
    for suffix sort?
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下面的代码片段计算后缀排序的所有循环后缀有什么问题？
- en: '[PRE2]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Answer*: quadratic time *and* quadratic space.'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案*：二次时间 *和* 二次空间。'
- en: '**Longest common substring.** Write a program [LongestCommonSubstring.java](LongestCommonSubstring.java.html)
    that take two filenames as command-line arguments, reads the two text files, and
    find the longest substring that appears in both. *Hint*: create a suffix array
    for s#t where s and t are the two text strings and # is a character that does
    not appear in either.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最长公共子串。** 编写一个程序[LongestCommonSubstring.java](LongestCommonSubstring.java.html)，接受两个文件名作为命令行参数，读取这两个文本文件，并找到两者中都出现的最长子串。*提示*：为s#t创建一个后缀数组，其中s和t是两个文本字符串，#是两者都不出现的字符。'
- en: In 1970, D. Knuth conjectured that is was impossible to solve this problem in
    linear time. In fact, it is possible to do it in linear time (in the worst case)
    using suffix trees or suffix arrays.
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 1970年，D. Knuth猜想在线性时间内解决这个问题是不可能的。事实上，可以使用后缀树或后缀数组在线性时间内（在最坏情况下）解决这个问题。
- en: '**Burrows-Wheeler transform.** The Burrows-Wheeler transform (BWT) is a transformation
    that is used in data compression algorithms, including bzip2 and in high-throughput
    sequencing in genomics. Given a text string of length N (terminated by a special
    end-of-file character $ that is smaller than any other character), Consider the
    N-by-N matrix in which each row contains a different cyclic rotation of the original
    text string. Sort the rows lexicographically. The Burrows-Wheeler transform is
    the rightmost column in the sorted matrix. For example, BWT (mississippi$) = ipssm$pissii.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Burrows-Wheeler 变换。** Burrows-Wheeler 变换（BWT）是数据压缩算法中使用的一种转换，包括 bzip2 和基因组学中的高通量测序。给定长度为
    N 的文本字符串（以特殊的文件结束符 $ 结尾，比任何其他字符都小），考虑 N×N 矩阵，其中每行包含原始文本字符串的不同循环旋转。按字典顺序对行进行排序。Burrows-Wheeler
    变换是排序矩阵中的最右列。例如，BWT (mississippi$) = ipssm$pissii。'
- en: '**Burrows-Wheeler inverse transform.** The Burrows-Wheeler inverse transform
    (BWI) inverts the BWT. Given the BWT of a text string, design a linear-time algorithm
    to recover the original text string. For example, BWI(ipssm$pissii) = mississippi$.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Burrows-Wheeler 逆变换。** Burrows-Wheeler 逆变换（BWI）用于反转 BWT。给定文本字符串的 BWT，设计一个线性时间算法来恢复原始文本字符串。例如，BWI(ipssm$pissii)
    = mississippi$。'
- en: '**Circular string linearization.** Given a string s, find the rotation that
    is the smallest lexicographially. Problem arises in chemical databases for circular
    molecules. Each molecule is represented as a circular string. The canonical representation
    is the lexicographically smallest rotation. Devise an algorithm to compute this
    canonical representation of the circular string *Hint*: suffix sort.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**循环字符串线性化。** 给定一个字符串 s，找到字典序最小的旋转。在化学数据库中用于循环分子。每个分子表示为循环字符串。规范表示是字典序最小的旋转。设计一个算法来计算循环字符串的规范表示
    *提示*：后缀排序。'
- en: '*Alternate solutions*: Duval''s algorithm using a Lyndon decomposition and
    the surprisingly elegant [minimum expression algorithm](http://online-judge.uva.es/board/viewtopic.php?f=22&t=42601#p100062)
    by Zhou Yuan.'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*其他解决方案*：Duval 算法使用 Lyndon 分解和由周元提出的令人惊讶优雅的[最小表达算法](http://online-judge.uva.es/board/viewtopic.php?f=22&t=42601#p100062)。'
- en: '**Accelerated rank.** Use the following idea to speed up the binary search
    in the `rank()` method. Let `lo` and `hi` denote the left and right endpoints
    of the current search interval. Let `lcpLo` denote the lcp of the query string
    and `suffixes[lo]` and let `lcpHi` denote the lcp of the query string and `suffixes[hi]`.
    Then, when comparing the query string to `suffixes[mid]`, only need to compare
    the characters starting at `lcp = min(lcpLo, lcpHi)` because all of the suffixes
    in the search interval have the same first `lcp` characters.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**加速排名。** 使用以下思想加速 `rank()` 方法中的二分搜索。让 `lo` 和 `hi` 表示当前搜索区间的左右端点。让 `lcpLo`
    表示查询字符串和 `suffixes[lo]` 的 lcp，让 `lcpHi` 表示查询字符串和 `suffixes[hi]` 的 lcp。然后，在将查询字符串与
    `suffixes[mid]` 进行比较时，只需要比较从 `lcp = min(lcpLo, lcpHi)` 开始的字符，因为搜索区间中的所有后缀都具有相同的前
    `lcp` 个字符。'
- en: '**Accelerated rank analysis.** Show that the the worst-case running time of
    the accelerated rank is still proportional to L log N, where L is the length of
    the query and N is the length of the text. However, Myers and Manber report that
    this speeds up the computation in practice. In theory, it can be improved to L
    + log N using non-adjacent lcp values.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**加速排名分析。** 显示加速排名的最坏情况运行时间仍然与 L log N 成正比，其中 L 是查询的长度，N 是文本的长度。然而，Myers 和
    Manber 报告说这在实践中加快了计算。理论上，可以使用非相邻的 lcp 值将其改进为 L + log N。'
- en: '**Longest 3-repeated substring.** Given a text string, find the longest substring
    that is repeated 3 or more times.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最长 3 重复子串。** 给定一个文本字符串，找到重复 3 次或更多次的最长子串。'
- en: '**Longest k-repeated substring.** Given a text string and an integer k, find
    the longest substring that is repeated k or more times.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最长 k 重复子串。** 给定一个文本字符串和一个整数 k，找到重复 k 次或更多次的最长子串。'
- en: '**Long repeated substring.** Given a text string and an integer L, find all
    repeated substrings of length L or more.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**长重复子串。** 给定一个文本字符串和一个整数 L，找到所有长度大于等于 L 的重复子串。'
- en: '**Longest common substring among three strings.** Given three strings r, s,
    and t, find the longest substring that appears in all three.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**三个字符串中的最长公共子串。** 给定三个字符串 r、s 和 t，找到在所有三个字符���中出现的最长子串。'
- en: '**Longest common reverse-complemented substring.** Given two DNA strings, find
    the longest substring that appears in one, and whose reverse Watson-Crick complement
    appears in the other. Two strings s and t are reverse complements if t is the
    reverse of s except with the following substitutions AT, CG. For example ATTTCGG
    and CCGAAAT are reverse complements of each other. *Hint*: suffix sort.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最长公共反向互补子串。** 给定两个 DNA 字符串，找到出现在一个字符串中的最长子串，其反向 Watson-Crick 互补出现在另一个字符串中。如果
    t 是 s 的反向，除了以下替换 AT、CG，则两个字符串 s 和 t 是反向互补的。例如 ATTTCGG 和 CCGAAAT 是彼此的反向互补。 *提示*：后缀排序。'
- en: '**Suffix arrays with less memory.** Instead of using an array of substrings
    where `suffixes[i]` referes to the ith sorted suffix, maintain an array of integers
    so that index[i] referes to the offset of the ith sorted suffix. To compare the
    substrings represented by a = index[i] and b = index[j], compare the character
    `s.charAt(a)` against `s.charAt(b)`, `s.charAt(a+1)` against `s.charAt(b+1)`,
    and so forth. How much memory do you save? Is your program faster?'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**具有更少内存的后缀数组。** 不使用子字符串数组，其中 `suffixes[i]` 指的是第 i 个排序后缀，而是维护一个整数数组，其中 index[i]
    指的是第 i 个排序后缀的偏移量。要比较由 a = index[i] 和 b = index[j] 表示的子字符串，比较字符 `s.charAt(a)` 与
    `s.charAt(b)`，`s.charAt(a+1)` 与 `s.charAt(b+1)`，依此类推。你节省了多少内存？你的程序更快吗？'
- en: '**k-gram frequency counts.** Given a text string, design a data structure to
    efficiently answers queries of the form: how many times does a given k-gram appear?
    Should take time proportional to k log N in the worst case, where k is the length
    of the k-gram and N is the length of the text string.'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**k-gram 频率计数。** 给定一个文本字符串，设计一个数据结构以高效地回答以下形式的查询：给定一个 k-gram 出现了多少次？在最坏情况下，时间复杂度应该与
    k log N 成正比，其中 k 是 k-gram 的长度，N 是文本字符串的长度。'
- en: '**Most frequent k-gram.** Given a text string and an integer k, find the k-gram
    that appears most frequently.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最频繁的 k-gram。** 给定一个文本字符串和一个整数 k，找到出现频率最高的 k-gram。'
- en: '**Shortest unique substring.** Given a text string, find a shortest substring
    that appears exactly once. The problem arises in bioinformatics.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最短唯一子串。** 给定一个文本字符串，找到一个出现仅一次的最短子串。这个问题常见于生物信息学。'
- en: '**Shortest non-substring.** Given a bitstring, find a shortest bistring that
    does not appear as a substring.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最短非子串。** 给定一个比特串，找到一个最短的比特串，它不作为子串出现。'
- en: '**Shortest unique substring.** Given a text string, preprocess it to answer
    shortest unique substring queries of the following form: given an index q into
    the text string, find a shortest substring that contains index q and does not
    appear as a substring anywhere else in the text.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最短唯一子串。** 给定一个文本字符串，预处理它以回答以下形式的最短唯一子串查询：给定一个索引 q 到文本字符串，找到一个包含索引 q 且在文本中其他地方不作为子串出现的最短子串。'
