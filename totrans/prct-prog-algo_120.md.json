["```\npublic class Quick\n{\n   private static int partition(Comparable[] a, int lo, int hi)\n   {\n      int i = lo, j = hi+1;\n      while (true)\n      {\n         while (less(a[++i], a[lo])) if (i == hi) break;\n         while (less(a[lo], a[--j])) if (j == lo) break;\n         if (i >= j) break;\n         exch(a, i, j);\n      }\n      exch(a, lo, j);\n      return j;\n   }\n\n   private static void sort(Comparable[] a, int lo, int hi)\n   {\n      if (hi <= lo) return;\n      int j = partition(a, lo, hi);\n      sort(a, lo, j-1);\n      sort(a, j+1, hi);\n   }\n} \n\n```", "```\npublic class QuickCheck\n{\n   public static void main(String[] args)\n   {\n      int maxN = Integer.parseInt(args[0]);\n      double[] c = new double[maxN+1];\n      c[0] = 0;\n      for (int N = 1; N <= maxN; N++)\n         c[N] = (N+1)*c[N-1]/N + 2;\n\n      for (int N = 10; N <= maxN; N *= 10)\n      {\n         double approx = 2*N*Math.log(N) - 2*N;\n         StdOut.printf(\"%10d %15.2f %15.2f\\n\", N, c[N], approx);\n      }\n   }\n}\n\n```", "```\n% java QuickCheck 1000000\n        10           44.44           26.05\n       100          847.85          721.03\n      1000        12985.91        11815.51\n     10000       175771.70       164206.81\n    100000      2218053.41      2102585.09\n\n```"]