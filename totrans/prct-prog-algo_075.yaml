- en: '3.4 Case Study: N-body Simulation'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.4案例研究：N体模拟
- en: 原文：[https://introcs.cs.princeton.edu/python/34nbody](https://introcs.cs.princeton.edu/python/34nbody)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/python/34nbody](https://introcs.cs.princeton.edu/python/34nbody)
- en: In this section, we consider a new program that exemplifies object-oriented
    programming. Our task is to compose a program that dynamically simulates the motion
    of *n* bodies under the influence of mutual gravitational attraction. This *n-body
    simulation* problem was first formulated by Isaac Newton over 350 years ago, and
    scientists still study it intensely today.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们考虑一个展示面向对象编程的新程序。我们的任务是编写一个动态模拟*n*个物体在相互引力影响下的运动的程序。这个*n*体模拟问题是由艾萨克·牛顿在350多年前首次提出的，科学家们今天仍在密切研究。
- en: One reason that this problem is a compelling example of object-oriented programming
    is that it presents a direct and natural correspondence between physical objects
    in the real world and the abstract objects that we use in programming.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题是面向对象编程的一个引人入胜的例子的一个原因是，它在现实世界中的物理对象和我们在编程中使用的抽象对象之间呈现出直接而自然的对应关系。
- en: '* * *'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: N-Body Simulation
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: N-Body Simulation
- en: 'The bouncing-ball simulation of Section 1.5 is based on *Newton''s first law
    of motion*: a body in motion remains in motion at the same velocity unless acted
    on by an outside force. Embellishing that example to include *Newton''s second
    law of motion* (which explains how outside forces affect velocity) leads us to
    a basic problem that has fascinated scientists for ages. Given a system of *n*
    bodies, mutually affected by gravitational forces, the problem is to describe
    their motion.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 第1.5节的弹球模拟基于*牛顿第一运动定律*：运动中的物体保持相同速度的运动，除非受到外力的作用。将该例子装饰以包括*牛顿第二运动定律*（解释外力如何影响速度）将我们引向一个迷住科学家多年的基本问题。给定一个由引力相互影响的*n*个物体系统，问题是描述它们的运动。
- en: Body data type.
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 物体数据类型。
- en: 'In [bouncingball.py](../15inout/bouncingball.py.html) (from Section 1.5), we
    keep the displacement from the origin in the floats `rx` and `ry` and the velocity
    in the floats `vx` and `vy`, and displace the ball the amount it moves in one
    time unit with the statements:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '在[bouncingball.py](../15inout/bouncingball.py.html)（来自第1.5节），我们将与原点的位移保持在浮点数`rx`和`ry`中，将速度保持在浮点数`vx`和`vy`中，并用以下语句将球体在一个时间单位内移动的距离位移： '
- en: '[PRE0]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '![Adding vectors to move a ball](../Images/f316ebfd7ffe71d070c37f6b104ae87e.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![添加向量以移动球体](../Images/f316ebfd7ffe71d070c37f6b104ae87e.png)'
- en: 'With `Vector`, as defined in [vector.py](../33design/vector.py.html) (from
    Section 3.3), we can keep the position in the Vector `r` and the velocity in the
    `Vector` `v`, and then displace the body the amount it moves in `dt` time units
    with a single statement:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`Vector`，如在[vector.py](../33design/vector.py.html)（来自第3.3节）中定义的，我们可以将位置保持在`Vector`
    `r`中，将速度保持在`Vector` `v`中，然后用一条语句将物体在`dt`时间单位内移动的距离位移：
- en: '[PRE1]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The program [body.py](body.py.html) implements `Body`, a Python class for a
    data type for moving bodies. `Body` is a `Vector` client — the values of the data
    type are `Vector` objects that carry the body''s position and velocity, as well
    as a float that carries the mass. The data-type operations allow clients to move
    and to draw the body (and to compute the force vector due to gravitational attraction
    from another body), as defined by this API:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[body.py](body.py.html)实现了`Body`，一个用于移动物体的Python类。`Body`是一个`Vector`客户端 — 数据类型的值是`Vector`对象，携带了物体的位置和速度，以及一个携带了质量的浮点数。数据类型操作允许客户端移动和绘制物体（以及计算由另一个物体引起的引力吸引力的力向量），如此API所定义：
- en: '![Body API](../Images/4d9ad65fbefe7e8d72736215bc597698.png)'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![Body API](../Images/4d9ad65fbefe7e8d72736215bc597698.png)'
- en: Technically, the body's position (displacement from the origin) is not a vector
    (it is a point in space, not a direction and a magnitude), but it is convenient
    to represent it as a `Vector` because `Vector` operations lead to compact code
    for the transformation that we need to move the body. When we move a `Body`, we
    need to change not just its position, but also its velocity.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，物体的位置（与原点的位移）不是一个向量（它是空间中的一个点，不是一个方向和大小），但将其表示为`Vector`是方便的，因为`Vector`操作导致我们需要移动物体的转换的紧凑代码。当我们移动一个`Body`时，我们不仅需要改变它的位置，还需要改变它的速度。
- en: Force and motion.
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 力和运动。
- en: 'Newton''s second law of motion says that the force on a body (a vector) is
    equal to the scalar product of its mass and its acceleration (also a vector):
    **F** = *m* **a**. In other words, to compute the acceleration of a body, we compute
    the force, then divide by its mass. In `Body`, the force is a `Vector` argument
    `f` to `move()`, so that we can first compute the acceleration vector just by
    dividing by the mass (a scalar value that is kept as a float in an instance variable)
    and then compute the change in velocity by adding to it the amount this vector
    changes over the time interval (in the same way that we used the velocity to change
    the position). This law immediately translates to the following code for updating
    the position and velocity of a body due to a given force vector `f` and amount
    of time `dt`:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 牛顿第二运动定律表明，物体上的力（一个向量）等于其质量和加速度（也是一个向量）的数量积：**F** = *m* **a**。换句话说，要计算物体的加速度，我们计算力，然后除以其质量。在`Body`中，力是传递给`move()`的`Vector`参数`f`，因此我们可以首先通过除以质量（作为浮点数保留在实例变量中）来计算加速度向量，然后通过添加这个向量在时间间隔内变化的量来计算速度的变化（就像我们使用速度来改变位置一样）。这个定律立即转化为以下代码，用于根据给定的力向量`f`和时间量`dt`更新物体的位置和速度：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This code appears in the `move()` method in `Body`, to adjust its values to
    reflect the consequences of that force being applied for that amount of time:
    the body moves and its velocity changes. This calculation assumes that the acceleration
    is constant during the time interval.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码出现在`Body`的`move()`方法中，以调整其值以反映施加该力量的后果的时间量：物体移动，其速度改变。这个计算假定加速度在时间间隔内是恒定的。
- en: '![Motion near a stationary body](../Images/48957913788c18cec8278e08d84f208a.png)'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![靠近静止物体的运动](../Images/48957913788c18cec8278e08d84f208a.png)'
- en: Forces among bodies.
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 物体之间的力。
- en: '![Force from one body to another](../Images/85ec9a8aa8471b86bf7baaec4b9f0f5f.png)
    The computation of the force imposed by one body on another is encapsulated in
    the method `forceFrom()` in `Body`, which takes a `Body` object as argument and
    returns a `Vector`. Newton''s law of universal gravitation is the basis for the
    calculation: the magnitude of the gravitational force between two bodies is given
    by the product of their masses divided by the square of the distance between them
    (scaled by the gravitational constant *G*, which is 6.67 × 10^(-11) N m² / kg²)
    and the direction of the force is the line between the two particles. This law
    translates to the following code for computing `a.forceFrom(b)`:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![一个天体对另一个天体的作用力](../Images/85ec9a8aa8471b86bf7baaec4b9f0f5f.png) 一个天体对另一个天体施加的力的计算被封装在`Body`中的`forceFrom()`方法中，该方法以一个`Body`对象作为参数并返回一个`Vector`。牛顿的普遍引力定律是计算的基础：两个天体之间的引力大小等于它们的质量乘积除以它们之间距离的平方（乘以引力常数*G*，即6.67
    × 10^(-11) N m² / kg²），力的方向是两个粒子之间的连线。这个定律转化为以下代码来计算`a.forceFrom(b)`：'
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The *magnitude* of the force vector is the float magnitude, and the *direction*
    of the force vector is the same as the direction of the difference vector between
    the two body's positions. The force vector `f` is the product of magnitude and
    direction.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 力矢量的*大小*是浮点数大小，力矢量的*方向*与两个天体位置之间的差矢量的方向相同。力矢量`f`是大小和方向的乘积。
- en: Universe data type.
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Universe数据类型。
- en: '`Universe`, as defined in [universe.py](universe.py.html), is a data type that
    implements the following API:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '`Universe`，如在[universe.py](universe.py.html)中定义的，是一个实现以下API的数据类型：'
- en: '![Universe API](../Images/e7a8364488ba6b3b8c1a8bbdfff408df.png)'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![Universe API](../Images/e7a8364488ba6b3b8c1a8bbdfff408df.png)'
- en: 'Its data-type values define a universe (its size, the number of bodies, and
    an array of bodies) and two data-type operations: `increaseTime()`, which adjusts
    the positions (and velocities) of all of the bodies, and `draw()`, which draws
    all of the bodies. The key to the *n*-body simulation is the implementation of
    `increaseTime()` in `Universe`. The first part of the computation is a doubly
    nested loop that computes the force vector describing the gravitational force
    of each body on each other body. It applies the principle of superposition, which
    says that we can add together the force vectors affecting a body to get a single
    vector representing the aggregate force. After it has computed all of the forces,
    it calls the `move()` method for each body to apply the computed force for a fixed
    time quantum.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 其数据类型值定义了一个宇宙（其大小、天体数量和一个天体数组）和两个数据类型操作：`increaseTime()`，它调整所有天体的位置（和速度），以及`draw()`，它绘制所有天体。*n*-body模拟的关键在于`Universe`中`increaseTime()`的实现。计算的第一部分是一个双重嵌套循环，计算每个天体对其他每个天体施加的引力矢量。它应用了叠加原理，即我们可以将影响一个天体的所有力矢量相加，得到代表总力的单一矢量。在计算了所有力之后，它调用每个天体的`move()`方法来应用计算出的力进行固定时间量的运动。
- en: File format.
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 文件格式。
- en: 'The constructor reads the universe parameters and body descriptions from a
    file that contains the following information:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数从一个文件中读取宇宙参数和天体描述，该文件包含以下信息：
- en: The number of bodies
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 天体数量
- en: The radius of the universe
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 宇宙的半径
- en: The position, velocity, and mass of each body
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个天体的位置、速度和质量
- en: 'The files [2bodytiny.txt](2bodytiny.txt), [2body.txt](2body.txt), [3body.txt](3body.txt),
    and [4body.txt](4body.txt), contain data of that form. As usual, for consistency,
    all measurements are in standard SI units (recall that the gravitational constant
    *G* also appears in our code). With this defined file format, the code for our
    `Universe` constructor is straightforward. Each `Body` is characterized by five
    floats: the *x*- and *y*-coordinates of its position, the *x*- and *y*-components
    of its initial velocity, and its mass.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 文件[2bodytiny.txt](2bodytiny.txt)、[2body.txt](2body.txt)、[3body.txt](3body.txt)和[4body.txt](4body.txt)包含了这种形式的数据。和往常一样，为了保持一致性，所有的测量单位都是标准国际单位制（请注意，引力常数*G*也出现在我们的代码中）。有了这种定义的文件格式，我们的`Universe`构造函数的代码就很简单了。每个`Body`由五个浮点数来描述：其位置的*x*和*y*坐标，初始速度的*x*和*y*分量，以及其质量。
- en: The static images shown below were made by modifying `Universe` and `Body` to
    draw the bodies in white, and then black on a gray background. By comparison,
    the dynamic images that you get when you run [universe.py](universe.py.html) as
    it stands give a realistic feeling of the bodies orbiting one another, which is
    difficult to discern in the fixed pictures.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 下面显示的静态图像是通过修改`Universe`和`Body`来绘制白色的天体，然后在灰色背景上绘制黑色的天体制作的。相比之下，当你运行[universe.py](universe.py.html)时，得到的动态图像给人一种天体相互轨道运行的真实感觉，这在固定图片中很难辨认。
- en: '![Universe output](../Images/26d9a535e856bfcd2b5e47252596ecef.png)'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![Universe输出](../Images/26d9a535e856bfcd2b5e47252596ecef.png)'
- en: '* * *'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Q & A
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Q & A
- en: '**Q.** The `Universe` API is certainly small. Why not just implement that code
    in a main() test client for `Body`?'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** `Universe`的API确实很小。为什么不只是在`Body`的`main()`测试客户端中实现那些代码？'
- en: '**A.** Our design is an expression of what many people believe about the universe:
    it was created, and then time moves on. It clarifies the code and allows for maximum
    flexibility in simulating what goes on in the universe.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 我们的设计表达了许多人对宇宙的信念：它是被创造出来的，然后时间流逝。它澄清了代码，并允许在模拟宇宙中发生的事情时具有最大的灵活性。'
- en: '**Q.** Why is `forceFrom()` a method? Wouldn''t it be better for it to be a
    function that takes two `Body` objects as arguments?'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 为什么`forceFrom()`是一个方法？它不是作为一个接受两个`Body`对象作��参数的函数会更好吗？'
- en: '**A.** Implementing `forceFrom()` as a method is one of several possible alternatives,
    and having a function that takes two `Body` objects as arguments is certainly
    a reasonable choice. Some programmers prefer to completely avoid functions in
    data-type implementations; another option is to maintain the force acting on each
    `Body` as an instance variable. Our choice is a compromise between these two options.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 将`forceFrom()`实现为一个方法是几种可能的选择之一，而将一个函数作为参数接受两个`Body`对象显然是一个合理的选择。一些程序员更喜欢完全避免在数据类型实现中使用函数；另一个选择是将作用在每个`Body`上的力作为实例变量维护。我们的选择是这两个选项之间的折衷。'
- en: '**Q.** Shouldn''t the `move()` method in [body.py](body.py.html) update the
    position using the old velocity instead of the updated velocity?'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** [body.py](body.py.html)中的`move()`方法应该使用旧速度而不是更新后的速度来更新位置吗？'
- en: '**A.** It turns out that using the updated velocity (known as the *leapfrog
    method*) produces more accurate results than using the old velocity (known as
    the *Euler method*). If you take a course in numerical analysis, you will learn
    why.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 结果表明，使用更新后的速度（称为*跳跃法*）比使用旧速度（称为*欧拉法*）产生更准确的结果。如果你学习数值分析课程，你会明白为什么。'
- en: '* * *'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Exercises
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Develop an object-oriented version of [bouncingball.py](../15inout/bouncingball.py.html)
    (from Section 1.5). Include a constructor that starts each ball moving a random
    direction at a random velocity (within reasonable limits) and a test client that
    takes an integer `n` from the command line and simulates the motion of `n` bouncing
    balls.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发一个面向对象的版本[bouncingball.py](../15inout/bouncingball.py.html)（来自第1.5节）。包括一个构造函数，以随机方向和随机速度（在合理范围内）启动每个球的运动，并编写一个测试客户端，从命令行获取一个整数`n`，并模拟`n`个弹跳球的运动。
- en: Add to [body.py](body.py.html) a `main()` function that unit tests the Body
    data type.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[body.py](body.py.html)中添加一个`main()`函数，用于对Body数据类型进行单元测试。
- en: Modify [body.py](body.py.html) so that the radius of the circle it draws for
    a body is proportional to its mass.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改[body.py](body.py.html)，使其绘制的圆的半径与其质量成比例。
- en: What happens in a universe with no gravitational force? This situation would
    correspond to `forceFrom()` in `Body` always returning the zero vector.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在没有引力作用的宇宙中会发生什么？这种情况对应于`Body`中的`forceFrom()`始终返回零向量。
- en: Create a data type `Universe3D` to model three-dimensional universes. Develop
    a data file to simulate the motion of the planets in our solar system around the
    sun.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个数据类型`Universe3D`来模拟三维宇宙。开发一个数据文件，模拟我们太阳系中行星围绕太阳的运动。
- en: Compose a test client that simulates the motion of two different universes (defined
    by two different files and appearing in two distinct parts of the standard drawing
    window). You also need to modify the `draw()` method in `Body`.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个测试客户端，模��两个不同宇宙的运动（由两个不同文件定义，并出现在标准绘图窗口的两个不同部分）。你还需要修改`Body`中的`draw()`方法。
- en: Compose a class `RandomBody` that initializes its instance variables with (carefully
    chosen) random values instead of taking them as arguments. Then compose a client
    that takes a single argument `n` from the command line and simulates motion in
    a random universe with `n` bodies.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个类`RandomBody`，它使用（精心选择的）随机值初始化其实例变量，而不是将它们作为参数传递。然后编写一个客户端，从命令行获取一个参数`n`，并在一个具有`n`个物体的随机宇宙中模拟运动。
- en: Modify `Vector` (as defined in [vector.py](../33design/vector.py.html) from
    Section 3.3) to include a method `__iadd__(self, other)` to support the in-place
    addition operator `+=`, which enables the client to compose code like `r += v.scale(dt)`.
    Using this method, revise [body.py](body.py.html) and [universe.py](universe.py.html).
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Vector`（如第3.3节中定义的[vector.py](../33design/vector.py.html)）以包含一个方法`__iadd__(self,
    other)`来支持原地加法运算符`+=`，使客户端能够编写像`r += v.scale(dt)`这样的代码。使用这种方法，修改[body.py](body.py.html)和[universe.py](universe.py.html)。
- en: Modify the `Vector` constructor (as defined in [vector.py](../33design/vector.py.html)
    from Section 3.3) so that if passed a positive integer `d` as argument, it creates
    and returns the all-zero vector of dimension `d`. Using this modified constructor,
    revise universe.py so that it works with three- (or higher-) dimensional universes.
    For simplicity, don't worry about changing the `draw()` method in [body.py](body.py.html)
    — it projects the position onto the plane defined by the first *x*- and *y*-coordinates.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`Vector`构造函数（如第3.3节中定义的[vector.py](../33design/vector.py.html)）以便如果传递一个正整数`d`作为参数，则创建并返回维度为`d`的全零向量。使用这个修改后的构造函数，修改universe.py以便它可以处理三维（或更高维）宇宙。为简单起见，不要担心更改[body.py](body.py.html)中的`draw()`方法
    - 它将位置投影到由第一个*x*和*y*坐标定义的平面上。
- en: '* * *'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Creative Exercise
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
- en: '**New universe**. Design a new universe with interesting properties and simulate
    its motion with `Universe`, as defined in [universe.py](universe.py.html). This
    exercise is truly an opportunity to be creative!'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**新宇宙**。设计一个具有有趣属性的新宇宙，并使用[universe.py](universe.py.html)中定义的`Universe`来模拟其运动。这个练习真的是一个发挥创造力的机会！'
- en: '**Percolation**. Compose an object-oriented version of [percolation.py](../24percolation/percolation.py.html)
    (from Section 2.4). Think carefully about the design before you begin, and be
    prepared to defend your design decisions.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**渗透**。编写一个面向对象的版本[percolation.py](../24percolation/percolation.py.html)（来自第2.4节）。在开始之前，请仔细考虑设计，并准备好为你的设计决策辩护。'
