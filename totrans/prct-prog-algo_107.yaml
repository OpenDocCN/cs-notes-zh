- en: 5.1   String Sorts
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.1   字符串排序
- en: 原文：[https://algs4.cs.princeton.edu/51radix](https://algs4.cs.princeton.edu/51radix)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://algs4.cs.princeton.edu/51radix](https://algs4.cs.princeton.edu/51radix)
- en: This section under major construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节正在大规模施工中。
- en: LSD radix sort.
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: LSD 基数排序。
- en: Program [LSD.java](LSD.java.html) implements LSD radix sort for fixed length
    strings. It includes a method for sorting 32-bit integers, treating each integer
    as a 4-byte string. When N is large, this algorithm is 2-3x faster than the system
    sort.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 程序 [LSD.java](LSD.java.html) 实现了用于固定长度字符串的 LSD 基数排序。它包括一种用于对待每个整数作为 4 字节字符串处理的
    32 位整数进行排序的方法。当 N 很大时，这种算法比系统排序快 2-3 倍。
- en: MSD radix sort.
  id: totrans-5
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: MSD 基数排序。
- en: Program [MSD.java](MSD.java.html) implements MSD radix sort.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 程序 [MSD.java](MSD.java.html) 实现了 MSD 基数排序。
- en: 3-way string quicksort.
  id: totrans-7
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 三向字符串快速排序。
- en: Program [Quick3string.java](Quick3string.java.html) implements 3-way string
    quicksort.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 程序 [Quick3string.java](Quick3string.java.html) 实现了三向字符串快速排序。
- en: Q+A
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 问与答
- en: Exercises
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: '**Frequency counts.** Read in a list of strings and print out their frequency
    counts. Algorithm: read strings into an array, 3-way radix quicksort them, and
    compute their frequency counts. Bonus speedup: compute the counts during the 3-way
    partitioning. Disadvantage: uses space to store all the strings. Alternate: TST.'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**频率计数。** 读入一个字符串列表并打印它们的频率计数。算法：将字符串读入数组，使用三向基数快速排序对它们进行排序，并计算它们的频率计数。加速奖励：在三向分区期间计算计数。缺点：使用空间存储所有字符串。备选方案：TST。'
- en: '**Sorting uniformly distributed data.** Given N random real numbers from [0,
    1], consider the following algorithm for sorting them: Partition [0, 1] into N
    equally spaced sub-intervals. Rearrange (ala cumulative counts) the N elements
    so that each element is in its appropriate bucket. Insertion sort the elements
    in each bucket (or equivalently, just insertion sort the whole file). That is,
    MSD radix sort for one level, then cutoff to insertion sort. [Try to do in-place?]
    *Solution*: It will take O(N) time in total on average. Let n_i be the number
    of elements in bucket i. The expected time to insertion sort all of the buckets
    is O(n) since E[sum_i (n_i)^2] <= 2n.'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**对均匀分布数据进行排序。** 给定 N 个来自 [0, 1] 区间的随机实数，考虑以下算法对它们进行排序：将 [0, 1] 区间分成 N 个等间距子区间。重新排列（类似于累积计数）这
    N 个元素，使每个元素都在其适当的桶中。对每个桶中的元素进行插入排序（或者等效地，只对整个文件进行插入排序）。也就是说，对一个级别进行 MSD 基数排序，然后切换到插入排序。[尝试原地进行？]
    *解决方案*：平均总共需要 O(N) 的时间。设 n_i 是桶 i 中的元素数量。插入排序所有桶的预期时间是 O(n)，因为 E[sum_i (n_i)^2]
    <= 2n。'
- en: Given an array of N decimal integers of different lengths, describe how to sort
    them in O(N + K) time, where K is the total number of digits overall all the N
    integers.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定一个包含 N 个不同长度的十进制整数的数组，描述如何在 O(N + K) 的时间内对它们进行排序，其中 K 是所有 N 个整数的总位数。
- en: '**American flag sort.** (in-place key-indexed counting) Given an array with
    N distinct values between 0 and R-1, rearrange them in ascending order in linear
    time and with O(R) extra space. Leads to an (essentially) in-place string sort.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**美国国旗排序。**（原地键索引计数）给定一个包含 N 个介于 0 和 R-1 之间的不同值的数组，以线性时间和 O(R) 的额外空间对它们进行升序排列。导致（本质上）原地字符串排序。'
- en: '*Hint:*: compute the `count[]` array, which tells you where the keys need to
    go. Scan over the input array. Take the first key, find the bin in which it belong,
    and swap it into place (updating the corresponding `count[]` entry). Repeat with
    the second key, but be careful to skip over keys already known to be where they
    belong.'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：计算 `count[]` 数组，告诉你键需要放置的位置。扫描输入数组。取第一个键，找到它应该属于的桶，并将其交换到相应的位置（更新相应的 `count[]`
    条目）。重复第二个键，但要小心跳过已知属于其位置的键。'
- en: Web Exercises
  id: totrans-16
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络练习
- en: '**2-sum.** Given an array `a[]` of N 64-bit integers and a target value T,
    determine whether there are two distinct integers i and j such that `a[i]` + `a[j]`
    equals T. Your algorithm should run in linear time in the worst case.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**2-sum.** 给定一个包含 N 个 64 位整数的数组 `a[]` 和一个目标值 T，确定是否存在两个不同的整数 i 和 j，使得 `a[i]`
    + `a[j]` 等于 T。你的算法应该在最坏情况下线性时间运行。'
- en: '*Solution.* Radix sort the array in linear time. Scan a pointer i from left
    to right and a pointer j from right to left: consider a[i] + a[j]. If it is bigger
    than T, advance the j pointer; if it is smaller than T, advance the i pointer;
    if it is equal to T, we have found the desired indices.'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*。在线性时间内对数组进行基数排序。从左到右扫描指针 i 和从右到左扫描指针 j：考虑 a[i] + a[j]。如果它大于 T，则推进 j
    指针；如果它小于 T，则推进 i 指针；如果它等于 T，则我们找到了所需的索引。'
- en: Note that the array of integers can be radix sorted in linear time and constant
    extra space using the advanced radix sorting algorithm of Franceschini, Muthukrishnan,
    and Patrascu.
  id: totrans-19
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，整数数组可以使用 Franceschini、Muthukrishnan 和 Patrascu 的高级基数排序算法在线性时间和常数额外空间内进行基数排序。
- en: '**Binary search in a sorted array of strings.** Implement a version of binary
    search for sorted arrays of strings that keeps track of how many characters are
    known to be in common between the query string and the lo and hi endpoints. Use
    this information to avoid character compares during binary search. Compare the
    performance of this algorithm with a version that calls `compareTo()`. (The `compareTo()`
    approach has the advantage that it doesn''t need to make calls to `charAt()` becasue
    it is implemented as an instance method of the `String` data type.)'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在排序的字符串数组中进行二分查找。** 实现一个用于排序字符串数组的二分查找版本，它跟踪查询字符串与 lo 和 hi 端点之间已知相同字符的数���。利用这些信息在二分查找过程中避免字符比较。比较此算法与调用
    `compareTo()` 的版本的性能。（`compareTo()` 方法的优点是它不需要调用 `charAt()`，因为它是作为 `String` 数据类型的实例方法实现的。）'
