- en: 6.5   Reductions
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.5   归约
- en: 原文：[https://algs4.cs.princeton.edu/65reductions](https://algs4.cs.princeton.edu/65reductions)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '[https://algs4.cs.princeton.edu/65reductions](https://algs4.cs.princeton.edu/65reductions)'
- en: This chapter under construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节正在建设中。
- en: Reduction.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 归约。
- en: Reduction or simulation is a powerful idea in computer science.... Problem-solving
    framework that transforms a problem X into a simpler problem Y such that it is
    easy to deduce a solution to the original problem X based on the solution for
    Y.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学中，归约或模拟是一个强大的概念.... 将问题 X 转化为一个更简单的问题 Y 的问题解决框架，以便根据 Y 的解推导出原始问题 X 的解。
- en: 'Eric Alander - "Reduction provides an abstraction. If A efficiently reduces
    to B and B efficiently reduces to A, then A and B are equivalent in a meaningful
    sense: they are two different ways to look at the same problem. Instead of infinitely
    many computational problems, we are left with a smaller number of classes of equivalent
    problems. Nothing had prepared the computing community for the shocking insight
    that there are really just a handful of fundamentally different computational
    problems that people want to solve." Partitions natural computational problems
    into meaningful groups based on resource bounds.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: Eric Alander - “归约提供了一种抽象。如果 A 高效地归约到 B，且 B 高效地归约到 A，那么 A 和 B 在某种意义上是等价的：它们是观察同一问题的两种不同方式。我们不再有无限多的计算问题，而是留下了更少数量的等价问题类。没有什么能让计算社区为这一惊人的洞察做好准备，即人们真正想要解决的计算问题只有几个。根据资源限制将自然计算问题划分为有意义的组别。”
- en: Upper bounds.
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 上界。
- en: 3-COLLINEAR to sorting.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3-共线到排序。
- en: Convex hull to sorting (Graham scan).
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 凸包到排序（Graham 扫描）。
- en: MEDIAN to SORTING.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 中位数到排序。
- en: Bipartite matching to maxflow. [BipartiteMatchingToMaxflow.java](BipartiteMatchingToMaxflow.java.html)
    computes a maximum cardinality matching in a bipartite graph by reducing the problem
    to max flow. The order of growth of the running time is E V in the worst case
    since each augmentation increases the cardinality of the matching by one. The
    Hopcroft-Karp algorithm improves the running time to E sqrt(V).
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二分图匹配到最大流。[BipartiteMatchingToMaxflow.java](BipartiteMatchingToMaxflow.java.html)
    通过将问题归约为最大流，在二分图中计算最大基数匹配。在最坏情况下，每次增广都会增加匹配的基数。Hopcroft-Karp 算法将运行时间改进为 E sqrt(V)。
- en: 'LP standard form: a standard form linear program is { max cx : Ax <= b, x ≥
    0 }. Show how to reduce a general linear program (with ≤, ≥, and = constraints)
    to standard form.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'LP 标准形式：标准形式线性规划是 { max cx : Ax <= b, x ≥ 0 }。展示如何将一般线性规划（带有 ≤、≥ 和 = 约束）归约为标准形式。'
- en: Maximum flow to linear programming.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最大流到线性规划。
- en: Assignment problem to linear programming.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分配问题到线性规划。
- en: PERT to topological sort in a DAG.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PERT 到 有向无环图的拓扑排序。
- en: USTCONN (s-t connectivity in undirected graphs) to STCONN (undirected s-t connectivity
    in directed graphs).
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: USTCONN（无向图中的 s-t 连通性）到 STCONN（有向图中的无向 s-t 连通性）。
- en: Shortest paths on undirected graphs to shortest paths on directed graphs.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 无向图上的最短路径到有向图上的最短路径。
- en: Euclidean MST to Delauney triangulation.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 欧几里得最小生成树到 Delauney 三角剖分。
- en: LP feasibility reduces to LP. (Use binary search. Need to bound value of a bounded
    LP.)
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LP 可行性归约为 LP。（使用二分搜索。需要限制有界 LP 的值。）
- en: Two-person zero-sum games to LP. [TwoPersonZeroSumGame.java](TwoPersonZeroSumGame.java.html)
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 二人零和博弈到 LP。[TwoPersonZeroSumGame.java](TwoPersonZeroSumGame.java.html)
- en: LP reduces to two-person zero-sum games. (Exercise 26 in Bradley, Hax, and Magnanti)
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LP 可归约为二人零和博弈。（Bradley, Hax, 和 Magnanti 的练习 26）
- en: Lower bounds.
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 下界。
- en: Element distinctness to sorting.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 元素唯一性到排序。
- en: Closest pair 2D to Euclidean MST 2D.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 2D 最近点对问题到 2D 欧几里得最小生成树。
- en: Convex hull to Voronoi / Delauney triangulation.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 凸包到 Voronoi / Delauney 三角剖分。
- en: 3-SUM to 3-COLLINEAR.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3-SUM 到 3-共线。
- en: 'Exercise: 3-SUM to 4-SUM.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习：3-SUM 到 4-SUM。
- en: 'Exercise: 3-SUM to 3-SUMplus'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习：3-SUM 到 3-SUMplus
- en: 'Exercise: 3-COLLINEAR to 3-CONCURRENT.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 练习：3-共线到 3-共点。
- en: 3-SAT to INDEPENDENT-SET.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 3-SAT 到 独立集。
- en: INDEPENDENT-SET to ILP.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 独立集到整数线性规划。
- en: '*Element distinctness.* Given N elements x[1], ..., x[n] from a totally ordered
    universe, is there a pair i ≠ j such that x[i] = x[j]? Theta(N log N) lower bound
    in comparison tree model and algebraic decision tree model. O(N log N) easy by
    sorting.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*元素唯一性。* 给定 N 个来自全序宇宙的元素 x[1], ..., x[n]，是否存在一对 i ≠ j，使得 x[i] = x[j]？在比较树模型和代数决策树模型中有
    Theta(N log N) 的下界。通过排序可以轻松达到 O(N log N)。'
- en: '*Solution 1* (comparison tree model): Given N distinct values. Let ai be ith
    smallest element. In any comparison based algorithm for the problem, we must compare
    a[i] against a[i-1]; otherwise the algorithm could not distinguish between the
    case a[i-1] < a[i] and a[i-1] = a[i]. Consider two different permutations of the
    N elements. There is an element a[i] where a[i-1] precedes a[i] in the first permutation
    but a[i-1] precedes a[i] in the second. Since every comparison based algorithm
    must compare a[i] and a[i-1], the algorithm runs differently on the two permutations.
    Thus, there are at leats N! leaves. [reference](http://dimacs.rutgers.edu/~gkindler/ds02c/ex5_ans.ps)'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案 1*（比较树模型）：给定 N 个不同的值。让 ai 成为第 i 小的元素。在任何基于比较的算法中，我们必须比较 a[i] 和 a[i-1]；否则算法无法区分
    a[i-1] < a[i] 和 a[i-1] = a[i] 的情况。考虑 N 个元素的两种不同排列。存在一个元素 a[i]，在第一个排列中 a[i-1] 在
    a[i] 之前，但在第二个排列中 a[i-1] 在 a[i] 之后。由于每个基于比较的算法必须比较 a[i] 和 a[i-1]，算法在这两个排列上运行不同。因此，至少有
    N! 个叶子节点。[参考链接](http://dimacs.rutgers.edu/~gkindler/ds02c/ex5_ans.ps)'
- en: '*Solution 2* (comparison tree model): suppose the elements are all distinct
    and a_1 < a_2 < ... < a_N. Any correct algorithm for element distinctness must
    compare a_i with a_i+1 for each i < N. If not, then the algorithm would produce
    the same output if we changed a_i+1 to a_i (but this would change the answer from
    no duplicates to has duplicates). The set of compares the algorithm uses forms
    a DAG. Find the total order (in linear time) and this gives the sorted order.
    Thus, the algorithm can be used for sorting distinct elements and the sorting
    lower bound applies.'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解法2*（比较树模型）：假设元素都是不同的且a_1 < a_2 < ... < a_N。任何正确的元素唯一性算法必须对每个i < N比较a_i和a_i+1。如果不这样做，那么如果我们将a_i+1更改为a_i，算法将产生相同的输出（但这将从无重复更改为有重复的答案）。算法使用的比较集合形成一个DAG。找到总顺序（线性时间）并得到排序顺序。因此，该算法可用于对不同元素进行排序，且排序下界适用。'
- en: '*Remark*: these arguments apply to comparision tree model of computation but
    not to linear decision tree or algebraic decision tree model of computation. Here''s
    a more general argument (courtesy of Jeff Erickson): Consider the space R^n of
    all possible inputs. The set of positive inputs has n! connected components, one
    for each permutation. On the other hand, the subset of inputs that can reach any
    leaf in a linear decision tree is convex, and therefore connected. Thus, any linear
    decision tree that determines uniqueness has at least n! leaves. The result for
    linear decision trees is [On the complexity of computations under varying sets
    of primitives.](http://dx.doi.org/10.1016/0022-0000(79)90054-0) by Dobkin and
    Lipton. The result for algebraic decision trees is [Lower bounds for algebraic
    computation trees.](http://doi.acm.org/10.1145/800061.808735) by Ben-Or. The result
    for the special case of integer inputs is more subtle: see *A lower bound for
    the integer element distinctness problem* by Lubiw and Racs.'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*备注*：这些论点适用于比较树模型的计算，但不适用于线性决策树或代数决策树模型的计算。这里有一个更一般的论点（由Jeff Erickson提供）：考虑所有可能输入的空间R^n。正输入的集合有n！个连通分量，每个排列一个。另一方面，可以到达线性决策树中任何叶子的输入子集是凸的，因此是连通的。因此，任何确定唯一性的线性决策树至少有n！个叶子。线性决策树的结果是由Dobkin和Lipton在[On
    the complexity of computations under varying sets of primitives.](http://dx.doi.org/10.1016/0022-0000(79)90054-0)中得出的。代数决策树的结果是由Ben-Or在[Lower
    bounds for algebraic computation trees.](http://doi.acm.org/10.1145/800061.808735)中得出的。整数输入的特殊情况的结果更微妙：参见Lubiw和Racs的*整数元素唯一性问题的下界*。'
- en: '*3-SUM.*'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*3-SUM*。'
- en: '*3-SAT.*'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*3-SAT*。'
- en: Linear programming.
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线性规划。
- en: Generalization of system of linear equations to inequalities.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将线性方程组推广到不等式。
- en: '[lecture slides](http://www.cs.princeton.edu/~wayne/teaching/lp-simplex.pdf)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '[讲座幻灯片](http://www.cs.princeton.edu/~wayne/teaching/lp-simplex.pdf)'
- en: Simplex algorithm.
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 单纯形算法。
- en: 'Invented by George Dantzig in 1948. According to Dongarra and Sullivan, the
    simplex algorithm is one of the top 10 algorithms with the greatest influence
    in science and engineering in the 20th century. Generalization of Gaussian elimination
    to handle inequalities. Program [LinearProgramming.java](LinearProgramming.java.html)
    is a bare bones implementation. It solves { max cx : Ax <= b, x >= 0 } assuming
    that b >= 0\. Hence x = 0 is a basic feasible solution (and we don''t need to
    worry about Phase I of simplex).'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '由George Dantzig于1948年发明。根据Dongarra和Sullivan的说法，单纯形算法是20世纪对科学和工程影响最大的十大算法之一。广义的高斯消元以处理不等式。程序[LinearProgramming.java](LinearProgramming.java.html)是一个基本实现。它解决{
    max cx : Ax <= b, x >= 0 }假设b >= 0。因此x = 0是一个基本可行解（我们不需要担心单纯形的第一阶段）。'
- en: '*Fundamental theorem of LP.* Every LP of form (P) has the following three properties:
    (i) if it has no optimal solution, it is either infeasible or unbounded (ii) if
    it has a feasible solution, it has a basic feasible solution (iii) if it has an
    optimal solution, it has a basic optimal solution.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '*线性规划的基本定理*。形式为（P）的每个LP都具有以下三个属性：（i）如果它没有最优解，则它要么是不可行的，要么是无界的（ii）如果它有一个可行解，则它有一个基本可行解（iii）如果它有一个最优解，则它有一个基本最优解。'
- en: '*Strong duality theorem.* Every LP of form (P) has a dual (D) { min by : y
    A >= c : y >= 0 }. p1 + p2 + ... + pM = 1 -> x1 + x2 + ... + xm = 1/V.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*强对偶定理*。形式为（P）的每个LP都有一个对偶（D）{ min by : y A >= c : y >= 0 }。p1 + p2 + ... +
    pM = 1 -> x1 + x2 + ... + xm = 1/V。'
- en: If (P) is bounded and feasible, then (D) is bounded and feasible. Moreover,
    they have the same optimal value. Simplex algorithm solves both problems simultaneously.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果（P）有���且可行，则（D）也有界且可行。此外，它们具有相同的最优值。单纯形算法同时解决这两个问题。
- en: '*Remarkable property.* In practice, simplex algorithm typically terminates
    in at most 2(m+n) pivots. n = total variables (original + slack), m = equations.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '*显著特性*。实践中，单纯形算法通常在最多2(m+n)个主元中终止。n = 总变量（原始+松弛），m = 方程。'
- en: '*Pitfalls.* Degeneracy, cycling.'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '*陷阱*。退化，循环。'
- en: Assignment problem.
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分配问题。
- en: 'Formulate as LP. Relies on the *Birchoff-von Neumann Theorem*: all extreme
    points of assignment problem LP are {0, 1}. [AssignmentProblemToLP.java](AssignmentProblemToLP.java.html)
    reduces the assignment problem (max weight perfect matching) to linear programming.
    [EasyAssignmentProblemToLP.java](EasyAssignmentProblemToLP.java.html) puts everything
    in main and doesn''t extract the dual solution. [Hungarian.java](Hungarian.java.html)
    implements the Hungarian algorithm; the order of growth of the running time in
    the worst case is N^4. --> [AssignmentProblem.java](AssignmentProblem.java.html)
    implements the successive shortest paths algorithm; the order of growth of the
    running time in the wrost case is N^3 log N. [AssignmentProblemDense.java](AssignmentProblemDense.java.html)
    implements the successive shortest paths algorithm; the order of growth of the
    running time in the wrost case is N^3.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 形式化为 LP。依赖于 *Birchoff-von Neumann 定理*：分配问题 LP 的所有极端点都是 {0, 1}。[AssignmentProblemToLP.java](AssignmentProblemToLP.java.html)
    将分配问题（最大权重完美匹配）简化为线性规划。[EasyAssignmentProblemToLP.java](EasyAssignmentProblemToLP.java.html)
    将所有内容放在主函数中，不提取对偶解。[Hungarian.java](Hungarian.java.html) 实现了匈牙利算法；在最坏情况下，运行时间的增长数量级为
    N^4。 --> [AssignmentProblem.java](AssignmentProblem.java.html) 实现了连续最短路径算法；在最坏情况下，运行时间的增长数量级为
    N^3 log N。[AssignmentProblemDense.java](AssignmentProblemDense.java.html) 实现了连续最短路径算法；在最坏情况下，运行时间的增长数量级为
    N^3。
- en: Two-person zero-sum games.
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 二人零和博弈。
- en: 'Reduces to LP. Can assume payoff matrix is strictly positive (adding a constant
    to each entry increases the value of the game by M, but does not change the solutions).
    (P) min { x1 + ... + xm, : x >= 0, M^t x >= 1} and (D) max { y1 + ... + yn, :
    y >= 0, My <= 1}. Normalize the solution vectors x* and y* to get the row player''s
    (minimizing) and column player''s (maximizing) optimal strategies; the normalizing
    constant is the value of the game.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '简化为 LP。可以假设收益矩阵严格为正（对每个条目添加一个常数会使游戏的价值增加 M，但不会改变解）。（P）min { x1 + ... + xm,
    : x >= 0, M^t x >= 1} 和（D）max { y1 + ... + yn, : y >= 0, My <= 1}。将解向量 x* 和 y*
    标准化，以获得行玩家（最小化）和列玩家（最大化）的最佳策略；标准化常数是游戏的价值。'
- en: 'Trick. Replace variables: xi = pi / V; max V -> min 1/V; [Game theory, p. 6-7](http://www.scribd.com/doc/30906572/Game-THeory)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 技巧。替换变量：xi = pi / V；最大化 V -> 最小化 1/V；[博弈论，第 6-7 页](http://www.scribd.com/doc/30906572/Game-THeory)
- en: Program [ZeroSumGame.java](ZeroSumGame.java.html) implements this approach.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 程序 [ZeroSumGame.java](ZeroSumGame.java.html) 实现了这种方法。
- en: 'Note: any LP can be put into this form by an appropriate change of variables.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 注意：通过适当的变量更改，任何 LP 都可以转化为这种形式。
- en: '**The minimax theorem.** (von Neumann). For every finite two-person zero-sum
    game, there exists a value V and a mixed strategy for each player such that (i)
    given the row player''s strategy, the best possible payoff for the column player
    is V, and (ii) given the column player''s strategy, the best possible payoff for
    the row player is -V.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**极小极大定理。**（冯·诺伊曼）。对于每个有限的二人零和博弈，存在一个值 V 和每个玩家的混合策略，使得（i）给定行玩家的策略，列玩家的最佳可能收益是
    V，以及（ii）给定列玩家的策略，行玩家的最佳可能收益是 -V。'
- en: Linear programming solvers.
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 线性规划求解器。
- en: '[LinearProgramming.java](LinearProgramming.java.html) is a bare-bones version
    of the simplex algorithm. It assumes b >= 0, so that x = 0 is a starting basic
    feasible solution. [TwoPhaseSimplex.java](TwoPhaseSimplex.java.html) is a bare-bones
    version of the two-phase simplex algorithm, which removes the assumption b >=
    0.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[LinearProgramming.java](LinearProgramming.java.html) 是单纯形算法的简化版本。假设 b >= 0，因此
    x = 0 是一个起始的基本可行解。[TwoPhaseSimplex.java](TwoPhaseSimplex.java.html) 是两阶段单纯形算法的简化版本，它消除了假设
    b >= 0。'
- en: '[OR-Objects](http://opsresearch.com/OR-Objects/) contains a Java linear program
    solver. [LPDemo.java](LPDemo.java.html) demonstrates how to solve a linear program
    using [or124.jar](or124.jar).'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[OR-Objects](http://opsresearch.com/OR-Objects/) 包含一个 Java 线性规划求解器。[LPDemo.java](LPDemo.java.html)
    演示了如何使用 [or124.jar](or124.jar) 解决线性规划问题。'
- en: '[QSopt](http://www2.isye.gatech.edu/~wcook/qsopt/software/java.htm) is a Java
    linear program solver created by David Applegate, William Cook, Sanjeeb Dash,
    and Monika Mevenkamp. It can be used at no cost for research or education purposes.
    [QSoptSolver.java](QSoptSolver.java.html) solves a linear program in LP format,
    such as [beer.lp](beer.lp).'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[QSopt](http://www2.isye.gatech.edu/~wcook/qsopt/software/java.htm) 是由大卫·阿普尔盖特、威廉·库克、Sanjeeb
    Dash 和 Monika Mevenkamp 创造的 Java 线性规划求解器。可以免费用于研究或教育目的。[QSoptSolver.java](QSoptSolver.java.html)
    解决了 LP 格式的线性规划问题，例如 [beer.lp](beer.lp)。'
- en: '[Matlab](http://www.mathworks.com/products/matlab/) contains a linear programming
    solver in the optimization toolbox.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Matlab](http://www.mathworks.com/products/matlab/) 包含优化工具箱中的线性规划求解器。'
- en: '[PRE0]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[CPLEX](http://www-01.ibm.com/software/integration/optimization/cplex-optimizer/)
    is a high-performance mathematical programming solver for linear programming,
    mixed integer programming, and quadratic programming. It supports interfaces to
    C, C++, Java, Python, Matlab, and Microsoft Excel. It is also accessible via the
    modeling systems including AIMMS, AMPL, GAMS, and MPL.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[CPLEX](http://www-01.ibm.com/software/integration/optimization/cplex-optimizer/)
    是用于线性规划、混合整数规划和二次规划的高性能数学规划求解器。支持与 C、C++、Java、Python、Matlab 和 Microsoft Excel
    的接口。也可通过建模系统（包括 AIMMS、AMPL、GAMS 和 MPL）访问。'
- en: '[AMPL](http://www.ampl.com/) is a modeling language for mathematical programming.
    The files [beer.mod](beer.mod) and [beer.dat](beer.dat) specify the model and
    data for the brewery problem.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[AMPL](http://www.ampl.com/) 是数学规划的建模语言。文件 [beer.mod](beer.mod) 和 [beer.dat](beer.dat)
    指定了酿酒厂问题的模型和数据。'
- en: '[PRE1]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Microsoft Excel has a primitive solver add-in for Windows, but it is no longer
    available for Mac.
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Microsoft Excel 在 Windows 上有一个基本的求解器插件，但在 Mac 上不再可用。
- en: Q + A
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 问答
- en: '**Q.** Undirected shortest paths with negative weights to directed shortest
    paths?'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 无向最短路径与带负权重的有向最短路径？'
- en: '**A.** Need more clever reduction to avoid negative cycles (via nonbipartite
    matching).'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 需要更聪明的简化来避免负循环（通过非二部匹配）。'
- en: Exercises
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: '*gcd and lcm.* Reduce lcm to gcd.'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*最大公约数和最小公倍数.* 将最小公倍数简化为最大公约数。'
- en: '*Table k-sum.* Given a k-by-N table of integers, are there k that sum to 0,
    one from each of the k rows?'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*表 k-和.* 给定一个 k 行 N 列的整数表，是否有 k 个数相加为 0，每个数来自 k 行中的一个？'
- en: '**Coin distinctness.** Given N coins and a balance scale, determine if the
    coins all weigh different amounts. Prove that any algorithm that solves the problem
    has complexity at least N log N. *Hint*: you may use the fact that given N real
    numbers, element distinctness requires at least N log N comparisons in the linear
    decision tree model (where you can make comparisons between arbitrary linear combinations
    of the N elements, e.g, x1 + 2x2 < x3).'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**硬币不同。** 给定N枚硬币和一个天平，确定这些硬币是否都有不同的重量。证明解决该问题的任何算法的复杂度至少为N log N。*提示*：你可以使用这样一个事实，即给定N个实数，元素的不同性在线性决策树模型中至少需要N
    log N次比较（在这个模型中，你可以对N个元素的任意线性组合进行比较，例如，x1 + 2x2 < x3）。'
- en: '**Set equality.** Given two sets S and T, does S equal T? Give an O(N log N)
    algorithm and a matching lower bound.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**集合相等。** 给定两个集合S和T，S是否等于T？给出一个O(N log N)的算法和一个匹配的下界。'
- en: '**Set subset.** Given two sets S and T, is S a subset of T? Give an O(N log
    N) algorithm and a matching lower bound.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**集合子集。** 给定两个集合S和T，S是否是T的子集？给出一个O(N log N)的算法和一个匹配的下界。'
- en: '**Set disjointness.** Given two sets S and T, does S intersect T equal the
    empty set? Give an O(N log N) algorithm and a matching lower bound. (Since S and
    T are sets, there are no duplicated elements in either.)'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**集合不相交。** 给定两个集合S和T，S与T的交集是否为空集？给出一个O(N log N)的算法和一个匹配的下界。（由于S和T是集合，因此两者中没有重复元素。）'
- en: '*Solution.* To get the O(N log N) upper bound, sort the union of the elements
    in S and T and check for duplicates.'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 要获得O(N log N)的上界，对S和T中的元素的并集进行排序，并检查重复项。'
- en: '**Set disjointness.** Given two sets S and T, each in ascending order, does
    S intersect T equal the empty set? Prove an Omega(N log N) lower bound or given
    an O(N) algorithm.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**集合不相交。** 给定两个按升序排列的集合S和T，S与T的交集是否为空集？证明一个Omega(N log N)的下界或给出一个O(N)的算法。'
- en: '**Lower bound for merging two lists.** Show any comparison-based algorithm
    for merging two lists of size N requires at least 2N-1 comparisons in the worst
    case. *Solution*: lower bound holds even if all elements are distinct. If the
    ith and (i+1)st smallest elements are in different lists, then they must be compared.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**合并两个列表的下界。** 展示任何基于比较的合并两个大小为N的列表的算法在最坏情况下至少需要2N-1次比较。*解决方案*：即使所有元素都不同，下界也成立。如果第i个和第(i+1)个最小的元素在不同的列表中，则它们必须进行比较。'
- en: '**Lower bound for binary search.** log(N+1) comparisons required. *Solution*:
    lower bound holds even if all elements are distinct....'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**二分查找的下界。** 需要log(N+1)次比较。*解决方案*：即使所有元素都不同，下界也成立……'
- en: '**Euclidean TSP and MST lower bounds.** Given an Omega(N log N) for the Euclidean
    TSP or Euclidean MST (requires algebraic decision trees to make sense since you
    want to allow a reasonable algorithm to compute distances). *Solution*: choose
    N points on a line. Optimal tour must visit the points in ascending order.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**欧几里得TSP和MST下界。** 对于欧几里得TSP或欧几里得MST，给出一个Omega(N log N)的下界（需要代数决策树来理解，因为你希望允许一个合理的算法来计算距离）。*解决方案*：在一条线上选择N个点。最优路径必须按升序访问这些点。'
- en: '**Lower bound for mode.** Theta(N log N) bound for mode. *Solution*: could
    solve element distinctness problem by finding mode and checking whether it is
    more than one.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**模式的下界。** 模式的Theta(N log N)下界。*解决方案*：可以通过找到模式并检查是否超过一个来解决元素不同性问题。'
- en: '**Lower bound for closest pair.** Theta(N log N) bound for closest pair. *Solution*:
    could solve element distinctness problem in sub-lineararithmic time if had a sub-lineararithmic
    algorithm by finding closest pair and checking if they are equal.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最接近对的下界。** 最接近对的Theta(N log N)下界。*解决方案*：如果有一个次线性对数算法，可以通过找到最接近对并检查它们是否相等来在次线性对数时间内解决元素不同性问题。'
- en: '**Smallest and second smallest.** Describe how to find both the smallest and
    second smallest element using at most N + log N comparisons. *Solution*: divide
    the elements into pairs and compare two elements in each pair. Recur with the
    N/2 winners from each pair. After N-1 comparisons, we have the minimum element.
    Note that each element is compared with at most log N other elements. In particular,
    the smallest element is compared with at most log N other elements, and one of
    these must be the second smallest. If you keep track of all the comparisons, you
    can remember the log N involving the smallest element and compare these.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最小和次小元素。** 描述如何使用最多N + log N次比较找到最小和次小元素。*解决方案*：将元素分成一对一对，并比较每对中的两个元素。使用每对中的N/2个获胜者进行递归。经过N-1次比较后，我们得到最小元素。请注意，每个元素最多与log
    N个其他元素进行比较。特别是，最小元素最多与log N个其他元素进行比较，其中一个必须是次小元素。如果你跟踪所有的比较，你可以记住涉及最小元素的log N次比较，并进行比较。'
- en: '**Counting inversions.** Prove a Theta(N log N) lower bound. This is an open
    research question.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**计数逆序对。** 证明Theta(N log N)的下界。这是一个尚未解决的研究问题。'
- en: '**Nuts and bolts.** Prove a Theta(N log N) lower bound for the nuts and bolts
    problem in the quicksort section. [A matching worst case upper bound of O(N log
    N) is known, but it is remarkably complicated.]'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**螺母和螺栓。** 证明快速排序部分的螺母和螺栓问题的Theta(N log N)下界。[已知匹配的最坏情况上界为O(N log N)，但这是非常复杂的。]'
- en: '**Existence symbol table.** Suppose you had a comparison-based algorithm that
    supports insert and exists in O(1) comparisons per operation. Explain why this
    is impossible in this model of computation. *Solution*: to solve element distinctness
    in O(N) time, for each of the N elments, check whether it''s already in the data
    structure (if so, then this is a duplicate); if not, insert it.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**存在符号表。** 假设你有一个支持插入和存在操作的基于比较的算法，每次操作都只需要O(1)次比较。解释为什么在这种计算模型中这是不可能的。*解决方案*：为了在O(N)时间内解决元素不同性问题，对于每个N个元素，检查它是否已经在数据结构中（如果是，则这是一个重复项）；如果不是，则插入它。'
- en: Model a constraint of the form x ≤ y using integer programming (Ax = b, x >=
    0, x integral).
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用整数规划模型一个形如x ≤ y的约束（Ax = b，x >= 0，x为整数）。
- en: Model a constraint of the form x = { 0 or 1 } using integer programming.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用整数规划模型一个形如x = {0或1}的约束。
- en: Model a constraint of the form x = { 1 or 2 or 4 } using integer programming.
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用整数规划模型一个形如x = {1或2或4}的约束。
- en: '**Tait coloring.** Model 3-edge coloring cubic graph using IP.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Tait着色。** 使用IP模拟3边着色立方图。'
- en: Assign organ donors to patients.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为患者分配器官捐赠者。
- en: '**Bipartite vertex cover.** Reduce to max flow.'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**二部顶点覆盖。** 减少到最大流。'
- en: '**Transitive reduction and transitive closure.** Reduce [transitive reduction](http://en.wikipedia.org/wiki/Transitive_reduction)
    to transitive closure and vice versa (when running time is measured only as a
    function of the number of vertices V). Also reduces to Boolean matrix multiplication.'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**传递闭包和传递闭包。** 将[传递闭包](http://en.wikipedia.org/wiki/Transitive_reduction)减少到传递闭包，反之亦然（当运行时间仅作为顶点数V的函数时）。也可减少到布尔矩阵乘法。'
- en: '**3SUM''.** Given three sets of integers A, B, and C of total size n, are there
    a in A, b in B and c in C such that a + b = c? Prove that 3SUM linear-time reduces
    to 3SUM'' and vice versa.'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**3SUM''。** 给定三组整数A、B和C，总大小为n，是否存在A中的a，B中的b和C中的c，使得a + b = c？证明3SUM线性时间减少到3SUM''，反之亦然。'
- en: '*Solution.* To show that 3SUM reduces to 3SUM'', set A = S, B = S, and C =
    -S.'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 要显示3SUM减少到3SUM''，设置A = S，B = S，C = -S。'
- en: To show that 3SUM' reduces to 3SUM, assume that all integers are positive (if
    not, add k to each element in A and B and 2K to each element in C). Set m = 2
    max(A, B, C). For each element a in A, put a + m in S. For each element b in B,
    put b in S. For each elemenet in C, put -c -m in S.
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要显示3SUM'减少到3SUM，假设所有整数都是正数（如果不是，则将k添加到A和B中的每个元素，将2K添加到C中的每个元素）。设置m = 2 max(A,
    B, C)。对于A中的每个元素a，在S中放置a + m。对于B中的每个元素b，在S中放置b。对于C中的每个元素，在S中放置-c -m。
- en: '**Inequalities satisfied with equality.** Given a system of linear inequalities
    *A* *x* ≤ *b*, design a linear program to determine which inequalities among *A*
    *x* ≤ *b* must be satisfied with equality in any feasible solution *x*.'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**不等式满足等式。** 给定线性不等式系统*A* *x* ≤ *b*，设计一个线性规划来确定在任何可行解*x*中哪些不等式必须满足等式。'
- en: '**Equality constraint.** Model a linear programming equality constraint using
    two <= constraints.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**等式约束。** 使用两个<=约束模拟线性规划等式约束。'
- en: '**Unrestricted variables.** Model a linear programming unrestricted variable
    x using two nonnegative variables y and z.'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**无限制变量。** 使用两个非负变量y和z来模拟线性规划无限制变量x。'
- en: '**Unbounded LP.** If (P) is unbounded, then there exists a vector d >= 0 such
    that Ad <= 0 and cd > 0\. First explain why if such a vector d exists, then the
    problem is unbounded. Next, modify the simplex algorithm to report such a vector
    when the LP is unbounded. *Answer*: by assumption b >= 0 and x = 0 is feasible.
    Thus α d is feasible for any positive constant α and has objective value α cd.
    The vector d can be identified by checking if the min ratio rule fails. In this
    case, the entries in column q are nonpositive (Ad <= 0) and the objective function
    coefficient is positive (cd > 0).'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**无界LP。** 如果（P）是无界的，则存在一个矢量d >= 0，使得Ad <= 0且cd > 0。首先解释为什么如果存在这样的矢量d，则问题是无界的。接下来，修改单纯形算法，在LP无界时报告这样的矢量。*答案*：根据假设b
    >= 0且x = 0是可行的。因此，对于任何正常数α，αd都是可行的，并且具有目标值αcd。通过检查最小比率规则是否失败，可以识别矢量d。在这种情况下，列q中的条目为非正（Ad
    <= 0），并且目标函数系数为正（cd > 0）。'
- en: '**Reduced costs.** Modify the simplex algorithm to report the reduced costs
    (shadow prices). Give economic interpretation.'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**减少成本。** 修改单纯形算法以报告减少的成本（影子价格）。给出经济解释。'
- en: '**Dantzig''s steepest edge rule.** Modify the simplex algorithm so that it
    always chooses the most positive objective function coefficient.'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**丹齐格的最陡边规则。** 修改单纯形算法，使其始终选择最正的目标函数系数。'
- en: '**Cycling.** Give a pathological linear programming input that causes the simplex
    algorithm (using the steepest edge rule) to cycle.'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**循环。** 给出一个导致单纯形算法（使用最陡边规则）循环的病态线性规划输入。'
- en: '**Bottneck assignment problem.** Given N men and N women. Each person has M
    attributes. Each person specifies a set of desirable attributes of people of the
    opposite gender. Find a perfect matching in which the most unlucky person is matched
    with a partner with the fewest number of specified attributes. Reduce this problem
    to the assignment problem.'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**瓶颈分配问题。** 给定N个男人和N个女人。每个人有M个属性。每个人指定异性的一组理想属性。找到一个完美匹配，其中最不幸的人与指定属性最少的伴侣匹配。将此问题减少到分配问题。'
- en: '*Solution.* Create an edge-weighted graph where the weight of an edge is the
    minimum number of desirable attributes satisfied by either person. The goal is
    the maximize the weight of the minimum-weigh edge in an assignment. One solution
    to this problem is to use binary search (eliminate all edges of weight less than
    a given threshold) and solve the resulting bipartite perfect matching problem.'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 创建一个边权重图，其中边的权重是两个人中满足的可取属性的最小数量。目标是最大化分配中最小权重边的权重。解决此问题的一种方法是使用二分查找（消除所有权重小于给定阈值的边）并解决结果的二部完美匹配问题。'
- en: '**Chinese postman problem.** Given a strongly connected digraph G, find a directed
    cycle of minimum length that that traverses each edge at least once. (It turns
    out that the best cycle will visited each edge at most twice.) The graph is Eulerian
    if each vertex is *balanced*: its degree equals its outdegree. Divide the unbalanced
    vertices into two sets: L = vertices with outdegree < indegree, R = vertices with
    outdegree > indegree. By adding a directed path from a vertex in L to one in R,
    we improve the balance. Form a weighted bipartite graph on (L, R) where the weight
    of an edge from v to w is the length of the shortest path from v to w in G. Find
    a min weight matching and add these edges to G to make it Eulerian. Then, find
    a cycle. This is known as the Edmonds-Johnson (1973) algorithm. (Similar algorithm
    works for undirected graphs, but need to find a min weight perfect matching in
    a nonbipartite graph.)'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**中国邮递员问题。** 给定一个强连通的有向图 G，找到一个最短长度的有向循环，该循环至少经过每条边一次。（事实证明，最佳循环将最多访问每条边两次。）如果每个顶点都是*平衡*的，则图是欧拉图：其度等于其出度。将不平衡的顶点分为两组：L
    = 出度小于入度的顶点，R = 出度大于入度的顶点。通过在 L 中的一个顶点到 R 中的一个顶点添加一个有向路径，我们改善了平衡性。在 (L, R) 上形成一个加权二部图，其中从
    v 到 w 的边的权重是 G 中从 v 到 w 的最短路径的长度。找到一个最小权重匹配，并将这些边添加到 G 中使其成为欧拉图。然后，找到一个循环。这被称为
    Edmonds-Johnson（1973）算法。（类似的算法适用于无向图，但需要在非二部图中找到一个最小权重完美匹配。）'
