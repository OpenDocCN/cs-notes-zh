["```\nfor (int i = 0; i < N; i++)\n   for (int j = 0; j < N; j++)\n      for (int k = 0; k < N; k++)\n         C[i][j] += A[i][k] * B[k][j];\n\n```", "```\ndouble[] ai;                   // row i of A\ndouble[] bj = new double[N];   // column j of B\nfor (int j = 0; j < N; j++) {\n   for (int k = 0; k < N; k++) bj[k] = B[k][j];\n   for (int i = 0; i < N; i++) {\n      ai = A[i];\n      double s = 0;\n      for (int k = 0; k < N; k++)\n          s += ai[k] * bj[k];\n      C[i][j] = s;\n   }\n}\n\n```", "```\n 0x0 + 1x1 +  1x2 =  4\n 2x0 + 4x1 -  2x2 =  2\n 0x0 + 3x1 + 15x2 = 36\n\n```", "```\n     2x0 + 4x1 -  2x2 =  2\n     0x0 + 1x1 +  1x2 =  4\n     0x0 + 3x1 + 15x2 = 36\n\n    ```", "```\n    double[] temp = A[i];   // ith row of A\n    A[i] = A[j];\n    A[j] = temp;\n\n    ```", "```\n     2x0 + 4x1 -  2x2 =  2\n     0x0 + 1x1 +  1x2 =  4\n     0x0 + 0x1 + 12x2 = 24\n\n    ```", "```\nfor (int j = N - 1; j >= 0; j--) {\n    double t = 0.0;\n    for (int k = j + 1; k < N; k++)\n        t += A[j][k] * x[k];\n    x[j] = (b[j] - t) / A[j][j];\n}\n\n```", "```\nfor (int i = 0; i < N; i++) {\n   // pivot within b\n   for (int j = i + 1; j < N; j++)\n      b[j] -= b[i] * A[j][i] / A[i][i];\n\n   // pivot within A\n   for (int j = i + 1; j < N; j++)\n      // optimization precompute m = A[j][i] / A[i][i] and loop upwards\n      for (int k = N - 1; k >= i; k--)\n         A[j][k] -= A[i][k] * A[j][i] / A[i][i];\n      A[j][i] = 0.0;  // can stop previous loop at i+1\n\n```", "```\nax0 +  x1 = 1\n x0 + 2x1 = 3\n\n```", "```\npublic class Matrix {\n    private double[][] data;\n    private int M;\n    private int N;\n}\n\n```", "```\npublic static Matrix KL(Matrix A, int r) {\n   int M = A.getRowDimension();\n   int N = A.getColumnDimension();\n   SingularValueDecomposition svd = A.svd();\n   Matrix Ur = svd.getU().getMatrix(0, M-1, 0, r-1);\n   Matrix Vr = svd.getV().getMatrix(0, N-1, 0, r-1);\n   Matrix Sr = svd.getS().getMatrix(0, r-1, 0, r-1);\n   return Ur.times(Sr).times(Vr.transpose());\n}\n\n```", "```\n0.1  0.0  0.0  0.2     val[] =  0.1  0.2  0.3  0.4  0.5\n0.3  0.0  0.0  0.0     col[] =  0    3    0    1    2\n0.0  0.0  0.0  0.0       \n0.0  0.4  0.5  0.0     row[] = 0 2 3 3 5\n\n```", "```\ndouble[] y = new double[N];\nfor (int i = 0; i < N; i++)\n   for (j = row[i]; j < row[i+1]; j++)\n      y[i] += val[j] * x[col[j]];\n\n```", "```\ndouble[] y = new double[N];\nfor (int j = 0; j < N; j++)\n   for (int i = row[j]; j < row[j+1]; i++)\n      y[col[i]] += val[i] * x[j];\n\n```", "```\n    0x0 +  x1 = 7\n     x0 + 0x1 = 5\n\n    ```", "```\n         1  0  0  0  1         1          1/2\n        -1  1  0  0  1         0           0\n    A = -1 -1  1  0  1    b =  0     x =   0\n        -1 -1 -1  1  1         0           0\n        -1 -1 -1 -1  1         0          1/2\n\n    ```", "```\n        1.1000         0         0         0         0    1.0000\n       -0.9000    1.1000         0         0         0    1.0000\n       -0.9000   -0.9000    1.1000         0         0    1.0000\n       -0.9000   -0.9000   -0.9000    1.1000         0    1.0000\n       -0.9000   -0.9000   -0.9000   -0.9000    1.1000    1.0000\n       -0.9000   -0.9000   -0.9000   -0.9000   -0.9000    1.0000\n\n    ```", "```\n      2x1 + 4x2 - 2x3 =  2\n      0x1 + 1x2 + 1x3 =  4\n      0x1 + 0x2 + 4x3 =  8\n\n    ```", "```\n      2x1 + 4x2 - 2x3 =  2\n      4x1 + 9x2 - 3x3 =  8\n    - 2x1 - 3x2 + 7x3 = 10\n\n    ```", "```\n    -9x1 -  x2 +  x3 +  x4 +  x5 + 3x6 =   2\n     2x1 - 7x2 -  x3 +  x4 +  x5 +  x6 = -12\n      x1 + 2x2 - 9x3 -  x4 +  x5 + 3x6 = -33\n      x1 +  x2 + 2x3 - 7x4 -  x5 +  x6 = -29\n      x1 +  x2 +  x3 + 2x4 - 9x5 - 3x6 =  21\n      x1 +  x2 +  x3 +  x4 + 2x5 - 7x6 = -13\n\n    ```", "```\n    | ax  ay  1 |\n    | bx  by  1 |\n    | cx  cy  1 |\n\n    ```", "```\n    | ax  ay  ax^2 + ay^2  1 |\n    | bx  by  bx^2 + by^2  1 |\n    | cx  cy  cx^2 + cy^2  1 |\n    | dx  dy  dx^2 + dy^2  1 |\n\n    ```", "```\n     3  -1\n    -1   3\n\n    ```", "```\n      { 0.386, 0.147, 0.202, 0.062, 0.140, 0.047, 0.016 }\n      { 0.107, 0.267, 0.227, 0.120, 0.207, 0.052, 0.020 }\n      { 0.035, 0.101, 0.188, 0.191, 0.357, 0.067, 0.061 }\n      { 0.021, 0.039, 0.112, 0.212, 0.431, 0.124, 0.061 }\n      { 0.009, 0.024, 0.075, 0.123, 0.473, 0.171, 0.125 }\n      { 0.000, 0.103, 0.041, 0.088, 0.391, 0.312, 0.155 }\n      { 0.000, 0.008, 0.036, 0.083, 0.364, 0.235, 0.274 }\n\n    ```", "```\n        1    1/2  1/3  1/4              16   -120    240   -140\n    H = 1/2  1/3  1/4  1/5     H^-1 = -120   1200  -2700   1680\n        1/3  1/4  1/5  1/6             240  -2700   6480  -4200\n        1/4  1/5  1/6  1/7            -140   1680  -4200   2800\n\n    ```", "```\n    Petroleum      0.10 0.40 0.60 0.20\n    Textiles       0.00 0.10 0.00 0.10\n    Transportation 0.20 0.15 0.10 0.30\n    Chemicals      0.40 0.30 0.25 0.20\n\n    ```", "```\n    Coal               0.10 0.25 0.20\n    Electricity        0.30 0.40 0.50\n    Auto manufacturing 0.10 0.15 0.10\n\n    ```", "```\n    eggs per yearling 4\n    eggs per 2 year old 20 \n    eggs per 3 year old 60\n\n    survival rate of eggs = 0.005\n    yearling survival  0.3\n    2 year old survival 0.6\n\n    0    4   20   60\n    0.05 0    0    0\n    0    0.3  0    0\n    0    0    0.6  0\n\n    ```", "```\n     -5046135670319638   -3871391041510136 -5206336348183639   -6745986988231149\n      -640032173419322    8694411469684959  -564323984386760   -2807912511823001\n    -16935782447203334  -18752427538303772 -8188807358110413  -14820968618548534\n     -1069537498856711  -14079150289610606  7074216604373039    7257960283978710\n\n    ```", "```\n    for (int i = 0; i < N; i++)  {\n       for (int j = 0; j <= i; j++) {\n          double sum = 0.0;\n          for (int k = 0; k < j; k++) {\n             sum += L[i][k] * L[j][k];\n          }\n          if (i == j) L[i][i] = Math.sqrt(A[i][i] - sum);\n          else        L[i][j] = 1.0 / L[j][j] * (A[i][j] - sum)\n       }\n    }\n\n    ```"]