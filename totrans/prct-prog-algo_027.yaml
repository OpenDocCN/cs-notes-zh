- en: 5.2   Turing Machines
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.2   图灵机
- en: 原文：[https://introcs.cs.princeton.edu/java/52turing](https://introcs.cs.princeton.edu/java/52turing)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/java/52turing](https://introcs.cs.princeton.edu/java/52turing)
- en: This section under major construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节正在大力施工中。
- en: Turing machine.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图灵机。
- en: The Turing machine is one of the most beautiful and intriguing intellectual
    discoveries of the 20th century. Turing machine is a simple and useful abstract
    model of computation (and digital computers) that is general enough to embody
    any computer program. It forms the foundation of theoretical computer science.
    Because of its simple description and behavior, it is amenable to mathematical
    analysis. This analysis has led to a deeper understanding of digital computers
    and computation, including the revelation that there are some computational problems
    that cannot be solved on computers at all, no matter how fast the processor, or
    how much memory is available.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 图灵机是20世纪最美丽和最引人入胜的智力发现之一。图灵机是计算（和数字计算机）的简单且有用的抽象模型，足够一般以包含任何计算机程序。它构成了理论计算机科学的基础。由于其简单的描述和行为，它适合进行数学分析。这种分析导致对数字计算机和计算的更深入理解，包括揭示了有些计算问题根本无法在计算机上解决，无论处理器有多快，内存有多大。
- en: '**Turing machine simulator.** This is a graphical Turing machine simulator
    that was written in Java by Tom Ventimiglia under the supervision of Bob Sedgewick
    and Kevin Wayne.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**图灵机模拟器。** 这是一个由 Tom Ventimiglia 在 Bob Sedgewick 和 Kevin Wayne 的监督下用 Java
    编写的图灵机模拟器。'
- en: Executable jar ([turing.jar](http://introcs.cs.princeton.edu/turing/turing.jar)).
    To execute, type `java -jar turing.jar` from the command line.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可执行 jar 文件（[turing.jar](http://introcs.cs.princeton.edu/turing/turing.jar)）。要执行，请在命令行中键入
    `java -jar turing.jar`。
- en: OS X app ([Turing.zip](http://introcs.cs.princeton.edu/turing/Turing.zip)).
    To execute, double click Turing.zip file to unzip. Double click Turing.app to
    launch.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: OS X 应用程序（[Turing.zip](http://introcs.cs.princeton.edu/turing/Turing.zip)）。要执行，请双击
    Turing.zip 文件解压缩。双击 Turing.app 启动。
- en: You are welcome to inspect and modify the [source code](http://introcs.cs.princeton.edu/turing/src)
    for your own use.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎查看和修改[源代码](http://introcs.cs.princeton.edu/turing/src)以供您自己使用。
- en: '**Components.**  Alan Turing sought to describe the most primitive model of
    a mechanical device that had the same basic capabilities as a human "computer."
    In his epoch making [1936 paper](http://www.abelard.org/turpap2/tp2-ie.asp), Alan
    Turing introduced an abstract machine, which would later come to be known as a
    Turing machine. The machine consists of the following components:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**组件。** 阿兰·图灵试图描述一种与人类“计算机”具有相同基本功能的机械设备的最原始模型。在他具有划时代意义的[1936年论文](http://www.abelard.org/turpap2/tp2-ie.asp)中，阿兰·图灵介绍了一个抽象机器，后来被称为图灵机。该机器由以下组件组成：'
- en: 'The *ticker-tape* stores the input, the intermediate results, and the output.
    The tape is one arbitrarily long strip, divided into cells. Each cell stores one
    of a finite alphabet of symbols. In the example below, we use a 4 character alphabet
    consisting of 0, 1, A, X, and #.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*纸带* 存储输入、中间结果和输出。纸带是一条任意长的带子，分成单元格。每个单元格存储有限符号字母表中的一个符号。在下面的示例中，我们使用由0、1、A、X
    和 # 组成的4个字符字母表。'
- en: '![Turing machine tape](../Images/33a0ae54331679d55cb44999b9c064a5.png)'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![图灵机纸带](../Images/33a0ae54331679d55cb44999b9c064a5.png)'
- en: The *tape head* of the Turing machine scans the tape one cell at a time. We
    refer to the cell being scanned as the *active cell* and the symbol it contains
    as the *input symbol*. At each time step, the tape head reads the input symbol,
    and leaves it either unchanged or overwrites it with a new symbol. At the end
    of each time step, the tape head moves one position to the left or right. We highlight
    the active cell in yellow. In the example below, the `A` is replaced with an `X`
    and the tape head moves one cell to the left.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 图灵机的*纸带头*逐个单元格扫描纸带。我们将正在扫描的单元格称为*活动单元格*，其中包含的符号称为*输入符号*。在每个时间步骤中，纸带头读取输入符号，并将其保持不变或用新符号覆盖。在每个时间步骤结束时，纸带头向左或向右移动一个位置。我们用黄色突出显示活动单元格。在下面的示例中，`A`
    被替换为 `X`，纸带头向左移动一个单元格。
- en: '![Turing machine tape head](../Images/9ce486b2c66c2465497d2a6940b0909c.png)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![图灵机纸带头](../Images/9ce486b2c66c2465497d2a6940b0909c.png)'
- en: 'The *control unit* is the analog of the CPU in modern day microprocessors.
    It consists of a *state transition diagram*, which is a finite table of instructions
    that specifies exactly what action the machine takes at each step. Each *state*
    represents one of the possible configurations of the machine. Depending on its
    current state and input symbol, the Turing machine overwrites the input symbol
    with a new symbol and moves to a new state. Each *transition* connects one state,
    say s, to another state, say t, and is labeled with two symbols, say A and X:
    this means that if the Turing machine is in state s and the input symbol is A,
    then it overwrite the A with an X and transitions to state t. Each state is labeled
    with one of five designations: L (left), R (right), Y (yes), N (no), or H (halt).
    Upon entering a state, the Turing machine either moves its tape head or halts
    according to the state''s designation. Below is an illustration of the state transition
    diagram for a machine with four states.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*控制单元* 相当于现代微处理器中的 CPU。它由一个*状态转换图*组成，这是一张有限的指令表，准确指定了机器在每一步中采取的动作。每个*状态*代表机器的可能配置之一。根据当前状态和输入符号，图灵机用新符号覆盖输入符号并移动到新状态。每个*转换*将一个状态，比如
    s，连接到另一个状态，比如 t，并用两个符号，比如 A 和 X 标记：这意味着如果图灵机处于状态 s 并且输入符号是 A，则它将用 X 覆盖 A 并转换到状态
    t。每个状态用五种标记之一标记：L（左）、R（右）、Y（是）、N（否）或 H（停止）。进入状态时，图灵机根据状态的标记移动其纸带头或停止。下面是一个具有四个状态的机器的状态转换图示例。'
- en: '![Turing machine state diagram](../Images/a01a71b97f8af01a878e9f847875f70a.png)'
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![图灵机状态图](../Images/a01a71b97f8af01a878e9f847875f70a.png)'
- en: '**Execution.**  Initially the Turing machine starts in one distinguished state
    called the *start state*, and the tape head points to one distinguished cell called
    the *start cell*. There is at most one possible transition corresponding to each
    combination of state and input symbol; thus, the actions of the machine are completely
    determined in advance. (If there is no possible transition from a state with some
    input symbol, then the Turing machine remains in the same state and does not overwrite
    the input symbol.) Each step in a Turing machine proceeds as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**执行。** 最初，图灵机从称为*起始状态*的一个特殊状态开始，并且磁带头指向称为*起始单元*的一个特殊单元。对于每个状态和输入符号的组合，最多可能有一个对应的转换；因此��机器的操作是事先完全确定的。（如果从某个输入符号的状态没有可能的转换，则图灵机保持在相同状态并且不覆盖输入符号。）图灵机的每一步如下进行：'
- en: Read the input symbol from the active cell.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从活动单元格读取输入符号。
- en: Look up the transition rule associated with the current state and input symbol.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 查找与当前状态和输入符号相关联的转换规则。
- en: Overwrite the input symbol with the new symbol.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用新符号覆盖输入符号。
- en: Change the current state according to the transition rule.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据转换规则改变当前状态。
- en: Shift the tape head one cell to the left or right, according to the new state's
    designation.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据新状态的指定，将磁带头向左或向右移动一个单元。
- en: These steps are repeated until the current state is labeled H for halt, Y (in
    which case the machine answers yes) or N (in which case the machine answers no).
    It is possible that the machine runs forever without ever reaching one of these
    terminating states.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这些步骤重复进行，直到当前状态标记为H以停止，Y（在这种情况下，机器回答是）或N（在这种情况下，机器回答否）。机器可能永远运行而永远不会达到这些终止状态。
- en: Computation must allow repetitive actions - do action A over and over until
    a certain condition is met. This amounts to staying in a state (and moving the
    tape head left or right) until a certain condition is met. Computation must also
    allow adaptive actions - if a certain condition is met, do action A; otherwise
    do action B. This is captured by state transitions according to the contents of
    the tape head at a particular location.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 计算必须允许重复动作 - 重复执行动作A直到满足某个条件。这相当于保持在一个状态中（并将磁带头向左或向右移动），直到满足某个条件。计算还必须允许自适应动作
    - 如果满足某个条件，则执行动作A；否则执行动作B。这由根据特定位置磁带头内容的状态转换捕获。
- en: '**An example: unary to binary conversion.**   We consider the 4 state Turing
    machine illustrated below. The current state and input symbol are highlighted
    in yellow. We trace its execution.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**一个例子：一元转换为二进制。** 我们考虑下面的4状态图灵机。当前状态和输入符号用黄色突出显示。我们跟踪其执行。'
- en: '![Turing machine state diagram](../Images/3ae9ee312a3b73727efec1c80bddb70e.png)'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![图灵机状态图](../Images/3ae9ee312a3b73727efec1c80bddb70e.png)'
- en: 'Since the input symbol is A, the Turing machine follows the appropriate transition
    arrow leaving the current state - the one labeled A : X. The Turing machine overwrites
    the input symbol with an X, changes state to the bottom right state, and moves
    the tape head one position to the left (since the new state is labeled with L).
    The illustration below shows the Turing machine at the end of this first step.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 由于输入符号是A，图灵机遵循离开当前状态的适当转换箭头 - 标记为A：X的箭头。图灵机用X覆盖输入符号，将状态更改为右下角的状态，并将磁带头向左移动一个位置（因为新状态标有L）。下面的插图显示了第一步结束时的图灵机。
- en: '![updated Turing machine state diagram](../Images/e4aff0320bf24bea524e7940f2a5c95d.png)'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![更新后的图灵机状态图](../Images/e4aff0320bf24bea524e7940f2a5c95d.png)'
- en: 'Since the input symbol is now #, the Turing machine follows the appropriate
    transition arrow leaving the current state -- the one labeled # : 1\. This overwrites
    the current cell with a 1, changes the state back to the bottom left state, and
    moves the tape head one position to the right (since the new state is labeled
    with R).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于输入符号现在是#，图灵机遵循离开当前状态的适当转换箭头 - 标记为#：1的箭头。这将用1覆盖当前单元格，将状态更改回左下角的状态，并将磁带头向右移动一个位置（因为新状态标有R）。
- en: '![updated Turing machine state diagram](../Images/c639db0e873f5404dd3fee1928606b0d.png)'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![更新后的图灵机状态图](../Images/c639db0e873f5404dd3fee1928606b0d.png)'
- en: Here are the contents of the tape after the next several steps.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是接下来几步后磁带的内容。
- en: '![updated Turing machine state diagram](../Images/b991696ffe12fd950a75f90286458105.png)'
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![更新后的图灵机状态图](../Images/b991696ffe12fd950a75f90286458105.png)'
- en: '(Errata: in the fourth row, the highlighted cell should contain a # instead
    of a 1.)'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: （勘误：在第四行中，突出显示的单元格应包含#而不是1。）
- en: 'Once all of the As are overwritten with Xs, the Turing machine erases all of
    the Xs (overwriting them with #s).'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦所有的A都被X覆盖，图灵机会抹去所有的X（用#覆盖它们）。
- en: '![updated Turing machine state diagram](../Images/82caa46e8706f263e82cf09efa8cc489.png)'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![更新后的图灵机状态图](../Images/82caa46e8706f263e82cf09efa8cc489.png)'
- en: '**What it does and why it works.**   The Turing machine described above converts
    from unary to binary. That is, if the input consists of n consecutive A''s, then
    the Turing machine prints the number n in binary to the left of sequence of A''s
    (and overwrites the A''s with X''s). In the example above, the input consists
    of 6 A''s and the Turing machine writes the binary number 110 to the tape.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**它是如何工作的以及为什么有效。** 上述描述的图灵机将一元转换为二进制。也就是说，如果输入由n个连续的A组成，那么图灵机会在A序列的左侧打印数字n的二进制表示（并用X覆盖A）。在上面的示例中，输入由6个A组成，图灵机将二进制数110写入磁带。'
- en: 'To describe how this is accomplished, we first review an algorithm for incrementing
    a binary integer by 1: scan the bits from right to left, changing 1''s to 0''s
    until you see a 0\. Then change the 0 to a 1.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 要描述如何实现这一点，我们首先回顾一种将二进制整数加1的算法：从右向左扫描位，将1更改为0，直到看到0。然后将0更改为1。
- en: 'The Turing machine repeatedly knocks off one A at a time and increments the
    binary number. Our Turing machine mimics this strategy. The initial state seeks
    out the next A, overwrites it with an X, and then transitions to the Increment
    state. The Increment state increments the binary integer by one (leaving the X''s
    alone, changing 1''s to 0''s, until seeing a 0 or #, which it changes to a 1),
    and then transitions back to the Initial state. When all of the A''s are overwritten
    with X''s, the Cleanup state replaces all of the X''s with #''s, and the transitions
    to the Halt state.'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图灵机反复地每次敲掉一个A并增加二进制数。我们的图灵机模仿这种策略。初始状态寻找下一个A，用X覆盖它，然后转移到增量状态。增量状态将二进制整数增加一（保持X不变，将1更改为0，直到看到0或#，将其更改为1），然后转移到初始状态。当所有的A都被X覆盖时，清理状态用#替换所有的X，然后转移到停止状态。
- en: '![Turing machine state diagram](../Images/a01a71b97f8af01a878e9f847875f70a.png)'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![图灵机状态图](../Images/a01a71b97f8af01a878e9f847875f70a.png)'
- en: Turing machine implementation in Java.
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java中的图灵机实现。
- en: We encapsulate each of the main Turing machine components (tape, transition,
    control) using good OOP principles.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用良好的面向对象编程原则封装了主要的图灵机组件（磁带、转换、控制）。
- en: '*The tape.* Program `Tape.java` is an ADT that represents an unbounded Turing
    machine tape. It supports the following operations: move tape head left, move
    tape head right, read the symbol in the current cell, and write a symbol to the
    current cell. To implement it, we use two stacks (one to store all of the symbols
    to the left of the tape head, and one to the right). To print out the contents
    of the tape, we print out the reverse of the first stack, the current element,
    then the second stack.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*磁带。* 程序`Tape.java`是表示无界图灵机磁带的ADT。它支持以下操作：将磁带头向左移动，将磁带头向右移动，读取当前单元格中的符号，向当前单元格写入符号。为了实现它，我们使用两个栈（一个用于存储磁带头左侧的所有符号，一个用于右侧）。为了打印出磁带的内容，我们打印出第一个栈的反向，当前元素，然后第二个栈。'
- en: '*The states.* Each state has a name and a type (halt, left, right, accept,
    or reject).'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*状态。* 每个状态都有一个名称和类型（停止、左、右、接受或拒绝）。'
- en: '*The transitions.* Each transition has the name of the initial state, the name
    of the final state, and the symbol to be written to the tape.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*转换。* 每个转换都有初始状态的名称、最终状态的名称和要写入磁带的符号。'
- en: '*The Turing machine.* We implement a Turing machine as a tape, a symbol table
    of states, and a symbol table of transitions.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*图灵机。* 我们将图灵机实现为一条磁带，一个状态符号表和一个转换符号表。'
- en: '**Non-terminating Turing machines.** From a theoretical standpoint, we are
    primarily concerned with machines that perform finite computations and then halt.
    However, many practical applications involve programs that are designed never
    to terminate (operating system, air traffic control system, nuclear reactor control
    system) or produce an infinite amount of output (web browser, program that computes
    the digits of π = 3.1415...). The Turing machine model of computation extends
    to handle such non-terminating situations as well.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**非终止图灵机。** 从理论上讲，我们主要关注执行有限计算然后停止的机器。然而，许多实际应用涉及设计永不终止的程序（操作系统、空中交通管制系统、核反应堆控制系统）或产生无限量输出的程序（网络浏览器、计算π
    = 3.1415...的程序）。图灵机计算模型扩展到处理这种非终止情况。'
- en: Turing machines connect physics and mathematics (Turing's original motivation,
    thermodynamics of computation).
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图灵机连接物理和数学（图灵最初的动机，计算的热力学）。
- en: Exercises
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: What does the following Turing machine do when started with the given tape ...
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当给定磁带启动以下图灵机时，它会做什么...
- en: Binary adder.
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 二进制加法器。
- en: Binary counter.
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 二进制计数器。
- en: Binary palindrome.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 二进制回文。
- en: Unary multiplication.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一元乘法。
- en: Equal number of a's and b's.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 相同数量的a和b。
- en: Multiple of 3 or 7.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3的倍数或7的倍数。
- en: Balanced parentheses.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 平衡的括号。
- en: Power-of-2.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2的幂。
- en: String compare.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 字符串比较。
- en: 'Unary-to-binary. How many steps does the 3-state unary-to-binary Turing machine
    make to convert N to binary? *Answer*: proportional to N^2.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一元转二进制。将N转换为二进制的3状态一元转二进制图灵机需要多少步？*答案*：与N^2成正比。
- en: 'Unary-to-binary. Design a 6-state unary-to-binary Turing machine that converts
    the unary number N to binary in time proportional to N log N. *Hint*: cross out
    every other A. If the number of A''s is odd, write a 1; otherwise write a 0\.
    Repeat with the uncrossed out A''s remaining.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一元转二进制。设计一个6状态的一元转二进制图灵机，将一元数N转换为二进制数，时间与N log N成正比。*提示*：划掉每隔一个A。如果A的数��是奇数，写入1；否则写入0。重复剩下的未划掉的A。
- en: '![Turing machine state diagram](../Images/fef8ceda99893bfe83c15c7e1d92a693.png)'
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![图灵机状态图](../Images/fef8ceda99893bfe83c15c7e1d92a693.png)'
- en: Swap two cells on a Turing machine. Use the state to encode the temporary symbol.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 交换图灵机上的两个单元。使用状态来编码临时符号。
- en: Hex-to-binary. Design a Turing machine that converts from hexadecimal to binary.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 十六进制转二进制。设计一个将十六进制转换为二进制的图灵机。
- en: '**Comparator.** Create a Turing machine that takes as input two binary integers,
    separate by a # character, and accepts the input if the first string is strictly
    less than the second. How many steps does the Turing machine in the previous question
    take to compare two N-bit integers? (Each step is one move of the tape head.)'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**比较器。** 创建一个接受两个由#字符分隔的二进制整数作为输入的图灵机，并在第一个字符串严格小于第二个字符串时接受输入。前一个问题中的图灵机比较两个N位整数需要多少步？（每步是一次磁带头的移动。）'
- en: '**Efficient comparator.** Create a comparator that runs in time polynomial
    in N.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**高效比较器。** 创建一个在N的多项式时间内运行的比较器。'
- en: '**Bitwise OR.** Create a Turing machine that computes the bitwise OR of its
    two binary inputs of length N.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**按位或。** 创建一个计算其两个长度为N的二进制输入的按位或的图灵机。'
- en: Creative Exercises
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
- en: '**Doubling.** Write a Turing machine that transform an input consisting of
    k consecutive 1''s to an input that consists of 2k consecutive 1''s. (unary multiplication
    by 2) Hint: write two 1''s on the left, and delete one 1 on the right.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**加倍。** 编写一个将由k个连续1组成的输入转换为由2k个连续1组成的输入的图灵机（乘以2的一元运算）。提示：在左侧写两个1，并在右侧删除一个1。'
- en: '**Copying.** Write a Turing machine that transform an input consisting of 0''s
    and 1''s instead two copies of the original input, separated by the symbol #.'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**复制。** 编写一个图灵机，将由0和1组成的输入转换为原始输入的两个副本，用符号#分隔。'
- en: '**Langtons Ant.** Write a program `LangtonsAnt.java` that simulates a two dimensional
    Turing machine known as [Langton''s Ant](http://mathworld.wolfram.com/LangtonsAnt.html),
    and animate the results using Turtle graphics.'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**朗顿蚂蚁。** 编写一个程序`LangtonsAnt.java`，模拟一个被称为[朗顿蚂蚁](http://mathworld.wolfram.com/LangtonsAnt.html)的二维图灵机，并使用Turtle图形来展示结果。'
- en: '**Turmites.** Create some other two dimensional Turing machines or [Turmites](http://mathworld.wolfram.com/Turmite.html)
    that produce interesting patterns.'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Turmites。** 创建一些其他二维图灵机或[Turmites](http://mathworld.wolfram.com/Turmite.html)，产生有趣的图案。'
- en: '**Turing tape.** Write a program [Tape.java](Tape.java.html) that implement
    a *one-dimensional Turing tape*. The tape consists of a sequence of cells, each
    of which stores an integer (that is initialized to 0). At any instant, there is
    a *tape head* which points to one of the cells. Support the following interface
    methods: `moveLeft()` to move the tape head one cell to the left, `moveRight()`
    to move the tape head one cell to the right, `look()` to return the contents of
    the active cell, and `write(int a)` to change the contents of the active cell
    to `a`. *Hint*: use an `int` for the active cell, and two stacks for the left
    and right parts of the tape.'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**图灵带。** 编写一个程序[Tape.java](Tape.java.html)，实现*一维图灵带*。该带由一系列单元格组成，每个单元格存储一个整数（初始化为0）。在任何时刻，都有一个*带头*指向其中一个单元格。支持以下接口方法：`moveLeft()`将带头向左移动一个单元格，`moveRight()`将带头向右移动一个单元格，`look()`返回活动单元格的内容，`write(int
    a)`将活动单元格的内容更改为`a`。*提示*：使用一个`int`表示活动单元格，使用两个栈表示带的左侧和右侧部分。'
- en: '**Turing machine simulator.** Write a program [TuringMachine.java](TuringMachine.java.html)
    that simulates a Turing machine. Design your program as follows: [Tape.java](Tape.java.html),
    [State.java](State.java.html), [Transition.java](Transition.java.html).'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**图灵机模拟器。** 编写一个程序[TuringMachine.java](TuringMachine.java.html)，模拟一个图灵机。设计程序如下：[Tape.java](Tape.java.html)，[State.java](State.java.html)，[Transition.java](Transition.java.html)。'
- en: '**Collatz Turing machine.** Design a Turing machine that takes as input the
    binary representation of a binary integer and repeatedly divides it by 2 (if even)
    or multiplies by 3 and adds 1 (if odd) until it equals 1. Famous open conjecture
    that this machine will terminates for inputs.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Collatz 图灵机。** 设计一个图灵机，其输入为二进制整数的二进制表示形式，并重复地将其除以2（如果是偶数）或乘以3并加1（如果是奇数），直到等于1。著名的开放猜想是，这台机器对于任何输入都会终止。'
