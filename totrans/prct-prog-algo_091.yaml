- en: 2.2   Mergesort
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.2   归并排序
- en: 原文：[https://algs4.cs.princeton.edu/22mergesort](https://algs4.cs.princeton.edu/22mergesort)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://algs4.cs.princeton.edu/22mergesort](https://algs4.cs.princeton.edu/22mergesort)
- en: 'The algorithms that we consider in this section is based on a simple operation
    known as *merging*: combining two ordered arrays to make one larger ordered array.
    This operation immediately lends itself to a simple recursive sort method known
    as *mergesort*: to sort an array, divide it into two halves, sort the two halves
    (recursively), and then merge the results.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本节中考虑的算法基于一种简单的操作，称为*合并*：将两个有序数组组合成一个更大的有序数组。这个操作立即适用于一种简单的递归排序方法，称为*归并排序*：将数组分成两半，对这两半进行排序（递归），然后合并结果。
- en: '![Mergesort](../Images/c0b4ef017f5f9b88384759a5bdc48df8.png)Mergesort guarantees
    to sort an array of N items in time proportional to N log N, no matter what the
    input. Its prime disadvantage is that it uses extra space proportional to N.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '![归并排序](../Images/c0b4ef017f5f9b88384759a5bdc48df8.png)归并排序保证以与N log N成正比的时间对N个项目的数组进行排序���无论输入是什么。它的主要缺点是它使用与N成正比的额外空间。'
- en: Abstract in-place merge.
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 抽象原地归并。
- en: The method `merge(a, lo, mid, hi)` in [Merge.java](Merge.java.html) puts the
    results of merging the subarrays `a[lo..mid]` with `a[mid+1..hi]` into a single
    ordered array, leaving the result in `a[lo..hi]`. While it would be desirable
    to implement this method without using a significant amount of extra space, such
    solutions are remarkably complicated. Instead, `merge()` copies everything to
    an auxiliary array and then merges back to the original.![Mergesort](../Images/9bdb45d8bf3aa3612a8cc8e66b82f9d0.png)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '[Merge.java](Merge.java.html) 中的方法`merge(a, lo, mid, hi)`将子数组`a[lo..mid]`与`a[mid+1..hi]`的归并结果放入一个有序数组中，将结果留在`a[lo..hi]`中。虽然希望实现这种方法而不使用大量额外空间，但这样的解决方案非常复杂。相反，`merge()`将所有内容复制到辅助数组，然后再次归并到原始数组。![归并排序](../Images/9bdb45d8bf3aa3612a8cc8e66b82f9d0.png)'
- en: Top-down mergesort.
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自顶向下的归并排序。
- en: '[Merge.java](Merge.java.html) is a recursive mergesort implementation based
    on this abstract in-place merge. It is one of the best-known examples of the utility
    of the *divide-and-conquer* paradigm for efficient algorithm design.![Mergesort](../Images/f781b3934b39bc4e24391d2ab9ec5d23.png)'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '[Merge.java](Merge.java.html) 是基于这种抽象原地归并的递归归并排序实现。这是利用*分治*范式进行高效算法设计的最著名的例子之一。![归并排序](../Images/f781b3934b39bc4e24391d2ab9ec5d23.png)'
- en: Proposition.
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。
- en: Top-down mergesort uses between 1/2 N lg N and N lg N compares and at most 6
    N lg N array accesses to sort any array of length N.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 自顶向下的归并排序使用1/2 N lg N和N lg N比较，并且最多需要6 N lg N次数组访问来对长度为N的任何数组进行排序。
- en: Improvements.
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进。
- en: We can cut the running time of mergesort substantially with some carefully considered
    modifications to the implementation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通过对实现进行一些经过深思熟虑的修改，我们可以大大减少归并排序的运行时间。
- en: '*Use insertion sort for small subarrays.* We can improve most recursive algorithms
    by handling small cases differently. Switching to insertion sort for small subarrays
    will improve the running time of a typical mergesort implementation by 10 to 15
    percent.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*对小子数组使用插入排序。* 通过对待处理的小情况进行不同处理，我们可以改进大多数递归算法。对小子数组使用插入排序将使典型归并排序实现的运行时间提高10到15％。'
- en: '*Test whether array is already in order.* We can reduce the running time to
    be linear for arrays that are already in order by adding a test to skip call to
    `merge()` if `a[mid]` is less than or equal to `a[mid+1]`. With this change, we
    still do all the recursive calls, but the running time for any sorted subarray
    is linear.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试数组是否已经有序。* 通过添加一个测试来跳过对`merge()`的调用，如果`a[mid]`小于或等于`a[mid+1]`，我们可以将已经有序的数组的运行时间减少为线性。通过这种改变，我们仍然执行所有递归调用，但对于任何已排序的子数组，运行时间是线性的。'
- en: '*Eliminate the copy to the auxiliary array.* It is possible to eliminate the
    time (but not the space) taken to copy to the auxiliary array used for merging.
    To do so, we use two invocations of the sort method, one that takes its input
    from the given array and puts the sorted output in the auxiliary array; the other
    takes its input from the auxiliary array and puts the sorted output in the given
    array. With this approach, in a bit of mindbending recursive trickery, we can
    arrange the recursive calls such that the computation switches the roles of the
    input array and the auxiliary array at each level.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*消除对辅助数组的复制。* 可以消除用于归并的辅助数组的复制时间（但不是空间）。为此，我们使用两次调用排序方法，一次从给定数组中获取输入并将排序后的输出放入辅助数组；另一次从辅助数组中获取输入并将排序后的输出放入给定数组。通过这种方法，在一些令人费解的递归技巧中，我们可以安排递归调用，使计算在每个级别切换输入数组和辅助数组的角色。'
- en: '[MergeX.java](MergeX.java.html) implements these improvements.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[MergeX.java](MergeX.java.html) 实现了这些改进。'
- en: Visualization.
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 可视化。
- en: '[MergeBars.java](MergeBars.java.html) provides a visualization of mergesort
    with cutoff for small subarrays.![Mergesort visualization](../Images/15858e5a89dce37051b2cd93e1103287.png)'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '[MergeBars.java](MergeBars.java.html) 提供了带有小子数组截止的归并排序可视化。![归并排序可视化](../Images/15858e5a89dce37051b2cd93e1103287.png)'
- en: Bottom-up mergesort.
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 自底向上的归并排序。
- en: Even though we are thinking in terms of merging together two large subarrays,
    the fact is that most merges are merging together tiny subarrays. Another way
    to implement mergesort is to organize the merges so that we do all the merges
    of tiny arrays on one pass, then do a second pass to merge those arrays in pairs,
    and so forth, continuing until we do a merge that encompasses the whole array.
    This method requires even less code than the standard recursive implementation.
    We start by doing a pass of 1-by-1 merges (considering individual items as subarrays
    of size 1), then a pass of 2-by-2 merges (merge subarrays of size 2 to make subarrays
    of size 4), then 4-by-4 merges, and so forth. [MergeBU.java](MergeBU.java.html)
    is an implementation of bottom-up mergesort.![Bottom-up mergesort](../Images/376ddf6b3cbbadc8f4e2e30bfabd7670.png)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 即使我们考虑将两个大子数组合并在一起，事实上大多数合并都是将微小的子数组合并在一起。 另一种实现归并排序的方法是组织合并，使我们在一次遍历中执行所有微小数组的合并，然后进行第二次遍历以成对合并这些数组，依此类推，直到进行涵盖整个数组的合并。
    这种方法比标准递归实现需要更少的代码。 我们首先进行1对1的合并（将单个项目视为大小为1的子数组），然后进行2对2的合并（合并大小为2的子数组以生成大小为4的子数组），然后进行4对4的合并，依此类推。
    [MergeBU.java](MergeBU.java.html)是底部向上归并排序的实现。![底部向上的归并排序](../Images/376ddf6b3cbbadc8f4e2e30bfabd7670.png)
- en: Proposition.
  id: totrans-20
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。
- en: Bottom-up mergesort uses between 1/2 N lg N and N lg N compares and at most
    6 N lg N array accesses to sort any array of length N.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 底部向上的归并排序使用了介于1/2 N lg N和N lg N次比较，以及最多6 N lg N次数组访问来对长度为N的任意数组进行排序。
- en: Proposition.
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。
- en: No compare-based sorting algorithm can guarantee to sort N items with fewer
    than lg(N!) ~ N lg N compares.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 没有基于比较的排序算法可以保证使用少于lg(N!) ~ N lg N次比较对N个项目进行排序。
- en: Proposition.
  id: totrans-24
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。
- en: Mergesort is an asymptotically optimal compare-based sorting algorithm. That
    is, both the number of compares used by mergesort in the worst case and the minimum
    number of compares that any compare-based sorting algorithm can guarantee are
    ~N lg N.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 归并排序是一种渐进最优的基于比较的排序算法。 也就是说，归并排序在最坏情况下使用的比较次数以及任何基于比较的排序算法可以保证的最小比较次数都是~N lg
    N。
- en: Exercises
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Give traces, in the style of the trace given in this section, showing how the
    keys `E A S Y Q U E S T I O N` are sorted with top-down mergesort and with bottom-up
    mergesort.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出追踪，展示如何使用自顶向下的归并排序和自底向上的归并排序对键`E A S Y Q U E S T I O N`进行排序的方式。
- en: '*Solution.*'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。*'
- en: '![Mergesort](../Images/371a6da248de01598053a1144bd08299.png)'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![归并排序](../Images/371a6da248de01598053a1144bd08299.png)'
- en: Answer Exercise 2.2.2 for bottom-up mergesort.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回答底部向上归并排序的练习2.2.2。
- en: '*Solution.*'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。*'
- en: '![Mergesort](../Images/121f0745c584416b0fc83890d211b3f8.png)'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![归并排序](../Images/121f0745c584416b0fc83890d211b3f8.png)'
- en: Does the abstract inplace merge produce proper output if and only if the two
    input subarrays are in sorted order? Prove your answer, or provide a counterexample.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果抽象的原地合并仅在两个输入子数组按排序顺序排列时才产生正确的输出，那么是否正确？ 证明你的答案，或提供一个反例。
- en: '*Solution.* Yes. If the subarrays are in sorted order, then the inplace merge
    produces proper output. If one subarray is not in sorted order, then its entries
    will appear in the output in the same order that they appear in the input (with
    entries from the other subarray intermixed).'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 是的。如果子数组按排序顺序排列，那么原地合并会产生正确的输出。 如果一个子数组未按排序顺序排列，则其条目将按照它们在输入中出现的顺序出现在输出中（与另一个子数组的条目交错）。'
- en: Give the sequence of subarray sizes after each merge performed by both the top-down
    and the bottom-up mergesort algorithms, for n = 39\.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出自顶向下和自底向上归并排序算法在n = 39时每次合并后的子数组大小序列。
- en: '*Solution.*'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。*'
- en: 'Top-down mergesort: 2, 3, 2, 5, 2, 3, 2, 5, 10, 2, 3, 2, 5, 2, 3, 2, 5, 10,
    20, 2, 3, 2, 5, 2, 3, 2, 5, 10, 2, 3, 2, 5, 2, 2, 4, 9, 19, 39.'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自顶向下的归并排序：2, 3, 2, 5, 2, 3, 2, 5, 10, 2, 3, 2, 5, 2, 3, 2, 5, 10, 20, 2, 3,
    2, 5, 2, 3, 2, 5, 10, 2, 3, 2, 5, 2, 2, 4, 9, 19, 39。
- en: 'Bottom-up mergesort: 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 8, 8, 8, 8, 7, 16, 16, 32, 39.See the code [MergeSizes.java](MergeSizes.java.html).'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 底部向上的归并排序：2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 4, 4, 4,
    4, 4, 4, 4, 4, 4, 3, 8, 8, 8, 8, 7, 16, 16, 32, 39。查看代码[MergeSizes.java](MergeSizes.java.html)。
- en: Suppose that top-down mergesort is modified to skip the call on `merge()` whenever
    `a[mid] <= a[mid+1]`. Prove that the number of compares used for an array in sorted
    order is linear.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设自顶向下的归并排序修改为在`a[mid] <= a[mid+1]`时跳过对`merge()`的调用。 证明对于已排序顺序的数组，使用的比较次数是线性的。
- en: '*Solution.* Since the array is already sorted, there will be no calls to `merge()`.
    When N is a power of 2, the number of compares will satisfy the recurrence T(N)
    = 2 T(N/2) + 1, with T(1) = 0.'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 由于数组已经排序，不会调用`merge()`。 当N是2的幂时，比较次数将满足递归T(N) = 2 T(N/2) + 1，其中T(1)
    = 0。'
- en: Use of a static array like aux[] is inadvisable in library software because
    multiple clients might use the class concurrently. Give an implementation of [Merge.java](Merge.java.html)
    that does not use a static array.
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在库软件中使用类似aux[]的静态数组是不明智的，因为多个客户端可能同时使用该类。给出一个不使用静态数组的[Merge.java](Merge.java.html)实现。
- en: Creative Problems
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创造性问题
- en: '**Faster merge.** Implement a version of `merge()` that copies the second half
    of `a[]` to `aux[]` in *decreasing order* and then does the merge back to `a[]`.
    This change allows you to remove the code to test that each of the halves has
    been exhausted from the inner loop. *Note*: the resulting sort is not stable.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**更快的合并。** 实现一个`merge()`的版本，将`a[]`的后半部分以*递减顺序*复制到`aux[]`，然后将其合并回`a[]`。 这个改变允许你从内部循环中删除测试每个半部分是否已耗尽的代码。
    *注意*：结果排序不是稳定的。'
- en: '[PRE0]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Improvements.** Write a program [MergeX.java](MergeX.java.html) that implements
    the three improvements to mergesort that are described in the text: add a cutoff
    from small subarrays, test whether the array is already in order, and avoid the
    copy by switching arguments in the recursive code.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**改进。** 编写一个程序[MergeX.java](MergeX.java.html)，实现文本中描述的三个归并排序改进：添加对小子数组的截止，测试数组是否已经有序，通过在递归代码中切换参数来避免复制。'
- en: '**Inversions.** Develop and implement a linearithmic algorithm [Inversions.java](Inversions.java.html)
    for computing the number of inversions in a given array (the number of exchanges
    that would be performed by insertion sort for that array—see Section 2.1). This
    quantity is related to the *Kendall tau distance*; see Section 2.5.'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**逆序数。** 开发并实现一个线性对数算法 [Inversions.java](Inversions.java.html)，用于计算给定数组中的逆序数（插入排序为该数组执行的交换次数—参见第
    2.1 节）。这个数量与 *Kendall tau 距离* 有关；参见第 2.5 节。'
- en: '**Index sort.** Develop a version of [Merge.java](Merge.java.html) that does
    not rearrange the array, but returns an `int[] perm` such that `perm[i]` is the
    index of the ith smallest entry in the array.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**索引排序。** 开发一个版本的 [Merge.java](Merge.java.html)，该版本不重新排列数组，而是返回一个 `int[] perm`，使得
    `perm[i]` 是数组中第 i 小的条目的索引。'
- en: Experiments
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实验
- en: Web Exercises
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络练习
- en: '**Merge with at most log N compares per item.** Design a merging algorithm
    such that each item is compared at most a logarithmic number of times. (In the
    standard merging algorithm, an item can be compared N/2 times when merging two
    subarrays of size N/2.)'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**每个项最多进行 log N 次比较的归并。** 设计一个合并算法，使得每个项最多比较对数次数。 （在标准合并算法中，当合并大小为 N/2 的两个子数组时，一个项可以比较
    N/2 次。）'
- en: '[reference](http://www.reddit.com/comments/9jqsi/how_to_merge_sorted_lists_with_olog_n_comparisons/)'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[参考链接](http://www.reddit.com/comments/9jqsi/how_to_merge_sorted_lists_with_olog_n_comparisons/)'
- en: '**Lower bound for sorting a Young tableaux.** A *Young tableaux* is an N-by-N
    matrix such that the entries are sorted both column wise and row wise. Prove that
    Theta(N^2 log N) compares are necessary to sort the N^2 entries (where you can
    access the data only through the pairwise comparisons).'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**对于排序 Young 表格的下界。** 一个 *Young 表格* 是一个 N×N 矩阵，使得条目在列和行上都是有序的。证明对于排序 N^2 个条目（只能通过成对比较访问数据）需要
    Theta(N^2 log N) 次比较。'
- en: '*Solution sketch.* If entry (i, j) is within 1/2 of i + j, then all of the
    2N-1 grid diagonals are independent of one another. Sorting the diagonals takes
    N^2 log N compares.'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案概述*。如果条目 (i, j) 在 i + j 的 1/2 范围内，则所有 2N-1 个网格对角线彼此独立。对对角线进行排序需要 N^2 log
    N 次比较。'
- en: Given an array `a` of size 2N with N items in sorted order in positions 0 through
    N-1, and an array `b` of size N with N items in ascending order, merge the array
    `b` into `a` so that `a` contains all of the items in ascending order. Use O(1)
    extra memory.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定一个大小为 2N 的数组 `a`，其中前 N 个项按升序排列在位置 0 到 N-1，以及一个大小为 N 的数组 `b`，其中 N 个项按升序排列，将数组
    `b` 合并到数组 `a` 中，使得 `a` 包含所有项按升序排列。使用 O(1) 额外内存。
- en: '*Hint:* merge from right to left.'
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：从右向左合并。'
- en: '**k-near-sorting.** Suppose you have an array `a[]` of N distinct items which
    is nearly sorted: each item at most k positions away from its position in the
    sorted order. Design an algorithm to sort the array in time proportional to N
    log k.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**k-近排序。** 假设你有一个包含 N 个不同项的数组 `a[]`，几乎是有序的：每个项最多离其在排序顺序中的位置不超过 k 个位置。设计一个算法，在时间复杂度为
    N log k 的情况下对数组进行排序。'
- en: '*Hint*: First, sort the subarray from 0 to 2k; the smallest k items will be
    in their correct position. Next, sort the subarray from k to 3k; the smallest
    2k items will now be in their correct position.'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：首先，对从 0 到 2k 的子数组进行排序；最小的 k 个项将处于正确的位置。接下来，对从 k 到 3k 的子数组进行排序；最小的 2k 个项现在将处于正确的位置。'
- en: Find a family of inputs for which mergesort makes strictly fewer than 1/2 N
    lg N compares to sort an array of N distinct keys.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到一组输入，对于这组输入，归并排序比对包含 N 个不同键的数组进行排序时的比较次数严格少于 1/2 N lg N。
- en: '*Solution:* a reverse-sorted array of N = 2^k + 1 keys uses approximately 1/2
    N lg N - (k/2 - 1) compares.'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：一个 N = 2^k + 1 个键的逆序排序数组使用大约 1/2 N lg N - (k/2 - 1) 次比较。'
- en: '**Worst-case input array.** Write a program [MergeWorstCase.java](MergeWorstCase.java.html)
    that takes a command-line argument *n* and creates an input array of length *n*
    for which mergesort makes the maximum number of compares.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最坏情况的输入数组。** 编写一个程序 [MergeWorstCase.java](MergeWorstCase.java.html)，该程序接受一个命令行参数
    *n*，并创建一个长度为 *n* 的输入数组，使得归并排序进行最大数量的比较。'
- en: 'Write a program [SecureShuffle.java](SecureShuffle.java.html) to read in a
    sequence of string from standard input and securely shuffle them. Use the following
    algorithm: associate each card with a random real number between 0 and 1\. Sort
    the values based on their associated real numbers. Use `java.security.SecureRandom`
    to generate the random real numbers. Use `Merge.indexSort()` to get the random
    permutation.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序 [SecureShuffle.java](SecureShuffle.java.html)，从标准输入中读取一系列字符串并进行安全洗牌。使用以下算法：将每张卡片与一个介于
    0 和 1 之间的随机实数关联起来。根据其关联的实数对值进行排序。使用 `java.security.SecureRandom` 生成随机实数。使用 `Merge.indexSort()`
    获取随机排列。
- en: '**Merging two arrays of different lengths.** Given two sorted arrays `a[]`
    and `b[]` of sizes M and N where M ≥ N, devise an algorithm to merge them into
    a new sorted array `c[]` using ~ N lg M compares.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**合并两个不同���度的数组。** 给定大小为 M 和 N 的两个有序数组 `a[]` 和 `b[]`，其中 M ≥ N，设计一个算法将它们合并成一个新的有序数组
    `c[]`，使用 ~ N lg M 次比较。'
- en: '*Hint*: use binary search.'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：使用二分查找。'
- en: '*Note*: there is a [lower bound](http://www.cs.cmu.edu/afs/cs/academic/class/15210-f12/www/recis/rec10.pdf)
    of Omega(N log (1 + M/N)) compares. This follows because there are M+N choose
    N possible merged outcomes. A decision tree argument shows that this requires
    at least lg (M+N choose N) compares. We note that n choose r >= (n/r)^r.'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*注意*：存在一个 [下界](http://www.cs.cmu.edu/afs/cs/academic/class/15210-f12/www/recis/rec10.pdf)
    为 Omega(N log (1 + M/N)) 次比较。这是因为有 M+N 个 N 个可能的合并结果。决策树论证表明，这至少需要 lg (M+N 个 N)
    次比较。我们注意到 n 个 r 个选择 >= (n/r)^r。'
- en: '**Merging three arrays.** Given three sorted arrays `a[]`, `b[]`, and `c[]`,
    each of size N, design an algorithm to merge them into a new sorted array `d[]`
    using at most ~ 6 N compares in the worst case (or, even better, ~ 5 N compares).'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**合并三个数组。** 给定大小为 N 的三个有序数组 `a[]`、`b[]` 和 `c[]`，设计一个算法将它们合并成一个新的有序数组 `d[]`，在最坏情况下最多使用
    ~ 6 N 次比较（或者，更好地说，~ 5 N 次比较）。'
- en: '**Merging three arrays.** Given three sorted arrays `a[]`, `b[]`, and `c[]`,
    each of size N, prove that no compare-based algorithm can merge them into a new
    sorted array `d[]` using fewer than ~ 4.754887503 N compares in the worst case.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**合并三个数组。** 给定三个大小为 N 的排序数组 `a[]`、`b[]` 和 `c[]`，证明没有基于比较的算法可以在最坏情况下使用少于 ~ 4.754887503
    N 次比较将它们合并成一个新的排序数组 `d[]`。'
- en: '**Arrays with N^(3/2) inversions.** Prove that any compare-based algorithms
    that can sort arrays with N^(3/2) or fewer inversions must make ~ 1/2 N lg N compares
    in the worst case.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**具有N^(3/2)逆序对的数组。** 证明任何基于比较的算法，可以对具有N^(3/2)或更少逆序对的数组进行排序，在最坏情况下必须进行 ~ 1/2
    N lg N 次比较。'
- en: '*Proof sketch*: divide up the array into sqrt(N) consecutive subarrays of sqrt(N)
    items each, such that the there are no inversion between items in different subarrays
    but the order of items within each subarray is arbitrary. Such an array has at
    most N^(3/2) inversions—at most ~N/2 inversions in each of the sqrt(N) subarrays.
    By the sorting lower bound, it takes ~ sqrt(N) lg sqrt(N) compares to sort each
    subarray, for a total of ~ 1/2 N lg N.'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*证明概要*：将数组分成 sqrt(N) 个连续的子数组，每个子数组有 sqrt(N) 个项目，使得不同子数组之间没有逆序对，但每个子数组内的项目顺序是任意的。这样的数组最多有
    N^(3/2) 个逆序对——每个 sqrt(N) 子数组中最多有 ~N/2 个逆序对。根据排序的下界，对每个子数组进行排序需要 ~ sqrt(N) lg sqrt(N)
    次比较，总共需要 ~ 1/2 N lg N 次比较。'
- en: '**Optimal nonoblivious sorting.** Design algorithms that uses the fewest number
    of compares (in the worst case) to sort arrays of length 3, 4, 5, 6, 7, and 8.'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最优非遗忘排序。** 设计算法，使用最少的比较次数（在最坏情况下）对长度为 3、4、5、6、7 和 8 的数组进行排序。'
- en: '*Solution.* It is known that the optimal solution uses 3, 5, 7, 10, 13, and
    16 compares, respectively. The [Ford-Johnson](http://www.mat.unb.br/~ayala/4FordJohnson.ps)
    merge insertion algorithm is known to be optimal for n <= 13. It makes sum(ceil(log[2](3*k/4)),
    k=1..n) compares in the worst case.'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 已知最优解使用 3、5、7、10、13 和 16 次比较，分别。已知 [Ford-Johnson](http://www.mat.unb.br/~ayala/4FordJohnson.ps)
    合并插入算法对于 n <= 13 是最优的。在最坏情况下，它需要进行 sum(ceil(log[2](3*k/4)), k=1..n) 次比较。'
