- en: 8.2 Compilers, Interpreters, and Emulators
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.2 编译器、解释器和仿真器
- en: 原文：[https://introcs.cs.princeton.edu/java/82compiler](https://introcs.cs.princeton.edu/java/82compiler)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/java/82compiler](https://introcs.cs.princeton.edu/java/82compiler)
- en: This section under major construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节正在大规模施工中。
- en: Compilers and interpreters.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编译器和解释器。
- en: A *compiler* is a program that reads in as input a program (in some high-level
    programming language) and outputs machine language code (for some machine architecture).
    The machine language code can subsequently be executed any number of times using
    different input data each time. As an example, the Unix program `g++` transforms
    a C++ source file into a machine executable file `a.out` which can be run natively
    on Sparc microprocessors. As a second example, the Java compiler `javac` transforms
    a `.java` source file into a `.class` file that is written in *Java bytecode*,
    which is the machine language for an imaginary machine known as the *Java Virtual
    Machine*.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '*编译器*是一个程序，它以某种高级编程语言的程序作为输入，并输出某种机器架构的机器语言代码。机器语言代码随后可以使用不同的输入数据多次执行。例如，Unix程序`g++`将一个C++源文件转换为一个可以在Sparc微处理器上本地运行的机器可执行文件`a.out`。第二个例子，Java编译器`javac`将一个`.java`源文件转换为一个用*Java字节码*编写的`.class`文件，这是一个名为*Java虚拟机*的虚拟机器的机器语言。'
- en: An *interpreter* is a program that reads in as input a source program, along
    with data for the program, and translates the source program instruction by instruction.
    For example, the Java interpreter `java` translate a `.class` file into code that
    can be executed natively on the underlying machine. As a second example, the program
    VirtualPC interprets programs written for the Intel Pentium architecture (IBM-PC
    clone) for the PowerPC architecture (Macintosh). This enable Macintosh users to
    run Windows programs on their computer.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '*解释器*是一个程序，它以源程序和程序数据作为输入，并逐条翻译源程序。例如，Java解释器`java`将一个`.class`文件翻译为可以在底层机器上本地执行的代码。第二个例子，程序VirtualPC将为Intel
    Pentium架构（IBM-PC克隆）编写的程序解释为PowerPC架构（Macintosh）的程序。这使得Macintosh用户可以在他们的计算机上运行Windows程序。'
- en: 'Why does Java typically interpret instead of compile? The main advantage of
    compilation is that you end up with raw machine language code that can be efficiently
    executed on your machine. However, it can only be executed on one type of machine
    architecture (Intel Pentium, PowerPC). A primary advantage of a compiling to an
    intermediate language like Java bytecode and then interpreting is that you can
    achieve *platform independence*: you can interpret the same `.class` file on differently
    types of machine architectures. However, interpreting the bytecode is typically
    slower than executing pre-compiled machine language code. A second advantage of
    using the Java bytecode is that it acts as a buffer between your computer and
    the program. This enables you to download an untrusted program from the Internet
    and execute it on your machine with some assurances. Since you are running the
    Java interpreter (and not raw machine language code), you are protected by a layer
    of security which guards against malicious programs. It is the combination of
    Java and the Java bytecode that yield a platform-independent and secure environment,
    while still embracing a full set of modern programming abstractions.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么Java通常解释而不是编译？编译的主要优势是最终得到了可以在您的计算机上高效执行的原始机器语言代码。然而，它只能在一种类型的机器架构上执行（Intel
    Pentium，PowerPC）。将编译为像Java字节码这样的中间语言然后解释的主要优势是可以实现*平台独立性*：您可以在不同类型的机器架构上解释相同的`.class`文件。然而，解释字节码通常比执行预编译的机器语言代码慢。使用Java字节码的第二个优势是它充当您的计算机和程序之间的缓冲区。这使您可以从互联网下载一个不受信任的程序并在您的计算机上执行它，同时提供一些保证。由于您正在运行Java解释器（而不是原始机器语言代码），您受到一层防护，可防范恶意程序。正是Java和Java字节码的结合产生了一个平台独立和安全的环境，同时还包含了一整套现代编程抽象。
- en: The Java bytecode and the java interpreter are not inherently specific to the
    Java programming language. For example, you can use Jython to compile from the
    Python programming language into Java bytecode, and then use `java` to interpret
    it. There are similar ML, Lisp, and Fortran compilers that compile into JAva bytecode.
    You could also use the Unix program `gcj` to compile directly from a `.java` source
    file into a machine executable file `a.out`, which can be run natively on any
    Sparc microprocessors. Additionally, you can design hardware whose machine language
    is the Java bytecode. Sun Microsystems has done exactly this, making the Java
    Virtual Machine not so virtual.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Java字节码和java解释器并不固有地特定于Java编程语言。例如，您可以使用Jython将Python编程语言编译为Java字节码，然后使用`java`来解释它。有类似的ML、Lisp和Fortran编译器将编译为Java字节码。您还可以使用Unix程序`gcj`直接从一个`.java`源文件编译为一个可以在任何Sparc微处理器上本地运行的机器可执行��件`a.out`。此外，您可以设计硬件，其机器语言是Java字节码。Sun
    Microsystems正是这样做的，使Java虚拟机不再那么虚拟。
- en: Why not use a real machine language instead of the Java bytecode? The Java bytecode
    is much simpler than a typical high-level programming language. It is much easier
    to write a Java bytecode interpreter for a new type of computer than it is to
    write a full Java compiler.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么不使用真正的机器语言而是Java字节码？Java字节码比典型的高级编程语言简单得多。为新类型的计算机编写一个Java字节码解释器比编写一个完整的Java编译器要容易得多。
- en: Creative Exercises
  id: totrans-9
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
- en: '**Boolean expression evaluation.** Write a program to [evaluate Boolean expressions](http://cgm.cs.mcgill.ca/~msuder/courses/250/assignments/3/3.pdf)
    made of bits, unary operators (~), binary operators (&, ^, |), and parentheses
    using the same precedence rules as Java. Here is a solution using [two stacks](http://cgm.cs.mcgill.ca/~msuder/courses/250/assignments/3/solutions/3.pdf),
    one to store the bits and one to store the operators.'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**布尔表达式求值。** 编写一个程序来[评估由位、一元运算符(~)、二元运算符(&, ^, |)和括号组成的布尔表达式](http://cgm.cs.mcgill.ca/~msuder/courses/250/assignments/3/3.pdf)，使用与Java相同的优先级规则。这里是一个使用[两个栈](http://cgm.cs.mcgill.ca/~msuder/courses/250/assignments/3/solutions/3.pdf)的解决方案，一个用于存储位，另一个用于存储运算符。'
