- en: 5\.   Strings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://algs4.cs.princeton.edu/50strings](https://algs4.cs.princeton.edu/50strings)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Overview.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We communicate by exchanging strings of characters. We consider classic algorithms
    for addressing the underlying computational challenges surrounding applications
    such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*5.1 String Sorts*](../51radix) includes LSD radix sort, MSD radix sort, and
    3-way radix quicksort for sorting arrays of strings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*5.2 Tries*](../52trie) describes R-way tries and ternary search tries for
    implementing symbol tables with string keys.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*5.3 Substring Search*](../53substring) describes algorithms for searching
    for a substring in a large piece of text, including the classic Knuth-Morris-Pratt,
    Boyer-Moore, and Rabin-Karp algorithms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*5.4 Regular Expressions*](../54regexp) introduces a quintessential search
    tool known as grep that we use to search for incompletely specified substrings.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*5.5 Data Compression*](../55compression) introduces data compression, where
    we try to reduce the size of a string to the minimum possible. We present the
    classic Huffman and LZW algorithms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Rules of the game.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For clarity and efficiency, our implementations are expressed in terms of the
    Java [String](http://download.oracle.com/javase/6/docs/api/java/lang/String.html)
    class. We briefly review their most important characteristics.
  prefs: []
  type: TYPE_NORMAL
- en: '*Characters.* A `String` is a sequence of characters. Characters are of type
    `char` and can have one of 2^16 possible values. For many decades, programmers
    restricted attention to characters encoded in 7-bit ASCII or 8-bit extended ASCII,
    but many modern applications call for 16-bit Unicode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Immutability.* `String` objects are immutable, so that we can use them in
    assignment statements and as arguments and return values from methods without
    having to worry about their values changing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Indexing.* The `charAt()` method extracts a specified character from a string
    in constant time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Length.* The `length()` method returns the length of a string in constant
    time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Substring.* The `substring()` method typically extracts a specified substring
    in constant time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'WARNING: Beginning with Oracle and OpenJDK Java 7, Update 6, the `substring()`
    method takes linear time and space in the size of the extracted substring. Since
    we did not anticipate this drastic change, some of our string-processing code
    will suffer the consequences. The [String API](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)
    provides no performance guarantees for any of its methods, including `substring()`
    and `charAt()`. The lesson is to use at your own risk.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: See [this article](http://java-performance.info/changes-to-string-java-1-7-0_06/)
    for more details.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![String operations](../Images/e5ccb96ba41b7fdc8ca13f7f422cdc99.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '*Concatenation.* The `+` operator performs string concatenation. We avoid forming
    a string by appending one character at a time because that is a *quadratic-time*
    process in Java. (Java has a [StringBuilder](http://download.oracle.com/javase/6/docs/api/java/lang/StringBuilder.html)
    class for that use.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Character arrays.* The Java `String` is not a primitive type. The standard
    implementation provides the operations just described to facilitate client programming.
    By contrast, many of the algorithms that we consider can work with a low-level
    representation such as an array of `char` values, and many clients might prefer
    such a representation, because it consumes less space and takes less time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alphabets.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Some applications involve strings taken from a restricted alphabet. In such
    applications, it often makes sense to use an [Alphabet.java](Alphabet.java.html)
    class with the following API:![Alphabet API](../Images/f98f6543a37b5dbceed04162ad50f388.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'The constructor that takes as argument an R-character string that specifies
    the alphabet; the `toChar()` and `toIndex()` methods convert (in constant time)
    between string characters and `int` values between 0 and R-1\. The method `R()`
    returns the number of characters in the alphabet or *radix*. A number of predefined
    alphabets are included:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Alphabets](../Images/2b81c444b7268baf93da09e17c286e43.png)'
  prefs: []
  type: TYPE_IMG
- en: '[Count.java](Count.java.html) is a client that takes an alphabet specified
    on the command line, reads in a sequence of characters over that alphabet (ignoring
    characters not in the alphabet), computes the frequency of occurrence of each
    character,'
  prefs: []
  type: TYPE_NORMAL
- en: Java programs in this chapter.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is a list of Java programs in this chapter. Click on the program name
    to access the Java code; click on the reference number for a brief description;
    read the textbook for a full discussion.
  prefs: []
  type: TYPE_NORMAL
- en: '| REF | PROGRAM | DESCRIPTION / JAVADOC |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [-](../50strings/index.php#-) | [Alphabet.java](../50strings/Alphabet.java.html
    "alphabet") | alphabet |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [-](../50strings/index.php#-) | [Count.java](../50strings/Count.java.html
    "alphabet client") | alphabet client |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [5.1](../51radix/index.php#5.1) | [LSD.java](../51radix/LSD.java.html "LSD
    radix sort") | LSD radix sort |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [5.2](../51radix/index.php#5.2) | [MSD.java](../51radix/MSD.java.html "MSD
    radix sort") | MSD radix sort |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [-](../51radix/index.php#-) | [InplaceMSD.java](../51radix/InplaceMSD.java.html
    "In-place MSD radix sort<sup>1</sup>") | In-place MSD radix sort¹ |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [5.3](../51radix/index.php#5.3) | [Quick3string.java](../51radix/Quick3string.java.html
    "3-way string quicksort") | 3-way string quicksort |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [-](../51radix/index.php#-) | [AmericanFlag.java](../51radix/AmericanFlag.java.html
    "American flag sort<sup>1</sup>") | American flag sort¹ |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [-](../51radix/index.php#-) | [AmericanFlagX.java](../51radix/AmericanFlagX.java.html
    "non-recursive American flag sort<sup>1</sup>") | non-recursive American flag
    sort¹ |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [5.4](../52trie/index.php#5.4) | [TrieST.java](../52trie/TrieST.java.html
    "multiway trie symbol table") | multiway trie symbol table |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [-](../52trie/index.php#-) | [TrieSET.java](../52trie/TrieSET.java.html "multiway
    trie set") | multiway trie set |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [5.5](../52trie/index.php#5.5) | [TST.java](../52trie/TST.java.html "ternary
    search trie") | ternary search trie |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [5.6](../53substring/index.php#5.6) | [KMP.java](../53substring/KMP.java.html
    "substring search (Knuth–Morris–Pratt)") | substring search (Knuth–Morris–Pratt)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [5.7](../53substring/index.php#5.7) | [BoyerMoore.java](../53substring/BoyerMoore.java.html
    "substring search (Boyer–Moore)") | substring search (Boyer–Moore) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [5.8](../53substring/index.php#5.8) | [RabinKarp.java](../53substring/RabinKarp.java.html
    "substring search (Rabin–Karp)") | substring search (Rabin–Karp) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [5.9](../54regexp/index.php#5.9) | [NFA.java](../54regexp/NFA.java.html "NFA
    for regular expressions") | NFA for regular expressions |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [-](../54regexp/index.php#-) | [GREP.java](../54regexp/GREP.java.html "grep")
    | grep |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [-](../55compression/index.php#-) | [BinaryDump.java](../55compression/BinaryDump.java.html
    "binary dump") | binary dump |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [-](../55compression/index.php#-) | [HexDump.java](../55compression/HexDump.java.html
    "hex dump") | hex dump |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [-](../55compression/index.php#-) | [PictureDump.java](../55compression/PictureDump.java.html
    "picture dump") | picture dump |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [-](../55compression/index.php#-) | [Genome.java](../55compression/Genome.java.html
    "genomic code") | genomic code |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [-](../55compression/index.php#-) | [RunLength.java](../55compression/RunLength.java.html
    "data compression (run-length coding)") | data compression (run-length coding)
    |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [5.10](../55compression/index.php#5.10) | [Huffman.java](../55compression/Huffman.java.html
    "data compression (Huffman)") | data compression (Huffman) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [5.11](../55compression/index.php#5.11) | [LZW.java](../55compression/LZW.java.html
    "data compression (Lempel–Ziv–Welch)") | data compression (Lempel–Ziv–Welch) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: Q + A
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Q.**What is Unicode.'
  prefs: []
  type: TYPE_NORMAL
- en: '**A.** Unicode (Universal character encoding) = complex 21-bit code to represent
    International symbols and other characters.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Q.**What is UTF-16.'
  prefs: []
  type: TYPE_NORMAL
- en: '**A.** UTF-16 (Unicode Transformation Format) = complex 16-bit variable width
    code to represent Unicode characters. Most common characters are represented using
    16 bits (a `char`), but *surrogate pairs* are represented using a pair of `char`
    values. If first `char` value is between `D800` and `DFFF`, then it is combined
    with the next `char` (in the same range) to form a surrogate pair. No Unicode
    characters correspond to `D800` through `DFFF`. For example, `007A` represents
    a lowercase Z, `6C34` represents the Chinese symbol for water, and `D834 DD1E`
    represents the musical G clef.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Unicode reference](http://docs.oracle.com/javase/6/docs/api/java//lang/Character.html#unicode).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Q.** What''s the substring trap?'
  prefs: []
  type: TYPE_NORMAL
- en: '**A.** The String method call s.substring(i, j) returns the substring of s
    starting at index i and ending at j-1 (not at j as you might suspect).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Q.** How can I change the value of a string?'
  prefs: []
  type: TYPE_NORMAL
- en: '**A.** You can''t since strings are immutable in Java. If you want a new string,
    then you must create a new one using string concatenation or one of the string
    methods that returns a new string such as `toLowerCase()` or `substring()`.'
  prefs: []
  type: TYPE_NORMAL
- en: Web Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Squeeze whitespace.** Write a program [Squeeze.java](Squeeze.java.html) that
    takes as input a string and removes adjacent spaces, leaving at most one space
    in-a-row.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Remove duplicates.** Given a string, create a new string with all the consecutive
    duplicates removed. For example, `ABBCCCCCBBAB` becomes `ABCBAB`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**String of N x''s.** Describe the string that the following function returns,
    given a positive integer `N`?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Palindrome check.** Write a function that takes as input a string and returns
    `true` if the string is a palindrome, and `false` otherwise. A *palindrome* is
    a string that reads the same forwards or backwards.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Watson-Crick complemented palindrome check.** Write a function that takes
    as input a string and returns `true` if the string is a Watson-Crick complemented
    palindrome, and `false` otherwise. A *Watson-Crick complemented palindrome* is
    a DNA string that is equal to the complement (A-T, C-G) of its reverse.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Watson-Crick complement.** Write a function that takes as input a DNA string
    of A, C, G, and T characters and returns the string in reverse order with all
    of characters replaced by their complements. For example, if the input is ACGGAT,
    then return ATCCGT.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Perfect shuffle.** What does the following recursive function return, given
    two strings `s` and `t` of the same length?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Binary tree representation.** Write a data type `TreeString.java` that represents
    an immutable string using a binary tree. It should support concatenation in constant
    time, and printing out the string in time proportional to the number of characters.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Reverse a string.** Write a recursive function to reverse a string. Do not
    use any loops. *Hint*: use the String method `substring()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How efficient is your method? Our method has a linearithmic running time.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Random string.** Write a recursive function to create a random string of
    characters between ''A'' and ''Z''.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Subsequence.** Given two strings `s` and `t`, write a program [Subsequence.java](Subsequence.java.html)
    that determines whether `s` is a subsequence of `t`. That is, the letters of `s`
    should appear in the same order in `t`, but not necessarily contiguously. For
    example `accag` is a subsequence of `taagcccaaccgg`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Longest complemented palindrome.** In DNA sequence analysis, a *complemented
    palindrome* is a string equal to its reverse complement. Adenine (A) and Thymine
    (T) are complements, as are Cytosine (C) and Guanine (G). For example, ACGGT is
    a complement palindrome. Such sequences act as transcription-binding sites and
    are associated with gene amplification and genetic instability. Given a text input
    of N characters, find the longest complemented palindrome that is a substring
    of the text. For example, if the text is `GACACGGTTTTA` then the longest complemented
    palindrome is `ACGGT`. *Hint*: consider each letter as the center of a possible
    palindrome of odd length, then consider each pair of letters as the center of
    a possible palindrome of even length.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**DNA to RNA.** Write a function that takes a DNA string (A, C, G, T) and returns
    the corresponding RNA string (A, C, G, U).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**DNA complement.** Write a function that takes as input a DNA string (A, C,
    G, T) and returns the complementary base pairs (T, G, C, A). DNA is typically
    found in a *double helix* structure. The two complementary DNA strands are joined
    in a spiral structure.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Convert from hexadecimal to decimal.** [Hex2Decimal.java](Hex2Decimal.java.html)
    contains a function takes a hexadecimal string (using A-F for the digits 11-15)
    and returns the corresponding decimal integer. It uses a number of the string
    library methods and Horner''s method.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alternate solution: `Integer.parseInt(String s, int radix)`. More robust, and
    works with negative integers.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
