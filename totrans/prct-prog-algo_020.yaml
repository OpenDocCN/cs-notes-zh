- en: 4.1   Analysis of Algorithms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.1   算法分析
- en: 原文：[https://introcs.cs.princeton.edu/java/41analysis](https://introcs.cs.princeton.edu/java/41analysis)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/java/41analysis](https://introcs.cs.princeton.edu/java/41analysis)
- en: 'In this section, you will learn to respect a principle whenever you program:
    *Pay attention to the cost.* To study the cost of running them, we study our programs
    themselves via the *scientific method*. We also apply mathematical analysis to
    derive concise models of the cost.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，您将学会在编程时尊重一个原则：*注意成本。* 为了研究运行它们的成本，我们通过*科学方法*研究我们的程序本身。我们还应用数学分析来推导成本的简洁模型。
- en: Scientific method.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 科学方法。
- en: 'The following five-step method summarizes the scientific method: the following
    5 step approach.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下五步方法总结了科学方法：以下5步方法。
- en: '*Observe* some feature of the natural world.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*观察*自然界的某些特征。'
- en: '*Hypothesize* a model that is consistent with the observations.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*假设*一个与观察结果一致的模型。'
- en: '*Predict* events using the hypothesis.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用假设*预测*事件。
- en: '*Verify* the predictions by making further observations.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过进一步观察*验证*预测。
- en: '*Validate* by repeating until the hypothesis and observations agree.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过重复直到假设和观察结果一致来*验证*。
- en: The experiments we design must be *reproducible* and the hypotheses we formulate
    must be *falsifiable*.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们设计的实验必须是*可重现的*，我们制定的假设必须是*可证伪的*。
- en: Observations.
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 观察结果。
- en: Measuring the exact running time of our program is difficult, but there are
    a number of tools available to help. In this book, we simply run a program on
    various inputs and measure the amount of time to process each input using the
    [Stopwatch.java](Stopwatch.java.html) data type. Our first qualitative observation
    about most programs is that there is a *problem size* that characterizes the difficulty
    of the computational task. Normally, the problem size is either the size of the
    input or the value of a command-line argument. Intuitively, the running time should
    increase with the problem size, but the question of *how much* it increases naturally
    arises every time we develop and run a program.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 测量程序的确切运行时间很困难，但有许多工具可用于帮助。在本书中，我们简单地在各种输入上运行程序，并使用[Stopwatch.java](Stopwatch.java.html)数据类型测量处理每个输入所需的时间量。关于大多数程序的第一个定性观察是，存在一个*问题规模*来表征计算任务的难度。通常，问题规模要么是输入的大小，要么是命令行参数的值。直观地，运行时间应该随问题规模增加而增加，但每次我们开发和运行程序时都会自然地产生一个*增加多少*的问题。
- en: A concrete example.
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个具体的例子。
- en: To illustrate the approach, we start with [ThreeSum.java](ThreeSum.java.html)
    which counts the number of triples in an array of \(n\) integers that sums to
    0\. What is the relationship between the problem size \(n\) and running time for
    `ThreeSum`?
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这种方法，我们从[ThreeSum.java](ThreeSum.java.html)开始，它计算一个包含\(n\)个整数的数组中总和为0的三元组的数量。问题规模\(n\)与`ThreeSum`的运行时间之间的关系是什么？
- en: '*Doubling hypothesis.* For a great many programs, we can quickly formulate
    a hypothesis for the following question: *What is the effect on the running time
    of doubling the size of the input?*'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*加倍假设。* 对于许多程序，我们可以快速为以下问题制定一个假设：*将输入大小加倍对运行时间有什么影响？*'
- en: '*Empirical analysis.* One simple way to develop a doubling hypothesis is to
    double the size of the input and observe the effect on the running time. [DoublingTest.java](DoublingTest.java.html)
    generates a sequence of random input arrays for `ThreeSum`, doubling the array
    length at each step, and prints the ratio of running times of `ThreeSum.count()`
    for each input over the previous (which was one-half the size). If you run this
    program, you will find that the elapsed time increases by about a factor of 8
    to print each line. This leads immediately to the hypothesis that the running
    time increases by a factor of 8 when the input size doubles.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*经验分析。* 制定加倍假设的一种简单方法是将输入大小加倍并观察对运行时间的影响。[DoublingTest.java](DoublingTest.java.html)为`ThreeSum`生成一系列随机输入数组，每一步将数组长度加倍，并打印`ThreeSum.count()`对于每个输入的运行时间与前一个（大小为前一个的一半）的比率。如果您运行此程序，您会发现每行打印的经过时间增加了大约8倍。这立即导致假设：当输入大小加倍时，运行时间增加了8倍。'
- en: '*Log–logplot.* We might also plot the running times on a standard plot (left)
    or log–log plot (right). The log–log plot is a straight line with slope 3, clearly
    suggesting the hypothesis that the running time satisfies a power law of the form
    \(cn^3\).'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*对数-对数图。* 我们也可以在标准图（左侧）或对数-对数图（右侧）上绘制运行时间。对数-对数图是一条斜率为3的直线，清楚地表明运行时间满足\(cn^3\)形式的幂律的假设。'
- en: '![log-log plot](../Images/43cd93992de0ee76bf8850abdf320bbf.png)           ![log-log
    plot](../Images/5eb5b8c5bd13dddb20b385364371977f.png)'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![对数-对数图](../Images/43cd93992de0ee76bf8850abdf320bbf.png)           ![对数-对数图](../Images/5eb5b8c5bd13dddb20b385364371977f.png)'
- en: '*Mathematical analysis.* The total running time is determined by two primary
    factors:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数学分析。* 总运行时间由两个主要因素决定：'
- en: The cost of executing each statement.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个语句的执行成本。
- en: The frequency of execution of each statement.
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个语句的执行频率。
- en: The former is a property of the system, and the latter is a property of the
    algorithm. If we know both for all instructions in the program, we can multiply
    them together and sum for all instructions in the program to get the running time.
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 前者是系统的属性，后者是算法的属性。如果我们知道程序中所有指令的这两个属性，我们可以将它们相乘并对程序中所有指令求和，以获得运行时间。
- en: 'The primary challenge is to determine the frequency of execution of the statements.
    Some statements are easy to analyze: for example, the statement that sets `count`
    to `0` in `ThreeSum.count()` is executed only once. Others require higher-level
    reasoning: for example, the `if` statement in `ThreeSum.count()` is executed precisely
    \(n(n-1)(n-2) / 6\) times.'
  id: totrans-23
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 主要挑战在于确定语句的执行频率。有些语句很容易分析：例如，在`ThreeSum.count()`中将`count`设置为`0`的语句只执行一次。其他语句需要更高级别的推理：例如，在`ThreeSum.count()`中的`if`语句被执行了精确地\(n(n-1)(n-2)
    / 6\)次。
- en: Tilde notation.
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 波浪线符号。
- en: We use *tilde notation* to develop simpler approximate expressions. First, we
    work with the *leading term* of mathematical expressions by using a mathematical
    device known as the tilde notation. We write \( \sim g(n)\) to represent any quantity
    that, when divided by \(f(n)\), approaches \(1\) as \(n\) grows. We also write
    \(g(n) \sim f(n)\) to indicate that \(g(n) \,/\, f(n)\) approaches \(1\) as \(n\)
    grows. With this notation, we can ignore complicated parts of an expression that
    represent small values. For example, the `if` statement in `ThreeSum.count()`
    is executed \(\sim n^3 / 6 \) times because \(n(n-1)(n-2) / 6 = n^3/6 - n^2/2
    + n/3\), which, when divided by \(n^3/6\), approaches \(1\) as \(n\) grows.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用*波浪符号表示法*来开发更简单的近似表达式。首先，我们通过使用称为波浪符号的数学工具处理数学表达式的*主导项*。我们写\( \sim g(n)\)来表示任何数量，当除以\(f(n)\)时，随着\(n\)的增长趋近于1。我们还写\(g(n)
    \sim f(n)\)来表示当\(n\)增长时，\(g(n) \,/\, f(n)\)趋近于1。使用这种符号，我们可以忽略表示小值的表达式的复杂部分。例如，在`ThreeSum.count()`中的`if`语句执行\(\sim
    n^3 / 6 \)次，因为\(n(n-1)(n-2) / 6 = n^3/6 - n^2/2 + n/3\)，当除以\(n^3/6\)时，随着\(n\)的增长趋近于1。
- en: We focus on the instructions that are executed most frequently, sometimes referred
    to as the *inner loop* of the program. In this program it is reasonable to assume
    that the time devoted to the instructions outside the inner loop is relatively
    insignificant.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们关注执行频率最高的指令，有时被称为程序的*内循环*。在这个程序中，合理假设是，内循环之外的指令所花费的时间相对不重要。
- en: Order of growth.
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增长顺序。
- en: 'The key point in analyzing the running time of a program is this: for a great
    many programs, the running time satisfies the relationship \(T(n) \sim c f(n)\)
    where \(c\) is a constant and \(f(n)\) a function known as the *order of growth*
    of the running time. For typical programs, \(f(n)\) is a function such as \(\log_2
    n, n, n \log_2 n, n^2,\) or \(n^3\).'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 分析程序运行时间的关键点在于：对于许多程序，运行时间满足关系\(T(n) \sim c f(n)\)，其中\(c\)是一个常数，\(f(n)\)是称为运行时间*增长顺序*的函数。对于典型程序，\(f(n)\)是诸如\(\log_2
    n, n, n \log_2 n, n^2,\)或\(n^3\)的函数。
- en: The order of growth of the running time of `ThreeSum.count()` is \(n^3\). The
    value of the constant \(c\) depends both on the cost of executing instructions
    and on details of the frequency analysis, but we normally do not need to work
    out the value. Knowing the order of growth typically leads immediately to a doubling
    hypothesis. In the case of `ThreeSum.count()`, knowing that the order of growth
    is \(n^3\) tells us to expect the running time to increase by a factor of 8 when
    we double the size of the problem because
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`ThreeSum.count()`的运行时间增长顺序为\(n^3\)。常数\(c\)的值取决于执行指令的成本和频率分析的细节，但通常我们不需要计算出具体数值。了解增长顺序通常会立即导致一个倍增假设。对于`ThreeSum.count()`，知道增长顺序为\(n^3\)告诉我们，当问题规模加倍时，预计运行时间会增加8倍，因为'
- en: $$\lim_{n\to\infty} \frac{T(2n)}{T(n)} \;=\; \frac{c (2n)^3}{c (n)^3} \;=\;
    8$$
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $$\lim_{n\to\infty} \frac{T(2n)}{T(n)} \;=\; \frac{c (2n)^3}{c (n)^3} \;=\;
    8$$
- en: Order of growth classifications.
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 增长顺序分类。
- en: We use just a few structural primitives (statements, conditionals, loops, and
    method calls) to build Java programs, so very often the order of growth of our
    programs is one of just a few functions of the problem size, summarized in the
    table below.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只使用几个结构原语（语句、条件、循环和方法调用）来构建Java程序，因此我们的程序的增长顺序往往是问题规模的几个函数之一，总结在下表中。
- en: '![order-of-growth classifications](../Images/e83ce4673f99241e1c4847275de16dfa.png)'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![增长顺序分类](../Images/e83ce4673f99241e1c4847275de16dfa.png)'
- en: Estimating memory usage.
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 估算内存使用量。
- en: To pay attention to the cost, you need to be aware of memory usage. Memory usage
    is well-defined for Java on your computer (every value will require precisely
    the same amount of memory each time that you run your program), but Java is implemented
    on a very wide range of computational devices, and memory consumption is implementation-dependent.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要注意成本，您需要了解内存使用情况。Java在您的计算机上的内存使用情况是明确定义的（每次运行程序时，每个值将需要完全相同的内存量），但Java在各种计算设备上实现，内存消耗取决于实现。
- en: '*Primitive types.* For example, since the Java `int` data type is the set of
    integer values between −2,147,483,648 and 2,147,483,647, a grand total of 2^(32)
    different values, it is reasonable to expect implementations to use 32 bits to
    represent `int` values.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基本类型.* 例如，由于Java `int`数据类型是介于-2,147,483,648和2,147,483,647之间的整数值集合，共2^(32)个不同的值，因此可以合理地期望实现使用32位来表示`int`值。'
- en: '![typical memory usage for primitive types in Java](../Images/c87ab1386811254355161c8abbf35129.png)'
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![Java中基本类型的典型内存使用情况](../Images/c87ab1386811254355161c8abbf35129.png)'
- en: '*Objects.* To determine the memory consumption of an object, we add the amount
    of memory used by each instance variable to the overhead associated with each
    object, typically 8 bytes. For example, a [Complex.java](../32class/Complex.java.html)
    object uses 32 bytes (16 bytes of overhead, plus 8 bytes for each of its two `double`
    instance variables).'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*对象.* 要确定对象的内存消耗，我们将每个实例变量使用的内存量与每个对象通常使用的8字节开销相加。例如，一个[Complex.java](../32class/Complex.java.html)对象使用32字节（16字节的开销，加上其两个`double`实例变量的每个8字节）。 '
- en: '![typical memory usage for a Complex object](../Images/637996c882529e16aebf3e2c21c2aaac.png)'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![复杂对象的典型内存使用情况](../Images/637996c882529e16aebf3e2c21c2aaac.png)'
- en: A reference to an object typically uses 8 bytes of memory. When a data type
    contains a reference to an object, we have to account separately for the 8 bytes
    for the reference and the 16 bytes overhead for each object, *plus* the memory
    needed for the object's instance variables.
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 引用对象通常使用8字节的内存。当数据类型包含对对象的引用时，我们必须单独考虑引用的8字节和每个对象的16字节开销，*再加上*对象实例变量所需的内存。
- en: '*Arrays and strings.* Arrays in Java are implemented as objects, typically
    with two instance variables (a pointer to the memory location of the first array
    element and the length). For primitive types, an array of \(n\) elements uses
    24 bytes of header information, plus \(n\) times the number of bytes needed to
    store an element. A two-dimensional array in Java is an array of arrays. For example,
    an \(n\)-by-\(n\) array of integers uses \( \sim 4n^2 \) bytes of memory. A string
    of length \(n\) uses \(56 + 2n \) bytes of memory.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数组和字符串。* Java中的数组是作为对象实现的，通常具有两个实例变量（指向第一个数组元素的内存位置的指针和长度）。对于原始类型，包含\(n\)个元素的数组使用24字节的头信息，加上\(n\)乘以存储一个元素所需的字节数。在Java中，二维数组是数组的数组。例如，一个\(n\)乘以\(n\)的整数数组使用大约\(4n^2\)字节的内存。长度为\(n\)的字符串使用\(56
    + 2n\)字节的内存。'
- en: '![typical memory usage for variable-length data types in Java](../Images/72ba5d3b641a70a92e6ca60eacad094d.png)'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![Java中变长数据类型的典型内存使用情况](../Images/72ba5d3b641a70a92e6ca60eacad094d.png)'
- en: See the textbook for full details.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 详细信息请参阅教科书。
- en: Exercises
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Implement the method `printAll()` for [ThreeSum.java](ThreeSum.java.html), which
    prints all of the triples that sum to zero.
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为[ThreeSum.java](ThreeSum.java.html)实现方法`printAll()`，打印所有总和为零的三元组。
- en: Write a program [FourSum.java](FourSum.java.html) that takes an integer reads
    `long` integers from standard input, and counts the number of 4-tuples that sum
    to zero. Use a quadruple nested loop. What is the order of growth of the running
    time of your program? Estimate the largest input size that your program can handle
    in an hour. Then, run your program to validate your hypothesis.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[FourSum.java](FourSum.java.html)，从标准输入读取一个整数`long`整数，并计算总和为零的4元组的数量。使用四重嵌套循环。你的程序的运行时间增长阶数是多少？估计你的程���在一个小时内可以处理的最大输入大小。然后，运行你的程序验证你的假设。
- en: What is the value of the variable `count`, as a function of \(n\), after running
    the following code fragment?
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在运行以下代码片段后，变量`count`的值作为\(n\)的函数是多少？
- en: '[PRE0]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Solution*: \( \displaystyle { n \choose 3} = n (n-1) (n-2) / 6\).'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：\( \displaystyle { n \choose 3} = n (n-1) (n-2) / 6\).'
- en: 'Determine the order of growth of the running time of this statement in `ThreeSum`
    as a function of the number of integers *n* on standard input:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定`ThreeSum`中此语句的运行时间作为标准输入上整数数量*n*的函数的增长阶数：
- en: '[PRE1]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Solution*: Linear. The bottlenecks are the array initialization and the input
    loop. Depending on your system, however, the cost of an input loop like this might
    dominate in a linearithmic-time or even a quadratic-time program unless the input
    size is sufficiently large.'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：线性。瓶颈是数组初始化和输入循环。然而，根据你的系统，像这样的输入循环的成本可能会在线性对数时间甚至二次时间程序中占主导地位，除非输入大小足够大。'
- en: 'Which would you prefer: a quadratic, linearithmic, or linear algorithm?'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你更喜欢二次、线性对数还是线性算法？
- en: '*Solution*: While it is tempting to make a quick decision based on the order
    of growth, it is very easy to be misled by doing so. You need to have some idea
    of the problem size and of the relative value of the leading coefficients of the
    running time. For example, suppose that the running times are \(n^2\) seconds,
    \(100 n \log_2 n\) seconds, and \(10000 n\) seconds. The quadratic algorithm will
    be fastest for \(n\) up to about \(1000\), and the linear algorithm will never
    be faster than the linearithmic one (\(n\) would have to be greater than \(2^{100}\),
    far too large to bother considering).'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：虽然根据增长阶数做出快速决定很诱人，但这样做很容易被误导。你需要对问题规模和运行时间的主导系数的相对值有一些概念。例如，假设运行时间分别为\(n^2\)秒，\(100
    n \log_2 n\)秒和\(10000 n\)秒。对于\(n\)小于约\(1000\)的情况，二次算法将是最快的，而线性算法永远不会比线性对数算法更快（\(n\)必须大于\(2^{100}\)，远远大于考虑的范围）。'
- en: Apply the scientific method to develop and validate a hypothesis about order
    of growth of the running time of each of the following two code fragments as a
    function of \(n\).
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运用科学方法，针对以下两个代码片段的运行时间作为\(n\)的函数，发展和验证一个关于增长阶数的假设。
- en: '[PRE2]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Solution*: The first is quadratic; the second is linear.'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：第一个是二次的；第二个是线性的。'
- en: Give a linear-time algorithm for reversing a string.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出一个线性时间的反转字符串算法。
- en: '*Solution*:'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：'
- en: '[PRE3]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Creative Exercises
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
- en: '**Subset sum.** Write a program [SubsetSum.java](SubsetSum.java.html) that
    reads `long` integers from standard input, and counts the number of subsets of
    those integers that sum to exactly zero. Give the order of growth of your algorithm.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**子集求和。** 编写一个程序[SubsetSum.java](SubsetSum.java.html)，从标准输入读取`long`整数，并计算这些整数的子集中总和恰好为零的数量。给出你的算法的增长阶数。'
- en: '**Sub-exponential function.** Find a function whose order of growth is larger
    than any polynomial function, but smaller than any exponential function. *Extra
    credit*: Find a program whose running time has that order of growth.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**亚指数函数。** 寻找一个增长阶数大于任何多项式函数，但小于任何指数函数的函数。 *额外加分*：找到一个运行时间具有该增长阶数的程序。'
- en: '*Solution*: \(n^{\ln n}\).'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：\(n^{\ln n}\).'
- en: Web Exercises
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网页练习
- en: Suppose the running time of an algorithm on inputs of size 1,000, 2,000, 3,000,
    and 4,000 is 5 seconds, 20 seconds, 45 seconds, and 80 seconds, respectively.
    Estimate how long it will take to solve a problem of size 5,000\. Is the order
    of growth of the running time of the linear, linearithmic, quadratic, cubic, or
    exponential?
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设算法在输入大小为1,000、2,000、3,000和4,000时的运行时间分别为5秒、20秒、45秒和80秒。估计解决大小为5,000的问题需要多长时间。运行时间的增长阶数是线性、线性对数、二次、三次还是指数？
- en: '*Solution*: 125 seconds, quadratic.'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：125秒，二次。'
- en: Write a program [OneSum.java](OneSum.java.html) that reads a sequence of integers
    from standard input and counts the number of them that are 0. How many instructions
    are executed in the data-processing loop?
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[OneSum.java](OneSum.java.html)，从标准输入读取一系列整数并计算其中值为0的数量。数据处理循环中执行了多少条指令？
- en: Write a program [TwoSum.java](TwoSum.java.html) that reads in a sequence of
    integers from standard input from standard input, and counts the number of pairs
    that sum to exactly 0. How many instructions are executed in the data-processing
    loop?
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[TwoSum.java](TwoSum.java.html)，从标准输入中读取一系列整数，并计算总共有多少对数的和恰好为0。在数据处理循环中执行了多少条指令？
- en: Analyze the following code fragment mathematically and determine whether the
    order of growth of the running time is linear, quadratic, or cubic as a function
    of *n*.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析以下代码片段的数学特性，并确定其运行时间的增长顺序是线性、二次还是立方的关于*n*的函数。
- en: '[PRE4]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The following function returns a random string of length *n*. What is the order
    of growth of its running time as a function of *n*?
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下函数返回一个长度为*n*的随机字符串。作为*n*的函数，其运行时间的增长顺序是多少？
- en: '[PRE5]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Sieve of Eratosthenes.** As a function of *n*, estimate the order of growth
    of the running time of the Sieve of Eratosthenes for finding all primes less than
    or equal to *n*'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**埃拉托斯特尼筛法。** 作为*n*的函数，估计埃拉托斯特尼筛法寻找小于或等于*n*的所有质数的运行时间的增长顺序。'
- en: '*Solution*: In theory, the order of growth is *n* log log *n*. Follows from
    Mertens'' theorem in number theory. In practice, a log log *n* factor may be hard
    to identify.'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：理论上，增长顺序是*n*对数对数*n*。这源自数论中的Mertens定理。实际上，很难识别出对数对数*n*的因子。'
