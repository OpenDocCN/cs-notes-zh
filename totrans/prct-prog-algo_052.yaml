- en: 9.3\. NUMERICAL INTEGRATION
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9.3\. 数值积分
- en: 原文：[https://introcs.cs.princeton.edu/java/93integration](https://introcs.cs.princeton.edu/java/93integration)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/java/93integration](https://introcs.cs.princeton.edu/java/93integration)
- en: This section under major construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节正在大力施工中。
- en: '**Midpoint rule.** Goal: given continuous function f(x) of one variable, compute
    ∫ f(x) dx over interval from a to b. Estimate integral by M = (b-a) * f(c), where
    c = (a + b)/2.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**中点法则。** 目标：给定一个变量的连续函数f(x)，计算从a到b的区间上的∫ f(x) dx。通过M = (b-a) * f(c)来估计积分，其中c
    = (a + b)/2。'
- en: '**Trapezoidal rule.** Goal: given continuous function f(x) of one variable,
    compute ∫ f(x) dx over interval from a to b. [TrapezoidalRule.java](TrapezoidalRule.java.html)
    numerically integrates a function of one variable using the trapezoidal rule.
    We can estimate the integral of f(x) from a to b using the formula T = (b-a)/2
    (f(a) + f(b)). Breaking the interval from a to b up into N equally spaced intervals
    (and combining common terms) we obtain the formula:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**梯形法则。** 目标：给定一个变量的连续函数f(x)，计算从a到b的区间上的∫ f(x) dx。[TrapezoidalRule.java](TrapezoidalRule.java.html)使用梯形法则数值积分一个变量的函数。我们可以使用公式T
    = (b-a)/2 (f(a) + f(b))来估计从a到b的f(x)的积分。将区间从a到b分成N个等距间隔的子区间（并合并公共项），我们得到公式：'
- en: '![Trapezoidal rule](../Images/abe17ef3c45eeeaaaaecac7609acd125.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![梯形法则](../Images/abe17ef3c45eeeaaaaecac7609acd125.png)'
- en: where the interval [a, b] is broken up into N subintervals of uniform size h
    = (b - a) / N. Under certain technical conditions, if N is large then the formula
    above is a good estimate of the integral.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 其中区间[a, b]被分成N个均匀大小的子区间，h = (b - a) / N。在某些技术条件下，如果N很大，则上述公式是积分的一个很好的估计。
- en: '**Simpson''s rule.** The trapezoidal rule is rarely used to integrate in practice.
    For smooth f, the midpoint rule is approximately twice as accurate as the trapezoidal
    rule, and the errors have different signs. By combining the two expressions, we
    obtain a more accurate estimate of f: S = 2/3*M + 1/3*T. This combination is known
    as Simpson''s 1/3 rule. S = (b-a)/6 (f(a) + 4f(c) + f(b)), where c = (a + b)/2.
    Breaking the interval from a to b up into N equally spaced intervals (and combining
    common terms) we obtain the formula:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**辛普森法则。** 梯形法则在实践中很少用于积分。对于光滑的f，中点法则的精度大约是梯形法则的两倍，并且误差具有不同的符号。通过结合这两个表达式，我们得到f的更准确的估计：S
    = 2/3*M + 1/3*T。这种组合被称为辛普森1/3法则。S = (b-a)/6 (f(a) + 4f(c) + f(b))，其中c = (a + b)/2。将区间从a到b分成N个等距间隔的子区间（并合并公共项），我们得到公式：'
- en: '![Simpson''s 1/3 rule](../Images/1b2e20aea9a99bd23f5124e6cb29a881.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![辛普森1/3法则](../Images/1b2e20aea9a99bd23f5124e6cb29a881.png)'
- en: where the interval [a, b] is broken up into N subintervals of uniform size h
    = (b - a) / (N - 1) and the 2/3 and 4/3 coefficients alternate throughout the
    interior. Here are some nice [animations of numerical quadrature](http://www.ecs.fullerton.edu/~mathews/a2001/Animations/Quadrature/).
    Under certain technical conditions, if N is large then the formula above is a
    good estimate of the integral. The program [SimpsonsRule.java](SimpsonsRule.java.html)
    numerically integrates x^4 log (x + sqrt(x^2 + 1)) from a = 0 to b = 2.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 其中区间[a, b]被分成N个均匀大小的子区间，h = (b - a) / (N - 1)，而2/3和4/3的系数在内部交替。这里有一些关于数值积分的不错的[动画](http://www.ecs.fullerton.edu/~mathews/a2001/Animations/Quadrature/)。在某些技术条件下，如果N很大，则上述公式是积分的一个很好的估计。程序[SimpsonsRule.java](SimpsonsRule.java.html)从a
    = 0到b = 2数值积分x^4 log (x + sqrt(x^2 + 1))。
- en: '**Program organization.** To write a reusable intergration routine, we would
    like to be able to create a class `TrapezoidalRule` and pass an arbitrary continuous
    function to be integrated. One way of accomplishing this is to declare an interface
    for continuous functions that has a single method `eval`, which takes a real argument
    x and returns f(x).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**程序组织。** 为了编写可重复使用的积分例程，我们希望能够创建一个类`TrapezoidalRule`并传递一个要被积分的任意连续函数。实现这一目标的一种方法是声明一个连续函数的接口，该接口具有一个名为`eval`的方法，该方法接受一个实数参数x并返回f(x)。'
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Then, we could implement the error function as
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以实现误差函数为
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Adaptive quadrature.** The Matlab function `quad` uses adapative quadrature
    with extrapolated Simpson''s rule. [Reference Chapter 6, Cleve Moler.]'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**自适应积分。** Matlab函数`quad`使用外推辛普森法则的自适应积分。[参考第6章，Cleve Moler。]'
- en: '[PRE2]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The trapezoidal rule approximates the area under a curve by breaking up the
    interval into a fixed number of equally spaced subintervals, and approximating
    the area in each subinterval by a trapezoid. We can often obtain a more refined
    approximation by using a variable number of subintervals and choosing them according
    to the shape of the curve. In *adaptive quadrature* we estimate the area under
    a curve in the interval from a to b twice, one using Q1 and once using Q2. If
    these two estimates are sufficiently close, we estimate the area using Q = Q2
    + (Q2 - Q1)/ 15\. Otherwise, we divide up the interval into two equal subintervals
    from a to c and c to b, where c is the midpoint (a + b) / 2. We compute the area
    of each piece (recursively using adaptive quadrature) and sum the results. Program
    [AdaptiveQuadrature.java](AdaptiveQuadrature.java.html) implements this strategy.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 梯形法则通过将区间分成固定数量的等距子区间，并通过梯形逼近每个子区间中的面积来近似曲线下的面积。通过使用可变数量的子区间并根据曲线的形状选择它们，我们通常可以获得更精细的近似。在*自适应积分*中，我们估计从a到b曲线下的面积两次，一次使用Q1，一次使用Q2。如果这两个估计足够接近，我们使用Q
    = Q2 + (Q2 - Q1)/ 15来估计面积。否则，我们将区间分成从a到c和从c到b的两个相等子区间，其中c是中点(a + b) / 2。我们计算每个部分的面积（递归使用自适应积分）并将结果相加。程序[AdaptiveQuadrature.java](AdaptiveQuadrature.java.html)实现了这种策略。
- en: If we are careful, we can save function evaluations from one iteration to the
    next and get away with just two function evaluations per recursive invocation.
    (See exercise.)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们小心一些，可以在一次迭代到下一次迭代中保存函数评估，并且每次递归调用只需两次函数评估。（见练习。）
- en: Our method fails spectacularly when integrating 1 / (3x - 1) from x = 0 to 1\.
    Integral has a nonsingularity and our function will go into an infinite loop.
    An industrial strength implementation would diagnose such a situation and report
    an appropriate error message.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当积分 1 / (3x - 1) 从 x = 0 到 1 时，我们的方法失败得很惨。积分具有非奇异性，我们的函数将陷入无限循环。一个工业强度的实现应该诊断这种情况并报告适当的错误信息。
- en: '**Monte Carlo integration.** Theory based on the Law of Large Numbers. Estimating
    area of circle by rejection method. Dartboard. Throwing darts at Irish pub after
    several pints... Program [Dartboard.java](Dartboard.java.html) reads in a command
    line integer N, throws N darts uniformly distributed in the unit box, and plots
    the results. The pictures below show sample results for N = 1,000, 10,000, and
    100,000.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**蒙特卡罗积分。** 基于大数定律的理论。通过拒绝方法估计圆的面积。飞镖板。在几杯啤酒后在爱尔兰酒吧扔飞镖... 程序 [Dartboard.java](Dartboard.java.html)
    读取一个命令行整数 N，将 N 个均匀分布在单位盒中的飞镖扔出，并绘制结果。下面的图片展示了 N = 1,000、10,000 和 100,000 的样本结果。'
- en: '| ![Monte Carlo integration](../Images/b1a110d4d7ec88520a90590ec571d92d.png)
    | ![Monte Carlo integration](../Images/d37d2b6a9b4e5bb8d067ccca9ea77bde.png) |
    ![Monte Carlo integration](../Images/758e0bb7dcefbc422c9b3f4a30a5b7bf.png) |'
  id: totrans-20
  prefs: []
  type: TYPE_TB
  zh: '| ![蒙特卡罗积分](../Images/b1a110d4d7ec88520a90590ec571d92d.png) | ![蒙特卡罗积分](../Images/d37d2b6a9b4e5bb8d067ccca9ea77bde.png)
    | ![蒙特卡罗积分](../Images/758e0bb7dcefbc422c9b3f4a30a5b7bf.png) |'
- en: 'Alternate viewpoint: 2D Monte Carlo integration of f(x, y) = 1 if x² + y² ≤
    1. Show histogram of plot - normal with standard deviation.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种观点：2D 蒙特卡洛积分 f(x, y) = 1，如果 x² + y² ≤ 1。展示直方图 - 标准差正态分布的图。
- en: To estimate the integral of f over a multi-dimensional volume V, we select N
    points x[1], x[2], ..., x[N] in the volume uniformly at random. Our estimate of
    the integral is the fraction of random points that fall below f multiplied by
    the volume = V <f>, where
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 为了估计 f 在多维体积 V 上的积分，我们在体积中随机选择 N 个点 x[1]、x[2]、...、x[N]。我们对积分的估计是随机点落在 f 以下的比例乘以体积
    = V <f>，其中
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The fundamental theorem of Monte Carlo integration asserts that the integral
    of f over V equals V <f> +- V sqrt((<f²> - <f>²) / N). The key observation is
    that the error goes as 1 / sqrt(N). This means that you have to quadruple the
    number of simulations to double the accuracy of your approximation. However, there
    is no dependence on dimension! Not competitive in one or two dimensions, but its
    power shines in higher dimensions.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 蒙特卡罗积分的基本定理断言，f 在 V 上的积分等于 V <f> +- V sqrt((<f²> - <f>²) / N)。关键观察是误差随着 1 /
    sqrt(N) 增加。这意味着你必须将模拟次数增加四倍才能将你的近似精度提高一倍。然而，这与维度无关！在一到两个维度中不具竞争力，但在更高维度中表现出色。
- en: '*Center of mass of a torus.* As an example (borrowed from p. 221 Numerical
    Recipes), suppose we want to estimate the weight and center of mass of the intersection
    of a torus and two planes, defined by points (x, y, z) satisfying'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '*圆环的质心。* 举个例子（摘自《数值食谱》第221页），假设我们想要估计一个圆环和两个平面的交点的重量和质心，由满足点 (x, y, z) 的定义'
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We must compute the integrals f(x, y, z) = ρ, f[x](x, y, z) = xρ, f[y](x, y,
    z) = yρ, and f[z](x, y, z) = zρ. The center of mass is then (f[x]/f, f[y]/f, f[z]/f).
    To sample a point (x, y, z) uniformly from the torus, we use the rejection method.
    In this case, the torus in enclosed in the rectangular box with 1 ≤ x ≤ 4, -3
    ≤ y ≤ 4, and -1 ≤ z ≤ 1. Program [Torus.java](Torus.java.html) takes a command
    line parameter N and computes these quantities using N sample points.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须计算积分 f(x, y, z) = ρ，f[x](x, y, z) = xρ，f[y](x, y, z) = yρ 和 f[z](x, y, z)
    = zρ。质心然后是 (f[x]/f, f[y]/f, f[z]/f)。为了从圆环中均匀采样点 (x, y, z)，我们使用拒绝方法。在这种情况下，圆环被包含在矩形框内，其中
    1 ≤ x ≤ 4，-3 ≤ y ≤ 4，-1 ≤ z ≤ 1。程序 [Torus.java](Torus.java.html) 接受一个命令行参数 N，并使用
    N 个样本点计算这些量。
- en: '**Gaussian cdf.** Estimate the Gaussian cdf Phi(z) by generating random numbers
    from a Gaussian distribution and recording the fraction of values less than z.
    This is an example of importance sampling. Note: can''t sample uniformly between
    -infinity and infinity anyway.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '**高斯 cdf。** 通过从高斯分布生成随机数并记录小于 z 的值的比例来估计高斯 cdf Phi(z)。这是重要性抽样的一个例子。注意：无法在负无穷到正无穷之间均匀采样。'
- en: Exercises
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Integrate f(x) = x^x from x = 0 to x = 1.
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对 f(x) = x^x 从 x = 0 积��到 x = 1。
- en: '*Answer*: 1 - 2^(-2) + 3^(-3) - 4^(-4) + ... = 0.78343...'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案*：1 - 2^(-2) + 3^(-3) - 4^(-4) + ... = 0.78343...'
- en: Numerically integrate f(x) = e^(-x) sin(8x^(2/3)) from 0 to 2.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 数值积分 f(x) = e^(-x) sin(8x^(2/3)) 从 0 积分到 2。
- en: Integrate f(x) = sin(x²) from x = 0 to x = pi.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对 f(x) = sin(x²) 从 x = 0 积分到 x = pi。
- en: Integrate f(x) = cos(20 x²) from x = 0 to x = 1.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对 f(x) = cos(20 x²) 从 x = 0 积分到 x = 1。
- en: Use the trapezoidal rule to numerically integrate f(x) = 4 sqrt(1 - x²) from
    x = -1 to 1. Note slow convergence to true answer of xyz.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用梯形法则数值积分 f(x) = 4 sqrt(1 - x²) 从 x = -1 积分到 1。注意收敛到真实答案 xyz 的速度较慢。
- en: Write a program to compute the sine integral Si(x), which is defined as the
    integral of (sin t) / t from 0 to x.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个计算正弦积分 Si(x) 的程序，它被定义为 (sin t) / t 从 0 积分到 x。
- en: Write a program to compute the Fresnel sine integral FresnelSi(x), which is
    defined as the integral of sin (π/2 t²) from 0 to x.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个计算 Fresnel 正弦积分 FresnelSi(x) 的程序，它被定义为 sin (π/2 t²) 从 0 积分到 x。
- en: Use Monte Carlo integration to approximate the two dimensional integral of f(x,
    y) = x² + 6xy + y² over the unit circle (x² + y² ≤ 1).
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用蒙特卡洛积分来近似 f(x, y) = x² + 6xy + y² 在单位圆内 (x² + y² ≤ 1) 的二维积分。
- en: Creative Exercises
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
