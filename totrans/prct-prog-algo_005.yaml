- en: 1.3   Conditionals and Loops
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://introcs.cs.princeton.edu/java/13flow](https://introcs.cs.princeton.edu/java/13flow)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In the programs that we have examined to this point, each of the statements
    is executed once, in the order given. Most programs are more complicated because
    the sequence of statements and the number of times each is executed can vary.
    We use the term *control flow* to refer to statement sequencing in a program.
  prefs: []
  type: TYPE_NORMAL
- en: If statements.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most computations require different actions for different inputs.
  prefs: []
  type: TYPE_NORMAL
- en: The following code fragment uses an `if` statement to put the smaller of two
    `int` values in `x` and the larger of the two values in `y`, by exchanging the
    values in the two variables if necessary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![anatomy of an if statement](../Images/74d328fb56c4baf3ab0a7d1fceab0e19.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '[Flip.java](Flip.java.html) uses `Math.random()` and an `if-else` statement
    to print the results of a coin flip.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The table below summarizes some typical situations where you might need to use
    an `if` or `if-else` statement.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![examples of conditionals](../Images/d456cee963b7becc52eb898ef7ce5b38.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: While loops.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many computations are inherently repetitive. The `while` loop enables us to
    execute a group of statements many times. This enables us to express lengthy computations
    without writing lots of code.
  prefs: []
  type: TYPE_NORMAL
- en: The following code fragment computes the largest power of 2 that is less than
    or equal to a given positive integer *n*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![anatomy of a while loop](../Images/cd58213d17d7d10ae4d40bb361cc3797.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '[TenHellos.java](TenHellos.java.html) prints "Hello World" 10 times.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PowersOfTwo.java](PowersOfTwo.java.html) takes an integer command-line argument
    *n* and prints all of the powers of 2 less than or equal to *n*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For loops.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *for loop* is an alternate Java construct that allows us even more flexibility
    when writing loops.
  prefs: []
  type: TYPE_NORMAL
- en: '*For notation.* Many loops follow the same basic scheme: initialize an index
    variable to some value and then use a `while` loop to test an exit condition involving
    the index variable, using the last statement in the `while` loop to modify the
    index variable. Java''s `for` loop is a direct way to express such loops.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![anatomy of a for loop](../Images/befb6a3dc3b25d3c8ef6a28805af9398.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*Compound assignment idioms.* The idiom `i++` is a shorthand notation for `i
    = i + 1`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Scope.* The *scope* of a variable is the part of the program that can refer
    to that variable by name. Generally the scope of a variable comprises the statements
    that follow the declaration in the same block as the declaration. For this purpose,
    the code in the `for` loop header is considered to be in the same block as the
    `for` loop body.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Nesting.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `if`, `while`, and `for` statements have the same status as assignment statements
    or any other statements in Java; that is, we can use them wherever a statement
    is called for. In particular, we can use one or more of them in the body of another
    statement to make *compound statements*. To emphasize the nesting, we use indentation
    in the program code.
  prefs: []
  type: TYPE_NORMAL
- en: '[DivisorPattern.java](DivisorPattern.java.html) has a `for` loop whose body
    contains a `for` loop (whose body is an `if-else` statement) and a print statement.
    It prints a pattern of asterisks where the *i*th row has an asterisk in each position
    corresponding to divisors of *i* (the same holds true for the columns).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[MarginalTaxRate.java](MarginalTaxRate.java.html) computes the marginal tax
    rate for a given income. It uses several nested `if-else` statements to test from
    among a number of mutually exclusive possibilities.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loop examples.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![examples of loops](../Images/54322f5456ab0719ada9fd756c361407.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Applications.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ability to program with loops and conditionals immediately opens up the
    world of computation to us.
  prefs: []
  type: TYPE_NORMAL
- en: '*Ruler subdivisions.* [RulerN.java](RulerN.java.html) takes an integer command-line
    argument n and prints the string of ruler subdivision lengths. This program illustrates
    one of the essential characteristics of loops—the program could hardly be simpler,
    but it can produce a huge amount of output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Harmonic numbers](../Images/c4bef2a03a0536ef6739d7545dfea76c.png)'
  prefs: []
  type: TYPE_IMG
- en: '*Finite sums.* The computational paradigm used in [PowersOfTwo.java](PowersOfTwo.java.html)
    is one that you will use frequently. It uses two variables—one as an index that
    controls a loop, and the other to accumulate a computational result. Program [HarmonicNumber.java](HarmonicNumber.java.html)
    uses the same paradigm to evaluate the sum'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: $$ H_n = \frac{1}{1} + \frac{1}{2} + \frac{1}{3} + \frac{1}{4} + \; \ldots \;
    + \frac{1}{n} $$
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: These numbers, which are known as the *harmonic numbers*, arise frequently in
    the analysis of algorithms.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Newton''s method.* ![Newton''s method](../Images/f96a3090a1345417d5c553d11d5e9a3f.png)
    [Sqrt.java](Sqrt.java.html) uses a classic iterative technique known as *Newton''s*
    method to compute the square root of a positive number *x*: Start with an estimate
    *t*. If *t* is equal to *x/t* (up to machine precision), then *t* is equal to
    a square root of *x*, so the computation is complete. If not, refine the estimate
    by replacing *t* with the average of *t* and *x/t*. Each time we perform this
    update, we get closer to the desired answer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Number conversion.* [Binary.java](Binary.java.html) prints the binary (base
    2) representation of the decimal number typed as the command-line argument. It
    is based on decomposing the number into a sum of powers of 2. For example, the
    binary representation of 106 is 1101010[2], which is the same as saying that 106
    = 64 + 32 + 8 + 2. To compute the binary representation of *n*, we consider the
    powers of 2 less than or equal to *n* in decreasing order to determine which belong
    in the binary decomposition (and therefore correspond to a 1 bit in the binary
    representation).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Gambler''s ruin.* ![gambler''s ruin](../Images/10f519ea8236b78a7139adee4589d562.png)  Suppose
    a gambler makes a series of fair $1 bets, starting with $50, and continue to play
    until she either goes broke or has $250. What are the chances that she will go
    home with $250, and how many bets might she expect to make before winning or losing?
    [Gambler.java](Gambler.java.html) is a simulation that can help answer these questions.
    It takes three command-line arguments, the initial stake ($50), the goal amount
    ($250), and the number of times we want to simulate the game.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Prime factorization.* [Factors.java](Factors.java.html) takes an integer command-line
    argument `n` and prints its prime factorization. In contrast to many of the other
    programs that we have seen (which we could do in a few minutes with a calculator
    or pencil and paper), this computation would not be feasible without a computer.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other conditional and loop constructs.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To be complete, we consider four more Java constructs related to conditionals
    and loops. They are used much less frequently than the `if`, `while`, and `for`
    statements that we've been working with, but it is worthwhile to be aware of them.
  prefs: []
  type: TYPE_NORMAL
- en: '*Break statements.* In some situations, we want to immediate exit a loop without
    letting it run to completion. Java provides the `break` statement for this purpose.
    [Prime.java](Prime.java.html) takes an integer command-line argument `n` and prints
    `true` if `n` is prime, and `false` otherwise. There are two different ways to
    leave this loop: either the `break` statement is executed (because `n` is not
    prime) or the loop-continuation condition is not satisfied (because `n` is prime).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that the `break` statement does not apply to `if` or `if-else` statements.
    In a [famous programming bug](http://users.csc.calpoly.edu/~jdalbey/SWE/Papers/att_collapse.html),
    the U.S. telephone network crashed because a programmer intended to use a `break`
    statement to exit a complicated `if` statement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Continue statements.* Java also provides a way to skip to the next iteration
    of a loop: the `continue` statement. When a `continue` is executed within the
    body of a `for` loopy, the flow of control transfers directly to the increment
    statement for the next iteration of the loop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Switch statements.* The `if` and `if-else` statements allow one or two alternatives.
    Sometimes, a computation naturally suggests more than two mutually exclusive alternatives.
    Java provides the `switch` statement for this purpose. [NameOfDay.java](NameOfDay.java.html)
    takes an integer between 0 and 6 as a command-line argument and uses a `switch`
    statement to print the corresponding name of the day (Sunday to Saturday).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Do–while loops.* A `do-while` loop is almost the same as a `while` loop except
    that the loop-continuation condition is omitted the first time through the loop.
    [RandomPointInCircle.java](RandomPointInCircle.java.html) sets `x` and `y` so
    that (`x`, `y`) is randomly distributed inside the circle centered at (0, 0) with
    radius 1.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![do-while loop](../Images/27b707bf5b6f2852b3e09a22ebe3c94d.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: With `Math.random()` we get points that are randomly distributed in the 2-by-2
    square center at (0, 0). We just generate points in this region until we find
    one that lies inside the unit disk. We always want to generate at least one point
    so a `do-while` loop is most appropriate. We must declare `x` and `y` outside
    the loop since we will want to access their values after the loop terminates.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We don't use the following two flow control statements in this textbook, but
    include them here for completeness.
  prefs: []
  type: TYPE_NORMAL
- en: '*Conditional operator.* The conditional operator `?:` is a ternary operator
    (three operands) that enables you to embed a conditional within an expression.
    The three operands are separated by the `?` and `:` symbols. If the first operand
    (a boolean expression) is `true`, the result has the value of the second expression;
    otherwise it has the value of the third expression.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Labeled break and continue statements.* The `break` and `continue` statements
    apply to the innermost `for` or `while` loop. Sometimes we want to jump out of
    several levels of nested loops. Java provides the labeled break and labeled continue
    statements to accomplish this. Here is an [example](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/branch.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a program [AllEqual.java](AllEqual.java.html) that takes three integer
    command-line arguments and prints `equal` if all three are equal, and `not equal`
    otherwise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program [RollLoadedDie.java](RollLoadedDie.java.html) that prints the
    result of rolling a loaded die such that the probability of getting a 1, 2, 3,
    4, or 5 is 1/8 and the probability of getting a 6 is 3/8.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Rewrite [TenHellos.java](TenHellos.java.html) to make a program [Hellos.java](Hellos.java.html)
    that takes the number of lines to print as a command-line argument. You may assume
    that the argument is less than 1000. Hint: consider using `i % 10` and `i % 100`
    to determine whether to use "st", "nd", "rd", or "th" for printing the `i`th Hello.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write a program [FivePerLine.java](FivePerLine.java.html) that, using one `for`
    loop and one `if` statement, prints the integers from 1000 to 2000 with five integers
    per line. *Hint*: use the `%` operator.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program [FunctionGrowth.java](FunctionGrowth.java.html) that prints
    a table of the values of *ln n*, *n*, *n ln n*, *n²*, *n³*, and *2^n* for *n*
    = 16, 32, 64, ..., 2048. Use tabs (`'\t'` characters) to line up columns.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the value of `m` and `n` after executing the [following code](DigitReverser.java.html)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What does the [following code](Fibonacci.java.html) print out?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Unlike the harmonic numbers, the sum 1/1 + 1/4 + 1/9 + 1/16 + ... + 1/n² *does*
    converge to a constant as *n* grows to infinity. (Indeed, the constant is π² /
    6, so this formula can be used to estimate the value of π.) Which of the following
    [for loops](SeriesSum.java.html) computes this sum? Assume that `n` is an `int`
    initialized to 1000000 and `sum` is a `double` initialized to 0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Modify [Binary.java](Binary.java.html) to get a program Modify `Kary.java` that
    takes a second command-line argument `K` and converts the first argument to base
    `K`. Assume the base is between 2 and 16\. For bases greater than 10, use the
    letters `A` through `F` to represent the digits 10 through 15, respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program [code fragment](IntegerToBinaryString.java.html) that puts the
    binary representation of a positive integer `n` into a `String` variable `s`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creative Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Ramanujan''s taxi.** S. Ramanujan was an Indian mathematician who became
    famous for his intuition for numbers. When the English mathematician G. H. Hardy
    came to visit him in the hospital one day, Hardy remarked that the number of his
    taxi was 1729, a rather dull number. To which Ramanujan replied, "No, Hardy! No,
    Hardy! It is a very interesting number. It is the smallest number expressible
    as the sum of two cubes in two different ways." Verify this claim by writing a
    program [Ramanujan.java](Ramanujan.java.html) that takes an integer command-line
    argument n and prints all integers less than or equal to n that can be expressed
    as the sum of two cubes in two different ways - find distinct positive integers
    *a*, *b*, *c*, and *d* such that *a³ + b³ = c³ + d³*. Use four nested for loops.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now, the license plate 87539319 seems like a rather dull number. Determine why
    it's not.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Checksums.** The International Standard Book Number ([ISBN](http://mathworld.wolfram.com/ISBN.html))
    is a 10 digit code that uniquely specifies a book. The rightmost digit is a *checksum*
    digit which can be uniquely determined from the other 9 digits from the condition
    that *d[1] + 2d[2] + 3d[3] + ... + 10d[10]* must be a multiple of 11 (here *d[i]*
    denotes the ith digit from the right). The checksum digit *d[1]* can be any value
    from 0 to 10: the ISBN convention is to use the value X to denote 10. *Example*:
    the checksum digit corresponding to 020131452 is 5 since is the only value of
    *d[1]* between 0 and and 10 for which *d[1] + 2*2 + 3*5 + 4*4 + 5*1 + 6*3 + 7*1
    + 8*0 + 9*2 + 10*0* is a multiple of 11. Write a program [ISBN.java](ISBN.java.html)
    that takes a 9-digit integer as a command-line argument, computes the checksum,
    and prints the 10-digit ISBN number. It''s ok if you don''t print any leading
    0s.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Exponential function.** Assume that `x` is a positive variable of type `double`.
    Write a program [Exp.java](Exp.java.html) that computes e^x using the Taylor series
    expansion'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: $$ e^ x = 1 + x + \frac{x^2}{2!} + \frac{x^3}{3!} + \frac{x^4}{4!} + \ldots
    $$
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Trigonometric functions.** Write two programs [Sin.java](Sin.java.html) and
    `Cos.java` that compute *sin x* and *cos x* using the Taylor series expansions'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: $$ \sin x = x - \frac{x^3}{3!} + \frac{x^5}{5!} - \frac{x^7}{7!} + \ldots $$
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: $$ \cos x = 1 - \frac{x^2}{2!} + \frac{x^4}{4!} - \frac{x^6}{6!} + \ldots $$
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Game simulation.** In the game show *Let''s Make a Deal*, a contestant is
    presented with three doors. Behind one door is a valuable prize, behind the other
    two are gag gifts. After the contestant chooses a door, the host opens up one
    of the other two doors (never revealing the prize, of course). The contestant
    is then given the opportunity to switch to the other unopened door. Should the
    contestant do so? Intuitively, it might seem that the contestant''s initial choice
    door and the other unopened door are equally likely to contain the prize, so there
    would be no incentive to switch. Write a program [MonteHall.java](MonteHall.java.html)
    to test this intuition by simulation. Your program should take an integer command-line
    argument *n*, play the game *n* times using each of the two strategies (switch
    or don''t switch) and print the chance of success for each strategy. Or you can
    [play the game here](http://www.stat.sc.edu/~west/javahtml/LetsMakeaDeal.html).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Euler''s sum-of-powers conjecture.** In 1769 Leonhard Euler formulated a
    generalized version of Fermat''s Last Theorem, conjecturing that at least *n*
    *n*th powers are needed to obtain a sum that is itself an *n*th power, for *n*
    > 2. Write a program [Euler.java](Euler.java.html) to disprove Euler''s conjecture
    (which stood until 1967), using a quintuply nested loop to find four positive
    integers whose 5th power sums to the 5th power of another positive integer. That
    is, find *a*, *b*, *c*, *d*, and *e* such that *a*⁵ + *b*⁵ + *c*⁵ + *d*⁵ = *e*⁵.
    Use the `long` data type.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Web Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a program [RollDie.java](RollDie.java.html) that generates the result
    of rolling a fair six-sided die (an integer between 1 and 6).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program that takes three integer command-line arguments a, b, and c
    and print the number of distinct values (1, 2, or 3) among a, b, and c.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program that takes five integer command-line arguments and prints the
    *median* (the third largest one).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (hard) Now, try to compute the median of 5 elements such that when executed,
    it never makes more than 6 total comparisons.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How can I create in an infinite loop with a for loop?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*: `for(;;)` is the same as `while(true)`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What's wrong with the following loop?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The while loop condition uses `=` instead of `==` so it is an assignment statement
    (which makes `done` always `false` and the body of the loop will never be executed).
    It's better to style to avoid using `==`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What's wrong with the following loop that is intended to compute the sum of
    the integers 1 through 100?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The variable `sum` should be defined outside the loop. By defining it inside
    the loop, a new variable `sum` is initialized to 0 each time through the loop;
    also it is not even accessible outside the loop.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Write a program [Hurricane.java](Hurricane.java.html) that that takes the wind
    speed (in miles per hour) as an integer command-line argument and prints whether
    it qualifies as a hurricane, and if so, whether it is a Category 1, 2, 3, 4, or
    5 hurricane. Below is a table of the wind speeds according to the [Saffir-Simpson
    scale](http://www.marinewaypoints.com/marine/wind.shtml).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| Category | Wind Speed (mph) |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 1 | 74 - 95 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 2 | 96 - 110 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 3 | 111 - 130 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 4 | 131 - 155 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| 5 | 155 and above |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: What is wrong with the following code fragment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: It uses the assignment operator `=` instead of the equality operator
    `==`. A better solution is to write `if (isPositive)`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Change/add one character so that the following program prints 20 xs. There are
    two different solutions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: Replace the i < n condition with -i < n. Replace the i-- with n--.
    ( In C, there is a third: replace the < with a +.)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What does the following code fragment do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: always prints `positive` regardless of the value of `x` because
    of the extra semicolon after the `if` statement.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**RGB to HSB converter.** Write a program `RGBtoHSV.java` that takes an RGB
    color (three integers between 0 and 255) and transforms it to an [HSB color](http://en.wikipedia.org/wiki/HSV_color_space)
    (three different integers between 0 and 255). Write a program `HSVtoRGB.java`
    that applies the inverse transformation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Boys and girls.** A couple beginning a family decides to keep having children
    until they have at least one of either sex. Estimate the average number of children
    they will have via simulation. Also estimate the most common outcome (record the
    frequency counts for 2, 3, and 4 children, and also for 5 and above). Assume that
    the probability p of having a boy or girl is 1/2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the following program do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: Prints all of the powers of 2 less than or equal to n.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Boys and girls.** Repeat the previous question, but assume the couple keeps
    having children until they have another child which is of the same sex as the
    first child. How does your answer change if p is different from 1/2?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Surprisingly, the average number of children is 2 if p = 0 or 1, and 3 for
    all other values of p. But the most likely value is 2 for all values of p.*'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Given two positive integers `a` and `b`, what result does the following code
    fragment leave in `c`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: a * b.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Write a program using a loop and four conditionals to print
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What does the following program print?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Alice tosses a fair coin until she sees two consecutive heads. Bob tosses another
    fair coin until he sees a head followed by a tail. Write a program to estimate
    the probability that Alice will make fewer tosses than Bob? *Solution*: [39/121](http://math.smsu.edu/~les/Adv51.html).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rewrite [DayOfWeek.java](../12types/DayOfWeek.java.html) from Exercise 1.2.29
    so that it prints the day of the week as Sunday, Monday, and so forth instead
    of an integer between 0 and 6\. Use a `switch` statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Number-to-English.** Write a program to read in a command line integer between
    -999,999,999 and 999,999,999 and print the English equivalent. Here is an exhaustive
    list of words that your program should use: negative, zero, one, two, three, four,
    five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen,
    sixteen, seventeen, eighteen, nineteen, twenty, thirty, forty, fifty, sixty, seventy,
    eighty, ninety, hundred, thousand, million . Don''t use hundred, when you can
    use thousand, e.g., use one thousand five hundred instead of fifteen hundred.
    [Reference](http://acm.pku.edu.cn/JudgeOnline/showproblem?problem_id=2121).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Gymnastics judging.** A gymnast''s score is determined by a panel of 6 judges
    who each decide a score between 0.0 and 10.0\. The final score is determined by
    discarding the high and low scores, and averaging the remaining 4. Write a program
    `GymnasticsScorer.java` that takes 6 real command line inputs representing the
    6 scores and prints their average, after throwing out the high and low scores.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Quarterback rating.** To compare NFL quarterbacks, the NFL devised a the
    [quarterback rating](http://www.mathnotes.com/aw_quarterback.html) formula based
    on the quarterbacks number of completed passes (A), pass attempts (B), passing
    yards (C), touchdown passes (D), and interception (E) as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Completion ratio: W = 250/3 * ((A / B) - 0.3).'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Yards per pass: X = 25/6 * ((C / B) - 3).'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Touchdown ratio: Y = 1000/3 * (D / B)'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Interception ratio: Z = 1250/3 * (0.095 - (E / B))The *quarterback rating*
    is computed by summing up the above four quantities, but rounding up or down each
    value so that it is at least 0 and and at most 475/12. Write a program `QuarterbackRating.java`
    that takes five command line inputs A, B, C, D, and E, and prints the quarterback
    rating. Use your program to compute Steve Young''s 1994 record-setting season
    (112.8) in which he completed 324 of 461 passes for 3,969 yards, and threw 35
    touchdowns and 10 interceptions. As of 2014, the all-time single-season record
    is 122.5 by Aaron Rodgers in 2011.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Decimal expansion of rational numbers.** Given two integers p and q, the
    decimal expansion of p/q has an infinitely repeating cycle. For example, 1/33
    = 0.03030303.... We use the notation 0.(03) to denote that 03 repeats indefinitely.
    As another example, 8639/70000 = 0.1234(142857). Write a program `DecimalExpansion.java`
    that reads in two command line integers p and q and prints the decimal expansion
    of p/q using the above notation. *Hint*: use Floyd''s rule.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Friday the 13th.** What is the maximum number of consecutive days in which
    no Friday the 13th occurs? *Hint*: The Gregorian calendar repeats itself every
    400 years (146097 days) so you only need to worry about a 400 year interval.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*: 426 (e.g., from 8/13/1999 to 10/13/2000).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**January 1.** Is January 1 more likely to fall on a Saturday or Sunday? Write
    a program to determine the number of times each occurs in a 400 year interval.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution:* Sunday (58 times) is more likely than Saturday (56 times).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What do the following two code fragments do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Determine what value gets printed out without using a computer. Choose the correct
    answer from 0, 100, 101, 517, or 1000.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Rewrite [CarLoan.java](../22types/CarLoan.java.html) from Creative Exercise
    XYZ so that it properly handles an interest rate of 0% and avoids dividing by
    0.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write the shortest Java program you can that takes an integer command-line argument
    n and prints `true` if (1 + 2 + ... + n) ² is equal to (1³ + 2³ + ... + n³).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*: Always print `true`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Modify [Sqrt.java](Sqrt.java.html) so that it reports an error if the user enters
    a negative number and works properly if the user enters zero.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What happens if we initialize `t` to `-x` instead of `x` in program [Sqrt.java](Sqrt.java.html)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Sample standard deviation of uniform distribution.** Modify Exercise 8 so
    that it prints the sample standard deviation in addition to the average.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Sample standard deviation of normal distribution.** that takes an integer
    N as a command-line argument and uses Web Exercise 1 from [Section 1.2](../12types)
    to print N standard normal random variables, and their average value, and sample
    standard deviation.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Loaded dice.** [Stephen Rudich] Suppose you have three, three sided dice.
    A: {2, 6, 7}, B: { 1, 5, 9}, and C: {3, 4, 8}. Two players roll a die and the
    one with the highest value wins. Which die would you choose? *Solution*: A beats
    B with probability 5/9, B beats C with probability 5/9 and C beats A with probability
    5/9. Be sure to choose second!'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Thue–Morse sequence.** Write a program [ThueMorse.java](ThueMorse.java.html)
    that reads in a command line integer n and prints the [Thue–Morse sequence](http://mathworld.wolfram.com/Thue-MorseSequence.html)
    of order n. The first few strings are 0, 01, 0110, 01101001\. Each successive
    string is obtained by flipping all of the bits of the previous string and concatenating
    the result to the end of the previous string. The sequence has many amazing properties.
    For example, it is a binary sequence that is *cube-free*: it does not contain
    000, 111, 010101, or `sss` where `s` is any string. It is *self-similar*: if you
    delete every other bit, you get another Thue–Morse sequence. It arises in diverse
    areas of mathematics as well as chess, graphic design, [weaving patterns](http://www.cs.arizona.edu/patterns/weaving/webdocs/gre_mt.pdf),
    and music composition.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Program [Binary.java](Binary.java.html) prints the binary representation of
    a decimal number n by casting out powers of 2. Write an alternate version Program
    [Binary2.java](Binary2.java.html) that is based on the following method: Write
    1 if n is odd, 0 if n is even. Divide n by 2, throwing away the remainder. Repeat
    until n = 0 and read the answer backwards. Use `%` to determine whether n is even,
    and use string concatenation to form the answer in reverse order.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the following code fragment do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: The number of bits in the binary representation of a natural number
    n. We use a `do-while` loop so that code output 1 if n = 0.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Write a program `NPerLine.java` that takes an integer command-line argument
    `n` and prints the integers from 10 to 99 with `n` integers per line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify `NPerLine.java` so that it prints the integers from 1 to 1000 with `n`
    integers per line. Make the integers line up by printing the right number of spaces
    before an integer (e.g., three for 1-9, two for 10-99, and one for 100-999).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Suppose a, b, and c are random number uniformly distributed between 0 and 1\.
    What is the probability that a, b, and c form the side length of some triangle?
    *Hint*: they will form a triangle if and only if the sum of every two values is
    larger than the third.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Repeat the previous question, but calculate the probability that the resulting
    triangle is obtuse, given that the three numbers for a triangle. *Hint*: the three
    lengths will form an obtuse triangle if and only if (i) the sum of every two values
    is larger than the third and (ii) the sum of the squares of every two side lengths
    is greater than or equal to the square of the third.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Answer](http://math.smsu.edu/~les/Adv28.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What is the value of `s` after executing the [following code](DigitReverser.java.html)?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What is the value of i after the following [confusing code](Confusion.java.html)
    is executed?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Moral: don''t write code like this.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Formatted ISBN number.** Write a program [ISBN2.java](ISBN2.java.html) that
    reads in a 9 digit integer from a command-line argument, computes the check digit,
    and prints the fully formatted ISBN number, e.g, 0-201-31452-5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**UPC codes.** The Universal Product Code ([UPC](http://mathworld.wolfram.com/UPC.html))
    is a 12 digit code that uniquely specifies a product. The least significant digit
    d[1](rightmost one) is a check digit which is the uniquely determined by making
    the following expression a multiple of 10:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: (d[1] + d[3] + d[5] + d[7] + d[9] + d[11]) + 3 (d[2] + d[4] + d[6] + d[8] +
    d[10] + d[12])
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: As an example, the check digit corresponding to 0-48500-00102 (Tropicana Pure
    Premium Orange Juice) is 8 since
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: (8 + 0 + 0 + 0 + 5 + 4) + 3 (2 + 1 + 0 + 0 + 8 + 0) = 50
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'and 50 is a multiple of 10. Write a program that reads in a 11 digit integer
    from a command line parameter, computes the check digit, and prints the the full
    UPC. *Hint*: use a variable of type `long` to store the 11 digit number.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Write a program that reads in the wind speed (in knots) as a command line argument
    and prints its force according to the [Beaufort scale](http://boating.ncf.ca/beaufort.html).
    Use a `switch` statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Making change.** Write a program that reads in a command line integer N (number
    of pennies) and prints the best way (fewest number of coins) to make change using
    US coins (quarters, dimes, nickels, and pennies only). For example, if N = 73
    then print'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Hint*: use the greedy algorithm. That is, dispense as many quarters as possible,
    then dimes, then nickels, and finally pennies.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Write a program [Triangle.java](Triangle.java.html) that takes a command-line
    argument N and prints an N-by-N triangular pattern like the one below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write a program [Ex.java](Ex.java.html) that takes a command-line argument N
    and prints a (2N + 1)-by-(2N + 1) ex like the one below. Use two `for` loops and
    one `if-else` statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write a program [BowTie.java](BowTie.java.html) that takes a command-line argument
    N and prints a (2N + 1)-by-(2N + 1) bowtie like the one below. Use two `for` loops
    and one `if-else` statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write a program [Diamond.java](Diamond.java.html) that takes a command-line
    argument N and prints a (2N + 1)-by-(2N + 1) diamond like the one below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write a program [Heart.java](Heart.java.html) that takes a command-line argument
    N and prints a heart.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the program [Circle.java](Circle.java.html) print out when N = 5?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Seasons.** Write a program `Season.java` that takes two command line integers
    M and D and prints the season corresponding to month M (1 = January, 12 = December)
    and day D in the northern hemisphere. Use the following table'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| SEASON | FROM | TO |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Spring | March 21 | June 20 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Summer | June 21 | September 22 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Fall | September 23 | December 21 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Winter | December 21 | March 20 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '**Zodiac signs.** Write a program `Zodiac.java` that takes two command line
    integers M and D and prints the Zodiac sign corresponding to month M (1 = January,
    12 = December) and day D. Use the following table'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| SIGN | FROM | TO |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Capricorn | December 22 | January 19 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Aquarius | January 20 | February 17 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Pisces | February 18 | March 19 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Aries | March 20 | April 19 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Taurus | April 20 | May 20 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Gemini | May 21 | June 20 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Cancer | June 21 | July 22 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Leo | July 23 | August 22 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Virgo | August 23 | September 22 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Libra | September 23 | October 22 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Scorpio | October 23 | November 21 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Sagittarius | November 22 | December 21 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '**Muay Thai kickboxing.** Write a program that reads in the weight of a Muay
    Thai kickboxer (in pounds) as a command-line argument and prints their weight
    class. Use a `switch` statement.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| CLASS | FROM | TO |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Flyweight | 0 | 112 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Super flyweight | 112 | 115 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Bantamweight | 115 | 118 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Super bantamweight | 118 | 122 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Featherweight | 122 | 126 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Super featherweight | 126 | 130 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Lightweight | 130 | 135 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Super lightweight | 135 | 140 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Welterweight | 140 | 147 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Super welterweight | 147 | 154 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Middleweight | 154 | 160 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Super middleweight | 160 | 167 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Light heavyweight | 167 | 175 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Super light heavyweight | 175 | 183 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Cruiserweight | 183 | 190 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Heavyweight | 190 | 220 |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '| Super heavyweight | 220 | - |'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
- en: '**Euler''s sum of powers conjecture.** In 1769 Euler generalized Fermat''s
    Last Theorem and conjectured that it is impossible to find three 4th powers whose
    sum is a 4th power, or four 5th powers whose sum is a 5th power, etc. The conjecture
    was disproved in 1966 by exhaustive computer search. Disprove the conjecture by
    finding positive integers a, b, c, d, and e such that a⁵ + b⁵ + c⁵ + d⁵= e⁵. Write
    a program [Euler.java](Euler.java.html) that reads in a command line parameter
    N and exhaustively searches for all such solutions with a, b, c, d, and e less
    than or equal to N. No counterexamples are known for powers greater than 5, but
    you can join [EulerNet](http://euler.free.fr/index.htm), a distributed computing
    effort to find a counterexample for sixth powers.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Blackjack.** Write a program `Blackjack.java` that takes three command line
    integers x, y, and z representing your two blackjack cards x and y, and the dealers
    face-up card z, and prints the "standard strategy" for a 6 card deck in Atlantic
    city. Assume that x, y, and z are integers between 1 and 10, representing an ace
    through a face card. Report whether the player should hit, stand, or split according
    to these [strategy tables](http://www.blackjackinfo.com/cgi-bin/bjbse.cgi?game=ac6).
    (When you learn about arrays, you will encounter an alternate strategy that does
    not involve as many if-else statements).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Blackjack with doubling.** Modify the previous exercise to allow *doubling*.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Projectile motion.** The following equation gives the trajectory of a ballistic
    missile as a function of the initial angle theta and windspeed: xxxx. Write a
    java program to print the (x, y) position of the missile at each time step t.
    Use trial and error to determine at what angle you should aim the missile if you
    hope to incinerate a target located 100 miles due east of your current location
    and at the same elevation. Assume the windspeed is 20 mph due east.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**World series.** The baseball world series is a best of 7 competition, where
    the first team to win four games wins the World Series. Suppose the stronger team
    has probability p > 1/2 of winning each game. Write a program to estimate the
    chance that the weaker teams wins the World Series and to estimate how many games
    on average it will take.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consider the equation (9/4)^x = x^(9/4). One solution is 9/4\. Can you find
    another one using Newton's method?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Sorting networks.** Write a program [Sort3.java](Sort3.java.html) with three
    `if` statements (and no loops) that reads in three integers *a*, *b*, and *c*
    from the command line and prints them out in ascending order.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Oblivious sorting network.** Convince yourself that the following code fragment
    rearranges the integers stored in the variables A, B, C, and D so that A <= B
    <= C <= D.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Devise a sequence of statements that would sort 5 integers. How many `if` statements
    does your program use?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Optimal oblivious sorting networks.** Create a program that sorts four integers
    using only 5 `if` statements, and one that sorts five integers using only 9 `if`
    statements of the type above? Oblivious sorting networks are useful for implementing
    sorting algorithms in hardware. How can you check that your program works for
    all inputs?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*: [Sort4.java](Sort4.java.html) sorts 4 elements using 5 compare-exchanges.
    [Sort5.java](Sort5.java.html) sorts 5 elements using 9 compare-exchanges.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The *0-1 principle* asserts that you can verify the correctness of a (deterministic)
    sorting algorithm by checking whether it correctly sorts an input that is a sequence
    of 0s and 1s. Thus, to check that `Sort5.java` works, you only need to test it
    on the 2^5 = 32 possible inputs of 0s and 1s.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Optimal oblivious sorting (challenging).** Find an optimal sorting network
    for 6, 7, and 8 inputs, using 12, 16, and 19 `if` statements of the form in the
    previous problem, respectively.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*: [Sort6.java](Sort6.java.html) is the solution for sorting 6 elements.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Optimal non-oblivious sorting.** Write a program that sorts 5 inputs using
    only 7 comparisons. *Hint*: First compare the first two numbers, the second two
    numbers, and the larger of the two groups, and label them so that a < b < d and
    c < d. Second, insert the remaining element e into its proper place in the chain
    a < b < d by first comparing against b, then either a or d depending on the outcome.
    Third, insert c into the proper place in the chain involving a, b, d, and e in
    the same manner that you inserted e (with the knowledge that c < d). This uses
    3 (first step) + 2 (second step) + 2 (third step) = 7 comparisons. This method
    was first discovered by H. B. Demuth in 1956.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Weather balloon.** (Etter and Ingber, p. 123) Suppose that h(t) = 0.12t⁴
    + 12t³ - 380t² + 4100t + 220 represents the height of a weather balloon at time
    t (measured in hours) for the first 48 hours after its launch. Create a table
    of the height at time t for t = 0 to 48. What is its maximum height? *Solution*:
    t = 5.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Will the following code fragment compile? If so, what will it do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: It uses the assignment operator `=` instead of the equality operator
    `==` in the conditional. In Java, the result of this statement is an integer,
    but the compiler expects a boolean. As a result, the program will not compile.
    In some languages (notably C and C++), this code fragment will set the variable
    a to 18 and print `equal` without an error.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Gotcha 1.** What does the following code fragment do?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: it prints `yes`. Note that the conditional uses = instead of ==.
    This means that `a` is assigned the value `true` As a result, the conditional
    expression evaluates to `true`. Java is not immune to the = vs. == error described
    in the previous exercise. For this reason, it is much better style to use `if
    (a)` or `if (!a)` when testing booleans.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Gotcha 2.** What does the following code fragment do?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: Always prints 13 since there is a spurious semicolon after the
    `if` statement. Thus, the assignment statement `a = 13;` will be executed even
    though `(x <= y)` It is legal (but uncommon) to have a block that does not belong
    to a conditional statement, loop, or method.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Gotcha 3.** What does the following code fragment do?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: It goes into an infinite loop printing `0`. The compound assignment
    statement `x += 0.5` is equivalent to `x = (int) (x + 0.5)`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What does the following code fragment do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It does not compile because the compile cannot guarantee that `rate` is initialized.
    Use `if-else` instead.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Application of Newton''s method.** Write a program `BohrRadius.java` that
    finds the radii where the probability of finding the electron in the 4s excited
    state of hydrogen is zero. The probability is given by: *(1 - 3r/4 + r²/8 - r³/192)²
    e^(-r/2)*, where *r* is the radius in units of the Bohr radius (0.529173E-8 cm).
    Use Newton''s method. By starting Newton''s method at different values of *r*,
    you can discover all three roots. *Hint*: use initial values of r= 0, 5, and 13.
    *Challenge*: explain what happens if you use an initial value of r = 4 or 12.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Pepys problem.** In 1693, Samuel Pepys asked Isaac Newton which was more
    likely: getting at least one 1 when rolling a fair die 6 times or getting at least
    two 1''s when rolling a fair die 12 times. Write a program [Pepys.java](Pepys.java.html)
    that uses simulation to determine the correct answer.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the value of the variable s after running the following loop when N
    = 1, 2, 3, 4, and 5.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: [Palindrome.java](Palindrome.java.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Body mass index.** The [body mass index](http://en.wikipedia.org/wiki/Body_mass_index)
    (BMI) is the ratio of the weight of a person (in kilograms) to the square of the
    height (in meters). Write a program `BMI.java` that takes two command-line arguments,
    `weight` and `height`, computes the BMI, and prints the corresponding BMI category:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Starvation: less than 15'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Anorexic: less than 17.5'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Underweight: less than 18.5'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ideal: greater than or equal to 18.5 but less than 25'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Overweight: greater than or equal to 25 but less than 30'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Obese: greater than or equal to 30 but less than 40'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Morbidly Obese: greater than or equal to 40'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Reynolds number.** The *Reynolds number* is the ratio if inertial forces
    to viscous forces and is an important quantity in fluid dynamics. Write a program
    that takes in 4 command-line arguments, the diameter d, the velocity v, the density
    rho, and the viscosity mu, and prints the Reynold''s number d * v * rho / mu (assuming
    all arguments are in SI units). If the Reynold''s number is less than 2000, print
    `laminar flow`, if it''s between 2000 and 4000, print `transient flow`, and if
    it''s more than 4000, print `turbulent flow`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Wind chill revisited.** The wind chill formula from Exercise 1.2.14 is only
    valid if the wind speed is above 3MPH and below 110MPH and the temperature is
    below 50 degrees Fahrenheit and above -50 degrees. Modify your solution to print
    an error message if the user types in a value outside the allowable range.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Point on a sphere.** Write a program to print the (x, y, z) coordinates of
    a random point on the surface of a sphere. Use [Marsaglia'' method](http://mathworld.wolfram.com/SpherePointPicking.html):
    pick a random point (a, b) in the unit circle as in the `do-while` example. Then,
    set x = 2a sqrt(1 - a^2 - b^2), y = 2b sqrt(1 - a^2 - b^2), z = 1 - 2(a^2 + b^2).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Powers of k.** Write a program `PowersOfK.java` that takes an integer `K`
    as command-line argument and prints all the positive powers of `K` in the Java
    `long` data type. *Note*: the constant `Long.MAX_VALUE` is the value of the largest
    integer in `long`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Square root, revisited.** Why not use the loop-continuation condition `(Math.abs(t*t
    - c) > EPSILON)` in [Sqrt.java](Sqrt.java.html) instead of `Math.abs(t - c/t)
    > t*EPSILON)`?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*: Surprisingly, it can lead to inaccurate results or worse. For example,
    if you supply [SqrtBug.java](SqrtBug.java.html) with the command-line argument
    `1e-50`, you get `1e-50` as the answer (instead of `1e-25`); if you supply `16664444`,
    you get an infinite loop!'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What happens when you try to compile the following code fragment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: It complains that the variable x might not have been initialized
    (even though we can clearly see that x will be initialized by one of the two if
    statements). You can avoid this problem here by using if-else.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
