- en: 8.3 Operating Systems
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://introcs.cs.princeton.edu/java/83os](https://introcs.cs.princeton.edu/java/83os)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This section under major construction.
  prefs: []
  type: TYPE_NORMAL
- en: '**Memory management.** In many languages, including C and C++, the programmer
    is responsible to manage memory consumption and explicitly free it when it is
    no longer in use. "Micro-managed" memory can be more efficient if done properly,
    but it is tedious and error-prone. Automatic memory collection can be almost as
    efficient in common applications, and requires less development time.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Garbage collection.** Invented by John McCarthy in 1958 as part of LISP.
    Idea = determine which objects are reachable via references by other reachable
    objects; free up unreachable objects (garbage). Here are some common [garbage
    collection techniques](http://www.osnews.com/story.php?news_id=6864).'
  prefs: []
  type: TYPE_NORMAL
- en: '*Reference counting.* Count number of references to each object. When it hits
    zero, can free the object. Drawback - does not work for cyclic linked structures,
    requires frequent updating of count fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Mark-sweep algorithm.* Mark all objects as garbage. Scan through all reachable
    objects and mark as reachable. After scan, anything still marked as garbage can
    be eliminated. Drawback - active memory becomes fragmented, must scan every object
    in memory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Copying.* Do mark-sweep, but copy all non-garbage objects to a contiguous
    block of memory. Eliminates fragmention. Drawback - persistent objects get copied
    back-and-forth, requires twice as much memory.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Mark compact.* Copy objects to the same part of memory. Persistent objects
    are infrequently copied.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Generational.* Divide objects into several "generations" depending on how
    long they have been active. Initially objects are placed in the "youngest" generation,
    as they persist, they move to "older" generations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default [Java](http://developers.sun.com/techtopics/mobility/midp/articles/garbagecollection2/#2)
    uses a three generation garbage collector.
  prefs: []
  type: TYPE_NORMAL
- en: Creative Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
