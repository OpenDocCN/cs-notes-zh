["```\nc = Charge(x0, y0, q0)\n\n```", "```\nc1 = Charge(0.51, 0.63, 21.3)\n\n```", "```\n% more turing.txt\nTuring, Alan\n10.24\n4\n100 ADBE\n 25 GOOG\n 97 IBM\n250 MSFT\n\n```", "```\n    class Rectangle:\n\n        # Construct self with center (x, y), width w, and height h.\n        def __init__(self, x, y, w, h):\n            self._x = x\n            self._y = y\n            self._width = w;\n            self._height = h;\n\n        # Return the area of self.\n        def area(self):\n            return self._width * self._height\n\n        # Return the perimeter of self.\n        def perimeter(self):\n            ...\n\n        # Return True if self intersects other, and False otherwise.\n        def intersects(self, other):\n            ...\n\n        # Return True if other is completely inside of self, and False\n        # otherwise.\n        def contains(self, other):\n            ...\n\n        # Draw self on stddraw.\n        def draw(self):\n            ...\n\n    ```", "```\nclass Charge:\n    def __init__(self, x0, y0, q0):\n        _rx = x0  # Position\n        _ry = y0  # Position\n        _q = q0   # Charge\n...\n\n```", "```\nclass Charge:\n    def __init__(self, x0, y0, q0):\n        self._rx = x0  # Position\n        self._ry = y0  # Position\n        self._q = q0   # Charge\n...\n\n```", "```\n    a = stdarray.create1D(3)\n    a[0] = Charge(.4, .6, 50)\n    a[1] = Charge(.5, .5, -5)\n    a[2] = Charge(.6, .6, 50)\n\n    ```", "```\n    for t in range(100):\n        # Compute the picture p.\n        stddraw.clear()\n        stddraw.picture(p)\n        stddraw.show(0)\n        a[1].increaseCharge(-2.0)\n\n    ```"]