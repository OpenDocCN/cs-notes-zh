- en: 6.4   Maximum Flow
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.4   最大流
- en: 原文：[https://algs4.cs.princeton.edu/64maxflow](https://algs4.cs.princeton.edu/64maxflow)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://algs4.cs.princeton.edu/64maxflow](https://algs4.cs.princeton.edu/64maxflow)
- en: This section under major construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节正在大规模建设中。
- en: Maximum flow and minimum s-t cut.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最大流和最小s-t割。
- en: Program [FordFulkerson.java](FordFulkerson.java.html) computes the maximum flow
    and minimum s-t cut in an edge-weighted digraph in E^2 V time using the Edmonds-Karp
    shortest augment path heuristic (though, in practice, it usually runs substantially
    faster). It uses [FlowNetwork.java](FlowNetwork.java.html) and [FlowEdge.java](FlowEdge.java.html).
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[FordFulkerson.java](FordFulkerson.java.html)在E^2 V时间内使用Edmonds-Karp最短增广路径启发式方法计算带权有向图中的最大流和最小s-t割（尽管在实践中，它通常运行得更快）。它使用[FlowNetwork.java](FlowNetwork.java.html)和[FlowEdge.java](FlowEdge.java.html)。
- en: Percolation.
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渗透。
- en: Max flow in 2D (always choose leftmost path) and 3D.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 2D（始终选择最左边的路径）和3D中的最大流。
- en: Applications to computer graphics.
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用于计算机图形学。
- en: '[Yuri Boykov](http://www.csd.uwo.ca/~yuri/) has papers on maxflow applications
    to segmentation in computer vision. [maxflow data](http://vision.csd.uwo.ca/maxflow-data).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '[Yuri Boykov](http://www.csd.uwo.ca/~yuri/)在计算机视觉中的分割应用中有关于最大流的论文。[maxflow
    data](http://vision.csd.uwo.ca/maxflow-data)。'
- en: Bipartite matching.
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二部图匹配。
- en: Exercises
  id: totrans-10
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: '**Cycle containing two vertices.** Given an undirected graph G and two distinguished
    vertices s and t, find a cycle (not necessarily simple) containing s and t, or
    report that no such cycle exists. Your algorithm should run in linear time.'
  id: totrans-11
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**包含两个顶点的循环。**给定一个无向图G和两个特殊顶点s和t，找到包含s和t的循环（不一定是简单的），或报告不存在这样的循环。您的算法应该在线性时间内运行。'
- en: '*Answer*. The answer is yes if and only if the maximum flow from s to t is
    at least 2\. So, run two iterations of Ford-Fulkerson in the digraph with each
    edge replace by two antiparallel edges and unit capacity.'
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案*。当且仅当从s到t的最大流至少为2时，答案是肯定的。因此，在每条边都替换为两条反向边和单位容量的有向图中运行Ford-Fulkerson的两次迭代。'
- en: '**k-connected.** Given an undirected graph, determine whether two vertices
    s and t are k-connected (or equivalently whether there are k edge-disjoint paths).'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**k-连通。**给定一个无向图，确定两个顶点s和t是否k-连通（或等价地，是否存在k条边不相交的路径）。'
- en: True or false. If true provide a short proof, if false give a counterexample.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假。如果为真，请提供简短的证明，如果为假，请给出一个反例。
- en: In any max flow, there is no directed cycle on which every edge carries positive
    flow.
  id: totrans-15
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在任何最大流中，没有一个有正流量的有向循环。
- en: There exists a max flow for which there is no directed cycle on which every
    edge carries positive flow.
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在一种最大流，其中没有一个有正流量的有向循环。
- en: If all edge capacities are distinct, the max flow is unique.
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果所有边的容量都不同，最大流是唯一的。
- en: If all edge capacities are distinct, the min cut is unique.
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果所有边的容量都不同，最小割是唯一的。
- en: If all edge capacities are increased by an additive constant, the min cut remains
    unchanged.
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果所有边的容量增加一个加法常数，最小割保持不变。
- en: If all edge capacities are multiplied by a positive integer, the min cut remains
    unchanged.
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果所有边的容量乘以一个正整数，最小割保持不变。
- en: '**Simple cycle containing two vertices.** Given an undirected graph and two
    vertices s and t, find a simple cycle containing both s and t (or report that
    no such cycle exists).'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**包含两个顶点的简单循环。**给定一个无向图和两个顶点s和t，找到包含s和t的简单循环（或报告不存在这样的循环）。'
- en: '*Hint*: there is a directed cycle containing both s and t if and only if there
    are two (internally) vertex-disjoint paths between s and t.'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：当且仅当存在两个（内部）顶点不相交的路径时，包含s和t的有向循环才存在。'
- en: '**Vertex disjoint paths in an digraphs.** Given a digraph G and two vertices
    s and t, find the maximum number of of vertex-disjoint paths from s and t.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**有向图中的顶点不相交路径。**给定一个有向图G和两个顶点s和t，找到从s到t的最大数量的顶点不相交路径。'
- en: '*Hint*: Replace each vertex v (other than s and t) with two vertices v1 and
    v2; add an edge of capacity 1 from v1 to v2; redirect all edges pointing to v
    to point to v1; redirect all edges pointing from v to point from v2\.'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：将每个顶点v（除了s和t之外）替换为两个顶点v1和v2；从v1到v2添加容量为1的边；将所有指向v的边重定向到v1；将所有从v指向的边重定向到v2。'
- en: '**Vertex disjoint paths in an undirected graph.** Given an undirected graph
    G and two vertices s and t, find the maximum number of of vertex-disjoint paths
    between s and t.'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**无向图中的顶点不相交路径。**给定一个无向图G和两个顶点s和t，找到s和t之间的最大数量的顶点不相交路径。'
- en: '*Hint*: Replace each undirected edge v-w by two directed edges v->w and w->v.'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：将每条无向边v-w替换为两条有向边v->w和w->v。'
- en: '**Simple path containing three vertices.** Given an undirected graph and three
    vertices u, v, and w, find a simple path containing both u, v, and w (or report
    that no such path exists).'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**包含三个顶点的简单路径。**给定一个无向图和三个顶点u、v和w，找到包含u、v和w的简单路径（或报告不存在这样的路径）。'
- en: '*Hint*: there is a simple path between u and w that passes through v if and
    only if there are two (internally) vertex disjoint paths, one between v to u and
    one between v to w.'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：当且仅当存在两个（内部）顶点不相交的路径，一个从v到u，一个从v到w时，u和w之间存在一个通过v的简单路径。'
- en: '**Unique mincut.** Given an s-t flow network, determine whether the mincut
    is unique.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**唯一最小割。**给定一个s-t流网络，确定最小割是否唯一。'
- en: '*Hint*: solve s-t mincut problem in G and in G^R.'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：在G和G^R中解决s-t最小割问题。'
- en: '**Unmatchable edges in a bipartite graph.** Given a bipartite graph G, an edge
    is *unmatchable* if it does not appear in any perfect matching of G.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**二部图中的不可匹配边。**给定一个二部图G，如果边不出现在G的任何完美匹配中，则该边是*不��匹配的*。'
- en: '*Hint*: if G has no perfect matching, then all edges are unmatchable. Otherwise,
    find a perfect matching; orient all of the edges in the perfect matching in one
    direction and all of the remaining edges in the opposite direction; the unmatchable
    edges are all of the edges not in the perfect matching that have endpoints in
    different strongly-connected components of the resulting digraph.'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：如果G没有完美匹配，那么所有边都是不可匹配的。否则，找到一个完美匹配；将完美匹配中的所有边定向为一个方向，将所有剩余的边定向为相反的方向；不在完美匹配中且端点在结果有向图的不同强连通分量中的边都是不可匹配的边。'
- en: '**Mincut with fewest edges.** Given a flow network, among all mincuts, find
    one that has the fewest number of edges.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**具有最少边的最小割。** 给定一个流网络，在所有最小割中，找到一个具有最少边数的割。'
- en: '*Hint*: create a new flow network G'' that is equal to G, except that w''(e)
    = w(e) * n + 1.'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：创建一个新的流网络G''，它等于G，除了w''(e) = w(e) * n + 1。'
