["```\n    public int compareTo(String t) {\n       String s = this;\n       if (s == t) return 0;  // this line\n       int n = Math.min(s.length(), t.length());\n       for (int i = 0; i < n; i++) {\n          if      (s.charAt(i) < t.charAt(i)) return -1;\n          else if (s.charAt(i) > t.charAt(i)) return +1;\n       }\n       return s.length() - t.length();\n    }\n\n    ```", "```\n    public class Customer implements Comparable<Customer> {\n        private String name;\n        private double balance;\n\n        public int compareTo(Customer that) {\n            if (this.balance < that.balance - 0.005) return -1;\n            if (this.balance > that.balance + 0.005) return +1; \n            return 0;\n       }\n    }\n\n    ```", "```\n    R W Q O J M V A H B S G Z X N T C I E K U P D Y F L\n\n    ```", "```\n    String[] a = new String[N];\n    for (int i = 0; i < N. i++) {\n       a[i] = StdIn.readString();\n    }\n    Arrays.sort(a, String.CASE_INSENSITIVE_ORDER);\n\n    ```", "```\n    public class CaseInsensitive implements Comparator<String> {\n       public int compare(String a, String b) {\n          return a.compareToIgnoreCase(b);\n       }\n    }\n\n    ```", "```\n    public class Descending implements Comparator<String> {\n       public int compare(String a, String b) {\n          return b.compareToIgnoreCase(a);\n       }\n    }\n\n    ```", "```\n    import java.util.Arrays;\n    import java.text.Collator;\n    ...\n    Arrays.sort(words, Collator.getInstance(Locale.FRENCH));\n\n    ```"]