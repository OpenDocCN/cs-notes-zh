["```\nclass Node:\n    def __init__(self, item, next):\n        self.item = item \n        self.next = next\n\n```", "```\nthird  = Node('or', None)\nsecond = Node('be', third)\nfirst  = Node('to', second)\n\n```", "```\n( 1 + ( ( 2 + 3 ) * ( 4 * 5 ) ) )\n\n```", "```\n( 1 ( ( 2 3 + ) ( 4 5 * ) * ) + )\n\n```", "```\n1 2 3 + 4 5 * * +\n\n```", "```\noldfirst = _Node(item, next)\noldfirst = first\n\n```", "```\nfrom arraystack  import Stack as ArrayStack\nfrom linkedstack import Stack as LinkedStack\n...\nstack1 = ArrayStack()\nstack2 = LinkedStack()\n\n```", "```\n    it was - the best - of times - - - it was - the - -\n\n    ```", "```\n    it was - the best - of times - - - it was - the - -\n\n    ```", "```\n    stack = Stack()\n    while n > 0:\n        stack.push(n % 2)\n        n /= 2\n    while not stack.isEmpty():\n        stdio.write(stack.pop())\n    stdio.writeln()\n\n    ```", "```\n    stack = Stack()\n    while not queue.isEmpty(): stack.push(queue.dequeue())\n    while not stack.isEmpty(): queue.enqueue(stack.pop())\n\n    ```", "```\n    1 + 2 ) * 3 - 4 ) * 5 - 6 ) ) )\n\n    ```", "```\n    ( ( 1 + 2 ) * ( ( 3 - 4 ) * ( 5 - 6 ) )\n\n    ```", "```\n    class Queue:\n        def __init__(self):      self._a = []\n        def isEmpty(self):       return len(self._a) == 0\n        def __len__(self):       return len(self._a)\n        def enqueue(self, item): self._a += [item]\n        def dequeue(self):       return self._a.pop(0)\n\n    ```", "```\n    class Queue:\n        def __init__(self):      self._a = []\n        def isEmpty(self):       return len(self._a) == 0\n        def __len__(self):       return len(self._a)\n        def enqueue(self, item): self._a.insert(0, item)\n        def dequeue(self):       return self._a.pop()\n\n    ```", "```\n    x.next = x.next.next\n\n    ```", "```\n    t.next = x.next\n    x.next = t\n\n    ```", "```\n    x.next = t\n    t.next = x.next\n\n    ```", "```\n    def reverse(first):    \n        reverse = None\n        while first is not None:\n            second = first.next\n            first.next = reverse\n            reverse = first\n            first = second\n        return reverse\n\n    ```", "```\n    def reverse(first):\n        if first is None:\n            return None\n        if first.next is None:\n            return first\n        second = first.next\n        rest = reverse(second)\n        second.next = first\n        first.next = None\n        return rest\n\n    ```", "```\n    % python josephus.py 7 2\n    1 3 5 0 4 2 6\n\n    ```", "```\n    stack2 = stack1.copy()\n\n    ```", "```\n    queue2 = queue1.copy()\n\n    ```", "```\n    class Stack:\n        def __init__(self):\n            self._a = [None]\n            self._n = 0\n        def isEmpty(self):\n            return self._n == 0\n        def __len__(self):\n            return self._n\n        def _resize(self, capacity):\n            temp = stdarray.create1D(capacity)\n            for i in range(self._n):\n                temp[i] = self._a[i]\n            self._a = temp\n        def push(self, item):\n            if self._n == len(self._a):\n                self._resize(2 * self._n)\n            self._a[self._n] = item\n            self._n += 1\n        def pop(self):\n            self._n -= 1\n            item = self._a[self._n]\n            self._a[self._n] = None\n            if (self._n > 0) and (self._n == len(self._a) // 4):\n                self._resize(self._n // 2)\n            return item\n\n    ```"]