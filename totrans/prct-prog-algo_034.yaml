- en: 6.2   TOY Machine
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.2   TOY 机器
- en: 原文：[https://introcs.cs.princeton.edu/java/62toy](https://introcs.cs.princeton.edu/java/62toy)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/java/62toy](https://introcs.cs.princeton.edu/java/62toy)
- en: This section under construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节正在建设中。
- en: TOY is an imaginary machine (created at Princeton) that is very similar to ancient
    computers. We study it today because it shares the essential characteristics of
    modern day microprocessors. Also, it demonstrates that simple computational models
    can perform useful and nontrivial calculations. In this document we describe how
    to use and program the TOY machine. In [Chapter 7](../70circuits), we describe
    how to build such a machine in hardware.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: TOY 是一个虚构的机器（在普林斯顿创建），与古代计算机非常相似。我们今天研究它是因为它具有现代微处理器的基本特征。此外，它展示了简单的计算模型可以执行有用且非平凡的计算。在本文档中，我们描述如何使用和编程
    TOY 机器。在 [第 7 章](../70circuits) 中，我们描述如何在硬件中构建这样一台机器。
- en: '**Inside the TOY machine.** The TOY machine consists of an arithmetic logic
    unit, memory, registers, a program counter, switches, lights, and a few buttons
    *Load*, *Look*, *Step*, *Run*, *Enter*, *Stop*, and *Reset*. We now describe the
    function of each of these components. Then, we will describe how the use these
    components to write TOY machine language programs.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**TOY 机器内部。** TOY 机器由算术逻辑单元、存储器、寄存器、程序计数器、开关、灯和几个按钮 *Load*、*Look*、*Step*、*Run*、*Enter*、*Stop*
    和 *Reset* 组成。我们现在描述每个组件的功能。然后，我们将描述如何使用这些组件编写 TOY 机器语言程序。'
- en: '![The X-TOY Machine](../Images/92c32216eeefa195fb83124a0bc080de.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![X-TOY 机器](../Images/92c32216eeefa195fb83124a0bc080de.png)'
- en: '**Why study TOY.**'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**为什么学习 TOY。**'
- en: Helps us understand how a computer really works.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助我们理解计算机的真正工作原理。
- en: Relates Java to the machine.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 Java 与机器相关联。
- en: Helps us understand Java references and C pointers. This makes us better programmers.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 帮助我们理解 Java 引用和 C 指针。这使我们成为更好的程序员。
- en: Still a few situation today where machine language programming (or assembly)
    is done in practice, notably video processing, audio processing, and scientific
    computing. Programmers want to exploit the blazingly fast capabilities of advanced
    computer hardware designed especially for multimedia applications, including Intel's
    MMX and SSE, Apple's AltiVec, and graphics cards. Game programmers write hand-tuned
    assembly programs for pixel-shading and texture-mapping to optimize performance.
    Computational scientists realized that the same vector operations were equally
    useful for scientific applications, applying an FFT to scientific data.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 今天仍然有一些情况需要实际进���机器语言编程（或汇编语言），尤其是视频处理、音频处理和科学计算。程序员希望利用专为多媒体应用设计的先进计算机硬件的快速能力，包括英特尔的
    MMX 和 SSE、苹果的 AltiVec 以及图形卡。游戏程序员编写手工调优的汇编程序进行像素着色和纹理映射以优化性能。计算科学家意识到相同的矢量操作同样适用于科学应用，将
    FFT 应用于科学数据。
- en: '**Word size.** The TOY machine has two types of storage: main memory and registers.
    Each entity stores one *word* of information. On the TOY machine, a word is a
    sequence of 16 bits. Typically, we interpret these 16 bits as a hexadecimal integer
    in the range `0000` through `FFFF`. Using *two''s complement notation*, we can
    also interpret it as a decimal integer in the range -32,768 to +32,767. See Section
    5.1 for a refresher on number representations and two''s complement integers.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**字长。** TOY 机器有两种存储类型：主存储器和寄存器。每个实体存储一个信息 *字*。在 TOY 机器上，一个字是一个 16 位的序列。通常，我们将这
    16 位解释为十六进制整数范围为 `0000` 到 `FFFF`。使用 *二进制补码表示*，我们也可以将其解释为十进制整数范围为 -32,768 到 +32,767。请参阅第
    5.1 节以了解数字表示和二进制补码整数的刷新知识。'
- en: '**Main memory.** The TOY machine has 256 words of *main memory*. Each memory
    location is labeled with a unique *memory address*. By convention, we use the
    256 hexadecimal integers in the range `00` through `FF`. Think of a memory location
    as a mailbox, and a memory address as a postal address. Main memory is used to
    store instructions and data.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**主存储器。** TOY 机器有 256 个 *主存储器* 字。每个存储位置都带有唯一的 *存储器地址*。按照惯例，我们使用十六进制整数范围为 `00`
    到 `FF`。将存储位置视为邮箱，存储器地址视为邮政地址。主存储器用于存储指令和数据。'
- en: '**Registers.** The TOY machine has 16 *registers*, indexed from `0` through
    `F`. Registers are much like main memory: each register stores one 16-bit word.
    However, registers provide a faster form of storage than main memory. Registers
    are used as scratch space during computation and play the role of variables in
    the TOY language. Register 0 is a special register whose output value is always
    0.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**寄存器。** TOY 机器有 16 个 *寄存器*，从 `0` 到 `F` 索引。寄存器与主存储器非常相似：每个寄存器存储一个 16 位字。但是，寄存器提供了比主存储器更快的存储形式。寄存器在计算过程中用作临时空间，并在
    TOY 语言中扮演变量的角色。寄存器 0 是一个特殊寄存器，其输出值始终为 0。'
- en: '**Program counter.** The *program counter* or `pc` is an extra register that
    keeps track of the next instruction to be executed. It stores 8 bits, corresponding
    to a hexadecimal integer in the range `00` through `FF`. This integer stores the
    memory address of the next instruction to execute.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**程序计数器。** *程序计数器* 或 `pc` 是一个额外的寄存器，用于跟踪下一条要执行的指令。它存储 8 位，对应于十六进制整数范围为 `00`
    到 `FF`。这个整数存储了要执行的下一条指令的内存地址。'
- en: '**Core dump.** A *core dump* is a complete listing of the state of the machine
    contents at a particular instant in time. The core dump provides a record of what
    the machine has done, and it also completely determines what machine will do.
    Both data and the program are stored in main memory, and it is up to the programmer
    to ensure that data is treated as data, and that instructions are treated as instructions.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**核心转储。** *核心转储* 是在特定时间点机器内容状态的完整列表。核心转储提供了机器的操作记录，并完全确定了机器将要做什么。数据和程序都存储在主存储器中，程序员需要确保数据被视为数据，指令被视为指令。'
- en: '![A Core Dump of TOY](../Images/afda7a2b24e583ee1db8d9b068cfb771.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![TOY 的核心转储](../Images/afda7a2b24e583ee1db8d9b068cfb771.png)'
- en: '**Input.** The *switches* and *Load* button are used to enter instructions
    and data into the machine. The switches behave just like ordinary light switches:
    they are either on or off. There are 8 *memory address switches* to select one
    of the 2⁸ = 256 possible memory addresses. There are also 16 *data switches* to
    select a 16 bit integer to load into the corresponding memory location. To enter
    data into memory, you set the appropriate memory and data switches, and then press
    the *Load* button. This tedious process is repeated for each memory location.
    All registers and memory locations are initially `0000`; the program counter is
    initially `10`.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**输入**。*开关*和*加载*按钮用于将指令和数据输入到机器中。开关的行为就像普通的灯开关：它们要么打开，要么关闭。有8个*内存地址开关*可选择256个可能的内存地址中的一个。还有16个*数据开关*可选择要加载到相应内存位置的16位整数。要将数据输入到内存中，您需要设置适当的内存和数据开关，然后按下*加载*按钮。这种繁琐的过程需要为每个内存位置重复。所有寄存器和内存位置最初都是`0000`；程序计数器最初为`10`。'
- en: '**Output**. The *memory address switches*, *lights* and *Look* button are used
    to display the address and contents of one word of main memory, as the program
    is being executed. To select which word of main memory to view, you set the 8
    memory address switches and press the *Look* button. Now, the 8 address lights
    display the chosen memory address (which at the moment is the same as the address
    switches). The 16 data lights display the contents of that memory location. Old
    programmers could often know what part of the program was being executed by staring
    at the pattern of memory lights.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**输出**。*内存地址开关*、*灯*和*查看*按钮用于在程序执行时显示主存储器中一个字的地址和内容。要选择要查看的主存储器中的字，您需要设置8个内存地址开关并按下*查看*按钮。现在，8个地址灯显示所选的内存地址（此刻与地址开关相同）。16个数据灯显示该内存位置的内容。老程序员通常可以通过盯着内存灯的模式来知道程序的哪一部分正在执行。'
- en: '**Running the machine.** To execute a TOY program, you first enter the program
    and data into main memory, one word at a time, as described below. Then, you set
    the initial value of the program counter: to do this, set the memory address switches
    to the desired value (typically `10`) and press *Look*. Now, you can press the
    *Run* or *Step* button to initiate the computation. From this point on, the TOY
    machine executes instructions in a specific, well-defined way. First it checks
    the value of the program counter and fetches the contents of this memory location.
    Next, it increments the program counter by 1. (For example, if the program counter
    is `10`, it gets incremented to `11`.) Finally, it interprets this data as an
    instruction and executes it according to the rules below. Each instruction can
    modify the contents of various registers, main memory, or even the program counter
    itself. It may also output integers to the LED standard output. If the program
    needs to read a value from standard input, then the *INWAIT* light activates and
    the machine waits until the user enters a 16-bit integer using the data switches,
    and presses the *Enter* button. After executing the instruction, the whole fetch-execute
    cycle is repeated, using the new value of the program counter to obtain the next
    instruction. This continues forever, or until the machine executes a halt instruction.
    As with Java, it is possible to write programs that go into infinite loops. It
    is always possible to stop the TOY machine by pulling the plug or pressing the
    *Stop* button.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**运行机器**。要执行 TOY 程序，您首先需要将程序和数据逐个字地输入到主存储器中，如下所述。然后，您设置程序计数器的初始值：为此，将内存地址开关设置为所需值（通常为`10`）并按下*查看*。现在，您可以按下*运行*或*步进*按钮来启动计算。从这一点开始，TOY
    机器以特定、明确定义的方式执行指令。首先，它检查程序计数器的值并获取该内存位置的内容。接下来，它将程序计数器增加1。（例如，如果程序计数器为`10`，则增加到`11`。）最后，它将此数据解释为指令并根据以下规则执行。每个指令都可以修改各种寄存器、主存储器甚至程序计数器本身的内容。它还可以将整数输出到
    LED 标准输出。如果程序需要从标准输入读取值，则*INWAIT*灯会激活，机器会等待用户使用数据开关输入一个16位整数，并按下*输入*按钮。执行指令后，整个获取-执行循环会重复，使用程序计数器的新值获取下一条指令。这将永远持续下去，或直到机器执行停机指令。与
    Java 一样，可以编写进入无限循环的程序。通过拔掉插头或按下*停止*按钮，始终可以停止 TOY 机器。'
- en: '**Von Neumann Machine**. One of the essential characteristics of the TOY machine
    is that it stores computer programs as numbers, and both data and programs are
    stored in the *same* main memory. In 1945, Princeton scholar John von Neumann
    first popularized this *stored-program model* or *von Neumann machine*. It enables
    computers to perform any type of computation, without requiring the user to physically
    alter or reconfigure the hardware. In contrast, to program the ENIAC computer,
    the operator had to manually plug in cables and set switches. This was quite tedious
    and time consuming. This simple but fundamental idea of the stored-program machine
    has been incorporated into all modern digital computers.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '**冯·诺伊曼机**。TOY 机器的一个基本特征是将计算机程序存储为数字，数据和程序都存储在*同一*主存储器中。1945年，普林斯顿学者约翰·冯·诺伊曼首次推广了这种*存储程序模型*或*冯·诺伊曼机*。它使计算机能够执行任何类型的计算，而无需用户物理更改或重新��置硬件。相比之下，要编程
    ENIAC 计算机，操作员必须手动插入电缆并设置开关。这是相当繁琐和耗时的。这种存储程序机器的简单但基本思想已被纳入所有现代数字计算机中。'
- en: Since the program and data share the same space, the machine can modify its
    data or the program itself while it is executing. That is, code and data are the
    same, or at least they can be. The memory is interpreted as an instruction when
    the program counter references it, and as data when an instruction references
    it. The ability to treat the program as data is crucial. Consider what happens
    when you want to download a program from a remote location, e.g., `download.com`.
    It is no different from receiving email, or any other data. Compilers and debuggers
    are also programs that read in other programs as input data. Treating programs
    as data is not without its perils. Computer viruses are (malicious) programs that
    propagate by writing new programs or modifying existing ones.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 由于程序和数据共享同一空间，机器可以在执行时修改其数据或程序本身。也就是说，代码和数据是相同的，或者至少可以是相同的。当程序计数器引用内存时，内存被解释为指令，当指令引用内存时，内存被解释为数据。将程序视为数据的能力至关重要。考虑一下当您想要从远程位置下载程序时会发生什么，例如，`download.com`。这与接收电子邮件或任何其他数据没有区别。编译器和调试器也是读取其他程序作为输入数据的程序。将程序视为数据并非没有危险。计算机病毒是（恶意的）通过编写新程序或修改现有程序来传播的���序。
- en: In hindsight von Neumann's idea may seem obvious. However, it is not obvious
    whether a computer built around a stored program model can be as powerful as a
    computer that can be rewired and reconfigured. In fact, the ability to physically
    reconfigure a computer does not enable you to solve more problems, so long as
    basic instruction set is rich enough (as is the case with the TOY machine). This
    is a consequence of previous work by Alan Turing on *Turing machines*, which we
    studies in [Chapter 5](../50theory).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 事后看来冯·诺伊曼的想法可能显而易见。然而，围绕存储程序模型构建计算机是否能像可以重新布线和重新配置的计算机一样强大并不明显。事实上，只要基本指令集足够丰富（正如TOY机器的情况），物理重新配置计算机的能力并不能使您解决更多问题。这是艾伦·图灵关于*Turing机*的先前工作的结果，我们在[第5章](../50theory)中学习过。
- en: Instruction Set Architecture
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 指令集架构
- en: The *instruction set architecture* (ISA) is the interface between the TOY programming
    langauge and the physical hardware that executes the program. The ISA specifies
    the size of main memory, number of registers, and number of bits per instruction.
    It also specifies exactly which instructions the machine is capable of performing
    and how each of the instruction bits is interpreted.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '*指令集架构*（ISA）是TOY编程语言和执行程序的物理硬件之间的接口。ISA指定了主存储器的大小、寄存器数量和每条指令的位数。它还准确指定了机器能够执行的每个指令以及如何解释每个指令位。'
- en: '**The TOY ISA.** The TOY machine has 256 words of main memory, 16 registers,
    and 16-bit instructions. There are 16 different instruction types; each one is
    designated by one of the *opcodes* `0` through `F`. Each instruction manipulates
    the contents of memory, registers, or the program counter in a completely specified
    manner. The 16 TOY instructions are organized into three categories: arithmetic-logic,
    transfer between memory and registers, and flow control. The table below gives
    a brief summary. (Here is a text version of the [TOY cheatsheet](cheatsheet.txt).)
    We describe them in more detail later.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '**TOY ISA。** TOY机器有256个字的主存储器，16个寄存器和16位指令。有16种不同的指令类型；每种指令由`0`到`F`中的一个*操作码*指定。每个指令以完全指定的方式操作内存、寄存器或程序计数器的内容。这16个TOY指令分为三类：算术逻辑、内存和寄存器之间的传输以及流程控制。下表给出了简要摘要。（这里是[TOY备忘单](cheatsheet.txt)的文本版本。）我们稍后会更详细地描述它们。'
- en: '| OPCODE | DESCRIPTION | FORMAT | PSEUDOCODE |'
  id: totrans-26
  prefs: []
  type: TYPE_TB
  zh: '| OPCODE | 描述 | 格式 | 伪代码 |'
- en: '| 0 | *halt* | - | `exit` |'
  id: totrans-27
  prefs: []
  type: TYPE_TB
  zh: '| 0 | *停止* | - | `exit` |'
- en: '| 1 | *add* | 1 | `R[d]` |'
  id: totrans-28
  prefs: []
  type: TYPE_TB
  zh: '| 1 | *加* | 1 | `R[d]` |'
- en: '| 2 | *subtract* | 1 | `R[d]` |'
  id: totrans-29
  prefs: []
  type: TYPE_TB
  zh: '| 2 | *减* | 1 | `R[d]` |'
- en: '| 3 | *and* | 1 | `R[d]` |'
  id: totrans-30
  prefs: []
  type: TYPE_TB
  zh: '| 3 | *与* | 1 | `R[d]` |'
- en: '| 4 | *xor* | 1 | `R[d]` |'
  id: totrans-31
  prefs: []
  type: TYPE_TB
  zh: '| 4 | *异或* | 1 | `R[d]` |'
- en: '| 5 | *left shift* | 1 | `R[d]` |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 5 | *左移* | 1 | `R[d]` |'
- en: '| 6 | *right shift* | 1 | `R[d] > R[t]` |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| 6 | *右移* | 1 | `R[d] > R[t]` |'
- en: '| 7 | *load address* | 2 | `R[d]` |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| 7 | *加载地址* | 2 | `R[d]` |'
- en: '| 8 | *load* | 2 | `R[d]` |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| 8 | *加载* | 2 | `R[d]` |'
- en: '| 9 | *store* | 2 | `mem[addr]` |'
  id: totrans-36
  prefs: []
  type: TYPE_TB
  zh: '| 9 | *存储* | 2 | `mem[addr]` |'
- en: '| A | *load indirect* | 1 | `R[d]` |'
  id: totrans-37
  prefs: []
  type: TYPE_TB
  zh: '| A | *间接加载* | 1 | `R[d]` |'
- en: '| B | *store indirect* | 1 | `mem[R[t]]` |'
  id: totrans-38
  prefs: []
  type: TYPE_TB
  zh: '| B | *间接存储* | 1 | `mem[R[t]]` |'
- en: '| C | *branch zero* | 2 | `if (R[d] == 0) pc` |'
  id: totrans-39
  prefs: []
  type: TYPE_TB
  zh: '| C | *分支零* | 2 | `if (R[d] == 0) pc` |'
- en: '| D | *branch positive* | 2 | `if (R[d] > 0) pc` |'
  id: totrans-40
  prefs: []
  type: TYPE_TB
  zh: '| D | *分支正数* | 2 | `if (R[d] > 0) pc` |'
- en: '| E | *jump register* | - | `pc` |'
  id: totrans-41
  prefs: []
  type: TYPE_TB
  zh: '| E | *跳转寄存器* | - | `pc` |'
- en: '| F | *jump and link* | 2 | `R[d]` |'
  id: totrans-42
  prefs: []
  type: TYPE_TB
  zh: '| F | *跳转并链接* | 2 | `R[d]` |'
- en: Each TOY instruction consists of 4 hex digits (16 bits). The leading (left-most)
    hex digit encodes one of the 16 opcodes. The second (from the left) hex digit
    refers to one of the 16 registers, which we call the *destination register* and
    denote by `d`. The interpretation of the two rightmost hex digits depends on the
    opcode. With *Format 1* opcodes, the third and fourth hex digits are each interpreted
    as the index of a register, which we call the two *source registers* and denote
    by `s` and `t`. For example, the instruction `1462` adds the contents of registers
    `s` = 6 and `t` = 2 and puts the result into register `d` = 4. With *Format 2*
    opcodes, the third and fourth hex digits (the rightmost 8 bits) are interpreted
    as a memory address, which we denote by `addr`. For example, the instruction `9462`
    stores the contents of register `d` = 4 into memory location `addr = 62`. Note
    that there is no ambiguity between Format 1 and Format 2 instruction since each
    opcode has a unique format.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 每个TOY指令由4个十六进制数字（16位）组成。最前面（最左边）的十六进制数字编码了16个操作码中的一个。第二个（从左边数）十六进制数字指的是16个寄存器中的一个，我们称之为*目标寄存器*，用`d`表示。最右边的两个十六进制数字的��释取决于操作码。对于*格式1*操作码，第三和第四个十六进制数字分别被解释为寄存器的索引，我们称之为两个*源寄存器*，用`s`和`t`表示。例如，指令`1462`将寄存器`s`
    = 6和`t` = 2的内容相加，并将结果放入寄存器`d` = 4。对于*格式2*操作码，第三和第四个十六进制数字（最右边的8位）被解释为内存地址，我们用`addr`表示。例如，指令`9462`将寄存器`d`
    = 4的内容存储到内存位置`addr = 62`。请注意，格式1和格式2指令之间没有歧义，因为每个操作码都有唯一的格式。
- en: '![Format 1 and 2 TOY Instructions](../Images/d74fe8215f9bc6e9b4b8a86f4e58c36b.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![格式1和2的TOY指令](../Images/d74fe8215f9bc6e9b4b8a86f4e58c36b.png)'
- en: '**Modern day microprocessors and ISAs.** Today, there is a wide variety of
    ISAs used on modern day microprocessors: IA-32 (Intel, AMD), PowerPC (IBM, Motorola),
    PA-RISC (Hewlett-Packard), and SPARC (SUN Microsystems). These ISAs typically
    access millions of words of main memory, each of which is 32 or 64 bits wide.
    For example IA-32 has 8 32-bit general purpose registers; PowerPC has 32 64-bit
    general purpose registers. The number of instruction types varies greatly from
    half a dozen to several hundred. The ISA is chosen in order to make it easy to
    build the underlying hardware and compilers, while striving to maximize performance
    and minimize cost. Unfortunately, sometimes both goals are sacrificed to maintain
    backward compatibility with obsolete hardware. There are always tradeoffs.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**现代微处理器和ISA。** 今天，在现代微处理器上使用了各种ISA：IA-32（英特尔，AMD），PowerPC（IBM，摩托罗拉），PA-RISC（惠普），以及SPARC（SUN
    Microsystems）。这些ISA通常访问数百万字的主存储器，每个字长为32或64位。例如，IA-32有8个32位通用寄存器；PowerPC有32个64位通用寄存器。指令类型的数量从几十个到几百个不等。ISA的选择是为了便于构建底层硬件和编译器，同时努力最大化性能并最小化成本。不幸的是，有时为了与过时硬件保持向后兼容性，这两个目标都会被牺牲。总是需要权衡。'
- en: The TOY machine possesses all of the essential features of modern day microprocessors.
    However, it is much easier to understand because it has only 16 instructions and
    two instruction formats. In contrast, the IA-32 (the one used on Intel PC's) has
    more than 100 instruction types and over a dozen different instruction formats.
    As a programming language, TOY is also much simpler than the Java programming
    language. This makes it easier to fully understand, but not necessarily to write
    code or debug. A *Java compiler* (e.g., `javac`) is a program that automatically
    converts Java code into the ISA of the computer on which it is to be executed.
    You will soon appreciate the convenience of working in a higher-level language
    like Java.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: TOY机器具有现代微处理器的所有基本特征。然而，它更容易理解，因为它只有16条指令和两种指令格式。相比之下，IA-32（用于英特尔PC的那种）有100多种指令类型和十几种不同的指令格式。作为一种编程语言，TOY也比Java编程语言简单得多。这使得完全理解更容易，但不一定容易编写代码或调试。*Java编译器*（例如，`javac`）是一个自动将Java代码转换为要在其上执行的计算机的ISA的程序。您很快就会体会到在高级语言如Java中工作的便利性。
- en: Q + A
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Q + A
- en: Q. Did ancient programmers really flip switches to enter a program?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Q. 古代程序员真的要翻转开关来输入程序吗？
- en: A. Yes. They later moved on to punch cards for a more permanent form of storage.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: A. 是的。后来他们转向使用打孔卡作为更持久的存储形式。
- en: Q. What's the difference between a register and a memory cell?
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Q. 寄存器和内存单元之间有什么区别？
- en: A. Both store 16-bit integers. However, in the TOY machine all computations
    (add, subtract, etc.) can only be performed on the contents of registers, not
    main memory. To perform arithmetic on a memory cell, it must first be transferred
    to a register, and then transferred back. It is desirable to make registers as
    fast as possible so they are typically built from more expensive materials than
    main memory, even though in principle, both just store 16 bits. This is analogous
    to the difference between computer RAM (scarce and expensive) and the hard drive
    (plentiful and cheap).
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: A. 两者都存储16位整数。然而，在TOY机器中，所有计算（加法，减法等）只能在寄存器内容上执行，而不是在主存储器上执行。要在内存单元上执行算术运算，必须先将其转移到寄存器，然后再转回。希望尽可能使寄存器尽快，因此它们通常由比主存储器更昂贵的材料构建，尽管原则上两者只是存储16位。这类似于计算机RAM（稀缺且昂贵）和硬盘驱动器（丰富且便宜）之间的区别。
- en: Q. Are special purpose computers or microprocessors still fabricated today?
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Q. 今天还在制造特殊用途的计算机或微处理器吗？
- en: 'A. Yes, because it is possible to do simple things faster in hardware than
    software. The Enigma machine was a special purpose encryption machine used by
    the Germans in World War II. Alan Turing led a team at Bletchley Park to build
    a Turing bombe machine, whose sole capability was to break Enigma codes. Here''s
    an [Enigma kit](http://www.xat.nl/enigma-e/desc/index.htm) that you can buy to
    build your own. Some modern examples include: signal processing, chess chips for
    Deep Blue to evaluate board positions, N-body simulation chips, cryptography chips
    that can manipulate 2048 bit integers. Astrophysicists use a very specialized
    chip for calculating the Newtonian gravitational force between particles. One
    of the most successful such chips is the [GRAPE-6](http://grape.astron.s.u-tokyo.ac.jp/~makino/grape6.html)
    which is capable of one teraflop (floating point operations per second) per board,
    and a 64 processor board is capable of a sustained rate of 64 teraflops. This
    may be the fastest computer in the world, although it is only good at this one
    specialized task.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: A. 是的，因为在硬件中可以比在软件中更快地执行简单操作。恩尼格玛机是二战期间德国人使用的一种专用加密机。艾伦·图灵在布莱切利园领导一个团队建造了图灵破解机，其唯一功能是破解恩尼格玛密码。这里有一个[恩尼格玛套件](http://www.xat.nl/enigma-e/desc/index.htm)，您可以购买来自己组装。一些现代例子包括：信号处理、Deep
    Blue用于评估棋盘位置的棋盘芯片、N体模拟芯片、可以操作2048位整数的密码学芯片。天体物理学家使用一种非常专门的芯片来计算粒子之间的牛顿引力。其��最成功的芯片之一是[GRAPE-6](http://grape.astron.s.u-tokyo.ac.jp/~makino/grape6.html)，每块板可以达到一万亿次浮点运算每秒，64块处理器板可以持续达到64万亿次每秒的速度。这可能是世界上最快的计算机，尽管它只擅长这一项专门任务。
- en: Q. What's the difference between load address, load, and load indirect?
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Q. 加载地址、加载和间接加载之间有什么区别？
- en: 'A. All three instructions load some value into a register. Load address is
    the simplest: `7C30` loads the value `0030` into register C. Both load and load
    indirect copy the contents of some memory cell into a register. Suppose that memory
    location `30` contains `AAAA`, memory location `31` contains `BBBB`, and that
    register A is storing the value `0031`. Then `8C30` loads the value `AAAA` into
    register C, while `AC0A` loads the value `BBBB` into register C.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: A. 所有三条指令都将某个值加载到寄存器中。Load address 是最简单的：`7C30`将值`0030`加载到寄存器 C 中。Load 和 load
    indirect 都将某个内存单元的内容复制到寄存器中。假设内存位置`30`包含`AAAA`，内存位置`31`包含`BBBB`，寄存器 A 存储值`0031`。那么`8C30`将值`AAAA`加载到寄存器
    C 中，而`AC0A`将值`BBBB`加载到寄存器 C 中。
- en: Q. What's the difference between `E100` and `E1CC`?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: Q. `E100`和`E1CC`有什么区别？
- en: A. Nothing. The last two hex digits are ignored with opcode `E`. Similarly,
    the third hex digit is ignored with opcodes `A` and `B`. The last three hex digits
    are ignored with opcode `0`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: A. 没有区别。使用操作码`E`时，最后两个十六进制数字被忽略。类似地，使用操作码`A`和`B`时，第三个十六进制数字被忽略。使用操作码`0`时，最后三个十六进制数字被忽略。
- en: Q. What does `5ABC` (left shift) do if register C contains a value bigger than
    15?
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: Q. 如果寄存器 C 包含一个大于 15 的值，`5ABC`（左移）会发生什么？
- en: A. Since it only makes sense to left shift 15 positions, TOY only considers
    the last hex digit of register C to determine the number of bits to shift. So
    it is not true that if register C is `FFFD` (-3) that the left shift would become
    a right shift by 3.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: A. 由于只有左移 15 个位置才有意义，TOY 只考虑寄存器 C 的最后一个十六进制数字来确定要移位的位数。因此，如果寄存器 C 是`FFFD`（-3），那么左移不会变成右移
    3 位。
- en: Q. What would happen if the program counter were `FF`?
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Q. 如果程序计数器是`FF`会发生什么？
- en: A. The machine would try to read whatever value is stored in memory location
    `FF`. Since `FF` is used for standard input, the machine would fetch the next
    instruction from standard input. The program counter would then be incremented
    to `00`. It would be extremely rare for a TOY programmer to write a program with
    this intent.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: A. 机器将尝试读取存储在内存位置`FF`的任何值。由于`FF`用于标准输入，机器将从标准输入获取下一条指令。然后程序计数器将增加到`00`。对于 TOY
    程序员来说，准备编写这样一个意图的程���是极为罕见的。
- en: Exercises
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: How many total *bits* of storage does the TOY machine have? Include registers,
    main memory, and the program counter.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TOY 机器的总存储位数是多少？包括寄存器、主存储器和程序计数器。
- en: TOY uses 8-bit memory addresses which means it's possible to access 256 words
    of memory. How many words of memory can a 32-bit machine access? A 64-bit machine
    access?
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TOY 使用 8 位内存地址，这意味着可以访问 256 个字的内存。一台 32 位机器可以访问多少个字的内存？一台 64 位机器可以访问多少个字的内存？
- en: How many *words* of main memory does a Pentium IV with 1GB of memory have? A
    Pentium IV is a 32-bit machine.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一台具有 1GB 内存的 Pentium IV 有多少个*字*的主存储器？Pentium IV 是一台 32 位机器。
- en: How many *words* of main memory does a Mac G5 with 1GB of memory have? A G5
    processor is a 64-bit machine.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一台具有 1GB 内存的 Mac G5 有多少个*字*的主存储器？G5 处理器是一台 64 位机器。
- en: Give a single instruction that changes the program counter to memory address
    `15` regardless of the contents of any registers or memory cells.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出一个单独的指令，将程序计数器更改为内存地址`15`，而不考虑任何寄存器或内存单元的内容。
- en: '*Answer*: `C015` or `F015`. Both instructions rely on the fact that register
    0 is always `0000`.'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案*：`C015`或`F015`。这两个指令都依赖于寄存器 0 始终为`0000`。'
- en: List seven instructions (with different opcodes) that put `0000` into register
    A.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出七个指令（具有不同的操作码），将`0000`放入寄存器 A。
- en: '*Answer*: `1A00`, `2Axx`, `3A0x`, `4Axx`, `5A0x`, `6A0x`, `7A00`, where `x`
    is any hex digit.'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案*：`1A00`，`2Axx`，`3A0x`，`4Axx`，`5A0x`，`6A0x`，`7A00`，其中`x`是任意十六进制数字。'
- en: List three ways (different opcodes) to set the program counter to `00` without
    changing the contents of any register or memory cell.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出三种方式（不同的操作码）将程序计数器设置为`00`，而不改变任何寄存器或内存单元的内容。
- en: '*Answer*: `C000`, `E0xy`, `F000`.'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案*：`C000`，`E0xy`，`F000`。'
- en: List five instructions (with different opcodes) that are no-ops. Exclude cases
    where the destination register is 0.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出五个指令（具有不同的操作码），它们是空操作。排除目标寄存器为 0 的情况。
- en: '*Answer*: `1xx0`, `1x0x`, `2xx0`, `3xxx`, `5xx0`, `6xx0`, where `x` is any
    hex digit other than 0.'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案*：`1xx0`，`1x0x`，`2xx0`，`3xxx`，`5xx0`，`6xx0`，其中`x`是除 0 以外的任意十六进制数字。'
- en: List a Format 2 instruction that is a no-op.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出一个 Format 2 指令，它是一个空操作。
- en: '*Answer*: `D0xy` where `xy` is any two hex digit number.'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案*：`D0xy`，其中`xy`是任意两位十六进制数字。'
- en: List six ways to assign the contents of register B into register A.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 列出六种将寄存器 B 的内容赋值给寄存器 A 的方法。
- en: '*Answer*: `1AB0`, `1A0B`, `2AB0`, `3ABB`, `4A0B`, `4AB0`, `5AB0`, and `6AB0`.
    where `x` is any hex digit.'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案*：`1AB0`，`1A0B`，`2AB0`，`3ABB`，`4A0B`，`4AB0`，`5AB0`，和`6AB0`。其中`x`是任意十六进制数字。'
- en: 'There is no *bitwise or* operator in TOY. (In Java it is `|`.) Explain how
    to compute RC *Answer*: `3DAB 4EAB 1CDE`.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TOY 中没有*按位或*运算符。（在 Java 中是`|`。）解释如何计算 RC *答案*：`3DAB 4EAB 1CDE`。
- en: 'There is no *bitwise nor* operator in TOY (or Java). Explain how to compute
    RC There is no *bitwise nand* operator in TOY (or Java). Explain how to compute
    RC There is no *bitwise not* operator in TOY. (In Java it is `~`.) Explain how
    to compute RB *Answer*: `7101 2B01 4BAB` or `7101 2B01 2BBA`.'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TOY 中没有*按位或*运算符（或 Java）。解释如何计算 RC TOY 中没有*按位 nand*运算符（或 Java）。解释如何计算 RC TOY
    中没有*按位非*运算符。（在 Java 中是`~`。）解释如何计算 RB *答案*：`7101 2B01 4BAB`或`7101 2B01 2BBA`。
- en: There is no *absolute value* function in TOY. Explain how to compute RB There
    is no *branch if nonnegative* operator in TOY. Explain how to jump to memory address
    `15` if register A is greater than or equal to 0.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: TOY 中没有*绝对值*函数。解释如何计算 RB TOY 中没有*非负分支*运算符。解释如何在寄存器 A 大于或等于 0 时跳转到内存地址`15`。
- en: '*Answer*: Use both branch is positive and branch if zero, one after the other:
    `CA15 DA15`.'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案*：连续使用正分支和零分支：`CA15 DA15`。'
- en: Show that the *subtract* operator is redundant. That is, explain how to compute
    `RC by using a sequence of TOY instructions that don't involve opcode 2.`
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 证明*减法*运算符是多余的。也就是说，解释如何通过一系列不涉及操作码 2 的 TOY 指令来计算`RC`。
- en: '`Which of the 16 TOY instructions do not use all 16 bits? *Answer*: halt (only
    uses first 4 bits), load indirect (does not use third set of 4 bits), store indirect
    (does not use third set of 4 bits), jump register (does not use last 8 bits).`'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 16个TOY指令中有哪些不使用全部16位？ *答案*：halt（仅使用前4位），load indirect（不使用第三组4位），store indirect（不使用第三组4位），jump
    register（不使用最后8位）。
- en: '`We interpret some TOY integers to be negative according to two''s complement
    notation. What are the only instructions for which this matters?'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们根据二进制补码表示法将一些TOY整数解释为负数。这只对哪些指令有影响？
- en: '*Answer*: The *branch if positive* treats integers between `0001` and `7FFF`
    as positive. The *right shift* is a signed shift so that if the leftmost bit is
    1, then 1''s are prepended to the beginning. All other instructions (even subtract!)
    do not depend on whether TOY has negative integers or not.`'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案*：*正数分支*将`0001`到`7FFF`之间的整数视为正数。*右移*是有符号移位，因此如果最左边的位是1，则1会被添加到开头。所有其他指令（甚至减法！）不依赖于TOY是否具有负整数。'
- en: Creative Exercises
  id: totrans-87
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
