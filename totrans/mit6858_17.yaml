- en: Private browsing modes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Note:** These lecture notes were slightly modified from the ones posted on
    the 6.858 [course website](http://css.csail.mit.edu/6.858/2014/schedule.html)
    from 2014.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Private browsing: goal, definitions, threat models'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What is the goal of privacy?
  prefs: []
  type: TYPE_NORMAL
- en: 'Vague ideal: (activity of) a given user is indistinguishable from (activity
    of) many other users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Today we'll discuss privacy in the context of web browsers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's no formal definition of what private browsing means, in part because
    web applications are so complicated and so much incriminating state can be generated.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Browsers update their implementation of private browsing according to user demand
    and what other browser vendors do.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As users rely on private browsing mode, they expect more from it . . . and more
    implementation deficiencies emerge!
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What do the browsers mean by "private browsing"?
  prefs: []
  type: TYPE_NORMAL
- en: 'Paper formalizes this as two separate threat models + attacks:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A local attacker who possesses your machine post-browsing session, and wants
    to discover which sites you've visited.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: A web attacker who has compromised a web server that you contact, and wants
    to link you across private and/or normal sessions.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If the two attackers can collude, it's easier for them to identify user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ex: A local attacker asks the server to check for the local IP address in the
    server''s access logs.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: So, there's practical value to security against these two attacks in isolation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Threat 1: Local attacker'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Assumption:* Attacker gets control of the user''s machine post-session, and
    wants to learn what sites the user visited in private browsing mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Security goal:* Attacker can''t learn those sites!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-goals
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't care about achieving privacy for *future* private browsing sessions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacker could modify software on the machine (e.g., installing a keystroke
    logger) and track future browsing.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This is why we also assume that the attacker can't access the machine *before*
    private browsing starts.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hide the fact that private browsing was used.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Often called "plausible deniability".
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The paper says that this is difficult to achieve, but doesn't explain why. Later
    in the lecture, we'll discuss some potential reasons.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What kinds of persistent client-side state can a private session leak? (By persistent,
    we mean "stored on the local disk.")
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript-accessible state: Cookies, DOM storage'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browser cache
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: History of visited addresses
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Configuration state: New client certificates, updates to saved password database,
    bookmarks'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Downloaded files
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: New plugins/browser extensions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '...and:'
  prefs: []
  type: TYPE_NORMAL
- en: Private browsing implementations all try to prevent persistent leaks to 1, 2,
    and 3\. However, 4, 5, and 6 often persist after the private session ends.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network activity can leave persistent evidence -- DNS resolution records!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To fix this, private browsing mode would need to flush the DNS cache upon session
    termination. However, this is tricky, because flushing the cache typically requires
    admin rights on your machine (do you want the browser having admin rights?) and
    deletes all DNS state, not the state generated by a particular user.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: During private browsing, objects in RAM can also get paged out to disk!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Demo:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Data lifetime is a broader problem than just private browsing!
  prefs: []
  type: TYPE_NORMAL
- en: 'Example: cryptographic keys or passwords might be problematic if disclosed.
    [Ref](http://css.csail.mit.edu/6.858/2010/readings/chow-shredding.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Demo:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Where does data persist?
  prefs: []
  type: TYPE_NORMAL
- en: 'Process memory: heap, stack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Terminal scrollback
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: I/O buffers, X event queues, DNS cache, proxy servers, ...
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Language runtime makes copies (e.g., immutable strings in Python)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Files, file backups, SQLite databases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swap file, hibernate file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Kernel memory:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'IO buffers: keyboard, mouse inputs'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Freed memory pages
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Network packet buffers
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Pipe buffers contain data sent between processes
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Random number generator inputs (including keystrokes again).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How could an attacker get a copy of leftover data?
  prefs: []
  type: TYPE_NORMAL
- en: Files themselves may contain multiple versions (e.g., Word used to support this
    feature).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Programs may leak information if they don''t scrub memory on deallocation or
    program shutdown:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ex: In older Linux kernels, up to 4 KB of kernel memory could be leaked to
    disk when a new directory was created.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ex: If the kernel/VMM doesn''t wipe memory pages, then information from process
    X can leak into process Y that uses X''s old memory pages.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Core dumps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direct access to the machine
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flash SSDs implement logging -- they don't erase old data right away!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stolen disks, or just disposing of old disks [Ref: http://news.cnet.com/2100-1040-980824.html]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How can we deal with the data lifetime problems?
  prefs: []
  type: TYPE_NORMAL
- en: Zero out unused memory [with some performance degradation].
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypt data in places where zeroing out is difficult (e.g., on an SSD).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securely deleting the key means data cannot be decrypted anymore!
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ex: OpenBSD swap uses encryption, with a new encryption key generated at boot
    time.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: CPU cost of encryption is modest compared to disk I/O.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Threat 2: Web attacker'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '*Assumptions:*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacker controls the web sites that the user visits.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacker does not control the user's machine.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacker wants to detect when the user visits the site.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Security goals:*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacker cannot identify the user.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacker cannot determine if the user is employing private browsing mode.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Defending against a web attacker is very difficult!
  prefs: []
  type: TYPE_NORMAL
- en: What does it mean to identify a user?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Link visits by the same user from different private browsing sessions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Link visits by user from private browsing and public browsing sessions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Easy way to identify user: IP address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With reasonable probability, requests from the same IP address are the same
    user.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Next lecture, we'll discuss Tor. Tor protects the privacy of the source of a
    TCP connection (i.e., user's IP). However, Tor doesn't solve other challenges
    with implementing private browsing.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if the user employs Tor, a web server can still identify her by analyzing
    the unique characteristics of her browser runtime!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Browser fingerprinting demo:*'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Good way to think of privacy: what is the anonymity set of a user? I.e., what
    is the largest set of users among which some user is indistinguishable?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Panopticlick shows that this set is small for most users, because users tend
    to have unique local settings for fonts, plugins, etc.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How can a web attacker determine if you're using private browsing mode?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Paper describes a history sniffing attack based on link colors.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacker page loads a URL in an iframe, then creates a link to that URL and
    sees whether the link is purple (private sessions don't store history).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This attack doesn't work any more, since browsers no longer expose link color
    to JavaScript! [See discussion of history sniffing attacks from a few lectures
    ago.]
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: However, there may be other ways for the attacker to tell that you're using
    private mode.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Ex: Public-mode cookies cannot be seen by private-mode pages. So, if you visit
    a page in public mode, and then in private mode, the page can detect that an expected
    cookie is missing.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Approaches
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How can we provide stronger guarantees for private browsing? (Let's ignore IP
    address privacy for now, or assume that users employ Tor.)
  prefs: []
  type: TYPE_NORMAL
- en: 'Approach 1: **VM-level privacy**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Plan:*'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Run each private browsing session in a separate VM.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensure that the VM is deleted after private browsing is done.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Somehow make sure that no VM state ends up on disk [disable paging? secure deallocation?].
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Advantages:**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Strong guarantees against both a local attacker and a web attacker.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: No changes required to application, just need secure deletion of VM.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drawbacks:**'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Spinning up a separate VM for private browsing is heavyweight.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Poor usability: It''s harder for users to save files from private browsing,
    use bookmarks, etc.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Inherent trade-off between usability and privacy!
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Approach 2: **OS-level privacy**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Plan:* Implement similar guarantees at the OS kernel level.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A process can run in a "privacy domain", which will be deleted afterwards.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Advantages over VM**: Lighter-weight.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Drawbacks w.r.t VM:** Harder to get right, since the OS kernel manages a
    lot of state.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Are there ways to de-anonymize a user who employs these approaches?
  prefs: []
  type: TYPE_NORMAL
- en: Maybe the VM itself is unique! So, we need to ensure that all users have similar
    VMs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This limits the extent to which users can customize VMs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Maybe the VMM or host computer introduces some uniqueness.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ex:* TCP fingerprinting: The TCP protocol allows some parameters to be set
    by the implementation (e.g., the initial packet size, the initial TTL).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tools like nmap send carefully crafted packets to a remote server; can guess
    the remote OS with high likelihood!
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The user is still shared! So, perhaps the attacker can:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Detect the user's keystroke timing.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Detect the user's writing style. This is called stylography. [Ref](http://33bits.org/2012/02/20/is-writing-style-sufficient-to-deanonymize-material-posted-online/)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why do browsers implement their own private browsing support?
  prefs: []
  type: TYPE_NORMAL
- en: 'Main reason is deployability: Users don''t have to run their browser in a custom
    VM or OS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Similar motivation for Native Client.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another reason is usability: Some types of state generated in private mode
    should be able to persist after the session is finished. (Ex: downloaded files).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is a dangerous plan! Browsers are complicated pieces of software, so it's
    difficult to find clean cuts in the architecture which allow some types of state
    (but not others) to persist.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we categorize those types of state? The paper says that we should think
    about who initiated the state change (Section 2.1).
  prefs: []
  type: TYPE_NORMAL
- en: '*Initiated by web site, no user interaction:* cookies, history, cache.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Stays within session, is deleted on session teardown.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Initiated by web site, requires user interaction:* client certificates, saved
    passwords.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Unclear what's the best strategy; browsers tend to store this state persistently,
    probably because the user has to explicitly authorize the action.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Initiated by user:* bookmarks, file downloads.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Same as above: browsers tend to store this state persistently because the user
    authorizes the action'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '...but note that storing this state may reveal the fact that the user employed
    private browsing mode!'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ex:* In Firefox and Chrome, bookmarks live in a SQLite database. Bookmarks
    generated in private browsing mode will have empty values for metadata like `last_visit_count`[Ref](http://homepages.cs.ncl.ac.uk/feng.hao/files/DPM13.pdf)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Unrelated to a session:* Browser updates, certificate revocation list updates.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Treat as a single global state shared between public mode and private mode.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What do browsers actually implement?
  prefs: []
  type: TYPE_NORMAL
- en: Each browser is, of course, different.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Moreover, some state "bleeds over" in one direction but not another! There isn't
    a strict partitioning between private mode and public mode state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Q&A:*'
  prefs: []
  type: TYPE_NORMAL
- en: '**Q:** What happens if public state bleeds over into private state?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A:** Easier for web attacker to link private session to public session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ex:* A client-side SSL certificate that''s installed in public mode can identify
    the user in private mode.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Q:** What happens if private state bleeds over into public state?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A:** This helps both a web attacker and a local attacker: observing state
    from a public session will reveal information about private sessions!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Q:** What should happen to state while user remains in a private mode session?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A:** Most browsers allow state to persist within a private mode session (see
    Table 3).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A "no" entry means that a web attacker might be able to detect private mode
    browsing!
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Q:** Why is it OK to allow cookies in private browsing mode?'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A:** It''s convenient for users to be able to create ephemeral sessions in
    private browsing mode---the browser will delete the associated cookies when the
    private session ends.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Q:** What should happen to state across private mode sessions?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A:** Ideally, each private session should start with a blank slate---if state
    carries over between multiple private sessions, this increases the likelihood
    that the user can be fingerprinted! However, since some kinds of state can leak
    from private-to-public, and some kinds of state can leak from public-to-private,
    some kinds of state can indeed persist across private mode sessions. [Ex: certificates,
    downloaded items.]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So, think of each private mode session as sharing some state with a single public
    mode.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser extensions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Browser extensions and plugins are special.
  prefs: []
  type: TYPE_NORMAL
- en: They are privileged code that can access sensitive state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: They are not subject to the same-origin policy or other browser security checks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Also, they are often developed by someone other than the browser vendor!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Thus, they might not be aware of private mode semantics, or they might misimplement
    the intended policy.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: However, plugins are probably going to become extinct in the near future! HTML5
    offers new features which provide native support for features that used to require
    Flash, applets, Silverlight, etc. [Ref](http://msdn.microsoft.com/en-us/library/ie/hh968248(v=vs.85).aspx)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Multimedia: `<video>`, `<audio>`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Graphics: `<canvas>` WebGL'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Offline storage: DOM storage'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Network: Web sockets, CORS'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Current private browsing modes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The paper was written in 2010---what's the current state of private browsing?
  prefs: []
  type: TYPE_NORMAL
- en: Private browsing is still tricky to get right!
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ex:* Firefox bug fix from January 2014: The pdf.js extension was allowing
    public cookies to leak into private-mode HTTP fetches. [Ref](https://github.com/mozilla/pdf.js/issues/4234)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The extension wasn't checking whether private browsing mode was enabled!
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ex:* Open Firefox bug from 2011: If you visit a page in private browsing mode
    and then close the window, you can go to about:memory and find information about
    the window you supposedly closed (e.g., about:memory will list the URL for the
    window). [Ref](https://bugzilla.mozilla.org/show_bug.cgi?id=709326)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The problem is that window objects are lazily garbage collected, so closing
    the window doesn't force a synchronous garbage collection for the window.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The bug was "deprioritized when it became clear that the potential solution
    was more involved than original anticipated"; in response, a developer said *"That
    is very sad to hear. This can pretty much defeat the purpose of things such as
    sessionstore forgetting about closed private windows, etc."*
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Off-the-shelf forensics tools can find evidence of private browser sessions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Ex:* Magnet''s Internet Evidence Finder [[1]](http://www.magnetforensics.com/how-private-is-internet-explorers-inprivate-browsing-first-define-private/),
    [[2]](http://www.magnetforensics.com/how-does-chromes-incognito-mode-affect-digital-forensics/),
    finds private session artifacts for IE, Chrome, and Firefox.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: During a private session, IE stores objects in the file system. Those objects
    are deleted upon private session close, but the storage space is not wiped, so
    private data remains in unallocated disk space.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Chrome and Firefox use in-memory SQLite databases during private browsing, so
    they leave fewer artifacts in the file system. However, like all browsers, they
    leave artifacts in the page file.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
