- en: 3.5   Searching Applications
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.5   搜索应用
- en: 原文：[https://algs4.cs.princeton.edu/35applications](https://algs4.cs.princeton.edu/35applications)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://algs4.cs.princeton.edu/35applications](https://algs4.cs.princeton.edu/35applications)
- en: This section under major construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节正在大规模施工中。
- en: From the early days of computing, when symbol tables allowed programmers to
    progress from using numeric addresses in machine language to using symbolic names
    in assembly language, to modern applications of the new millennium, when symbolic
    names have meaning across worldwide computer networks, fast search algorithms
    have played and will play an essential role in computation. Modern applications
    for symbol tables include organization of scientific data, from searching for
    markers or patterns in genomic data to mapping the universe; organization of knowledge
    on the web, from searching in online commerce to putting libraries online; and
    implementing the internet infrastructure, from routing packets among machines
    on the web to shared file systems and video streaming.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从计算机的早期时代，当符号表允许程序员从在机器语言中使用数值地址进展到在汇编语言中使用符号名称，到新千年的现代应用，当符号名称在全球计算机网络中具有意义时，快速搜索算法在计算中发挥了并将继续发挥重要作用。符号表的现代应用包括组织科学数据，从在基因组数据中搜索标记或模式到绘制宇宙；在网络上组织知识，从在线商务搜索到将图书馆放在线；以及实现互联网基础设施，从在网络上的机器之间路由数据包到共享文件系统和视频流。
- en: Set APIs.
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集合API。
- en: Some symbol-table clients do not need the values, just the ability to insert
    keys into a table and to test whether a key is in the table. Because we disallow
    duplicate keys, these operations correspond to the following API where we are
    just interested in the *set* of keys in the table.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 一些符号表客户端不需要值，只需要将键插入表中并测试键是否在表中。由于我们不允许重复键，这些操作对应于以下API，我们只对表中的键集感兴趣。
- en: To illustrate uses of [SET.java](SET.java.html), we consider *filter* clients
    that read a sequence of keys from the standard input and write some of them to
    standard output.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明[SET.java](SET.java.html)的用途，我们考虑*过滤*客户端，从标准输入读取一系列键，并将其中一些写入标准输出。
- en: '*Dedup.* Programs [DeDup.java](DeDup.java.html) removes duplicates in the input
    stream.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*去重。*程序[DeDup.java](DeDup.java.html)从输入流中删除重复项。'
- en: '*Allowlist and blocklist filtering.* Another classic that uses keys in a separate
    file to decide which keys from the input stream are passed to the output stream.
    Program [AllowFilter.java](AllowFilter.java.html) implements an *allowlist* where
    any key that is in the file is passed through to the output and any key that is
    not in the file is ignored. Program [BlockFilter.java](BlockFilter.java.html)
    implements a *blocklist* where any key that is in the file is ignored and any
    key that is is not in the file is passed through to the output.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*白名单和黑名单过滤。*另一个经典示例，使用单独的文件中的键来决定哪些来自输入流的键传递到输出流。程序[AllowFilter.java](AllowFilter.java.html)实现了*白名单*，其中文件中的任何键都会传递到输出，而文件中没有的键将被忽略。程序[BlockFilter.java](BlockFilter.java.html)实现了*黑名单*，其中文件中的任何键都将被忽略，而文件中没有的键将传递到输出。'
- en: Dictionary clients.
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字典客户端。
- en: The most basic kind of symbol-table client builds a symbol table with successive
    *put* operations in order to support *get* requests. The following list of familiar
    examples illustrates the utility of this approach.![Typical dictionary applications](../Images/e4d99652d1363f0ad20189abd94cf592.png)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最基本的符号表客户端通过连续的*put*操作构建符号表，以支持*get*请求。下面列举的熟悉示例说明了这种方法的实用性。![典型的字典应用](../Images/e4d99652d1363f0ad20189abd94cf592.png)
- en: As a specific example, we consider a symbol-table client that you can use to
    look up information that is kept in file using the *comma-separated-value* (.csv)
    file format. [LookupCSV.java](LookupCSV.java.html) builds a set of key-value pairs
    from a file of comma-separated values as specified on the command line and then
    prints out values corresponding to keys read from standard input. The command-line
    arguments are the file name and two integers, one specifying the field to serve
    as the key and the other specifying the field to serve as the value.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个具体的例子，我们考虑一个符号表客户端，您可以使用它查找使用*逗号分隔值*（.csv）文件格式保存的信息。[LookupCSV.java](LookupCSV.java.html)从命令行指定的逗号分隔值文件中构建一组键值对，然后打印出与从标准输入读取的键对应的值。命令行参数是文件名和两个整数，一个指定用作键的字段，另一个指定用作值的字段。
- en: Indexing clients.
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 索引客户端。
- en: 'This application is another prototypical example of a symbol table client.
    We have a large amount of data and want to know where certain strings of interest
    occur. This seems to be associating multiple values with each key,but we are actually
    associating just one: a `SET`.![Typical indexing applications](../Images/cc0f5f57e7ba790cfcdb960b6318d833.png)[FileIndex.java](FileIndex.java.html)
    takes a sequence of file names as command-line arguments and builds a symbol table
    associating every keyword with a `SET` of file names where the keyword can be
    found. Then, it takes keyword queries from standard input.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这个应用是符号表客户端的另一个典型示例。我们有大量数据，想知道感兴趣的字符串出现在哪里。这似乎是将多个值与每个键关联起来，但实际上我们只关联一个`SET`。![典型的索引应用](../Images/cc0f5f57e7ba790cfcdb960b6318d833.png)[FileIndex.java](FileIndex.java.html)将一系列文件名作为命令行参数，并构建一个符号表，将每个关键字与可以找到该关键字的文件名的`SET`关联起来。然后，它从标准输入接受关键字查询。
- en: '[MovieIndex.java](MovieIndex.java.html) reads a data file of performers and
    movies.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[MovieIndex.java](MovieIndex.java.html)读取一个包含表演者和电影的数据文件。'
- en: Sparse vectors and matrices.
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 稀疏向量和矩阵。
- en: Program [SparseVector.java](SparseVector.java.html) implements a sparse vector
    using a symbol table of index-value pairs. Memory is proportional to the number
    of nonzeros. The *set* and *get* operations take log n time in the worst case;
    taking the dot product of two vectors takes time proportional to the number of
    nonzero entries in both.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[SparseVector.java](SparseVector.java.html)使用索引-值对的符号表实现了一个稀疏向量。内存与非零数目成比例。*set*和*get*操作在最坏情况下需要log
    n时间；计算两个向量的点积所需的时间与两个向量中的非零条目数成比例。
- en: System symbol table.
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 系统符号表。
- en: Java has several library functions for sets and symbol tables. Similar APIs,
    but you can insert `null` values into a symbol table.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Java有几个用于集合和符号表的库函数。API类似，但你可以将`null`值插入符号表。
- en: TreeMap library uses a red-black tree. Guarantees log N performance per insert/search/delete.
    Their implementation maintains three pointers (two children and parent) for each
    node, whereas our implementation only stores two.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: TreeMap库使用红黑树。保证每次插入/搜索/删除的性能为log N。他们的实现为每个节点维护三个指针（两个子节点和父节点），而我们的实现只存储两个。
- en: Sun's implementation of `HashMap` in Java 1.5 uses a hash table with separate
    chaining. The table size is a power of 2 (instead of a prime). This replaces a
    relatively expensive % M operation with an AND. Default load factor = 0.75. To
    guard against some poorly written hash functions, they apply the following scrambling
    routine to `hashCode`
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Sun在Java 1.5中的`HashMap`实现使用具有分离链接的哈希表。表大小为2的幂（而不是素数）。这用AND替换了相对昂贵的% M操作。默认负载因子=
    0.75。为防止一些编写不佳的哈希函数，他们对`hashCode`应用以下混淆例程。
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Q + A
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Q + A
- en: '**Q.** When running performance benchmarks, what is a reasonable mix of insert,
    search, and delete operations?'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 运行性能基准测试时，插入、搜索和删除操作的合理比例是多少？'
- en: '**A.** It depends upon the application. The Java Collections framework are
    optimized for a mix of around 85% search/traverse, 14% insert/update, and 1% deletion.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 这取决于应用程序。Java集合框架针对大约85%的搜索/遍历，14%的插入/更新和1%的删除进行了优化。'
- en: Exercises
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Creative Exercises
  id: totrans-26
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
- en: '**Concordance.** Write an ST client [Concordance.java](Concordance.java.html)
    that puts on standard output a concordance of the strings in the standard input
    stream.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**词汇表。** 编写一个ST客户端[Concordance.java](Concordance.java.html)，在标准输出中输出标准输入流中字符串的词汇表。'
- en: '**Sparse matrices.** Develop an API and an implementation for sparse 2D matrices.
    Support matrix addition and matrix multiplication. Include constructors for row
    and column vectors.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**稀疏矩阵。** 为稀疏2D矩阵开发一个API和一个实现。支持矩阵加法和矩阵乘法。包括行和列向量的构造函数。'
- en: '*Solution*: [SparseVector.java](SparseVector.java.html) and [SparseMatrix.java](SparseMatrix.java.html).'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：[SparseVector.java](SparseVector.java.html)和[SparseMatrix.java](SparseMatrix.java.html)。'
- en: Web Exercises
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网页练习
- en: Modify `FrequencyCount` to read in a text file (comprised of UNICODE characters)
    and print out the alphabet size (number of distinct characters) and a table of
    characters and their frequencies, sorted in descending order of frequency.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`FrequencyCount`以读取一个文本文件（由UNICODE字符组成），并打印出字母表大小（不同字符的数量）和一个按频率降序排序的字符及其频率表。
- en: '**Set intersection and union.** Given two sets of strings, write a code fragment
    that computes a third set that contains those strings that appear in both sets
    (or either set). *Hint*: iterate over the elements in one set and check if they''re
    in the other set.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**集合的交集和并集。** 给定两组字符串，编写一个代码片段，计算一个包含这两组中出现的字符串的第三组（或任一组）。'
- en: '**Bidirectional symbol tables.** Support put(key, value) and getByKey(key)
    or getByValue(value). Use two symbol tables behind the scenes. Ex: DNS and reverse
    DNS.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**双向符号表。** 支持put(key, value)和getByKey(key)或getByValue(value)。在幕后使用两个符号表。例如：DNS和反向DNS。'
- en: '**Highlighting browser hyperlinks.** With each visited website, maintain the
    last time the site was visited so that you only highlight those sites that have
    been visited within the past month.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**突出显示浏览器超链接。** 每次访问网站时，保留上次访问网站的时间，这样你只会突出显示那些在过去一个月内访问过的网站。'
- en: '**Frequency symbol table.** Write an abstract data type [FrequencyTable.java](FrequencyTable.java.html)
    that supports the following operations: `hit(Key)`, and `count(Key)`. The `hit`
    operation increments the number of times the string appears by one. The `count`
    operation returns the number of times the given string appears, possibly 0\. Applications:
    web counter, web log analyzer, music jukebox that counts number of times each
    song has been played....'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**频率符号表。** 编写一个支持以下操作的抽象数据类型[FrequencyTable.java](FrequencyTable.java.html)：`hit(Key)`和`count(Key)`。`hit`操作将字符串出现的次数增加一。`count`操作返回给定字符串出现的次数，可能为0。应用：网页计数器，网页日志分析器，音乐点播机统计每首歌曲播放次数等。'
- en: '**Non-overlapping interval search.** Given a list of non-overlapping intervals
    of integers (or dates), write a function that takes an integer argument and determines
    in which if any interval that values lies, e.g., if the intervals are 1643-2033,
    5532-7643, 8999-10332, 5666653-5669321, then the query point 9122 lies in the
    third interval and 8122 lies in no interval.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**非重叠区间搜索。** 给定一个非重叠整数（或日期）区间列表，编写一个函数，接受一个整数参数，并确定该值位于哪个（如果有）区间中，例如，如果区间为1643-2033、5532-7643、8999-10332、5666653-5669321，则查询点9122位于第三个区间，8122不在任何区间中。'
- en: '**Registrar scheduling.** The Registrar at a prominent northeastern University
    recently scheduled an instructor to teach two different classes at the same exact
    time. Help the Registrar prevent future mistakes by describing a method to check
    for such conflicts. For simplicity, assume all classes run for 50 minutes starting
    at 9, 10, 11, 1, 2, or 3.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**注册调度。** 一所东北部知名大学的注册处最近安排一名教师在完全相同的时间上教授两门不同的课程。通过描述一种检查此类冲突的方法来帮助注册处避免未来的错误。为简单起见，假设所有课程从9点开始，每门课程持续50分钟，时间分别为9、10、11、1、2或3。'
- en: '**List.** Implement the following list operations: size(), addFront(item),
    addBack(item), delFront(item), delBack(item), contains(item), delete(item), add(i,
    item), delete(i), iterator(). All operations should be efficient (logarithmic).
    Hint: use two symbol tables, one to find the ith element in the list efficiently,
    and the other to efficiently search by item. Java''s List interface contains these
    methods, but does not supply any implementation that supports all ops efficiently.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**列表。** 实现以下列表操作：size()、addFront(item)、addBack(item)、delFront(item)、delBack(item)、contains(item)、delete(item)、add(i,
    item)、delete(i)、iterator()。所有操作应高效（对数时间）。提示：使用两个符号表，一个用于高效查找列表中的第i个元素，另一个用于按项目高效搜索。Java的List接口包含这些方法，但没有提供支持所有操作高效的实现。'
- en: '**Indirect PQ.** Write a program [IndirectPQ.java](IndirectPQ.java.html) that
    implements an indirect PQ.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**间接PQ。** 编写一个实现间接PQ的程序[IndirectPQ.java](IndirectPQ.java.html)。'
- en: '**LRU cache.** Create a data structure that supports the following operations:
    `access` and `remove`. The access operation inserts the item onto the data structure
    if it''s not already present. The remove operation deletes and returns the item
    that was least recently accessed. *Hint*: maintain the items in order of access
    in a doubly linked list, along with pointers to the first and last nodes. Use
    a symbol table with keys = items, values = location in linked list. When you access
    an element, delete it from the linked list and re-insert it at the beginning.
    When you remove an element, delete it from the end and remove it from the symbol
    table.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**LRU缓存。** 创建一个支持以下操作的数据结构：`access`和`remove`。访问操作将项目插入到数据结构中（如果尚未存在）。删除操作删除并返回最近访问的项目。*提示*：在双向链表中按访问顺序维护项目，并在符号表中使用键=项目，值=链表中的位置。当访问一个元素时，从链表中删除它并重新插入到开头。当删除一个元素时，从末尾删除它并从符号表中删除它。'
- en: '**UniQueue.** Create a data type that is a queue, except that an element may
    only be inserted the queue once. Use an existence symbol table to keep track of
    all elements that have ever been inserted and ignore requests to re-insert such
    items.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**UniQueue.** 创建一个数据类型，它是一个队列，但是一个元素只能被插入队列一次。使用存在性符号表来跟踪所有曾经被插入的元素，并忽略重新插入这些项目的请求。'
- en: '**Symbol table with random access.** Create a data type that supports inserting
    a key-value pair, searching for a key and returning the associated value, and
    deleting and returning a random value. *Hint*: combine a symbol table and a randomized
    queue.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**带随机访问的符号表。** 创建一个支持插入键值对、搜索键并返回关联值、删除并返回随机值的数据类型。*提示*：结合符号表和随机队列。'
- en: '**Correcting misspellings.** Write a program that reads in text from standard
    input and replaces any commonly misspelled words with the suggested replacement,
    and prints the result to standard output. Use this list of [common misspellings](htpp://introcs.cs.princeton.edu/datafiles/misspellings.txt)
    adapted from [Wikipedia](http://en.wikipedia.org/wiki/Wikipedia:List_of_common_misspellings).'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**纠正拼写错误。** 编写一个程序，从标准输入中读取文本，并用建议的替换替换任何常见拼写错误的单词，并将结果打印到标准输出。使用这个[常见拼写错误列表](htpp://introcs.cs.princeton.edu/datafiles/misspellings.txt)（改编自[Wikipedia](http://en.wikipedia.org/wiki/Wikipedia:List_of_common_misspellings)）。'
- en: '**Move-to-front.** Encoding: need rank query, delete, and insert. Decoding:
    need find ith, delete, and insert.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**移至前端。** 编码：需要排名查询、删除和插入。解码：需要查找第i个、删除和插入。'
- en: '**Mutable string.** Create a data type that supports the following operations
    on a string: `get(int i)`, `insert(int i, char c)`, and `delete(int i)`, where
    `get` returns the ith character of the string, `insert` inserts the character
    c and makes it the ith character, and `delete` deletes the ith character. Use
    a binary search tree.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**可变字符串。** 创建一个支持字符串上述操作的数据类型：`get(int i)`、`insert(int i, char c)`和`delete(int
    i)`，其中`get`返回字符串的第i个字符，`insert`插入字符c并使其成为第i个字符，`delete`删除第i个字符。使用二叉搜索树。'
- en: '*Hint*: Use a BST (with key = real number between 0 and 1, value = character)
    so that the inorder traversal of the tree yields the characters in the appropriate
    order. Use `select()` to find the ith element. When inserting a character at position
    i, choose the real number to be the average of the keys currently at positions
    i-1 and i.'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：使用BST（键=0到1之间的实数，值=字符）使得树的中序遍历产生适当顺序的字符。使用`select()`找到第i个元素。在位置i插入字符时，选择实数为当前位置i-1和i的键的平均值。'
- en: '**Power method and largest eigenvalue.** To compute the eigenvalue of largest
    magnitude (and corresponding eigenvector), use the power method. Under technical
    conditions (gap between largest two eigenvalues), it quickly converges to the
    right answer.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**幂法和最大特征值。** 要计算具有最大幅度的特征值（及相应的特征向量），请使用幂法。在技术条件下（最大两个特征值之间的差距），它会迅速收敛到正确答案。'
- en: Make initial guess x[1]
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 进行初始猜测 x[1]
- en: y[n] = x[n] / ||x[n]||
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: y[n] = x[n] / ||x[n]||
- en: x[n+1] = A y[n]
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: x[n+1] = A y[n]
- en: λ = x[n+1]^T y[n]
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: λ = x[n+1]^T y[n]
- en: 'n = n + 1If A is sparse, then this algorithm exploits sparsity. Example: Google
    PageRank.'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: n = n + 1如果A是稀疏的，那么这个算法会利用稀疏性。例如：Google PageRank。
- en: '**Outerproduct.** Add a method `outer` to `Vector` so that `a.outer(b)` returns
    the outer product of two length-N vectors a and b. The result is an N-by-N matrix.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**外积。** 向`Vector`添加一个方法`outer`，使得`a.outer(b)`返回两个长度为N的向量a和b的外积。结果是一个N×N矩阵。'
- en: '**Power law of web links.** (Michael Mitzenmacher) The indegrees and outdegrees
    of World Wide Web obey a power law. Can be modeled by [preferred attachment](http://citeseer.nj.nec.com/553345.html)
    process. Suppose that each web page has exactly one outgoing link. Each page is
    created one at a time, starting with a single page that points to itself. With
    probability p < 1, it links to one of the existing pages, chosen uniformly random.
    With probability 1-p it links to an existing page with probability proportional
    to the number of incoming links of that page. This rule reflects the common tendency
    for new web pages to point to popular pages. Write a program to simulate this
    process and plot a histogram of the number of incoming links.'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**网络链接的幂律分布。**（Michael Mitzenmacher）全球网络的入度和出度遵循幂律分布。可以通过[优先附加](http://citeseer.nj.nec.com/553345.html)过程来建模。假设每个网页只有一个外链。每个页面逐一创建，从指向自身的单个页面开始。以概率p
    < 1，它将链接到现有页面之一，随机选择。以概率1-p，它将链接到现有页面，概率与该页面的入链数成比例。这一规则反映了新网页倾向于指向热门页面的普遍趋势。编写一个程序来模拟这个过程，并绘制入链数的直方图。'
- en: '**VMAs.** BST used in Unix kernels for managing a set of virtual memory areas
    (VMAs). Each VMA represents a section of memory in a Unix process. VMAs vary in
    size from 4KB to 1GB. Also want to support range queries to determine which VMAs
    overlap a given range. [Reference](http://www.stanford.edu/~blp/papers/libavl-abstract.pdf)'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**VMAs.** Unix内核中用于管理一组虚拟内存区域（VMAs）的BST。每个VMA代表Unix进程中的一部分内存。VMAs的大小从4KB到1GB不等。还希望支持范围查询，以确定哪些VMAs与给定范围重叠。[参考资料](http://www.stanford.edu/~blp/papers/libavl-abstract.pdf)'
- en: '**Internet peer cache.** Each IP packet sent by an Internet host is stamped
    with a 16-bit id that must be unique for that source-destination pair. Linux kernel
    uses an AVL tree indexed by IP address. Hashing would be faster, but want to avoid
    attacker sending IP packets with worst-case inputs. [Reference](http://www.stanford.edu/~blp/papers/libavl-abstract.pdf)'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**互联网对等缓存。**由互联网主机发送的每个IP数据包都带有一个必须对于该源-目的地对是唯一的16位ID。Linux内核使用以IP地址为索引的AVL树。哈希会更快，但希望避免攻击者发送具有最坏情况输入的IP数据包。[参考资料](http://www.stanford.edu/~blp/papers/libavl-abstract.pdf)'
- en: '**File indexing variants.**'
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**文件索引变体。**'
- en: Remove [stopwords](stopwords.txt), e.g., a, the, on, of. Implement using another
    set.
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移除[停用词](stopwords.txt)，例如，a，the，on，of。使用另一个集合来实现。
- en: Support multi-word queries. This requires a set intersection operation. If you
    always intersect with the smallest set first, this takes time proportional to
    the size of the smallest set.
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 支持多词查询。这需要进行集合交集操作。如果总是先与最小集合进行交集，那么这将花费与最小集合大小成正比的时间。
- en: Implement OR or other boolean logic.
  id: totrans-60
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现OR或其他布尔逻辑。
- en: Record the position of word or number of occurrences of word in a document.
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 记录文档中单词的位置或单词出现的次数。
- en: '**Arithmetic expression interpreter.** Write a program [Interpreter.java](Interpreter.java.html)
    to parse and evaluate expressions of the following form.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**算术表达式解释器。**编写一个程序[Interpreter.java](Interpreter.java.html)来解析和评估以下形式的表达式。'
- en: '[PRE1]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Variants.
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 变体。
- en: Add more more complicated expressions, e.g., z = 7 * (x + y * y), using conventional
    operator precedence.
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加更复杂的表达式，例如，z = 7 * (x + y * y)，使用传统的运算符优先级。
- en: Add more error-checking and recovery.
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加更多的错误检查和恢复。
