- en: 3.1   Elementary Symbol Tables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.1   基本符号表
- en: 原文：[https://algs4.cs.princeton.edu/31elementary](https://algs4.cs.princeton.edu/31elementary)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://algs4.cs.princeton.edu/31elementary](https://algs4.cs.princeton.edu/31elementary)
- en: Symbol table.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 符号表。
- en: The primary purpose of a *symbol table* is to associate a *value* with a *key*.
    The client can *insert* key–value pairs into the symbol table with the expectation
    of later being able to *search* for the value associated with a given key.![Typical
    symbol-table applications](../Images/a0e89ac6eea39d628856dbfa1b254052.png)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*符号表* 的主要目的是将 *值* 与 *键* 关联起来。客户端可以将键值对插入符号表，并期望以后能够搜索与给定键关联的值。![典型符号表应用](../Images/a0e89ac6eea39d628856dbfa1b254052.png)'
- en: API.
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API。
- en: Here is the API.![Symbol-table API](../Images/34e0b508863f9e6a5b1b3a8b0e7a9502.png)We
    consider several design choices for our implementations to make our code consistent,
    compact, and useful.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 API。![符号表 API](../Images/34e0b508863f9e6a5b1b3a8b0e7a9502.png)我们考虑了几种设计选择，以使我们的实现代码一致、紧凑和有用。
- en: '*Generics.* We consider the methods without specifying the types of keys and
    values being processed, using generics.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*泛型.* 我们考虑在不指定正在处理的键和值类型的情况下使用泛型的方法。'
- en: '*Duplicate keys.* Only one value is associated with each key (no duplicate
    keys in a table). When a client puts a key-value pair into a table already containing
    that key (and an associated value), the new value replaces the old one. These
    conventions define the *associative array abstraction*, where you can think of
    a symbol table as being just like an array, where keys are indices and values
    are array entries.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*重复键.* 每个键只关联一个值（表中没有重复键）。当客户端将一个包含该键（和关联值）的键值对放入已经包含该键的表中时，新值将替换旧值。这些约定定义了*关联数组抽象*，您可以将符号表视为类似于数组的结构，其中键是索引，值是数组条目。'
- en: '*Null values.* No key can be associated with the value `null`. This convention
    is directly tied to our specification in the API that `get()` should return `null`
    for keys not in the table. This convention has two (intended) consequences: First,
    we can test whether or not the symbol table defines a value associated with a
    given key by testing whether `get()` returns `null`. Second, we can use the operation
    of calling `put()` with `null` as its second (value) argument to implement deletion.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*空值.* 没有键可以与值 `null` 关联。这个约定直接与我们在 API 中规定的 `get()` 应该对不在表中的键返回 `null` 相关。这个约定有两个（预期的）后果：首先，我们可以通过测试
    `get()` 是否返回 `null` 来测试符号表是否定义了与给定键关联的值。其次，我们可以使用调用 `put()` 时将 `null` 作为第二个（值）参数来实现删除。'
- en: '*Deletion.* Deletion in symbol tables generally involves one of two strategies:
    *lazy* deletion, where we associate keys in the table with `null`, then perhaps
    remove all such keys at some later time, and *eager* deletion, where we remove
    the key from the table immediately. As just discussed, the code `put(key, null)`
    is an easy (lazy) implementation of `delete(key)`. When we give an (eager) implementation
    of `delete()`, it is intended to replace this default.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*删除.* 符号表中的删除通常涉及两种策略之一：*惰性*删除，其中我们将表中的键与 `null` 关联，然后可能在以后的某个时间删除所有这些键，以及*急切*删除，其中我们立即从表中删除键。正如刚才讨论的，代码
    `put(key, null)` 是 `delete(key)` 的一个简单（惰性）实现。当我们给出一个（急切）`delete()` 的实现时，它旨在替换此默认值。'
- en: '*Iterators.* The `keys()` method returns an `Iterable<Key>` object for clients
    to use to iterate through the keys.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*迭代器.* `keys()` 方法返回一个 `Iterable<Key>` 对象，供客户端用于遍历键。'
- en: '*Key equality.* Java requires that all objects implement an `equals()` method
    and provides implementations both for standard types such as `Integer`, `Double`,
    and `String` and for more complicated types such as `Date`, `File` and `URL`.
    For applications involving these types of data, you can just use the built-in
    implementation. For example, if `x` and `y` are `String` values, then `x.equals(y)`
    is true if and only if `x` and `y` have the same length and are identical in each
    character position. In practice, keys might be more complicated, as in [Person.java](Person.java.html).
    For such client-defined keys, you need to override `equals()`. Java''s convention
    is that `equals()` must implement an *equivalence relation*:'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*键相等性.* Java 要求所有对象实现一个 `equals()` 方法，并为标准类型（如 `Integer`、`Double` 和 `String`）以及更复杂类型（如
    `Date`、`File` 和 `URL`）提供实现。对于涉及这些类型数据的应用程序，您可以直接使用内置实现。例如，如果 `x` 和 `y` 是 `String`
    值，则 `x.equals(y)` 为 `true` 当且仅当 `x` 和 `y` 长度相同且在每个字符位置上都相同。在实践中，键可能更复杂，如[Person.java](Person.java.html)。对于这样的客户定义键，您需要重写
    `equals()`。Java 的约定是 `equals()` 必须实现一个*等价关系*:'
- en: '*Reflexive*: `x.equals(x)` is `true`.'
  id: totrans-12
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自反性*: `x.equals(x)` 为 `true`。'
- en: '*Symmetric*: `x.equals(y)` is `true` if and only if `y.equals(x)` is `true`.'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*对称性*: `x.equals(y)` 当且仅当 `y.equals(x)` 为 `true` 时，`true`。'
- en: '*Transitive*: if `x.equals(y)` and `y.equals(z)` are `true`, then so is `x.equals(z)`.'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*传递性*: 如果 `x.equals(y)` 和 `y.equals(z)` 为 `true`，那么 `x.equals(z)` 也是 `true`。'
- en: 'In addition, `equals()` must take an `Object` as argument and satisfy the following
    properties:'
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '此外，`equals()` 必须以 `Object` 作为参数，并满足以下属性:'
- en: '*Consistency*: multiple invocations of `x.equals(y)` consistently return the
    same value, provided neither object is modified'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*一致性*: 多次调用 `x.equals(y)` 一致地返回相同的值，前提是没有修改任何对象'
- en: '*Not null*: `x.equals(null)` returns `false`.'
  id: totrans-17
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*非空*: `x.equals(null)` 返回 `false`。'
- en: A best practice is to make `Key` types immutable, because consistency cannot
    otherwise be guaranteed.
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 最佳实践是使 `Key` 类型不可变，因为否则无法保证一致性。
- en: Ordered symbol tables.
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 有序符号表。
- en: In typical applications, keys are `Comparable` objects, so the option exists
    of using the code `a.compareTo(b)` to compare two keys `a` and `b`. Several symbol-table
    implementations take advantage of order among the keys that is implied by `Comparable`
    to provide efficient implementations of the `put()` and `get()` operations. More
    important, in such implementations, we can think of the symbol table as keeping
    the keys in order and consider a significantly expanded API that defines numerous
    natural and useful operations involving relative key order. For applications where
    keys are `Comparable`, we implement the following API:![Ordered Symbol-table API](../Images/c57f13ccd6851f3798bbec5af0c043f3.png)![Examples
    of ordered symbol table operations](../Images/34f6fe5ddf15e5b2b54e085caf300660.png)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在典型应用中，键是`Comparable`对象，因此存在使用代码`a.compareTo(b)`来比较两个键`a`和`b`的选项。几个符号表实现利用`Comparable`暗示的键之间的顺序来提供`put()`和`get()`操作的高效实现。更重要的是，在这种实现中，我们可以将符号表视为按顺序保留键，并考虑一个定义了许多自然和有用的涉及相对键顺序的操作的显著扩展API。对于键是`Comparable`的应用程序，我们实现以下API：![有序符号表API](../Images/c57f13ccd6851f3798bbec5af0c043f3.png)![有序符号表操作示例](../Images/34f6fe5ddf15e5b2b54e085caf300660.png)
- en: '*Minimum and maximum.* Perhaps the most natural queries for a set of ordered
    keys are to ask for the smallest and largest keys. We have already encountered
    the need for these operations (in our discussion of priority queues in Section
    3.4).'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*最小值和最大值*。对于一组有序键来说，可能最自然的查询是询问最小和最大的键。我们已经在第3.4节讨论优先队列时遇到了这些操作的需求。'
- en: '*Floor and ceiling.* Given a key, it is often useful to be able to perform
    the *floor* operation (find the largest key that is less than or equal to the
    given key) and the *ceiling* operation (find the smallest key that is greater
    than or equal to the given key). The nomenclature comes from functions defined
    on real numbers (the floor of a real number x is the largest integer that is smaller
    than or equal to x and the ceiling of a real number x is the smallest integer
    that is greater than or equal to x).'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*下界和上界*。给定一个键，通常有必要执行*下界*操作（找到小于或等于给定键的最大键）和*上界*操作（找到大于或等于给定键的最小键）。这个命名法来自于实数上定义的函数（实数x的下界是小于或等于x的最大整数，实数x的上界是大于或等于x的最小整数）。'
- en: '*Rank and selection.* The basic operations for determining where a new key
    fits in the order are the *rank* operation (find the number of keys less than
    a given key) and the *select* operation (find the key with a given rank). We also
    have already encountered the need for these operations, in our discussion of sort
    applications in Section 2.5.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*排名和选择*。确定新键在顺序中的位置的基本操作是*排名*操作（找到小于给定键的键数）和*选择*操作（找到具有给定排名的键）。我们已经在第2.5节讨论排序应用时遇到了这些操作的需求。'
- en: '*Range queries.* How many keys fall within a given range? Which keys fall in
    a given range? The two-argument `size()` and `keys()` methods that answer these
    questions are useful in many applications, particularly in large databases.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*范围查询*。有多少个键落在给定范围内？哪些键在给定范围内？回答这些问题的两个参数为`size()`和`keys()`方法在许多应用中非常有用，特别是在大型数据库中。'
- en: '*Delete minimum and delete maximum.* Our ordered symbol table API adds to the
    basic API methods to delete the maximum and minimum keys (and their associated
    values).'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*删除最小值和删除最大值*。我们的有序符号表API添加了基本API方法来删除最大和最小键（及其关联的值）。'
- en: '*Exceptional cases.* When a method is to return a key and there is no key fitting
    the description in the table, our convention is to throw an exception.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*异常情况*。当一个方法应该返回一个键，而表中没有符合描述的键时，我们的约定是抛出异常。'
- en: '*Key equality (revisited).* The best practice in Java is to make `compareTo()`
    consistent with `equals()` in all `Comparable` types. That is, for every pair
    of objects `a` and `b` in any give `Comparable` type, it should be the case that
    `(a.compareTo(b) == 0)` and `a.equals(b)` have the same value.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*键相等性（重新审视）*。在Java中的最佳实践是使`compareTo()`与所有`Comparable`类型中的`equals()`一致。也就是说，对于任何给定`Comparable`类型中的对象对`a`和`b`，应该满足`(a.compareTo(b)
    == 0)`和`a.equals(b)`具有相同的值。'
- en: Sample clients.
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 示例客户端。
- en: 'We consider two clients: a test client that we use to trace algorithm behavior
    on small inputs and a performance client.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们考虑两种客户端：一个测试客户端，用于跟踪算法在小输入上的行为，以及一个性能客户端。
- en: '*Test client.* The `main()` client in each of our symbol table implementations
    reads in a sequence of strings from standard input, builds a symbol table by associating
    the value i with the ith key in the input, and then prints the table.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*测试客户端*。我们符号表实现中的`main()`客户端从标准输入中读取一系列字符串，通过将值i与输入中的第i个键关联来构建符号表，然后打印表。'
- en: '*Frequency counter.* Program [FrequencyCounter.java](FrequencyCounter.java.html)
    is a symbol-table client that finds the number of occurrences of each string (having
    at least as many characters as a given threshold length) in a sequence of strings
    from standard input, then iterates through the keys to find the one that occurs
    the most frequently.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*频率计数器*。程序[FrequencyCounter.java](FrequencyCounter.java.html)是一个符号表客户端，它在标准输入中找到每个字符串（至少具有给定阈值长度的字符）的出现次数，然后遍历键以找到出现最频繁的键。'
- en: Sequential search in an unordered linked list.
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 无序链表中的顺序搜索。
- en: Program [SequentialSearchST.java](SequentialSearchST.java.html) implements a
    symbol table with a linked list of nodes that contain keys and values. To implement
    `get()`, we scan through the list, using `equals()` to compare the search key
    with the key in each node in the list. If we find the match, we return the associated
    value; if not, we return `null`. To implement `put()`, we also scan through the
    list, using `equals()` to compare the client key with the key in each node in
    the list. If we find the match, we update the value associated with that key to
    be the value given in the second argument; if not, we create a new node with the
    given key and value and insert it at the beginning of the list. This method is
    known as *sequential search*.![Sequential search](../Images/8211937f9eb8e44a579b4fe0c723c646.png)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[SequentialSearchST.java](SequentialSearchST.java.html)实现了一个包含键和值的节点链表的符号表。要实现`get()`，我们通过列表扫描，使用`equals()`将搜索键与列表中每个节点中的键进行比较。如果找到匹配项，则返回相关值；如果没有，则返回`null`。要实现`put()`，我们也通过列表扫描，使用`equals()`将客户键与列表中每个节点中的键进行比较。如果找到匹配项，则将与该键关联的值更新为第二个参数中给定的值；如果没有，则创建一个具有给定键和值的新节点，并将其插入列表开头。这种方法称为*顺序搜索*。![顺序搜索](../Images/8211937f9eb8e44a579b4fe0c723c646.png)
- en: Proposition A.
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题 A.
- en: Unsuccessful search and insert in an (unordered) linked-list symbol table both
    use N compares, and successful search uses N compares in the worst case. In particular,
    inserting N keys into an initially empty linked-list symbol table uses ~N^2/2
    compares.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在（无序）链表符号表中，不成功的搜索和插入都使用 N 次比较，在最坏情况下成功的搜索使用 N 次比较。特别是，将 N 个键插入到最初为空的链表符号表中使用
    ~N^2/2 次比较。
- en: Binary search in an ordered array
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在有序数组中进行二分查找
- en: . Program [BinarySearchST.java](BinarySearchST.java.html) implements the ordered
    symbol table API. The underlying data structure is two parallel array, with the
    keys kept in order. The heart of the implementation is the `rank()` method, which
    returns the number of keys smaller than a given key. For `get()`, the rank tells
    us precisely where the key is to be found if it is in the table (and, if it is
    not there, that it is not in the table). For `put()`, the rank tells us precisely
    where to update the value when the key is in the table, and precisely where to
    put the key when the key is not in the table. We move all larger keys over one
    position to make room (working from back to front) and insert the given key and
    value into the proper positions in their respective arrays.![Binary search symbol
    table](../Images/32c264b93d2ae14592d880bbf67cfbba.png)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: . 程序[BinarySearchST.java](BinarySearchST.java.html)实现了有序符号表 API。底层数据结构是两个并行数组，键按顺序保存。实现的核心是`rank()`方法，它返回小于给定键的键数。对于`get()`，rank告诉我们如果键在表中，则键应该被找到的确切位置（如果不在表中，则不在表中）。对于`put()`，rank告诉我们当键在表中时精确更新值的位置，当键不在表中时精确放置键的位置。我们将所有较大的键向后移动一个位置以腾出空间（从后向前工作），并将给定的键和值插入到各自数组中的适当位置。![二分查找符号表](../Images/32c264b93d2ae14592d880bbf67cfbba.png)
- en: '*Binary search.* The reason that we keep keys in an ordered array is so that
    we can use array indexing to dramatically reduce the number of compares required
    for each search, using a venerable classic algorithm known as *binary search*.
    The basic idea is simple: we maintain indices into the sorted key array that delimit
    the subarray that might contain the search key. To search, we compare the search
    key against the key in the middle of the subarray. If the search key is less than
    the key in the middle, we search in the left half of the subarray; if the search
    key is greater than the key in the middle we search in the right half of the subarray;
    otherwise the key in the middle is equal to the search key.![Rank](../Images/0a1ba025abfb5277c196a9bf1de9555f.png)'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*二分查找.* 我们将键保持在有序数组中的原因是为了可以使用数组索引来显著减少每次搜索所需的比��次数，使用一种著名的经典算法称为*二分查找*。基本思想很简单：我们维护索引到排序键数组的指示符，限定可能包含搜索键的子数组。要搜索，我们将搜索键与子数组中间的键进行比较。如果搜索键小于中间键，则在子数组的左半部分搜索；如果搜索键大于中间键，则在子数组的右半部分搜索；否则中间键等于搜索键。![等级](../Images/0a1ba025abfb5277c196a9bf1de9555f.png)'
- en: '*Other operations.* Since the keys are kept in an ordered array, most of the
    order-based operations are compact and straightforward.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*其他操作.* 由于键保持在有序数组中，大多数基于顺序的操作都是紧凑且简单的。'
- en: Proposition B.
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题 B.
- en: Binary search in an ordered array with N keys uses no more than lg N + 1 compares
    for a search (successful or unsuccessful) in the worst case.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有 N 个键的有序数组中进行二分查找，在最坏情况下搜索（成功或失败）不会超过 lg N + 1 次比较。
- en: Proposition C.
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题 C.
- en: Inserting a new key into an ordered array uses ~ 2N array accesses in the worst
    case, so inserting N keys into an initially empty table uses ~ N^2 array accesses
    in the worst case.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 将新键插入有序数组中在最坏情况下使用 ~ 2N 个数组访问，因此将 N 个键插入到最初为空的表中在最坏情况下使用 ~ N^2 个数组访问。
- en: Exercises
  id: totrans-44
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Write a client program [GPA.java](GPA.java.html) that creates a symbol table
    mapping letter grades to numerical scores, as in the table below, then reads from
    standard input a list of letter grades and computes and prints the GPA (the average
    of the numerical scores of the corresponding grades).
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个客户端程序[GPA.java](GPA.java.html)，创建一个将字母等级映射到数字分数的符号表，如下表所示，然后从标准输入读取字母等级列表，并计算并打印
    GPA（对应等级的数字分数的平均值）。
- en: '[PRE0]'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Develop a symbol-table implementation [ArrayST.java](ArrayST.java.html) that
    uses an (unordered) array as the underlying data structure to implement our basic
    symbol table API.
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发一个符号表实现[ArrayST.java](ArrayST.java.html)，它使用（无序）数组作为底层数据结构来实现我们的基本符号表 API。
- en: Implement `size()`, `delete()`, and `keys()` for [SequentialSearchST.java](SequentialSearchST.java.html).
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为[SequentialSearchST.java](SequentialSearchST.java.html)实现`size()`、`delete()`和`keys()`。
- en: Implement the `delete()` method for [BinarySearchST.java](BinarySearchST.java.html).
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为[BinarySearchST.java](BinarySearchST.java.html)实现`delete()`方法。
- en: Implement the `floor()` method for [BinarySearchST.java](BinarySearchST.java.html).
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为[BinarySearchST.java](BinarySearchST.java.html)实现`floor()`方法。
- en: Creative Problems
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意问题
- en: '**Test client.** Write a test client [TestBinarySearchST.java](TestBinarySearchST.java.html)
    for use in testing the implementations of `min()`, `max()`, `floor()`, `ceiling()`,
    `select()`, `rank()`, `deleteMin()`, <t>deleteMax(), and `keys()`.</t>'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**测试客户端。**编写一个测试客户端[TestBinarySearchST.java](TestBinarySearchST.java.html)，用于测试`min()`、`max()`、`floor()`、`ceiling()`、`select()`、`rank()`、`deleteMin()`、`deleteMax()`和`keys()`的实现。'
- en: '**Certification.** Add `assert` statements to [BinarySearchST.java](BinarySearchST.java.html)
    to check algorithm invariants and data structure integrity after every insertion
    and deletion. For example, every index `i` should always be equal to `rank(select(i))`
    and the array should always be in order.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**认证。**在[BinarySearchST.java](BinarySearchST.java.html)中添加`assert`语句，以检查每次插入和删除后的算法不变性和数据结构完整性。例如，每个索引`i`应始终等于`rank(select(i))`，并且数组应始终保持有序。'
- en: Web Exercises
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网页练习
- en: '**Phone number data type.** Write a data type [PhoneNumber.java](PhoneNumber.java.html)
    that implements US phone numbers. Include an `equals()` method.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**电话号码数据类型。**编写一个实现美国电话号码的数据类型[PhoneNumber.java](PhoneNumber.java.html)，包括一个`equals()`方法。'
- en: '**Student data type.** Write a data type [Student.java](Student.java.html)
    that implements a student with a name and section. Include an `equals()` method.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**学生数据类型。**编写一个实现具有姓名和班级的学生的数据类型[Student.java](Student.java.html)，包括一个`equals()`方法。'
