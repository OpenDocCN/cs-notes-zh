- en: 3.2   Binary Search Trees
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.2   二叉搜索树
- en: 原文：[https://algs4.cs.princeton.edu/32bst](https://algs4.cs.princeton.edu/32bst)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://algs4.cs.princeton.edu/32bst](https://algs4.cs.princeton.edu/32bst)
- en: We examine a symbol-table implementation that combines the flexibility of insertion
    in linked lists with the efficiency of search in an ordered array. Specifically,
    using two links per node leads to an efficient symbol-table implementation based
    on the binary search tree data structure, which qualifies as one of the most fundamental
    algorithms in computer science.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们研究了一种符号表实现，它将链表中的插入灵活性与有序数组中的搜索效率结合起来。具体来说，每个节点使用两个链接会导致基于二叉搜索树数据结构的高效符号表实现，这被认为是计算机科学中最基本的算法之一。
- en: '**Definition.** A *binary search tree* (BST) is a binary tree where each node
    has a `Comparable` key (and an associated value) and satisfies the restriction
    that the key in any node is larger than the keys in all nodes in that node''s
    left subtree and smaller than the keys in all nodes in that node''s right subtree.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义.** *二叉搜索树*（BST）是一种二叉树，其中每个节点都有一个`Comparable`键（和一个相关联的值），并满足一个限制条件，即任何节点中的键都大于该节点左子树中所有节点的键，且小于该节点右子树中所有节点的键。'
- en: '| ![Anatomy of a binary tree](../Images/c7a186b1ba47df404b4522dcea8d73a1.png)
    |                | ![Anatomy of a binary search tree](../Images/46c3569875a35c583ddeec5eb1b56c72.png)
    |'
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ![二叉树的解剖](../Images/c7a186b1ba47df404b4522dcea8d73a1.png) |               
    | ![二叉搜索树的解剖](../Images/46c3569875a35c583ddeec5eb1b56c72.png) |'
- en: Basic implementation.
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本实现。
- en: Program [BST.java](BST.java.html) implements the ordered symbol-table API using
    a binary search tree. We define a inner private class to define nodes in BST.
    Each node contains a key, a value, a left link, a right link, and a node count.
    The left link points to a BST for items with smaller keys, and the right link
    points to a BST for items with larger keys. The instance variable `N` gives the
    node count in the subtree rooted at the node. This field facilitates the implementation
    of various ordered symbol-table operations, as you will see.![Subtree counts in
    a BST](../Images/0dd9ac1ad9d1c896a3bc99b50f43bd46.png)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[BST.java](BST.java.html)使用二叉搜索树实现了有序符号表API。我们定义一个内部私有类来定义BST中的节点。每个节点包含一个��、一个值、一个左��接、一个右链接和一个节点计数。左链接指向具有较小键的项目的BST，右链接指向具有较大键的项目的BST。实例变量`N`给出了根节点下子树中的节点计数。这个字段有助于实现各种有序符号表操作，你将看到。![在BST中的子树计数](../Images/0dd9ac1ad9d1c896a3bc99b50f43bd46.png)
- en: '*Search.* A recursive algorithm to search for a key in a BST follows immediately
    from the recursive structure: If the tree is empty, we have a search miss; if
    the search key is equal to the key at the root, we have a search hit. Otherwise,
    we search (recursively) in the appropriate subtree. The recursive `get()` method
    implements this algorithm directly. It takes a node (root of a subtree) as first
    argument and a key as second argument, starting with the root of the tree and
    the search key.![Search in a BST](../Images/cd9a9e7be622ed5dbd12394957c314d4.png)'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*搜索.* 一个递归算法用于在BST中搜索键，直接遵循递归结构：如果树为空，则搜索未命中；如果搜索键等于根节点的键，则搜索命中。否则，我们在适当的子树中搜索（递归）。递归的`get()`方法直接实现了这个算法。它以一个节点（子树的根）作为第一个参数，以一个键作为第二个参数，从树的根和搜索键开始。![在BST中搜索](../Images/cd9a9e7be622ed5dbd12394957c314d4.png)'
- en: '*Insert.* Insert is not much more difficult to implement than search. Indeed,
    a search for a key not in the tree ends at a null link, and all that we need to
    do is replace that link with a new node containing the key. The recursive `put()`
    method accomplishes this task using logic similar to that we used for the recursive
    search: If the tree is empty, we return a new node containing the key and value;
    if the search key is less than the key at the root, we set the left link to the
    result of inserting the key into the left subtree; otherwise, we set the right
    link to the result of inserting the key into the right subtree.![Insert in a BST](../Images/25a6c909d9984b81f5fec5a4b87d450b.png)'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*插入.* 插入比搜索实现稍微困难一些。实际上，对于树中不存在的键的搜索会在一个空链接处结束，我们需要做的就是用包含键的新节点替换该链接。递归的`put()`方法使用了与递归搜索相似的逻辑来完成这个任务：如果树为空，我们返回一个包含键和值的新节点；如果搜索键小于根节点的键，我们将左链接设置为将键插入左子树的结果；否则，我们将右链接设置为将键插入右子树的结果。![在BST中插入](../Images/25a6c909d9984b81f5fec5a4b87d450b.png)'
- en: Analysis.
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 分析。
- en: The running times of algorithms on binary search trees depend on the shapes
    of the trees, which, in turn, depends on the order in which keys are inserted.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 算法在二叉搜索树上的运行时间取决于树的形状，而树的形状又取决于键的插入顺序。
- en: '| ![Best case for BST](../Images/1a5f6b9819df8b623bb7b94861c1dd81.png) |     
              | ![Typical case for BST](../Images/a6304eb52b2a7851d53fe976305f1970.png)
                   | ![Worst case for BST](../Images/f74efc1d5200ad692f7b55374163bc0f.png)
    |'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ![BST的最佳情况](../Images/1a5f6b9819df8b623bb7b94861c1dd81.png) |               
    | ![BST的典型情况](../Images/a6304eb52b2a7851d53fe976305f1970.png)                |
    ![BST的最坏情况](../Images/f74efc1d5200ad692f7b55374163bc0f.png) |'
- en: 'It is reasonable, for many applications, to use the following simple model:
    We assume that the keys are (uniformly) random, or, equivalently, that they are
    inserted in random order.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多应用程序来说，使用以下简单模型是合理的：我们假设键是（均匀）随机的，或者等效地说，它们是以随机顺序插入的。
- en: Proposition.
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。
- en: Search hits in a BST built from N random keys requires ~ 2 ln N (about 1.39
    lg N) compares on the average.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在由N个随机键构建的BST中，搜索命中平均需要约2 ln N（约1.39 lg N）次比较。
- en: Proposition.
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。
- en: Insertion and search misses in a BST built from N random keys requires ~ 2 ln
    N (about 1.39 lg N) compares on the average.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在由N个随机键构建的BST中，插入和搜索未命中平均需要约2 ln N（约1.39 lg N）次比较。
- en: The visualization below shows the result of inserting 255 keys in a BST in random
    order. It displays the number of keys (N), the maximum number of nodes on a path
    from the root to a leaf (max), the average number of nodes on a path from the
    root to a leaf (avg), the average number of nodes on a path from the root to a
    leaf in a perfectly balanced BST (opt).
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的可视化展示了以随机顺序向二叉搜索树中插入 255 个键的结果。它显示了键的数量（N）、从根到叶子节点的路径上节点的最大数量（max）、从根到叶子节点的路径上节点的平均数量（avg）、在完全平衡的二叉搜索树中从根到叶子节点的路径上节点的平均数量（opt）。
- en: <media/bst-255random.mov>
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <media/bst-255random.mov>
- en: ''
  id: totrans-19
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Your browser does not support the video tag.
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 您的浏览器不支持视频标签。
- en: Order-based methods and deletion.
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基于顺序的方法和删除。
- en: An important reason that BSTs are widely used is that they allow us to keep
    the keys *in order*. As such, they can serve as the basis for implementing the
    numerous methods in our ordered symbol-table API.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 二叉搜索树被广泛使用的一个重要原因是它们可以让我们保持键*有序*。因此，它们可以作为实现有序符号表 API 中众多方法的基础。
- en: '*Minimum and maximum.* If the left link of the root is null, the smallest key
    in a BST is the key at the root; if the left link is not null, the smallest key
    in the BST is the smallest key in the subtree rooted at the node referenced by
    the left link. Finding the maximum key is similar, moving to the right instead
    of to the left.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*最小值和最大值。* 如果根节点的左链接为空，则二叉搜索树中的最小键是根节点的键；如果左链接不为空，则二叉搜索树中的最小键是左链接引用的节点为根的子树中的最小键。查找最大键类似，向右移动而不是向左移动。'
- en: '*Floor and ceiling.* If a given key key is less than the key at the root of
    a BST, then the floor of key (the largest key in the BST less than or equal to
    key) *must* be in the left subtree. If key is greater than the key at the root,
    then the floor of key *could* be in the right subtree, but only if there is a
    key smaller than or equal to key in the right subtree; if not (or if key is equal
    to the key at the root) then the key at the root is the floor of key. Finding
    the ceiling is similar, interchanging right and left.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*下取整和上取整。* 如果给定的键 key 小于二叉搜索树根节点的键，则 key 的下取整（小于或等于 key 的二叉搜索树中的最大键）*必须*在左子树中。如果
    key 大于根节点的键，则 key 的下取整*可能*在右子树中，但只有在右子树中存在小于或等于 key 的键时才可能；如果没有（或者 key 等于根节点的键），则根节点的键就是
    key 的下取整。查找上取整类似，交换右子树和左子树。'
- en: '*Selection.* Suppose that we seek the key of rank *k* (the key such that precisely
    *k* other keys in the BST are smaller). If the number of keys *t* in the left
    subtree is larger than *k*, we look (recursively) for the key of rank `k` in the
    left subtree; if *t* is equal to *k*, we return the key at the root; and if *t*
    is smaller than *k*, we look (recursively) for the key of rank *k - t - 1* in
    the right subtree.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*选择。* 假设我们寻找排名为 *k* 的键（即 BST 中恰好有 *k* 个其他键比它小）。如果左子树中的键数 *t* 大于 *k*，我们在左子树中查找排名为
    `k` 的键；如果 *t* 等于 *k*，我们返回根节点的键；如果 *t* 小于 *k*，我们在右子树中查找排名为 *k - t - 1* 的键。'
- en: '| ![Floor in a BST](../Images/a98d1130955c98b6a3ea3e4f29bdc316.png) |     
                   | ![Selection in a BST](../Images/bee19829aa95cfddf9c5a08b587dae81.png)
    |'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| ![二叉搜索树中的下取整](../Images/a98d1130955c98b6a3ea3e4f29bdc316.png) |          
              | ![二叉搜索树中的选择](../Images/bee19829aa95cfddf9c5a08b587dae81.png) |'
- en: '*Rank.* If the given key is equal to the key at the root, we return the number
    of keys *t* in the left subtree; if the given key is less than the key at the
    root, we return the rank of the key in the left subtree; and if the given key
    is larger than the key at the root, we return *t* plus one (to count the key at
    the root) plus the rank of the key in the right subtree.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*排名。* 如果给定的键等于根节点的键，则返回左子树中键数 *t*；如果给定的键小于根节点的键，则返回左子树中键的排名；如果给定的键大于根节点的键，则返回
    *t* 加一（计算根节点的键）再加上右子树中键的排名。'
- en: '*Delete the minimum and maximum.* For delete the minimum, we go left until
    finding a node that that has a null left link and then replace the link to that
    node by its right link. The symmetric method works for delete the maximum.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*删除最小值和最大值。* 对于删除最小值，我们向左移动直到找到一个具有空左链接的节点，然后用其右链接替换指向该节点的链接。对于删除最大值，对称方法适用。'
- en: '*Delete.* We can proceed in a similar manner to delete any node that has one
    child (or no children), but what can we do to delete a node that has two children?
    We are left with two links, but have a place in the parent node for only one of
    them. An answer to this dilemma, first proposed by T. Hibbard in 1962, is to delete
    a node x by replacing it with its *successor*. Because `x` has a right child,
    its successor is the node with the smallest key in its right subtree. The replacement
    preserves order in the tree because there are no keys between `x.key` and the
    successor''s key. We accomplish the task of replacing <t>x by its successor in
    four (!) easy steps:'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*删除。* 我们可以类似地删除任何只有一个子节点（或没有子节点）的节点，但是如何删除具有两个子节点的节点呢？我们剩下两个链接，但是父节点只有一个位置可以放置它们中的一个。1962
    年 T. Hibbard 首次提出的解决这个困境的方法是通过用其*后继*替换节点 x 来删除节点 x。因为 `x` 有一个右子节点，其后继是其右子树中具有最小键的节点。替换保持了树中的顺序，因为在
    `x.key` 和后继的键之间没有其他键。我们通过四个（！）简单的步骤完成了用其后继替换 x 的任务：'
- en: Save a link to the node to be deleted in `t`
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `t` 中保存要删除的节点的链接
- en: Set `x` to point to its successor `min(t.right)`.
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `x` 设置为其后继 `min(t.right)`。
- en: Set the right link of `x` (which is supposed to point to the BST containing
    all the keys larger than `x.key`) to `deleteMin(t.right)`, the link to the BST
    containing all the keys that are larger than `x.key` after the deletion.
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `x` 的右链接（应指向包含所有大于 `x.key` 的键的二叉搜索树）设置为 `deleteMin(t.right)`，即删除后包含所有大于 `x.key`
    的键的二叉搜索树的链接。
- en: Set the left link of `x` (which was null) to `t.left` (all the keys that are
    less than both the deleted key and its successor).
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `x` 的左链接（原本为空）设置为 `t.left`（所有小于被删除键和其后继的键）。
- en: '| ![Delete the min in a BST](../Images/f72f7068523c42ab128868a46ca63f99.png)
    |                     | ![Hibbard deletion in a BST](../Images/05630d0dcdec39edc2477bb7a258679f.png)
    |'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| ![删除二叉查找树中的最小值](../Images/f72f7068523c42ab128868a46ca63f99.png) |          
              | ![二叉查找树中的Hibbard删除](../Images/05630d0dcdec39edc2477bb7a258679f.png)
    |'
- en: While this method does the job, it has a flaw that might cause performance problems
    in some practical situations. The problem is that the choice of using the successor
    is arbitrary and not symmetric. Why not use the predecessor?
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管这种方法能够完成任务，但它有一个缺点，在某些实际情况下可能会导致性能问题。问题在于使用后继者是任意的，而不是对称的。为什么不使用前任者呢？
- en: '*Each BST contains 150 nodes. We then repeatedly delete (via Hibbard deletion)
    and insert keys at random. The BST becomes skewed toward the left.*'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*每个二叉查找树包含150个节点。然后我们通过Hibbard删除方法重复删除和随机插入键。二叉查找树向左倾斜。*'
- en: ''
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: <media/hibbard-150random.mov>
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <media/hibbard-150random.mov>
- en: ''
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: Your browser does not support the video tag.
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 您的浏览器不支持视频标签。
- en: ''
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Range search.* To implement the `keys()` method that returns the keys in a
    given range, we begin with a basic recursive BST traversal method, known as *inorder*
    traversal. To illustrate the method, we consider the task of printing all the
    keys in a BST in order. To do so, print all the keys in the left subtree (which
    are less than the key at the root by definition of BSTs), then print the key at
    the root, then print all the keys in the right subtree, (which are greater than
    the key at the root by definition of BSTs).'
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*范围搜索。* 为了实现返回给定范围内键的`keys()`方法，我们从一个基本的递归二叉查找树遍历方法开始，称为*中序*遍历。为了说明这种方法，我们考虑按顺序打印二叉查找树中所有键的任务。为此，首先打印左子树中的所有键（根据二叉查找树的定义，这些键小于根键），然后打印根键，然后打印右子树中的所有键（根据二叉查找树的定义，这些键大于根键）。'
- en: ''
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: ''
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: ''
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
- en: To implement the two-argument `keys()` method, we modify this code to add each
    key that is in the range to a `Queue`, and to skip the recursive calls for subtrees
    that cannot contain keys in the range.</t>
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_BQ
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要实现带有两个参数的`keys()`方法，我们修改这段代码，将在范围内的每个键添加到一个`Queue`中，并跳过不能包含范围内键的子树的递归调用。
- en: Proposition.
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 建议。
- en: Search, insertion, finding the minimum, finding the maximum, floor, ceiling,
    rank, select, delete the minimum, delete the maximum, delete, and range count
    operations all take time proportional to the height of the tree, in the worst
    case.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索、插入、查找最小值、查找最大值、floor、ceiling、rank、select、删除最小值、删除最大值、删除和范围计数操作在最坏情况下都需要时间与树的高度成比例。
- en: Exercises
  id: totrans-51
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Give five orderings of the keys `A X C S E R H` that, when inserted into an
    initially empty BST, produce the *best-case* tree.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出五种键`A X C S E R H`的排序方式，当插入到一个初始为空的二叉查找树时，产生*最佳情况*的树。
- en: '*Solution.* Any sequence that inserts H first; C before A and E; S before R
    and X.'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 任何首先插入H；在A和E之前插入C；在R和X之前插入S的序列。'
- en: 'Add to [BST.java](BST.java.html) a method `height()` that computes the height
    of the tree. Develop two implementations: a recursive method (which takes linear
    time and space proportional to the height), and method like `size()` that adds
    a field to each node in the tree (and takes linear space and constant time per
    query).'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在[BST.java](BST.java.html)中添加一个计算树高度的方法`height()`。开发两种实现：一个递归方法（需要与树高成比例的线性时间和空间），以及像`size()`那样为树中的每个节点添加一个字段的方法（需要线性空间和每次查询的常数时间）。
- en: Write a test client [TestBST.java](TestBST.java.html) for use in testing the
    implementations of `min()`, `max()`, `floor()`, `ceiling()`, `select()`, `rank()`,
    `deleteMin()`, `deleteMax()`, and `keys()` that are given in the text.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了测试文本中给出的`min()`、`max()`、`floor()`、`ceiling()`、`select()`、`rank()`、`deleteMin()`、`deleteMax()`和`keys()`的实现，编写一个测试客户端[TestBST.java](TestBST.java.html)。
- en: Give nonrecursive implementations of `get()`, `put()`, and `keys()` for BST.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出二叉查找树的`get()`、`put()`和`keys()`的非递归实现。
- en: '*Solution:* [NonrecursiveBST.java](NonrecursiveBST.java.html)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案：*[NonrecursiveBST.java](NonrecursiveBST.java.html)'
- en: Creative Problems
  id: totrans-58
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意问题
- en: '**Perfect balance.** Write a program [PerfectBalance.java](PerfectBalance.java.html)
    that inserts a set of keys into an initially empty BST such that the tree produced
    is equivalent to binary search, in the sense that the sequence of compares done
    in the search for any key in the BST is the same as the sequence of compares used
    by binary search for the same set of keys.'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**完美平衡。** 编写一个程序[PerfectBalance.java](PerfectBalance.java.html)，将一组键插入到一个初始为空的二叉查找树中，使得生成的树等同于二叉搜索，即对于二叉查找树中任何键的搜索所做的比较序列与二叉搜索对相同键集的比较序列相同。'
- en: '*Hint*: Put the median at the root and recursively build the left and right
    subtree.'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：将中位数放在根节点，并递归构建左子树和右子树。'
- en: '**Certification.** Write a method `isBST()` in [BST.java](BST.java.html) that
    takes a `Node` as argument and returns `true` if the argument node is the root
    of a binary search tree, `false` otherwise.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**认证。** 在[BST.java](BST.java.html)中编写一个名为`isBST()`的方法，该方法以一个`Node`作为参数，并在参数节点是二叉查找树根节点时返回`true`，否则返回`false`。'
- en: '**Subtree count check.** Write a recursive method `isSizeConsistent()` in [BST.java](BST.java.html)
    that takes a `Node` as argument and returns `true` if the subtree count field
    `N` is consistent in the data structure rooted at that node, `false` otherwise.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**子树计数检查。** 在[BST.java](BST.java.html)中编写一个递归方法`isSizeConsistent()`，该方法以一个`Node`作为参数，并在该节点根的数据结构中`N`字段一致时返回`true`，否则返回`false`。'
- en: '**Select/rank check.** Write a method `isRankConsistent()` in [BST.java](BST.java.html)
    that checks, for all `i` from `0` to `size() - 1`, whether `i` is equal to `rank(select(i))`
    and, for all keys in the BST, whether `key` is equal to `select(rank(key))`.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**选择/排名检查。** 在[BST.java](BST.java.html)中编写一个名为`isRankConsistent()`的方法，检查对于所有`i`从`0`到`size()
    - 1`，是否`i`等于`rank(select(i))`，以及对于二叉查找树中的所有键，是否`key`等于`select(rank(key))`。'
- en: Web Exercises
  id: totrans-64
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Web练习
- en: '**The great tree-list recursion problem**. A binary search tree and a circular
    doubly linked list are conceptually built from the same type of nodes - a data
    field and two references to other nodes. Given a binary search tree, rearrange
    the references so that it becomes a circular doubly-linked list (in sorted order).
    Nick Parlante describes this as [one of the neatest recursive pointer problems
    ever devised](http://cslibrary.stanford.edu/109/TreeListRecursion.html). *Hint*:
    create a circularly linked list A from the left subtree, a circularly linked list
    B from the right subtree, and make the root a one node circularly linked list.
    Them merge the three lists.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**伟大的树-列表递归问题**。 二叉搜索树和循环双向链表在概念上都是由相同类型的节点构建的 - 一个数据字段和两个指向其他节点的引用。 给定一个二叉搜索树，重新排列引用，使其成为一个循环双向链表（按排序顺序）。
    尼克·帕兰特将其描述为[有史以来设计的最整洁的递归指针问题之一](http://cslibrary.stanford.edu/109/TreeListRecursion.html)。
    *提示*：从左子树创建一个循环链接列表A，从右子树创建一个循环链接列表B，并使根节点成为一个节点的循环链接列表。 然后合并这三个列表。'
- en: '**BST reconstruction.** Given the preorder traversal of a BST (not including
    null nodes), reconstruct the tree.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**BST重建**。 给定BST的前序遍历（不包括空节点），重建树。'
- en: 'True or false. Given a BST, let x be a leaf node, and let y be its parent.
    Then either (i) the key of y is the smallest key in the BST larger than the key
    of x or (ii) the key of y is the largest key in the BST smaller than the key of
    x. *Answer*: true.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假。 给定BST，设x是叶节点，y是其父节点。 那么y的键要么是大于x的键中最小的键，要么是小于x的键中最大的键。 *答案*：真。
- en: True or false. Let x be a BST node. The next largest key (successor of x) can
    be found by traversing up the tree toward the root until encountering a node with
    a non-empty right subtree (possibly x itself); then finding the minimum key in
    the right subtree (by following its rightmost path).
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假。 设x是BST节点。 可以通过沿着树向根遍历直到遇到具有非空右子树的节点（可能是x本身）；然后在右子树中找到最小键来找到x的下一个最大键（x的后继）。
- en: '**Tree traversal with constant extra memory.** Describe how to perform an inorder
    tree traversal with constant extra memory (e.g., no function call stack).'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**具有恒定额外内存的树遍历**。 描述如何使用恒定额外内存（例如，没有函数调用堆栈）执行中序树遍历。'
- en: '*Hint*: on the way down the tree, make the child node point back to the parent
    (and reverse it on the way up the tree).'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：在树下行的过程中，使子节点指向父节点（并在树上行的过程中反转它）。'
- en: '**Reverse a BST.** Given a standard BST (where each key is greater than the
    keys in its left subtree and smaller than the keys in its right subtree), design
    a linear-time algorithm to transform it into a reverese BST (where each key is
    smaller than the keys in its left subtree and greater than the keys in its right
    subtree). The resulting tree shape should be symmetric to the original one.'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**反转BST**。 给定一个标准BST（其中每个键都大于其左子树中的键，小于其右子树中的键），设计一个线性时间算法将其转换为反转BST（其中每个键都小于其左子树中的键，大于其右子树中的键）。
    结果树形状应对称于原始形状。'
- en: '**Level-order traversal reconstruction of a BST.** Given a sequence of keys,
    design a linear-time algorithm to determine whether it is the level-order traversal
    of some BST (and construct the BST itself).'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**BST的层序遍历重建**。 给定一系列键，设计一个线性时间算法来确定它是否是某个BST的层序遍历（并构造BST本身）。'
- en: '**Find two swapped keys in a BST.** Given a BST in which two keys in two nodes
    have been swapped, find the two keys.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在BST中查找两个交换的键**。 给定一个BST，其中两个节点中的两个键已被交换，找到这两个键。'
- en: '*Solution.* Consider the inorder traversal a[] of the BST. There are two cases
    to consider. Suppose there is only one index p such that a[p] > a[p+1]. Then swap
    the keys a[p] and a[p+1]. Otherwise, there are two indices p and q such a[p] >
    a[p+1] and a[q] > a[q+1]. Let''s assume p < q. Then, swap the keys a[p] and a[q+1].'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*。 考虑BST的中序遍历a[]。 有两种情况需要考虑。 假设只有一个索引p，使得a[p] > a[p+1]。 然后交换键a[p]和a[p+1]。
    否则，存在两个索引p和q，使得a[p] > a[p+1]和a[q] > a[q+1]。 假设p < q。 然后，交换键a[p]和a[q+1]。'
