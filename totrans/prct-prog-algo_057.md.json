["```\nRandom random = new Random();\nboolean a = random.nextBoolean();   // true or false\nint     b = random.nextInt();       // between -2^31 and 2^31 - 1\nint     c = random.nextInt(100);    // between 0 and 99\ndouble  d = random.nextDouble();    // between 0.0 and 1.0\ndouble  e = random.nextGaussian();  // Gaussian with mean 0 and stddev = 1\n\n```", "```\nRandom random = new Random(1234567L);\n\n```", "```\nPrecompute:  q = m / a, r = m % a\nIterate:     x = a * (x - x/ q) * q) - r * (x / q)\n\n```", "```\nGammaDistribution x = new GammaDistribution(2, 3);\nSystem.out.println(x.getRandomScaler());\n\nBinomialDistribution y = new BinomialDistribution(0.1, 100);\nSystem.out.println(y.getRandomVector(5));\n\n```", "```\n    double x = Math.random();\n    int r = (int) (x * N);\n\n    ```", "```\n    public static int poisson(double c) {\n       double t = 0.0;\n       for (int x = 0; true; x++) {\n          t = t - Math.log(Math.random()) / c;  // sum exponential deviates\n          if (t > 1.0) return x;\n       }\n    }\n\n    ```", "```\n    (x1)2 + ... + (xN)2 \u2264 1\n\n    ```", "```\n    ( x1/r, x2/r, ..., xN/r ), where r = sqrt((x1)2 + ... + (xN)2)\n\n    ```", "```\n    Ip = 1/2 (s(1-s)2 + p(1-p)2)\n    Is = 1/2 (s2(1-s)2 + p2(1-p)2)\n    p = (sin(\u03b8i-\u03b8r)/sin(\u03b8i+\u03b8r))2\n    r = (tan(\u03b8i-\u03b8r)/tan(\u03b8i+\u03b8r))2\n\n    ```"]