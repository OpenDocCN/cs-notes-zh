- en: 6.4   TOY Virtual Machine
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6.4   TOY虚拟机
- en: 原文：[https://introcs.cs.princeton.edu/java/64simulator](https://introcs.cs.princeton.edu/java/64simulator)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 译文：[https://introcs.cs.princeton.edu/java/64simulator](https://introcs.cs.princeton.edu/java/64simulator)
- en: This section under major construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节正在大力施工中。
- en: Simulators
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模拟器
- en: . Suppose we are interested in designing a new machine or microprocessor. We
    could test it out by building a prototype machine and run various programs on
    it. A different approach would be to write a program on an existing machine that
    would simulate the behavior of the new machine. This has two main advantages.
    First it would be easy to extend the simulator to add extra flexibility, e.g.,
    add debugging tools or experiment with a different ISA. Second, it is much cheaper
    than building a prototype for a new machine.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: . 假设我们有兴趣设计一台新的机器或微处理器。我们可以通过建立一个原型机器并在其上运行各种程序来测试它。另一种方法是在现有机器上编写一个程序，模拟新机器的行为。这有两个主要优点。首先，很容易扩展模拟器以增加额外的灵活性，例如添加调试工具或尝试不同的ISA。其次，这比为新机器建立原型要便宜得多。
- en: Designing a simulator can have other benefits. Suppose our TOY machine becomes
    obsolete by the more powerful NOTATOY machine. But, we have written thousands
    of programs in the TOY language and are reluctant to rewrite them for NOTATOY.
    Instead, we could build a simulator for the TOY machine on NOTATOY. Now, we can
    run all of our existing programs on NOTATOY by running them on our TOY simulator.
    As you might suspect, this extra layer of simulation will slow down our code somewhat.
    Many ancient programs are currently still running on today's computers, under
    several layers of simulation. For example, it is still possible to run the Apple
    IIe game Lode Runner under Microsoft Windows XP.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 设计模拟器还有其他好处。假设我们的TOY机器已经被更强大的NOTATOY机器所淘汰。但是，我们已经用TOY语言编写了成千上万的程序，并且不愿意为NOTATOY重新编写它们。相反，我们可以在NOTATOY上为TOY机器构建一个模拟器。现在，我们可以通过在TOY模拟器上运行它们来在NOTATOY上运行我们所有现有的程序。正如您可能怀疑的那样，这种额外的模拟层会使我们的代码运行速度有所减慢。许多古老的程序目前仍在今天的计算机上运行，经过几层模拟。例如，仍然可以在Microsoft
    Windows XP下运行Apple IIe游戏Lode Runner。
- en: '**A TOY simulator in Java.** Program [TOY.java](TOY.java.html) is a TOY simulator
    written in Java. It reads in a TOY program and *simulates* the behavior of the
    TOY machine. The Java program uses arrays to store the registers and main memory.
    It also stores the program counter. The Java program reads in the TOY program
    and alters the appropriate contents of registers, memory, and the program counter,
    in exactly the same way that the TOY machine would modify its registers, memory,
    and program counter. Any program written for the TOY machine could ultimately
    be used on the TOY simulator, and any program written for the TOY simulator could
    be used on the TOY machine, were it to be built.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java中的TOY模拟器。** 程序[TOY.java](TOY.java.html)是用Java编写的TOY模拟器。它读取一个TOY程序并*模拟*TOY机器的行为。Java程序使用数组来存储寄存器和主存储器。它还存储程序计数器。Java程序读取TOY程序并修改寄存器、存储器和程序计数器的适当内容，就像TOY机器会修改其寄存器、存储器和程序计数器的方式一样。为TOY机器编写的任何程序最终都可以在TOY模拟器上使用，为TOY模拟器编写的任何程序也可以在TOY机器上使用，如果它被构建的话。'
- en: The simulator needs two streams of input - one for the TOY program and one for
    TOY standard input. We associate the operating system's standard input with TOY's
    standard input, and read in the TOY program directly from a file. To do this,
    our program takes one command line argument to specify the name of the file. Then,
    we use the library [In.java](In.java.html) to read in data from the file, one
    line at a time. We use *regular expressions* to parse the input file. We discuss
    regular expressions in detail in Chapter 7. The program also uses to helper functions
    `toHex` and `fromHex` to convert from hexadecimal strings to integers and vice
    versa.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 模拟器需要两个输入流 - 一个用于TOY程序，一个用于TOY标准输入。我们将操作系统的标准输入与TOY的标准输入关联起来，并直接从文件中读取TOY程序。为此，我们的程序接受一个命令行参数来指定文件的名称。然后，我们使用库[In.java](In.java.html)从文件中逐行读取数据。我们使用*正则表达式*来解析输入文件。我们将在第7章详细讨论正则表达式。该程序还使用两个辅助函数`toHex`和`fromHex`，用于将十六进制字符串转换为整数，反之亦然。
- en: '**Java virtual machine.** The Java compiler `javac` compiles your Java program
    into a machine language program for an imaginary machine known as the [Java Virtual
    Machine Specification](http://docs.oracle.com/javase/specs/jvms/se5.0/html/VMSpecTOC.doc.html)
    (JVM). This abstract machine has 229 opcodes, including add, divide, shift, XOR,
    load, and store. When you run `java`, you are simulating the behavior of the JVM
    on your computer.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**Java虚拟机。** Java编译器`javac`将您的Java程序编译成一种机器语言程序，用于一台名为[Java虚拟机规范](http://docs.oracle.com/javase/specs/jvms/se5.0/html/VMSpecTOC.doc.html)（JVM）的虚拟机。这台抽象机器有229个操作码，包括加法、除法、移位、异或、加载和存储等。当您运行`java`时，您正在模拟计算机上JVM的行为。'
- en: '**Translators.** It is possible to *translate* any particular TOY program into
    a Java program. That is, given a TOY program (e.g., insertion sort), write a corresponding
    Java program that does the same thing. This is analogous to translating a book
    from French into Spanish. Note that simulation is not the same as translation.
    A simulator mimics the behavior of the original machine exactly line-by-line,
    whereas a translator needs to generate code that produces the same output given
    the same input. In principle, it is also possible, but somewhat tedious, to translate
    a Java program into TOY.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '**翻译器。** 可以将任何特定的TOY程序翻译成Java程序。也就是说，给定一个TOY程序（例如，插入排序），编写一个执行相同操作的Java程序。这类似于将一本书从法语翻译成西班牙语。请注意，模拟不同于翻译。模拟器精确地逐行模仿原始机器的行为，而翻译器需要生成产生相同输出的代码，给定相同的输入。原则上，也可以将Java程序翻译成TOY，但有点繁琐。'
- en: '**Bootstrapping.** We now consider a mind-bending idea with great practical
    significance. Since it is always possible to translate a Java program into TOY,
    let''s translate our TOY simulator (written in Java) into a program written in
    the TOY language! That is, we create a TOY program that simulates the TOY machine
    itself. Now, we could modify the TOY simulator, e.g., to add debugging tools,
    or to simulate variants of the TOY machine. The resulting TOY simulator program
    is "more powerful" than the original TOY machine. This idea is called *bootstrapping*,
    where once we build one machine, we can use it to simulate "more powerful" machines.
    This fundamental idea is now used in the design of all new computers. According
    to Apple''s web site "Seymour Cray, founder of Cray Research and father of several
    generations of supercomputers, heard that Apple had bought a Cray to simulate
    computer design. Cray was amused, remarking, Funny, I am using an Apple to simulate
    the Cray-3."'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**引导**。我们现在考虑一个令人费解但具有重要实际意义的想法。由于将Java程序转换为TOY总是可能的，让我们将我们的TOY模拟器（用Java编写）转换为用TOY语言编写的程序！也就是说，我们创建一个模拟TOY机器本身的TOY程序。现在，我们可以修改TOY模拟器，例如，添加调试工具，或模拟TOY机器的变体。结果的TOY模拟器程序比原始的TOY机器“更强大”。这个想法被称为*引导*，一旦我们建立了一台机器，我们就可以用它来模拟“更强大”的机器。这个基本想法现在被用于所有新计算机的设计。根据苹果的网站“西摩·克雷，Cray
    Research的创始人和几代超级计算机的鼻祖，听说苹果购买了一台Cray来模拟计算机设计。克雷感到好笑，评论说，有趣，我正在使用一台苹果来模拟Cray-3。”'
- en: Duality.
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对偶。
- en: Duality between code and data.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 代码和数据之间的对偶。
- en: Code = Print this. Data = Hello, World. Result = prints "Hello, World."
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Code = 打印这个。 Data = 你好，世界。 Result = 打印"你好，世界"。
- en: Code = Print this. Data = Print this. Result = prints "Print this."
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Code = 打印这个。 Data = 打印这个。 Result = 打印"打印这个"。
- en: Code = Print this twice. Data = Print this twice. Result = Print this twice.
    Print this twice.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Code = 打印这个两次。 Data = 打印这个两次。 Result = 打印这个两次。 打印这个两次。
- en: 'Self-reproducing program! Duality and self-reproduction encoded in biology:
    gene = signifier, protein = signified.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 自我复制程序！在生物学中编码的对偶和自我复制：基因 = 指示符，蛋白质 = 被指示物。
- en: Exercises
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Creative Exercises
  id: totrans-18
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
