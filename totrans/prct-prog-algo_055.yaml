- en: 9.6   Optimization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9.6 优化
- en: 原文：[https://introcs.cs.princeton.edu/java/96optimization](https://introcs.cs.princeton.edu/java/96optimization)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/java/96optimization](https://introcs.cs.princeton.edu/java/96optimization)
- en: This section under major construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节正在大规模施工中。
- en: Root finding.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 寻找根。
- en: 'Goal: given function f(x), find x* such that f(x*) = 0\. Nonlinear equations
    can have any number of solutions.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 目标：给定函数f(x)，找到x*使得f(x*) = 0。非线性方程可以有任意数量的解。
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Unconstrained optimization.** Goal: given function f(x), find x* such that
    f(x) is maximized or minimized. If f(x) is differentiable, then we are looking
    for an x* such that f''(x*) = 0\. However, this may lead to local minima, maxima,
    or saddle points.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**无约束优化。** 目标：给定函数f(x)，找到x*使得f(x)被最大化或最小化。如果f(x)可微，那么我们正在寻找一个x*，使得f''(x*) =
    0。然而，这可能导致局部最小值、最大值或鞍点。'
- en: '**Bisection method.** Goal: given function f(x), find x* such that f(x*) =
    0\. Assume you know interval [a, b] such that f(a) < 0 and f(b) > 0.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**二分法。** 目标：给定函数f(x)，找到x*使得f(x*) = 0。假设你知道区间[a, b]，使得f(a) < 0且f(b) > 0。'
- en: '**Newton''s method.** Quadratic approximation. Fast convergence if close enough
    to answer. The update formulas below are for finding the root of f(x) and f''(x).'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**牛顿法。** 二次逼近。如果距离答案足够接近，收敛速度快。下面的更新公式用于找到f(x)和f''(x)的根。'
- en: '[PRE1]'
  id: totrans-9
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Newton''s method only reliable if started "close enough" to solution. Bad example
    (Smale): f(x) = x^3 - 2*x + 2\. If you start in the interval [-0.1, 0.1] , Newton''s
    method reaches a stable 2-cycle. If started to the left of the negative real root,
    it will converge.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在距离解“足够接近”时，牛顿法才可靠。坏例子（Smale）：f(x) = x^3 - 2*x + 2。如果你从区间[-0.1, 0.1]开始，牛顿法会收敛到一个稳定的2周期。如果从负实根的左侧开始，它会收敛。
- en: To handle general differentiable or twice differentiable functions of one variable,
    we might declare an interface
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理一维一般可微或两次可微函数，我们可以声明一个接口
- en: '[PRE2]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Program [Newton.java](Newton.java.html) runs Newton's method on a differentiable
    function to compute points x* where f(x*) = 0 and f'(x*) = 0.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[Newton.java](Newton.java.html)在可微函数上运行牛顿法，计算满足f(x*) = 0和f'(x*) = 0的点x*。
- en: 'The probability of finding an electron in the 4s excited state of hydrogen
    ar radius r is given by: *f(x) = (1 - 3x/4 + x²/8 - x³/192)² e^(-x/2)*, where
    *x* is the radius in units of the Bohr radius (0.529173E-8 cm). Program [BohrRadius.java](BohrRadius.java.html)
    contains the formula for f(x), f''(x), and f''''(x). By starting Newton''s method
    at 0, 4, 5, and 13, and 22, we obtain all three roots and all five local minima
    and maxima.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在氢原子的4s激发态中找到电子的概率在半径r处给出：*f(x) = (1 - 3x/4 + x²/8 - x³/192)² e^(-x/2)*，其中*x*是以玻尔半径（0.529173E-8厘米）为单位的半径。程序[BohrRadius.java](BohrRadius.java.html)包含f(x)，f'(x)和f''(x)的公式。通过从0、4、5、13和22开始牛顿法，我们获得所有三个根和所有五个局部极小值和极大值。
- en: '**Newton''s method in higher dimensions.** [probably omit or leave as an exercise]
    Use to solve system of nonlinear equations. In general, there are no good methods
    for solving a nonlinear system of equations'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**高维牛顿法。** [可能省略或留作练习] 用于解决非线性方程组。一般来说，解决非线性方程组没有好的方法'
- en: '[PRE3]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: where J is the Jacobian matrix of partial derivatives. In practice, we don't
    explicitly compute the inverse. Instead of computing y = J^(-1)f, we solve the
    linear system of equations Jy = f.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 其中J是偏导数的雅可比矩阵。在实践中，我们不会显式计算逆矩阵。我们不是计算y = J^(-1)f，而是解线性方程组Jy = f。
- en: To illustrate the method, suppose we want to find a solution (x, y) to the following
    system of two nonlinear equations.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 为了说明这种方法，假设我们想要找到两个非线性方程组的解(x, y)。
- en: '[PRE4]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this example, the Jacobian is given by
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，雅可比矩阵如下
- en: '[PRE5]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If we start Newton's method at the point (-0.6, 0.6), we quickly obtain one
    of the roots (-1/2, sqrt(3)/2) up to machine accuracy. The other roots are (-1/2,
    -sqrt(3)/2) and (1, 0). Program [TestEquations.java](TestEquations.java.html)
    uses the interface [Equations.java](Equations.java) and [EquationSolver.java](EquationSolver.java.html)
    to solve the system of equations. We use the Jama matrix library to do the matrix
    computations.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们从点(-0.6, 0.6)开始牛顿法，我们很快就能获得一个根(-1/2, sqrt(3)/2)，达到机器精度。另外两个根是(-1/2, -sqrt(3)/2)和(1,
    0)。程序[TestEquations.java](TestEquations.java.html)使用接口[Equations.java](Equations.java)和[EquationSolver.java](EquationSolver.java.html)来解决方程组。我们使用Jama矩阵库进行矩阵计算。
- en: '*Optimization.* Use same method to optimize a function of several variables.
    Good methods exist if multivariate function is sufficiently smooth.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '*优化。* 使用相同的方法来优化多个变量的函数。如果多变量函数足够平滑，那么存在很好的方法。'
- en: '[PRE6]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Need gradient g(x) = ∇f(x) and Hessian H(x) = ∇²f(x). Method finds an x* where
    g(x*) = 0, but this could be a maxima, minima, or saddle point. If Hessian is
    positive definite (all eigenvalues are positive) then it is a minima; if all eigenvalues
    are negative, then it's a maxima; otherwise it's a saddle point.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 需要梯度g(x) = ∇f(x)和黑塞矩阵H(x) = ∇²f(x)。该方法找到一个x*，使得g(x*) = 0，但这可能是一个极大值、极小值或鞍点。如果黑塞矩阵是正定的（所有特征值都是正的），那么它是一个极小值；如果所有特征值都是负的，那么它是一个极大值；否则它是一个鞍点。
- en: Also, 2nd derivatives change slowly, so it may not be necessary to recalculate
    the Hessian (or its LU decomposition) at each step. In practice, it is expensive
    to compute the Hessian exactly, so other so called *quasi-Newton* methods are
    preferred, including the Broyden-Fletcher-Goldfarb-Shanno (BFGS) update rule.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，二���导数变化缓慢，因此可能不需要在每一步重新计算黑塞矩阵（或其LU分解）。在实践中，精确计算黑塞矩阵是昂贵的，因此其他所谓的*拟牛顿*方法更受青睐，包括Broyden-Fletcher-Goldfarb-Shanno（BFGS）更新规则。
- en: '**Linear programming.** Create matrix interface. Generalizes two-person zero-sum
    games, many problems in combinatorial optimization, .... [run AMPL from the web](http://www.ampl.com/TRYAMPL/startup.html).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**线性规划。** 创建矩阵接口。推广两人零和博弈，许多组合优化问题，... [从网上运行AMPL](http://www.ampl.com/TRYAMPL/startup.html)。'
- en: Programming = planning. Give some history. Decision problem not known to be
    in P for along time. In 1979, Khachian resolved the question in the affirmative
    and made headlines in the New York Times with a geometric divide-and-conquer algorithm
    known as the *ellipsoid algorithm*. It requires O(N⁴L) bit operations where N
    is the number of variables and L is the number of bits in the input. Although
    this was a landmark in optimization, it did not immediately lead to a practical
    algorithm. In 1984, Karmarkar proposed a projective scaling algorithm that takes
    O(N^(3.5)L) time. It opened up the door for efficient implementations because
    by typically performing much better than its worst case guarantee. Various *interior
    point* methods were proposed in the 1990s, and the best known complexity bound
    is O(N³ L). More importantly, these algorithm are practical and competitive with
    the simplex method. They also extend to handle even more general problems.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 编程 = 计划。给出一些历史。决策问题长期以来不被认为在P中。1979年，Khachian肯定地解决了这个问题，并以一种称为*椭球算法*的几何分治算法登上了《纽约时报》的头条新闻。它需要O(N⁴L)位操作，其中N是变量的数量，L是输入中的位数。尽管这是优化中的一个里程碑，但它并没有立即导致一个实用的算法。1984年，Karmarkar提出了一个需要O(N^(3.5)L)时间的投影缩放算法。它为高效实现打开了大门，因为通常比其最坏情况保证表现要好得多。1990年代提出了各种*内点*方法，最佳已知复杂度界限为O(N³
    L)。更重要的是，这些算法是实用的，并且与单纯形法相竞争。它们还可以扩展以处理更一般的问题。
- en: '**Simplex method.**'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**单纯形法。**'
- en: '**Linear programming solvers.** In 1947, George Dantzig proposed the simplex
    algorithm for linear programming. One of greatest and most successful algorithms
    of all time. [Linear programming](http://opsresearch.com/OR-Objects/api/drasys/or/mp/lp/package-summary.html),
    but not industrial strength. Program [LPDemo.java](LPDemo.java.html) illustrates
    how to use it. The classes `MPSReader` and `MPSWriter` can parse input files and
    write output files in the standard MPS format. Test LP data files in [MPS format](http://www.netlib.org/lp/data/).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**线性规划求解器。** 1947年，乔治·丹齐格提出了线性规划的单纯形算法。是有史以来最伟大和最成功的算法之一。[线性规划](http://opsresearch.com/OR-Objects/api/drasys/or/mp/lp/package-summary.html)，但不具备工业强度。程序[LPDemo.java](LPDemo.java.html)演示了如何使用它。类`MPSReader`和`MPSWriter`可以解析标准MPS格式的输入文件并写入输出文件。在[MPS格式](http://www.netlib.org/lp/data/)中测试LP数据文件。'
- en: '**More applications.** OR-Objects also has graph coloring, traveling salesman
    problem, vehicle routing, shortest path.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**更多应用。** OR-Objects还包括图着色、旅行推销员问题、车辆路径规划、最短路径等。'
- en: Exercises
  id: totrans-32
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Use Newton's method to find an x (in radians) such that x = cos(x).
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用牛顿法找到一个x（以弧度表示），使得x = cos(x)。
- en: Use Newton's method to find an x (in radians) such that x² = 4 sin(x).
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用牛顿法找到一个x（以弧度表示），使得x² = 4 sin(x)。
- en: Use Newton's method to find an x (in radians) that minimizes f(x) = sin(x) +
    x - exp(x).
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用牛顿法找到一个x（以弧度表示），使得f(x) = sin(x) + x - exp(x)最小化。
- en: Use Newton's method to find (x, y) that solve
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用牛顿法找到解决方程的(x, y)
- en: '[PRE7]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Start at the point (0.1, -0.2), which is near the true root (0.09777, -2.325).
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从点(0.1, -0.2)开始，该点接近真实根(0.09777, -2.325)。
- en: Use Newton's method to find (x, y) that solve
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用牛顿法找到解决方程的(x, y)
- en: '[PRE8]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Start at the point (1, 2), which is near the true root (0, 1).
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从点(1, 2)开始，该点接近真实根(0, 1)。
- en: Use Newton's method to find (x, y) that solve
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用牛顿法找到解决方程的(x, y)
- en: '[PRE9]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Start at the point (2, 7).
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从点(2, 7)开始。
- en: 'Use Newton''s method to minimize f(x) = 1/2 - x e^(-x²). *Hint*: f''(x) = (2x²-1)e^(-x²),
    f''''(x) = 2x(3-2x²)e^(-x²).'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用牛顿法最小化f(x) = 1/2 - x e^(-x²)。*提示*：f'(x) = (2x²-1)e^(-x²)，f''(x) = 2x(3-2x²)e^(-x²)。
- en: Use Newton's method to find all minima, maxima, and saddle points of the following
    function of two variables.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用牛顿法找到以下两个变量函数的所有最小值、最大值和鞍点。
- en: '[PRE10]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Creative Exercises
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
- en: '**Bernoulli numbers.** Bernoulli numbers appear in the Taylor expansion of
    the tangent function, the Euler-MacLaurin summation formula, and the Riemann zeta
    function. They can be defined recursively by B[0] = 1, and using the fact that
    the sum from j = 0 to N of binomial(N+1, j) B[j] = 0. For example B[1] = -1/2,
    B[2] = 1/6, B[3] = 0, and B[12] = -691/2730. Bernoulli computed the first 10 Bernoulli
    numbers by hand; Euler''s compute the first 30. In 1842, Ada Lovelace suggested
    to Charles Babbage that he devise an algorithm for computing Bernoulli numbers
    using his Analytic Engine. Write a program [Bernoulli.java](Bernoulli.java.html)
    that takes a command-line argument N and prints out the first N Bernoulli numbers.
    Use the [BigRational.java](../92symbolic/BigRational.java.html) data type from
    Section 9.2.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**伯努利数。** 伯努利数出现在正切函数的泰勒展开式、欧拉-麦克劳林求和公式和黎曼ζ函数中。它们可以通过B[0] = 1的递归定义，并利用从j =
    0到N的二项式(N+1, j) B[j]之和为0的事实来定义。例如B[1] = -1/2，B[2] = 1/6，B[3] = 0，B[12] = -691/2730。伯努利通过手工计算了前10个伯努利数；欧拉计算了前30个。1842年，阿达·洛夫莱斯建议查尔斯·巴贝奇利用他的分析引擎设计一个计算伯努利数的算法。编写一个程序[Bernoulli.java](Bernoulli.java.html)，它接受一个命令行参数N并打印出前N个伯努利数。使用第9.2节中的[BigRational.java](../92symbolic/BigRational.java.html)数据类型。'
- en: '**Eccentricity anomaly.** (Cleve Moler) The *eccentricity anomaly* arises in
    Kepler''s model of planetary motion and satisfies M = E - e sin E, where M is
    the mean anomaly (24.851090) and e is the orbit eccentricity (0.1). Solve for
    E.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**偏心率异常。**（克利夫·莫勒）*偏心率异常*出现在开普勒的行星运动模型中，并满足M = E - e sin E，其中M是平均偏近角（24.851090），e是轨道离心率（0.1）。解出E。'
- en: '**Newton''s method with complex numbers.** Implement Newton''s method for finding
    a *complex* root of an equation. Use Complex.java and implement Newton''s method
    exactly as when finding real roots, but use complex numbers.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**带复数的牛顿法。** 实现用于找到方程的*复数*根的牛顿法。使用Complex.java并完全实现牛顿法，就像找到实根一样，但使用复数。'
