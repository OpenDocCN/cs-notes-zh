- en: 7.3 Combinational Circuits
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.3 组合电路
- en: 原文：[https://introcs.cs.princeton.edu/java/73combinational](https://introcs.cs.princeton.edu/java/73combinational)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/java/73combinational](https://introcs.cs.princeton.edu/java/73combinational)
- en: This chapter under major construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章节正在大规模施工中。
- en: '**Domino adder.** This [video](https://www.youtube.com/watch?v=lNuPy-r1GuQ)
    shows a 4-bit ripple-carry adder that was implemented using 10,000 dominoes.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**多米诺加法器。** 这个 [视频](https://www.youtube.com/watch?v=lNuPy-r1GuQ) 展示了一个使用 10,000
    个多米诺骨牌实现的 4 位串行进位加法器。'
- en: Exercises.
  id: totrans-4
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习。
- en: Design a circuit to control a single light bulb by three switches. The circuit
    has three inputs (the switch settings *x*, *y*, and *z*) and one output (the light
    control). At any time, you should be able to turn the light off (if on) or on
    (if off) by changing the position of any one of the three switches. When all three
    switches are 0 (down position), the light control is 0 (light off).
  id: totrans-5
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计一个电路，通过三个开关控制一个灯泡。该电路有三个输入（开关设置 *x*、*y* 和 *z*）和一个输出（灯控制）。任何时候，你都应该能够通过改变三个开关中的任意一个的位置将灯关闭（如果打开）或打开（如果关闭）。当三个开关都为
    0（下方位置）时，灯控制为 0（灯关闭）。
- en: Which of the following TOY machine components are not *combinational circuits*?
  id: totrans-6
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下 TOY 机器组件中哪些不是 *组合电路*？
- en: Control
  id: totrans-7
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制
- en: Counter
  id: totrans-8
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 计数器
- en: Registers
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 寄存器
- en: Main memory
  id: totrans-10
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 主存储器
- en: Adder
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加法器
- en: Creative Exercises.
  id: totrans-12
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习。
- en: '**Sum-of-products.** Disjunctive normal form. Algebraic properties: sum and
    product are commutative and associative, distributive property, etc.'
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**积和形式。** 析取范式。代数性质：和与积是可交换和可结合的，分配律等。'
- en: '**Product-of-sums.** Conjunctive normal form. Include a term for each 0 in
    the truth table trow.'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**积和形式。** 合取范式。为真值表中的每个 0 包含一个项。'
- en: '**Consensus theorems.** Verify that (a+b)(a''+c)(b+c) = (a+b)(a''+c) and (ab)
    + (a''c) + (bc) = (ab) + (a''c).'
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**共识定理。** 验证 (a+b)(a''+c)(b+c) = (a+b)(a''+c) 和 (ab) + (a''c) + (bc) = (ab)
    + (a''c)。'
- en: '**Duality.** The dual of any boolean identity is obtained by exchanging OR
    with AND and 0 with 1.'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**对偶性。** 任何布尔恒等式的对偶通过交换 OR 与 AND 以及 0 与 1 而得到。'
- en: '**DeMorgan laws.**'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**德摩根定律。**'
- en: '**XOR using NAND.** Implement an XOR gate using only NAND gates. Assume you
    can have inputs that are 0 or 1.'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用 NAND 实现 XOR。** 只使用 NAND 门实现 XOR 门。假设输入可以是 0 或 1。'
- en: '**XOR using NAND.** Implement an XOR gate using only 4 NAND gates. Assume you
    can have inputs that are 0 or 1. *Answer*: XOR(a, b) = NAND(d, e), where c = NAND(a,
    b), d = NAND(a, c), and e = NAND(b, c).'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用 NAND 实现 XOR。** 只使用 4 个 NAND 门实现 XOR 门。假设输入可以是 0 或 1。 *答案*：XOR(a, b) =
    NAND(d, e)，其中 c = NAND(a, b)，d = NAND(a, c)，e = NAND(b, c)。'
- en: '**OR and NAND using NOR.** Implement OR using NOR gates. Implement NAND using
    NOR gates. Don''t assume that you can use inputs that are 0 or 1.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**使用 NOR 实现 OR 和 NAND。** 使用 NOR 门实现 OR 门。使用 NOR 门实现 NAND 门。不要假设可以使用输入为 0 或
    1。'
- en: '**Universality.** Prove that the following combinations of gates are universal:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**普适性。** 证明以下门的组合是通用的：'
- en: '{ AND, NOT }'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '{ 与, 非 }'
- en: '{ OR, NOT }'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '{ 或, 非 }'
- en: '{ NAND }'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '{ NAND }'
- en: '{ NOR }'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '{ NOR }'
- en: '{ XOR, AND }'
  id: totrans-26
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '{ XOR, 与 }'
- en: '**Non-universality.** Prove that the following gates are not universal:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**非普适性。** 证明以下门不是通用的：'
- en: '{ AND }'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '{ 与 }'
- en: '{ OR }'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '{ 或 }'
- en: '{ XOR }'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '{ XOR }'
- en: '**AND from XOR.** Prove that you can''t make an AND gate out of XOR gates.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从 XOR 到 AND。** 证明你不能用 XOR 门制作 AND 门。'
- en: '*Solution.* As above { XOR, AND } is universal. So if you could make an AND
    gate out of XOR gaets, { XOR } would be univeral. But in the previous question,
    you proved that it was not universal.'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解答*。如上所述 { XOR, 与 } 是通用的。因此，如果你可以用 XOR 门制作 AND 门，{ XOR } 就是通用的。但在前一个问题中，你证明它不是通用的。'
- en: '**The 2-NOTs problem.** Give three inputs a, b, and c, design a circuit that
    outputs a'', b'', and c''. You may use as many AND and OR gates as you like, but
    at most two NOT gates. *Warning*: high degree of difficulty.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**两个 NOT 问题。** 给定三个输入 a、b 和 c，设计一个电路，输出 a''、b'' 和 c''。你可以使用任意多个 AND 和 OR 门，但最多两个
    NOT 门。 *警告*：难度较高。'
- en: '**Flat computer.** Show that, in principle, you can draw and circuit in the
    plane. Assume two input AND, OR, and NOT can be drawn in the plane. It suffices
    to draw a crossover circuit. [planar cross-over circuit](http://www.math.uwaterloo.ca/navigation/ideas/Zeno/zenocs.shtml#flatcomp).'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**平面计算机。** 展示原则上你可以在平面上绘制电路。假设两个输入 AND、OR 和 NOT 可以在平面上绘制。只需绘制一个交叉电路即可。[平面交叉电路](http://www.math.uwaterloo.ca/navigation/ideas/Zeno/zenocs.shtml#flatcomp)。'
- en: '**Comparator circuit.**'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**比较器电路。**'
- en: '**At least k.** A n-way majority circuit takes n inputs and returns 1 if and
    only if at least strictly more of its inputs are 1 than 0. Given an n-way majority
    circuit, describe how to build an At-Least-k circuit that returns 1 if and only
    if at least k of its inputs are 1. *Answer*: consider a 2n-way majority circuit.
    Make n-k+1 of the inputs 1, k-1 of the inputs 0, and the original n inputs.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**至少 k。** 一个 n 路多数电路接受 n 个输入，仅当其输入中的 1 严格多于 0 时返回 1。给定一个 n 路多数电路，描述如何构建一个至少
    k 电路，仅当其输入中至少 k 个��� 1 时返回 1。 *答案*：考虑一个 2n 路多数电路。使 n-k+1 个输入为 1，k-1 个输入为 0，以及原始的
    n 个输入。'
- en: '**Exactly k circuit.** Describe how to build a circuit that outputs 1 if and
    only if exactly k of its inputs are 1. *Answer*: If k = n, use an n-way and gate.
    Otherwise build up an At-least-k circuit and an At-least-k+1 circuit as in the
    previous exercise. It has exactly k inputs that are 1 if the first circuit outputs
    1, but the second one outputs 0.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**恰好 k 电路。** 描述如何构建一个电路，仅当其输入中恰好有 k 个为 1 时输出 1。 *答案*：如果 k = n，则使用 n 路与门。否则按照前一个练习中的方法构建一个至少
    k 电路和一个至少 k+1 电路。它恰好有 k 个输入为 1，如果第一个电路输出 1，则第二个电路输出 0。'
- en: '**Odd parity from majority gates.** Describe how to build an n-way odd parity
    circuit using only majority gates. You may assume that you have 0s and 1s as inputs.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从多数门到奇校验。** 描述如何只使用多数门构建一个 n 路奇校验电路。你可以假设输入为 0 和 1。'
- en: '**Odd parity.** Describe how to build an N-way odd parity circuit using only
    AND, OR, NOT. Hint: build a tree of 3-way odd parity gates, using ceil(2.5(N-1))
    total gates.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**奇校验。** 描述如何只使用 AND、OR、NOT 构建一个 N 路奇校验电路。提示：构建一个 3 路奇校验门的树，总共使用 ceil(2.5(N-1))
    个门。'
- en: 'What is the smallest such circuit you can build for N = 2 to 6? The 3-way XOR
    tree construction is optimal for N = 2 to 5: 3 gates, 5 gates, 8 gates, and 10
    gates respectively. The answer is unknown for N = 6 (but is known to be either
    12 or 13). (Ingo Wegener, 1991)'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你能为 N = 2 到 6 构建的最小电路是什么？对于 N = 2 到 5，3 路 XOR 树结构是最优的：分别为 3 个门、5 个门、8 个门和 10
    个门。对于 N = 6 的答案尚不清楚（但已知为 12 或 13）。（Ingo Wegener，1991）
- en: '**XOR from AND.** Design an XOR circuit using only AND and NOT. Use as few
    AND gates as possible. Min = 3.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**AND 门实现 XOR。** 只使用 AND 和 NOT 设计一个 XOR 电路。使用尽可能少的 AND 门。最小值 = 3。'
- en: '**MAJ from AND.** Design a 3-way MAJ circuit using only AND and NOT. Use as
    few AND gates as possible. Min = 4.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**AND 门实现 MAJ。** 只使用 AND 和 NOT 设计一个 3 路 MAJ 电路。使用尽可能少的 AND 门。最小值 = 4。'
- en: '**Adder from majority gates.** Describe how to build an n-bit ripple-carry
    adder circuit using only majority gates. You may assume that you have 0s and 1s
    available as inputs. *Hint*: build up a 3-way odd parity circuit out of 3-way
    majority circuits. Note that MAJ(x, y) = AND(x, y) and MAJ(x, y, 1) = OR(x, y).'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**多数门实现加法器。** 描述如何只使用多数门构建一个 n 位串行进位加法器电路。你可以假设你有 0 和 1 作为输入。*提示*：用 3 位多数门构建一个
    3 路奇偶校验电路。注意 MAJ(x, y) = AND(x, y) 和 MAJ(x, y, 1) = OR(x, y)。'
- en: '**Boolean logic puzzle.** You must transport a wolf, a goat, and a cabbage
    to the other side of the river using a boat. Due to natural predator relationships,
    you cannot leave the goat and the wolf alone on the same side of the river at
    the same time. Nor can you leave the goat and the cabbage together.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**布尔逻辑谜题。** 你必须用一条船将一只狼、一只山羊和一颗卷心菜运到河的另一边。由于自然的捕食关系，你不能让山羊和狼同时留在同一边。也不能让山羊和卷心菜在一起。'
- en: '![logic puzzle](../Images/959fd6d98b63ca7efaf696e0f4e4a58d.png)'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![逻辑谜题](../Images/959fd6d98b63ca7efaf696e0f4e4a58d.png)'
- en: '**Overflow of two''s complement adder.** How to detect overflow of two''s complement
    adder? Subtractor? <en>Answer If the carry out of the leftmost bit is different
    from the carry in.</en>'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**二进制补码加法器的溢出。** 如何检测二进制补码加法器的溢出？减法器呢？<en>答案：如果最左边比特的进位不同于进位。</en>'
- en: '**Boolean functions and circuits.** Let f be a boolean function on n input
    bits. Prove that for most functions f, the number of AND, OR, and NOT gates needed
    to implement f is at least 2^(n/3). Hint: prove that the number of circuits with
    m gates is at most 2^m and compare this quantity to the number of boolean functions
    on n inputs.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**布尔函数和电路。** 设 f 是一个关于 n 个输入比特的布尔函数。证明对于大多数函数 f，实现 f 所需的 AND、OR 和 NOT 门的数量至少为
    2^(n/3)。提示：证明 m 个门的电路数量至多为 2^m，并将此数量与 n 个输入的布尔函数数量进行比较。'
