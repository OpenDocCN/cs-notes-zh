- en: 1.1   Programming Model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://algs4.cs.princeton.edu/11model](https://algs4.cs.princeton.edu/11model)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: This section under major construction.
  prefs: []
  type: TYPE_NORMAL
- en: 'Our study of algorithms is based upon implementing them as programs written
    in the Java programming language. We do so for several reasons:'
  prefs: []
  type: TYPE_NORMAL
- en: Our programs are concise, elegant, and complete descriptions of algorithms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can run the programs to study properties of the algorithms.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can put the algorithms immediately to good use in applications.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Primitive data types and expressions.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A *data type* is a set of values and a set of operations on those values. The
    following four primitive data types are the basis of the Java language:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Integers*, with arithmetic operations (`int`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Real numbers*, again with arithmetic operations (`double`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Booleans*, the set of values { *true*, *false* } with logical operations (`boolean`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Characters*, the alphanumeric characters and symbols that you type (`char`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Java program manipulates *variables* that are named with *identifiers*. Each
    variable is associated with a data type and stores one of the permissible data-type
    values. We use *expressions* to apply the operations associated with each type.
  prefs: []
  type: TYPE_NORMAL
- en: '![basic building blocks for Java programs](../Images/378d01fbb7e15d39954b60ae7109b2f6.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: The following table summarizes the set of values and most common operations
    on those values for Java's `int`, `double`, `boolean`, and `char` data types.
  prefs: []
  type: TYPE_NORMAL
- en: '![primitive data types in Java](../Images/4be9cb1f9a222ffe63f6b7e6debe0855.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: '*Expressions.* Typical expressions are *infix*. When an expression contains
    more than one operator, the *precedence order* specifies the order in which they
    are applied: The operators `*` and `/` (and `%`) have higher precedence than (are
    applied before) the `+` and `-` operators; among logical operators, `!` is the
    highest precedence, followed by `&&` and and then `||`. Generally, operators of
    the same precedence are *left associative* (applied left to right). You can use
    parentheses to override these rules.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Type conversion.* Numbers are automatically promoted to a more inclusive type
    if no information is lost.For example, in the expression `1 + 2.5`, the `1` is
    promoted to the `double` value `1.0` and the expression evaluates to the `double`
    value <t>3.5. A *cast* is a directive to convert a value of one type into a value
    of another type. For example `(int) 3.7` is `3`. Casting a `double` to an `int`
    truncates toward zero.</t>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Comparisons.* The following *mixed-type* operators compare two values of the
    same type and produce a `boolean` value:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*equal* (`==`)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*not equal* (`!=`)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*less than* (`<`)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*less than or equal* (`<=`)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*greater than* (`>`)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*greater than or equal* (`>=`)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Other primitive types.* Java''s `int` has a 32-bit representation; Java''s
    `double` type has a 64-bit representation. Java has five additional primitive
    data types:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 64-bit integers, with arithmetic operations (`long`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 16-bit integers, with arithmetic operations (`short`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 16-bit characters, with arithmetic operations (`char`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 8-bit integers, with arithmetic operations (`byte`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 32-bit single-precision real numbers, with arithmetic operations (`float`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Statements.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A Java program is composed of *statements*, which define the computation by
    creating and manipulating variables, assigning data-type values to them, and controlling
    the flow of execution of such operations.
  prefs: []
  type: TYPE_NORMAL
- en: '*Declarations* create variables of a specified type and name them with identifiers.
    Java is a *strongly typed* language because the Java compiler checks for consistency.
    The *scope* of a variable is the part of the program where it is defined.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Assignments* associate a data-type value (defined by an expression) with a
    variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Initializing declarations* combine a declaration with an assignment to initialize
    a variable at the same time it is declared.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Implicit assignments.* The following shortcuts are available when our purpose
    is to modify a variable''s value relative to the current value:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Increment/decrement operators: the code `i++` is shorthand for `i = i + 1`.
    The code `++i` is the same except that the expression value is taken *after* the
    increment/decrement, not before.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Other compound operators: the code `i /= 2` is shorthand for `i = i/2`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Conditionals* provide for a simple change in the flow of execution—execute
    the statements in one of two blocks, depending on a specified condition.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Loops* provide for a more profound change in the flow of execution—execute
    the statements in a block as long as a given condition is true. We refer to the
    statements in the block in a loop as the *body* of the loop.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Break and continue.* Java supports two additional statements for use within
    while loops:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `break` statement, which immediately exits the loop
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `continue` statement, which immediately begins the next iteration of the
    loop
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*For notation.* Many loops follow this scheme: initialize an index variable
    to some value and then use a `while` loop to test a loop continuation condition
    involving the index variable, where the last statement in the `while` loop increments
    the index variable. You can express such loops compactly with Java''s `for` notation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Single-statement blocks.* If a block of statements in a conditional or a loop
    has only a single statement, the curly braces may be omitted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The following table illustrates different kinds of Java statements.
  prefs: []
  type: TYPE_NORMAL
- en: '![Java statements](../Images/722b40d160d70d2577710c1c756c01d8.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Arrays.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An *array* stores a sequence of values that are all of the same type. If we
    have `N` values, we can use the notation `a[i]` to refer to the `i`th value for
    any value of `i` from `0` to `N-1`.
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating and initializing an array.* Making an array in a Java program involves
    three distinct steps:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Declare the array name and type.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the array.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Initialize the array values.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Default array initialization.* For economy in code, we often take advantage
    of Java''s default array initialization convention and combine all three steps
    into a single statement. The default initial value is zero for numeric types and
    `false` for type `boolean`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Initializing declaration.* We can specify the initialization values at compile
    time, by listing literal values between curly braces, separated by commas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![declaring, creating, and initializing an array](../Images/d9f46a6ab5affa421fd6735d765a34f3.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*Using an array.* Once we create an array, its size is fixed. A program can
    refer to the length of an array `a[]` with the code `a.length`. Java does *automatic
    bounds checking*—if you access an array with an illegal index your program will
    terminate with an [ArrayIndexOutOfBoundsException](http://download.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Aliasing.* An array name refers to the whole array—if we assign one array
    name to another, then both refer to the same array, as illustrated in the following
    code fragment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This situation is known as *aliasing* and can lead to subtle bugs.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Two-dimensional arrays.* A two-dimensional array in Java is an array of one-dimensional
    arrays. A two-dimensional array may be *ragged* (its arrays may all be of differing
    lengths), but we most often work with (for appropriate parameters M and N) M-by-N
    two-dimensional arrays. To refer to the entry in row `i` and column `j` of a two-dimensional
    array `a[][]`, we use the notation `a[i][j]`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Static methods.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Static methods are called *functions* in many programming languages, since they
    can behave like mathematical functions. Each static method is a sequence of statements
    that are executed, one after the other, when the static method is *called*.
  prefs: []
  type: TYPE_NORMAL
- en: '*Defining a static method.* A *method* encapsulates a computation that is defined
    as a sequence of statements. A method takes *arguments* (values of given data
    types) and computes a *return value* of some data type or causes a *side effect*.
    Each static method is composed of a *signature* and a *body*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![anatomy of a static method](../Images/bde2f4984f0c95d1d28a964988dde65e.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*Invoking a static method.* A call on a static method is its name followed
    by expressions that specify argument values in parentheses, separated by commas.
    When a method is called, its argument variables are initialized with the values
    of the corresponding expressions in the call. A `return` statement terminates
    a static method, returning control to the caller. If the static method is to compute
    a value, that value must be specified in a `return` statement.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Properties of methods.* Java methods have the following features:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Arguments are passed by value.* When calling a function, the argument value
    is fully evaluated and the resulting value is *copied* into argument variable.
    This is known as *pass by value*. Array (and other object) references are also
    passed by value: the method cannot change the reference, but it can change the
    entries in the array (or value of the object).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Method names can be overloaded.* Methods within a class can have the same
    name, provided they have different signatures. This features is known as *overloading*.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*A method has a single return value but may have multiple return statements.*
    A Java method can provide only one return value. Control goes back to the calling
    program as soon as the first `return` statement is reached.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*A method can have side effects.* A method may use the keyword `void` as its
    return type, to indicate that it has no return value and produces side effects
    (consume input, produce output, change entries in an array, or otherwise change
    the state of the system).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Recursion.* A *recursive* method is a method that calls itself either directly
    or indirectly. There are three important rules of thumb in developing recursive
    programs:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The recursion has a *base case*.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Recursive calls must address subproblems that are *smaller* in some sense, so
    that recursive calls converge to the base case.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Recursive calls should not address subproblems that *overlap*.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Basic programming model.* A *library of static methods* is a set of static
    methods that are defined in a Java class. A basic model for Java programming is
    to develop a program that addresses a specific computational task by creating
    a library of static methods, one of which is named `main()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Modular programming.* Libraries of static methods enable *modular programming*,
    where static methods in one library can call static methods defined in other libraries.
    This approach has many important advantages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work with modules of reasonable size
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Share and reuse code without having to reimplement it
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Substitute improved implementations
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop appropriate abstract models for addressing programming problems
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Localize debugging
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Unit testing.* A best practice in Java programming is to include a `main()`
    in every library of static methods that tests the methods in the library.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*External libraries.* We use static methods from three different kinds of libraries,
    each requiring (slightly) differing procedures for code reuse.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Standard system libraries in `java.lang`, including `java.lang.Math`, `java.lang.Integer`,
    and `java.lang.Double`. This libraries are always available in Java.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Imported system libraries such as `java.util.Arrays`. An `import` statement
    at the beginning of the program is needed to use such libraries.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Libraries in this book. Follow [these instructions](../code) for adding [algs4.jar](../code/algs4.jar)
    to your Java classpath.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To invoke a method from another library, we prepend the library name to the
    method name for each call: `Math.sqrt()`, `Arrays.sort()`, `BinarySearch.rank()`,
    and `StdIn.readInt()`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: APIs.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Java libraries.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Our standard libraries.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Your own libraries.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Strings.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Java''s string data type](../Images/0cfe23791991f8d0600ec8ea8afdc269.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: '*Concatenation.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Conversion.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Automatic conversion.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Command-line arguments.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input and output.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Commands and arguments.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![anatomy of a command](../Images/d935a2aa340362794deb522b3b29792c.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*Standard output.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Formatted output.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![printf formatting conventions](../Images/f29c890587ef193bd05a6a17b35f95ab.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*Standard input.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Redirection and piping.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![redirection and piping from the command line](../Images/81ea2418a373b920fa16ca0127c7f08b.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*Input and output from a file.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Standard drawing.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Binary search.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is a complete Java program [BinarySearch.java](BinarySearch.java.html)
    that illustrates many of the basic features of our programming model. It implement
    a classic algorithm known as *binary search* and tests it for an application known
    as *allowlist filtering*.![anatomy of binary search](../Images/8a70c20685ad1439fb1969bf61ad5075.png)The
    static method `rank()` takes an integer key and a *sorted* array of `int` values
    as arguments and returns the index of the key if it is present in the array, -1
    otherwise. It accomplishes this task by maintaining variables `lo` and `hi` such
    that the key is in `a[lo..hi]` if it is in the array, then entering into a loop
    that tests the middle entry in the interval (at index `mid`). If the key is equal
    to `a[mid]`, the return value is `mid`; otherwise the method cuts the interval
    size about in half, looking at the left half if the key is less than `a[mid]`
    and at the right half if the key is greater than `a[mid]`. The process terminates
    when the key is found or the interval is empty.![binary search in an ordered array](../Images/32c264b93d2ae14592d880bbf67cfbba.png)
  prefs: []
  type: TYPE_NORMAL
- en: '*Development client.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Allowlisting.* For testing, we use the sample files [tinyAllowlist.txt](tinyAllowlist.txt),
    [tinyText.txt](tinyText.txt), [largeAllowlist.txt](largeAllowlist.txt), and [largeText.txt](largeText.txt).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Performance.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '* * *'
  prefs: []
  type: TYPE_NORMAL
- en: Input and output libraries.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here is a list of the input and output libraries that we use throughout the
    textbook and beyond.
  prefs: []
  type: TYPE_NORMAL
- en: '| **PROGRAM** | **DESCRIPTION / JAVADOC** |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [StdIn.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdIn.java.html
    "read numbers and text from standard input") | [read numbers and text from standard
    input](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdIn.html
    "read numbers and text from standard input") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [StdOut.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdOut.java.html
    "write numbers and text to standard output") | [write numbers and text to standard
    output](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdOut.html
    "write numbers and text to standard output") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [StdDraw.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdDraw.java.html
    "draw geometric shapes in a window") | [draw geometric shapes in a window](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdDraw.html
    "draw geometric shapes in a window") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [StdAudio.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdAudio.java.html
    "create, play, and manipulate sound") | [create, play, and manipulate sound](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdAudio.html
    "create, play, and manipulate sound") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [StdRandom.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdRandom.java.html
    "generate random numbers") | [generate random numbers](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdRandom.html
    "generate random numbers") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [StdStats.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdStats.java.html
    "compute statistics") | [compute statistics](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdStats.html
    "compute statistics") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [StdArrayIO.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdArrayIO.java.html
    "read and write 1D and 2D arrays") | [read and write 1D and 2D arrays](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdArrayIO.html
    "read and write 1D and 2D arrays") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [In.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/In.java.html
    "read numbers and text from files and URLs") | [read numbers and text from files
    and URLs](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/In.html
    "read numbers and text from files and URLs") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [Out.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/Out.java.html
    "write numbers and text to files") | [write numbers and text to files](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/Out.html
    "write numbers and text to files") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [Draw.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/Draw.java.html
    "draw geometric shapes") | [draw geometric shapes](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/Draw.html
    "draw geometric shapes") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [DrawListener.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/DrawListener.java.html
    "support keyboard and mouse events in Draw") | [support keyboard and mouse events
    in Draw](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/DrawListener.html
    "support keyboard and mouse events in Draw") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [Picture.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/Picture.java.html
    "process digital images") | [process digital images](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/Picture.html
    "process digital images") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [Stopwatch.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/Stopwatch.java.html
    "measure running time") | [measure running time](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/Stopwatch.html
    "measure running time") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [BinaryStdIn.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/BinaryStdIn.java.html
    "read bits from standard input") | [read bits from standard input](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/BinaryStdIn.html
    "read bits from standard input") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [BinaryStdOut.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/BinaryStdOut.java.html
    "write bits to standard output") | [write bits to standard output](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/BinaryStdOut.html
    "write bits to standard output") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [BinaryIn.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/BinaryIn.java.html
    "read bits from files and URLs") | [read bits from files and URLs](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/BinaryIn.html
    "read bits from files and URLs") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [BinaryOut.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/BinaryOut.java.html
    "write bits to files") | [write bits to files](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/BinaryOut.html
    "write bits to files") |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: We briefly describe the input and output libraries and include a sample client.
  prefs: []
  type: TYPE_NORMAL
- en: Standard input and standard output.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[StdIn.java](StdIn.java.html) and [StdOut.java](StdOut.java.html) are libraries
    for reading in numbers and text from standard input and printing out numbers and
    text to standard output. Our versions have a simpler interface than the corresponding
    Java ones (and provide a few technical improvements). [RandomSeq.java](RandomSeq.java.html)
    generates random numbers in a given range. [Average.java](Average.java.html) reads
    in a sequence of real numbers from standard input and prints their average on
    standard output.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[In.java](In.java.html) and [Out.java](Out.java.html) are object-oriented versions
    that support multiple input and output streams, including reading from a file
    or URL and writing to a file.'
  prefs: []
  type: TYPE_NORMAL
- en: Standard drawing.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[StdDraw.java](StdDraw.java.html) is an easy-to-use library for drawing geometric
    shapes, such as points, lines, and circles. [RightTriangle.java](RightTriangle.java.html)
    draws a right triangle and a circumscribing circle.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Draw.java](Draw.java.html) is an object-oriented versions that support drawing
    in multiple windows.'
  prefs: []
  type: TYPE_NORMAL
- en: Standard audio.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[StdAudio.java](StdAudio.java.html) is an easy-to-use library for synthesizing
    sound. [Tone.java](Tone.java.html) reads in a frequency and duration from the
    command line, and it sonifies a sine wave of the given frequency for the given
    duration.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Image processing.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Picture.java](Picture.java.html) is an easy-to-use library for image processing.
    [Scale.java](Scale.java.html) takes the name of a picture file and two integers
    (width w and height h) as command-line arguments and scales the image to w-by-h.'
  prefs: []
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; **`% java Scale mandrill.jpg 298 298`** &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '![298-by-298](../Images/95f0af44f405ffe3f2f65e93dbf94a50.png) |'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; **`% java Scale mandrill.jpg 200 200`** &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '![200-by-400](../Images/58240b8d5e8f790d49c559f35b756231.png) |'
  prefs: []
  type: TYPE_NORMAL
- en: '&#124; **`% java Scale mandrill.jpg 200 400`** &#124;'
  prefs: []
  type: TYPE_NORMAL
- en: '![200-by-400](../Images/9824aa1013179a5af4c823fea58c53e9.png) |'
  prefs: []
  type: TYPE_NORMAL
- en: Q + A
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Q.** How important is it to use a good shuffling algorithm?'
  prefs: []
  type: TYPE_NORMAL
- en: '**A.** Here''s an [amusing anecdote](http://www.datamation.com/entdev/article.php/616221/How-We-Learned-to-Cheat-at-Online-Poker-A-Study-in-Software-Security.htm)
    of what happens when you don''t do it correctly (and your business is online poker!).
    If you''re running an online casino, here''s the recommended approach for shuffling
    a deck of cards: (i) get a cryptographically secure pseudo-random number generator,
    (ii) assign a random 64-bit number to each card, (iii) sort the cards according
    to their number.'
  prefs: []
  type: TYPE_NORMAL
- en: Creative Problems
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Binomial distribution.** Estimate the number of recursive calls that would
    be used by the method call `binomial1(100, 50, .25)` in [Binomial.java](Binomial.java.html).
    Develop a better implementation that is based on saving computed values in an
    array.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Web Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Sattolo''s algorithm.** Write a program [Sattolo.java](Sattolo.java.html)
    that generates a unifomly distributed cycle of length N using [Sattolo''s algorithm](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle#Sattolo.27s_algorithm).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Wget.** Write a program [Wget.java](Wget.java.html) that reads in data from
    the URL specified on the command line and saves it in a file with the same name.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Right triangle.** Write a client [RightTriangle.java](RightTriangle.java.html)
    that draws a right triangle and a circumscribing circle.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`  % java RightTriangle`'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![right triangle and circumscribing circle](../Images/2f2d6b2b677f636648bcf37e13aa157b.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '**Bouncing ball.** Write a program [BouncingBall.java](BouncingBall.java.html)
    that illustrates the motion of a bouncing ball.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: <BouncingBall.mov>
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: ''
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Your browser does not support the video tag.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
