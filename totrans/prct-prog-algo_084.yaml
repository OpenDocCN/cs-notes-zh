- en: 1.1   Programming Model
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.1   编程模型
- en: 原文：[https://algs4.cs.princeton.edu/11model](https://algs4.cs.princeton.edu/11model)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://algs4.cs.princeton.edu/11model](https://algs4.cs.princeton.edu/11model)
- en: This section under major construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节正在大规模施工中。
- en: 'Our study of algorithms is based upon implementing them as programs written
    in the Java programming language. We do so for several reasons:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '我们对算法的研究基于将它们作为用Java编程语言编写的程序来实现。我们这样做有几个原因： '
- en: Our programs are concise, elegant, and complete descriptions of algorithms.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们的程序是算法的简洁、优雅和完整描述。
- en: You can run the programs to study properties of the algorithms.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以运行程序来研究算法的属性。
- en: You can put the algorithms immediately to good use in applications.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以立即将算法应用于应用程序中。
- en: Primitive data types and expressions.
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 原始数据类型和表达式。
- en: 'A *data type* is a set of values and a set of operations on those values. The
    following four primitive data types are the basis of the Java language:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*数据类型*是一组值和对这些值的一组操作。以下四种原始数据类型是Java语言的基础：'
- en: '*Integers*, with arithmetic operations (`int`)'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*整数*，带有算术运算（`int`）'
- en: '*Real numbers*, again with arithmetic operations (`double`)'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*实数*，再次带有算术运算（`double`）'
- en: '*Booleans*, the set of values { *true*, *false* } with logical operations (`boolean`)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*布尔值*，值集合为{ *true*, *false* }，带有逻辑运算（`boolean`）'
- en: '*Characters*, the alphanumeric characters and symbols that you type (`char`)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*字符*，您键入的字母数字字符和符号（`char`）'
- en: A Java program manipulates *variables* that are named with *identifiers*. Each
    variable is associated with a data type and stores one of the permissible data-type
    values. We use *expressions* to apply the operations associated with each type.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Java程序操作用*标识符*命名的*变量*。每个变量与数据类型关联，并存储其中一个可允许的数据类型值。我们使用*表达式*来应用与每种类型相关的操作。
- en: '![basic building blocks for Java programs](../Images/378d01fbb7e15d39954b60ae7109b2f6.png)'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![Java程序的基本构建块](../Images/378d01fbb7e15d39954b60ae7109b2f6.png)'
- en: The following table summarizes the set of values and most common operations
    on those values for Java's `int`, `double`, `boolean`, and `char` data types.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表总结了Java的`int`、`double`、`boolean`和`char`数据类型的值集合和最常见操作。
- en: '![primitive data types in Java](../Images/4be9cb1f9a222ffe63f6b7e6debe0855.png)'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![Java中的原始数据类型](../Images/4be9cb1f9a222ffe63f6b7e6debe0855.png)'
- en: '*Expressions.* Typical expressions are *infix*. When an expression contains
    more than one operator, the *precedence order* specifies the order in which they
    are applied: The operators `*` and `/` (and `%`) have higher precedence than (are
    applied before) the `+` and `-` operators; among logical operators, `!` is the
    highest precedence, followed by `&&` and and then `||`. Generally, operators of
    the same precedence are *left associative* (applied left to right). You can use
    parentheses to override these rules.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*表达式。* 典型表达式为*中缀*。当一个表达式包含多个运算符时，*优先级顺序*指定它们应用的顺序：运算符`*`和`/`（以及`%`）的优先级高于（在`+`和`-`运算符之前应用）；在逻辑运算符中，`!`具有最高优先级，其次是`&&`，然后是`||`。通常，相同优先级的运算符是*左结合*（从左到右应用）。您可以使用括号来覆盖这些规则。'
- en: '*Type conversion.* Numbers are automatically promoted to a more inclusive type
    if no information is lost.For example, in the expression `1 + 2.5`, the `1` is
    promoted to the `double` value `1.0` and the expression evaluates to the `double`
    value <t>3.5. A *cast* is a directive to convert a value of one type into a value
    of another type. For example `(int) 3.7` is `3`. Casting a `double` to an `int`
    truncates toward zero.</t>'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*类型转换。* 如果不会丢失信息，数字会自动提升为更包容的类型。例如，在表达式`1 + 2.5`中，`1`被提升为`double`值`1.0`，表达式求值为`double`值<t>3.5。*强制转换*是将一个类型的值转换为另一个类型的指令。例如`(int)
    3.7`是`3`。将`double`转换为`int`会朝向零截断。</t>'
- en: '*Comparisons.* The following *mixed-type* operators compare two values of the
    same type and produce a `boolean` value:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*比较。* 以下*混合类型*运算符比较相同类型的两个值并产生一个`boolean`值：'
- en: '*equal* (`==`)'
  id: totrans-20
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*等于*（`==`)'
- en: '*not equal* (`!=`)'
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*不等于*（`!=`)'
- en: '*less than* (`<`)'
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*小于*（`<`)'
- en: '*less than or equal* (`<=`)'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*小于或等于*（`<=`)'
- en: '*greater than* (`>`)'
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*大于*（`>`）'
- en: '*greater than or equal* (`>=`)'
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*大于或等于*（`>=`)'
- en: '*Other primitive types.* Java''s `int` has a 32-bit representation; Java''s
    `double` type has a 64-bit representation. Java has five additional primitive
    data types:'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*其他原始类型。* Java的`int`有32位表示；Java的`double`类型有64位表示。Java还有五种额外的原始数据类型：'
- en: 64-bit integers, with arithmetic operations (`long`)
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 64位整数，带有算术运算（`long`）
- en: 16-bit integers, with arithmetic operations (`short`)
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16位整数，带有算术运算（`short`）
- en: 16-bit characters, with arithmetic operations (`char`)
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 16位字符，带有算术运算（`char`）
- en: 8-bit integers, with arithmetic operations (`byte`)
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 8位整数，带有算术运算（`byte`）
- en: 32-bit single-precision real numbers, with arithmetic operations (`float`)
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 32位单精度实数，带有算术运算（`float`）
- en: Statements.
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 语句。
- en: A Java program is composed of *statements*, which define the computation by
    creating and manipulating variables, assigning data-type values to them, and controlling
    the flow of execution of such operations.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Java程序由*语句*组成，通过创建和操作变量、为它们分配数据类型值以及控制这些操作的执行流程来定义计算。
- en: '*Declarations* create variables of a specified type and name them with identifiers.
    Java is a *strongly typed* language because the Java compiler checks for consistency.
    The *scope* of a variable is the part of the program where it is defined.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*声明*创建指定类型的变量并用标识符命名它们。Java是一种*强类型*语言，因为Java编译器会检查一致性。变量的*作用域*是程序中定义它的部分。'
- en: '*Assignments* associate a data-type value (defined by an expression) with a
    variable.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*赋值*将数据类型值（由表达式定义）与变量关联。'
- en: '*Initializing declarations* combine a declaration with an assignment to initialize
    a variable at the same time it is declared.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*初始化声明*将声明与赋值结合在一起，以初始化变量的同时声明变量。'
- en: '*Implicit assignments.* The following shortcuts are available when our purpose
    is to modify a variable''s value relative to the current value:'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*隐式赋值。* 当我们的目的是相对于当前值修改变量的值时，可以使用以下快捷方式：'
- en: 'Increment/decrement operators: the code `i++` is shorthand for `i = i + 1`.
    The code `++i` is the same except that the expression value is taken *after* the
    increment/decrement, not before.'
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递增/递减运算符：代码`i++`是`i = i + 1`��简写。代码`++i`相同，只是在递增/递减之后取表达式值，而不是之前。
- en: 'Other compound operators: the code `i /= 2` is shorthand for `i = i/2`.'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他复合运算符：代码`i /= 2`是`i = i/2`的简写。
- en: '*Conditionals* provide for a simple change in the flow of execution—execute
    the statements in one of two blocks, depending on a specified condition.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*条件语句*提供了对执行流程的简单改变——根据指定条件在两个块中的一个中执行语句。'
- en: '*Loops* provide for a more profound change in the flow of execution—execute
    the statements in a block as long as a given condition is true. We refer to the
    statements in the block in a loop as the *body* of the loop.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*循环*提供了对执行流程的更深刻改变——只要给定条件为真，就执行块中的语句。我们将循环中的语句称为循环的*主体*。'
- en: '*Break and continue.* Java supports two additional statements for use within
    while loops:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*中断和继续。* Java支持在while循环中使用的两个额外语句：'
- en: The `break` statement, which immediately exits the loop
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`break`语句，立即退出循环'
- en: The `continue` statement, which immediately begins the next iteration of the
    loop
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`continue`语句，立即开始循环的下一次迭代'
- en: '*For notation.* Many loops follow this scheme: initialize an index variable
    to some value and then use a `while` loop to test a loop continuation condition
    involving the index variable, where the last statement in the `while` loop increments
    the index variable. You can express such loops compactly with Java''s `for` notation.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*关于符号。* 许多循环遵循这种方案：将索引变量初始化为某个值，然后使用`while`循环来测试涉及索引变量的循环继续条件，其中`while`循环中的最后一条语句递增索引变量。您可以使用Java的`for`符号简洁地表示这样的循环。'
- en: '*Single-statement blocks.* If a block of statements in a conditional or a loop
    has only a single statement, the curly braces may be omitted.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*单语句块。* 如果条件或循环中的语句块只有一个语句，则大括号可以省略。'
- en: The following table illustrates different kinds of Java statements.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格说明了不同类型的Java语句。
- en: '![Java statements](../Images/722b40d160d70d2577710c1c756c01d8.png)'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![Java语句](../Images/722b40d160d70d2577710c1c756c01d8.png)'
- en: Arrays.
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数组。
- en: An *array* stores a sequence of values that are all of the same type. If we
    have `N` values, we can use the notation `a[i]` to refer to the `i`th value for
    any value of `i` from `0` to `N-1`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*数组*存储相同类型的值序列。如果有`N`个值，我们可以使用符号`a[i]`来引用`i`的值，其中`i`的值从`0`到`N-1`。'
- en: '*Creating and initializing an array.* Making an array in a Java program involves
    three distinct steps:'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建和初始化数组。* 在Java程序中创建数组涉及三个不同的步骤：'
- en: Declare the array name and type.
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 声明数组名称和类型。
- en: Create the array.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建数组。
- en: Initialize the array values.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初始化数组值。
- en: '*Default array initialization.* For economy in code, we often take advantage
    of Java''s default array initialization convention and combine all three steps
    into a single statement. The default initial value is zero for numeric types and
    `false` for type `boolean`.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*默认数组初始化。* 为了节省代码，我们经常利用Java的默认数组初始化约定，并将所有三个步骤合并为一个语句。数值类型的默认初始值为零，`boolean`类型的默认值为`false`。'
- en: '*Initializing declaration.* We can specify the initialization values at compile
    time, by listing literal values between curly braces, separated by commas.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*初始化声明。* 我们可以在编译时指定初始化值，通过在大括号之间列出逗号分隔的文字值。'
- en: '![declaring, creating, and initializing an array](../Images/d9f46a6ab5affa421fd6735d765a34f3.png)'
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![声明、创建和初始化数组](../Images/d9f46a6ab5affa421fd6735d765a34f3.png)'
- en: '*Using an array.* Once we create an array, its size is fixed. A program can
    refer to the length of an array `a[]` with the code `a.length`. Java does *automatic
    bounds checking*—if you access an array with an illegal index your program will
    terminate with an [ArrayIndexOutOfBoundsException](http://download.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html).'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*使用数组。* 一旦创建数组，其大小就固定了。程序可以使用代码`a.length`引用数组`a[]`的长度。Java进行*自动边界检查*——如果您使用非法索引访问数组，程序将以[ArrayIndexOutOfBoundsException](http://download.oracle.com/javase/6/docs/api/java/lang/ArrayIndexOutOfBoundsException.html)终止。'
- en: '*Aliasing.* An array name refers to the whole array—if we assign one array
    name to another, then both refer to the same array, as illustrated in the following
    code fragment.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*别名。* 数组名称指代整个数组——如果我们将一个数组名称分配给另一个数组名称，则两者都指代同一个数组，如下面的代码片段所示。'
- en: '[PRE0]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This situation is known as *aliasing* and can lead to subtle bugs.
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种情况被称为*别名*，可能导致微妙的错误。
- en: '*Two-dimensional arrays.* A two-dimensional array in Java is an array of one-dimensional
    arrays. A two-dimensional array may be *ragged* (its arrays may all be of differing
    lengths), but we most often work with (for appropriate parameters M and N) M-by-N
    two-dimensional arrays. To refer to the entry in row `i` and column `j` of a two-dimensional
    array `a[][]`, we use the notation `a[i][j]`.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*二维数组。* 在Java中，二维数组是一维数组的数组。二维数组可能是*不规则的*（其数组的长度可能各不相同），但我们通常使用（对于适当的参数M和N）M×N的二维数组。要引用二维数组`a[][]`中第`i`行第`j`列的条目，我们使用表示法`a[i][j]`。'
- en: Static methods.
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态方法。
- en: Static methods are called *functions* in many programming languages, since they
    can behave like mathematical functions. Each static method is a sequence of statements
    that are executed, one after the other, when the static method is *called*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 许多编程语言中称静态方法为*函数*，因为它们可以像数学函数一样运行。每个静态方法是一系列语句，当调用静态方法时，这些语句将依次执行。
- en: '*Defining a static method.* A *method* encapsulates a computation that is defined
    as a sequence of statements. A method takes *arguments* (values of given data
    types) and computes a *return value* of some data type or causes a *side effect*.
    Each static method is composed of a *signature* and a *body*.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*定义静态方法。* *方法* 封装了一系列语句定义的计算。方法接受*参数*（给定数据类型的值）并计算某种数据类型的*返回值*或引起*副作用*。每个静态方法由*签名*和*主体*组成。'
- en: '![anatomy of a static method](../Images/bde2f4984f0c95d1d28a964988dde65e.png)'
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![静态方法的解剖](../Images/bde2f4984f0c95d1d28a964988dde65e.png)'
- en: '*Invoking a static method.* A call on a static method is its name followed
    by expressions that specify argument values in parentheses, separated by commas.
    When a method is called, its argument variables are initialized with the values
    of the corresponding expressions in the call. A `return` statement terminates
    a static method, returning control to the caller. If the static method is to compute
    a value, that value must be specified in a `return` statement.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*调用静态方法。* 对静态方法的调用是其名称，后跟用逗号分隔的括号中指定参数值的表达式。当调用方法时，其参数变量将用调用中相应表达式的值初始化。`return`语句终止静态方法，将控制返回给调用者。如果静态方法要计算一个值，那么该值必须在`return`语句中指定。'
- en: '*Properties of methods.* Java methods have the following features:'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*方法的属性。* Java方法具有以下特点：'
- en: '*Arguments are passed by value.* When calling a function, the argument value
    is fully evaluated and the resulting value is *copied* into argument variable.
    This is known as *pass by value*. Array (and other object) references are also
    passed by value: the method cannot change the reference, but it can change the
    entries in the array (or value of the object).'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*参数按值传递。* 调用函数时，参数值会被完全评估，并且生成的值会*复制*到参数变量中。这被称为*按值传递*。数组（和其他对象）引用也是按值传递的：方法无法更改引用，但可以更改数组中的条目（或对象的值）。'
- en: '*Method names can be overloaded.* Methods within a class can have the same
    name, provided they have different signatures. This features is known as *overloading*.'
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*方法名可以重载。* 类中的方法可以具有相同的名称，只要它们具有不同的签名。这个特性被称为*重载*。'
- en: '*A method has a single return value but may have multiple return statements.*
    A Java method can provide only one return value. Control goes back to the calling
    program as soon as the first `return` statement is reached.'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*方法具有单个返回值，但可能有多个返回语句。* Java方法只能提供一个返回值。一旦到达第一个`return`语句，控制就会返回到调用程序。'
- en: '*A method can have side effects.* A method may use the keyword `void` as its
    return type, to indicate that it has no return value and produces side effects
    (consume input, produce output, change entries in an array, or otherwise change
    the state of the system).'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*方法可能具有副作用。* 方法可以使用关键字`void`作为其返回类型，以指示它没有返回值并产生副作用（消耗输入，产生输出，更改数组中的条目，或以其他方式更改系统的状态）。'
- en: '*Recursion.* A *recursive* method is a method that calls itself either directly
    or indirectly. There are three important rules of thumb in developing recursive
    programs:'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*递归。* 递归方法是一种直接或间接调用自身的方法。在开发递归程序时有三个重要的经验法则：'
- en: The recursion has a *base case*.
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归有一个*基本情况*。
- en: Recursive calls must address subproblems that are *smaller* in some sense, so
    that recursive calls converge to the base case.
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归调用必须处理在某种意义上*更小*的子问题，以便递归调用收敛到基本情况。
- en: Recursive calls should not address subproblems that *overlap*.
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 递归调用不应处理*重叠*的子问题。
- en: '*Basic programming model.* A *library of static methods* is a set of static
    methods that are defined in a Java class. A basic model for Java programming is
    to develop a program that addresses a specific computational task by creating
    a library of static methods, one of which is named `main()`.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*基本编程模型。* 一组静态方法的库是在Java类中定义的一组静态方法。Java编程的基本模型是通过创建一组静态方法的库来解决特定的计算任务，其中一个方法被命名为`main()`。'
- en: '*Modular programming.* Libraries of static methods enable *modular programming*,
    where static methods in one library can call static methods defined in other libraries.
    This approach has many important advantages.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*模块化编程。* 静态方法库使*模块化编程*成为可能，其中一个库中的静态方法可以调用其他库中定义的静态方法。这种方法有许多重要的优点。'
- en: Work with modules of reasonable size
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用合理大小的模块进行工作
- en: Share and reuse code without having to reimplement it
  id: totrans-80
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 共享和重用代码，而无需重新实现它
- en: Substitute improved implementations
  id: totrans-81
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 替换改进的实现
- en: Develop appropriate abstract models for addressing programming problems
  id: totrans-82
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为解决编程问题开发适当的抽象模型
- en: Localize debugging
  id: totrans-83
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地化调试
- en: '*Unit testing.* A best practice in Java programming is to include a `main()`
    in every library of static methods that tests the methods in the library.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*单元测试。* Java编程中的最佳实践是在每个静态方法库中包含一个`main()`，用于测试库中的方法。'
- en: '*External libraries.* We use static methods from three different kinds of libraries,
    each requiring (slightly) differing procedures for code reuse.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*外部库。* 我们使用来自三种不同类型的库的静态方法，每种库都需要（略有）不同的代码重用程序。'
- en: Standard system libraries in `java.lang`, including `java.lang.Math`, `java.lang.Integer`,
    and `java.lang.Double`. This libraries are always available in Java.
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`java.lang`中的标准系统库，包括`java.lang.Math`，`java.lang.Integer`和`java.lang.Double`。这些库在Java中始终可用。'
- en: Imported system libraries such as `java.util.Arrays`. An `import` statement
    at the beginning of the program is needed to use such libraries.
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入的系统库，如`java.util.Arrays`。程序开头需要一个`import`语句来使用这些库。
- en: Libraries in this book. Follow [these instructions](../code) for adding [algs4.jar](../code/algs4.jar)
    to your Java classpath.
  id: totrans-88
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书中的库。按照[这些说明](../code)添加[algs4.jar](../code/algs4.jar)到您的Java类路径。
- en: 'To invoke a method from another library, we prepend the library name to the
    method name for each call: `Math.sqrt()`, `Arrays.sort()`, `BinarySearch.rank()`,
    and `StdIn.readInt()`.'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要从另一个库调用方法，我们在每次调用时在方法名前加上库名：`Math.sqrt()`，`Arrays.sort()`，`BinarySearch.rank()`和`StdIn.readInt()`。
- en: '* * *'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: APIs.
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: API。
- en: '*Java libraries.*'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Java库*。'
- en: '*Our standard libraries.*'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*我们的标准库*。'
- en: '*Your own libraries.*'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*您自己的库*。'
- en: Strings.
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字符串。
- en: '![Java''s string data type](../Images/0cfe23791991f8d0600ec8ea8afdc269.png)'
  id: totrans-96
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![Java的字符串数据类型](../Images/0cfe23791991f8d0600ec8ea8afdc269.png)'
- en: '*Concatenation.*'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*连接*。'
- en: '*Conversion.*'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*转换*。'
- en: '*Automatic conversion.*'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自动转换*。'
- en: '*Command-line arguments.*'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*命令行参数*。'
- en: Input and output.
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入和输出。
- en: '*Commands and arguments.*'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*命令和参数*。'
- en: '![anatomy of a command](../Images/d935a2aa340362794deb522b3b29792c.png)'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![命令的解剖](../Images/d935a2aa340362794deb522b3b29792c.png)'
- en: '*Standard output.*'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*标准输出。*'
- en: '*Formatted output.*'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*格式化输出。*'
- en: '![printf formatting conventions](../Images/f29c890587ef193bd05a6a17b35f95ab.png)'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![printf格式约定](../Images/f29c890587ef193bd05a6a17b35f95ab.png)'
- en: '*Standard input.*'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*标准输入。*'
- en: '*Redirection and piping.*'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*重定向和管道。*'
- en: '![redirection and piping from the command line](../Images/81ea2418a373b920fa16ca0127c7f08b.png)'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![从命令行重定向和管道](../Images/81ea2418a373b920fa16ca0127c7f08b.png)'
- en: '*Input and output from a file.*'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*从文件中输入和输出。*'
- en: '*Standard drawing.*'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*标准绘图。*'
- en: Binary search.
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二分查找。
- en: Below is a complete Java program [BinarySearch.java](BinarySearch.java.html)
    that illustrates many of the basic features of our programming model. It implement
    a classic algorithm known as *binary search* and tests it for an application known
    as *allowlist filtering*.![anatomy of binary search](../Images/8a70c20685ad1439fb1969bf61ad5075.png)The
    static method `rank()` takes an integer key and a *sorted* array of `int` values
    as arguments and returns the index of the key if it is present in the array, -1
    otherwise. It accomplishes this task by maintaining variables `lo` and `hi` such
    that the key is in `a[lo..hi]` if it is in the array, then entering into a loop
    that tests the middle entry in the interval (at index `mid`). If the key is equal
    to `a[mid]`, the return value is `mid`; otherwise the method cuts the interval
    size about in half, looking at the left half if the key is less than `a[mid]`
    and at the right half if the key is greater than `a[mid]`. The process terminates
    when the key is found or the interval is empty.![binary search in an ordered array](../Images/32c264b93d2ae14592d880bbf67cfbba.png)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个完整的Java程序[BinarySearch.java](BinarySearch.java.html)，演示了我们编程模型的许多基本特性。它实现了一种称为*二分查找*的经典算法，并对其进行了*白名单过滤*应用的测试。![二分查找的解剖](../Images/8a70c20685ad1439fb1969bf61ad5075.png)静态方法`rank()`接受一个整数键和一个*排序的*`int`值数组作为参数，并在数组中返回键的索引，否则返回-1。它通过维护变量`lo`和`hi`来完成这个任务，使得如果键在`a[lo..hi]`中，则进入一个循环，测试间隔中的中间条目（在��引`mid`处）。如果键等于`a[mid]`，则返回值为`mid`；否则，该方法将间隔大小减半，如果键小于`a[mid]`，则查看左半部分，如果键大于`a[mid]`，则查看右半部分。当找到键或间隔为空时，该过程终止。![有序数组中的二分查找](../Images/32c264b93d2ae14592d880bbf67cfbba.png)
- en: '*Development client.*'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*开发客户端。*'
- en: '*Allowlisting.* For testing, we use the sample files [tinyAllowlist.txt](tinyAllowlist.txt),
    [tinyText.txt](tinyText.txt), [largeAllowlist.txt](largeAllowlist.txt), and [largeText.txt](largeText.txt).'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*白名单。* 在测试中，我们使用样本文件[tinyAllowlist.txt](tinyAllowlist.txt)，[tinyText.txt](tinyText.txt)，[largeAllowlist.txt](largeAllowlist.txt)和[largeText.txt](largeText.txt)。'
- en: '*Performance.*'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*性能。*'
- en: '* * *'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Input and output libraries.
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入和输出库。
- en: Here is a list of the input and output libraries that we use throughout the
    textbook and beyond.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在整本教材以及更多领域中使用的输入和输出库列表。
- en: '| **PROGRAM** | **DESCRIPTION / JAVADOC** |'
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| **程序** | **描述 / JAVADOC** |'
- en: '| [StdIn.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdIn.java.html
    "read numbers and text from standard input") | [read numbers and text from standard
    input](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdIn.html
    "read numbers and text from standard input") |'
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [StdIn.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdIn.java.html
    "从标准输入读取数字和文本") | [从标准输入读取数字和文本](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdIn.html
    "从标准输入读取数字和文本") |'
- en: '| [StdOut.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdOut.java.html
    "write numbers and text to standard output") | [write numbers and text to standard
    output](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdOut.html
    "write numbers and text to standard output") |'
  id: totrans-122
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [StdOut.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdOut.java.html
    "将数字和文本写入标准输出") | [将数字和文本写入标准输出](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdOut.html
    "将数字和文本写入标准输出") |'
- en: '| [StdDraw.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdDraw.java.html
    "draw geometric shapes in a window") | [draw geometric shapes in a window](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdDraw.html
    "draw geometric shapes in a window") |'
  id: totrans-123
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [StdDraw.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdDraw.java.html
    "在窗口中绘制几何形状") | [在窗口中绘制几何形状](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdDraw.html
    "在窗口中绘制几何形状") |'
- en: '| [StdAudio.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdAudio.java.html
    "create, play, and manipulate sound") | [create, play, and manipulate sound](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdAudio.html
    "create, play, and manipulate sound") |'
  id: totrans-124
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [StdAudio.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdAudio.java.html
    "创建、播放和操作声音") | [创建、播放和操作声音](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdAudio.html
    "创建、播放和操作声音") |'
- en: '| [StdRandom.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdRandom.java.html
    "generate random numbers") | [generate random numbers](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdRandom.html
    "generate random numbers") |'
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [StdRandom.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdRandom.java.html
    "生成随机数") | [生成随机数](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdRandom.html
    "生成随机数") |'
- en: '| [StdStats.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdStats.java.html
    "compute statistics") | [compute statistics](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdStats.html
    "compute statistics") |'
  id: totrans-126
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [StdStats.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdStats.java.html
    "计算统计数据") | [计算统计数据](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdStats.html
    "计算统计数据") |'
- en: '| [StdArrayIO.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdArrayIO.java.html
    "read and write 1D and 2D arrays") | [read and write 1D and 2D arrays](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdArrayIO.html
    "read and write 1D and 2D arrays") |'
  id: totrans-127
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [StdArrayIO.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/StdArrayIO.java.html
    "读取和写入1D和2D数组") | [读取和写入1D和2D数组](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/StdArrayIO.html
    "读取和写入1D和2D数组") |'
- en: '| [In.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/In.java.html
    "read numbers and text from files and URLs") | [read numbers and text from files
    and URLs](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/In.html
    "read numbers and text from files and URLs") |'
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [In.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/In.java.html
    "从文件和URL读取数字和文本") | [从文件和URL读取数字和文本](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/In.html
    "从文件和URL读取数字和文本") |'
- en: '| [Out.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/Out.java.html
    "write numbers and text to files") | [write numbers and text to files](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/Out.html
    "write numbers and text to files") |'
  id: totrans-129
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [Out.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/Out.java.html
    "将数字和文本写入文件") | [将数字和文本写入文件](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/Out.html
    "将数字和文本写入文件") |'
- en: '| [Draw.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/Draw.java.html
    "draw geometric shapes") | [draw geometric shapes](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/Draw.html
    "draw geometric shapes") |'
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [Draw.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/Draw.java.html
    "绘制几何形状") | [绘制几何形状](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/Draw.html
    "绘制几何形状") |'
- en: '| [DrawListener.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/DrawListener.java.html
    "support keyboard and mouse events in Draw") | [support keyboard and mouse events
    in Draw](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/DrawListener.html
    "support keyboard and mouse events in Draw") |'
  id: totrans-131
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [DrawListener.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/DrawListener.java.html
    "在Draw中支持键盘和鼠标事件") | [在Draw中支持键盘和鼠标事件](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/DrawListener.html
    "在Draw中支持键盘和鼠标事件") |'
- en: '| [Picture.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/Picture.java.html
    "process digital images") | [process digital images](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/Picture.html
    "process digital images") |'
  id: totrans-132
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [Picture.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/Picture.java.html
    "处理数字图像") | [处理数字图像](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/Picture.html
    "处理数字图像") |'
- en: '| [Stopwatch.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/Stopwatch.java.html
    "measure running time") | [measure running time](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/Stopwatch.html
    "measure running time") |'
  id: totrans-133
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [Stopwatch.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/Stopwatch.java.html
    "测量运行时间") | [测量运行时间](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/Stopwatch.html
    "测量运行时间") |'
- en: '| [BinaryStdIn.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/BinaryStdIn.java.html
    "read bits from standard input") | [read bits from standard input](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/BinaryStdIn.html
    "read bits from standard input") |'
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [BinaryStdIn.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/BinaryStdIn.java.html
    "从标准输入读取位") | [从标准输入读取位](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/BinaryStdIn.html
    "从标准输入读取位") |'
- en: '| [BinaryStdOut.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/BinaryStdOut.java.html
    "write bits to standard output") | [write bits to standard output](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/BinaryStdOut.html
    "write bits to standard output") |'
  id: totrans-135
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [BinaryStdOut.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/BinaryStdOut.java.html
    "将位写入标准输出") | [将位写入标准输出](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/BinaryStdOut.html
    "将位写入标准输出") |'
- en: '| [BinaryIn.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/BinaryIn.java.html
    "read bits from files and URLs") | [read bits from files and URLs](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/BinaryIn.html
    "read bits from files and URLs") |'
  id: totrans-136
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [BinaryIn.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/BinaryIn.java.html
    "从文件和URL读取位") | [从文件和URL读取位](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/BinaryIn.html
    "从文件和URL读取位") |'
- en: '| [BinaryOut.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/BinaryOut.java.html
    "write bits to files") | [write bits to files](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/BinaryOut.html
    "write bits to files") |'
  id: totrans-137
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [BinaryOut.java](https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/BinaryOut.java.html
    "将位写入文件") | [将位写入文件](https://algs4.cs.princeton.edu/code/javadoc/edu/princeton/cs/algs4/BinaryOut.html
    "将位写入文件") |'
- en: We briefly describe the input and output libraries and include a sample client.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要描述输入和输出库，并包含一个示例客户端。
- en: Standard input and standard output.
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准输入和标准输出。
- en: '[StdIn.java](StdIn.java.html) and [StdOut.java](StdOut.java.html) are libraries
    for reading in numbers and text from standard input and printing out numbers and
    text to standard output. Our versions have a simpler interface than the corresponding
    Java ones (and provide a few technical improvements). [RandomSeq.java](RandomSeq.java.html)
    generates random numbers in a given range. [Average.java](Average.java.html) reads
    in a sequence of real numbers from standard input and prints their average on
    standard output.'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '[StdIn.java](StdIn.java.html) 和 [StdOut.java](StdOut.java.html) 是用于从标准输入读取数字和文本并将数字和文本打印到标准输出的库。我们的版本比相应的Java版本具有更简单的接口（并提供一些技术改进）。[RandomSeq.java](RandomSeq.java.html)
    生成给定范围内的随机数。[Average.java](Average.java.html) 从标准输入读取一系列实数，并在标准输出上打印它们的平均值。'
- en: '[PRE1]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[In.java](In.java.html) and [Out.java](Out.java.html) are object-oriented versions
    that support multiple input and output streams, including reading from a file
    or URL and writing to a file.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '[In.java](In.java.html) 和 [Out.java](Out.java.html) 是支持多个输入和输出流的面向对象版本，包括从文件或URL读取和写入文件。'
- en: Standard drawing.
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准绘图。
- en: '[StdDraw.java](StdDraw.java.html) is an easy-to-use library for drawing geometric
    shapes, such as points, lines, and circles. [RightTriangle.java](RightTriangle.java.html)
    draws a right triangle and a circumscribing circle.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '[StdDraw.java](StdDraw.java.html) 是一个易于使用的库，用于绘制几何形状，如点、线和圆。[RightTriangle.java](RightTriangle.java.html)
    绘制一个直角三角形和一个外接圆。'
- en: '[Draw.java](Draw.java.html) is an object-oriented versions that support drawing
    in multiple windows.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '[Draw.java](Draw.java.html) 是支持在多个窗口中绘图的面向对象版本。'
- en: Standard audio.
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 标准音频。
- en: '[StdAudio.java](StdAudio.java.html) is an easy-to-use library for synthesizing
    sound. [Tone.java](Tone.java.html) reads in a frequency and duration from the
    command line, and it sonifies a sine wave of the given frequency for the given
    duration.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '[StdAudio.java](StdAudio.java.html) 是一个易于使用的合成声音库。[Tone.java](Tone.java.html)
    从命令行读取频率和持续时间，并为给定持续时间的给定频率声音化正弦波。'
- en: '[PRE2]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Image processing.
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图像处理。
- en: '[Picture.java](Picture.java.html) is an easy-to-use library for image processing.
    [Scale.java](Scale.java.html) takes the name of a picture file and two integers
    (width w and height h) as command-line arguments and scales the image to w-by-h.'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '[Picture.java](Picture.java.html) 是一个易于使用的图像处理库。[Scale.java](Scale.java.html)
    接受图片文件的名称和两个整数（宽度 w 和高度 h）作为命令行参数，并将图像缩放到 w-by-h。'
- en: '|'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: '&#124; **`% java Scale mandrill.jpg 298 298`** &#124;'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; **`% java Scale mandrill.jpg 298 298`** &#124;'
- en: '![298-by-298](../Images/95f0af44f405ffe3f2f65e93dbf94a50.png) |'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '![298-by-298](../Images/95f0af44f405ffe3f2f65e93dbf94a50.png) |'
- en: '&#124; **`% java Scale mandrill.jpg 200 200`** &#124;'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; **`% java Scale mandrill.jpg 200 200`** &#124;'
- en: '![200-by-400](../Images/58240b8d5e8f790d49c559f35b756231.png) |'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '![200-by-400](../Images/58240b8d5e8f790d49c559f35b756231.png) |'
- en: '&#124; **`% java Scale mandrill.jpg 200 400`** &#124;'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '&#124; **`% java Scale mandrill.jpg 200 400`** &#124;'
- en: '![200-by-400](../Images/9824aa1013179a5af4c823fea58c53e9.png) |'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '![200-by-400](../Images/9824aa1013179a5af4c823fea58c53e9.png) |'
- en: Q + A
  id: totrans-158
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 问答
- en: '**Q.** How important is it to use a good shuffling algorithm?'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 使用一个好的洗牌算法有多重要？'
- en: '**A.** Here''s an [amusing anecdote](http://www.datamation.com/entdev/article.php/616221/How-We-Learned-to-Cheat-at-Online-Poker-A-Study-in-Software-Security.htm)
    of what happens when you don''t do it correctly (and your business is online poker!).
    If you''re running an online casino, here''s the recommended approach for shuffling
    a deck of cards: (i) get a cryptographically secure pseudo-random number generator,
    (ii) assign a random 64-bit number to each card, (iii) sort the cards according
    to their number.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 这里有一个[有趣的轶事](http://www.datamation.com/entdev/article.php/616221/How-We-Learned-to-Cheat-at-Online-Poker-A-Study-in-Software-Security.htm)，讲述了当你没有正确执行时会发生什么（尤其是在你的业务是在线扑克时！）。如果你经营一个在线赌场，这里是洗牌一副牌的推荐方法：（i）使用一个密码学安全的伪随机数生成器，（ii）为每张卡分配一个随机的64位数字，（iii）根据它们的数字对卡进行排序。'
- en: Creative Problems
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意问题
- en: '**Binomial distribution.** Estimate the number of recursive calls that would
    be used by the method call `binomial1(100, 50, .25)` in [Binomial.java](Binomial.java.html).
    Develop a better implementation that is based on saving computed values in an
    array.'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**二项分布。** 估计方法调用`binomial1(100, 50, .25)`在[Binomial.java](Binomial.java.html)中将使用的递归调用次数。开发一个基于在数组中保存计算值的更好的实现。'
- en: Web Exercises
  id: totrans-163
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络练习
- en: '**Sattolo''s algorithm.** Write a program [Sattolo.java](Sattolo.java.html)
    that generates a unifomly distributed cycle of length N using [Sattolo''s algorithm](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle#Sattolo.27s_algorithm).'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Sattolo''s algorithm.** 编写一个程序[Sattolo.java](Sattolo.java.html)，使用[Sattolo''s
    algorithm](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle#Sattolo.27s_algorithm)生成一个长度为
    N 的均匀分布循环。'
- en: '**Wget.** Write a program [Wget.java](Wget.java.html) that reads in data from
    the URL specified on the command line and saves it in a file with the same name.'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Wget.** 编写一个程序[Wget.java](Wget.java.html)，从命令行指定的URL读取数据并将其保存在同名文件中。'
- en: '[PRE3]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Right triangle.** Write a client [RightTriangle.java](RightTriangle.java.html)
    that draws a right triangle and a circumscribing circle.'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**直角三角形。** 编写一个客户端[RightTriangle.java](RightTriangle.java.html)，绘制一个直角三角形和一个外接圆。'
- en: '`  % java RightTriangle`'
  id: totrans-168
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '`  % java RightTriangle`'
- en: '![right triangle and circumscribing circle](../Images/2f2d6b2b677f636648bcf37e13aa157b.png)'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![直角三角形和外接圆](../Images/2f2d6b2b677f636648bcf37e13aa157b.png)'
- en: '**Bouncing ball.** Write a program [BouncingBall.java](BouncingBall.java.html)
    that illustrates the motion of a bouncing ball.'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**弹跳球。** 编写一个程序[BouncingBall.java](BouncingBall.java.html)，演示弹跳球的运动。'
- en: <BouncingBall.mov>
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: <BouncingBall.mov>
- en: ''
  id: totrans-172
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Your browser does not support the video tag.
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 您的浏览器不支持视频标记。
