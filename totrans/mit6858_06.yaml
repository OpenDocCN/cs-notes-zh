- en: Web security
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web security for a long time meant looking at what the server was doing, since
    the client-side was very simple. On the server, CGI scripts were executed and
    they interfaced with DBs, etc.
  prefs: []
  type: TYPE_NORMAL
- en: 'These days, browsers are very complicated:'
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript: pages execute client-side code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Document Object Model (DOM)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'XMLHttpRequests: a way for JavaScript client-side code to fetch content from
    the web-server asynchronously'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: a.k.a AJAX
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Web Sockets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multimedia support (the `<video>` tag)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Geolocation (webpages can determine physically where you are)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Native Client, for Google Chrome
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For web-security, this means we''re screwed: huge attack surface (See Figure
    1)'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Problems of composition: many layers'
  prefs: []
  type: TYPE_NORMAL
- en: One problem with the web is the *parsing contexts* problem
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If the *untrusted* content had a quote in it, perhaps the attacker could modify
    the code into:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Web specifications are long, tedios, boring, inconsistent, the size of the EU
    consistution (CSS, HTML) => they are vague aspirational documents that are never
    implemented.
  prefs: []
  type: TYPE_NORMAL
- en: This lecture we'll focus on client-side web-security.
  prefs: []
  type: TYPE_NORMAL
- en: Desktop applications come from a single principal (Microsoft, Google, etc) Web
    applications come from a bunch of principals.
  prefs: []
  type: TYPE_NORMAL
- en: '`http://foo.com/index.html` (see Figure 2)'
  prefs: []
  type: TYPE_NORMAL
- en: Can analytics code access the facebook frame content?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can analytics code interact with the text inputs? Can it declare event handlers?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the relationship beteen the Facebook frame (https) and the foo.com frame
    (http)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To answer these questions browsers use a security model called the *same origin
    policy*
  prefs: []
  type: TYPE_NORMAL
- en: '*Goal:* Two websites should not be able to tamper with each other, unless they
    want to.'
  prefs: []
  type: TYPE_NORMAL
- en: Defining what *tampering* means has gotten more complicated since the web first
    started.
  prefs: []
  type: TYPE_NORMAL
- en: '*Strategy:* Each *resource* is assigned an origin. JS code (a resource itself)
    can only access resources from its own origin.'
  prefs: []
  type: TYPE_NORMAL
- en: 'What is an origin? An origin is a network protocol scheme + hostname + port.
    Example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`https://facebook.com:8181`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://foo.com/index.html`, implicit port 80'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`https://foo.com/index.html`, implicit port 443'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Loosely speaking, you can think of an origin as an UID in UNIX, with a frame
    being a *process*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Four ideas in implementation of origins:'
  prefs: []
  type: TYPE_NORMAL
- en: Each origin has client side resources
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Cookies, to implement state across different HTTP requests
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: DOM storage, a fairly new interface, a key-value store
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A JavaScript namespace, defines what functions and interface are available to
    the origin (like the String class)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The DOM tree: a JavaScript reflection of the HTML in a page'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: A visual display area
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each frame gets the origin of its URL
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Scripts execute with the authority of their frame origin
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Passive content (images, CSS files) gets **zero** authority from the browser
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Content sniffing attacks
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Going back to our example:'
  prefs: []
  type: TYPE_NORMAL
- en: Google analytics and jQuery can do all sorts of stuff on the foo.com frame
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Facebook frame's inline JS cannot do anything to the foo.com frame
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: but it can talk to the foo.com frame using the `postMessage()` API
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The JS code in the FB frame cannot issue an AJAX request to the foo.com webserver
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'MIME types: text/html. All version of IE in the past would look at the first
    256 bytes of an object and ignore the `Content-Type` header. As a result, IE would
    misinterpret the type of files (due to bugs). Attacker can put JS code in a .jpg
    file. IE coerces it into text/html and then executes the JS code in the page.'
  prefs: []
  type: TYPE_NORMAL
- en: Frames and window objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Frames represent these sort of separate JS universes
  prefs: []
  type: TYPE_NORMAL
- en: A frame, w.r.t. to JS is an instance of a DOM node. Frames and window objects
    in JS point to each other. The window object acts like a namespace via which you
    can access any variable `x`.
  prefs: []
  type: TYPE_NORMAL
- en: Frames get the origin of the frame's URL `OR` a suffix of the original domain
    name.
  prefs: []
  type: TYPE_NORMAL
- en: '`x.y.z.com` can say "I want to set my origin to" `y.z.com` by assigning `document.domain`
    to `y.z.com`. This only works (or should) with suffixes of `x.y.z.com`. So it
    cannot do `document.domain = a.y.z.com`. Also, cannot set `document.domain = .com`
    because the site would be able to impact cookies in any .com website.'
  prefs: []
  type: TYPE_NORMAL
- en: Browsers distinguish between frames that assigned a value to document.domain
    and frames that did not.
  prefs: []
  type: TYPE_NORMAL
- en: 'Two frames can access each if:'
  prefs: []
  type: TYPE_NORMAL
- en: Both frames set `document.domain` to the same value
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Neither of the frames has changed `document.domain` and both values match
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You have `x.y.z.com` (buggy or evil) trying to attack `y.z.com`, by shortening
    its domain. The browser will not allow this because y.z.com will have NOT changed
    its document.domain while x.y.z.com has.
  prefs: []
  type: TYPE_NORMAL
- en: DOM nodes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cookies
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Cookies have a *domain* and a *path*.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: If path is `/` then all paths in the domain have access to the cookie.
  prefs: []
  type: TYPE_NORMAL
- en: On the client side there's `document.cookie`.
  prefs: []
  type: TYPE_NORMAL
- en: Cookies have a `secure flag` which means HTTP content should not be able to
    access that cookie.
  prefs: []
  type: TYPE_NORMAL
- en: When the browser generates a request, it's going to include all the matching
    cookies in that request (ambient authority).
  prefs: []
  type: TYPE_NORMAL
- en: How can different frames access other frames' cookies? If other frames can write
    cookies for other frames, then an attacker could log the victim into the attacker's
    gmail account and possibly read emails sent by the user.
  prefs: []
  type: TYPE_NORMAL
- en: Should `foo.co.uk` be allowed to set a cookie for `co.uk`? https://publicsuffix.org
    contains a list of all the top-level domains so that browsers do not allow cooking
    setting for domains like `co.uk`.
  prefs: []
  type: TYPE_NORMAL
- en: XMLHttpRequest
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default JS can only generate an AJAX request if it's going to its origin.
  prefs: []
  type: TYPE_NORMAL
- en: 'There''s a new paradigm called Cross Origin Request S. (CORS), where the server
    can use an ACL to allow other domains to access it. Server returns a header `Access-Control-Allow-Origin:
    foo.com` to indicate foo.com is allowed.'
  prefs: []
  type: TYPE_NORMAL
- en: Images, CSS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A frame can load images from any origin it desires but it cannot actually inspect
    the bits. But it can infer the size of the image via the placement of other nodes
    in the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: Same for CSS.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you do a cross-origin fetch of JS, that is allowed, but the frame cannot
    look at the source code. But the JS architecture kind of lets you because you
    can call the `toString` method on any public function `f`. The frame can also
    ask the web-server to fetch the JS for it and send it.
  prefs: []
  type: TYPE_NORMAL
- en: JS code is often obfuscated.
  prefs: []
  type: TYPE_NORMAL
- en: Plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Java, Flash.
  prefs: []
  type: TYPE_NORMAL
- en: A frame can run a plugin from any origin. HTML5 might make them obsolete.
  prefs: []
  type: TYPE_NORMAL
- en: Cross Site Request Forgery (CSRF)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An attacker can setup a page and embed a frame with the following source in
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The frame is set to be of size zero (invisible), Then the attacker gets the
    user to visit the page. Thus, he can steal money from the user.
  prefs: []
  type: TYPE_NORMAL
- en: This is because the URL can be guessed and is not random.
  prefs: []
  type: TYPE_NORMAL
- en: 'Solution: add some randomness to the URL.'
  prefs: []
  type: TYPE_NORMAL
- en: The server can generate a random token and embed it in the "Transfer Money"
    page sent to the user.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Now the attacker has to guess the token.
  prefs: []
  type: TYPE_NORMAL
- en: Network addresses
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A frame can send HTTP and HTTPS requests to a host that matches its origin.
    The security of the same origin policy is tied to DNS security. Because origin
    names are DNS names, DNS rebinding attacks can work against you.
  prefs: []
  type: TYPE_NORMAL
- en: 'Goal: Run attacker controlled JS with the authority of some victim website
    `victim.com`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Approach:'
  prefs: []
  type: TYPE_NORMAL
- en: Register a domain name `attacker.com`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attacker sets up a DNS server to respond to requests for `*.attacker.com`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attacker gets user to visit `*.attacker.com`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Browser generates a DNS request to `attacker.com`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Attacker response has a small time-to-live (TTL)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Meanwhile, the attacker configures the DNS server to bind `attacker.com` name
    to `victim.com`'s IP address
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now if the user asks for a DNS resolution on attacker.com, he gets an address
    of victim.com
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The loaded attacker.com website wants to fetch a new object via AJAX. This request
    will now go to victim.com
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Bad because attacker.com website just issued an AJAX request outside its origin.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How can you fix this?
  prefs: []
  type: TYPE_NORMAL
- en: Modify your DNS resolver to check that outside domains are not resolved to internal
    addresses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enforce TTL to be 30 minutes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pixels
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Each frame gets its own bounding box and can draw wherever it wants there. Specifically,
    a parent frame can draw over a child frame (see Figure 3).
  prefs: []
  type: TYPE_NORMAL
- en: 'Solutions:'
  prefs: []
  type: TYPE_NORMAL
- en: 1\. Use frame busting code (JS to figure out if you've been put in a frame by
    someone else)
  prefs: []
  type: TYPE_NORMAL
- en: '`if (self != top)'
  prefs: []
  type: TYPE_NORMAL
- en: alert("I'm a child frame, so won't load")`
  prefs: []
  type: TYPE_NORMAL
- en: 2\. Web server can send an HTTP response header called `X-Frame-Options` which
    tells the browser to not allow anyone to put its content into a frame.
  prefs: []
  type: TYPE_NORMAL
- en: Naming issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`c` in ASCII versus `c` in Cyrillic allows attacker to register a `cats.com`
    domain that immitates the real `cats.com`'
  prefs: []
  type: TYPE_NORMAL
- en: Plugins
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Subtle incompatibilites with the rest of the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Java assumes different hostnames with the same IP address have the same origin
    (deviation from the SOP policy)
  prefs: []
  type: TYPE_NORMAL
- en: x.y.com will be in the same origin as z.y.com if they share the same IP address.
  prefs: []
  type: TYPE_NORMAL
- en: HTML5 screen sharing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have a page that have multiple frames, a frame can take a screenshot
    of the entire browser.
  prefs: []
  type: TYPE_NORMAL
