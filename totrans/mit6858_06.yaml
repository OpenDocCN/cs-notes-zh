- en: Web security
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web安全
- en: Web security for a long time meant looking at what the server was doing, since
    the client-side was very simple. On the server, CGI scripts were executed and
    they interfaced with DBs, etc.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 长期以来，Web安全意味着查看服务器的操作，因为客户端非常简单。在服务器上，CGI脚本被执行，并且它们与数据库等进行交互。
- en: 'These days, browsers are very complicated:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如今，浏览器非常复杂：
- en: 'JavaScript: pages execute client-side code'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript：页面执行客户端代码
- en: The Document Object Model (DOM)
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 文档对象模型（DOM）
- en: 'XMLHttpRequests: a way for JavaScript client-side code to fetch content from
    the web-server asynchronously'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XMLHttpRequests：JavaScript客户端代码从Web服务器异步获取内容的一种方式
- en: a.k.a AJAX
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 又名AJAX
- en: Web Sockets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Web套接字
- en: Multimedia support (the `<video>` tag)
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 多媒体支持（`<video>`标签）
- en: Geolocation (webpages can determine physically where you are)
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 地理位置（网页可以确定您的物理位置）
- en: Native Client, for Google Chrome
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地客户端，适用于Google Chrome
- en: 'For web-security, this means we''re screwed: huge attack surface (See Figure
    1)'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Web安全来说，这意味着我们很糟糕：巨大的攻击面（见图1）
- en: '[PRE0]'
  id: totrans-12
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Problems of composition: many layers'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 组合问题：许多层
- en: One problem with the web is the *parsing contexts* problem
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Web存在的一个问题是*parsing contexts*问题
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If the *untrusted* content had a quote in it, perhaps the attacker could modify
    the code into:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果*不受信任*的内容中有引号，也许攻击者可以修改代码为：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Web specifications are long, tedios, boring, inconsistent, the size of the EU
    consistution (CSS, HTML) => they are vague aspirational documents that are never
    implemented.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Web规范很长、繁琐、乏味、不一致，大小如欧盟宪法（CSS、HTML）=>它们是模糊的抱负性文件，从未被实施。
- en: This lecture we'll focus on client-side web-security.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本讲座我们将专注于客户端Web安全。
- en: Desktop applications come from a single principal (Microsoft, Google, etc) Web
    applications come from a bunch of principals.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 桌面应用程序来自单一主体（微软、谷歌等），Web应用程序来自多个主体。
- en: '`http://foo.com/index.html` (see Figure 2)'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`http://foo.com/index.html`（见图2）'
- en: Can analytics code access the facebook frame content?
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析代码能够访问Facebook框架内容吗？
- en: Can analytics code interact with the text inputs? Can it declare event handlers?
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析代码能够与文本输入交互吗？它能声明事件处理程序吗？
- en: What's the relationship beteen the Facebook frame (https) and the foo.com frame
    (http)?
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Facebook框架（https）和foo.com框架（http）之间的关系是什么？
- en: To answer these questions browsers use a security model called the *same origin
    policy*
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 为了回答这些问题，浏览器使用了一个称为*同源策略*的安全模型
- en: '*Goal:* Two websites should not be able to tamper with each other, unless they
    want to.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '*目标：*两个网站不应该能够互相篡改，除非它们想要这样做。'
- en: Defining what *tampering* means has gotten more complicated since the web first
    started.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 定义*tampering*的含义自从Web开始以来变得更加复杂。
- en: '*Strategy:* Each *resource* is assigned an origin. JS code (a resource itself)
    can only access resources from its own origin.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '*策略：*每个*资源*都被分配一个起源。JS代码（一个资源本身）只能访问来自自己起源的资源。'
- en: 'What is an origin? An origin is a network protocol scheme + hostname + port.
    Example:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是起源？起源是网络协议方案+主机名+端口。例如：
- en: '`https://facebook.com:8181`'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://facebook.com:8181`'
- en: '`http://foo.com/index.html`, implicit port 80'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://foo.com/index.html`，隐式端口80'
- en: '`https://foo.com/index.html`, implicit port 443'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`https://foo.com/index.html`，隐式端口443'
- en: Loosely speaking, you can think of an origin as an UID in UNIX, with a frame
    being a *process*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 粗略地说，你可以将一个起源视为UNIX中的UID，而一个框架就是一个*进程*。
- en: 'Four ideas in implementation of origins:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现起源的四个想法中：
- en: Each origin has client side resources
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个起源都有客户端资源
- en: Cookies, to implement state across different HTTP requests
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cookies，用于在不同的HTTP请求之间实现状态
- en: DOM storage, a fairly new interface, a key-value store
  id: totrans-37
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM存储，一个相当新的接口，一个键值存储
- en: A JavaScript namespace, defines what functions and interface are available to
    the origin (like the String class)
  id: totrans-38
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个JavaScript命名空间，定义了对起源可用的函数和接口（如String类）
- en: 'The DOM tree: a JavaScript reflection of the HTML in a page'
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: DOM树：页面中HTML的JavaScript反射
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: A visual display area
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个可视化显示区域
- en: Each frame gets the origin of its URL
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每个框架都获得其URL的起源
- en: Scripts execute with the authority of their frame origin
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 脚本以其框架起源的权限执行
- en: Passive content (images, CSS files) gets **zero** authority from the browser
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 被动内容（图像、CSS文件）从浏览器中获得**零**权限
- en: Content sniffing attacks
  id: totrans-45
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内容嗅探攻击
- en: 'Going back to our example:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们的例子：
- en: Google analytics and jQuery can do all sorts of stuff on the foo.com frame
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Google分析和jQuery可以在foo.com框架上执行各种操作
- en: The Facebook frame's inline JS cannot do anything to the foo.com frame
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Facebook框架的内联JS无法对foo.com框架执行任何操作
- en: but it can talk to the foo.com frame using the `postMessage()` API
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 但它可以使用`postMessage()` API与foo.com框架通信
- en: The JS code in the FB frame cannot issue an AJAX request to the foo.com webserver
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FB frame中的JS代码无法向foo.com web服务器发出AJAX请求
- en: 'MIME types: text/html. All version of IE in the past would look at the first
    256 bytes of an object and ignore the `Content-Type` header. As a result, IE would
    misinterpret the type of files (due to bugs). Attacker can put JS code in a .jpg
    file. IE coerces it into text/html and then executes the JS code in the page.'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: MIME类型：text/html。过去的所有IE版本都会查看对象的前256个字节并忽略`Content-Type`头。结果，IE会误解文件的类型（由于错误）。攻击者可以将JS代码放入.jpg文件中。IE将其强制转换为text/html，然后在页面中执行JS代码。
- en: Frames and window objects
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Frames和window对象
- en: Frames represent these sort of separate JS universes
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Frames代表这种独立的JS宇宙
- en: A frame, w.r.t. to JS is an instance of a DOM node. Frames and window objects
    in JS point to each other. The window object acts like a namespace via which you
    can access any variable `x`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一个frame，关于JS是一个DOM节点的实例。Frames和JS中的window对象相互指向。window对象充当一个命名空间，通过它可以访问任何变量`x`。
- en: Frames get the origin of the frame's URL `OR` a suffix of the original domain
    name.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Frames获取frame的URL的origin `OR` 原始域名的后缀。
- en: '`x.y.z.com` can say "I want to set my origin to" `y.z.com` by assigning `document.domain`
    to `y.z.com`. This only works (or should) with suffixes of `x.y.z.com`. So it
    cannot do `document.domain = a.y.z.com`. Also, cannot set `document.domain = .com`
    because the site would be able to impact cookies in any .com website.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`x.y.z.com`可以说“我想将我的源设置为”`y.z.com`通过将`document.domain`分配给`y.z.com`。这只适用于`x.y.z.com`的后缀（或应该）。因此，它不能执行`document.domain
    = a.y.z.com`。也不能设置`document.domain = .com`，因为该站点将能够影响任何.com网站中的cookies。'
- en: Browsers distinguish between frames that assigned a value to document.domain
    and frames that did not.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器区分已分配值给document.domain的frame和未分配值给document.domain的frame。
- en: 'Two frames can access each if:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 两个frame可以相互访问如果：
- en: Both frames set `document.domain` to the same value
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个frame都将`document.domain`设置为相同的值
- en: Neither of the frames has changed `document.domain` and both values match
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 两个frame都没有改变`document.domain`，并且两个值匹配
- en: You have `x.y.z.com` (buggy or evil) trying to attack `y.z.com`, by shortening
    its domain. The browser will not allow this because y.z.com will have NOT changed
    its document.domain while x.y.z.com has.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你有`x.y.z.com`（有bug或者恶意）试图攻击`y.z.com`，通过缩短其域名。浏览器不会允许这种情况发生，因为y.z.com并未改变其document.domain，而x.y.z.com已经改变了。
- en: DOM nodes
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: DOM节点
- en: Cookies
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Cookies
- en: Cookies have a *domain* and a *path*.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Cookies有一个*domain*和一个*path*。
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: If path is `/` then all paths in the domain have access to the cookie.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果路径是`/`，那么域中的所有路径都可以访问cookie。
- en: On the client side there's `document.cookie`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在客户端有`document.cookie`。
- en: Cookies have a `secure flag` which means HTTP content should not be able to
    access that cookie.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Cookies有一个`secure flag`，意味着HTTP内容不应该能够访问该cookie。
- en: When the browser generates a request, it's going to include all the matching
    cookies in that request (ambient authority).
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器生成请求时，它将包括该请求中的所有匹配cookie（环境权限）。
- en: How can different frames access other frames' cookies? If other frames can write
    cookies for other frames, then an attacker could log the victim into the attacker's
    gmail account and possibly read emails sent by the user.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 不同frame如何访问其他frame的cookies？如果其他frame可以为其他frame写入cookies，那么攻击者可以将受害者登录到攻击者的gmail帐户，并可能读取用户发送的电子邮件。
- en: Should `foo.co.uk` be allowed to set a cookie for `co.uk`? https://publicsuffix.org
    contains a list of all the top-level domains so that browsers do not allow cooking
    setting for domains like `co.uk`.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 应该允许`foo.co.uk`为`co.uk`设置cookie吗？https://publicsuffix.org包含所有顶级域的列表，因此浏览器不允许为`co.uk`等域设置cookie。
- en: XMLHttpRequest
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: XMLHttpRequest
- en: By default JS can only generate an AJAX request if it's going to its origin.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，JS只能生成一个AJAX请求，如果它要去自己的源。
- en: 'There''s a new paradigm called Cross Origin Request S. (CORS), where the server
    can use an ACL to allow other domains to access it. Server returns a header `Access-Control-Allow-Origin:
    foo.com` to indicate foo.com is allowed.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '有一种新的范式称为跨源请求S.（CORS），其中服务器可以使用ACL允许其他域访问它。服务器返回一个头`Access-Control-Allow-Origin:
    foo.com`来指示foo.com是被允许的。'
- en: Images, CSS
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 图片，CSS
- en: A frame can load images from any origin it desires but it cannot actually inspect
    the bits. But it can infer the size of the image via the placement of other nodes
    in the DOM.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 一个frame可以从任何它想要的源加载图片，但它实际上不能检查位。但它可以通过DOM中其他节点的位置推断出图片的大小。
- en: Same for CSS.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: CSS也是如此。
- en: JavaScript
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript
- en: If you do a cross-origin fetch of JS, that is allowed, but the frame cannot
    look at the source code. But the JS architecture kind of lets you because you
    can call the `toString` method on any public function `f`. The frame can also
    ask the web-server to fetch the JS for it and send it.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您对JS进行跨源提取，是允许的，但框架不能查看源代码。但是JS架构有点让你可以，因为您可以调用任何公共函数`f`的`toString`方法。框架还可以要求Web服务器为其提取JS并发送。
- en: JS code is often obfuscated.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: JS代码经常被混淆。
- en: Plugins
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件
- en: Java, Flash.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Java，Flash。
- en: A frame can run a plugin from any origin. HTML5 might make them obsolete.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 框架可以从任何来源运行插件。HTML5可能会使它们过时。
- en: Cross Site Request Forgery (CSRF)
  id: totrans-84
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 跨站请求伪造（CSRF）
- en: 'An attacker can setup a page and embed a frame with the following source in
    it:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 攻击者可以设置一个页面，并在其中嵌入以下来源的框架：
- en: '[PRE5]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The frame is set to be of size zero (invisible), Then the attacker gets the
    user to visit the page. Thus, he can steal money from the user.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 框架被设置为大小为零（不可见），然后攻击者让用户访问该页面。因此，他可以从用户那里窃取钱。
- en: This is because the URL can be guessed and is not random.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为URL可以被猜测，而不是随机的。
- en: 'Solution: add some randomness to the URL.'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：在URL中添加一些随机性。
- en: The server can generate a random token and embed it in the "Transfer Money"
    page sent to the user.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器可以生成一个随机令牌并将其嵌入发送给用户的“转账”页面。
- en: '[PRE6]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Now the attacker has to guess the token.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在攻击者必须猜测令牌。
- en: Network addresses
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络地址
- en: A frame can send HTTP and HTTPS requests to a host that matches its origin.
    The security of the same origin policy is tied to DNS security. Because origin
    names are DNS names, DNS rebinding attacks can work against you.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 框架可以向与其来源匹配的主机发送HTTP和HTTPS请求。同源策略的安全性与DNS安全性相关联。因为来源名称是DNS名称，DNS重新绑定攻击可能会对您产生影响。
- en: 'Goal: Run attacker controlled JS with the authority of some victim website
    `victim.com`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 目标：以受害者网站`victim.com`的权限运行受攻击者控制的JS。
- en: 'Approach:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 方法：
- en: Register a domain name `attacker.com`
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册一个域名`attacker.com`
- en: Attacker sets up a DNS server to respond to requests for `*.attacker.com`
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者设置DNS服务器以响应对`*.attacker.com`的请求。
- en: Attacker gets user to visit `*.attacker.com`
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者让用户访问`*.attacker.com`
- en: Browser generates a DNS request to `attacker.com`
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 浏览器向`attacker.com`生成DNS请求。
- en: Attacker response has a small time-to-live (TTL)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 攻击者响应具有较短的生存时间（TTL）
- en: Meanwhile, the attacker configures the DNS server to bind `attacker.com` name
    to `victim.com`'s IP address
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与此同时，攻击者配置DNS服务器将`attacker.com`名称绑定到`victim.com`的IP地址
- en: Now if the user asks for a DNS resolution on attacker.com, he gets an address
    of victim.com
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，如果用户请求对attacker.com的DNS解析，他将获得victim.com的地址
- en: The loaded attacker.com website wants to fetch a new object via AJAX. This request
    will now go to victim.com
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 加载的attacker.com网站希望通过AJAX获取一个新对象。此请求现在将发送到victim.com
- en: Bad because attacker.com website just issued an AJAX request outside its origin.
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不好的原因是attacker.com网站刚刚在其来源之外发出了一个AJAX请求。
- en: How can you fix this?
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如何解决这个问题？
- en: Modify your DNS resolver to check that outside domains are not resolved to internal
    addresses.
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改您的DNS解析器以检查外部域名是否解析为内部地址。
- en: Enforce TTL to be 30 minutes
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 强制TTL为30分钟
- en: Pixels
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 像素
- en: Each frame gets its own bounding box and can draw wherever it wants there. Specifically,
    a parent frame can draw over a child frame (see Figure 3).
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 每个框架都有自己的边界框，并可以在其中任意绘制。具体来说，父框架可以覆盖子框架（见图3）。
- en: 'Solutions:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案：
- en: 1\. Use frame busting code (JS to figure out if you've been put in a frame by
    someone else)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 1. 使用破坏框架的代码（JS来判断是否被别人放入框架中）
- en: '`if (self != top)'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`if (self != top)'
- en: alert("I'm a child frame, so won't load")`
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`alert("我是一个子框架，所以不会加载")`'
- en: 2\. Web server can send an HTTP response header called `X-Frame-Options` which
    tells the browser to not allow anyone to put its content into a frame.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 2. Web服务器可以发送一个名为`X-Frame-Options`的HTTP响应头，告诉浏览器不允许任何人将其内容放入框架中。
- en: Naming issues
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命名问题
- en: '`c` in ASCII versus `c` in Cyrillic allows attacker to register a `cats.com`
    domain that immitates the real `cats.com`'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: ASCII中的`c`与Cyrillic中的`c`允许攻击者注册一个模仿真实`cats.com`的`cats.com`域。
- en: Plugins
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 插件
- en: Subtle incompatibilites with the rest of the browser.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 与浏览器的其余部分存在微妙的不兼容性。
- en: Java assumes different hostnames with the same IP address have the same origin
    (deviation from the SOP policy)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Java假设具有相同IP地址的不同主机名具有相同的来源（与SOP策略不符）。
- en: x.y.com will be in the same origin as z.y.com if they share the same IP address.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它们共享相同的IP地址，x.y.com将与z.y.com具有相同的来源。
- en: HTML5 screen sharing
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: HTML5屏幕共享
- en: If you have a page that have multiple frames, a frame can take a screenshot
    of the entire browser.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您有一个包含多个框架的页面，一个框架可以截取整个浏览器的屏幕截图。
