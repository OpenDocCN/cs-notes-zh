- en: SSL/TLS and HTTPS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Note:** These lecture notes were slightly modified from the ones posted on
    the 6.858 [course website](http://css.csail.mit.edu/6.858/2014/schedule.html)
    from 2014.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This lecture is about two related topics:'
  prefs: []
  type: TYPE_NORMAL
- en: How to cryptographically protect network communications, at a larger scale than
    Kerberos?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Technique: certificates'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How to integrate cryptographic protection of network traffic into the web security
    model?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTPS, Secure cookies, etc.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Symmetric vs. asymmetric encryption
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Recall:** two kinds of encryption schemes.'
  prefs: []
  type: TYPE_NORMAL
- en: '`E` is encrypt, `D` is decrypt'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Symmetric key cryptography means *same key* is used to encrypt & decrypt
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ciphertext = E_k(plaintext)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plaintext = D_k(ciphertext)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Asymmetric key (public-key) cryptography: encrypt & decrypt keys differ'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ciphertext = E_PK(plaintext)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`plaintext = D_SK(ciphertext)`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PK` and `SK` are called public and secret (private) key, respectively'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Public-key cryptography is orders of magnitude slower than symmetric
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Encryption provides data *secrecy*, however, we often also want *integrity*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Message authentication code (MAC)* with symmetric keys can provide integrity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Look up *HMAC* if you're interested in more details.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Can use public-key crypto to sign and verify, almost the opposite:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use secret key to generate signature (compute `D_SK`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use public key to check signature (compute `E_PK`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Kerberos
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Central KDC knows all principals and their keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `A` wants to talk to `B`, `A` asks the KDC to issue a ticket.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ticket contains a session key for `A` to talk to `B`, generated by KDC.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Why is Kerberos not enough?*'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: E.g., why isn't the web based on Kerberos?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Might not have a single KDC trusted to generate session keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not everyone might have an account on this single KDC.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: KDC might not scale if users contact it every time they went to a web site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Unfortunate that KDC knows what service each user is connecting to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These limitations are largely inevitable with symmetric encryption.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Alternative plan:* Use public key encryption'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose `A` knows the public key of `B`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't want to use public-key encryption all the time (slow).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Strawman protocol for establishing a secure connection between `A` and `B`:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`A` generates a random symmetric session key `S`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`A` encrypts `S` for `PK_B`, sends to `B`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Now we have secret key `S` shared between `A` and `B`, can encrypt and
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: authenticate messages using symmetric encryption, much like Kerberos.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Good properties of this strawman protocol:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`A`''s data seen only by `B`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only `B` (with `SK_B`) can decrypt `S`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Only `B` can thus decrypt data encrypted under `S`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: No need for a KDC-like central authority to hand out session keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What goes wrong with this strawman?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adversary can record and later replay `A`'s traffic; `B` would not notice.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution: have `B` send a nonce (random value).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Incorporate the nonce into the final master secret `S' = f(S, nonce)`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Often, `S` is called the *pre-master secret*, and `S'` is the *master secret*.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This process to establish `S'` is called the "handshake".
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adversary can impersonate `A`, by sending another symmetric key to `B`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many possible solutions, if `B` cares who `A` is.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: E.g., `B` also chooses and sends a symmetric key to `A`, encrypted with `PK_A`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Then both `A` and `B` use a hash of the two keys combined.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This is roughly how TLS client certificates work.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adversary can later obtain `SK_B`, decrypt symmetric key and all messages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Solution: use a key exchange protocol like Diffie-Hellman,'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: which provides *forward secrecy*, as discussed in last lecture.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Hard problem:* what if neither computer knows each other''s public key?'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Common approach: use a trusted third party to generate certificates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certificate is tuple (name, pubkey), signed by certificate authority.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Meaning: certificate authority claims that name''s public key is pubkey.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`B` sends `A` a pubkey along with a certificate.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If `A` trusts certificate authority, continue as above.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why might certificates be better than Kerberos?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: No need to talk to KDC each time client connects to a new server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server can present certificate to client; client can verify signature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: KDC not involved in generating session keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can support "anonymous" clients that have no long-lived key / certificate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Plan for securing web browsers: HTTPS'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'New protocol: *https* instead of *http* (e.g., [https://www.paypal.com/](https://www.paypal.com/)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Need to protect several things:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(A)** Data sent over the network.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(B)** Code/data in user''s browser.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(C)** UI seen by the user.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(A)** *How to ensure data is not sniffed or tampered with on the network?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use TLS (a cryptographic protocol that uses certificates).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: TLS encrypts and authenticates network traffic.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Negotiate ciphers (and other features: compression, extensions).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Negotiation is done in clear.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Include a MAC of all handshake messages to authenticate.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(B)** *How to protect data and code in the user''s browser?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Goal:** connect browser security mechanisms to whatever TLS provides.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Recall that browser has two main security mechanisms:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Same-origin policy.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cookie policy (slightly different).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Same-origin policy with HTTPS/TLS.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: TLS certificate name must match hostname in the URL
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In our example, certificate name must be www.paypal.com.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One level of wildcard is also allowed (*.paypal.com)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Browsers trust a number of certificate authorities.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Origin (from the same-origin policy) includes the protocol.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: http://www.paypal.com/ is different from https://www.paypal.com/
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Here, we care about integrity of data (e.g., JavaScript code).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Result:* non-HTTPS pages cannot tamper with HTTPS pages.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Rationale:* non-HTTPS pages could have been modified by adversary.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cookies with HTTPS/TLS.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Server certificates help clients differentiate between servers.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cookies (common form of user credentials) have a "Secure" flag.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Secure cookies can only be sent with HTTPS requests.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-Secure cookies can be sent with HTTP and HTTPS requests.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens if adversary tampers with DNS records?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Good news: security doesn''t depend on DNS.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We already assumed adversary can tamper with network packets.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrong server will not know correct private key matching certificate.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**(C)** *Finally, users can enter credentials directly. How to secure that?*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lock icon in the browser tells user they're interacting with HTTPS site.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser should indicate to the user the name in the site's certificate.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: User should verify site name they intend to give credentials to.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How can this plan go wrong?
  prefs: []
  type: TYPE_NORMAL
- en: As you might expect, every step above can go wrong.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not an exhaustive list, but gets at problems that ForceHTTPS wants to solve.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**1 (A)** Cryptography'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There have been some attacks on the cryptographic parts of SSL/TLS.
  prefs: []
  type: TYPE_NORMAL
- en: Attack by Rizzo and Duong can allow adversary to learn some plaintext by issuing
    many carefully-chosen requests over a single connection. [Ref](http://www.educatedguesswork.org/2011/09/security_impact_of_the_rizzodu.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Recent attack by same people using compression, mentioned in iSEC lecture. [Ref](http://en.wikipedia.org/wiki/CRIME)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most recently, more padding oracle attacks. [Ref](https://www.openssl.org/~bodo/ssl-poodle.pdf)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some servers/CAs use weak crypto, e.g. certificates using MD5.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some clients choose weak crypto (e.g., SSL/TLS on Android). [Ref](http://op-co.de/blog/posts/android_ssl_downgrade/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But, cryptography is rarely the weakest part of a system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**2 (B)** Authenticating the server'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Adversary may be able to obtain a certificate for someone else's name.
  prefs: []
  type: TYPE_NORMAL
- en: Used to require a faxed request on company letterhead (but how to check?)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now often requires receiving secret token at root@domain.com or similar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Security depends on the policy of least secure certificate authority
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are 100's of trusted certificate authorities in most browsers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Several CA compromises in 2011 (certs for gmail, facebook, ..) [Ref](http://dankaminsky.com/2011/08/31/notnotar/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Servers may be compromised and the corresponding private key stolen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to deal with compromised certificate (e.g., invalid cert or stolen key)?
  prefs: []
  type: TYPE_NORMAL
- en: Certificates have expiration dates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking certificate status with CA on every request is hard to scale.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Certificate Revocation List (CRL) published by some CA's, but relatively
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'few certificates in them (spot-checking: most have zero revoked certs).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: CRL must be periodically downloaded by client.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Could be slow, if many certs are revoked.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Not a problem if few or zero certs are revoked, but not too useful.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OCSP: online certificate status protocol.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Query whether a certificate is valid or not.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One issue: OCSP protocol didn''t require signing "try later" messages. [Ref](http://www.thoughtcrime.org/papers/ocsp-attack.pdf)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Various heuristics for guessing whether certificate is OK or not.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CertPatrol, EFF's SSL Observatory, ..
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Not as easy as "did the cert change?". Websites sometimes test new CAs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Problem: online revocation checks are soft-fail.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An active network attacker can just make the checks unavailable.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Browsers don't like blocking on a side channel.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Performance, single point of failure, captive portals, etc. [ Ref: https://www.imperialviolet.org/2011/03/18/revocation.html
    ]'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In practice browsers push updates with blacklist after major breaches. [ Ref:
    https://www.imperialviolet.org/2012/02/05/crlsets.html ]'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users ignore certificate mismatch errors.
  prefs: []
  type: TYPE_NORMAL
- en: Despite certificates being easy to obtain, many sites misconfigure them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some don't want to deal with (non-zero) cost of getting certificates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Others forget to renew them (certificates have expiration dates).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'End result: browsers allow users to override mismatched certificates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Problematic: human is now part of the process in deciding if cert is valid.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hard for developers to exactly know what certs will be accepted by browsers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Empirically, about 60% of bypass buttons shown by Chrome are clicked through.
    (Though this data might be stale at this point..)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the risk of a user accepting an invalid certificate?
  prefs: []
  type: TYPE_NORMAL
- en: Might be benign (expired cert, server operator forgot to renew).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Might be a man-in-the-middle attack, connecting to adversary's server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why is this bad?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User's browser will send user's cookies to the adversary.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: User might enter sensitive data into adversary's website.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: User might assume data on the page is coming from the right site.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**3 (B)** Mixing HTTP and HTTPS content'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Web page origin is determined by the URL of the page itself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Page can have many embedded elements:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Javascript via `<SCRIPT>` tags
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: CSS style sheets via `<STYLE>` tags
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Flash code via `<EMBED>` tags
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Images via `<IMG>` tags
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If adversary can tamper with these elements, could control the page.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In particular, Javascript and Flash code give control over page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CSS: less control, but still abusable, esp w/ complex attribute selectors.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Probably the developer wouldn't include Javascript from attacker's site.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But, if the URL is non-HTTPS, adversary can tamper with HTTP response.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Alternative approach: explicitly authenticate embedded elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: E.g., could include a hash of the Javascript code being loaded.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevents an adversary from tampering with response.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Does not require full HTTPS.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Might be deployed in browsers in the near future. [Ref](http://www.w3.org/TR/SRI/)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**4 (B)** Protecting cookies'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Web application developer could make a mistake, forgets the Secure flag.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: User visits http://bank.com/ instead of https://bank.com/, leaks cookie.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suppose the user only visits https://bank.com/.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why is this still a problem?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adversary can cause another HTTP site to redirect to http://bank.com/.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if user never visits any HTTP site, application code might be buggy.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Some sites serve login forms over HTTPS and serve other content over HTTP.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Be careful when serving over both HTTP and HTTPS.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: E.g., Google's login service creates new cookies on request.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Login service has its own (Secure) cookie.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can request login to a Google site by loading login's HTTPS URL.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Used to be able to also login via cookie that wasn't Secure.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ForceHTTPS solves problem by redirecting HTTP URLs to HTTPS. [Ref](http://blog.icir.org/2008/02/sidejacking-forced-sidejacking-and.html)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Cookie integrity problems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Non-Secure cookies set on http://bank.com still sent to https://bank.com.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: No way to determine who set the cookie.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**5 (C)** Users directly entering credentials'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Phishing attacks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users don't check for lock icon.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users don't carefully check domain name, don't know what to look for.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: E.g., typo domains (paypa1.com), unicode
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Web developers put login forms on HTTP pages (target login script is HTTPS).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adversary can modify login form to point to another URL.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Login form not protected from tampering, user has no way to tell.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: ForceHTTPS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: How does ForceHTTPS (this paper) address some of these problems?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Server can set a flag for its own hostname in the user's browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Makes SSL/TLS certificate misconfigurations into a fatal error.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirects HTTP requests to HTTPS.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Prohibits non-HTTPS embedding (+ performs ForceHTTPS for them).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What problems does ForceHTTPS solve?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Mostly 2, 3, and to some extent 4 (see list above)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users accepting invalid certificates.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developer mistakes: embedding insecure content.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Developer mistakes: forgetting to flag cookie as Secure.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adversary injecting cookies via HTTP.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Is this really necessary? Can we just only use HTTPS, set Secure cookies, etc?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Users can still click-through errors, so it still helps for #2.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Not necessary for #3 assuming the web developer never makes a mistake.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Still helpful for #4.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Marking cookies as Secure gives confidentiality, but not integrity.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Active attacker can serve fake set at http://bank.com, and set cookies
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: for https://bank.com. (https://bank.com cannot distinguish)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why not just turn on ForceHTTPS for everyone?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: HTTPS site might not exist.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it does, might not be the same site (https://web.mit.edu is
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: authenticated, but http://web.mit.edu isn't).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: HTTPS page may expect users to click through (self-signed certs).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing ForceHTTPS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The ForceHTTPS bit is stored in a cookie.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Interesting issues:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: State exhaustion (the ForceHTTPS cookie getting evicted).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Denial of service (force entire domain; force via JS; force via HTTP).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why does ForceHTTPS only allow specific hosts, instead of entire domain?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why does ForceHTTPS require cookie to be set via headers and not via JS?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why does ForceHTTPS require cookie to be set via HTTPS, not HTTP?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrapping (how to get ForceHTTPS bit; how to avoid privacy leaks).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Possible solution 1: DNSSEC.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Possible solution 2: embed ForceHTTPS bit in URL name (if possible).'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If there's a way to get some authenticated bits from server owner (DNSSEC, URL
    name, etc), should we just get the public key directly?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Difficulties: users have unreliable networks. Browsers are unwilling to block
    the handshake on a side-channel request.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Current status of ForceHTTPS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Some ideas from ForceHTTPS have been adopted into standards.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTTP Strict-Transport-Security header is similar to a ForceHTTPS cookie. [Ref:
    RFC6797](http://tools.ietf.org/html/rfc6797), [Ref: HTTP Strict Transport Security](http://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Uses header instead of magic cookie:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Strict-Transport-Security: max-age=7884000; includeSubDomains'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Turns HTTP links into HTTPS links.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Prohibits user from overriding SSL/TLS errors (e.g., bad certificate).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally applies to all subdomains.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why is this useful? Non-secure and forged cookies can be leaked or set on subdomains.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally provides an interface for users to manually enable it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Implemented in Chrome, Firefox, and Opera.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bootstrapping largely unsolved.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Chrome has a hard-coded list of preloads.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: IE9, Firefox 23, and Chrome now block mixed scripting by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ref: Ending mixed scripting vulnerabilities](http://blog.chromium.org/2012/08/ending-mixed-scripting-vulnerabilities.html),'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ref: Mixed content blocking enabled in Firefox](https://blog.mozilla.org/tanvi/2013/04/10/mixed-content-blocking-enabled-in-firefox-23/),'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ref: Protecting consumers from malicious mixed content](http://blogs.msdn.com/b/ie/archive/2011/06/23/internet-explorer-9-security-part-4-protecting-consumers-from-malicious-mixed-content.aspx)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Another recent experiment in this space: HTTPS-Everywhere.'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Focuses on the "power user" aspect of ForceHTTPS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows users to force the use of HTTPS for some domains.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaboration between Tor and EFF.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add-on for Firefox and Chrome.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comes with rules to rewrite URLs for popular web sites.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other ways to address problems in SSL/TLS
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Better tools / better developers to avoid programming mistakes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mark all sensitive cookies as Secure (#4).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid any insecure embedding (#3).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Unfortunately, seems error-prone..
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Does not help end-users (requires developer involvement).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: EV certificates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Trying to address problem 5: users don''t know what to look for in cert.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition to URL, embed the company name (e.g., "PayPal, Inc.")
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Typically shows up as a green box next to the URL bar.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why would this be more secure?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: When would it actually improve security?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Might indirectly help solve #2, if users come to expect EV certificates.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Blacklist weak crypto.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Browsers are starting to reject MD5 signatures on certificates (iOS 5, Chrome
    18, Firefox 16)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: and RSA keys with `< 1024` bits. (Chrome 18, OS X 10.7.4, Windows XP+ after
    a recent update)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'and even SHA-1 by Chrome. [Ref: Gradually sunsetting SHA1](http://googleonlinesecurity.blogspot.com/2014/09/gradually-sunsetting-sha-1.html)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OCSP stapling.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OCSP responses are signed by CA.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Server sends OCSP response in handshake instead of querying online (#2).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Effectively a short-lived certificate.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Problems:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Not widely deployed.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Only possible to staple one OCSP response.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Key pinning.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Only accept certificates signed by per-site whitelist of CAs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Remove reliance on least secure CA (#2).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Currently a hard-coded list of sites in Chrome.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Diginotar compromise caught in 2011 because of key pinning.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Plans to add mechanism for sites to advertise pins.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ref: IETF draft on websec key pinning](http://tools.ietf.org/html/draft-ietf-websec-key-pinning-21)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Ref: tack.io](http://tack.io/)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Same bootstrapping difficulty as in ForceHTTPS.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Other references
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[http://www.imperialviolet.org/2012/07/19/hope9talk.html](http://www.imperialviolet.org/2012/07/19/hope9talk.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
