["```\n    Stack<String> stack = new Stack<String>();\n    stack.push(\"Test\");\n    ...\n    String next = stack.pop(); \n\n    ```", "```\n    Stack<Integer> stack = new Stack<Integer>();\n    stack.push(17);        // autoboxing (int -> Integer)\n    int i = stack.pop();   // unboxing   (Integer -> int)\n\n    ```", "```\n    for (Transaction t : collection)\n       StdOut.println(t);\n\n    ```", "```\nprivate class Node {\n   Item item;\n   Node next;\n}\n\n```", "```\n    for (Node x = first; x != null; x = x.next) {\n       // process x.item\n    }\n\n    ```", "```\nStack<String> collection = new Stack<String>();\n...\nfor (String s : collection)\n   StdOut.println(s);\n...\n\n```", "```\nIterator<String> i = collection.iterator();\nwhile (i.hasNext()) { \n   String s = i.next();\n   StdOut.println(s);\n}\n\n```", "```\n    import java.util.Iterator;\n\n    ```", "```\n    implements Iterable<Item>\n\n    ```", "```\n    public Iterator<Item> iterator() {\n        return new LinkedIterator();\n    }\n\n    ```", "```\nInteger a = null;\nint b = a;\n\n```", "```\nInteger a1 = 100;\nInteger a2 = 100;\nSystem.out.println(a1 == a2);   // true\n\nInteger b1 = new Integer(100);\nInteger b2 = new Integer(100);\nSystem.out.println(b1 == b2);   // false\n\nInteger c1 = 150;\nInteger c2 = 150;\nSystem.out.println(c1 == c2);   // false\n\n```", "```\npublic class ResizingArrayStack<Item> {\n   Item[] a = new Item[1];\n\n```", "```\nString s;\nfor (s : listOfStrings)\n   System.out.println(s);\n\n```", "```\n    it was - the best - of times - - - it\twas - the - -\n\n    ```", "```\n    (a)  4 3 2 1 0 9 8 7 6 5\n\n    (b)  4 6 8 7 5 3 2 9 0 1\n\n    (c)  2 5 6 7 4 8 9 3 1 0\n\n    (d)  4 3 2 1 0 5 6 7 8 9\n\n    (e)  1 2 3 4 5 6 9 8 7 0\n\n    (f)  0 4 6 5 3 8 1 7 2 9\n\n    (g)  1 4 7 9 8 6 5 3 0 2\n\n    (h)  2 1 4 3 6 5 8 7 9 0\n\n    ```", "```\n    Stack<Integer> s = new Stack<Integer>();\n    while (n > 0) {\n       s.push(n % 2);\n       n = n / 2;\n    }\n    while (!s.isEmpty())\n        System.out.print(s.pop());\n    System.out.println();\n\n    ```", "```\n    Stack<String> s = new Stack<String>();\n    while(!q.isEmpty())\n       s.push(q.dequeue());\n    while(!s.isEmpty())\n       q.enqueue(s.pop());\n\n    ```", "```\n    (a)  0 1 2 3 4 5 6 7 8 9\n\n    (b)  4 6 8 7 5 3 2 9 0 1 \n\n    (c)  2 5 6 7 4 8 9 3 1 0\n\n    (d)  4 3 2 1 0 5 6 7 8 9\n\n    ```", "```\n     % java Josephus 2 7\n    1 3 5 0 4 2 6\n\n    ```", "```\n    Node(Node x) {\n       item = x.item;\n       if (x.next != null) next = new Node(x.next);\n    }\n\n    public Stack(Stack<Item> s) { first = new Node(s.first); }\n\n    ```", "```\n    Node(Node x) { this.item = x.item; this.next = x.next; }\n\n    public Stack(Stack<Item> s) {\n       if (s.first != null) {\n          first = new Node(s.first);\n          for (Node x = first; x.next != null; x = x.next)\n             x.next = new Node(x.next);\n       }\n    }\n\n    ```", "```\n    for (double x = 0.0; x <= N; x += 0.1) {\n       ..\n    }\n\n    ```", "```\n    for (double x : new Mesh(left, right, delta)) {\n       ..\n    }\n\n    ```", "```\n    List list1 = new ArrayList();\n    List list2 = new ArrayList();\n    list1.add(list2);\n    list2.add(list1);\n    System.out.println(list1.equals(list2));\n\n    List list = new ArrayList();\n    list.add(list);\n    System.out.println(list.hashCode());\n\n    ```", "```\n    int[] vals = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n    for (int val : vals) {\n       System.out.print(val + \" \");\n       StdRandom.shuffle(vals);     // mutate the array while iterating\n    }\n    System.out.println();\n\n    ```", "```\n    q[1]: 50 123 555 1002 1066\n    q[2]: 33 44 93 333 606 613\n    q[3]: 60 200\n    q[4]: 12 18 44 55 203 495\n\n    q[1]: 50 123 555 1002 1066\n    q[2]: 93 333 606 613\n    q[3]: 200\n    q[4]: 203 495\n\n    ```", "```\n    Queue<Integer> q = new Queue<Integer>();\n    q.enqueue(0);\n    q.enqueue(1);\n    for (int i = 0; i < 10; i++) {\n        int a = q.dequeue();\n        int b = q.dequeue();\n        q.enqueue(b);\n        q.enqueue(a + b);\n        System.out.println(a);\n    }\n\n    ```", "```\n    public void push(Item item) {\n       Node second = first;\n       Node first = new Node();\n       first.item = item;\n       first.next = second;\n    }\n\n    ```"]