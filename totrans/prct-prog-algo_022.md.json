["```\nclass Node { \n   String item; \n   Node next; \n} \n\n```", "```\n    for (Node x = first; x != null; x = x.next) \n        StdOut.println(x.item);\n\n    ```", "```\n    Stack<Integer> stack = new Stack<Integer>();\n\n    ```", "```\nStack<Integer> stack = new Stack<Integer>();\nstack.push(17);            // autoboxing  (int -> Integer)\nint a = stack.pop();       // unboxing    (Integer -> int)\n\n```", "```\nStack collection = new Stack<string>();\n...\nfor (String s : stack)\n    StdOut.println(s);</string> \n```", "```\n    ( 2 + ( ( 3 + 4 ) * ( 5 * 6 ) ) )\n\n    ```", "```\n    Stack stack = new Stack<integer>();\n    while (n > 0) {\n        stack.push(n % 2);\n        n /= 2;\n    }\n    while (!stack.isEmpty())\n         StdOut.print(stack.pop());\n    StdOut.println();</integer> \n    ```", "```\n    Stack stack = new Stack<string>();\n    while (!queue.isEmpty())\n       stack.push(queue.dequeue());\n    while (!stack.isEmpty())\n       queue.enqueue(stack.pop());</string> \n    ```", "```\n    x.next = x.next.next;\n\n    ```", "```\n    // we assume that first is a reference to the first Node in the list\n    public void delete(int k) {\n        if (k <= 0) throw new RuntimeException(\"Invalid value of k\");\n\n        // degenerate case - empty linked list\n        if (first == null) return;\n\n        // special case - removing the first node\n        if (k == 1) {\n            first = first.next;\n            return;\n        }\n\n        // general case, make temp point to the (k-1)st node\n        Node temp = first;\n        for (int i = 2; i < k; i++) {\n            temp = temp.next;\n            if (temp == null) return;   // list has < k nodes\n        }\n\n        if (temp.next == null) return;  // list has < k nodes\n\n        // change temp.next to skip kth node\n        temp.next = temp.next.next;\n    }\n\n    ```", "```\n    t.next = x.next;\n    x.next = t;     \n\n    ```", "```\n    x.next = t;\n    t.next = x.next;\n\n    ```", "```\n    public Node(Node x) {\n        item = x.item;\n        if (x.next != null)\n            next = new Node(x.next);\n    }\n\n    public Stack(Stack s) {\n        first = new Node(s.first);\n    }\n\n    ```", "```\n    public Node(Node x, Node next) {\n        this.x = x;\n        this.next = next;\n    }\n\n    public Stack(Stack s) {\n       if (s.first != null) {\n          first = new Node(s.first.value, s.first.next) {\n          for (Node x = first; x.next != null; x = x.next)\n             x.next = new Node(x.next.value, x.next.next);\n       }\n    }\n\n    ```", "```\n    private class Card {\n        private String word;\n        private Card next;\n\n        public Card(String word) {\n            this.word = word;\n            this.next = null;\n        }\n    }\n\n    ```", "```\n    public static Node reverse(Node list) {\n        if (first == null || first.next == null) return first;\n        Node first   = list;\n        Node reverse = null;\n        while (first != null) {\n            Node second = first.next;\n            first.next  = reverse;\n            reverse     = first;\n            first       = second;\n        }\n        return reverse;\n    }\n\n    ```", "```\n    public Node reverse(Node first) {\n        if (first == null || first.next == null) return first;\n        Node second = first.next;\n        Node rest = reverse(second);\n        second.next = first;\n        first.next  = null;\n        return rest;\n    }\n\n    ```", "```\n    IntQueue q = new IntQueue();\n    q.enqueue(0);\n    q.enqueue(1);\n    for (int i = 0; i < 10; i++) {\n        int a = q.dequeue();\n        int b = q.dequeue();\n        q.enqueue(b);\n        q.enqueue(a + b);\n        System.out.println(a);\n    }\n\n    ```", "```\n    public void push(Object value) {\n       Node second = first;\n       Node first = new Node();\n       first.value = value;\n       first.next = second;\n    }\n\n    ```"]