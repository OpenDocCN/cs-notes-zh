- en: '1.1   Your First Java Program:   Hello World'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://introcs.cs.princeton.edu/java/11hello](https://introcs.cs.princeton.edu/java/11hello)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this section, our plan is to lead you into the world of Java programming
    by taking you through the three basic steps required to get a simple program running.
    As with any application, you need to be sure that Java is properly installed on
    your computer. You also need an editor and a terminal application. Here are system
    specific instructions for three popular home operating systems. [ [Mac OS X](../mac)
    · [Windows](../windows) · [Linux](linux.html) ]
  prefs: []
  type: TYPE_NORMAL
- en: Programming in Java.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We break the process of programming in Java into three steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Create* the program by typing it into a text editor and saving it to a file
    named, say, `MyProgram.java`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Compile* it by typing "`javac MyProgram.java`" in the terminal window.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Execute* (or *run*) it by typing "`java MyProgram`" in the terminal window.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The first step creates the program; the second translates it into a language
    more suitable for machine execution (and puts the result in a file named `MyProgram.class`);
    the third actually runs the program.
  prefs: []
  type: TYPE_NORMAL
- en: '*Creating a Java program.* A program is nothing more than a sequence of characters,
    like a sentence, a paragraph, or a poem. To create one, we need only define that
    sequence characters using a text editor in the same way as we do for email. [HelloWorld.java](HelloWorld.java.html)
    is an example program. Type these character into your text editor and save it
    into a file named `HelloWorld.java`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Compiling a Java program.* A *compiler* is an application that translates
    programs from the Java language to a language more suitable for executing on the
    computer. It takes a text file with the `.java` extension as input (your program)
    and produces a file with a `.class` extension (the computer-language version).
    To compile `HelloWorld.java` type the boldfaced text below at the terminal. (We
    use the `%` symbol to denote the command prompt, but it may appear different depending
    on your system.)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If you typed in the program correctly, you should see no error messages. Otherwise,
    go back and make sure you typed in the program exactly as it appears above.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Executing (or running) a Java program.* Once you compile your program, you
    can execute it. This is the exciting part, where the computer follows your instructions.
    To run the `HelloWorld` program, type the following in the terminal window:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: If all goes well, you should see the following response
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Understanding a Java program.* The key line with `System.out.println()` prints
    the text "Hello, World" in the terminal window. When we begin to write more complicated
    programs, we will discuss the meaning of `public`, `class`, `main`, `String[]`,
    `args`, `System.out`, and so on.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating your own Java program.* For the time being, all of our programs will
    be just like `HelloWorld.java`, except with a different sequence of statements
    in `main()`. The easiest way to write such a program is to:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Copy `HelloWorld.java` into a new file whose name is the program name followed
    by `.java`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace `HelloWorld` with the program name everywhere.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Replace the print statement by a sequence of statements.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Errors.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most errors are easily fixed by carefully examining the program as we create
    it, in just the same way as we fix spelling and grammatical errors when we type
    an e-mail message.
  prefs: []
  type: TYPE_NORMAL
- en: '*Compile-time errors.* These errors are caught by the system when we compile
    the program, because they prevent the compiler from doing the translation (so
    it issues an error message that tries to explain why).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Run-time errors.* These errors are caught by the system when we execute the
    program, because the program tries to perform an invalid operation (e.g., division
    by zero).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Logical errors.* These errors are (hopefully) caught by the programmer when
    we execute the program and it produces the wrong answer. Bugs are the bane of
    a programmer''s existence. They can be subtle and very hard to find.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: One of the very first skills that you will learn is to identify errors; one
    of the next will be to be sufficiently careful when coding to avoid many of them.
  prefs: []
  type: TYPE_NORMAL
- en: Input and output.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Typically, we want to provide *input* to our programs: data that they can process
    to produce a result. The simplest way to provide input data is illustrated in
    [UseArgument.java](UseArgument.java.html). Whenever this program is executed,
    it reads the command-line argument that you type after the program name and prints
    it back out to the terminal as part of the message.'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a program [TenHelloWorlds.java](TenHelloWorlds.java.html) that prints
    "`Hello, World`" ten times.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify [UseArgument.java](UseArgument.java.html) to make a program [UseThree.java](UseThree.java.html)
    that takes three names and prints out a proper sentence with the names in the
    reverse of the order given, so that for example, "`java UseThree Alice Bob Carol`"
    gives "`Hi Carol, Bob, and Alice.`".
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Web Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a program [HelloWorldMultilingual.java](HelloWorldMultilingual.java.html)
    that prints "Hello World!" in as many human languages as you can.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program [Initials.java](Initials.java.html) that prints your initials
    using nine rows of asterisks like the one below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Describe what happens if, in [HelloWorld.java](HelloWorld.java.html), you omit
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`main`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`String`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`HelloWorld`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`System.out`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`println`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Describe what happens if, in [HelloWorld.java](HelloWorld.java.html), you omit
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: the `;`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: the first `"`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: the second `"`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: the first `{`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: the second `{`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: the first `}`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: the second `}`
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Describe what happens if, in [HelloWorld.java](HelloWorld.java.html), you misspell
    (by, say, omitting the second letter)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`main`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`String`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`HelloWorld`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`System.out`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`println`'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I typed in the following program. It compiles fine, but when I execute it,
    I get the error `java.lang.NoSuchMethodError: main`. What am I doing wrong?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Answer*: you forgot the `String[] args`. It is required.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
