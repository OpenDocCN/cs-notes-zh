- en: 2.1   Static Methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://introcs.cs.princeton.edu/java/21function](https://introcs.cs.princeton.edu/java/21function)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: The Java construct for implementing functions is known as the *static method*.
  prefs: []
  type: TYPE_NORMAL
- en: Using and defining static methods.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The use of static methods is easy to understand. For example, when you write
    `Math.abs(a-b)` in a program, the effect is as if you were to replace that code
    with the *return value* that is produced by Java's `Math.abs()` method method
    when passed the expression `a-b` as an *argument*.
  prefs: []
  type: TYPE_NORMAL
- en: '*Flow-of-control.* [Harmonic.java](Harmonic.java.html) comprises two static
    methods: `harmonic()` to compute harmonic numbers and and `main()` to interact
    with user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![harmonic numbers](../Images/10522b75497279c18e11ab9e654d53b6.png)            
    ![function-call trace](../Images/5902e6217e718db114f7b4f274de7c56.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*Function-call trace.* One simple approach to following the flow of control
    through function calls is to imagine that each function prints its name and argument
    value when it is called and its return value just before returning, with indentation
    added on calls and subtracted on returns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Static method definition.* The first line of a static method definition, known
    as the *signature*, gives a name to the method and to each *parameter variable*.
    It also specifies the *type* of each parameter variable and the *return type*
    of the method. Following the signature is the *body* of the method, enclosed in
    curly braces. The body consists of the kinds of statements we discussed in Chapter
    1. It also can contain a *return statement*, which transfers control back to the
    point where the static method was called and returns the result of the computation
    or *return value*. The body may declare *local variables*, which are variables
    that are available only inside the method in which they are declared.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![anatomy of a static method](../Images/155497e24152938c2acdb00857f6d9df.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*Function calls.* A static method call is nothing more than the method name
    followed by its arguments, separated by commas and enclosed in parentheses. A
    method call is an expression, so you can use it to build up more complicated expressions.
    Similarly, an argument is an expression—Java evaluates the expression and passes
    the resulting value to the method. So, you can write code like `Math.exp(-x*x/2)
    / Math.sqrt(2*Math.PI)` and Java knows what you mean.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![anatomy of a static method call](../Images/a73cbe98ca3793c89559895d3720301d.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: Properties of static methods.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Multiple arguments.* Like a mathematical function, a Java static method can
    take on more than one argument, and therefore can have more than one parameter
    variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Multiple methods.* You can define as many static methods as you want in a
    `.java` file. These methods are independent and can appear in any order in the
    file. A static method can call any other static method in the same file or any
    static method in a Java library such as `Math`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Overloading.* Static methods whose signatures differ are different static
    methods. Using the same name for two static methods whose signatures differ is
    known as *overloading*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Multiple return statements.* You can put `return` statements in a method wherever
    you need them: control goes back to the calling program as soon as the first `return`
    statement is reached.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Single return value.* A Java method provides only one return value to the
    caller, of the type declared in the method signature.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Scope.* The *scope* of a variable is the part of the program that can refer
    to that variable by name. The general rule in Java is that the scope of the variables
    declared in a block of statements is limited to the statements in that block.
    In particular, the scope of a variable declared in a static method is limited
    to that method''s body. Therefore, you cannot refer to a variable in one static
    method that is declared in another.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![scope](../Images/3c280de39d60aa5cac3e30ee18360f10.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*Side effects.* A *pure function* is a function that, given the same arguments,
    always returns the same value, without producing any observable *side effects*,
    such as consuming input, producing output, or otherwise changing the state of
    the system. The function `harmonic()` is an example of a pure function. However,
    in computer programming, we often define functions whose *only* purpose is to
    produce side effects. In Java, a static method may use the keyword `void` as its
    return type, to indicate that it has no return value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[FunctionExamples.java](FunctionExamples.java.html) gives a number of examples.'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing mathematical functions.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '![Gaussian distribution function and cumulative distribution function](../Images/f961302ed91566f87abcccdb590a620a.png)
    We now consider two important functions that play an important role in science,
    engineering, and finance. The *Gaussian (normal) distribution function* is characterized
    by the familiar bell-shaped curve and defined by the formula:'
  prefs: []
  type: TYPE_NORMAL
- en: $$ \phi(x) \;=\; \frac{1}{\sqrt{2 \pi}} e^{-x^2/2} $$
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: and the *cumulative Gaussian distribution function* \(\Phi(z)\) is defined to
    be the area under the curve defined by \(\phi(x)\) above the *x*-axis and to the
    left of the vertical line *x* = *z*.
  prefs: []
  type: TYPE_NORMAL
- en: '*Closed form.* In the simplest situation, we have a closed-form mathematical
    equation defining our function in terms of functions that are implemented in the
    `Math` library. This is the case for \(\phi(x)\).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*No closed form.* Otherwise, we may need a more complicated algorithm to compute
    function values. This situation is the case for \(\Phi(z)\), for which no closed-form
    expression exists. For small (respectively large) *z*, the value is extremely
    close to 0 (respectively 1); so the code directly returns 0 (respectively 1);
    otherwise the following Taylor series approximation is an effective basis for
    evaluating the function:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: $$ \begin{eqnarray*} \Phi(z) &= & \int_{-\infty}^{z} \phi(x) dx \\ & = & \frac{1}{2}
    \;+\; \phi(z) \; \left(z \;+\; \frac{z^3}{3} \;+\; \frac{z^5}{3 \cdot 5} \;+\;
    \frac{z^7}{3 \cdot 5 \cdot 7} \;+\; \ldots \;\; \right) \end{eqnarray*} $$
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Gaussian.java](Gaussian.java.html) implements both of these static methods.'
  prefs: []
  type: TYPE_NORMAL
- en: Using static methods to organize code.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the ability to define functions, we can better organize our programs by
    defining functions within them when appropriate. For example, [Coupon.java](Coupon.java.html)
    is a version of [CouponCollector.java](../14array/CouponCollector.java.html) that
    better separates the individual components of the computation.
  prefs: []
  type: TYPE_NORMAL
- en: Given *n*, compute a random coupon value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Given *n*, do the coupon collection experiment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get *n* from the command line, and then compute and print the result.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Whenever you can clearly separate tasks in programs, you should do so.*'
  prefs: []
  type: TYPE_NORMAL
- en: Passing arguments and returning values.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Next, we examine the specifics of Java's mechanisms for passing arguments to
    and returning values from functions.
  prefs: []
  type: TYPE_NORMAL
- en: '*Pass by value.* You can use parameter variables anywhere in the code in the
    body of the function in the same way you use local variables. The only difference
    between a parameter variable and a local variable is that Java evaluates the argument
    provided by the calling code and initializes the parameter variable with the resulting
    value. This approach is known as *pass by value*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Arrays as arguments.* When a static method takes an array as an argument,
    it implements a function that operates on an arbitrary number of values of the
    same type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Side effects with arrays.* It is often the case that the purpose of a static
    method that takes an array as argument is to produce a side effect (change values
    of array elements).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Arrays as return values.* A static method can also provide an array as a return
    value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ArrayFunctionExamples.java](ArrayFunctionExamples.java.html) gives a number
    of examples of arrays as arguments to and return values from functions.'
  prefs: []
  type: TYPE_NORMAL
- en: Superposition of sound waves.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Notes like concert A have a pure sound that is not very musical, because the
    sounds that you are accustomed to hearing have many other components. Most musical
    instruments produce *harmonics* (the same note in different octaves and not as
    loud), or you might play chords (multiple notes at the same time). To combine
    multiple sounds, we use *superposition*: simply add the waves together and rescale
    to make sure that all values stay between −1 and 1.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Superposition of sound waves](../Images/d0fdbd08c2c84e8b854b8c58c81b8cac.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: '[PlayThatTuneDeluxe.java](PlayThatTuneDeluxe.java.html) is a version of [PlayThatTune](../15inout/PlayThatTune.java.html)
    that encapsulates the sound wave calculation and adds harmonics.'
  prefs: []
  type: TYPE_NORMAL
- en: '![Flow of control of static methods](../Images/666a26697cffbc30a3b47b8fb597892a.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: 'Here a few sample data files (created by various students):'
  prefs: []
  type: TYPE_NORMAL
- en: '[Ascale.txt](Ascale.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[elise.txt](elise.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[StairwayToHeaven.txt](StairwayToHeaven.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[firstcut.txt](firstcut.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[looney.txt](looney.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[National_Anthem.txt](National_Anthem.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[arabesque.txt](arabesque.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[entertainer.txt](entertainer.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[freebird.txt](freebird.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[tomsdiner.txt](tomsdiner.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a static method `max3()` that takes three `int` arguments and returns
    the value of the largest one. Add an overloaded function that does the same thing
    with three `double` values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write a static method `majority()` that takes three `boolean` arguments and
    returns `true` if at least two of the arguments are `true`, and `false` otherwise.
    Do not use an `if` statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write a static method `eq()` that takes two `int` arrays as arguments and returns
    `true` if the arrays have the same length and all corresponding pairs of elements
    are equal, and `false` otherwise.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution.* [ArraysEquals.java](ArrayEquals.java.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Write a static method `sqrt()` that takes a `double` argument and returns the
    square root of that number. Use Newton's method (see [Sqrt.java](../13flow/Sqrt.java.html))
    to compute the result.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*: [Newton.java](Newton.java.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Consider the static method `cube()` below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How many times is the following `for` loop iterated?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Answer*: Just 1,000 times.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creative Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Black–Scholes option valuation.** The [Black–Scholes](http://en.wikipedia.org/wiki/Black-Scholes)
    formula supplies the theoretical value of a European call option on a stock that
    pays no dividends, given the current stock price s, the exercise price x, the
    continuously compounded risk-free interest rate r, the volatility σ, and the time
    (in years) to maturity t. The value is given by the formula'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: $$\Phi(a) - s x e^{-rt} \, \Phi(b)$$
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: where
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $$ a = \frac{\ln(s/x) + (r + \sigma^2 / 2) t}{\sigma \sqrt{t}}, \;\; b = a -
    \sigma \sqrt{t} $$
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a program [BlackScholes.java](BlackScholes.java.html) that takes s, x,
    r, sigma, and t from the command line and prints the Black-Scholes value.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Calendar.** Write a program [Calendar.java](Calendar.java.html) that takes
    two integer command-line arguments `m` and `y` and prints the monthly calendar
    for the month `m` and year `y`, as in this example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Hint:* See [LeapYear.java](../12types/LeapYear.java.html) and Exercise 1.2.29.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Horner''s method.** Write a class [Horner.java](Horner.java.html) with a
    method `evaluate()` that takes a floating-point number `xp[]` as arguments and
    returns the result of evaluating the polynomial whose coefficients are the elements
    in `p[]` at `x`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: $$p_0 + p_1x^1 + p_2x^2 + \; \ldots \; + p_{n-2}x^{n-2} + p_{n-1}x^{n-1}$$
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Use *Horner''s method*, an efficient way to perform the computations that is
    suggested by the following parenthesization:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $$p_0 + x (p_1 + x (p_2 + \; \ldots \; + x(p_{n-2} + x p_{n-1}) \ldots))$$
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a test client with a static method `exp()` that uses `evaluate()` to compute
    an approximation to e^x, using the first *n* terms of the Taylor series expansion
    \(e^x = 1 + x + x^2/2! + x^3/3! + \ldots\) Your client should take a command-line
    argument `x` and compare your result against that computed by `Math.exp()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Benford''s law.** The American astronomer Simon Newcomb observed a quirk
    in a book that compiled logarithm tables: the beginning pages were much grubbier
    than the ending pages. He suspected that scientists performed more computations
    with numbers starting with 1 than with 8 or 9, and postulated the first digit
    law, which says that under general circumstances, the leading digit is much more
    likely to be 1 (roughly 30%) than the digit 9 (less than 4%). This phenomenon
    is known as [Benford''s law](http://mathworld.wolfram.com/BenfordsLaw.html) and
    is now often used as a statistical test. For example, IRS forensic accountants
    rely on it to discover [tax fraud](http://courses.nus.edu.sg/course/mathelmr/080498sci-benford.htm).
    Write a program [Benford.java](Benford.java.html) that reads in a sequence of
    integers from standard input and tabulates the number of times each of the digits
    1–9 is the leading digit, breaking the computation into a set of appropriate static
    methods. Use your program to test the law on some tables of information from your
    computer or from the web. Then, write a program to foil the IRS by generating
    random amounts from $1.00 to $1,000.00 with the same distribution that you observed.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Web Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Diamond tile.** Write a program [DiamondTile.java](DiamondTile.java.html)
    that takes a command-line argument N and creates an N-by-N tile of diamonds. Include
    static methods `diamond()` and `filledDiamond()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Hexagonal tile.** Write a program [HexTile.java](HexTile.java.html) that
    takes a command-line argument N and creates an N-by-N tile of hexagons. Include
    static methods `hexagon()` and `filledHexagon()`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Inverse Gaussian cumulative distribution.** Suppose SAT math scores are normally
    distributed with mean 500 and standard deviation. Estimate how high student must
    score in order to be among the top 10%. To do this you need to find the value
    *z* for which Φ(z, 500, 100) = 0.9. *Hint:* use binary search.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**SAT scores.** A prominent northeastern university receives 20,000 student
    applications. Assume that the SAT scores of these individuals is normally distributed
    with mean 1200 and standard deviation 100\. Suppose the university decides to
    admit the 5,000 students with the best SAT scores. Estimate the lowest score that
    will still be admitted.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Voting machines.** Suppose that in a population of 100 million voters, 51%
    vote for candidate A and 49% vote for candidate B. However, the voting machines
    are prone to make mistakes, and 5% of the time they produce the wrong answer.
    Assuming the errors are made independently and at random, is a 5% error rate enough
    to invalidate the results of a close election? What error rate can be tolerated?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Gambler''s histogram.** Write a program `RandomWalk.java` that takes one
    command line parameter M and simulates a gambler starting with M who places exactly
    M one dollar bets.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Produce a histogram of the amount of money the gambler ends up with by running
    this experiment N times.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The amount of money the gambler ends up with follows a binomial distribution
    with mean M and variance N/4\. The distribution can be approximated by a normal
    distribution with the same mean and variance. Produce a histogram for the fraction
    of time you'd expect the gambler to end up with the amount in each histogram bin.Organize
    your program up into several functions.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Statistical sampling.** Write a program [Sampling.java](Sampling.java.html)
    takes a random sample of N people and asks them a yes/no question. Compute a 95%
    confidence interval.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Blackjack.** Write a program `Blackjack.java` that plays the [basic strategy](http://www.blackjackcenter.com/blackjack3.html)
    or write a program `BlackjackCounter.java` that implements the [high-low card
    counting system](http://www.blackjackcenter.com/blackjack4.html).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Wavelets.** Applications to computer vision, human vision, speech processing,
    compressing the FBI fingerprint database, filtering noisy data, detecting self-similarity
    in time series, sound synthesis, computer graphics, medical imaging, analyzing
    the clumping of galaxies, and analyzing turbulence. The *Haar function* is definite
    by Φ(x) = 1 if 0 ≤ x < 1/2, Φ(x) = -1 if 1/2 ≤ x < 1, and Φ(x) = 0 otherwise.
    For integer m and n, the *Haar basis function* Φ[m,n](x) = 2^(-m/2) Φ(2^(-m)x
    - n). Write a program `Haar.java` that takes two integer input M and N, and one
    real input x and prints Φ[m,n](x). Or maybe plot it?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Baccarat.** [Baccarat](http://www.robohoo.com/baccarat.html) is a simple
    card game which has been romanticized in James Bond movies. When the player is
    dealt nine, the croupier proclaims "neuf a la banque". Write a program that determines
    your chance of winning....'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Collinear points.** Write a function'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: that returns `true` if the three points (x1, y1), (x2, y2), and (x3, y3) lie
    on the same line, and `false` otherwise.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Gauss error function.** The [error function](http://en.wikipedia.org/wiki/Error_function)
    is a function that arises in probability, statistics, and solutions to differential
    equations. For example, Φ(z) = 1/2 + (1 + erf(z / sqrt(2))), where Φ(z) is the
    Gaussian cumulative distribution function defined above.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Error function](../Images/cf9d3ae1284212a5bfaf77eb1241b920.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: 'The integral has no closed form solution in terms of [elementary functions](http://en.wikipedia.org/wiki/Elementary_function_%28differential_algebra%29)
    so we resort to approximations. When `z` is nonnegative, the Chebyshev fitting
    estimate below is accurate to 7 significant digits:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Chebyshev approximation to error function](../Images/51e6ed548e51d94c1cdfe775fe181824.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: If *z* is negative, use the identity *erf(z) = -erf(-z)*. A particularly efficient
    way to implement it is via a judicious use of parentheses known as *Horner's method*.
    Write a function `erf()` in [ErrorFunction.java](ErrorFunction.java.html) takes
    one real input `z` and computes the *error function* using the formula above.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Haversine.** Write a function `haversine()` that takes one `double` argument
    `θ` and returns haversine(θ) = (sin(θ/2))^2.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Soil temperature.** (Cleve Moler) Suppose the soil temperature is uniformly
    Ti (20 degrees C) at the surface and beneath. A cold front moves in and the surface
    temperature Ts (-15 C) remains for the foreseeable future. The temperature T(x,
    t) at time t seconds of the soil at x meters beneath the surface is given by T(x,
    t) = Ts + (Ti - Ts) erf(x / 2 sqrt(alpha t)), where alpha (0.138 * 10^-6 m^2 /
    s) is the thermal conductivity of the soil. What is the temperature at 10 meters
    after 30 days of exposure to these conditions? How long until water freezes (0
    degrees) at 5 meters beneath the surface? How deep to dig a water main so that
    it can withstand 60 days of exposure to these conditions without freezing?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Craps.** Calculate the probability of winning a *pass bet* in craps. Here
    are the rule for a pass bet. Roll two 6-sided dice, and let *x* be their sum.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: if *x* is 7 or 11, you win instantly
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: if *x* is 2, 3, or 12, you lose instantly
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: otherwise, repeatedly roll two dice until their sum is either *x* or 7
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: if their sum is *x*, you win
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: if their sum is 7, you lose
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Program [Craps.java](Craps.java.html) takes a command line parameter N and
    simulates N pass bets. The program''s organization benefits from two helper functions:
    `sumOfTwoDice` and `winsPassBet`. Both functions have one interesting feature
    - they do not take any input arguments. The first function simulate the throw
    of two dice. This returns an integer between 2 and 12, but not all values are
    equally likely. To simulate the probabilities correctly, we call `StdRandom.random(6)`
    twice and one to generate a number between 1 and 6\. Then, we add the two values.
    The second function returns a `boolean` value: `true` if we win the pass bet and
    `false` otherwise. This function has several `return` statements. As soon as the
    first one is executed, the function terminates with the given return value.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Musical scale.** Using the function `note()`, write a program [Scale.java](Scale.java.html)
    to play a major scale.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Primality testing.** Create a function `isPrime()` that takes an integer
    argument N and returns true or false depending on whether N is prime.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Electronic funds transfer routing number check.** Given a 9 digit EFT routing
    number a[1]a[2]a[3]a[4]a[5]a[6]a[7]a[8]a[9] the check equation is'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 3 a[1] + 7a[2] + a[3] + 3a[4] + 7a[5] + a[6] +3a[7] +7a[8] +a[9] mod 10 = 0
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '[Check digit reference](http://www.augustana.ab.ca/~mohrj/algorithms/checkdigit.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Write a static method `nint()` that takes a real number as a parameter and returns
    the nearest integer. Do not use any Math library function, instead use casting.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a static method `int mod(int a, int n)`, where `a` is an integer and `n`
    is a positive integer, and returns a mod n. This corresponds to `a % n` when `a`
    is positive, but if `a` is negative, `a % n` returns a non-positive integer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Present value.**'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a method `fv` that computes the amount of money you will have if you invest
    C dollars today at the compound interest rate of r per period, in T periods. The
    formula for the *future value* is given by C*(1 + r)^T.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a method `pv` that computes the amount of money that would have to be
    invested now, at the compound interest rate r per period, to obtain a cash flow
    of C in T periods. The formula for the *present value* is given by C/(1 + r)^T.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The ACT is another standardized test. Assume that test scores follow a Gaussian
    distribution with mean 18 and standard deviation 6. Also assume that the test
    takers for SAT and ACT are indistinguishable. Which is better, an SAT score of
    620 or ACT of 26?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write a program [Factorial.java](Factorial.java.html) that takes one integer
    command line input n and prints out n! = 1 * 2 * ... * n. Write a function that
    has the following signature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What is the largest value of n that your function can handle without overflow?
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What is wrong with the following function?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Answer*: The function is declared to return a value of type `int`. The first
    return statement is wrong since it returns nothing. The second return statement
    is wrong since it returns a value of type `double`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What does the following do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Answer*: It prints `17` twice. A function cannot change the value of a primitive
    type variable in another function.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Write a function that takes three real arguments, x, y, and s, and plots an
    equilateral triangle centered on (x, y) with side length s. Call the function
    a number of times in `main` to produce an entertaining pattern.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which of the following functions returns the minimum of its four inputs? Which
    is easiest to understand and verify that it is correct?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How would you go about testing whether one of the functions in the previous
    exercise does what it claims to do?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Answer*: you can''t hope to test it on every conceivable input since there
    are 2^(128) different possible inputs. Instead, test it on all 4! = 24 cases depending
    on whether a < b, a < c, ..., c < d. Or all 4^4 permutations of 0, 1, 2, and 3.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What's wrong with the following method call?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It re-declare the variable `y` when calling `sqrt()`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Sawtooth.** Write a program [SawTooth.java](SawTooth.java.html) to plot 2/pi
    [sin(1t)/1 + sint(2t)/2 + sin(3t)/3 + ... ]. As you plot more and more terms,
    the wave converges to a [sawtooth wave](http://en.wikipedia.org/wiki/Sawtooth_wave).
    Then play it using standard audio.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Square wave.** Plot 4/pi [sin(1*2*pi*t)/1 + sint(3*2*pi*t)/3 + sin(5*2*pi*t)/5
    + ... ]. As you plot more and more terms, the wave converges to a [square wave](http://en.wikipedia.org/wiki/Square_wave).
    Then play it using standard audio.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program to print the lyrics to Old McDonald.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write a static method `maxwellBoltzmann()` that returns a pseudo-random value
    from a *Maxwell-Boltzmann distribution* with parameter σ. To produce such a value,
    take the sum of the squares of three Gaussian random variables with mean 0 and
    standard deviation σ, and return the square root. The speeds of molecules in an
    ideal gas have a Maxwell-Boltzmann distribution, where the parameter σ is related
    to XYZ.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a static method `reverse1()` that takes a string array as an argument
    and creates a new array with the entries in reverse order (and does not change
    the order of the entries in the argument array). Write a static method `reverse2()`
    that takes a string array as an argument and reverses its entries. Put your code
    in a program [Reverse.java](Reverse.java.html).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which function gets called by `f(1, 2)` if I have two overloaded functions
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution.* Ordinarily, Java''s type promotion rules would promote either `int`
    argument to `double`. However, in this case, that would result in two matching
    overloaded signatures. Since Java can''t resolve the ambiguity, [Overloaded.java](Overloaded.java.html)
    results in a compile-time error.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Gaussian random values.** Experiment with the following method for generating
    random variables from the Gaussian distribution, which is based on generating
    a random point in the unit circle and using a form of the [Box-Muller transform](http://en.wikipedia.org/wiki/Box-Muller_transform).
    (see Exercise 1.2.27 and the discussion of do-while at the end of Section 1.3).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Take a command-line argument N and generate N random numbers, using an array
    a[20] to count the numbers generated that fall between i*.05 and (i+1)*.05 for
    i from 0 to 19\. Then use `StdDraw` to plot the values and to compare your result
    with the normal bell curve.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Remark*: This method is preferred over the one described in Exercise XYZ for
    both efficiency and accuracy. Although it involves a loop, the do-while loop is
    executed only 4 / π = 1.273 times on average. This reduces the overall expected
    number of calls to transcendental functions.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
