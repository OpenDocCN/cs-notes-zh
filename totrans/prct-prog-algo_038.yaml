- en: 7.1   Boolean Logic
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 7.1   布尔逻辑
- en: 原文：[https://introcs.cs.princeton.edu/java/71boolean](https://introcs.cs.princeton.edu/java/71boolean)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/java/71boolean](https://introcs.cs.princeton.edu/java/71boolean)
- en: A *boolean function* is a mathematical function that maps arguments to a value,
    where the allowable values of range (the function arguments) and domain (the function
    value) are just one of two values— `*true*` and `*false*` (or `*0*` and `*1*`).
    The study of boolean functions is known as *Boolean logic*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*布尔函数*是将参数映射到值的数学函数，其中范围（函数参数）���定义域（函数值）的允许值只有两个值— `*true*`和`*false*`（或`*0*`和`*1*`）。布尔函数的研究被称为*布尔逻辑*。'
- en: Boolean functions.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 布尔函数。
- en: To define any boolean function, we need only to specify its value for each possible
    value of its inputs. The *not* function is a boolean function of one variable.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义任何布尔函数，我们只需指定其在输入的每个可能值上的值。*非*函数是一个具有一个变量的布尔函数。
- en: $$ \quad\quad\quad\quad\quad\quad \begin{align} NOT(x) &\;=\; \begin{cases}
    1 & \text {if $x$ is $0$} \\[1ex] 0 & \text {if $x$ is $1$} \end{cases} \end{align}
    $$
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $$ \quad\quad\quad\quad\quad\quad \begin{align} NOT(x) &\;=\; \begin{cases}
    1 & \text {如果$x$是$0$} \\[1ex] 0 & \text {如果$x$是$1$} \end{cases} \end{align} $$
- en: The *and*, *or*, and *exclusive or* functions are familiar boolean functions
    of two variables.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '*与*、*或*和*异或*函数是熟悉的两个变量的布尔函数。'
- en: $$ \quad\quad\quad\quad\quad\quad \begin{align} AND(x, y) &\;=\; \begin{cases}
    1 & \text {if both $x$ and $y$ are $1$} \\[1ex] 0 & \text {otherwise} \end{cases}
    \\ \\ OR(x, y) &\;=\; \begin{cases} 1 & \text {if either $x$ or $y$ (or both)
    is $1$} \\[1ex] 0 & \text {otherwise} \end{cases} \\ \\ XOR(x, y) &\;=\; \begin{cases}
    1 & \text {if $x$ and $y$ are different} \\[1ex] 0 & \text {otherwise} \end{cases}
    \end{align} $$
  id: totrans-7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $$ \quad\quad\quad\quad\quad\quad \begin{align} AND(x, y) &\;=\; \begin{cases}
    1 & \text {如果$x$和$y$都是$1$} \\[1ex] 0 & \text {否则} \end{cases} \\ \\ OR(x, y) &\;=\;
    \begin{cases} 1 & \text {如果$x$或$y$（或两者）是$1$} \\[1ex] 0 & \text {否则} \end{cases}
    \\ \\ XOR(x, y) &\;=\; \begin{cases} 1 & \text {如果$x$和$y$不同} \\[1ex] 0 & \text
    {否则} \end{cases} \end{align} $$
- en: '*Notation.* There are many competing notations for elementary boolean functions.
    In this chapter, we primarily use the circuit-design notation.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*符号.* 对于基本布尔函数，存在许多竞争的符号。在本章中，我们主要使用电路设计符号。'
- en: '![notations for boolean functions](../Images/967ba56bc1363b027cde00ed852c8fcd.png)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![布尔函数的符号](../Images/967ba56bc1363b027cde00ed852c8fcd.png)'
- en: '*Truth tables.* One way to define a boolean function is to specify its value
    for each possible value of its arguments. We use a *truth table* to do so in an
    organized way. A truth table has one column for each variable, one row for each
    possible combination of variable values, and a column that specifies the value
    of the function for that combination.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*真值表.* 定义布尔函数的一种方法是指定其在参数的每个可能值上的值。我们使用*真值表*以有组织的方式这样做。真值表有一个列用于每个变量，一行用于每个变量值的可能组合，以及一列指定该组合的函数值。'
- en: '![truth tables for elementary functions](../Images/b07d5165358cd09b5ad8704ba6b15df0.png)'
  id: totrans-11
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![基本函数的真值表](../Images/b07d5165358cd09b5ad8704ba6b15df0.png)'
- en: A truth table for a function of *n* variables has 2^(*n*) rows.
  id: totrans-12
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 一个由*n*个变量组成的函数的真值表有2^(*n*)行。
- en: '*Boolean algebra.* Boolean algebra refers to symbolic manipulation of expressions
    made up of boolean variables and boolean operators. The familiar *identity*, *commutative*,
    *distributive*, and *associative* axioms from algebra define the axioms of Boolean
    algebra, along with the two *complementary* axioms.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*布尔代数.* 布尔代数指的是由布尔变量和布尔运算符组成的表达式的符号操作。来自代数的熟悉的*恒等式*、*交换律*、*分配律*和*结合律*以及两个*互补*公理定义了布尔代数的公理。'
- en: '![axioms of Boolean algebra](../Images/d4516234e6f9bf64f5a9766c352d74aa.png)'
  id: totrans-14
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![布尔代数的公理](../Images/d4516234e6f9bf64f5a9766c352d74aa.png)'
- en: In addition, you can derive many other laws from these axioms. For example,
    the last entry in the table gives two special identities known as *DeMorgan’s
    laws*.
  id: totrans-15
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此外，您可以从这些公理中推导出许多其他定律。例如，表中的最后一个条目给出了两个特殊的恒等式，称为*德摩根定律*。
- en: '![identities and theorems of Boolean algebra](../Images/f1d5ea48a2e1330904a55fa239c15909.png)'
  id: totrans-16
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![布尔代数的恒等式和定理](../Images/f1d5ea48a2e1330904a55fa239c15909.png)'
- en: '*Boolean algebra in Java.* You can incorporate Boolean algebra into your Java
    programs, in two different ways.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Java中的布尔代数.* 您可以以两种不同的方式将布尔代数纳入您的Java程序中。'
- en: 'Java’s boolean data type: In Section 1.2, we introduced boolean operations
    with the values `*true*` and `*false*` and the `*AND*`, `*OR*`, and `*NOT*` operations
    using the operators `&&`, `||`, and `!`, respectively.'
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java的布尔数据类型：在第1.2节中，我们介绍了具有值`*true*`和`*false*`以及使用运算符`&&`、`||`和`!`的`*AND*`、`*OR*`和`*NOT*`操作的布尔操作。
- en: 'Bitwise operations on integer values: In Section 6.1, we discussed Java’s bitwise
    operations, which use the `*AND*`, `*OR*`, `*NOT*`, and `*XOR*` operators on each
    bit in the binary representations of integer values, using the operators `&`,
    `|`, `~`, and `^`, respectively.'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 整数值的位操作：在第6.1节中，我们讨论了Java的位操作，它使用`*AND*`、`*OR*`、`*NOT*`和`*XOR*`运算符对整数值的二进制表示中的每个位进行操作，分别使用运算符`&`、`|`、`~`和`^`。
- en: Boolean functions of three or more variables.
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 三个或更多变量的布尔函数。
- en: As the number of variables increases, the number of possible functions increases
    dramatically. There are 2⁸ different boolean functions of 3 variables, 2^(16)
    functions of 4 variables, 2^(32) functions of 5 variables, and so forth. Several
    such functions play a critical role in computation and in circuit design, so we
    will now consider them.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 随着变量数量的增加，可能函数的数量急剧增加。有2⁸个不同的三变量布尔函数，有2^(16)个四变量函数，有2^(32)个五变量函数，依此类推。几个这样的函数在计算和电路设计中起着关键作用，因此我们现在将对它们进行考虑。
- en: '*AND and OR functions.* The definitions of the `*AND*` and `*OR*` functions
    for multiple arguments generalize in a natural way from our two-argument definitions:'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*AND和OR函数.* 对于多个参数的`*AND*`和`*OR*`函数的定义从我们的两个参数的定义自然地推广：'
- en: $$ \quad\quad\quad\quad\quad\quad \begin{align} AND(x_1, x_2, \ldots, x_n) &\;=\;
    \begin{cases} 1 & \text {if all arguments are $1$} \\[1ex] 0 & \text {otherwise}
    \end{cases} \\ \\ OR(x_1, x_2, \ldots, x_n) &\;=\; \begin{cases} 1 & \text {if
    any argument is $1$} \\[1ex] 0 & \text {otherwise} \end{cases} \\ \end{align}
    $$
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $$ \quad\quad\quad\quad\quad\quad \begin{align} AND(x_1, x_2, \ldots, x_n) &\;=\;
    \begin{cases} 1 & \text {如果所有参数都为$1$} \\[1ex] 0 & \text {否则} \end{cases} \\ \\
    OR(x_1, x_2, \ldots, x_n) &\;=\; \begin{cases} 1 & \text {如果任何参数为$1$} \\[1ex]
    0 & \text {否则} \end{cases} \\ \end{align} $$
- en: '*Majority and odd-parity functions.* We consider two additional functions that
    arise in the design of digital circuits: the *majority* and *odd-parity* functions:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*多数和奇偶函数。* 我们考虑数字电路设计中出现的另外两个函数：*多数*和*奇偶*函数：'
- en: $$ \quad\quad\quad\quad\quad\quad \begin{align} MAJ(x_1, x_2, \ldots, x_n) &\;=\;
    \begin{cases} 1 & \text {if strictly more arguments are $1$ than 0} \\[1ex] 0
    & \text {otherwise} \end{cases} \\ \\ ODD(x_1, x_2, \ldots, x_n) &\;=\; \begin{cases}
    1 & \text {if an odd number of arguments are $1$} \\[1ex] 0 & \text {otherwise}
    \end{cases} \\ \end{align} $$
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $$ \quad\quad\quad\quad\quad\quad \begin{align} MAJ(x_1, x_2, \ldots, x_n) &\;=\;
    \begin{cases} 1 & \text {如果$1$的参数比$0$的参数多} \\[1ex] 0 & \text {否则} \end{cases}
    \\ \\ ODD(x_1, x_2, \ldots, x_n) &\;=\; \begin{cases} 1 & \text {如果参数中有奇数个$1$}
    \\[1ex] 0 & \text {否则} \end{cases} \\ \end{align} $$
- en: '*Boolean expressions.* As with boolean functions of two variables, we can use
    a truth table to explicitly specify a boolean function.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*布尔表达式。* 与两个变量的布尔函数一样，我们可以使用真值表来明确指定布尔函数。'
- en: '![truth tables for boolean functions of 3 variables](../Images/f1a6833624b9f5057fffe011937856ed.png)'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![三个变量的布尔函数真值表](../Images/f1a6833624b9f5057fffe011937856ed.png)'
- en: 'This representation is cumbersome and quickly fails for functions with larger
    numbers of variables, since the number of rows needed for *n* variables is 2^(*n*).
    Instead, we often prefer to use *boolean expressions* to define boolean functions.
    For example, it is not hard to verify these two identities:'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种表示法对于具有更多变量的函数很繁琐，并且在变量较多时很快失效，因为对于*n*个变量，所需的行数为2^(*n*)。相反，我们通常更喜欢使用*布尔表达式*来定义布尔函数。例如，很容易验证这两个恒等式：
- en: $$ \quad\quad\quad\quad\quad\quad \begin{align} AND(x_1, x_2, \ldots, x_n) &\;=\;
    x_1 x_2 \ldots x_n \\ \\ OR(x_1, x_2, \ldots, x_n) &\;=\; x_1 + x_2 + \ldots +
    x_n \end{align} $$
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $$ \quad\quad\quad\quad\quad\quad \begin{align} AND(x_1, x_2, \ldots, x_n) &\;=\;
    x_1 x_2 \ldots x_n \\ \\ OR(x_1, x_2, \ldots, x_n) &\;=\; x_1 + x_2 + \ldots +
    x_n \end{align} $$
- en: '*Sum-of-products representations.* One of the fundamental results of Boolean
    algebra is that every boolean function can be represented with an expression that
    uses `*AND*`, `*OR*`, and `*NOT*` operators and no others. For example, consider
    the following truth table:'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*积和表示法。* 布尔代数的一个基本结果是，每个布尔函数都可以用一个使用`*AND*`、`*OR*`和`*NOT*`运算符而没有其他运算符的表达式来表示。例如，考虑以下真值表：'
- en: '![Truth-table proof of the sum-of-products representation of MAJ(x, y, z)](../Images/18a8739fd7021c86f5b52e0e5a466347.png)'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![多数函数MAJ(x, y, z)的积和表示法的真值表证明](../Images/18a8739fd7021c86f5b52e0e5a466347.png)'
- en: 'Since their entries are equal for every value of the variables, the two columns
    highlighted in blue represent a proof of the following equation:'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于这两列对于变量的每个值都相等，所以蓝色突出显示的两列代表以下等式的证明：
- en: $$\quad\quad\quad\quad\quad\quad MAJ(x, y, z) = x'yz + xy'z + xyz' + xyz$$
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $$\quad\quad\quad\quad\quad\quad MAJ(x, y, z) = x'yz + xy'z + xyz' + xyz$$
- en: 'We can derive such an expression for any boolean function from its truth table:
    For each of the rows in the truth table in which the function value is 1, we create
    a term that is 1 if the input variables have the values on that row and 0 otherwise.
    Each term is the product of each input variable (if its corresponding entry on
    the row in question is 1) or its negation (if the entry is 0). The sum of all
    of these terms gives back the function.'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们可以从布尔函数的真值表中推导出这样的表达式：对于真值表中函数值为1的每一行，我们创建一个项，如果输入变量在该行上具有相应的值，则该项为1，否则为0。每个项是每个输入变量的乘积（如果该行上的对应条目为1）或其否定（如果条目为0）。所有这些项的和给出了函数。
- en: 'The boolean expression that we construct is known as the *sum-of-products representation*
    or the *disjunctive normal form* of the function. As another example, here is
    the table for the odd parity function:'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们构建的布尔表达式称为函数的*积和表示法*或*合取范式*。作为另一个例子，这是奇偶函数的表格：
- en: '![Truth-table proof of the sum-of-products representation of ODD(x, y, z)](../Images/82d2f01ff284285c2eb8719757cdc0e9.png)'
  id: totrans-36
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![奇偶函数ODD(x, y, z)的积和表示法的真值表证明](../Images/82d2f01ff284285c2eb8719757cdc0e9.png)'
