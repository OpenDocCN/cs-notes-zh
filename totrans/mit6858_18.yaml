- en: Tor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Note:** These lecture notes were slightly modified from the ones posted on
    the 6.858 [course website](http://css.csail.mit.edu/6.858/2014/schedule.html)
    from 2014.'
  prefs: []
  type: TYPE_NORMAL
- en: What's the goal of the paper (or Tor)?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Anonymity for clients, which want to connect to servers on the internet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anonymity for servers, which want to service requests from users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is anonymity?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adversary cannot tell which users are communicating with which servers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adversary (most likely) knows that users, servers are communicating via Tor.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: That is, Tor not designed to prevent adversary from finding Tor users.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How to achieve anonymity?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Must encrypt traffic to/from the person that wants to be anonymous.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, adversary looks at packets and figures out what's going on.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'But encryption is not enough: could still trace where encrypted packets went.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mix one user's traffic with traffic from other users (or "cover traffic").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anonymity for one user requires having many other users like the first one.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If all other users just run BitTorrent, then Wikipedia user is easy to spot.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If all other users use Firefox, then a Chrome user would be easy to spot.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '...'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adversary would not be able to tell which user initiated what connections.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The mixing component must change the packets (e.g., encrypt/decrypt).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise, can look for where the exact same packet shows up later.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, approach: relay traffic via intermediary that encrypts/decrypts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why do we need more than one node?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Scalability: handle more traffic than a single node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Compromise: attacker learns info about direct clients of compromised node.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With many indep. nodes, this affects only a small fraction of traffic.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: With onion routing, attacker must compromise all nodes in the chain.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Traffic analysis: attacker can correlate incoming / outgoing traffic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can look at timing between packets, or volume of packets.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Chaining makes timing/volume analysis attack more difficult to mount.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can attacker still succeed?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yes, if they observe or compromise enough nodes.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For instance, may suffice to observe first and last node.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacker can also inject timing info (by delaying packets) to analyze.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Main idea: onion routing'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mesh of onion routers (ORs) in the network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Assumption: client knows public keys of all ORs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client picks some path through this network.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Naive strawman of onion routing (not quite Tor):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client encrypts message in public key of each OR in path in turn.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Send message to first OR in path, which decrypts & relays, and so on.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '"Exit node" (last OR in path) sends the data out into the real network.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why is this a good design?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each OR knows previous & next hop, not ultimate source or destination.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: With two ORs, compromising a single OR does not break anonymity.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: At what level should we relay things?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Could do any level -- IP packets, TCP connections, application-level (HTTP)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the advantage / disadvantage?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Lower-level (IP): more general, fewer app. changes, works with more apps.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Higher-level (TCP, HTTP): more efficient (overhead for a single TCP frame,
    rather than overhead for multiple IP frames that store a single TCP frame), more
    anonymous.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What does Tor do?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: TCP-level relaying, using SOCKS (intercepts libc calls).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples of efficiency: no need for TCP flow-control, Tor does re-xmit'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples of lost generality: UDP doesn''t work, can''t traceroute, ..'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How does DNS work with Tor, if no UDP support?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: SOCKS can capture the destination's hostname, not just IP address
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Exit node performs DNS lookup, establishes TCP connection
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Examples of anonymity that's lost at lower layers?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we did IP, would leak lots of TCP info (seq#, timestamp)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If we did TCP, would leak all kinds of HTTP headers and cookies
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If we did HTTP, can violate anonymity via Javascript, Flash, ..
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Lots of identifiable features in Javascript environment.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Browser version, history sniffing, local network addrs/servers..
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '"Protocol normalization": fix all degrees of freedom in higher protocol.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hard to do in practice; app-specific proxies are useful (e.g., Privoxy).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Demo of browser "identification": https://panopticlick.eff.org/'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tor design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Mesh of ORs: every OR connected via SSL/TLS to every other OR.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't need CA-signed SSL/TLS certs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tor has its own public key checking plan using directory servers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'ORs mostly run by volunteers: e.g., MIT runs several.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: End-users run an onion proxy (OP) that implements SOCKS.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'OR has two public keys: identity key and onion key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Identity key registered with directory, signs OR state.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Onion key used by OPs to connect to ORs, build circuits.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Client downloads list of ORs from directory.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Chooses a chain of ORs to form circuit, contacts each OR in turn.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Clients building circuits is expensive. - Why do it this way?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Any single server might be compromised, can't trust it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Unavoidable to trust the client machine, however.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why do we need an onion key in addition to an identity key?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Might be able to protect identity key from long-term compromises.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each OR uses identity key to sign its current onion key.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why does Tor need a directory?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Someone needs to approve ORs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Otherwise attacker can create many ORs, monitor traffic.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Does having a directory compromise anonymity?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: No, don't need to query it online.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What if a directory is compromised?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Clients require majority of directories to agree.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What if many directories are compromised?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacker can inject many ORs, monitor traffic.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What if directories are out-of-sync?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacker may narrow down user's identity based on dir info.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: User that saw one set of directory messages will use certain ORs.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Terminology: circuits and streams.'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Circuit: a path through a list of ORs that a client builds up.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Circuits exist for some period of time (perhaps a few minutes).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: New circuits opened periodically to foil attacks.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Stream is effectively a TCP connection.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many streams run over the same circuit (each with separate stream ID).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Streams are an important optimization: no need to rebuild circuit.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why does Tor need circuits?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What goes wrong if we have long-lived circuits?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adversary may correlate multiple streams in a single circuit.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tie a single user's connections to different sites, break anonymity.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tor circuits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Circuit is a sequence of ORs, along with shared (symmetric AES) keys.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ORs `c_1, c_2, .., c_n`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Keys `k_1, k_2, .., k_n`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Cell format:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+---------+---------------+-----------+`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`| Circuit | Control/Relay | - DATA |`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+---------+---------------+-----------+`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2 bytes + 1 byte + 509 bytes`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Think of the "Circuit" and "Control/Relay" fields as link-layer headers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Circuit IDs are per-link (between pairs of ORs).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Used to multiplex many circuits on the same TLS connection between ORs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Control messages are "link-local": sent only to an immediate neighbor.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Relay messages are "end-to-end": relayed along the circuit.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why is all traffic in fixed-size cells?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Makes traffic analysis harder.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What are control commands?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'padding: keepalive or link padding.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'create/created/destroy: creating and destroying circuits.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What are relay commands (what's in the DATA)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the relay packet is destined to the current node:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+----------+--------+-----+-----+-----------+`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`| StreamID | Digest | Len | CMD | RelayData |`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+----------+--------+-----+-----+-----------+`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`2 bytes + 6 bytes+ 2 + 1 + 498 bytes`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the relay packet is destined for another node:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+-------------------------------------------+`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`| Encrypted, opaque data + + + + + |`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+-------------------------------------------+`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`+ + + + 509 bytes`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: CMD field for TCP data is "relay data".
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other values like "relay begin", .. used to set up streams.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does the OP send data via circuit?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Compose relay packet as above (not encrypted yet).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compute a valid checksum (digest).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Digest is based on the target OR that should decrypt packet.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hash is taken over some function of key + all msgs exchanged with that OR.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Prevents replay attacks and active attacks
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: First 2 bytes of digest are zeroes, other 4 bytes come from the hash.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Encrypt with `AES(k_n)`, then `AES(k_{n-1}), .., AES(k_1).`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Send encrypted cell to the first OR (`c_1`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: (Effectively reverse process for OP receiving data via circuit.)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What does an OR do with relay packets?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If it's coming from OP's direction, decrypt and forward away from OP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If it's coming not from OP's direction, encrypt and forward towards OP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does an OR know if a relay packet is destined to it or not?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Verify checksum: if matches, most likely meant for the current OR.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Optimization: first 2 bytes of digest should be zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the first two bytes are non-zero, can skip hashing: not our packet.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If checksum does not match, not meant for this OR, keep relaying.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Nice properties:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Packet size independent of path length.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Only the last OR knows the destination.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How to establish a new stream?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OP sends a "relay begin" via circuit. - Contains target hostname, port.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who picks stream ID? - OP can choose arbitrary stream ID in its circuit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is the "leaky pipe" topology?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OP can send relay messages to any OR along its circuit (not just the last OR).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can build stream (i.e., TCP connection) via any OR, to foil traffic analysis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Initializing circuits
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: OP picks the sequence of ORs to use for its circuit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why have the OP do this? - Resistance to other ORs "diverting" the circuit.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Connect to first OR, issue "create" operation to create circuit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create includes a DH key-exchange message.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Created response includes DH key-exchange reply.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Key exchange protocol:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[ OP, OR agree on prime p, generator g ]'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OP chooses random x.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OP sends `E_{PK_OR}(g^x)`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OR chooses random y.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OR computes `K=g^xy`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OR replies with `g^y, H(K || "handshake")`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OP computes `K=g^xy`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How do we authenticate the parties here?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First DH message encrypted with OR's onion key.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hash of key in DH response proves to client that correct OR decrypted msg.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Server does not authenticate client -- anonymity!
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Forward secrecy: what? how?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Key freshness: why? how?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Who chooses the circuit ID?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The client end of the TLS connection (not the overall circuit's OP).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each circuit has a different circuit ID for each link it traverses.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What's in the DATA for Control packets?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Control operations (create, destroy) or responses (e.g. created).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Arguments (e.g., DH key-exchange data).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For each subsequent OR, OP sends a "relay extend" message via circuit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Include the same DH key-exchange message in the "relay extend" cell.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of circuit, "relay extend" transforms into "create".
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Client ends up with shared (symmetric AES) key for each OR in circuit.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why does Tor have separate control cells vs relay cells?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ensures cells are always fixed size.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Last OR in the old circuit needs to know the new OR & circuit IDs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What state does each OR keep for each circuit that passes through it?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Circuit ID and neighbor OR for two directions in the circuit (to/from OP).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Shared key with OP for this circuit and this OR.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SHA-1 state for each circuit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can we avoid storing all of this state in the network?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Not without a variable-length path descriptor in each cell.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exit node would likewise need a path descriptor to know how to send back.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Intermediate nodes would need to perform public-key crypto (expensive).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why does Tor need exit policies?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Preventing abuse (e.g., anonymously sending spam).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exit policies similar to firewall rules (e.g., cannot connect to port 25).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each exit node checks the exit policy when new connection opened.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why publish exit policy in directory, along with other node info?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not used for enforcement.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: OP needs to know what exit nodes are likely to work.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What if Tor didn't do integrity checking?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Need integrity to prevent a tagging attack.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attacker compromises internal node, corrupts data packets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Corrupted packets will eventually get sent out, can watch where they go.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does Tor prevent replays?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each checksum is actually checksum of all previous cells between OP & OR.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checksum for same data sent again would be different.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Works well because underlying transport is reliable (SSL/TLS over TCP).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Anonymous services
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Hidden services named by public keys (pseudo-DNS name "publickey.onion").
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why the split between introduction and rendezvous point?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid placing traffic load on introduction points.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid introduction point transferring known-illegal data.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Split prevents both problems.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bob (service) has an introduction point (IP).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Alice chooses a rendezvous point (RP), tells Bob's IP about RP.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction point does not relay data.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Rendezvous point doesn't know what data it's relaying
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why does Bob connect back to Alice?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Admission control, spread load over many rendezvous points.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the rendezvous cookie? - Lets Bob prove to Alice's RP that it's Bob.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the authorization cookie?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Something that might compel Bob to reply, when he otherwise wouldn't.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Maybe a secret word most people don't know.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Limits DoS attacks on Bob's server (can just send many cookies).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stored in hostname: cookie.pubkey.onion.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'End state: two circuits to the RP, with a stream connected between them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: RP takes relay cells from one circuit's stream and
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: sends them on a stream in the other circuit.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Bridged data is encrypted using key shared between Alice & Bob (DH).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Each can control their own level of anonymity.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Neither knows the full path of the other circuit.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Potential pitfalls when using Tor?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Application-level leaks (Javascript, HTTP headers, DNS, ..)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use an app-level proxy (e.g., Privoxy strips many HTTP headers).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fingerprinting based on Tor client behavior (how often new circuit opened).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Timing/volume analysis (partial defense is to run your own Tor OR).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Fingerprinting web sites: number of requests & file sizes of popular sites.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Quantization from fixed-size cells helps a bit.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Malicious ORs: join network, advertise lots of bandwidth, open exit policy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Benefits / risks of running an OR?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Benefits:**'
  prefs: []
  type: TYPE_NORMAL
- en: more anonymity
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Risks:**'
  prefs: []
  type: TYPE_NORMAL
- en: resource use
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: online attacks (DoS, break-ins, ..)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: offline attacks (e.g., machine seized by law enforcement)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How hard is it to block Tor?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Find list of OR IPs from directory, block all traffic to them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to defend against such an attack?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reveal different ORs to different clients?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows for client fingerprinting based on ORs used.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Maintain some unlisted ORs?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Want to use unlisted ORs only as the first hop, to avoid fingerprinting.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tor has notion of "bridge" node, which is an unlisted OR.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How to find these unlisted "bridge" ORs?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Want legitimate user to find them, but not let adversary enumerate them.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Approach taken by Tor: special bridge directory.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reveal 3 bridges to each IP (via HTTP) or email addr (via email).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Reveal new bridges to same client address only after 24 hours.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can rate-limit by IP, find attempts to enumerate bridge database, etc.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For email, easier for adversary to create fake identities (email addrs).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tor trusts 3 mail providers to rate-limit signup (gmail, yahoo, mit).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Would you use Tor? What applications is it good for?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Might be too slow to use for all traffic (high latency).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: But unfortunately that means only sensitive traffic would go via Tor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plausible attacks exist, so not great against very powerful adversaries.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Maybe a good way to avoid denial-of-service attacks (i.e., offload to Tor).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allegedly, Google used Tor to check if servers special-case Google's IPs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How active is Tor?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Much more active use now than what the paper describes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ~3000 public ORs, ~1000 exit nodes, ~1000 bridge nodes, ~2GB/s OR bandwidth.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 8-9 (?) directory servers, ~1600 directory mirrors.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Hard problems: distributing entry point IPs, approving ORs, ..'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Some BitTorrent use, but not overwhelming: mostly, too slow for large files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Alternative approach: DC-nets ("Dining cryptographer networks").'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: N participants, but suppose there's only one sender (not known who).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Every pair of participants shares a secret bit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To transmit a "0" bit, send XOR of all secrets. - Otherwise, send the opposite.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'All transmissions are public: to recover bit, XOR everyone''s transmissions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can build up to send multiple bits, use a collision-detection protocol, etc.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Costly in terms of performance, but provides much stronger security than Tor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the Dissent OSDI 2012 paper for more details on a DCnet-based system.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'References:'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '[Tor Project Metrics](https://metrics.torproject.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Tor Consensus Health](https://consensus-health.torproject.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Challenges in deploying low-latency anonymity](https://svn.torproject.org/svn/projects/design-paper/challenges.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Design of a blocking-resistant anonymity system](https://svn.torproject.org/svn/projects/design-paper/blocking.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dining cryptographers problem](http://en.wikipedia.org/wiki/Dining_cryptographers_problem)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Dissent in Numbers: Making strong anonymity scale](http://dedis.cs.yale.edu/2010/anon/papers/osdi12.pdf)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
