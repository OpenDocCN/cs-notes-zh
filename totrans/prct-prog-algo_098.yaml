- en: 3.3   Balanced Search Trees
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.3   平衡搜索树
- en: 原文：[https://algs4.cs.princeton.edu/33balanced](https://algs4.cs.princeton.edu/33balanced)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://algs4.cs.princeton.edu/33balanced](https://algs4.cs.princeton.edu/33balanced)
- en: This section under major construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节正在大力施工中。
- en: We introduce in this section a type of binary search tree where costs are *guaranteed*
    to be logarithmic. Our trees have near-perfect balance, where the height is guaranteed
    to be no larger than 2 lg N.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本节介绍了一种类型的二叉搜索树，其中成本*保证*为对数。我们的树几乎完美平衡，高度保证不会大于2 lg N。
- en: 2-3 search trees.
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2-3搜索树。
- en: The primary step to get the flexibility that we need to guarantee balance in
    search trees is to allow the nodes in our trees to hold more than one key.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 获得我们需要保证搜索树平衡的灵活性的主要步骤是允许我们树中的节点保存多个键。
- en: Definition.
  id: totrans-6
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义。
- en: 'A *2-3 search tree* is a tree that either is empty or:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 一个*2-3搜索树*是一棵树，要么为空，要么：
- en: A *2-node*, with one key (and associated value) and two links, a left link to
    a 2-3 search tree with smaller keys, and a right link to a 2-3 search tree with
    larger keys
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个*2节点*，带有一个键（和相关值）和两个链接，一个指向具有较小键的2-3搜索树的左链接，一个指向具有较大键的2-3搜索树的右链接
- en: A *3-node*, with two keys (and associated values) and three links, a left link
    to a 2-3 search tree with smaller keys, a middle link to a 2-3 search tree with
    keys between the node's keys and a right link to a 2-3 search tree with larger
    keys.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个*3节点*，带有两个键（和相关值）和三个链接，一个指向具有较小键的2-3搜索树的左链接，一个指向具有节点键之间的键的2-3搜索树的中间链接，一个指向具有较大键的2-3搜索树的右链接。
- en: '![Anatomy of a 2-3 tree](../Images/4c87a5b5a0aafd3e74c1a66fda6e58a9.png)A *perfectly
    balanced* 2-3 search tree (or 2-3 tree for short) is one whose null links are
    all the same distance from the root.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![2-3树的解剖图](../Images/4c87a5b5a0aafd3e74c1a66fda6e58a9.png)一个*完美平衡*的2-3搜索树（或简称2-3树）是指其空链接与根之间的距离都相同。'
- en: '*Search.* To determine whether a key is in a 2-3 tree, we compare it against
    the keys at the root: If it is equal to any of them, we have a search hit; otherwise,
    we follow the link from the root to the subtree corresponding to the interval
    of key values that could contain the search key, and then recursively search in
    that subtree.![Search in a 2-3 tree](../Images/a25ea4e21caa6880e1990057ccb34501.png)'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*搜索。* 要确定2-3树中是否存在一个键，我们将其与根处的键进行比较：如果它等于其中任何一个键，则有一个搜索命中；否则，我们跟随从根到对应于可能包含搜索键的键值区间的子树的链接，然后在该子树中递归搜索。![在2-3树中搜索](../Images/a25ea4e21caa6880e1990057ccb34501.png)'
- en: '*Insert into a 2-node.* To insert a new node in a 2-3 tree, we might do an
    unsuccessful search and then hook on the node at the bottom, as we did with BSTs,
    but the new tree would not remain perfectly balanced. It is easy to maintain perfect
    balance if the node at which the search terminates is a 2-node: We just replace
    the node with a 3-node containing its key and the new key to be inserted.![Insert
    into a 2-node in a 2-3 tree](../Images/655adc02e652e63d273f83b2c586cbb0.png)'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*插入到2节点中。* 要在2-3树中插入新节点，我们可能会进行一次不成功的搜索，然后挂接到底部的节点，就像我们在二叉搜索树中所做的那样，但新树不会保持完美平衡。如果搜索终止的节点是一个2节点，要保持完美平衡很容易：我们只需用包含其键和要插入的新键的3节点替换该节点。![在2-3树中插入到2节点中](../Images/655adc02e652e63d273f83b2c586cbb0.png)'
- en: '*Insert into a tree consisting of a single 3-node.* Suppose that we want to
    insert into a tiny 2-3 tree consisting of just a single 3-node. Such a tree has
    two keys, but no room for a new key in its one node. To be able to perform the
    insertion, we temporarily put the new key into a *4-node*, a natural extension
    of our node type that has three keys and four links. Creating the 4-node is convenient
    because it is easy to convert it into a 2-3 tree made up of three 2-nodes, one
    with the middle key (at the root), one with the smallest of the three keys (pointed
    to by the left link of the root), and one with the largest of the three keys (pointed
    to by the right link of the root).![Insert into a 2-3 tree consisting of a single
    3-node](../Images/10fdc3a39f2102389e53d92bc7b13185.png)'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*插入到由单个3节点组成的树中。* 假设我们想要插入到一个仅由单个3节点组成的微小2-3树中。这样的树有两个键，但在其一个节点中没有新键的空间。为了能够执行插入操作，我们暂时将新键放入一个*4节点*中，这是我们节点类型的自然扩展，具有三个键和四个链接。创建4节点很方便，因为很容易将其转换为由三个2节点组成的2-3树，其中一个带有中间键（在根处），一个带有三个键中最小的键（由根的左链接指向），一个带有三个键中最大的键（由根的右链接指向）。![插入到由单个3节点组成的2-3树中](../Images/10fdc3a39f2102389e53d92bc7b13185.png)'
- en: '*Insert into a 3-node whose parent is a 2-node.* Suppose that the search ends
    at a 3-node at the bottom whose parent is a 2-node. In this case, we can still
    make room for the new key while maintaining perfect balance in the tree, by making
    a temporary 4-node as just described, then splitting the 4-node as just described,
    but then, instead of creating a new node to hold the middle key, moving the middle
    key to the nodes parent.![Insert in a 2-3 tree into a 3-node whose parent is a
    2-node](../Images/32c20000d4f6fa7671d800e8bd1fb11d.png)'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*插入到父节点为2节点的3节点中。* 假设搜索在底部结束于其父节点为2节点的3节点。在这种情况下，我们仍然可以为新键腾出空间，同时保持树的完美平衡，方法是制作一个临时的4节点，然后按照刚才描述的方式拆分4节点，但是，而不是创建一个新节点来保存中间键，将中间键移动到节点的父节点。![在父节点为2节点的3节点中插入到2-3树中](../Images/32c20000d4f6fa7671d800e8bd1fb11d.png)'
- en: '*Insert into a 3-node whose parent is a 3-node.* Now suppose that the search
    ends at a node whose parent is a 3-node. Again, we make a temporary 4-node as
    just described, then split it and insert its middle key into the parent. The parent
    was a 3-node, so we replace it with a temporary new 4-node containing the middle
    key from the 4-node split. Then, we perform precisely the same transformation
    on that node. That is we split the new 4-node and insert its middle key into its
    parent. Extending to the general case is clear: we continue up the tree, splitting
    4-nodes and inserting their middle keys in their parents until reaching a 2-node,
    which we replace with a 3-node that does not to be further split, or until reaching
    a 3-node at the root.![Insert in a 2-3 tree into a 3-node whose parent is a 3-node](../Images/c6fd3159cd085d966fcd6093f90c7d8a.png)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*插入到父节点为3节点的3节点中。* 现在假设搜索结束于父节点为3节点的节点。同样，我们制作一个临时的4节点，然后将其拆分并将其中间键插入父节点。父节点是3节点，所以我们用刚刚拆分的临时新4节点替换它，其中包含来自4节点拆分的中间键。然后，我们对该节点执行完全相同的转换。也就是说，我们拆分新的4节点并将其中间键插入其父节点。扩展到一般情况很明显：我们沿着树向上移动，拆分4节点并将它们的中间键插入它们的父节点，直到达到一个2节点，我们用一个不需要进一步拆分的3节点替换它，或者直到达到根节点处的3节点。![在父节点为3节点的2-3树中插入3节点](../Images/c6fd3159cd085d966fcd6093f90c7d8a.png)'
- en: '*Splitting the root.* If we have 3-nodes along the whole path from the insertion
    point to the root, we end up with a temporary 4-node at the root. In this case
    we split the temporary 4-node into three 2-nodes.![Splitting the root in a 2-3
    tree](../Images/1b3670bdf954de9f4c515ca14d1f5475.png)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*拆分根节点。* 如果从插入点到根节点沿着整个路径都是3节点，我们最终会在根节点处得到一个临时的4节点。在这种情况下，我们将临时的4节点拆分为三个2节点。![在2-3树中拆分根节点](../Images/1b3670bdf954de9f4c515ca14d1f5475.png)'
- en: '*Local transformations.* The basis of the 2-3 tree insertion algorithm is that
    all of these transformations are purely *local*: No part of the 2-3 tree needs
    to be examined or modified other than the specified nodes and links. The number
    of links changed for each transformation is bounded by a small constant. Each
    of the transformations passes up one of the keys from a 4-node to that nodes parent
    in the tree, and then restructures links accordingly, without touching any other
    part of the tree.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*局部转换。* 2-3树插入算法的基础是所有这些转换都是纯粹*局部*的：除了指定的节点和链接之外，不需要检查或修改2-3树的任何部分。每次转换更改的链接数量受到小常数的限制。这些转换中的每一个都将一个键从4节点传递到树中的父节点，然后相应地重构链接，而不触及树的任何其他部分。'
- en: '*Global properties.* These local transformations preserve the *global* properties
    that the tree is ordered and balanced: the number of links on the path from the
    root to any null link is the same.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*全局属性。* 这些局部转换保持了树是有序和平衡的*全局*属性：从根到任何空链接的路径上的链接数量是相同的。'
- en: Proposition.
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。
- en: Search and insert operations in a 2-3 tree with N keys are guaranteed to visit
    at most lg N nodes.![Typical 2-3 tree built from random keys](../Images/f9969ca88b6c715bb7bd52311340bbb1.png)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有N个键的2-3树中，搜索和插入操作保证最多访问lg N个节点。![从随机键构建的典型2-3树](../Images/f9969ca88b6c715bb7bd52311340bbb1.png)
- en: However, we are only part of the way to an implementation. Although it would
    be possible to write code that performs transformations on distinct data types
    representing 2- and 3-nodes, most of the tasks that we have described are inconvenient
    to implement in this direct representation.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们只完成了实现的一部分。虽然可以编写代码来对表示2和3节点的不同数据类型执行转换，但我们描述的大部分任务在这种直接表示中实现起来很不方便。
- en: Red-black BSTs.
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 红黑BST。
- en: The insertion algorithm for 2-3 trees just described is not difficult to understand.
    We consider a simple representation known as a *red-black BST* that leads to a
    natural implementation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 刚刚描述的2-3树插入算法并不难理解。我们考虑一种简单的表示法，称为*红黑BST*，可以自然地实现。
- en: '*Encoding 3-nodes.* The basic idea behind red-black BSTs is to encode 2-3 trees
    by starting with standard BSTs (which are made up of 2-nodes) and adding extra
    information to encode 3-nodes. We think of the links as being of two different
    types: *red* links, which bind together two 2-nodes to represent 3-nodes, and
    *black* links, which bind together the 2-3 tree. Specifically, we represent 3-nodes
    as two 2-nodes connected by a single red link that leans left. We refer to BSTs
    that represent 2-3 trees in this way as red-black BSTs.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*编码3节点。* 红黑BST背后的基本思想是通过从标准BST（由2节点组成）开始，并添加额外信息来编码3节点，从而对2-3树进行编码。我们认为链接有两种不同类型：*红色*链接，将两个2节点绑在一起表示3节点，以及*黑色*链接，将2-3树绑在一起。具体来说，我们将3节点表示为由单个向左倾斜的红色链接连接的两个2节点。我们将以这种方式表示2-3树的BST称为红黑BST。'
- en: One advantage of using such a representation is that it allows us to use our
    `get()` code for standard BST search without modification.
  id: totrans-25
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用这种表示的一个优点是，它允许我们在不修改的情况下使用我们的`get()`代码进行标准BST搜索。
- en: '![Encoding a 3-node in a red-black BST](../Images/45e16a0df1efe8f9ec7dfc38de24e57a.png)'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![在红黑BST中编码3节点](../Images/45e16a0df1efe8f9ec7dfc38de24e57a.png)'
- en: '*A 1-1 correspondence.* Given any 2-3 tree, we can immediately derive a corresponding
    red-black BST, just by converting each node as specified. Conversely, if we draw
    the red links horizontally in a red-black BST, all of the null links are the same
    distance from the root, and if we then collapse together the nodes connected by
    red links, the result is a 2-3 tree.![1-1 correspondence between left-leaning'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*1-1对应关系。* 给定任何2-3树，我们可以立即推导出相应的红黑BST，只需按照指定的方式转换每个节点即可。反之，如果我们在红黑BST中水平绘制红色链接，所有空链接距离根节点的距离相同，然后将由红色链接连接的节点合并在一起，结果就是一个2-3树。![左倾红黑BST之间的1-1对应关系](../Images/f9969ca88b6c715bb7bd52311340bbb1.png)'
- en: red-black BSTs and 2-3 trees](../Images/2a82ce5ba078c8217adc45ad5e5d7a47.png)
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 红黑BST和2-3树](../Images/2a82ce5ba078c8217adc45ad5e5d7a47.png)
- en: '*Color representation.* Since each node is pointed to by precisely one link
    (from its parent), we encode the color of links in *nodes*, by adding a `boolean`
    instance variable color to our `Node` data type, which is `true` if the link from
    the parent is red and `false` if it is black. By convention, null links are black.![Color
    representation in a red-black BST](../Images/e50c97bf33814fcd646ff42cd0356c8b.png)'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*颜色表示。* 由于每个节点只被一个链接（从其父节点）指向，我们通过在*节点*中添加一个`boolean`实例变量颜色来编码链接的颜色，如果来自父节点的链接是红色，则为`true`，如果是黑色，则为`false`。按照惯例，空链接为黑色。![红黑BST中的颜色表示](../Images/e50c97bf33814fcd646ff42cd0356c8b.png)'
- en: '*Rotations.* The implementation that we will consider might allow right-leaning
    red links or two red-links in a row during an operation, but it always corrects
    these conditions before completion, through judicious use of an operation called
    *rotation* that switches orientation of red links. First, suppose that we have
    a right-leaning red link that needs to be rotated to lean to the left. This operation
    is called a *left rotation*. Implementing a *right rotation* that converts a left-leaning
    red link to a right-leaning one amounts to the same code, with left and right
    interchanged.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*旋转。* 我们将考虑的实现可能允许右倾斜的红链接或操作中连续两个红链接，但它总是在完成之前纠正这些条件，通过巧妙使用称为*旋转*的操作来切换红链接的方向。首先，假设我们有一个需要旋转以向左倾斜的右倾斜红链接。这个操作称为*左旋转*。实现将左倾斜的红链接转换为右倾斜的*右旋转*操作等同于相同的代码，左右互换。'
- en: '*Flipping colors.* The implementation that we will consider might also allow
    a black parent to have two red children. The *color flip* operation flips the
    colors of the the two red children to black and the color of the black parent
    to red.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*翻转颜色。* 我们将考虑的实现也可能允许黑色父节点有两个红色子节点。*颜色翻转*操作将两个红色子节点的颜色翻转为黑色，并将黑色父节点的颜色翻转为红色。'
- en: '| ![Left rotation in a red-black BST](../Images/73086b08fa9c050033f6721af16e90f6.png)
    |                | ![Right rotation in a red-black BST](../Images/dca0c97ce61f89554e4fa1f694f7410e.png)
                   | ![Color flip in a red-black BST](../Images/c1ae612c38a1a055d7eb52157ea8c8fd.png)
    |'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| ![红黑BST中的左旋转](../Images/73086b08fa9c050033f6721af16e90f6.png) |          
         | ![红黑BST中的右旋转](../Images/dca0c97ce61f89554e4fa1f694f7410e.png)          
         | ![红黑BST中的颜色翻转](../Images/c1ae612c38a1a055d7eb52157ea8c8fd.png) |'
- en: '*Insert into a single 2-node.*'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*插入到单个2节点中。*'
- en: '*Insert into a 2-node at the bottom.*'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在底部插入到2节点。*'
- en: '*Insert into a tree with two keys (in a 3-node).*'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在具有两个键的树中（在3节点中）插入。*'
- en: '*Keeping the root black.*'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*保持根节点为黑色。*'
- en: '*Insert into a 3-node at the bottom.*'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在底部插入到3节点。*'
- en: '*Passing a red link up the tree.*'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将红链接向上传递树。*'
- en: Implementation.
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现。
- en: Program [RedBlackBST.java](RedBlackBST.java.html) implements a left-leaning
    red-black BST. Program [RedBlackLiteBST.java](RedBlackLiteBST.java.html) is a
    simpler version that only implement put, get, and contains.![Red-black BST construction](../Images/8a7636b6ad1e0804f9d5e4920ffd7096.png)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[RedBlackBST.java](RedBlackBST.java.html)实现了一个左倾斜的红黑BST。程序[RedBlackLiteBST.java](RedBlackLiteBST.java.html)是一个更简单的版本，只实现了put、get和contains。![红黑BST构造](../Images/8a7636b6ad1e0804f9d5e4920ffd7096.png)
- en: Deletion.
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 删除。
- en: Proposition.
  id: totrans-42
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。
- en: The height of a red-blackBST with N nodes is no more than 2 lg N.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 具有N个节点的红黑BST的高度不超过2 lg N。
- en: Proposition.
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。
- en: 'In a red-black BST, the following operations take logarithmic time in the worst
    case: search, insertion, finding the minimum, finding the maximum, floor, ceiling,
    rank, select, delete the minimum, delete the maximum, delete, and range count.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在红黑BST中，以下操作在最坏情况下需要对数时间：搜索、插入、查找最小值、查找最大值、floor、ceiling、rank、select、删除最小值、删除最大值、删除和范围计数。
- en: Property.
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 属性。
- en: The average length of a path from the root to a node in a red-black BST with
    N nodes is ~1.00 lg N.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 具有N个节点的红黑BST中从根到节点的平均路径长度约为~1.00 lg N。
- en: Visualization.
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可视化。
- en: The following visualization shows 255 keys inserted into a red-black BST in
    random order.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 以下可视化展示了255个键按随机顺序插入到红黑BST中。
- en: Exercises
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Which of the follow are legal balanced red-black BSTs?![Legal balanced red-black
    BSTs](../Images/8b9cfd409879fb6da9c1c039a6c4e77c.png)
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 哪些是合法的平衡红黑BST？![合法的平衡红黑BST](../Images/8b9cfd409879fb6da9c1c039a6c4e77c.png)
- en: '*Solution.* (iii) and (iv) only. (i) is not balanced, (ii) is not in symmetric
    order or balanced.'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* (iii) 和 (iv)。 (i) 不平衡，(ii) 不是对称顺序或平衡的。'
- en: 'True or false: If you insert keys in increasing order into a red-black BST,
    the tree height is monotonically increasing.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假：如果您将键按递增顺序插入到红黑BST中，则树的高度是单调递增的。
- en: '*Solution.* True, see the next question.'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 真的，请看下一个问题。'
- en: Draw the red-black BST that results when you insert letters `A` through `K`
    in order into an initially empty red-black BST. Then, describe what happens in
    general when red-black BSTs are built by inserting keys in ascending order.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述当按升序插入键构建红黑BST时，插入字母`A`到`K`时产生的红黑BST。然后，描述当按升序插入键构建红黑BST时通常会发生什么。
- en: '*Solution.* The following visualization shows 255 keys inserted into a red-black
    BST in ascending order.'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 以下可视化展示了255个键按升序插入到红黑BST中。'
- en: Answer the previous two questions for the case when the keys are inserted in
    descending order.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 回答前两个问题，当键按降序插入时的情况。
- en: '*Solution.* False. The following visualization shows 255 keys inserted into
    a red-black BST in descending order.'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 错误。以下可视化展示了255个键按降序插入到红黑BST中。'
- en: Create a test client [TestRedBlackBST.java](TestRedBlackBST.java.html).
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个测试客���端[TestRedBlackBST.java](TestRedBlackBST.java.html)。
- en: Creative Problems
  id: totrans-60
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创造性问题
- en: '**Certification.** Add to [RedBlackBST.java](RedBlackBST.java.html) a method
    `is23()` to check that no node is connected to two red links and that there are
    no right-leaning red links. Add a method `isBalanced()` to check that all paths
    from the root to a null link have the same number of black links. Combine these
    methods with `isBST()` to create a method `isRedBlackBST()` that checks that the
    tree is a BST and that it satisfies these two conditions.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**认证.** 在[RedBlackBST.java](RedBlackBST.java.html)中添加一个方法`is23()`，以检查没有节点连接到两个红链接，并且没有右倾斜的红链接。
    添加一个方法`isBalanced()`，以检查从根到空链接的所有路径是否具有相同数量的黑链接。 将这些方法与`isBST()`结合起来创建一个方法`isRedBlackBST()`，用于检查树是否是BST，并且满足这两个条件。'
- en: '**Fundamental theorem of rotations.** Show that any BST can be transformed
    into any other BST on the same set of keys by a sequence of left and right rotations.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**旋转的基本定理.** 证明任何BST都可以通过一系列左旋和右旋转变换为具有相同键集的任何其他BST。'
- en: '*Solution sketch*: rotate the smallest key in the first BST to the root along
    the leftward spine; then recur with the resulting right subtree until you have
    a tree of height N (with every left link null). Do the same with the second BST.
    Remark: it is unknown whether there exists a polynomial-time algorithm for determining
    the minimum number of rotations needed to transform one BST into the other (even
    though the rotation distance is at most 2N - 6 for BSTs with at least 11 nodes).'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案概述*: 将第一个BST中最小的键旋转到根节点沿着向左的脊柱；然后对结果的右子树进行递归，直到得到高度为N的树（每个左链接都为null）。
    对第二个BST执行相同的操作。 备注：目前尚不清楚是否存在一种多项式时间算法，可以确定将一个BST转换为另一个BST所需的最小旋转次数（即使对于至少有11个节点的BST，旋转距离最多为2N
    - 6）。'
- en: '**Delete the minimum.** Implement the `deleteMin()` operation for [RedBlackBST.java](RedBlackBST.java.html)
    by maintaining the correspondence with the transformations given in the text for
    moving down the left spine of the tree while maintaining the invariant that the
    current node is not a 2-node.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**删除最小值.** 通过保持与文本中给出的向树的左脊柱下移的转换的对应关系，同时保持当前节点不是2节点的不变性，为[RedBlackBST.java](RedBlackBST.java.html)实现`deleteMin()`操作。'
- en: '**Delete the maximum.** Implement the `deleteMax()` operation for [RedBlackBST.java](RedBlackBST.java.html).
    Note that the transformations involved differ slightly from those in the previous
    exercise because red links are left-leaning.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**删除最大值.** 为[RedBlackBST.java](RedBlackBST.java.html)实现`deleteMax()`操作。 请注意，涉及的转换与前一个练习中的转换略有不同，因为红链接是向左倾斜的。'
- en: '**Delete.** Implement the `delete()` operation for [RedBlackBST.java](RedBlackBST.java.html),
    combining the methods of the previous two exercises with the `delete()` operation
    for BSTs.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**删除.** 为[RedBlackBST.java](RedBlackBST.java.html)实现`delete()`操作，将前两个练习的方法与BST的`delete()`操作结合起来。'
- en: Web Exercises
  id: totrans-67
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络练习
- en: Given a sorted sequence of keys, describe how to construct a red-black BST that
    contains them in linear time.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定一个排序的键序列，描述如何在线性时间内构建包含这些键的红黑BST。
- en: Suppose that you do a search in a red-black BST that terminates unsuccessfully
    after following 20 links from the root. Fill in the blanks below with the best
    (integer) bounds that you can infer from this fact about any unsuccessful search
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设在红黑BST中进行搜索，在从根节点开始跟踪20个链接后终止，以下划线填写下面关于任何不成功搜索的最佳（整数）界限，您可以从这个事实中推断出来
- en: Must follow at least ______ links from the root
  id: totrans-70
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从根节点至少要遵循 ______ 条链接
- en: Need follow at most _______ links from the root
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从根节点最多需要遵循 _______ 条链接
- en: With 1 bit per node we can represent 2-, 3-, and 4-nodes. How many bits would
    we need to represent 5-, 6-, 7-, and 8-nodes.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用每个节点1位，我们可以表示2、3和4节点。 我们需要多少位来表示5、6、7和8节点。
- en: '**Substring reversing.** Given a string of length N, support the following
    operations: select(i) = get the ith character, and reverse(i, j) = reverse the
    substring from i to j.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**子串反转.** 给定长度为N的字符串，支持以下操作：select(i) = 获取第i个字符，并且reverse(i, j) = 反转从i到j的子串。'
- en: '*Solution sketch.* Maintain the string in a balanced search tree, where each
    node records the subtree count and a reverse bit (that interchanges the role of
    the left and right children if there are an odd number of reverse bits on the
    path from the root to the node). To implement select(i), do a binary search starting
    at the root, using the subtree counts and reverse bits. To implement reverse(i,
    j), split the BST at select(i) and select(j) to form three BSTs, reverse the bit
    of the middle BST, and join them back together using a join operation. Maintain
    the subtree counts and reverse bits when rotating.'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案概述.* 在平衡搜索树中维护字符串，其中每个节点记录子树计数和一个反转位（如果从根到节点的路径上存在奇数个反转位，则交换左右子节点的角色）。
    要实现select(i)，从根节点开始进行二分搜索，使用子树计数和反转位。 要实现reverse(i, j)，在select(i)和select(j)处拆分BST以形成三个BST，反转中间BST的位，并使用连接操作将它们重新组合在一起。
    旋转时维护子树计数和反转位。'
- en: '**Memory of a BST.** What is the memory usage of a BST and RedBlackBST and
    TreeMap?'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**BST的内存.** BST、RedBlackBST和TreeMap的内存使用情况是多少？'
- en: '*Solution.* [MemoryOfBSTs.java](MemoryOfBSTs.java.html).'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* [MemoryOfBSTs.java](MemoryOfBSTs.java.html).'
- en: '**Randomized BST.** Program [RandomizedBST.java](RandomizedBST.java.html) implements
    a randomized BST, including deletion. Expected O(log N) performance per operations.
    Expectation depends only on the randomness in the algorithm; it does not depend
    on the input distribution. Must store subtree count field in each node; generates
    O(log N) random numbers per insert.'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**随机化BST.** 程序[RandomizedBST.java](RandomizedBST.java.html)实现了一个随机化BST，包括删除操作。
    每次操作的预期O(log N)性能。 期望仅取决于算法中的随机性； 它不依赖于输入分布。 必须在每个节点中存储子树计数字段； 每次插入生成O(log N)个随机数。'
- en: '*Proposition.* Tree has same distribution as if the keys were inserted in random
    order.'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*命题.* 树具有与按随机顺序插入键时相同的分布。'
- en: '**Join.** Write a function that takes two randomized BSTs as input and returns
    a third randomized BST which contains the union of the elements in the two BSTs.
    Assume no duplicates.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**连接.** 编写一个函数，该函数以两个随机化BST作为输入，并返回包含两个BST中元素并集的第三个随机化BST。 假设没有重复项。'
- en: '**Splay BST.** Program [SplayBST.java](SplayBST.java.html) implements a [splay
    tree](http://en.wikipedia.org/wiki/Splay_tree).'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**伸展BST。** 程序[SplayBST.java](SplayBST.java.html)实现了一个[伸展树](http://en.wikipedia.org/wiki/Splay_tree)。'
- en: '**Randomized queue.** Implement a [RandomizedQueue.java](RandomizedQueue.java.html)
    so that all operations take logarithmic time in the worst case.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**随机队列。** 实现一个[RandomizedQueue.java](RandomizedQueue.java.html)，使得所有操作在最坏情况下都需要对数时间。'
- en: '**Red-black BST with many updates.** When performing a `put()` with a key that
    is already in a red-black BST, our [RedBlackBST.java](RedBlackBST.java.html) performs
    many unnecessary calls to `isRed()` and `size()`. Optimize the code so that these
    calls are skipped in such situations.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**具有许多更新的红黑色BST。** 当在红黑色BST中执行具有已经存在的键的`put()`时，我们的[RedBlackBST.java](RedBlackBST.java.html)会执行许多不必要的`isRed()`和`size()`调用。优化代码，以便在这种情况下跳过这些调用。'
