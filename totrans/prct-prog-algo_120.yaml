- en: 1\.   Analysis of Algorithms
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1\.   算法分析
- en: 原文：[https://aofa.cs.princeton.edu/10analysis](https://aofa.cs.princeton.edu/10analysis)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://aofa.cs.princeton.edu/10analysis](https://aofa.cs.princeton.edu/10analysis)
- en: This chapter considers the general motivations for algorithmic analysis and
    relationships among various approaches to studying performance characteristics
    of algorithms.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章考虑了算法分析的一般动机以及研究算法性能特征的各种方法之间的关系。
- en: 1.1 Why Analyze an Algorithm?
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.1 为什么要分析算法？
- en: The most straightforward reason for analyzing an algorithm is to discover its
    characteristics in order to evaluate its suitability for various applications
    or compare it with other algorithms for the same application. Moreover, the analysis
    of an algorithm can help us understand it better, and can suggest informed improvements.
    Algorithms tend to become shorter, simpler, and more elegant during the analysis
    process.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 分析算法的最直接原因是为了发现其特性，以便评估其适用性于各种应用程序或将其与同一应用程序的其他算法进行比较。此外，算法分析可以帮助我们更好地理解它，并提出明智的改进意见。在分析过程中，算法往往会变得更短、更简单和更优雅。
- en: 1.2 Computational Complexity.
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.2 计算复杂性。
- en: The branch of theoretical computer science where the goal is to classify algorithms
    according to their efficiency and computational problems according to their inherent
    difficulty is known as *computational complexity*. Paradoxically, such classifications
    are typically not useful for predicting performance or for comparing algorithms
    in practical applications because they focus on order-of-growth worst-case performance.
    In this book, we focus on analyses that *can* be used to predict performance and
    compare algorithms.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 理论计算机科学的一个分支，其目标是根据效率对算法进行分类，根据固有难度对计算问题进行分类，被称为*计算复杂性*。矛盾的是，这种分类通常不适用于预测性能或比较实际应用中的算法，因为它们侧重于增长阶的最坏情况性能。在本书中，我们专注于可以用于预测性能和比较算法的分析。
- en: 1.3 Analysis of Algorithms.
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.3 算法分析。
- en: 'A complete analysis of the running time of an algorithm involves the following
    steps:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 对算法运行时间的完整分析涉及以下步骤：
- en: Implement the algorithm completely.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 完全实现算法。
- en: Determine the time required for each basic operation.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定每个基本操作所需的时间。
- en: Identify unknown quantities that can be used to describe the frequency of execution
    of the basic operations.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定可以用来描述基本操作执行频率的未知量。
- en: Develop a realistic model for the input to the program.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为程序的输入开发一个现实模型。
- en: Analyze the unknown quantities, assuming the modelled input.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分析未知量，假设模拟的输入。
- en: Calculate the total running time by multiplying the time by the frequency for
    each operation, then adding all the products.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将每个操作的时间乘以频率计算总运行时间，然后将所有乘积相加。
- en: Classical algorithm analysis on early computers could result in exact predictions
    of running times. Modern systems and algorithms are much more complex, but modern
    analyses are informed by the idea that exact analysis of this sort could be performed
    *in principle*.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 早期计算机上的经典算法分析可以得出运行时间的精确预测。现代系统和算法要复杂得多，但现代分析受到这样一种思想的启发，即原则上可以执行这种精确分析。
- en: 1.4 Average-Case Analysis.
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.4 平均情况分析。
- en: Elementary probability theory gives a number of different ways to compute the
    average value of a quantity. While they are quite closely related, it will be
    convenient for us to explicitly identify two different approaches to compute the
    mean.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 初等概率论提供了多种计算数量平均值的方法。虽然它们之间密切相关，但对于我们来说，明确地确定两种不同的计算平均值的方法会更方便。
- en: '*Distributional.* Let $\Pi_N$ be the number of possible inputs of size $N$
    and $\Pi_{Nk}$ be the number of inputs of size $N$ that cause the algorithm to
    have cost $k$, so that $\Pi_N=\sum_k\Pi_{Nk}$. Then the probability that the cost
    is $k$ is $\Pi_{Nk}/\Pi_N$ and the expected cost is $${1\over \Pi_N}\sum_k k\Pi_{Nk}.$$
    The analysis depends on "counting." How many inputs are there of size $N$ and
    how many inputs of size $N$ cause the algorithm to have cost $k$? These are the
    steps to compute the probability that the cost is $k$, so this approach is perhaps
    the most direct from elementary probability theory.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*分布式。* 让 $\Pi_N$ 表示大小为 $N$ 的可能输入数量，$\Pi_{Nk}$ 表示导致算法成本为 $k$ 的大小为 $N$ 的输入数量，因此
    $\Pi_N=\sum_k\Pi_{Nk}$。那么成本为 $k$ 的概率是 $\Pi_{Nk}/\Pi_N$，期望成本为 $${1\over \Pi_N}\sum_k
    k\Pi_{Nk}.$$ 分析取决于"计数"。大小为 $N$ 的输入有多少个，大小为 $N$ 的输入导致算法成本为 $k$ 的有多少个？这些是计算成本为 $k$
    的概率的步骤，因此这种方法可能是从初等概率论中最直接的方法。'
- en: '*Cumulative.* Let $\Sigma_N$ be the total (or cumulated) cost of the algorithm
    on all inputs of size $N$. (That is, $\Sigma_N=\sum_kk\Pi_{Nk}$, but the point
    is that it is not necessary to compute $\Sigma_N$ in that way.) Then the average
    cost is simply $\Sigma_N/\Pi_N$. The analysis depends on a less specific counting
    problem: what is the total cost of the algorithm, on all inputs? We will be using
    general tools that make this approach very attractive.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*累积。* 让 $\Sigma_N$ 表示算法在所有大小为 $N$ 的输入上的总（或累积）成本。（也就是说，$\Sigma_N=\sum_kk\Pi_{Nk}$，但重点是不必以那种方式计算
    $\Sigma_N$。）那么平均成本就是简单的 $\Sigma_N/\Pi_N$。分析取决于一个不太具体的计数问题：所有输入的算法总成本是多少？我们将使用使这种方法非常吸引人的通用工具。'
- en: The distributional approach gives complete information, which can be used directly
    to compute the standard deviation and other moments. Indirect (often simpler)
    methods are also available for computing moments when using the other approach,
    as we will see. In this book, we consider both approaches, though our tendency
    will be towards the cumulative method, which ultimately allows us to consider
    the analysis of algorithms in terms of combinatorial properties of basic data
    structures.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 分布式方法提供完整信息，可直接用于计算标准差和其他时刻。当使用另一种方法时，也可以使用间接（通常更简单）的方法来计算时刻，我们将看到。在本书中，我们考虑这两种方法，尽管我们的倾向将是累积方法，最终使我们能够从基本数据结构的组合性质角度考虑算法分析。
- en: '1.5 Example: Analysis of quicksort.'
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.5 示例：快速排序的分析。
- en: 'The classical [quicksort algorithm](http://algs4.cs.princeton.edu/23quicksort/)
    was invented by C.A.R. Hoare in 1962:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 经典的[快速排序算法](http://algs4.cs.princeton.edu/23quicksort/)是由C.A.R. Hoare于1962年发明的：
- en: '[PRE0]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'To analyze this algorithm, we start by defining a *cost model* (running time)
    and an *input model* (randomly ordered distinct elements). To separate the analysis
    from the implementation, we define $C_N$ to be the number of *compares* to sort
    $N$ elements and analyze $C_N$ (hypothesizing that the running time for any implementation
    will be $\sim aC_N$ for some implementation-dependent constant $a$). Note the
    following properties of the algorithm:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要分析这个算法，我们首先定义一个*成本模型*（运行时间）和一个*输入模型*（随机排序的不同元素）。为了将分析与实现分开，我们定义$C_N$为对$N$个元素进行排序所需的*比较次数*，并分析$C_N$（假设任何实现的运行时间都将是$\sim
    aC_N$，其中$a$是依赖于实现的常数）。注意算法的以下特性：
- en: $N+1$ compares are used for partitioning.
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于分区的比较次数为$N+1$。
- en: The probability that the partitioning element is the $k$th smallest is $1/N$
    for $k$ between $0$ and $N-1$.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分区元素是第$k$小的概率是$1/N$，其中$k$介于$0$和$N-1$之间。
- en: The size of the two subarrays to be sorted in that case are $k$ and $N-k-1$.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在这种情况下，要排序的两个子数组的大小分别为$k$和$N-k-1$。
- en: The two subarrays are randomly ordered after partitioning.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 分区后两个子数组是随机排序的。
- en: These imply a mathematical expression (a *recurrence relation*) that derives
    directly from the recursive program $$C_N = N+1 + \sum_{0\le k \le N-1}{1\over
    N}(C_k + C_{N-k-1})$$ This equation is easily solved with a series of simple albeit
    mysterious algebraic steps. First, apply symmetry, multiply by $N$, subtract the
    same equation for $N-1$ and rearrange terms to get a simpler recurrence. $$\eqalign{
    C_N &= N+1 + {2\over N}\sum_{0\le k \le N-1}C_k\\ NC_N &= N(N+1) + 2\sum_{0\le
    k \le N-1}C_k\\ NC_N - (N-1)C_{N-1} &= N(N+1) -(N-1)N + 2C_{N-1}\\ NC_N &= (N+1)C_{N-1}
    +2N\\ }$$ Note that this simpler recurrence gives an efficient algorithm to compute
    the exact answer. To solve it, divide both sides by $N(N+1)$ and telescope. $$\eqalign{
    NC_N &= (N+1)C_{N-1} + 2N {\quad\rm for\quad} N > 1 {\quad\rm with\quad} C_1 =
    2\\ {C_N\over N+1} &= {C_{N-1}\over N} + {2\over N+1}\\ &= {C_{N-2}\over N-1}
    + {2\over N} + {2\over N+1}\\ &= 2H_{N+1} - 2\\ C_N &= 2(N+1)H_{N+1} - 2(N+1)
    = 2(N+1)H_N - 2N. }$$ The result is an exact expression in terms of the Harmonic
    numbers.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些暗示了一个数学表达式（一个*递归关系*），直接源自递归程序$$C_N = N+1 + \sum_{0\le k \le N-1}{1\over N}(C_k
    + C_{N-k-1})$$。这个方程可以通过一系列简单但神秘的代数步骤轻松解决。首先，应用对称性，乘以$N$，减去$N-1$的相同方程，并重新排列项以获得一个更简单的递归。$$\eqalign{
    C_N &= N+1 + {2\over N}\sum_{0\le k \le N-1}C_k\\ NC_N &= N(N+1) + 2\sum_{0\le
    k \le N-1}C_k\\ NC_N - (N-1)C_{N-1} &= N(N+1) -(N-1)N + 2C_{N-1}\\ NC_N &= (N+1)C_{N-1}
    +2N\\ }$$ 注意，这个更简单的递归给出了一个计算确切答案的高效算法。要解决它，将两边除以$N(N+1)$并进行折叠。$$\eqalign{ NC_N
    &= (N+1)C_{N-1} + 2N {\quad\rm for\quad} N > 1 {\quad\rm with\quad} C_1 = 2\\
    {C_N\over N+1} &= {C_{N-1}\over N} + {2\over N+1}\\ &= {C_{N-2}\over N-1} + {2\over
    N} + {2\over N+1}\\ &= 2H_{N+1} - 2\\ C_N &= 2(N+1)H_{N+1} - 2(N+1) = 2(N+1)H_N
    - 2N. }$$ 结果是一个关于调和数的精确表达式。
- en: 1.6 Asymptotic Approximations
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.6 渐近近似
- en: The Harmonic numbers can be approximated by an integral (see Chapter 3), $$H_N
    \sim \ln N,$$ leading to the simple asymptotic approximation $$C_N \sim 2N\ln
    N.$$ It is always a good idea to validate our math with a program. This code
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 调和数可以通过积分（见第3章）近似为$$H_N \sim \ln N$$，从而得到简单的渐近近似$$C_N \sim 2N\ln N$$。验证我们的数学模型总是一个好主意。这段代码
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: produces this output.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 产生这个输出。
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The discrepancy in the table is explained by our dropping the $2N$ term (and
    our not using a more accurate approximation to the integral).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 表中的差异是由于我们去掉了$2N$项（以及我们没有使用更准确的积分近似）所解释的。
- en: 1.7 Distributions.
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.7 分布。
- en: It is possible to use similar methods to find the standard deviation and other
    moments. The standard deviation of the number of compares used by quicksort is
    $\sqrt{7 - 2\pi^2/3}N \approx .6482776 N$ which implies that the expected number
    of compares is not likely to be far from the mean for large $N$. Does the number
    of compares obey a normal distribution? No. Characterizing this distribution is
    a difficult research challenge.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用类似的方法找到标准差和其他时刻。快速排序使用的比较次数的标准差为$\sqrt{7 - 2\pi^2/3}N \approx .6482776 N$，这意味着比较的预期次数与大$N$时的平均值不太可能相差太远。比较次数是否服从正态分布？不。表征这种分布是一个困难的研究挑战。
- en: 1.8 Probabilistic Algorithms.
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 1.8 概率算法。
- en: Is our assumption that the input array is randomly ordered a valid input model?
    Yes, because we can randomly order the array before the sort. Doing so turns quicksort
    into a *randomized algorithm* whose good performance is guaranteed by the laws
    of probability.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的假设是输入数组是随机排序的一个有效的输入模型吗？是的，因为我们可以在排序之前随机排序数组。这样做将快速排序转变为一个*随机算法*，其良好性能由概率法则保证。
- en: It is always a good idea to validate our models and analysis by running experiments.
    Detailed experiments by many people on many computers have done so for quicksort
    over the past several decades.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 验证我们的模型和分析总是一个好主意。在过去几十年里，许多人在许多计算机上进行了详细的实验，验证了快速排序的性能。
- en: In this case, a flaw in the model for some applications is that the array items
    need not be distinct. Faster implementations are possible for this case, using
    three-way partitioning.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些应用程序中，对于数组项不需要是不同的这一模型的一个缺陷是。对于这种情况，可以使用三向分区实现更快的实现。
- en: Selected Exercises
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 选定的练习
- en: '1.14'
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '1.14'
- en: Follow through the steps above to solve the recurrence $$A_N=1+{2 \over N} \sum_{1\le
    j\le N} A_{j-1} {\quad\rm for\quad} N>0$$ with $A_0=0$. This is the number of
    times quicksort is called with `hi≥lo`.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 按照上述步骤解决递归$$A_N=1+{2 \over N} \sum_{1\le j\le N} A_{j-1} {\quad\rm for\quad}
    N>0$$，其中$A_0=0$。这是快速排序在`hi≥lo`时被调用的次数。
- en: '1.15'
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '1.15'
- en: Show that the average number of exchanges used during the first partitioning
    stage (before the pointers cross) is $(N-2)/6$. (Thus, by linearity of the recurrences,
    the average number of exchanges used by quicksort is ${1\over6}C_N-{1\over2}A_N$.)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 显示在指针交叉之前第一个分区阶段使用的平均交换次数为$(N-2)/6$。 （因此，通过递归的线性性质，快速排序使用的平均交换次数为${1\over6}C_N-{1\over2}A_N$。）
- en: '1.16'
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '1.16'
- en: How many subarrays of size $k>0$ are encountered, on the average, when sorting
    a random array of size $N$ with quicksort?
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用快速排序对大小为$N$的随机数组进行排序时，平均会遇到多少大小为$k>0$的子数组？
- en: '1.17'
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '1.17'
- en: If we change the first line in the quicksort implementation above to call insertion
    sort when `hi-lo <= M` then the total number of comparisons to sort $N$ elements
    is described by the recurrence $$ C_N=\begin{cases}N+1+\displaystyle{1\over N}
    \sum_{1\le j\le N} (C_{j-1}+C_{N-j})&N>M;\\ {1\over4}N(N-1)&N\le M\\ \end{cases}$$
    Solve this recurrence.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将上面快速排序实现中的第一行更改为当`hi-lo <= M`时调用插入排序，那么对于排序$N$个元素的总比较次数由递归描述为$$ C_N=\begin{cases}N+1+\displaystyle{1\over
    N} \sum_{1\le j\le N} (C_{j-1}+C_{N-j})&N>M;\\ {1\over4}N(N-1)&N\le M\\ \end{cases}$$
    解决这个递归。
- en: '1.18'
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '1.18'
- en: Ignoring small terms (those significantly less than $N$) in the answer to the
    previous exercise, find a function $f(M)$ so that the number of comparisons is
    approximately $$2N\ln N+f(M)N.$$ Plot the function $f(M)$, and find the value
    of $M$ that minimizes the function.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略上一个练习的答案中的小项（明显小于$N$的项），找到一个函数$f(M)$，使得比较次数大约为$$2N\ln N+f(M)N.$$ 绘制函数$f(M)$的图形，并找到最小化函数的$M$的值。
- en: Review Questions
  id: totrans-53
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 复习问题
- en: Q1.1
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q1.1
- en: 'Given the recurrence $F_N=t_N+{2 \over N} \sum_{1\le j\le N} F_{j-1} {\ \rm
    for\ } N>0$ with $F_0=0$, give the order of growth of $F_N$ (constant, linear,
    linearithmic, quadratic, or cubic) for each of the following choices of the "toll
    function" $t_N$: (*a*) 0 (*b*) 1 (*c*) $N$ (*d*) $2N+1$ (*e*) $N^2$'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 给定递归$F_N=t_N+{2 \over N} \sum_{1\le j\le N} F_{j-1} {\ \rm for\ } N>0$，其中$F_0=0$，对于以下选择的“通行费函数”$t_N$，给出$F_N$的增长顺序（常数、线性、线性对数、二次或三次）：(*a*)
    0 (*b*) 1 (*c*) $N$ (*d*) $2N+1$ (*e*) $N^2$
- en: Q1.2
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q1.2
- en: 'In a particular (fictitious) sorting application with cloud computing, the
    cost of sorting files of size less than 1 million is negligible. Otherwise, the
    cost of comparisons is such that the budget only can cover $10^{12}$ comparisons.
    Of the following, which is the largest randomly-ordered file of distinct keys
    that you can expect to be able to sort within budget, using the standard Quicksort
    algorithm with cutoff to a free sort for files of size less than 1 million: $10^9$,
    $10^{10}$, $10^{11}$, $10^{12}$, $10^{13}$, or $10^{14}$?'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个特定的（虚构的）云计算排序应用中，大小小于100万的文件的排序成本可以忽略不计。否则，比较成本是这样的，预算只能覆盖$10^{12}$次比较。在以下选项中，使用标准快速排序算法，对于大小小于100万的文件，可以在预算内排序的最大随机顺序键文件是哪一个：$10^9$,
    $10^{10}$, $10^{11}$, $10^{12}$, $10^{13}$, 或 $10^{14}$？
- en: Q1.3
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q1.3
- en: Let $B_{Nk}$ be the average number of subfiles of size $k$ or less encountered
    when quicksort is used to sort a randomly ordered file of $N$ distinct elements,
    with $B_{Nk}=N$ for $0\le N\le k$. What is the value of $B_{Nk}$ for $N>k$?
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 让$B_{Nk}$表示使用快速排序对$N$个不同元素的随机排序文件进行排序时遇到的大小不超过$k$的平均子文件数，其中对于$0\le N\le k$，$B_{Nk}=N$。对于$N>k$，$B_{Nk}$的值是多少？
