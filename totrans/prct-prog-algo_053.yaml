- en: 9.4   Numerical Solutions to Differential Equations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 9.4   微分方程的数值解
- en: 原文：[https://introcs.cs.princeton.edu/java/94diffeq](https://introcs.cs.princeton.edu/java/94diffeq)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/java/94diffeq](https://introcs.cs.princeton.edu/java/94diffeq)
- en: This section under major construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节正在大力施工中。
- en: 'Solving differential equations is a fundamental problem in science and engineering.
    A differential equation is ... For example: y'' = -2y, y(0) = 1 has an analytic
    solution y(x) = exp(-2x). Laplace''s equation d²φ/dx² + d²φ/dy² = 0 plus some
    boundary conditions. Sometimes we can find closed-form solutions using calculus.
    However, in general we must resort to numerical approximations. ODE = differential
    equation in which all dependent variables are a function of a single independent
    variable, as in the first example. PDE = differential equation in which all dependent
    variables are a function of several independent variables, as in the second example.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 解微分方程是科学和工程中的一个基本问题。微分方程是...例如：y' = -2y，y(0) = 1有解析解y(x) = exp(-2x)。拉普拉斯方程d²φ/dx²
    + d²φ/dy² = 0加上一些边界条件。有时我们可以使用微积分找到封闭形式的解。然而，一般情况下我们必须求助于数值逼近。ODE = 所有因变量都是单个自变量的函数的微分方程，如第一个例子中。PDE
    = 所有因变量都是几个自变量的函数的微分方程，如第二个例子中。
- en: '**Euler method.** In the 18th century Leonhard Euler invented a simple scheme
    for numerically approximating the solution to an ODE. Given a first order ODE
    of the form dy/dx = f(x, y) subject to the initial boundary condition y(x[0])
    = y[0], we estimate the function y(x) over a regular sample of values x[n] = x[0]
    + hn. The parameter h is referred to as the *step length*. If y[n] is the approximation
    to y(x) at x[n], then we can approximate the gradient at x[n] by f(x[n], y[n]).
    We estimate y[n+1] by assuming the gradient remains constant in the interval between
    x[n] and x[n+1]. This leads to the following method:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**欧拉方法。** 在18世纪，莱昂哈德·欧拉发明了一种简单的方案来数值逼近ODE的解。给定形式为dy/dx = f(x, y)的一阶ODE，满足初始边界条件y(x[0])
    = y[0]，我们在x[n] = x[0] + hn的一系列值x[n]上估计函数y(x)。参数h被称为*步长*。如果y[n]是在x[n]处对y(x)的近似，则我们可以通过f(x[n],
    y[n])来近似x[n]处的梯度。我们通过假设梯度在x[n]和x[n+1]之间的区间内保持不变来估计y[n+1]。这导致以下方法：'
- en: '![Euler''s method](../Images/d7826809141b34d9504f45818d99dba2.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![欧拉方法](../Images/d7826809141b34d9504f45818d99dba2.png)'
- en: The smaller we make h, the more accurate the approximation. But this comes at
    the expense of more computation. The associated truncation error can be formalized
    by comparing the above estimate with the Taylor series approximation
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将h设得越小，逼近就越准确。但这样做会增加计算量。相关的截断误差可以通过将上述估计与泰勒级数逼近进行比较来形式化。
- en: '![Euler''s method error](../Images/e2e9e211585d5ba2c47e9bb07fa54c69.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![欧拉方法误差](../Images/e2e9e211585d5ba2c47e9bb07fa54c69.png)'
- en: We see that the truncation error is approximately O(h²). If the errors are cumulative
    (conservative assumption), then the total error from x[0] = 0 to x[n] = 1 is O(h).
    Called a first-order method. To keep relative error below 1E-6, we must do 1 million
    steps. Note if the step size is too big, then Euler's method becomes unstable.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到截断误差大约为O(h²)。如果误差是累积的（保守假设），那么从x[0] = 0到x[n] = 1的总误差为O(h)。称为一阶方法。为了保持相对误差低于1E-6，我们必须进行100万步。请注意，如果步长太大，那么欧拉方法会变得不稳定。
- en: '*Lorenz attractor.* The Lorenz equations are the following system of differential
    equations'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: '*Lorenz吸引子。* Lorenz方程是以下微分方程组'
- en: '![Lorenz equation](../Images/931a01cda6199db87e562771dafb7df5.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![Lorenz方程](../Images/931a01cda6199db87e562771dafb7df5.png)'
- en: Program [Butterfly.java](Butterfly.java.html) uses Euler method's to numerically
    solve Lorenz's equation and plots the trajectory (x, z).
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[Butterfly.java](Butterfly.java.html)使用欧拉方法数值解Lorenz方程并绘制轨迹(x, z)。
- en: '| ![Lorenz equation](../Images/628bd590877d427da0afcfea9fa6cc52.png) |    
    | ![Lorenz equation](../Images/760d14c23f93ab1001cbed919806d85c.png) |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '| ![Lorenz方程](../Images/628bd590877d427da0afcfea9fa6cc52.png) |     | ![Lorenz方程](../Images/760d14c23f93ab1001cbed919806d85c.png)
    |'
- en: Program [Lorenz.java](Lorenz.java.html) plots two trajectories of Lorenz's equation
    with slightly different initial conditions. This perturbation eventually leads
    to significantly different behavior. This is the origin of the so-called butterfly
    effect. Here's a good [demonstration](http://www.cmp.caltech.edu/~mcc/chaos_new/Lorenz.html).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[Lorenz.java](Lorenz.java.html)绘制了Lorenz方程具有略有不同初始条件的两条轨迹。这种扰动最终导致显着不同的行为。这就是所谓的蝴蝶效应的起源。这里有一个很好的[演示](http://www.cmp.caltech.edu/~mcc/chaos_new/Lorenz.html)。
- en: '**Runge-Kutta method.** Euler''s method not used in pratice because truncation
    error per step is relatively large compared with other methods. Also Euler''s
    method becomes unstable if step size is too large. Euler''s method only uses first
    derivative information at beginning of step. Runge-Kutta method samples derivative
    at several points in interval. Tradeoff between computing the function f(x, y)
    and increased accuracy. The 4th order Runge-Kutta method is a popular sweet spot.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**龙格-库塔方法。** 欧拉方法在实践中不使用，因为每步的截断误差相对较大，与其他方法相比。此外，如果步长太大，欧拉方法会变得不稳定。欧拉方法仅在步骤开始时使用第一导数信息。龙格-库塔方法在区间中的几个点上采样导数。在计算函数f(x,
    y)和提高准确性之间存在权衡。四阶龙格-库塔方法是一个受欢迎的平衡点。'
- en: '![Runga-Kutta method](../Images/aa3ff6caf1a6e4f196df54fd31e05947.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![龙格-库塔方法](../Images/aa3ff6caf1a6e4f196df54fd31e05947.png)'
- en: It's a fourth order method.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个四阶方法。
- en: '**N-body simulation.** Sir Isaac Newton formulated the principles governing
    the the motion of two particles under the influence of their mutual gravitational
    attraction in his famous *Principia* in 1687. However, Newton was unable to solve
    the problem for three or more particles. Indeed, systems of three or more particles
    can only be solved numerically. We will describe a classic numerical solution
    that is widely used to study complex physical systems in cosmology, plasma physics,
    semiconductors, fluid dynamics and astrophysics. Scientists also apply the same
    techniques to other pairwise interactions including Coulombic, Biot-Savart, and
    van der Waals.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**N体模拟。** 艾萨克·牛顿爵士在他著名的《自然哲学的数学原理》中于1687年制定了控制两个粒子在彼此之间的引力影响下运动的原则。然而，牛顿无法解决三个或更多粒子的问题。事实上，三个或更多粒子的系统只能通过数值方法来解决。我们将描述一种经典的数值解法，广泛应用于研究宇宙学、等离子物理、半导体、流体动力学和天体物理等复杂物理系统。科学家们还将相同的技术应用于其他成对相互作用，包括库仑力、比奥-萨瓦尔定律和范德瓦尔斯力。'
- en: We first review Newton's mathematical model describing the movement of the planets.
    Newton's law of universal gravitation asserts that the strength of the gravitational
    force between two particles is given by F = Gm[1]m[2] / R², where G is the universal
    gravitational constant, m[1] and m[2] are the masses of the two particles, and
    R is the distance between them. The force is vector quantity, and the pull of
    one particle towards another acts on the line between them. Newton's second law
    of motion F = ma relates the force to the acceleration. Let m[i] denote the mass
    of particle i and let r[i] denote its position vector (as a function of time t).
    Combining Newton's two laws, we obtain a system of differential equations which
    characterize the motion of the particles
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先回顾牛顿描述行星运动的数学模型。牛顿的普遍引力定律断言，两个粒子之间的引力强度由F = Gm[1]m[2] / R²给出，其中G是普遍引力常数，m[1]和m[2]是两个粒子的质量，R是它们之间的距离。力是矢量量，一个粒子对另一个粒子的拉力作用在它们之间的直线上。牛顿的第二运动定律F
    = ma将力与加速度联系起来。让m[i]表示粒子i的质量，让r[i]表示其位置矢量（作为时间t的函数）。结合牛顿的两个定律，我们得到了描述粒子运动的微分方程组。
- en: '![N-body equation](../Images/939e851791254e1de7b6ccc9baf67ae0.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![N体方程](../Images/939e851791254e1de7b6ccc9baf67ae0.png)'
- en: Since a particle's acceleration only depends on the positions of other particles
    and not of their velocities (as might be the case of particles in an electromagnetic
    field), we can use a specialized numerical integration method known as the *leapfrog*
    finite difference approximation scheme. This is the basis for most astrophysical
    simulations of gravitational systems. In this scheme, we discretize time, and
    increment the time variable *t* in increments of the time quantum dt. We maintain
    the position and velocity of each particle, but they are half a time step out
    of phase (which explains the name leapfrog). The steps below illustrate how to
    evolve the positions and velocities of the particles. Here
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 由于粒子的加速度仅取决于其他粒子的位置而不是它们的速度（这可能是粒子在电磁场中的情况），我们可以使用一种称为*跃点法*的专门数值积分方法。这是大多数天体物理模拟重力系统的基础。在这种方案中，我们离散化时间，并以时间量子dt的增量增加时间变量*t*。我们保持每个粒子的位置和速度，但它们相位差半个时间步长（这解释了跃点法的名称）。下面的步骤说明了如何演化粒子的位置和速度。这里
- en: '![Leapfrog method](../Images/def48cdad58815341fee6ef3e75ce899.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![跃点法](../Images/def48cdad58815341fee6ef3e75ce899.png)'
- en: James M. Stone, Astrophysics, Princeton University "Some of the most basic facts
    we have discovered about the Universe (for example, the temperature at the center
    of the Sun) are known only through the application of computational methods."
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 詹姆斯·M·斯通，普林斯顿大学天体物理学，“我们发现的宇宙中一些最基本的事实（例如太阳中心的温度）只有通过计算方法才能知道。”
- en: '**Elliptic partial differential equations.** An *elliptical partial differential
    equations* involves second derivatives of space, but not time. One of big challenges
    in scientific computing is fast multipole methods for solving elliptic PDEs. One
    of the simplest and most important examples is [Laplace''s equation](http://en.wikipedia.org/wiki/Laplace''s_equation):
    d²φ/dx² + d²φ/dy² = 0. It arises in many scientific applications to model electric,
    gravitational, and fluid potentials. It describes the steady state of heat transport,
    steady state water table elevation in an unconfined aquifer, We only know values
    on the boundary, so no initial conditions, and Euler method doesn''t apply. To
    solve it numerically, we can use a finite-different method on a square grid.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**椭圆型偏微分方程。** *椭圆型偏微分方程*涉及空间的二阶导数，但不涉及时间。科学计算中的一个重大挑战是用于解决椭圆型偏微分方程的快速多极方法。其中最简单且最重要的例子之一是[Laplace''s
    equation](http://en.wikipedia.org/wiki/Laplace''s_equation)：d²φ/dx² + d²φ/dy²
    = 0。它在许多科学应用中用于模拟电场、引力场和流体势。它描述了热传输的稳态、非受限含水层中的稳态水位高度。我们只知道边界上的值，因此没有初始条件，欧拉方法不适用。为了数值求解，我们可以在一个方形网格上使用有限差分方法。'
- en: '![Laplace''s equation](../Images/b1572dff0660862ebfb82f4aca32a4df.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![拉普拉斯方程](../Images/b1572dff0660862ebfb82f4aca32a4df.png)'
- en: 'Voltage at a point is the average of its nearest neighbors. Called the *relaxation
    algorithm* or *Gauss-Seidel*. Program [Laplace.java](Laplace.java.html) numerically
    solves Lapace''s equation in the plane with a fixed potential at its four boundary
    walls: left (30), right (70), upper (100), and bottom (0). At each step, we make
    each cell be the average of its four neighbors. We always use the most up-to-date
    value (not necessarily the same as the one from the previous step). We plot all
    points using an integer scale of 0 (blue) to 100 (red). We plot points with potentials
    equal to a multiple of 10 in white to highlight the equipotential lines. Note
    that because of averaging property, maximum and minimum are achieved at boundary
    points. The picture below illustrates the potential after 0, 500, 1,000, and 10,000
    iterations. Convergence is slow.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 点的电压是其最近邻的平均值。称为*松弛算法*或*高斯-赛德尔*。程序[Laplace.java](Laplace.java.html)在平面上数值解拉普拉斯方程，其四个边界墙的电势固定为：左（30），右（70），上（100）和下（0）。在每一步中，我们使每个单元格成为其四个邻居的平均值。我们始终使用最新值（不一定与上一步相同）。我们使用整数范围从0（蓝色）到100（红色）绘制所有点。我们绘制电势等于10的倍数的点为白色，以突出等势线。请注意，由于平均性质，最大值和最小值在边界点处实现。下图显示了0、500、1,000和10,000次迭代后的电势。收敛速度较慢。
- en: '| ![Laplace equation](../Images/0a26809336eb3ed16cd7f60e4dae2117.png) | ![Laplace
    equation](../Images/1f02fd07ca81ae6d8977ab267c334a5f.png) | ![Laplace equation](../Images/c0e49f3157394a371d160d5d23bf3cf2.png)  |
    ![Laplace equation](../Images/ad0f2ad61db57ee01deaa89ecb5b16f7.png) |'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ![拉普拉斯方程](../Images/0a26809336eb3ed16cd7f60e4dae2117.png) | ![拉普拉斯方程](../Images/1f02fd07ca81ae6d8977ab267c334a5f.png)
    | ![拉普拉斯方程](../Images/c0e49f3157394a371d160d5d23bf3cf2.png)  | ![拉普拉斯方���](../Images/ad0f2ad61db57ee01deaa89ecb5b16f7.png)
    |'
- en: Slow convergence. The bottleneck is drawing to the screen. To speed things up,
    we perform 100 updates before redrawing to the screen using Turtle graphics. The
    method can also be sped up by choosing better estimates for the initial potentials
    (instead of choosing an aribtrary value).
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 收敛缓慢。瓶颈是绘制到屏幕上。为了加快速度，我们在使用海龟图形绘制到屏幕之前执行100次更新。该方法也可以通过选择更好的初始电势估计（而不是选择任意值）来加快速度。
- en: 'Other techniques: solve linear system of equations. Typically involve large
    but, sparse and banded matrices. In 1D the finite difference scheme for Laplace''s
    equation yields a tridiagonal system of linear equations.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 其他技术：解线性方程组。通常涉及大型但稀疏和带状矩阵。在一维中，拉普拉斯方程的有限差分方案产生一个三对角线性方程组。
- en: '![Tridiagonal system from Laplace''s equation](../Images/d7184cdd7f645f0aa457a5e9ffc2d1ad.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![拉普拉斯方程的三对角线性方程组](../Images/d7184cdd7f645f0aa457a5e9ffc2d1ad.png)'
- en: 'Easily parallelized variants: Jacobi iteration, successive over relaxation,
    red-black ordering. In 2D use multigrid methods (discretized grids on several
    scales so that information propagates faster), conjugate gradient, or FFT if periodic
    boundary.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 易于并行化的变体：雅可比迭代，逐次超松弛，红黑排序。在二维中使用多重网格方法（在几个尺度上离散化网格，使信息传播更快），共轭梯度，或者如果有周期性边界则使用
    FFT。
- en: Q + A
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Q + A
- en: Q. Why use the leapfrog method instead of Euler's method or Runge-Kutta?
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: Q. 为什么使用跳跃法而不是欧拉法或龙格-库塔法？
- en: A. The leapfrog method is more stable for integrating Hamiltonian systems. It
    is *symplectic*, which means it preserves properties specific to Hamiltonian systems
    (conservation of linear and angular momentum, time-reversibility, and conservation
    of energy of the discrete Hamiltonian). In contrast, ordinary numerical methods
    become dissipative and exhibit incorrect long-term behavior.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: A. 跳跃法对于积分哈密顿系统更稳定。它是*辛波形*的，这意味着它保留了特定于哈密顿系统的性质（线性动量和角动量的守恒，时间可逆性，以及离散哈密顿能量的守恒）。相比之下，普通数值方法会变得耗散，并表现出不正确的长期行为。
- en: Q. Any good sources on numerics in Java
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Q. 有关 Java 中数字计算的好资源吗？
- en: A. Try [Java numerics](http://math.nist.gov/javanumerics/).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: A. 尝试[Java numerics](http://math.nist.gov/javanumerics/)。
- en: Exercises
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: (example suggested by Tamara Broderick) Write a program [LaplaceSquare.java](LaplaceSquare.java.html)
    to solve Laplace's equation with a fixed potential of 0 on the boundary of the
    grid and an internal square (of 1/9 the area) in the center with fixed potential
    100.
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （由Tamara Broderick建议的示例）编写一个程序[LaplaceSquare.java](LaplaceSquare.java.html)来解决拉普拉斯方程，其中网格边界上的电势固定为0，中心有一个面积为1/9的内部正方形，电势固定为100。
- en: Solve Laplace's equation with an L-shaped internal boundary.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解决带有L形内部边界的拉普拉斯方程。
- en: Creative Exercises
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
- en: '**Skydiver.** Suppose the descent of a skydiver is modeled with the following
    differential equation: d²x/dt² = 9.8 - 0.01 (dx/dt)², where x is the distance
    from the drop zone (meters). Initially x(0) = 0 and x''(0) = 0\. Estimate distance
    traveled after 3 seconds. Estimate terminal velocity. use dt = 1.'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**跳伞者。** 假设跳伞者的下降用以下微分方程建模：d²x/dt² = 9.8 - 0.01 (dx/dt)²，其中 x 是距离投放区的距离（米）。最初
    x(0) = 0，x''(0) = 0。估计经过3秒后的行程。估计终端速度。使用 dt = 1。'
- en: '**Poisson''s equation.** Poisson''s equation is: dφ/dx² + dφ/dy² = f(x, y).'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**泊松方程。** 泊松方程是：dφ/dx² + dφ/dy² = f(x, y)。'
- en: '**SIR epidemiology model.** The [SIR model](http://www.esam.northwestern.edu/~chopp/ESAM252-3/lab6.pdf)
    measures the number of susceptible, infected, and recovered individuals in a host
    population. Given a fixed population, let S(t) be the fraction that is susceptible
    to an infectious, but not deadly, disease at time t; let I(t) be the fraction
    that is infected at time t; and let R(t) be the fraction that has recovered. Let
    β be the rate at which an infected person infects a susceptible person. Let γ
    be the rate at which infected people recover from the disease. The differential
    equations describing the fraction of the population susceptible, infected, and
    recovering people is![SIR model](../Images/a14f625c419ae3842e2ef87c4eaf98d3.png)'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**SIR流行病学模型。** [SIR模型](http://www.esam.northwestern.edu/~chopp/ESAM252-3/lab6.pdf)测量了宿主人群中易感、感染和康复个体的数量。给定一个固定的人口，让S(t)表示在时间t时患有传染性但不致命疾病的易感人群的比例；让I(t)表示在时间t时感染的比例；让R(t)表示已康复的比例。让β表示感染者感染易感者的速率。让γ表示感染者从疾病中康复的速率。描述人群中易感、感染和康复人群比例的微分方程为![SIR模型](../Images/a14f625c419ae3842e2ef87c4eaf98d3.png)'
- en: 'The first equation models the rate of infection; the second says that the population
    is closed; the third models the rate of recovery. Epidemiologists use this simple
    model to track the infection rate of measles and ebola. [Hong Kong flu](http://www.math.duke.edu/education/ccp/materials/diffcalc/sir/sir2.html):
    initially 7.9 million people, 10 infected, 0 recovered. Thus S(0) = 1, I(0) =
    1.27E-6, R(0) = 0. Estiamte average period of infection as 3 days, so γ = 1/3
    and infection rate as one new person every days, so β = 1/2. Plot S(t), I(t),
    and R(t) in different colors for t = 0 to 200.'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第一个方程模拟了感染率；第二个说人口是封闭的；第三个模拟了康复率。流行病学家使用这个简单模型来跟踪麻疹和埃博拉的感染率。[香港流感](http://www.math.duke.edu/education/ccp/materials/diffcalc/sir/sir2.html)：最初有790万人，10人感染，0人康复。因此S(0)
    = 1，I(0) = 1.27E-6，R(0) = 0。估计平均感染期为3天，所以γ = 1/3，感染率为每天一个新人，所以β = 1/2。为t = 0到200以不同颜色绘制S(t)、I(t)和R(t)。
- en: 'Small pox: 1/γ = 14 days, 1/μ = 27375 days, 1/β = 27389/20. Corn blight: 1/γ
    = 20 days, 1/μ = 60 days, 1/β = 80/5.'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 天花：1/γ = 14天，1/μ = 27375天，1/β = 27389/20。玉米病：1/γ = 20天，1/μ = 60天，1/β = 80/5。
- en: '**Logistic map.** Write a program [LogisticMap.java](LogisticMap.java.html)
    that plots the *bifurcation diagram* of the logistic map. The logistic equation
    is : y[n+1] = 4 r y[n] (1 - y[n]). For each value of r between 0.7 and 1.0, initialize
    y[0] = 0.5, perform 1,000 iterates and discard them, then plot the next 100 iterates
    on the y-axis.[![Logistic map](../Images/e19718e07f957d589812dca8b7304049.png)](images/logistic800.png)'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Logistic映射。** 编写一个程序[LogisticMap.java](LogisticMap.java.html)，绘制Logistic映射的*bifurcation
    diagram*。Logistic方程为：y[n+1] = 4 r y[n] (1 - y[n])。对于r在0.7到1.0之间的每个值，初始化y[0] =
    0.5，执行1,000次迭代并丢弃它们，然后在y轴上绘制接下来的100次迭代。[![Logistic map](../Images/e19718e07f957d589812dca8b7304049.png)](images/logistic800.png)'
- en: '**ODE Initial value problem in chemical engineering.** [equations governing
    a fermentor](http://www.glue.umd.edu/~nsw/ench250/ode.htm).'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**化学工程中的ODE初值问题。** [控制发酵罐的方程](http://www.glue.umd.edu/~nsw/ench250/ode.htm)。'
- en: '**Predator-prey dynamics.** In the Lotka-Volterra model, there is one populations
    of animals (predator) that feeds on another population of animals (prey). Here
    is some data that approximates the populations of [lynx and snowshoe hares](http://www-rohan.sdsu.edu/~jmahaffy/courses/f00/math122/labs/labj/q3v1.htm)
    observed by the Hudson Bay Company beginning in 1852. The x_t denote the number
    of snow hares (prey) and y_t be the number of lynxes (predator) living at time
    t. Snow hares are vegetarians and we assume the number of hares born is proportional
    (with birth rate α) to the number of hares alive at time t. The probability of
    a decisive encounter between a lynx and a hare is proportional (with kill rate
    β) to the product of the number of hares and the number of lynxes. We assume the
    lynxes have no natural enemies and the number of deaths is proportional (with
    birth rate γ). We also assume that the number of lynxes born is proportional to
    the number of hares'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**捕食-被捕食者动态。** 在Lotka-Volterra模型中，有一种动物群体（捕食者）以另一种动物群体（被捕食者）为食。这里是一些近似代表了哈德逊湾公司从1852年开始观察到的[猞猁和雪兔](http://www-rohan.sdsu.edu/~jmahaffy/courses/f00/math122/labs/labj/q3v1.htm)种群的数据。x_t表示雪兔（被捕食者）的数量，y_t表示在时间t时生活的猞猁（捕食者）的数量。雪兔是素食动物，我们假设出生的雪兔数量与时间t时存活的雪兔数量成比例（出生率α）。猞猁与雪兔之间的决定性相遇的概率与雪兔和猞猁数量的乘积成比例（杀伤率β）。我们假设猞猁没有天敌，死亡数量与出生率γ成比例。我们还假设出生的猞猁数量与雪兔数量成比例。'
- en: '|'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: '[PRE0]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '|'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '|'
- en: 'Equilibrium: (0, 0) or (δ / γ, α / β). Not stable. α = 1, &beta = 0.01, γ =
    0.02, δ = 1.'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 平衡点：(0, 0)或(δ / γ, α / β)。不稳定。α = 1，β = 0.01，γ = 0.02，δ = 1。
- en: x_0 = 20, y_0 = 20.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: x_0 = 20，y_0 = 20。
- en: Use Euler's method.
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用欧拉方法。
- en: Use 4th order Runge Kutta method.
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用4阶龙格-库塔方法。
