- en: 4\.   Algorithms and Data Structures
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://introcs.cs.princeton.edu/java/40algorithms](https://introcs.cs.princeton.edu/java/40algorithms)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Overview.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this chapter we describe and implement some of the most important algorithms
    and data structures in use on computers today. (For a more in-depth treatment,
    we recommend the companion textbook [Algorithms, 4th Edition](https://algs4.cs.princeton.edu).)
    We begin by considering a powerful framework for measuring and analyzing the efficiency
    of our programs. This enables us to compare algorithms and accurately predict
    performance. Next, we consider several novel algorithms for the classic problem
    of sorting. Then, we build the most important higher level data structures, including
    stacks, queues, and symbol tables.
  prefs: []
  type: TYPE_NORMAL
- en: '[*4.1 Performance*](../41analysis) outlines a scientific method and powerful
    theory for understanding the performance and resource consumption of the program
    that we write.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*4.2 Sorting and Searching*](../42sort) describes two classical algorithms—mergesort
    and binary search—along with several applications where their efficiency plays
    a critical role.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*4.3 Stacks and Queues*](../43stack) introduces two closely related data structures
    for manipulating arbitrary large collections of data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*4.4 Symbol Tables*](../44st) considers a quintessential data structure known
    as the symbol table for storing information, and two efficient implementations—hash
    tables and binary search trees.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*4.5 Small World Phenomenon*](../45graph) presents a case study to investigate
    the small world phenomenon—the principle that we are all linked by short chains
    of acquaintances.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java programs in this chapter.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Below is a list of Java programs in this chapter. Click on the program name
    to access the Java code; click on the reference number for a brief description;
    read the textbook for a full discussion.
  prefs: []
  type: TYPE_NORMAL
- en: '| **REF** | **PROGRAM** | **DESCRIPTION** |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.1.1](../41analysis/index.php#4.1.1) | [ThreeSum.java](../41analysis/ThreeSum.java.html
    "3-sum problem") | 3-sum problem |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.1.2](../41analysis/index.php#4.1.2) | [DoublingTest.java](../41analysis/DoublingTest.java.html
    "validating a doubling hypothesis") | validating a doubling hypothesis |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.2.1](../42sort/index.php#4.2.1) | [Questions.java](../42sort/Questions.java.html
    "binary search (20 questions)") | binary search (20 questions) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.2.2](../42sort/index.php#4.2.2) | [Gaussian.java](../42sort/Gaussian.java.html
    "bisection search") | bisection search |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.2.3](../42sort/index.php#4.2.3) | [BinarySearch.java](../42sort/BinarySearch.java.html
    "binary search (in a sorted array)") | binary search (in a sorted array) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.2.4](../42sort/index.php#4.2.4) | [Insertion.java](../42sort/Insertion.java.html
    "insertion sort") | insertion sort |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.2.5](../42sort/index.php#4.2.5) | [InsertionTest.java](../42sort/InsertionTest.java.html
    "doubling test for insertion sort") | doubling test for insertion sort |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.2.6](../42sort/index.php#4.2.6) | [Merge.java](../42sort/Merge.java.html
    "mergesort") | mergesort |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.2.7](../42sort/index.php#4.2.7) | [FrequencyCount.java](../42sort/FrequencyCount.java.html
    "frequency counts") | frequency counts |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.3.1](../43stack/index.php#4.3.1) | [ArrayStackOfStrings.java](../43stack/ArrayStackOfStrings.java.html
    "stack of strings (array)") | stack of strings (array) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.3.2](../43stack/index.php#4.3.2) | [LinkedStackOfStrings.java](../43stack/LinkedStackOfStrings.java.html
    "stack of strings (linked list)") | stack of strings (linked list) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.3.3](../43stack/index.php#4.3.3) | [ResizingArrayStackOfStrings.java](../43stack/ResizingArrayStackOfStrings.java.html
    "stack of strings (resizing array)") | stack of strings (resizing array) |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.3.4](../43stack/index.php#4.3.4) | [Stack.java](../43stack/Stack.java.html
    "generic stack") | generic stack |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.3.5](../43stack/index.php#4.3.5) | [Evaluate.java](../43stack/Evaluate.java.html
    "expression evaluation") | expression evaluation |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.3.6](../43stack/index.php#4.3.6) | [Queue.java](../43stack/Queue.java.html
    "generic queue") | generic queue |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.3.7](../43stack/index.php#4.3.7) | [MM1Queue.java](../43stack/MM1Queue.java.html
    "M/M/1 queue simulation") | M/M/1 queue simulation |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.3.8](../43stack/index.php#4.3.8) | [LoadBalance.java](../43stack/LoadBalance.java.html
    "load balancing simulation") | load balancing simulation |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.4.1](../44st/index.php#4.4.1) | [Lookup.java](../44st/Lookup.java.html
    "dictionary lookup") | dictionary lookup |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.4.2](../44st/index.php#4.4.2) | [Index.java](../44st/Index.java.html "indexing")
    | indexing |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.4.3](../44st/index.php#4.4.3) | [HashST.java](../44st/HashST.java.html
    "hash table") | hash table |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.4.4](../44st/index.php#4.4.4) | [BST.java](../44st/BST.java.html "binary
    search tree") | binary search tree |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.4.5](../44st/index.php#4.4.5) | [DeDup.java](../44st/DeDup.java.html "dedup
    filter") | dedup filter |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.5.1](../45graph/index.php#4.5.1) | [Graph.java](../45graph/Graph.java.html
    "graph data type") | graph data type |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.5.2](../45graph/index.php#4.5.2) | [IndexGraph.java](../45graph/IndexGraph.java.html
    "using a graph to invert an index") | using a graph to invert an index |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.5.3](../45graph/index.php#4.5.3) | [PathFinder.java](../45graph/PathFinder.java.html
    "shortest-paths client") | shortest-paths client |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.5.4](../45graph/index.php#4.5.4) | [PathFinder.java](../45graph/PathFinder.java.html
    "shortest-paths implementation") | shortest-paths implementation |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.5.5](../45graph/index.php#4.5.5) | [SmallWorld.java](../45graph/SmallWorld.java.html
    "small-world test") | small-world test |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
- en: '| [4.5.6](../45graph/index.php#4.5.6) | [Performer.java](../45graph/Performer.java.html
    "performer–performer graph") | performer–performer graph |'
  prefs:
  - PREF_BQ
  type: TYPE_TB
