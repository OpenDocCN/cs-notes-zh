["```\n    1 1       6 00110\n    2 010     7 00111\n    3 011     8 0001000\n    4 00100   9 0001001\n    5 00101  10 0001010\n\n    ```", "```\n    public static int bitReverse(int input) {\n       int ans = 0;\n       for (int i = 0; i < n; i++) {\n          ans = (ans << 1) + (input & 1);\n          input = input >> 1;\n       }\n       return ans;\n    }\n\n    ```", "```\n    0    1    2    3    4    5    6        12   13   14   15\n    0000 0001 0010 0011 0100 0101 0110 ... 1100 1101 1110 1111\n\n    0000 1000 0100 1100 0010 1010 0110 ... 0011 1011 0111 1111\n    0    8    4    9    2    10    6        3   11    7   15\n\n    ```", "```\n    a = a + b;\n    b = a - b;\n    a = a - b;\n\n    a = a ^ b;\n    b = a ^ b;\n    a = a ^ b;\n\n    ```", "```\n    public static int bitCount(int input) {\n       int count = 0;\n       for (int i = 0; i < 32; i++)\n          count = count + (input >>> i & 1);\n       return count;\n    }\n\n    public static int bitCount(int x) { \n       if (x == 0) return 0; \n       return (x & 1) + bitCount(x >>> 1); \n    } \n\n    ```", "```\n    public static int bitCount(int i) {\n       i = i - ((i >>> 1) & 0x55555555);\n       i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n       i = (i + (i >>> 4)) & 0x0f0f0f0f;\n       i = i + (i >>> 8);\n       i = i + (i >>> 16);\n       return i & 0x3f;\n    }  \n\n    ```", "```\n    public static int bitCount(int input) {\n       int count = 0;\n       while (input != 0) {\n           count++;\n           input = input & (input - 1);\n       }\n       return count;\n    }\n\n    ```", "```\n    public static int bitCount(int input) {\n        return bits[(input >>  0) & 0xff]\n            +  bits[(input >>  8) & 0xff]\n            +  bits[(input >> 16) & 0xff]\n            +  bits[(input >> 24) & 0xff];\n    }\n\n    ```", "```\n        XXYYYYZZ\n          XX   = checksum of track offsets in seconds, taken mod 255\n          YYYY = length of the CD in seconds\n          ZZ   = number of tracks on the CD\n\n        ```", "```\n    byte b0 = 0xAB; \n    byte b1 = 0xCD; \n    int c = (b0 << 8) | b1;\n\n    ```", "```\n    long MASK = (1L << 32) - 1;   // 0x00000000FFFFFFFF; \n    int quotient  = (int) ((a & MASK) / (b & MASK));\n    int remainder = (int) ((a & MASK) % (b & MASK));\n\n    ```", "```\n    short a = 4;\n    short b = 5;\n    short c = a + b;\n\n    ```", "```\n    int a = 2147483647;   // 2^31 - 1\n    int b = a + 1;\n    System.out.println(\"a = \" + a);\n    System.out.println(\"b = \" + b);\n\n    ```", "```\n    int a = -5 >>  3;\n    int b = -5 >>> 3;\n    System.out.println(a);\n    System.out.println(b);\n\n    ```", "```\n    int a = 11 & 17;\n    int b = 11 ^ 17;\n    int c = 11 | 17;\n    int d = ~11;\n    System.out.println(a);\n    System.out.println(b);\n    System.out.println(c);\n    System.out.println(d);\n\n    ```", "```\n    c = 0;\n    while (b > 0) {\n       if (b & 1 == 1) c = c + a;\n       b = b >> 1;\n       a = a << 1;\n    }\n\n    ```", "```\n    a = a ^ b;\n    b = a ^ b;\n    a = a ^ b;\n\n    ```", "```\n    a = a + b;\n    b = a - b;\n    a = a - b;\n\n    ```", "```\n    x = - ~x;\n    x = ~ -x;\n\n    ```", "```\n    public static boolean parity(int a) { \n      a ^= a >>> 32; \n      a ^= a >>> 16; \n      a ^= a >>>  8; \n      a ^= a >>>  4; \n      a ^= a >>>  2; \n      a ^= a >>>  1; \n\n      return a & 1; \n    } \n\n    ```", "```\n    int cnt = 0;\n    for (int i = 1; i != 0; i = 2 * i) {\n        cnt++;\n    }\n\n    ```", "```\n    boolean isPowerOfTwo = (n & -n) == n; \n\n    ```", "```\n    0 = 0                         -1 = 11   (-2 + 1)\n    1 = 1                         -2 = 10\n    2 = 110   (4 + -2)            -3 = 1101 (-8 + 4 + 1)\n    3 = 111                       -4 = 100\n    4 = 100                       -5 = 1111\n    5 = 101                       -6 = 1110\n    6 = 11010 (16 + -8 + -2)      -7 = 1001\n    7 = 11011\n\n    ```", "```\n    // extract\n    int alpha = (rgba >> 24) & 0xff;\n    int red   = (rgba >> 16) & 0xff;\n    int green = (rgba >>  8) & 0xff;\n    int blue  = (rgba >>  0) & 0xff;\n\n    // write back\n    rgba = (alpha << 24) | (red << 16) | (green << 8) | (blue << 0);\n    System.out.println(rgba);\n\n    ```", "```\n    f = b + ((a - b) & -(a < b));    // min(a, b)\n    g = a - ((a - b) & -(a < b));    // max(a, b)\n\n    ```"]