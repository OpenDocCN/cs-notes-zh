["```\npublic Polynomial(int coef, int exp)\npublic Polynomial plus(Polynomial b)\npublic Polynomial minus(Polynomial b)\npublic Polynomial times(Polynomial b)\npublic Polynomial div(Polynomial b)\npublic Polynomial compose(Polynomial b)\npublic Polynomial differentiate(Polynomial b)\npublic int evaluate(int x)\npublic int degree()\npublic int compareTo(Polynomial b)\npublic String toString()\n\n```", "```\nPolynomial one      = new Polynomial(1, 0);   // 1 = 1 * x^0\nPolynomial x        = new Polynomial(1, 1);   // x = 1 * x^1\nPolynomial binomial = one;\nfor (int i = 0; i < N; i++)\n   binomial = binomial.times(x.plus(one));\nSystem.out.println(binomial);\n\n```", "```\npublic class Polynomial {\n    private int[] coef;      // coefficients\n    private int deg;         // degree of polynomial\n\n```", "```\npublic Polynomial(int a, int b) {\n    coef = new int[b+1];\n    coef[b] = a;\n    deg = degree();\n}\n\n```", "```\npublic Polynomial plus(Polynomial b) {\n   Polynomial a = this;\n   Polynomial c = new Polynomial(0, Math.max(a.deg, b.deg));\n   for (int i = 0; i <= a.deg; i++) c.coef[i] += a.coef[i];\n   for (int i = 0; i <= b.deg; i++) c.coef[i] += b.coef[i];\n   c.deg = c.degree();\n   return c;\n}\n\n```", "```\npublic int evaluate(int x) {\n   int p = 0;\n   for (int i = deg; i >= 0; i--)\n      p = coef[i] + (x * p);\n   return p;\n}\n\n```", "```\nRational(int num, int dem)        // initialize\npublic double num()                // return numerator\npublic double den()                // return denominator\npublic String toString()           // print method\npublic Rational plus(Rational b)   // return this Rational + b\npublic Rational times(Rational b)  // return this Rational * b\n\n```", "```\n% maple\n    |\\^/|     Maple V Release 5 (WMI Campus Wide License)\n._|\\|   |/|_. Copyright (c) 1981-1997 by Waterloo Maple Inc. All rights\n \\  MAPLE  /  reserved. Maple and Maple V are registered trademarks of\n <____ ____=\"\">  Waterloo Maple Inc.\n      |       Type ? for help.\n\n> # arithmetic\n> 1 + 1;      \n                                               2\n> # arbitrary precision arithmetic\n> 2^(100);\n                                1267650600228229401496703205376\n\n> # rational arithmetic\n\n> # trigometric function\n> sin(Pi/6); \n                                              1/2\n> # exponential function\n> exp(1);    \n                                            exp(1)\n# convert to floating point\n> exp(1.0);\n                                          2.718281828\n> # 50 digits of precision\n> Digits := 50:\n> exp(1.0);\n                      2.7182818284590452353602874713526624977572470937000\n> Digits := 10:\n\n> # an error\n> 1 / 0;\nError, division by zero\n\n> # complex numbers\n> (6 + 5*I)^4;\n                                        -3479 + 1320 I\n# built-in functions\n> BesselK(1.0, -3.0);\n                                 -.04015643113 - 12.41987883 I\n\n> # base 10 logarithm\n> log[10](100);\n                                            ln(100)\n                                            -------\n                                            ln(10)\n# simplifying\n> simplify(log[10](100));\n                                               2\n# end the session\nquit;\n\n```", "```\n# assignment statements\n> m := 10:\n> a := 9.8:\n> f := m * a;\n                                           f := 98.0\n> i := 10:\n> i := i + 1;\n                                            i := 11\n\n> # polynomials\n> expand((x+1)^6);\n                           6      5       4       3       2\n                          x  + 6 x  + 15 x  + 20 x  + 15 x  + 6 x + 1\n\n> # differentiation\n> diff(sin(x*x), x);\n                                                 2\n                                          2 cos(x ) x\n> # partial differentiation\n> diff((x^2 - y) / (y^3 - 1), x);           \n                                               x\n                                           2 ------\n                                              3\n                                             y  - 1\n> # indefinite integration\n> int(x^3 * sin(x), x);  \n                         3             2\n                       -x  cos(x) + 3 x  sin(x) - 6 sin(x) + 6 x cos(x)\n\n> # definite integration\n> int(exp(-x^2), x = 0..infinity);\n                                                 1/2\n                                           1/2 Pi\n\n> # series summation\n> sum(i, i = 1..100);      \n                                             5050\n\nfactor(sum(i, i = 1..N));\n                                         1/2 N (N + 1)\n\n```", "```\n> # solve equation\n> solve(x^4 - 5*x^2 + 6*x = 2);\n                                        1/2        1/2\n                                  -1 + 3   , -1 - 3   , 1, 1\n\n> # solving system of equations\n> solve({x^2 * y^2 = 0, x - y = 1}); \n               {y = -1, x = 0}, {y = -1, x = 0}, {y = 0, x = 1}, {y = 0, x = 1}\n\n> # find floating point solutions\n> fsolve(x^4 * sin(x) + x^3*exp(x) - 1);\n                                          .7306279509\n> # maximize\n\n> # user-defined functions\n> f := x -> x^2:\n> f(9);\n\n                                              81\n> g := x -> sin(x) * exp(x):\n> f(g(Pi/6));               \n                                                      2\n                                       1/4 exp(1/6 Pi)\n> diff(f(g(x)), x);\n                                         2                  2       2\n                          2 sin(x) exp(x)  cos(x) + 2 sin(x)  exp(x)\n\n> # absolute value function\n> f := proc(x) if x > 0 then x else -x fi; end:\n> f(-7);\n                                               7\n\n> f(7);\n\n> # recursion\n> mygcd := proc(p, q)\n      if q = 0 then p\n      else mygcd(q, p mod q)\n      fi;\n  end:\n> mygcd(1440, 408);                                                  \n                                              24\n\n> # loops and conditionals\n> # print primes of the form 2^i - 1\n> for i from 1 to 600 do\n      if isprime(2^i - 1) then print(i);\n      fi;\n  od;\n                           2 3 5 7 13 17 19 31 61 89 107 127 521\n\n> # arrays - Chebyshev polynomials (expand to keep it unfactored)\n> p[0] := 1;\n> p[1] := x;\n> for i from 2 to 10 do\n      p[i] := expand(2*x*p[i-1] - p[i-2])\n  od;\n> p[10]; \n                            10         8         6        4       2\n                       512 x   - 1280 x  + 1120 x  - 400 x  + 50 x  - 1\n\n> subs(x = 1/6, p[10]);\n                                            12223\n                                            ------\n                                            118098\n\n```", "```\n> infolevel[int] := 2;\n> int(1 / (x^3 + x + 1), x);\nint/indef1:   first-stage indefinite integration\nint/ratpoly:   rational function integration\nint/rischnorm:   enter Risch-Norman integrator\nbytes used=1000360, alloc=786288, time=0.14\nint/rischnorm:   exit Risch-Norman integrator\nint/risch:   enter Risch integration\nint/risch:   the field extensions are\n                                              [x]\n\nunknown:   integrand is\n                                              1\n                                          ----------\n                                           3\n                                          x  + x + 1\n\nint/ratpoly/horowitz:   integrating\n                                              1\n                                          ----------\n                                           3\n                                          x  + x + 1\n\nint/ratpoly/horowitz:   Horowitz' method yields\n                                         /\n                                        |      1\n                                        |  ---------- dx\n                                        |   3\n                                       /   x  + x + 1\n\nint/risch/ratpoly:   Rothstein's method - factored resultant is\n                                      3\n                                   [[z  - 3/31 z - 1/31, 1]]\n\nint/risch/ratpoly:   result is\n                           -----\n                            \\                      2\n                             )    _R ln(x - 62/9 _R  + 31/9 _R + 4/9)\n                            /\n                           -----\n                          _R = %1\n\n                                                  3\n                                %1 := RootOf(31 _Z  - 3 _Z - 1)\n\nint/risch:   exit Risch integration\n                           -----\n                            \\                      2\n                             )    _R ln(x - 62/9 _R  + 31/9 _R + 4/9)\n                            /\n                           -----\n                          _R = %1\n\n                                                  3\n                                %1 := RootOf(31 _Z  - 3 _Z - 1)\n\n```", "```\nset Digits := 50;   // 50 digits of floating point precision\nevalf(exp(1), 30);  \nfsolve()...\nsolve()...\nmod\nargmin\n\n```", "```\n    Tn(x) = cos(n arccos x)\n\n    ```", "```\n    T0(x) = 1\n    T1(x) = x\n    T2(x) = 2x2 - 1\n    T3(x) = 4x3 - 3x\n\n    ```", "```\n    (1 - x2) y''  - x y' + n2y = 0\n\n    ```", "```\n    H(0) = 1\n    H(1) = 2x\n    H(2) = 4x2 - 2\n    H(3) = 8x3 - 12x\n\n    ```", "```\n    F(1) = 1\n    F(2) = x\n    F(3) = x2 + 1\n    F(4) = x3 + 2x\n\n    ```", "```\n    1:  0/1  1/1  \n    2:  0/1  1/2  1/1  \n    3:  0/1  1/3  1/2  2/3  1/1  \n    4:  0/1  1/4  1/3  1/2  2/3  3/4  1/1  \n    5:  0/1  1/5  1/4  1/3  2/5  1/2  3/5  2/3  3/4  4/5  1/1  \n\n    ```", "```\n    m'' = ((n + N) / n') * m' - m\n    n'' = ((n + N) / n') * n' - n\n\n    ```", "```\n    0/1 1/1 2/1 3/1 5/2 8/3 11/4 19/7 49/18 68/25\n    87/32 106/39 193/71 685/252 878/323 1071/394 \n\n    ```"]