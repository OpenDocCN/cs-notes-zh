["```\n    explore(x, y)\n    -------------\n      - Mark the current cell (x, y) as \"visited.\"\n      - If no wall to north and unvisited, then explore(x, y+1).\n      - If no wall to east and  unvisited, then explore(x+1, y).\n      - If no wall to south and unvisited, then explore(x, y-1).\n      - If no wall to west and  unvisited, then explore(x-1, y).\n\n    ```", "```\n    green greet great groat groan grown brown\n\n    ```", "```\n    private void dfs(Graph G, int s) {\n        SuperStack<Integer> stack = new SuperStack<Integer>();\n        stack.push(s);\n        while (!stack.isEmpty()) {\n            int v = stack.peek();\n            if (!marked[v]) {\n                marked[v] = true;\n                for (int w : G.adj(v)) {\n                    if (!marked[w]) {\n                        if (stack.contains(w)) stack.delete(w);\n                        stack.push(w);\n                    }\n                }\n            }\n            else {\n                // v's adjacency list is exhausted\n                stack.pop();\n            }\n        }\n    }\n\n    ```", "```\n    private void dfs(Graph G, int s) {\n        Stack<Integer> stack = new Stack<Integer>();\n        stack.push(s);\n        while (!stack.isEmpty()) {\n            int v = stack.pop();\n            if (!marked[v]) {\n                marked[v] = true;\n                for (int w : G.adj(v)) {\n                    if (!marked[w]) {\n                        edgeTo[w] = v;\n                        stack.push(w);\n                     }\n                }\n            }\n        }\n    }\n\n    ```", "```\n    private void dfs(Graph G, int s) {\n        Stack<Integer> stack = new Stack<Integer>();\n        stack.push(s);\n        marked[s] = true;\n        while (!stack.isEmpty()) {\n           int v = stack.pop();\n           for (int w : G.adj(v)) {\n               if (!marked[w]) {\n                   stack.push(w);\n                   marked[w] = true;\n                   edgeTo[w] = v;\n               }\n           }\n        }\n    }\n\n    ```"]