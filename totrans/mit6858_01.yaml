- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Note:** These lecture notes were slightly modified from the ones posted on
    the 6.858 [course website](http://css.csail.mit.edu/6.858/2014/schedule.html)
    from 2014.'
  prefs: []
  type: TYPE_NORMAL
- en: What is security?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Achieving some goal in the presence of an adversary.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many systems are connected to the internet, which has adversaries.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Thus, design of many systems might need to address security.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: i.e., will the system work when there's an adversary?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'High-level plan for thinking about security:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Policy:** the goal you want to achieve.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: e.g. only Alice should read file `F`.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Common goals:* confidentiality, integrity, availability.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Threat model:** assumptions about what the attacker could do.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: e.g. can guess passwords, cannot physically grab file server.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Better to err on the side of assuming attacker can do something.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mechanism:** knobs that your system provides to help uphold policy.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: e.g. user accounts, passwords, file permissions, encryption.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resulting goal:** no way for adversary within threat model to violate policy.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that goal has nothing to say about mechanism.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why is security hard? **It's a negative goal.**
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Contrast: easy to check whether a positive goal is upheld, e.g., Alice can
    actually read file `F`. Harder to check that *there''s no possible way Alice can
    read file `F`*.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How would you even begin to enumerate all the possible ways Alice could go about
    reading the file? Too many layers at which Alice could exploit bugs to gain access
    to file `F`.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Need to guarantee policy, assuming the threat model.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Difficult to think of all possible ways that attacker might break in.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Realistic threat models are open-ended (almost negative models).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Weakest link matters.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Iterative process: design, update threat model as necessary, etc.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the point if we can't achieve perfect security?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this class, we'll push the boundary of each system to see when it breaks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each system will likely have some breaking point leading to compromise.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Doesn''t necessarily mean the system is not useful: depends on context.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Important to understand what a system can do, and what a system cannot.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In reality, must manage security risk vs benefit.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More secure systems means less risk (or consequence) of some compromises.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Insecure system may require manual auditing to check for attacks, etc.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Higher cost of attack means more adversaries will be deterred.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Better security often makes new functionality practical and safe.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Suppose you want to run some application on your system.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Large companies sometimes prohibit users from installing software that hasn't
    been approved on their desktops, partly due to security.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Javascript in the browser is isolated, making it ok (for the most part) to run
    new code/applications without manual inspection/approval. (or virtual machines,
    or Native Client, or better OS isolation mechanisms)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Similarly, VPNs make it practical to mitigate risk of allowing employees to
    connect to a corporate network from anywhere on the Internet.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What goes wrong #1: Problems with the policy'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Example:* [Sarah Palin''s email account](http://en.wikipedia.org/wiki/Sarah_Palin_email_hack
    "Sarah Palin''s email hack").'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yahoo email accounts have a username, password, and security questions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: User can log in by supplying username and password.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If user forgets password, can reset by answering security questions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Security questions can sometimes be easier to guess than password.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Some adversary guessed Sarah Palin's high school, birthday, etc.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Policy amounts to: can log in with either password or security questions.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: (no way to enforce *"Only if user forgets password, then ..."*)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example:* [Mat Honan''s accounts at Amazon, Apple, Google, etc.](http://www.wired.com/gadgetlab/2012/08/apple-amazon-mat-honan-hacking/all/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Gmail password reset: send a verification link to a backup email address.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Google helpfully prints part of the backup email address.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Mat Honan's backup address was his Apple `@me.com` account.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Apple password reset: need billing address, last 4 digits of credit card.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Address can be easy to get, but how to get 4 digits of user's credit card number?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon: can add a credit card to an account, no password required.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon password reset: provide any one of user''s credit card numbers.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: LOL.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Amazon: will not print credit card numbers.. But will print last 4 digits!'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example:* [Twitter''s `@N` account hijacking.](https://medium.com/p/24eb09e026dd)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Can be hard for legitimate user to prove they own an account!
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How to solve?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Think hard about implications of policy statements.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Some policy checking tools can help, but need a way to specify what's bad.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Difficult in distributed systems: don''t know what everyone is doing.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What goes wrong #2: Problems with threat model / assumptions'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Example:* human factors not accounted for.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Phishing attacks.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: User gets email asking to renew email account, transfer money, or ...
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Tech support gets call from convincing-sounding user to reset password.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '["Rubberhose cryptanalysis"](https://en.wikipedia.org/wiki/Rubber-hose_cryptanalysis)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example:* computational assumptions change over time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MIT's Kerberos system used 56-bit DES keys, since mid-1980's.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: At the time, seemed fine to assume adversary can't check all 2^56 keys.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'No longer reasonable: [now costs about $100](https://www.cloudcracker.com/dictionaries.html).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Several years ago, 6.858 final project showed can get any key in a day.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example:* all SSL certificate CAs are fully trusted.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To connect to an SSL-enabled web site, web browser verifies certificate.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Certificate is a combination of server's host name and cryptographic key,
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: signed by some trusted certificate authority (CA).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Long list (hundreds) of certificate authorities trusted by most browsers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If any CA is compromised, adversary can intercept SSL connections with
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: a "fake" certificate for any server host name.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In 2011, two CAs were compromised, issued fake certs for many domains (Google,
    Yahoo, Tor, ...), apparently used in Iran (?).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/DigiNotar](http://en.wikipedia.org/wiki/DigiNotar)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://en.wikipedia.org/wiki/Comodo_Group](http://en.wikipedia.org/wiki/Comodo_Group)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: In 2012, a CA inadvertently issued a root certificate valid for any domain.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.h-online.com/security/news/item/Trustwave-issued-a-man-in-the-middle-certificate-1429982.html](http://www.h-online.com/security/news/item/Trustwave-issued-a-man-in-the-middle-certificate-1429982.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example:* assuming your hardware is trustworthy.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If NSA is your adversary, turns out to not be a good assumption.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[https://www.schneier.com/blog/archives/2013/12/more_about_the.html](https://www.schneier.com/blog/archives/2013/12/more_about_the.html)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example:* assuming good randomness for cryptography.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Need high-quality randomness to generate the keys that can't be guessed.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Problem: embedded devices, virtual machines may not have much randomness.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As a result, many keys are similar or susceptible to guessing attacks.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Mining Your Ps and Qs: Detection of Widespread Weak Keys in Network Devices](https://factorable.net/weakkeys12.extended.pdf)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example:* subverting military OS security.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the 80's, military encouraged research into secure OS'es.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'One unexpected way in which OS''es were compromised:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: adversary gained access to development systems, modified OS code.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example:* subverting firewalls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adversaries can connect to an unsecured wireless behind firewall
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adversaries can trick user behind firewall to disable firewall
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Might suffice just to click on link `http://firewall/?action=disable`
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Or maybe buy an ad on CNN.com pointing to that URL (effectively)?
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example:* machines disconnected from the Internet are secure?'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stuxnet worm spread via specially-constructed files on USB drives.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How to solve?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More explicit threat models, to understand possible weaknesses.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Simpler, more general threat models.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Better designs may eliminate / lessen reliance on certain assumptions.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: E.g., alternative trust models that don't have fully-trusted CAs.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: E.g., authentication mechanisms that aren't susceptible to phishing.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'What goes wrong #3: problems with the mechanism -- bugs'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Bugs in the security mechanism (e.g., OS kernel) lead to vulnerabilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If application is enforcing security, app-level bugs lead to vulnerabilities.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example:* [Apple''s iCloud password-guessing rate limits.](https://github.com/hackappcom/ibrute)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: People often pick weak passwords; can often guess w/ few attempts (1K-1M).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Most services, including Apple's iCloud, rate-limit login attempts.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Apple's iCloud service has many APIs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: One API (the *"Find my iPhone"* service) forgot to implement rate-limiting.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adversary could make many attempts at guessing passwords.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Probably as fast as they can send packets: `>> M/day.`'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example:* [Missing access control checks in Citigroup''s credit card web site.](http://www.nytimes.com/2011/06/14/technology/14security.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Citigroup allowed credit card users to access their accounts online.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Login page asks for username and password.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If username and password OK, redirected to account info page.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The URL of the account info page included some numbers.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Turns out the numbers were (related to) the user's account number.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Worse yet, server didn't check that you were logged into that account.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adversary tried different numbers, got different people's account info.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Possibly a wrong threat model: doesn''t match the real world?'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: System is secure if adversary browses the web site through browser.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: System not secure if adversary synthesizes new URLs on their own.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Hard to say if developers had wrong threat model, or buggy mechanism.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example:* [Android''s Java `SecureRandom` weakness leads to Bitcoin theft.](https://bitcoin.org/en/alert/2013-08-11-android)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Bitcoins can be spent by anyone that knows the owner's private key.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Many Bitcoin wallet apps on Android used Java's `SecureRandom` API.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Turns out the system was sometimes forgetting to seed the PRNG!
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: As a result, some Bitcoin keys turned out to be easy to guess.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Adversaries searched for guessable keys, spent any corresponding bitcoins.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example:* bugs in sandbox ([NaCl](https://developer.chrome.com/native-client),
    Javascript, Java runtime).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Allows adversary to escape isolation, do operations they weren't supposed to.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example:* Moxie''s SSL certificate name checking bug'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Null byte vs. length-encoding.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Example:* buffer overflows (see below).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Case study: buffer overflows'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Consider a web server.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Often times, the web server's code is responsible for security.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: E.g., checking which URLs can be accessed, checking SSL client certs, ..
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Thus, bugs in the server's code can lead to security compromises.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What's the threat model, policy?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Assume that adversary can connect to web server, supply any inputs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Policy is a bit fuzzy: only perform operations intended by programmer?'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: E.g., don't want adversary to steal data, bypass checks, install backdoors.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following simplified example code from, say, a web server:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`webserver.c:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: What does the compiler generate in terms of memory layout?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'x86 stack:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Stack grows down.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%esp` points to the last (bottom-most) valid thing on the stack.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`%ebp` points to the caller''s %esp value.'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read_req() stack layout:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Caller''s code (say, `main()`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: call `read_req()`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read_req()''s assembly code:`'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How does the adversary take advantage of this code?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Supply long input, overwrite data on stack past buffer.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Interesting bit of data: return address, gets used by `ret`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can set return address to the buffer itself, include some code in there.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How does the adversary know the address of the buffer?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What if one machine has twice as much memory?
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Luckily for adversary, virtual memory makes things more deterministic.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For a given OS and program, addresses will often be the same.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens if stack grows up, instead of down?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Look at the stack frame for `gets()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What can the adversary do once they are executing code?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use any privileges of the process.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Often leverage overflow to gain easier access into system.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Originally on Unix, run shell `/bin/sh` (hence the term "shell code").
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If the process is running as `root` or `Administrator`, can do anything.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Even if not, can still send spam, read files (web server, database), ..
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can attack other machines behind a firewall.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Why would programmers write such code?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Legacy code, wasn't exposed to the internet.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Programmers were not thinking about security.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Many standard functions used to be unsafe (`strcpy`, `gets`, `sprintf`).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Even safe versions have gotchas (`strncpy` does not null-terminate).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: More generally, any memory errors can translate into a vulnerability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using memory after it has been deallocated (*use-after-free*).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If writing, overwrite new data structure, e.g. function pointer.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If reading, might call a corrupted function pointer.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Freeing the same memory twice (*double-free*).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Might cause `malloc()` to later return the same memory twice.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Decrementing the stack pointer past the end of stack, into some other memory.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Exploiting large memory management vulnerabilities in Xorg server running
    on Linux](http://www.invisiblethingslab.com/resources/misc-2010/xorg-large-memory-attacks.pdf)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A one-byte stray write can lead to compromise.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[glibc __gconv_translit_find() exploit](http://www.openwall.com/lists/oss-security/2014/08/26/2)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Might not even need to overwrite a return address or function pointer.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can suffice to read sensitive data like an encryption key.
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Can suffice to change some bits (e.g. `int isLoggedIn`, `int isRoot`).
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How to avoid mechanism problems?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Reduce the amount of security-critical code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Don't rely on the entire application to enforce security.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Will do in Lab 2.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid bugs in security-critical code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: E.g., don't use `gets()`, use `fgets()` which can limit buffer length.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Use common, well-tested security mechanisms (*"Economy of mechanism"*).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Audit these common security mechanisms (lots of incentive to do so).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoid developing new, one-off mechanisms that may have bugs.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Good mechanism supports many uses, policies (more incentive to audit).
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Examples of common mechanisms:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: OS-level access control (but, could often be better)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: network firewalls (but, could often be better)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: cryptography, cryptographic protocols.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
