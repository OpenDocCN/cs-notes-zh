- en: 5.2   Tries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.2   查找树
- en: 原文：[https://algs4.cs.princeton.edu/52trie](https://algs4.cs.princeton.edu/52trie)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://algs4.cs.princeton.edu/52trie](https://algs4.cs.princeton.edu/52trie)
- en: This section under major construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节正在大规模建设中。
- en: Symbol tables with string keys.
  id: totrans-3
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 具有字符串键的符号表。
- en: 'Could use standard symbol table implementation. Instead, exploit additional
    structure of string keys. Customized searching algorithms for strings (and other
    keys represented as digits). Goal: as fast as hashing, more flexible than binary
    search trees. Can efficiently support additional operations including prefix and
    wildcard matching, e.g., IP routing table wants to forward to 128.112.136.12,
    instead forwards to 128.112 which is longest matching prefix that it knows about.
    Side benefit: fast and space-efficient string searching.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用标准符号表实现。而是利用字符串键的附加结构。为字符串（以及其他以数字表示的键）定制搜索算法。目标：像哈希一样快速，比二叉搜索树更灵活。可以有效地支持额外的操作，包括前缀和通配符匹配，例如，IP路由表希望转发到128.112.136.12，而实际上转发到128.112是它已知的最长匹配前缀。附带好处：快速且占用��间少的字符串搜索。
- en: '**R-way tries.** Program [TrieST.java](TrieST.java.html) implements a string
    symbol table using a multiway trie.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**R向查找树。** 程序[TrieST.java](TrieST.java.html)使用多向查找树实现了一个字符串符号表。'
- en: '**Ternary search tries.** Program [TST.java](TST.java.html) implements a string
    symbol table using a ternary search trie.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**三向查找树。** 程序[TST.java](TST.java.html)使用三向查找树实现了一个字符串符号表。'
- en: 'Reference: [Fast Algorithms for Sorting and Searching](http://www.cs.princeton.edu/~rs/strings/paper.pdf)
    by Bentley and Sedgewick.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 参考：[快速排序和搜索的算法](http://www.cs.princeton.edu/~rs/strings/paper.pdf) 作者 Bentley
    和 Sedgewick。
- en: '*Property A.* (Bentley-Sedgewick) Given an input set, the number of nodes in
    its TST is the same, regardless of the order in which the strings are inserted.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '*属性A.*（Bentley-Sedgewick）给定一个输入集，无论字符串插入的顺序如何，其TST中的节点数都是相同的。'
- en: Pf. There is a unique node in the TST for each distinct string prefix in the
    set. The relative positions of the nodes within the TST can change depending on
    the insertion order, but the number of nodes is invariant.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 证明。在集合中，TST中每个不同字符串前缀都有一个唯一的节点。节点在TST中的相对位置可能会根据插入顺序而改变，但节点数是不变的。
- en: Advanced operations.
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 高级操作。
- en: Wildcard search, prefix match. The r-way trie and TST implementations include
    code for wildcard matching and prefix matching.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 通配符搜索，前缀匹配。R向查找树和TST实现包括用于通配符匹配和前缀匹配的代码。
- en: Lazy delete = change the word boundary bit. Eager delete = clean up any dead
    parent links.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 惰性删除 = 更改单词边界位。急切删除 = 清理任何死亡父链接。
- en: 'Application: T9 text input for cell phones. User types using phone pad keys;
    system displays all words that correspond (and auto-completes as soon as it is
    unique). If user types 0, system displays all possible auto-completions.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 应用：T9手机文本输入。用户使用手机键盘键入；系统显示所有对应的单词（并在唯一时自动完成）。如果用户键入0，系统会显示所有可能的自动完成。
- en: Q+A
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 问答
- en: Exercises
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Write nonrecursive versions of an R-way trie string set and a TST.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写R向查找树字符串集和TST的非递归版本。
- en: '**Unique substrings of length L.** Write a program that reads in text from
    standard input and calculate the number of unique substrings of length L that
    it contains. For example, if the input is `cgcgggcgcg` then there are 5 unique
    substrings of length 3: `cgc`, `cgg`, `gcg`, `ggc`, and `ggg`. Applications to
    data compression. *Hint*: use the string method `substring(i, i + L)` to extract
    ith substring and insert into a symbol table. Alternative solution: compute the
    hash of the i+1st substring using the hash of the ith substring. Test it out on
    the first [million digits of π](http://introcs.cs.princeton.edu/data/pi-1million.txt).
    or the first [10 million digits of π](http://introcs.cs.princeton.edu/data/pi-10million.txt).'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**长度为L的唯一子字符串。** 编写一个程序，从标准输入中读取文本并计算其包含的长度为L的唯一子字符串的数量。例如，如果输入是`cgcgggcgcg`，那么长度为3的唯一子字符串有5个：`cgc`、`cgg`、`gcg`、`ggc`和`ggg`。应用于数据压缩。*提示*：使用字符串方法`substring(i,
    i + L)`提取第i个子字符串并插入符号表。另一种解决方案：使用第i个子字符串的哈希值计算第i+1个子字符串的哈希值。在第一千万位数的π或者第一千万位数的π上测试它。'
- en: '**Unique substrings.** Write a program that reads in text from standard input
    and calculates the number of distinct substrings of any length. (Can do very efficiently
    with a suffix tree.)'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**唯一子字符串。** 编写一个程序，从标准输入中读取文本并计算任意长度的不同子字符串的数量。（可以使用后缀树非常高效地完成。）'
- en: '**Document similarity.** To determine the similarity of two documents, calculate
    the number of occurrences of each *trigram* (3 consecutive letters). Two documents
    are similar if the Euclidean distance between the frequency vector of trigrams
    is small.'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**文档相似性。** 要确定两个文档的相似性，计算每个*三字母组*（3个连续字母）的出现次数。如果两个文档的三字母组频率向量的欧几里德距离很小，则它们相似。'
- en: '**Spell checking.** Write a program [SpellChecker.java](SpellChecker.java.html)
    that the name of a file containing a dictionary of words in the English language,
    and then reads string from standard input and prints out any word that is not
    in the dictionary. Use a string set.'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**拼写检查。** 编写一个程序[SpellChecker.java](SpellChecker.java.html)，它接受一个包含英语词汇的字典文件的名称，然后从标准输入读取字符串并打印出不在字典中的任何单词。使用一个字符串集。'
- en: '**Spam blocklist.** Insert known spam email addresses into an existence table
    and use to blocklist spamm.'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**垃圾邮件黑名单。** 将已知的垃圾邮件地址插入到存在表中，并用于阻止垃圾邮件。'
- en: '**IP lookup by country.** Use the data file [ip-to-country.csv](http://introcs.cs.princeton.edu/data/ip-to-country.csv)
    to determine what country a given IP address is coming from. The data file has
    five fields (begining of IP address range, ending of IP address range, two character
    country code, three character country code, and country name. See [The IP-to-country
    website](http://ip-to-country.directi.com/). The IP addresses are non-overlapping.
    Such a database tool can be used for: credit card fraud detection, spam filtering,
    auto-selection of language on a web site, and web server log analysis.'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**按国家查找IP。** 使用数据文件[ip-to-country.csv](http://introcs.cs.princeton.edu/data/ip-to-country.csv)来确定给定IP地址来自哪个国家。数据文件有五个字段（IP地址范围的开始，IP地址范围的结束，两个字符的国家代码，三个字符的国家代码和国家名称。请参阅[IP-to-country网站](http://ip-to-country.directi.com/)。IP地址不重叠。这样的数据库工具可用于：信用卡欺诈检测，垃圾邮件过滤，网站上语言的自动选择以及Web服务器日志分析。'
- en: '**Inverted index of web.** Given a list of web pages, create a symbol table
    of words contained in the web pages. Associate with each word a list of web pages
    in which that word appears. Write a program that reads in a list of web pages,
    creates the symbol table, and support single word queries by returning the list
    of web pages in which that query word appears.'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Web的倒排索引。** 给定一个网页列表，创建包含网页中包含的单词的符号表。将每个单词与出现该单词的网页列表关联起来。编写一个程序，读取一个网页列表，创建符号表，并通过返回包含该查询单词的网页列表来支持单词查询。'
- en: '**Inverted index of web.** Extend the previous exercise so that it supports
    multi-word queries. In this case, output the list of web pages that contain at
    least one occurrence of each of the query words.'
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Web的倒排索引。** 扩展上一个练习，使其支持多词查询。在这种情况下，输出包含每个查询词至少出现一次的网页列表。'
- en: '**Symbol table with duplicates.**'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**带有重复项的符号表。**'
- en: '**Password checker.** Write a program that reads in a string from the command
    line and a dictionary of words from standard input, and checks whether it is a
    "good" password. Here, assume "good" means that it (i) is at least 8 characters
    long, (ii) is not a word in the dictionary, (iii) is not a word in the dictionary
    followed by a digit 0-9 (e.g., hello5), (iv) is not two words separated by a digit
    (e.g., hello2world)'
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**密码检查器。** 编写一个程序，从命令行读取一个字符串和从标准输入读取一个单词字典，并检查它是否是一个“好”密码。在这里，假设“好”意味着（i）至少有8个字符长，（ii）不是字典中的单词，（iii）不是字典中的单词后跟一个数字0-9（例如，hello5），（iv）不是由一个数字分隔的两个单词（例如，hello2world）。'
- en: '**Reverse password checker.** Modify the previous problem so that (ii) - (v)
    are also satisfied for reverses of words in the dictionary (e.g., olleh and olleh2world).
    *Clever solution*: insert each word and its reverse into the symbol table.'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**反向密��检查器。** 修改上一个问题，使得（ii）-（v）也适用于字典中单词的反向形式（例如，olleh和olleh2world）。*巧妙的解决方案*：将每个单词及其反向形式插入符号表中。'
- en: '**Random phone numbers.** Write a program that takes a comand line input N
    and prints N random phone numbers of the form (xxx) xxx-xxxx. Use a symbol table
    to avoid choosing the same number more than once. Use this [list of area codes](http://introcs.cs.princeton.edu/data/phone.na.txt)
    to avoid printing out bogus area codes. Use an R-way trie.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**随机电话号码。** 编写一个程序，接受一个命令行输入N，并打印N个形式为（xxx）xxx-xxxx的随机电话号码。使用符号表避免多次选择相同的号码。使用这个[区号列表](http://introcs.cs.princeton.edu/data/phone.na.txt)来避免打印虚假的区号。使用R向Trie。'
- en: '**Contains prefix.** Add a method `containsPrefix()` to `StringSET` takes a
    string s as input and return true if there is a string in the set that contains
    s as a prefix.'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**包含前缀。** 向`StringSET`添加一个方法`containsPrefix()`，接受字符串s作为输入，并在集合中存在包含s作为前缀的字符串时返回true。'
- en: '**Substring matches.** Given a list of (short) strings, your goal is to support
    queries where the user looks up a string s and your job is to report back all
    strings in the list that contain s. *Hint*: if you only want prefix matches (where
    the strings have to start with s), use a TST as described in the text. To support
    substring matches, insert the suffixes of each word (e.g., string, tring, ring,
    ing, ng, g) into the TST.'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**子字符串匹配。** 给定一个（短）字符串列表，您的目标是支持查询，其中用户查找字符串s，您的任务是报告列表中包含s的所有字符串。*提示*：如果您只想要前缀匹配（字符串必须以s开头），请使用文本中描述的TST。要支持子字符串匹配，请将每个单词的后缀（例如，string，tring，ring，ing，ng，g）插入TST中。'
- en: '**Zipf''s law.** Harvard linguist George Zipf observed that the frequency of
    the ith most common word in an English text containing N words is roughly proporitional
    to 1/i, where the constant of proportionality is 1 + 1/2 + 1/3 + ... + 1/N. Test
    ["Zipf''s law](http://acm.uva.es/p/v101/10126.html) by reading in a sequence of
    words from standard input, tabulate their frequencies, and compare against the
    predicted frequencies.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Zipf定律。** 哈佛语言学家乔治·齐普夫观察到，包含N个单词的英文文本中第i个最常见单词的频率大致与1/i成比例，其中比例常数为1 + 1/2
    + 1/3 + ... + 1/N。通过从标准输入读取一系列单词，制表它们的频率，并与预测的频率进行比较来测试[“齐普夫定律”](http://acm.uva.es/p/v101/10126.html)。'
- en: '**Typing monkeys and power laws.** (Micahel Mitzenmacher) Suppose that a [typing
    monkey](http://citeseer.nj.nec.com/553345.html) creates random words by appending
    each of 26 possible lettter with probability p to the current word, and finishes
    the word with probability 1 - 26p. Write a program to estimate the frequency distribution
    of the *lengths* of words produced. If "abc" is produced more than once, only
    count it once.'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**打字猴和幂律。**（Micahel Mitzenmacher）假设一个[打字猴](http://citeseer.nj.nec.com/553345.html)通过将每个26个可能的字母以概率p附加到当前单词来创建随机单词，并以概率1
    - 26p完成单词。编写一个程序来估计生成的单词*长度*的频率分布。如果“abc”被生成多次，则只计算一次。'
- en: '**Typing monkeys and power laws.** Repeat the previous exercise, but assume
    that the letters a-z occur proportional to the following probabilities, which
    are typical of English text.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**打字猴和幂律。** 重复上一个练习，但假设字母a-z出现的概率与以下概率成比例，这是英文文本的典型概率。'
- en: '| CHAR | FREQ |   | CHAR | FREQ |   | CHAR | FREQ |   | CHAR | FREQ |   | CHAR
    | FREQ |'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| CHAR | FREQ |   | CHAR | FREQ |   | CHAR | FREQ |   | CHAR | FREQ |   | CHAR
    | FREQ |'
- en: '| A | 8.04 |  | G | 1.96 |  | L | 4.14 |  | Q | 0.11 |  | V | 0.99 |'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| A | 8.04 |  | G | 1.96 |  | L | 4.14 |  | Q | 0.11 |  | V | 0.99 |'
- en: '| B | 1.54 |  | H | 5.49 |  | M | 2.53 |  | R | 6.12 |  | W | 1.92 |'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| B | 1.54 |  | H | 5.49 |  | M | 2.53 |  | R | 6.12 |  | W | 1.92 |'
- en: '| C | 3.06 |  | I | 7.26 |  | N | 7.09 |  | S | 6.54 |  | X | 0.19 |'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| C | 3.06 |  | I | 7.26 |  | N | 7.09 |  | S | 6.54 |  | X | 0.19 |'
- en: '| D | 3.99 |  | J | 0.16 |  | O | 7.60 |  | T | 9.25 |  | Y | 1.73 |'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| D | 3.99 |  | J | 0.16 |  | O | 7.60 |  | T | 9.25 |  | Y | 1.73 |'
- en: '| E | 12.51 |  | K | 0.67 |  | P | 2.00 |  | U | 2.71 |  | Z | 0.09 |'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| E | 12.51 |  | K | 0.67 |  | P | 2.00 |  | U | 2.71 |  | Z | 0.09 |'
- en: '| F | 2.30 |  |'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_TB
  zh: '| F | 2.30 |  |'
- en: '**Indexing a book.** Write a program that reads in a text file from standard
    input and compiles an alphabetical index of which words appear on which lines,
    as in the following input. Ignore case and puncuation.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**书的索引。** 编写一个程序，从标准输入中读取一个文本文件，并编制一个按字母顺序排列的索引，显示哪些单词出现在哪些行，如下所示的输入。忽略大小写和标点符号。'
- en: '[PRE0]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Entropy.** We define the *relative entropy* of a text corpus with N words,
    k of which are distinct as E = 1 / (N log N) * sum (p[i] log(k) - log(p[i]), i
    = 1..k) where p_i is the fraction of times that word i appears. Write a program
    that reads in a text corpus and prints out the relative entropy. Convert all letters
    to lowercase and treat punctuation marks as whitespace.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**熵。** 我们定义一个包含 N 个单词的文本语料库的*相对熵*为 E = 1 / (N log N) * sum (p[i] log(k) - log(p[i]),
    i = 1..k)，其中 p_i 是单词 i 出现的次数的比例。编写一个程序，读取一个文本语料库并打印出相对熵。将所有字母转换为小写，并将标点符号视为空格。'
- en: '**Longest prefix.** True or false. The longest prefix of a binary string x
    that is a key in a symbol table is either the floor of x or the ceiling of x (or
    both if x is in the set).'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最长前缀。** 真或假。二进制字符串 x 在符号表中的最长前缀要么是 x 的下取整，要么是 x 的上取整（如果 x 在集合中则两者都是）。'
- en: False. The longest prefix of 1100 in { 1, 10, 1011, 1111 } is 1, not 1011 or
    1111.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 错误。在 { 1, 10, 1011, 1111 } 中，1100 的最长前缀是 1，而不是 1011 或 1111。
- en: Creative Exercises
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
- en: Web Exercises
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网页练习
