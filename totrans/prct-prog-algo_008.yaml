- en: '1.6   Case Study:   Random Web Surfer'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.6   案例研究：   随机网络冲浪者
- en: 原文：[https://introcs.cs.princeton.edu/java/16pagerank](https://introcs.cs.princeton.edu/java/16pagerank)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 译文：[https://introcs.cs.princeton.edu/java/16pagerank](https://introcs.cs.princeton.edu/java/16pagerank)
- en: Communicating across the web has become an integral part of everyday life. This
    communication is enabled in part by scientific studies of the structure of the
    web. We consider a simple model, known as the *random-surfer model*. We consider
    the web to be a fixed set of pages, with each page containing a fixed set of *hyperlinks*,
    and each link a reference to some other page. We study what happens to a person
    (the random surfer) who randomly moves from page to page, either by typing a page
    name into the address bar or by clicking a link on the current page.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 通过网络进行交流已经成为日常生活的一个重要组成部分。这种交流部分得益于对网络结构的科学研究。我们考虑一个简单的模型，称为*随机冲浪者模型*。我们认为网络是一组固定的页面��每个页面包含一组固定的*超链接*，每个链接引用到其他页面。我们研究一个人（随机冲浪者）从页面到页面随机移动时会发生什么，无论是通过在地址栏中输入页面名称还是通过点击当前页面上的链接。
- en: '![Tiny web graph](../Images/36d846d05957d792bcefd1fae91fad0d.png)'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![微型网络图](../Images/36d846d05957d792bcefd1fae91fad0d.png)'
- en: The model.
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 模型。
- en: 'The crux of the matter is to specify what it means to randomly move from page
    to page. The following intuitive *90–10 rule* captures both methods of moving
    to a new page: Assume that 90 per cent of the time the random surfer clicks a
    random link on the current page (each link chosen with equal probability) and
    that 10 percent of the time the random surfer goes directly to a random page (all
    pages on the web chosen with equal probability).'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 问题的关键在于指定从页面到页面随机移动的含义。以下直观的*90–10规则*捕捉了移动到新页面的两种方法：假设90%的时间随机冲浪者点击当前页面上的随机链接（每个链接被等概率选择），10%的时间随机冲浪者直接转到随机页面（网络上的所有页面被等概率选择）。
- en: 'You can immediately see that this model has flaws, because you know from your
    own experience that the behavior of a real web surfer is not quite so simple:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以立即看出这个模型有缺陷，因为你从自己的经验中知道，真实网络冲浪者的行为并不是那么简单：
- en: No one chooses links or pages with equal probability.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有人会以相等的概率选择链接或页面。
- en: There is no real potential to surf directly to each page on the web.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有真正的潜力直接冲浪到网络上的每个页面。
- en: The 90–10 (or any fixed) breakdown is just a guess.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 90–10（或任何固定）的分解只是一个猜测。
- en: It does not take the back button or bookmarks into account.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它没有考虑返回按钮或书签。
- en: Despite these flaws, the model is sufficiently rich that computer scientists
    have learned a great deal about properties of the web by studying it.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管存在这些缺陷，但这个模型足够丰富，计算机科学家通过研究它已经学到了很多关于网络性质的知识。
- en: Input format.
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入格式。
- en: We assume that there are *n* web pages, numbered from 0 to *n*−1, and we represent
    links with ordered pairs of such numbers, the first specifying the page containing
    the link and the second specifying the page to which it refers. The input format
    we adopt is an integer (the value of *n*) followed by a sequence of pairs of integers
    (the representations of all the links).
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们假设有*n*个网页，编号从0到*n*−1，并且我们用这些数字的有序对表示链接，第一个指定包含链接的页面，第二个指定链接指向的页面。我们采用的输入格式是一个整数（*n*的值），后跟一系列整数对（所有链接的表示）。
- en: '![Input format](../Images/213cf878cb8f9e27b7619485ccd9ade0.png)'
  id: totrans-14
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![输入格式](../Images/213cf878cb8f9e27b7619485ccd9ade0.png)'
- en: The data files [tiny.txt](tiny.txt) and [medium.txt](medium.txt) are two simple
    examples.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 数据文件[tiny.txt](tiny.txt)和[medium.txt](medium.txt)是两个简单的示例。
- en: Transition matrix.
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 转移矩阵。
- en: We use a two-dimensional matrix, which we refer to as the *transition matrix*,
    to completely specify the behavior of the random surfer. With *n* web pages, we
    define an *n*-by-*n* matrix such that the entry in row *i* and column *j* is the
    probability that the random surfer moves to page *j* when on page *i*.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用一个二维矩阵，我们称之为*转移矩阵*，完全指定了随机冲浪者的行为。对于*n*个网页，我们定义一个*n*×*n*矩阵，使得第*i*行和第*j*列的条目是随机冲浪者在页面*i*时移动到页面*j*的概率。
- en: '![Transition matrix computation](../Images/3ba0ba65aadd08dbd843c9e738f45fd2.png)'
  id: totrans-18
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![转移矩阵计算](../Images/3ba0ba65aadd08dbd843c9e738f45fd2.png)'
- en: '[Transition.java](Transition.java.html) is a filter that reads links from standard
    input and produces the corresponding transition matrix on standard output.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '[Transition.java](Transition.java.html) 是一个从标准输入读取链接并在标准输出上生成相应转移矩阵的过滤器。'
- en: Simulation.
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模拟。
- en: '[RandomSurfer.java](RandomSurfer.java.html) simulates the behavior of the random
    surfer. It reads a transition matrix and surfs according to the rules, starting
    at page 0 and taking the number of moves as a command-line argument. It counts
    the number of times that the surfer visits each page. Dividing that count by the
    number of moves yields an estimate of the probability that a random surfer winds
    up on the page. This probability is known as the page''s *rank*.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '[RandomSurfer.java](RandomSurfer.java.html) 模拟了随机冲浪者的行为。它读取一个转移矩阵，并根据规则冲浪，从页面0开始，并将移动次数作为命令行参数。它计算冲浪者访问每个页面的次数。将该计数除以移动次数得出随机冲浪者最终停留在页面上的概率的估计。这个概率被称为页面的*排名*。'
- en: '*One random move.* The key to the computation is the random move, which is
    specified by the transition matrix: each row represents a *discrete probability
    distribution*—the entries fully specify the behavior of the random surfer''s next
    move, giving the probability of surfing to each page.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*一个随机移动。* 计算的关键是随机移动，由转移矩阵指定：每一行代表一个*离散概率分布*—条目完全指定了随机冲浪者下一步的行为，给出了冲浪到每个页面的概率。'
- en: '![Generating a random integer from a discrete distribution](../Images/45f78b521ddd37b2d412a9cc60b0ca55.png)'
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![从离散分布生成随机整数](../Images/45f78b521ddd37b2d412a9cc60b0ca55.png)'
- en: '[RandomSurfer.java](../22library/RandomSurfer.java.html) is an improved version
    that uses two library methods that we will introduce in Section 2.2.'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[RandomSurfer.java](../22library/RandomSurfer.java.html) 是一个改进版本，使用了我们将在第2.2节介绍的两个库方法。'
- en: '*Markov chains.* The random process that describes the surfer''s behavior is
    known as a *Markov chain*. Markov chains are widely applicable, well-studied,
    and have many remarkable and useful properties. For example, a basic limit theorem
    for Markov chains says that our surfer could start *anywhere*, because the probability
    that a random surfer eventually winds up on any particular page is the same for
    all starting pages!'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*马尔可夫链.* 描述冲浪者行为的随机过程称为 *马尔可夫链*。马尔可夫链具有广泛的适用性，被广泛研究，并具有许多显著和有用的特性。例如，马尔可夫链的一个基本极限定理表明，我们的冲浪者可以从*任何地方*开始，因为随机冲浪者最终落在任何特定页面上的概率对于所有起始页面都是相同的！'
- en: '*Page ranks.* The random-surfer simulation is straightforward: it loops for
    the indicated number of moves, randomly surfing through the graph. Increasing
    the number of iterations gives increasingly accurate estimates of the probability
    that the surfer lands on each page—the *page ranks*.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*页面排名.* 随机冲浪者模拟很简单：它循环执行指定数量的移动，通过图表随机冲浪。增加迭代次数会给出越来越准确的估计，即冲浪者落在每个页面上的概率—*页面排名*。'
- en: '*Visualizing the histogram.* [RandomSurferHistogram.java](RandomSurferHistogram.java.html)
    draws a frequency histogram that eventually stabilizes to the page ranks.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*可视化直方图.* [RandomSurferHistogram.java](RandomSurferHistogram.java.html) 绘制一个频率直方图，最终稳定到页面排名。'
- en: '![Page ranks and histogram](../Images/37169d6fa7f266c39fe507d74c16276c.png)'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![页面排名和直方图](../Images/37169d6fa7f266c39fe507d74c16276c.png)'
- en: Mixing a Markov chain.
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 混合马尔可夫链。
- en: Directly simulating the behavior of a random surfer to understand the structure
    of the web is appealing, but can be too time consuming. Fortunately, we can compute
    the same quantity more efficiently by using linear algebra.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 直接模拟随机冲浪者的行为以了解网页结构是吸引人的，但可能太耗时。幸运的是，我们可以通过使用线性代数更有效地计算相同的数量。
- en: '*Squaring a Markov chain.* What is the probability that the random surfer will
    move from page *i* to page *j* in two moves? The first move goes to an intermediate
    page *k*, so we calculate the probability of moving from *i* to *k* and then from
    *k* to *j* for all possible *k* and add up the results. This calculation is one
    that we have seen before—matrix–matrix multiplication.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*马尔可夫链的平方.* 随机冲浪者在两步内从页面 *i* 移动到页面 *j* 的概率是多少？第一步移动到一个中间页面 *k*，因此我们计算从 *i*
    移动到 *k*，然后从 *k* 移动到 *j* 的概率，对所有可能的 *k* 进行计算并累加结果。这个计算我们之前见过—矩阵-矩阵乘法。'
- en: '![Squaring a Markov chain](../Images/f01f186a11f7d8813b1f946c41cf77c2.png)'
  id: totrans-32
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![马尔可夫链的平方](../Images/f01f186a11f7d8813b1f946c41cf77c2.png)'
- en: '*The power method.* We might then calculate the probabilities for three moves
    by multiplying by `p[][]` again, and for four moves by multiplying by `p[][]`
    yet again, and so forth. However, matrix–matrix multiplication is expensive, and
    we are actually interested in a *vector*–matrix calculation.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*幂法.* 然后我们可以通过再次乘以 `p[][]` 计算三次移动的概率，通过再次乘以 `p[][]` 计算四次移动的概率，依此类推。然而，矩阵-矩阵乘法是昂贵的，而我们实际上对一个
    *向量*–矩阵计算感兴趣。'
- en: '![Power method](../Images/409d64cb2e26869f4254e245dfde7da6.png)'
  id: totrans-34
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![幂法](../Images/409d64cb2e26869f4254e245dfde7da6.png)'
- en: '[Markov.java](Markov.java.html) is an implementation that you can use to check
    convergence for our example. For instance, it gets the same results (the page
    ranks accurate to two decimal places) as [RandomSurfer.java](RandomSurfer.java.html),
    but with just 20 vector–matrix multiplications.'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[Markov.java](Markov.java.html) 是一个实现，你可以用它来检查我们示例的收敛性。例如，它得到与 [RandomSurfer.java](RandomSurfer.java.html)
    相同的结果（页面排名精确到小数点后两位），但只需进行 20 次向量-矩阵乘法。'
- en: Q&A
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 问答
- en: '**Q.** What should row of transition matrix be if some page has no outlinks?'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 如果某个页面没有外链，转移矩阵的行应该是什么？'
- en: '**A.** To make the matrix stochastic (all rows sum to 1), make that page equally
    likely to transition to every other page.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 为了使矩阵随机（所有行之和为 1），使得该页面等可能地转移到每个其他页面。'
- en: '**Q.** How long until convergence of [Markov.java](Markov.java.html)?'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** [Markov.java](Markov.java.html) 收敛需要多长时间？'
- en: '**A.** Brin and Page report that only 50 to 100 iterations are need before
    the iterates converge. Convergence depends on the second largest eigenvalue of
    P λ[2]. The link structure of the Web is such λ[2] is (approximately) equal to
    α = 0.9. Since 0.9^(50) = 0.005153775207, we expect to have 2-3 digits of accuracy
    after 50 iterations.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** Brin 和 Page 报告说，在迭代收敛之前只需要 50 到 100 次迭代。收敛取决于 P λ[2] 的第二大特征值。Web 的链接结构使得
    λ[2] 大约等于 α = 0.9。由于 0.9^(50) = 0.005153775207，我们预计在 50 次迭代后会有 2-3 位有效数字。'
- en: '**Q.** Any recommended readings on PageRank?'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 有关 PageRank 的推荐阅读吗？'
- en: '**A.** Here''s a nice article from AMS describing [PageRank](http://www.ams.org/featurecolumn/archive/pagerank.html).'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 这里有一篇关于 [PageRank](http://www.ams.org/featurecolumn/archive/pagerank.html)
    的精彩文章。'
- en: '**Q.** Why add the random page / teleportation component?'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 为什么要添加随机页面 / 传送组件？'
- en: '**A.** If not, random surfer can get stuck in part of the graph. More technical
    reason: makes the Markov chain ergodic.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 如果不这样做，随机冲浪者可能会陷入图表的某个部分。更多技术原因：使马尔可夫链遍历。'
- en: Exercises
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Creative Exercises
  id: totrans-46
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
- en: Web Exercises
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网页练习
- en: '**Chutes and Ladders.** Model the classic Hasbro board games *Chutes and Ladders*
    as a Markov chain. Determine the probability that the first player wins if there
    are two players.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**滑梯与梯子.** 将经典的 Hasbro 棋盘游戏 *滑梯与梯子* 建模为马尔可夫链。确定如果有两名玩家，第一名玩家获胜的概率。'
