- en: '1.6   Case Study:   Random Web Surfer'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://introcs.cs.princeton.edu/java/16pagerank](https://introcs.cs.princeton.edu/java/16pagerank)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Communicating across the web has become an integral part of everyday life. This
    communication is enabled in part by scientific studies of the structure of the
    web. We consider a simple model, known as the *random-surfer model*. We consider
    the web to be a fixed set of pages, with each page containing a fixed set of *hyperlinks*,
    and each link a reference to some other page. We study what happens to a person
    (the random surfer) who randomly moves from page to page, either by typing a page
    name into the address bar or by clicking a link on the current page.
  prefs: []
  type: TYPE_NORMAL
- en: '![Tiny web graph](../Images/36d846d05957d792bcefd1fae91fad0d.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: The model.
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The crux of the matter is to specify what it means to randomly move from page
    to page. The following intuitive *90–10 rule* captures both methods of moving
    to a new page: Assume that 90 per cent of the time the random surfer clicks a
    random link on the current page (each link chosen with equal probability) and
    that 10 percent of the time the random surfer goes directly to a random page (all
    pages on the web chosen with equal probability).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can immediately see that this model has flaws, because you know from your
    own experience that the behavior of a real web surfer is not quite so simple:'
  prefs: []
  type: TYPE_NORMAL
- en: No one chooses links or pages with equal probability.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no real potential to surf directly to each page on the web.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The 90–10 (or any fixed) breakdown is just a guess.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It does not take the back button or bookmarks into account.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Despite these flaws, the model is sufficiently rich that computer scientists
    have learned a great deal about properties of the web by studying it.
  prefs: []
  type: TYPE_NORMAL
- en: Input format.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We assume that there are *n* web pages, numbered from 0 to *n*−1, and we represent
    links with ordered pairs of such numbers, the first specifying the page containing
    the link and the second specifying the page to which it refers. The input format
    we adopt is an integer (the value of *n*) followed by a sequence of pairs of integers
    (the representations of all the links).
  prefs: []
  type: TYPE_NORMAL
- en: '![Input format](../Images/213cf878cb8f9e27b7619485ccd9ade0.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: The data files [tiny.txt](tiny.txt) and [medium.txt](medium.txt) are two simple
    examples.
  prefs: []
  type: TYPE_NORMAL
- en: Transition matrix.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We use a two-dimensional matrix, which we refer to as the *transition matrix*,
    to completely specify the behavior of the random surfer. With *n* web pages, we
    define an *n*-by-*n* matrix such that the entry in row *i* and column *j* is the
    probability that the random surfer moves to page *j* when on page *i*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Transition matrix computation](../Images/3ba0ba65aadd08dbd843c9e738f45fd2.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: '[Transition.java](Transition.java.html) is a filter that reads links from standard
    input and produces the corresponding transition matrix on standard output.'
  prefs: []
  type: TYPE_NORMAL
- en: Simulation.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[RandomSurfer.java](RandomSurfer.java.html) simulates the behavior of the random
    surfer. It reads a transition matrix and surfs according to the rules, starting
    at page 0 and taking the number of moves as a command-line argument. It counts
    the number of times that the surfer visits each page. Dividing that count by the
    number of moves yields an estimate of the probability that a random surfer winds
    up on the page. This probability is known as the page''s *rank*.'
  prefs: []
  type: TYPE_NORMAL
- en: '*One random move.* The key to the computation is the random move, which is
    specified by the transition matrix: each row represents a *discrete probability
    distribution*—the entries fully specify the behavior of the random surfer''s next
    move, giving the probability of surfing to each page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Generating a random integer from a discrete distribution](../Images/45f78b521ddd37b2d412a9cc60b0ca55.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '[RandomSurfer.java](../22library/RandomSurfer.java.html) is an improved version
    that uses two library methods that we will introduce in Section 2.2.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Markov chains.* The random process that describes the surfer''s behavior is
    known as a *Markov chain*. Markov chains are widely applicable, well-studied,
    and have many remarkable and useful properties. For example, a basic limit theorem
    for Markov chains says that our surfer could start *anywhere*, because the probability
    that a random surfer eventually winds up on any particular page is the same for
    all starting pages!'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Page ranks.* The random-surfer simulation is straightforward: it loops for
    the indicated number of moves, randomly surfing through the graph. Increasing
    the number of iterations gives increasingly accurate estimates of the probability
    that the surfer lands on each page—the *page ranks*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Visualizing the histogram.* [RandomSurferHistogram.java](RandomSurferHistogram.java.html)
    draws a frequency histogram that eventually stabilizes to the page ranks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Page ranks and histogram](../Images/37169d6fa7f266c39fe507d74c16276c.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: Mixing a Markov chain.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Directly simulating the behavior of a random surfer to understand the structure
    of the web is appealing, but can be too time consuming. Fortunately, we can compute
    the same quantity more efficiently by using linear algebra.
  prefs: []
  type: TYPE_NORMAL
- en: '*Squaring a Markov chain.* What is the probability that the random surfer will
    move from page *i* to page *j* in two moves? The first move goes to an intermediate
    page *k*, so we calculate the probability of moving from *i* to *k* and then from
    *k* to *j* for all possible *k* and add up the results. This calculation is one
    that we have seen before—matrix–matrix multiplication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Squaring a Markov chain](../Images/f01f186a11f7d8813b1f946c41cf77c2.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*The power method.* We might then calculate the probabilities for three moves
    by multiplying by `p[][]` again, and for four moves by multiplying by `p[][]`
    yet again, and so forth. However, matrix–matrix multiplication is expensive, and
    we are actually interested in a *vector*–matrix calculation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Power method](../Images/409d64cb2e26869f4254e245dfde7da6.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '[Markov.java](Markov.java.html) is an implementation that you can use to check
    convergence for our example. For instance, it gets the same results (the page
    ranks accurate to two decimal places) as [RandomSurfer.java](RandomSurfer.java.html),
    but with just 20 vector–matrix multiplications.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Q&A
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Q.** What should row of transition matrix be if some page has no outlinks?'
  prefs: []
  type: TYPE_NORMAL
- en: '**A.** To make the matrix stochastic (all rows sum to 1), make that page equally
    likely to transition to every other page.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Q.** How long until convergence of [Markov.java](Markov.java.html)?'
  prefs: []
  type: TYPE_NORMAL
- en: '**A.** Brin and Page report that only 50 to 100 iterations are need before
    the iterates converge. Convergence depends on the second largest eigenvalue of
    P λ[2]. The link structure of the Web is such λ[2] is (approximately) equal to
    α = 0.9. Since 0.9^(50) = 0.005153775207, we expect to have 2-3 digits of accuracy
    after 50 iterations.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Q.** Any recommended readings on PageRank?'
  prefs: []
  type: TYPE_NORMAL
- en: '**A.** Here''s a nice article from AMS describing [PageRank](http://www.ams.org/featurecolumn/archive/pagerank.html).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Q.** Why add the random page / teleportation component?'
  prefs: []
  type: TYPE_NORMAL
- en: '**A.** If not, random surfer can get stuck in part of the graph. More technical
    reason: makes the Markov chain ergodic.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Creative Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Web Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Chutes and Ladders.** Model the classic Hasbro board games *Chutes and Ladders*
    as a Markov chain. Determine the probability that the first player wins if there
    are two players.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
