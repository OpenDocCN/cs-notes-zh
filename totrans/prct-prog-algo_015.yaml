- en: 3.1   Using Data Types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 原文：[https://introcs.cs.princeton.edu/java/31datatype](https://introcs.cs.princeton.edu/java/31datatype)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: A *data type* is a set of values and a set of operations defined on those values.
    The primitive data types that you have been using are supplemented in Java by
    extensive libraries of *reference types* that are tailored for a large variety
    of applications. In this section, we consider reference types for string processing
    and image processing.
  prefs: []
  type: TYPE_NORMAL
- en: Strings.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You have already been using a data type that is not primitive—the `String`
    data type, whose values are sequences of characters. We specify the behavior of
    a data type in an *application programming interface* (API). Here is a partial
    API for Java’s [String](https://docs.oracle.com/javase/8/docs/api/java/lang/String.html)
    data type:'
  prefs: []
  type: TYPE_NORMAL
- en: '![String API](../Images/09b67650293dc171af32e34b2ad85239.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: The first entry, with the same name as the class and no return type, defines
    a special method known as a *constructor*. The other entries define *instance
    methods* that can take arguments and return values.
  prefs: []
  type: TYPE_NORMAL
- en: '![using a reference data type](../Images/bc429022eaeee8d06e298c061ec793c6.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: '*Declaring variables.* You declare variables of a reference type in precisely
    the same way that you declare variables of a primitive type. A declaration statement
    does not create anything; it just says that we will use the variable name `s`
    to refer to a `String` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Creating objects.* Each data-type value is stored in an *object*. When a client
    invokes a constructor, the Java system creates (or *instantiates*) an individual
    object (or *instance*). To invoke a constructor, use the keyword `new`; followed
    by the class name; followed by the constructor’s arguments, enclosed in parentheses
    and separated by commas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Invoking instance methods.* The most important difference between a variable
    of a reference type and a variable of a primitive type is that you can use reference-type
    variables to invoke the *instance methods* that implement data-type operations
    (in contrast to the built-in syntax involving operators such as `+`* that we used
    with primitive types).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we consider various string-processing examples.
  prefs: []
  type: TYPE_NORMAL
- en: '*Data-type operations.* The following examples illustrate various operations
    for the `String` data type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![String operations](../Images/8f52a18880c32fe21d3553ecde86aeec.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*Code fragments.* The following code fragments illustrate the use of various
    string-processing methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![String code fragments](../Images/d3ca62286f24d24eda553372739c3df0.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*Genomics.* Biologists use a simple model to represent the building blocks
    of life, in which the letters A, C, G, and T represent the four bases in the DNA
    of living organisms. A *gene* is a substring that represents a functional unit
    of critical importance in understanding life processes. [PotentialGene.java](PotentialGene.java.html)
    takes a DNA string as an argument and determines whether it corresponds to a potential
    gene based on the following criteria:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It begins with the *start codon* ATG.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Its length is a multiple of 3.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It ends with one of the *stop codons* TAG, TAA, or TGA.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: It has no intervening stop codons.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '## Color. ![Color values](../Images/3d5356fb426e14fd698262b8e4064c91.png) Java''s
    [Color](https://docs.oracle.com/javase/8/docs/api/java/awt/Color.html) data type  represents
    color values using the [RGB color model](https://en.wikipedia.org/wiki/RGB_color_model)
    where a color is defined by three integers (each between 0 and 255) that represent
    the intensity of the red, green, and blue components of the color. Other color
    values are obtained by mixing the red, blue and green components.'
  prefs: []
  type: TYPE_NORMAL
- en: The `Color` data type has a constructor that takes three integer arguments.
    For example, you can write
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'to create objects whose values represent pure red and the blue used to print
    this book. The following table summarizes the methods in the [Color](https://docs.oracle.com/javase/8/docs/api/java/awt/Color.html)
    API that we use in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Color API](../Images/129fd5fccf4dbda108d78d35d70f8ad9.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Here are some example clients that use the `Color` data type.
  prefs: []
  type: TYPE_NORMAL
- en: '*Albers squares.* [AlbersSquares.java](AlbersSquares.java.html) displays the
    two colors entered in RGB representation on the command line in the format developed
    in the 1960s by Josef Albers that revolutionized the way that people think about
    color.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Albers squares](../Images/788fdd57a9242dbc96d9d88261e3c0f6.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*Luminance.* The quality of the images on modern displays such as LCD monitors,
    plasma TVs, and cell-phone screens depends on an understanding of a color property
    known as *monochrome luminance*, or effective brightness. It is a linear combination
    of the three intensities: if a color''s red, green and blue values are *r*, *g*,
    and *b*, respectively then its luminance is defined by the equation'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: $$Y = 0.299r + 0.587g + 0.114b$$
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: '*Grayscale.* ![converting a color to grayscale](../Images/6d48c5de279e726e26c7962fc76ee185.png)
    The RGB color model has the property that when all three color intensities are
    the same, the resulting color is on a grayscale that ranges from black (all 0s)
    to white (all 255s).  A simple way to convert a color to grayscale is to replace
    the color with a new one whose red, green, and blue values equal its luminance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Color compatibility.* The luminance value is also crucial in determining whether
    two colors are compatible, in the sense that printing text in one of the colors
    on a background in the other color will be readable. A widely used rule of thumb
    is that the difference between the luminance of the foreground and background
    colors should be at least 128.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![color compatibility](../Images/05d73c4b35e1f96b66018203cbeab030.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '[Luminance.java](Luminance.java.html) is a static method library that we can
    use to convert to grayscale and test whether two colors are compatible. ## Image
    processing. ![anatomy of a digital image](../Images/8be79614dad0b3fdd34c5048cb4e2284.png)
    A *digital image* is a rectangular grid of *pixels* (picture elements), where
    the color of each pixel is individually defined. Digital images are sometimes
    referred to as *raster* or *bitmapped* images. In contrast, the types of images
    that we produce with `StdDraw` (which involved geometric objects) are referred
    to as *vector* images.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The [Picture](http://introcs.cs.princeton.edu/java/stdlib/javadoc/Picture.html)
    data type allows you to manipulate digital images. The set of values is a two-dimensional
    matrix of `Color` values, and the operations are what you might expect: create
    an image (either blank or from a file), set the value of a pixel to a given color,
    and extract the color of a given pixel. The following API summarizes the available
    operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Picture API](../Images/9afc4d0e8ecc80dece20adad0ef7cba8.png)'
  prefs:
  - PREF_BQ
  type: TYPE_IMG
- en: Most image-processing programs are filters that scan through all of the pixels
    in a source image and then perform some computation to determine the color of
    each pixel in a target image.
  prefs: []
  type: TYPE_NORMAL
- en: '*Grayscale.* [Grayscale.java](Grayscale.java.html) converts an image from color
    to grayscale.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ![baboon](../Images/cf5710079eb12fddce40cbfb49066ef2.png) |      | ![grayscale
    baboon](../Images/d929bca627edbc9b4dd973a2f779a942.png) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '*Scale.* [Scale.java](Scale.java.html) takes the name of an image file and
    two integers (width *w* and height *h*) as command-line arguments, scales the
    picture to *w*-by-*h*, and displays both images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '| ![grayscale baboon](../Images/f32d9f3edfbec865ea5ce64bd48a3fd7.png) *600-by-300*
    |      | ![200-by-400](../Images/db971affee53184e3223577e7c2bb36c.png) *200-by-400*
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '*Fade effect.* [Fade.java](Fade.java.html) takes an integer *n* and the names
    of the source and target images as command-line arguments and fades from the source
    image to the target image in *n* steps. It uses a *linear interpolation* strategy,
    where each pixel in image *i* is a weighted average of the corresponding pixels
    in the source and target images.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Input and output revisited.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In [Section 1.5](../15inout) you learned how to read and write numbers and text
    using standard input, output, and drawing. These restrict us to working with just
    one input file, one output file, and one drawing for any given program. With object-oriented
    programming, we consider data types that allow us to work with multiple input
    streams, output streams, and drawings within one program.
  prefs: []
  type: TYPE_NORMAL
- en: '*Input stream data type.* [In](http://introcs.cs.princeton.edu/java/stdlib/javadoc/In.html)
    is an object-oriented version of [StdIn](http://introcs.cs.princeton.edu/java/stdlib/javadoc/StdIn.html)
    that supports reading numbers and text from data from files and websites as well
    as the standard input stream.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![In API](../Images/596f8eb243ceb57c97fd392c85d04ebb.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*Output stream data type.* [Out](http://introcs.cs.princeton.edu/java/stdlib/javadoc/Out.html)
    is an object-oriented version of [StdOut](http://introcs.cs.princeton.edu/java/stdlib/javadoc/StdOut.html)
    that supports printing text to a variety of output streams, including files and
    standard output.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Out API](../Images/0610b815cb531c4a511258403147bd02.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '*File concatenation.* [Cat.java](Cat.java.html) reads several files specified
    as command-line arguments, concatenates them, and prints the result to a file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Screen scraping.* [StockQuote.java](StockQuote.java.html) takes the the symbol
    of New York Stock Exchange stock as a command-line argument and prints its current
    trading price. It uses a technique known as *screen scraping*, in which the goal
    is to extract some information from a web page with a program. To report the current
    stock price of Google (NYSE symbol = GOOG), it reads the Web page `http://finance.yahoo.com/quote/GOOG`.
    Then, it identifies the relevant information using `indexOf()` and `substring()`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Extracting data.* [Split.java](Split.java.html) uses multiple output streams
    to split a CSV file into separate files, one for each comma-delimited field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Drawing data type.* [Draw](http://introcs.cs.princeton.edu/java/stdlib/javadoc/Draw.html)
    is an object-oriented version of [StdDraw](http://introcs.cs.princeton.edu/java/stdlib/javadoc/StdDraw.html)
    that supporting drawing to more than one canvas in the same program.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Properties of reference types.
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We summarize some of the essential properties of reference types.
  prefs: []
  type: TYPE_NORMAL
- en: '*Aliasing.* An assignment statement with a reference type creates a second
    copy of the reference. The assignment statement does not create a new object,
    just another reference to an existing object. This situation is known as *aliasing*:
    both variables refer to the same object. As an example, consider the following
    code fragment:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the second assignment statement, variables `a` and `b` refer to the same
    `Picture` object.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Pass by value.* When you call a method with arguments, the effect in Java
    is as if each argument were to appear on the right-hand side of an assignment
    statement with the corresponding argument name on the left-hand side. That is,
    Java passes a *copy* of the argument value from the caller to the method. If the
    argument value is a primitive type, Java passes a copy of that value; if the argument
    value is an object reference, Java passes a copy of the object reference. This
    arrangement is known as *pass by value*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Arrays are objects.* In Java, arrays are objects. As with strings, special
    language support is provided for certain operations on arrays: declarations, initialization,
    and indexing. As with any other object, when we pass an array to a method or use
    an array variable on the right-hand side of an assignment statement, we are making
    a copy of the array reference, not a copy of the array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Arrays of objects.* When we create an array of objects, we do so in two steps:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create the array by using `new` and the square bracket syntax for array creation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Create each object in the array, by using `new` to call a constructor.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, the following code creates an array of two `Color` objects:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Safe pointers.* In Java, there is only one way to create a reference (with
    `new`) and only one way to manipulate that reference (with an assignment statement).
    Java references are known as *safe pointers*, because Java can guarantee that
    each reference points to an object of the specified type (and not to an arbitrary
    memory address).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Orphaned objects.* The ability to assign different objects to a reference
    variable creates the possibility that a program may have created an object that
    it can no longer reference. Such an object is said to be *orphaned*. As an example,
    consider the following code fragment:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After the final assignment statement, not only do `a` and `b` refer to the same
    `Color` object (sienna), but also there is no longer a reference to the `Color`
    object that was created and usedto initialize `b` (yellow).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Garbage collection.* One of Java’s most significant features is its ability
    to automatically manage memory. The idea is to free the programmer from the responsibility
    of managing memory by keeping track of orphaned objects and returning the memory
    they use to a pool of free memory. Reclaiming memory in this way is known as *garbage
    collection*, and Java’s safe pointer policy enables it to do this efficiently.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a function `reverse()` that takes a string as an argument and returns
    a string that contains the same sequence of characters as the argument string
    but in reverse order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*: [ReverseString.java](ReverseString.java.html).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Write a program [FlipX.java](FlipX.java.html) that takes the name of an image
    file as a command-line argument and flips the image horizontally.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ![peppers](../Images/424362da382564bd6db4dc56e6318268.png) |      | ![flip
    peppers](../Images/b7f3822bba203135088b95cf602d1d9f.png) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Write a program [ColorSeparation.java](ColorSeparation.java.html) that takes
    the name of an image file as a command-line argument, and creates and shows three
    `Picture` objects, one that contains only the red components, one for green, and
    one for blue.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ![baboon red](../Images/7a1fb72b0feac7b53c3178cc2d99a52e.png) |      | ![baboon
    green](../Images/3b80f0af885b3df0c133aa7c2ce1d38b.png) |      | ![baboon blue](../Images/c8a3bf6d99a3f8b6af6288bdaf29baaa.png)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Write a static method `isValidDNA()` that takes a string as its argument and
    returns `true` if and only if it is composed entirely of the characters `A`, `T`,
    `C`, and `G`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Write a function `complementWatsonCrick()` that takes a DNA string as its arguments
    and returns its *Watson–Crick complement*: replace `A` with `T`, `C` with `G`,
    and vice versa.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What does the following code fragment print?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: `hello`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What does the following code fragment print?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: `Hello, World`. String objects are immutable.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A string `s` is a *circular shift* of a string `t` if it matches when the characters
    of one string are circularly shifted by some number of positions. For example,
    `ACTGACG` is a circular shift of `TGACGAC`, and vice versa. Detecting this condition
    is important in the study of genomic sequences. Write a function `isCircularShift()`
    that checks whether two given strings `s` and `t` are circular shifts of one another.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What does the following recursive function return?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: the reverse of its argument string.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Suppose that `a[]` and `b[]` are both integer arrays consisting of millions
    of integers. What does the follow code do, and how long does it take?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: It swaps the arrays, but it does so by copying object references,
    so that it is not necessary to copy millions of values.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Describe the effect of the following function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: It has no effect because Java passes object references by value.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Creative Exercises
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Kamasutra cipher.** Write a filter [KamasutraCipher.java](KamasutraCipher.java.html)
    that takes two strings as command-line argument (the *key* strings), then reads
    strings (separated by whitespace) from standard input, substitutes for each letter
    as specified by the key strings, and prints the result to standard output. This
    operation is the basis for one of the earliest known cryptographic systems. The
    condition on the key strings is that they must be of equal length and that any
    letter in standard input must appear in exactly one of them. For example, if the
    two keys are `THEQUICKBROWN` and `FXJMPSVLAZYDG`, then we make the table'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: which tells us that we should substitute F for T, T for F, H for X, X for H,
    and so forth when filtering standard input to standard output. The message is
    encoded by replacing each letter with its pair. For example, the message `MEET
    AT ELEVEN` is encoded as `QJJF BF JKJCJG`. The person receiving the message can
    use the same keys to get the message back.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Color study.** Write a program [ColorStudy.java](ColorStudy.java.html) that
    displays the color study shown at right, which gives Albers squares corresponding
    to each of the 256 levels of blue (blue-to-white in row-major order) and gray
    (black-to-white in column-major order) that were used to print this book.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![color study](../Images/db237fae8d0f0003d09e993f8e041b17.png)'
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
- en: '**Tile.** Write a program [Tile.java](Tile.java.html) that takes the name of
    an image file and two integers *m* and *n* as command-line arguments and creates
    an *m*-by-*n* tiling of the image.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ![2-by-3 baboon](../Images/320c62720d82e790f962e422ad71ffbc.png) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**Rotation filter.** Write a program [Rotation.java](Rotation.java.html) that
    takes two command-line arguments (the name of an image file and a real number
    \(\theta\)) and rotates the image \(\theta\)) degrees counterclockwise. To rotate,
    copy the color of each pixel \((s_i, s_j)\) in the source image to a target pixel
    \((t_i, t_j)\) whose coordinates are given by the following formulas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: $$ \begin{align} t_i \;&=\; (s_i - c_j) \cos \theta - (s_j - c_j) \sin \theta
    + c_j \\[1ex] t_j \;&=\; (s_i - c_j) \sin \theta + (s_j - c_j) \cos \theta + c_j
    \end{align} $$
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: where \((c_i, c_j)\) is the center of the image.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ![baboon](../Images/cf5710079eb12fddce40cbfb49066ef2.png) |      | ![rotated
    baboon](../Images/e72ff459f8ff0fee17b525bf6dc2e3b0.png) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**Swirl filter.** Creating a swirl effect is similar to rotation, except that
    the angle changes as a function of distance to the center of the image. Use the
    same formulas as in the previous exercise, but compute \(\theta\) as a function
    of \((s_i, s_j)\), specifically \(\pi/256\) times the distance to the center.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ![baboon](../Images/cf5710079eb12fddce40cbfb49066ef2.png) |      | ![baboon
    swirl](../Images/f0561ded245230dfbe7bb16f080610cb.png) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**Wave filter.** Write a filter [Wave.java](Wave.java.html) like those in the
    previous two exercises that creates a wave effect, by copying the color of each
    pixel \((s_i, s_j)\) in the source image to a target pixel \((t_i, t_j)\), where'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: $$ \begin{align} t_i \;&=\; s_i \\[1ex] t_j \;&=\; s_j + 20 \sin(2 \pi s_j /
    64) \end{align} $$
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Add code to take the amplitude (20 in the accompanying figure) and the frequency
    (64 in the accompanying figure) as command-line arguments.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ![wavy baboon](../Images/1041215f25967cf479478fa52abffa6e.png) |      | ![wavy
    baboon](../Images/4504b12ddd232cd648b276711014dcd8.png) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**Glass filter.** Write a program [Glass.java](Glass.java.html) that takes
    the name of an image file as a command-line argument and applies a *glass filter*:
    set each pixel *p* to the color of a random neighboring pixel (whose pixel coordinates
    both differ from *p*’s coordinates by at most 5).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ![baboon](../Images/cf5710079eb12fddce40cbfb49066ef2.png) |      | ![baboon
    through glass](../Images/af4db0bf2e50e622a2265bc885125069.png) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '![digital zoom](../Images/ef00393817699bafdeef039168db920b.png)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '**Digital zoom.** Write a program [Zoom.java](Zoom.java.html) that takes the
    name of an image file and three numbers *s*, *x*, and *y* as command-line arguments,
    and shows an output image that zooms in on a portion of the input image. The numbers
    are all between 0 and 1, with *s* to be interpreted as a scale factor and (*x*,
    *y*) as the relative coordinates of the point that is to be at the center of the
    output image. Use this program to zoom in on a relative or pet in some digital
    photo on your computer.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Web Exercises (String Processing)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a function that takes as input a string and returns the number of occurrences
    of the letter `e`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Give a one line Java code fragment to replace all periods in a string with
    commas. *Answer*: `s = s.replace(''.'', '','')`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't use `s = s.replaceAll(".", ",")`. The `replaceAll()` method uses *regular
    expressions* where `"."`has a special meaning.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Replace all tabs with four spaces. *Answer*: `s = s.replace("\t", "    ")`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write a program that takes a command line input string s, reads strings from
    standard input, and prints the number of times s appears. *Hint*: use don''t forget
    to use `equals` instead of `==` with references.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program that reads in the name of a month (3 letter abbreviation) as
    a command-line argument and prints the number of days in that month in a non leap
    year.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write a program [Squeeze.java](Squeeze.java.html) that takes as input a string
    and removes adjacent spaces, leaving at most one space in-a-row.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Which one or more of the following converts all of the strings in the array
    `a` to upper case?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Answer*: only the last one.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Describe the string that the following function returns, given a positive integer
    `n`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution* The string of length `n` consisting only of the character `x`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Write a function that takes a string `s` and an integer `n` and returns a new
    string `t` of length exactly `n` that consists of `s` (truncated if its length
    is greater than `n`) followed by a sequence of `'-'` characters (if the length
    of `s` is less than `n`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the following recursive function return, given two strings `s` and
    `t` of the same length?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Solution*: Perfect shuffle of the characters of s and t.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Write a program that reads in a string and prints the first character that
    appears exactly once in the string. Ex: ABCDBADDAB -> C.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Given a string, create a new string with all the consecutive duplicates removed.
    Ex: ABBCCCCCBBAB -> ABCBAB.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a function that takes two string arguments s and t, and returns the index
    of the first character in s that appears in ts (or -1 if no character in s appears
    in t).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Given a string `s`, determine whether it represents the name of a web page.
    Assume that any string starting with `http://` is a web page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Solution*: `if (s.startsWith("http://"))`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Given a string `s` that represents the name of a web page, break it up into
    pieces, where each piece is separated by a period, e.g., `http://www.cs.princeton.edu`
    should be broken up into `www`, `cs`, `princeton`, and `edu`, with the `http://`
    part removed. Use either the `split()` or `indexOf()` methods.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Given a string `s` that represents the name of a file, write a code fragment
    to determine its file extension. The *file extension* is the substring following
    the last period. For example, the file type of `monalisa.jpg` is `jpg`, and the
    file type of `mona.lisa.png` is `png`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '*Library solution*: this solution is used in `Picture.java` to save an image
    to the file of the appropriate type.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Given a string `s` that represents the name of a file, write a code fragment
    to determine its directory portion. This is the prefix that ends with the last
    `/` character (the directory delimiter); if there is no such `/`, then it is the
    empty string. For example, the directory portion of `/Users/wayne/monalisa.jpg`
    is `/Users/wayne/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Given a string `s` that represents the name of a file, write a code fragment
    to determine its base name (filename minus any directories). For `/Users/wayne/monalisa.jpg`,
    it is `monalisa.jpg`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program that reads in text from standard input and prints it back out,
    replacing all single quotation marks with double quotation marks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program `Paste.java` that takes an arbitrary number of command line
    inputs and concatenates the corresponding lines of each file, and writes the results
    to standard output. (Typically each line in given file has the same length.) Counterpart
    of the program `Cat.java`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What does the program [LatinSquare.java](LatinSquare.java.html) print when N
    = 5?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A Latin square of order N is an N-by-N array consisting of N different symbols,
    such that each symbol appears exactly once in each row and column. Latin squares
    are useful in statistical design and cryptography.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What does the following code fragment print?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Answer*: `Hello World`. The methods `toUpperCase` and `substring` return the
    resulting strings, but the program ignores these so `s` is never changed. To get
    it to print `WORLD`, use `s = s.toUpperCase()` and `s = s.substring(6, 11)`.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What happens when you execute the following code fragment?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '*Answer*: you get a `NullPointerException` since `s` is `null` and you are
    attempting to dereference it.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What are the values of x and y after the two assignment statements below?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: What does the following statement do where `c` if of type `char`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Answer: prints `true` if `c` is an uppercase or lowercase letter, and `false`
    otherwise.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Write an expression that tests whether or not a character represents one of
    the digits `'0'` through `'9'` without using any library functions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write a program [WidthChecker.java](WidthChecker.java.html) that takes a command
    line parameter N, reads text from standard input, and prints to standard output
    all lines that are longer than N characters (including spaces).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a program [Hex2Decimal.java](Hex2Decimal.java.html) that converts from
    a hexadecimal string (using A-F for the digits 11-15) to decimal.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**wget.** Write a program [Wget.java](Wget.java.html) that takes the name of
    a URL as a command-line argument and saves the referenced file using the same
    filename.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Capitalize.** Write a program [Capitalize.java](Capitalize.java.html) that
    reads in text from standard input and capitalizes each word (make first letter
    uppercase and make the remaining letters lowercase).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Shannon''s entropy experiment.** Recreate Shannon''s experiment on the entropy
    of the English language by listing a number of letters in a sentence and prompting
    the user for the next symbol. Shannon concluded that there is approximately 1.1
    bits of info per letter in the alphabet.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Scrambled text.** Some cognitive psychologists believe that people recognize
    words based on their shape.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: to a rscheearch at an Elingsh uinervtisy, it deosn't mttaer in waht oredr the
    ltteers in a wrod are, the olny iprmoetnt tihng is taht frist and lsat ltteer
    is at the rghit pclae. The rset can be a toatl mses and you can sitll raed it
    wouthit porbelm. Tihs is bcuseae we do not raed ervey lteter by itslef but the
    wrod as a wlohe.
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
- en: Write a program that reads in text from standard input and prints the text back
    out, but shuffles the internal letters in each word. Write and use a function
    `scramble()` that takes as input a string and returns another string with the
    internal letters in random order. Use the shuffling algorithm in [Shuffle.java](../21function/Shuffle.java.html)
    for the shuffling part.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Date format conversion.** Write a program to read in a data of the form 2003-05-25
    and convert it to 5/25/03.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Frequency analysis of English text.** Write a program `LetterFrequency.java`
    that reads in text from standard input (e.g., [Moby Dick](../data/mobydick.txt))
    and calculate the fraction of times each of the 26 lowercase letters appears.
    Ignore uppercase letters, punctuation, whitespace, etc. in your analysis. Use
    `CharStdIn.java` from Section 2.4 to read process the text file.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Print longest word(s).** Repeat the previous exercise, but print out all
    of the longest words if there is a tie, say up to a maximum of 10 words. Use an
    array of strings to store the current longest words.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Test if two files are equal.** Write a program that takes the name of two
    text files as command line inputs and checks if their contents are identical.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Parsing command-line options.** Unix command line programs typically support
    *flags* which configure the behavior of a program to produce different output,
    e.g., "wc -c". Write a program that takes any number of flags from the command
    line and runs whichever options the user specifies. To check options, use something
    like `if (s.equals("-v"))`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Capitalization.** Write a program `Capitalizer.java` that reads in text strings
    from standard input and modifies each one so that the first letter in each word
    is uppercase and all other letters are lowercase.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Railfence transposition cipher.** Write a program `RailFenceEncoder.java`
    that reads in text from standard input and prints the characters in the odd positions,
    followed by the even positions. For example, if the original message is "Attack
    at Dawn", then you should print out "Atc tDwtaka an". This is a crude form of
    cryptography.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Railfence transposition cipher.** Write a program `RailFenceDecoder.java`
    that reads in a message encoded using the railfence transposition cipher and prints
    the original message by reversing the encryption process.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Scytale cipher.** The *scytale cipher* is one of the first cryptographic
    devices used for military purposes. (See The Code Book, p. 8 for a nice picture.)
    It was used by the Spartans in the fifth century BCE. To scramble the text, you
    print out every kth character starting at the beginning, then every kth character
    starting at the second character, and so forth. Write a pair of programs `ScytaleEncoder.java`
    and `ScytaleDecoder.java` that implement this encryption scheme.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Print longest word.** Read a list of words from standard input, and print
    out the longest word. Use the `length` method.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Subsequence.** Given two strings `s` and `t`, write a program [Subsequence.java](Subsequence.java.html)
    that determines whether `s` is a subsequence of `t`. That is, the letters of `s`
    should appear in the same order in `t`, but not necessarily contiguously. For
    example `accag` is a subsequence of `taagcccaaccgg`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Bible codes.** Some religious zealots believe that the Torah contains hidden
    phrases that appear by reading every kth letter, and that such pattern can be
    used to find the Ark of the Covenant, cure cancer, and predict the future. Results
    not based on scientific method and results have been [debunked](http://cs.anu.edu.au/~bdm/dilugim/torah.html)
    by mathematicians and attributed to illicit data manipulation. Using the same
    methodology one can find statistically similar patterns in a Hebrew translation
    of War and Peace.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Word chain checker.** Write a program that reads in a list of words from
    the command line and prints `true` if they form a *word chain* and `false` otherwise.
    In a word chain, adjacent words must differ in exactly one letter, e.g., HEAL,
    HEAD, DEAD, DEED, DEER, BEER.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Haiku detector.** Write a program that reads in text from standard input
    and checks whether it forms a haiku. A haiku consists of three lines containing
    the correct number of syllables (5, 7, and 5, respectively). For the purpose of
    this problem, define a syllable to be any contiguous sequence of consecutive vowels
    (a, e, i, o, u, or y). According to this rule, *haiku* has two syllables and *purpose*
    has three syllables. Of course, the second example is wrong since the e in purpose
    is silent.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**ISBN numbers.** Write a program to check whether an ISBN number is valid.
    Recall check digit. An ISBN number can also have hyphens inserted at arbitrary
    places.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Longest common prefix.** Write a function that takes two input string s and
    t, and returns the longest common prefix of both strings. For example, if s =
    ACCTGAACTCCCCCC and t = ACCTAGGACCCCCC, then the longest common prefix is ACCT.
    Be careful if s and t start with different letters, or if one is a prefix of the
    other.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Longest complemented palindrome.** In DNA sequence analysis, a *complemented
    palindrome* is a string equal to its reverse complement. Adenine (A) and Thymine
    (T) are complements, as are Cytosine (C) and Guanine (G). For example, ACGGT is
    a complement palindrome. Such sequences act as transcription-binding sites and
    are associated with gene amplification and genetic instability. Given a text input
    of N characters, find the longest complemented palindrome that is a substring
    of the text. For example, if the text is `GACACGGTTTTA` then the longest complemented
    palindrome is `ACGGT`. *Hint*: consider each letter as the center of a possible
    palindrome of odd length, then consider each pair of letters as the center of
    a possible palindrome of even length.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Highest density C+G region.** Given a DNA string s of A, C, T, G and a parameter
    L, find a substring of s that contains the highest ratio of C + G characters among
    all substrings that have at least L characters.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Substring of a circular shifts.** Write a function that takes two strings
    `s` and `t`, and returns `true` if `s` is a substring of a circular string `t`,
    and `false` otherwise. For example `gactt` is a substring of the circular string
    `tgacgact`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**DNA to protein.** A protein is a large molecule (polymer) consisting of a
    sequence of amino acids (monomers). Some examples of proteins are: hemoglobin,
    hormones, antibodies, and ferritin. There are 20 different amino acids that occur
    in nature. Each amino acid is specified by three DNA base pairs (A, C, G, or T).
    Write a program to read in a protein (specified by its base pairs) and converts
    it into a sequence of amino acids. Use the following table. For example, the amino
    acid Isoleucine (I) is encode by ATA, ATC, or ATT.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Rosetta stone of life.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '| Amino acid | Abbrev | Abbrev |   | Amino acid | Abbrev | Abbrev |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Alanine | ala | A |  | Lleucine | leu | L |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Arginine | arg | R |  | Lysine | lys | K |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Asparagine | asn | N |  | Methionine | met | M |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Aspartic Acid | asp | D |  | Phenylalanine | phe | F |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Cysteine | cys | C |  | Proline | pro | P |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Glutamic Acid | glu | E |  | Serine | ser | S |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Glutamine | gln | Q |  | Threonine | thr | T |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Glycine | gly | G |  | Tryptophan | trp | W |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Histidine | his | H |  | Tyrosine | tyr | Y |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '| Isoleucine | ile | I |  | Valine | val | V |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**Counter.** Write a program that reads in a decimal string from the command
    line (e.g., 56789) and starts counting from that number (e.g., 56790, 56791, 56792).
    Do not assume that the input is a 32 or 64 bit integer, but rather an arbitrary
    precision integer. Implement the integer using a `String` (not an array).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Arbitrary precision integer arithmetic.** Write a program that takes two
    decimal strings as inputs, and prints their sum. Use a string to represent the
    integer.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Boggle.** The game of Boggle is played on a 4-by-4 grid of characters. There
    are 16 dice, each with 6 letters on the them. Create a 4-by-4 grid, where each
    die appears in one of the cells at random, and each die displays one of the 6
    characters at random.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Generating cryptograms.** A *cryptogram* is obtained by scrambling English
    text by replacing each letter with another letter. Write a program to generate
    a random permutation of the 26 letters and use this to map letters. Give example:
    Don''t scramble punctuation or whitespace.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Scrabble.** Write a program to determine the longest legal Scrabble word
    that can be played? To be legal, the word must be in [The Official Tournament
    and Club Wordlist](../data/scrabble.txt) (TWL98), which consists of all 168,083
    words between 2 and 15 letters in TWL98. The number of tiles representing each
    letter are given in the table below. In addition, there are two *blanks* which
    can be used to represent any letter.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Soundex.** The [soundex algorithm](http://www.archives.gov/research_room/genealogy/census/soundex.html)
    is a method of encoding last names based on the way it sounds rather than the
    way it is spelled. Names that sound the same (e.g., SMITH and SMYTH) would have
    the same soundex encoding. The soundex algorithm was originally invented to simplify
    census taking. It is also used by genealogists to cope with names with alternate
    spellings and by airline receptionists to avoid embarrassment when later trying
    to pronounce a customer''s name.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Write a program [Soundex.java](Soundex.java.html) that reads in two lowercase
    strings as parameters, computes their soundex, and determines if they are equivalent.
    The algorithm works as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Keep the first letter of the string, but remove all vowels and the letters 'h',
    'w', and 'y'.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Assign digits to the remaining letter using the following rules:'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: If two or more consecutive digits are the same, delete all of the duplicates.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Convert the string to four characters: the first character is the first letter
    of the original string, the remaining three characters are the first three digits
    in the string. Pad the string with trailing 0''s if there are not enough digits;
    truncate it if there are too many digits.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Longest word.** Given a dictionary of words and a starting word s, find the
    longest word that can be formed, starting at s, and inserting one letter at a
    time such that each intermediate word is also in the dictionary. For example,
    if the starting word is `cal`, then the following is a sequence of valid words
    `coal`, `coral`, `choral`, `chorale`. [Reference](http://acm.pku.edu.cn/JudgeOnline/showproblem?problem_id=2138).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Phone words.** Write a program `PhoneWords.java` that takes a 7 digit string
    of digits as a command line input, reads in a list of words from standard input
    (e.g., the dictionary), and prints all 7-letter words (or 3-letter words followed
    by 4-letter words) in the dictionary that can be formed using the standard phone
    rules, e.g., 266-7883 corresponds to `compute`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '**Rot13**. Rot13 is a very simple encryption scheme used on some Internet newsgroups
    to conceal potentially offensive postings. It works by cyclically shifting each
    lowercase or uppercase letter 13 positions. So, the letter ''a'' is replaced by
    ''n'' and the letter ''n'' is replaced by ''a''. For example, the string "Encryption"
    is encoded as "Rapelcgvba." Write a program [ROT13.java](Rot13.java.html) that
    reads in a String as a command line parameter and encodes it using Rot13.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Longest Rot13 word**. Write a program that reads in a dictionary of words
    into an array and determines the longest pair of words such that each is the Rot13
    of the other, e.g., bumpily and unfiber.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Thue-Morse weave.** Recall the [Thue-Morse sequence](http://mathworld.wolfram.com/Thue-MorseSequence.html)
    from Exercises in Section 2.3. Write a program [ThueMorse.java](ThueMorse.java.html)
    that reads in a command line input N and plots the N-by-N Thue-Morse weave in
    turtle graphics. Plot cell (i, j) black if the ith and jth bits in the Thue-Morse
    string are different. Below are the Thue-Morse patterns for N = 4, 8, and 16.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ![4-by-4 Thue-Morse pattern](../Images/65b966e28151674410aec4ae3cb1a66f.png)
    | ![8-by-8 Thue-Morse pattern](../Images/cb26f95f01d4240b91bba774ab21ccb3.png)
    | ![16-by-16 Thue-Morse pattern](../Images/1ac2f6302876899b8d325a574aa30e6e.png)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: Because of the mesmerizing non-regularity, for large N, your eyes may have a
    hard time staying focused.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Repetition words.** Write a program [Repetition.java](Repetition.java.html)
    to read in a list of dictionary words and print out all words for which each letter
    appears exactly twice, e.g., intestines, antiperspirantes, appeases, arraigning,
    hotshots, arraigning, teammate, and so forth.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Text twist.** Write a program [TextTwist.java](TextTwist.java.html) that
    reads in a word from the command line and a dictionary of words from standard
    input, and prints all words of at least four letters that can be formed by rearranging
    a subset of the letters in the input word. This forms the core of the game [Text
    Twist](http://www.wordplays.com/wordgames/text-twist). *Hint:* create a profile
    of the input word by counting the number of times each of the 26 letters appears.
    Then, for each dictionary word, create a similar profile and check if each letter
    appears at least as many times in the input word as in the dictionary word.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Word frequencies.** Write a program (or several programs and use piping)
    that reads in a text file and prints a list of the words in decreasing order of
    frequency. Consider breaking it up into 5 pieces and use piping: read in text
    and print the words one per line in lowercase, sort to bring identical words together,
    remove duplicates and print count, sort by count.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**VIN numbers.** A [VIN number](http://www.mathnotes.com/aw_IDnumber.html)
    is a 17-character string that uniquely identifies a motor vehicle. It also encodes
    the manufacturer and attributes of the vehicle. To guard against accidentally
    entering an incorrect VIN number, the VIN number incorporates a check digit (the
    9th character). Each letter and number is assigned a value between 0 and 9\. The
    check digit is chosen so to be the weighted sum of the values mod 11, using the
    symbol `X` if the remainder is 10.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: For example the check digit of the partial VIN number 1FA-CP45E-?-LF192944 is
    X because the weighted sum is 373 and 373 mod 11 is 10.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Write a program [VIN.java](VIN.java.html) that takes a command line string and
    determines whether or not it is a valid VIN number. Allow the input to be entered
    with upper or lower case, and allow dashes to be inserted. Do thorough error checking,
    e.g., that the string is the right length, that no illegal characters are used
    (I, O, Q), etc.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Music CDs.** Screen-scrape [MusicBrainz](http://musicbrainz.org) to identify
    information about music CDs.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Pig Latin.** Pig Latin is a fun secret language for young children. To convert
    a word to Pig Latin:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If it begins with a vowel, append "hay" to the end. At the beginning of a word,
    treat y as a vowel unless it is followed by a vowel.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: If it begins with a sequence of consonants, move the consonants to the end,
    then append "ay". Treat a u following a q as a consonant.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, "input" becomes "input-hay", "standard" becomes "andard-stay",
    "quit" becomes "it-quay". Write a program `PigLatinCoder.java` that reads in a
    sequence of words from standard input and prints them to standard output in Pig
    Latin. Write a program `PigLatinDecoder.java` that reads in a sequence of words
    encoded in Pig Latin from standard input and prints the original words out in.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Rotating drum problem.** Applications to pseudo-random number generators,
    computational biology, coding theory. Consider a rotating drum (draw picture of
    circle divided into 16 segments, each of one of two types - 0 and 1). We want
    that any sequence of 4 consecutive segments to uniquely identify the quadrant
    of the drum. That is, every 4 consecutive segments should represent one of the
    16 binary numbers from 0000 to 1111\. Is this possible? A *de Bruijn sequence*
    of order n is a shortest (circular) string such that every sequence of n bits
    appears as a substring at least once. For example, 0000111101100101 is a de Bruijn
    sequence of order 4, and all 2^4 possible 4-bit sequence (0000, 0001, ..., 1111)
    occur exactly once. Write a program [DeBruijn.java](DeBruijn.java.html) that reads
    in a command line parameter n and prints an order n de Bruijn sequence. Algorithm:
    start with n 0''s. Append a 1 if the n-tuple that would be formed has not already
    appeared in the sequence; append a 0 otherwise. *Hint:* use the methods `String.indexOf`
    and `String.substring`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Ehrenfecucht-Mycielski sequence.** The *Ehrenfecucht-Mycielski sequence*
    in a binary sequence that starts with "010". Given the first n bits b[0], b[1],
    ..., b[n-1], b[n] is determined by finding the longest suffix b[j], b[j+1], ...,
    b[n-1] that occurs previously in the sequence (if it occurs multiple times, take
    the last such occurrence). Then, b[n] is the opposite of the bit that followed
    the match. 0100110101110001000011110110010100100111010001100000101101111100. *Hint*:
    Use the `substring()` and `lastIndexOf()` methods.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Web Exercises (Image Processing)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**Painter''s and printer''s color triangles.** Create the following two images.
    The primary hues of the painter''s triangle are red, green, and blue; the primary
    hues of the printer''s triangle are magenta, cyan, and yellow.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '|                | ![Painter''s triangle](../Images/e41b95346b1b62a83b863d10b65d8344.png)
    |                | ![Printer''s triangle](../Images/740106f49889659dfb324ab2bbcbd7fb.png)
    |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**Two-stroke apparent motion.** Create the optical illusion of [two-stroke
    apparent motion](http://www.georgemather.com/MotionDemos/TwostrokeMP4.html) or
    [four-stroke](http://www.georgemather.com/MotionMP4.html)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**De Valois'' checkerboard.** Create the optical illusion of [De Valois'' checkerboard](http://www.shapirolab.net/Illusions/Checker%20Board.html)
    or one of the other optical illusions from the [Shapiro Perception Lab](http://www.shapirolab.net/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Color spectrum.** Write a program [Spectrum.java](Spectrum.java.html) that
    draws all 2^24 possible colors, by drawing for each red value a 256-by-256 array
    of color chips (one for each green and blue value).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Vertical flip.** Write a program `FlipY.java` that reads in an image and
    flips it vertically.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Picture dimensions.** Write a program `Dimension.java` that take the name
    of an image file as a command line input and prints its dimension (width-by-height).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Anti-aliasing.** *Anti-aliasing* is a method of removing artifacts from representing
    a smooth curve with a discrete number of pixels. A very crude way of doing this
    (which also blurs the image) is to convert an N-by-N grid of pixels into an (N-1)-by-(N-1)
    by making each pixel be the average of four cells in the original image as below.
    Write a program `AntiAlias` that reads in an integer N, then an N-by-N array of
    integers, and prints the anti-aliased version. [Reference](http://acm2003.csc.lsu.edu/problems/prb.php?prob=2).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Thresholding.** Write a program [Threshold.java](Threshold.java.html) that
    reads in a grayscale version of a black-and-white picture, creates and plots a
    histogram of 256 grayscale intensities, and determines the threshold value for
    which pixels are black, and which are white.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Mirror image.** Read in a W-by-H picture and produce a 2W-by-H picture which
    concatenates the original W-by-H picture with the mirror image of the W-by-H picture.
    Repeat by mirror around the y-axis. Or create a W-by-H picture, but mirror around
    the center, deleting half the picture.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Linear filters.** A *box filter* or *mean filter* replaces the color of pixel
    (x, y) by the average of its 9 neighboring pixels (including itself). The matrix
    [1 1 1; 1 1 1; 1 1 1] / 9 is called the *convolution kernel*. The kernel is the
    set of pixels to be averaged together. Program [MeanFilter.java](MeanFilter.java.html)
    implements a mean filter using the `Picture` data type.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Blur filter.** Use low-pass 3-by-3 uniform filter [1/13 1/13 1/13; 1/13 5/13
    1/13; 1/13, 1/13, 1/13].'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Emboss filter.** Use prewitt masks [-1 0 1; -1 1 1; -1 0 1] (east) or [1
    0 -1; 2 0 -2; 1 0 -1], [-1 -1 0; -1 1 1; 0 1 1] (south-east),'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Sharpen filter.** Psychophysical experiments suggest that a photograph with
    crisper edges is more aesthetically pleasing than exact photographic reproduction.
    Use a high-pass 3-by-3 filter. Light pixels near dark pixels are made lighter;
    dark pixels near light pixels are made darker. Laplace kernel. Attempts to capture
    region where second derivative is zero. [-1 -1 -1; -1 8 -1; -1 -1 -1]'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Oil painting filter.** Set pixel (i, j) to the color of the most frequent
    value among pixels with Manhattan distance W of (i, j) in the original image.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Luminance and chrominance.** Decompose a picture using the YIQ color space:
    Y (luma) = 0.299 r + 0.587 g + 0.114 b, I (in-phase) = 0.596 r - 0.274 g - 0.322
    b, and Q (quadrature) = 0.211 r - 0.523 g + 0.312 b. Plot all 3 images. The YIQ
    color space is used by NTSC color TV system.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Brighten.** Write a program [Brighter.java](Brighter.java.html) that takes
    a command line argument which is the name of a JPG or PNG file, displays it in
    a window, and display a second version which is a brighter copy. Use the `Color`
    method `brighter()`, which return a brighter version of the invoking color.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '| ![baboon](../Images/cf5710079eb12fddce40cbfb49066ef2.png) |      | ![brighter
    baboon](../Images/af23bd6539193ef3aeeee376df211e9f.png) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
- en: '**Edge detection.** Goal: form mathematical model of some feature of the image.
    To accomplish this, we want to detect edges or lines. An *edge* is a area of a
    picture with a strong contrast in intensity from one pixel to the next. Edge detection
    is a fundamental problem in image processing and computer vision. The *Sobel method*
    is a popular edge detection technique. We assume that the image is grayscale.
    (If not, we can convert by taking the average of the red, green, and blue intensities.)
    For each pixel (i, j) we calculate the *edge strength* by computing two 3-by-3
    *convolution masks*. This involves taking the grayscale values of the nine pixels
    in the 3-by-3 neighborhood centered on (i, j), multiplying them by the corresponding
    weight in the 3-by-3 mask, and summing up the products.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This produces two values Gx and Gy. In the output picture, we color the pixel
    (i, j) according to the grayscale value 255 - Sqrt(Gx*Gx + Gy*Gy). There are various
    ways to handle the boundary. For simplicity, we ignore this special case and color
    the boundary pixels black. Program [EdgeDetector.java](EdgeDetector.java.html)
    takes the name of an image as a command line input and applies the Sobel edge
    detection algorithm to that image.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '| ![baboon](../Images/cf5710079eb12fddce40cbfb49066ef2.png) |      | ![Sobel
    baboon](../Images/7f16cb0420e016e4bc91b5c4e5648f51.png) |'
  prefs:
  - PREF_IND
  type: TYPE_TB
