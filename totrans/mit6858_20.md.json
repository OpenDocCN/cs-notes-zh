["```\nint lat = gps.getLatitude();\n                // The lat variable is now\n                // tainted!\n\nDalvik VM is a register-based machine,\nso taint assignment happens during the\nexecution of Dalvik opcodes [see Table 1].\n\n   move_op dst src          // dst receives src's taint\n   binary_op dst src0 src1  // dst receives union of src0\n                            // and src1's taint \n```", "```\n char c = //. . . get c somehow.\n   char uppercase[] = ['A', 'B', 'C', . . .];\n   char upperC = uppercase[c];\n                     // upperC's taint is the\n                     // union of c and uppercase's\n                     // taint. \n```", "```\n .\n                 .\n        |        .         |\n        +------------------+\n        |     local0       |\n        +------------------+\n        | local0 taint tag |\n        +------------------+\n        |     local1       |\n        +------------------+\n        | local1 taint tag |\n        +------------------+\n                 .\n                 .\n                 .\n\n    _TaintDroid_ uses a similar approach\n    for class fields, object fields,\n    and arrays -- put the taint tag\n    next to the associated data. \n```", "```\n class ListNode{\n        Object data;\n        ListNode next;\n    } \n```", "```\n if (imei > 42) {\n         x = 0;\n     } else {\n         x = 1;\n     } \n```", "```\n if (imei > 42) {\n         x = 0;\n     } else {\n         x = 0;\n     }\n\n     // The taint tracker thinks that\n     // x should be tagged with imei's\n     // taint, but there is no information\n     // flow! \n```", "```\n int {Alice --> Bob} x;  // Means that x is controlled\n                          // by the principal Alice, who\n                          // allows that data to be seen\n                          // by Bob. \n```"]