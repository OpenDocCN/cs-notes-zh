- en: 哈佛CS50-CS ｜ 计算机科学导论(2020·完整版) - P16：L8- 网络编程全指南（网络协议、HTML、CSS、JavaScript） -
    ShowMeAI - BV1Hh411W7Up
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈佛CS50-CS ｜ 计算机科学导论(2020·完整版) - P16：L8- 网络编程全指南（网络协议、HTML、CSS、JavaScript） -
    ShowMeAI - BV1Hh411W7Up
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_0.png)'
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_1.png)'
- en: All right，this is CS 50 and this is Week eight，the week of All Hallows Eve。thanks
    to our friends here in American Repertory Theater。the stage looks amazing today
    with some special lighting and some special characters。this past week you all
    explored 50 ville for the very first time looking for the rubber。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这里是CS 50，这是第八周，即万圣节周。感谢我们在美国话剧院的朋友们，今天舞台看起来很棒，有一些特殊的灯光和角色。上周你们第一次探索了50ville，寻找失踪的橡皮鸭。
- en: duck that had gone missing。the culprits have been found。And allow me to say
    that a little someone would like to say hello。even he has rather dressed up for
    the occasion。But thank you for all the hard work there。we transition to the world
    of Web programming，the motivation being that for the past many weeks。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 罪魁祸首已经找到。让我说，有一个小家伙想打个招呼。他甚至为这个场合精心打扮了一下。不过，谢谢大家的辛勤工作。我们将过渡到网页编程的世界，动机是过去几周。
- en: pretty much all of the code we have written has been focused on command line
    programs。![](img/ada90f1c39922f956d79e8b087ef9d26_3.png)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们编写的几乎所有代码都集中在命令行程序上。![](img/ada90f1c39922f956d79e8b087ef9d26_3.png)
- en: compiling your code，but generally just interacting with a fairly mundane，blinking
    prompt textually。the software that you and I use every day these days is in the
    form of laptops and。in browsers or on mobile devices or APS。And today we begin
    to transition to a set of languages instead of technology is。![](img/ada90f1c39922f956d79e8b087ef9d26_5.png)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 编译你的代码，但一般来说只是与一个相当普通、闪烁的提示进行文本交互。你我每天使用的软件，通常是以笔记本电脑、浏览器或移动设备或APP的形式出现。今天，我们开始过渡到一套语言，而不是技术。![](img/ada90f1c39922f956d79e8b087ef9d26_5.png)
- en: via which you can start to apply all of the past weeks knowledge and mental
    models for。procedural programming to a much more familiar，much more graphical
    domain。over the course of the next couple of weeks will be focus on Web programming。and
    the use of language is called HTML and CSS and JavaScript。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些，你可以开始将过去几周的知识和思维模型应用于一个更熟悉、更加图形化的领域。在接下来的几周里，我们将专注于网页编程，使用的语言是HTML、CSS和JavaScript。
- en: with which today's websites are made and increasingly。with which today's mobile
    applications or APS on your phone are made as。But in order to get to that point
    in the story，we need to consider what the framework is。on top of which we're going
    to run these Web sites or these Web applications。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 今天网站的构建方式，以及今天手机上的移动应用或APP的构建方式。但为了到达这个故事的那个点，我们需要考虑我们将运行这些网站或网页应用的框架。
- en: and so that invites the question of the Internet。Exactly what is the Internet？
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这就引出了互联网的问题。究竟什么是互联网？
- en: All of us use it every day，but let's take a couple of volunteers from the audience
    just to define for us what we mean。by the Internet。All of us are literally on
    the Internet right now。but if you take a step back and think about it，what is
    Thean turn ette？
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们每天都在使用它，但让我们从观众中挑几位志愿者来为我们定义一下我们所说的互联网。我们每个人现在都在互联网上，但如果你退一步思考一下，互联网究竟是什么？
- en: How might you define it for someone less technical than you or，how would you
    define it？
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你如何为比你更少技术的人定义它，或者你会如何定义它？
- en: Like the network of all the computers around the world that are kind of taking
    in information。from the network and also giving information perfect？The Internet
    is this network of networks。So if you have a small network in your home ah，small
    network or a large network at your company or your university。and you start to
    interconnect all of those networks using cables or some kind of wireless technology。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 就像全球所有计算机构成的网络一样，它们在接收信息的同时也在提供信息，完美吗？互联网就是这样一个网络的网络。如果你在家里有一个小网络，或者在公司或大学有一个大网络，然后你开始用电缆或某种无线技术将这些网络互连起来。
- en: you get the Internet，a network of networks。And this is really the infrastructure。on
    top of which all of today's applications air run。So when you use the Web when
    you use chat when you use slack，when you use video conferencing。you're using the
    Internet。But think of the Internet really is the lower level plumbing that gets
    the zeros and ones from。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你得到了互联网，一个网络的网络。这实际上是所有今天应用程序运行的基础设施。因此，当你使用网页、聊天、Slack、视频会议时，你是在使用互联网。但可以把互联网视为将零和一从你传送到其他地方的底层管道。
- en: you to someone else and back。And the applications on top of that are all implemented
    ultimately in software。And so if we consider，then that we've got all of these
    computers interconnected somehow it stands to reason that we need to somehow。decide
    as a global community。How to get data from Point A to point B and beyond。And so
    throughout the Internet are these computers called routers。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这些应用程序最终都是以软件实现的。因此，如果我们考虑到这些计算机以某种方式互联，我们就有理由认为，作为全球社区，我们需要决定如何将数据从A点传输到B点及更远的地方。因此，在整个互联网中，有一些称为路由器的计算机。
- en: and the at the end of the day they're probably a little bigger than the desktops
    and laptops with which you and I are familiar。there the same kinds of devices
    with CPU Central processing units。the brains inside of the computer that do all
    the thinking，ram or memory。air stored and hard disks and where data is persisted
    and pictured。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 到头来，它们可能比你我熟悉的桌面和笔记本电脑大一点。它们是相同类型的设备，配有中央处理单元（CPU），即计算机内部进行所有思考的“大脑”，以及存储器（RAM）和硬盘，数据被持久存储并呈现。
- en: is an image from MIT that depicted a few years back。I want some of the most
    significant peering points on the Internet throughout the。so each of the red dots
    here represents essentially one router or one very important。place into which
    a lot of cables come in and then go out and interconnect all。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这是MIT几年前描绘的一张图像。我想展示一些互联网中最重要的对等点。因此，这里每个红点本质上代表一个路由器或一个非常重要的地方，许多电缆在此汇聚并相互连接。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_7.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_7.png)'
- en: points of the country。And then the story continues well beyond the United States
    these days。using oceanic cables and other wireless or satellite technologies of
    the like。So suffices to say there's sort of this mesh，this interconnection of
    all of these different computers and in turn。networks throughout the world。Which
    is to say that there's many different pads that data can take to go from point
    A to point B。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这在全国的各个节点上。这种故事现在远远超出了美国，使用海底电缆和其他无线或卫星技术等。因此，可以说这是一种网状结构，所有不同计算机的互连，进而形成了全球的网络。这意味着数据可以从A点到B点的路径有很多不同的选择。
- en: There isn't necessarily a line between you and facebook dot com or stanford
    dot。there's a whole bunch of routers，sometimes a handful，sometimes as many as
    30。That will relay your data from left to right。two down or in some other direction
    in order to get data from you to the Web server that you're trying。to contact
    and then back to you with the servers response。So how does all of this work？
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 你和facebook.com或斯坦福之间并没有必要的直线联系，而是有一堆路由器，有时是少量，有时多达30个。它们会将你的数据从左到右、上下或其他方向转发，以便将数据从你传送到你试图联系的网络服务器，然后再把服务器的响应返回给你。那么这一切是如何运作的呢？
- en: humans essentially had to get together and decide as a group what standards，what
    protocols？
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 人类本质上需要聚集在一起，作为一个群体决定什么标准、什么协议？
- en: All of these computers they're going to speak。protocol isn't so much a language
    as it is a set of conventions。right back in healthier times。if we were meeting
    each other in person，might extend a hand。you would immediately know that you should
    probably extend your hand to。and we would have a physical handshake，and that's
    like a human protocol。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些计算机将会交流。协议不太像一种语言，而是一套约定。对了，在更健康的时代，如果我们面对面见面，可能会伸出手，你会立刻知道应该伸出手来。我们会进行一次实体握手，这就像一种人类协议。
- en: I initiate a communication with you by extending my hand。You acknowledge that
    communication by extending your hand。and then that sort of interaction is complete。So
    we have these human protocols in the world of computers。They're similar protocols，but
    obviously it's all zeros and ones。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我通过伸出手来与你建立沟通。你通过伸出手来确认这次沟通，然后这种互动就完成了。因此，我们在计算机的世界中也有这些人类协议。它们是类似的协议，但显然都是零和一。
- en: So if the first computer sends this pattern of zeros and ones。the other computer
    should reply with a different set of zeros and ones。And so these protocols were
    about to discuss just standardized。What those patterns of zeros and ones are really
    what all of the messages are going back and。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果第一台计算机发送这个零和一的模式，另一台计算机应该用一组不同的零和一来回复。所以我们即将讨论的这些协议只是标准化了这些零和一的模式，实际上所有的消息都是往返于这些模式。
- en: And two of the protocols most commonly used to get data on the Internet from
    Point A to。Point B are called TCP slash i p。TCP and I peer to separate protocols。but
    they're so often used together that you typically mention them in one breath。TCP
    i p。And this is These are acronyms you've probably seen maybe on your Mac or PC。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在互联网中，从A点到B点传输数据的两个最常用的协议称为 TCP/IP。TCP 和 I P 是两个独立的协议，但它们通常一起使用，因此你通常会将它们提到一起。TCP/IP。这些是你可能在
    Mac 或 PC 上见过的缩写。
- en: or somewhere on your phone settings。And it refers to essentially two sets of
    conventions that computers use to get data。from one point to another。So what do
    we mean by data？
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在你手机的设置中。它基本上涉及到计算机用来将数据从一个点传输到另一个点的两套规范。那么我们所说的数据是什么呢？
- en: And what do we mean by moving things between A and B？It sort of is an old school
    envelope。whereby if you wanted to send a letter to someone else in the world。you
    and I would probably reach for a piece of paper back in the day。we would pick
    up in envelope and we would write our note on that piece of paper。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们所说的从A到B移动东西是什么意思呢？这有点像老式信封。如果你想给世界上其他人发送一封信，你我可能会在早期去拿一张纸。我们会拿起一个信封，并在那张纸上写下我们的便条。
- en: put the paper in the envelope，and then the most important step after writing
    the actual message would be to address the。in the real world you would put the
    recipients address，typically in the middle of the envelope。You might put your
    return address in the top corner of the envelope and then maybe postage or。But
    we humans have pretty much standardized through all of the postal systems。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 把纸放进信封，然后写下实际信息后，最重要的一步就是为其地址。在现实世界中，你会把收件人的地址通常放在信封的中间。你可能会把你的回邮地址放在信封的左上角，然后可能还有邮资。但我们人类几乎在所有邮政系统中都进行了标准化。
- en: that kind of convention when using envelope。So the metaphor here is that the
    envelope and the message there in are generally thought。referred to as packets
    packets of information，and this would be the physical incarnation of what computers。you're
    just going to do using zeros and ones。So let's tease apart the two sets of conventions
    they use for actually putting data in these。addressing these envelopes and sending
    them out from Point A to Point B。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里的隐喻是信封和其中的信息通常被称为数据包，信息包，这将是计算机的物理体现。你将使用零和一来实现这一点。所以让我们拆解一下他们用来实际放置数据、为这些信封地址并从A点发送到B点的两套规范。
- en: Let's consider first I P I p stands for Internet Protocol and pretty much any。Mac
    and PC and iPhone and iPad and Android device these days has。been designed by
    Apple or Google or someone else to understand。It's a So those companies have written
    software running on those devices that make。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 首先考虑 I P，I P 代表互联网协议，如今几乎所有的 Mac、PC、iPhone、iPad 和 Android 设备都被设计为。由苹果、谷歌或其他人开发，能够理解这一点。这些公司在那些设备上编写了运行的软件，使其。
- en: sure that those devices all support type。Just like I was taught，presumably by
    some human。this human convention of shaking hands back in the day i p Internet
    Protocol。simply standardizes how computers address each other。So in our physical
    human world。if you wanted to send me an envelope，you might write to Harvard's
    computer science department at 33 Oxford Street。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 确保那些设备都支持类型。就像我所学到的，可能是某个人类教我的。这种人类习惯在早期就像是互联网协议。它只是标准化了计算机之间的地址方式。因此，在我们的物理人类世界中，如果你想给我发送一个信封，你可能会写到哈佛大学计算机科学系，地址是33
    Oxford Street。
- en: 02138 U。That is presumably a unique postal address that addresses the computer
    science。building on campus so that if you drop an envelope in the mail in California
    or anywhere abroad。via some number of hops and mail carriers and the like，make
    its way to that particular address。then have I similarly unique addresses known
    as I P，And so when your computer Mac PC。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 02138 U。这显然是一个唯一的邮政地址，指向校园内的计算机科学大楼，因此，如果你在加利福尼亚或其他地方投递一个信封，通过多个跳数和邮件运送等方式，它将到达那个特定地址。那么我也有类似的独特地址，称为I
    P。当你的电脑 Mac 或 PC 使用这种规范时。
- en: phone whatever sends data from itself to another server。the address that it
    writes on the outside of that virtual envelope is the I。P address off the remote
    server。if I were to send a message to you。I would figure out what your I P address
    is。I would write that I p address virtually on the outside of this envelope。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 手机等设备将数据从自身发送到另一个服务器。它在那个虚拟信封外面写上的地址是远程服务器的 IP 地址。如果我想给你发送消息，我需要弄清楚你的 IP 地址是什么。我会在这个信封的外面虚拟写下这个
    IP 地址。
- en: I would probably write my own I P address on the top left hand corner of this
    metaphorical。and then I would send it out on the Internet。And what does that mean？
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我可能会在这个隐喻的信封左上角写下我自己的 IP 地址，然后将其发送到互联网。这意味着什么？
- en: It would mean I take that envelope and I hand it to the nearest router。So it
    turns out when you're a home，you actually have a router of your own。It's that
    device that connects to your cable modem or DSL modem or something like that。If
    you're on campus like a place like Harvard or Yale，Harvard and Yale have their
    own routers。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我将那个信封交给最近的路由器。因此，实际上，当你在家时，你有自己的路由器。它是连接到你的有线调制解调器、DSL 调制解调器或类似设备的设备。如果你在校园里，比如哈佛或耶鲁，哈佛和耶鲁有自己的路由器。
- en: So your computer went on campus，just knows to hand data off to that。And if you're
    at home using or if you're elsewhere in the world，like in Starbucks or an airport。So
    your computers generally know where the closest router is。and then routers purpose
    in life is again to figure out。Does this package go left right up。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你的电脑在校园内，会知道将数据交给那个设备。如果你在家使用，或者在全球其他地方，比如星巴克或机场。那么你的电脑通常知道最近的路由器在哪里，然后路由器的生命目的又是决定这个包裹是向左、向右还是向上。
- en: in order to get it closer to its destination？But this sort of is a chicken in
    the egg。If I want to send you a piece of information，I need to know your i p address。but
    I don't really know your i p address until I know where you are。So there is this
    other system that you've probably seen an acronym，for two called DNS。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更接近目标？但这有点像鸡和蛋。如果我想给你发送一条信息，我需要知道你的 IP 地址。但在我知道你在哪里之前，我并不知道你的 IP 地址。因此，还有一个你可能见过的缩写系统，称为
    DNS。
- en: Domain Name System。And this is a technology that's deployed throughout the Internet。That's
    supported by Max PCs and phones these days。That just translates what we you and
    I would typically called domain names or fully qualified。domain names from those
    English like or human readable characters，to the corresponding I P addresses。There's
    a reason that companies do not advertise their websites as being a，numeric i p
    address。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 域名系统。这是一项遍布互联网的技术，现今由 Mac、PC 和手机支持。它将我们通常称为域名或完全合格域名的内容，从那些类似英语或人类可读的字符转换为相应的
    IP 地址。公司不以数字 IP 地址广告宣传其网站是有原因的。
- en: None of us would ever remember them。![](img/ada90f1c39922f956d79e8b087ef9d26_9.png)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都永远不会记得这些。![](img/ada90f1c39922f956d79e8b087ef9d26_9.png)
- en: They instead advertise them as Microsoft dot com and google dot com and New
    york times dot com。Dryden's is a technology that your Mac and PC and phone support
    that no when a。human types in one of those human readable addresses。a domain name
    drones converts those names to the I P，addresses So literally。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 他们反而以 Microsoft.com、google.com 和 New York Times.com 等名称进行广告宣传。DNS 是一种你的 Mac、PC
    和手机支持的技术，当人类输入这些人类可读的地址时，域名解析器将这些名称转换为 IP 地址。因此，字面意思上。
- en: if you type in Harvard or Yale。![](img/ada90f1c39922f956d79e8b087ef9d26_11.png)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你输入哈佛或耶鲁。![](img/ada90f1c39922f956d79e8b087ef9d26_11.png)
- en: you enter into your Web browser，your Mac or PC quickly looks up the i P address
    off that。![](img/ada90f1c39922f956d79e8b087ef9d26_13.png)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在网页浏览器中输入时，你的 Mac 或 PC 会迅速查找该 IP 地址。![](img/ada90f1c39922f956d79e8b087ef9d26_13.png)
- en: Web server using the software that came with the Mac or PC and converts it to
    the。corresponding i P address and then writes virtually on the outside of the
    envelope。the I p address of Harvard or Yale's Web server before sending it out
    on the Internet。So these air just services DNA as a service that your own ISP
    Internet，service provider provides。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Web 服务器使用随 Mac 或 PC 附带的软件，将其转换为对应的 IP 地址，然后在信封的外面虚拟写上哈佛或耶鲁大学 Web 服务器的 IP 地址，然后将其发送到互联网上。因此，这些空中服务就像是你自己的
    ISP（互联网服务提供商）提供的 DNA 服务。
- en: When you're at Starbucks，it's probably Starbucks。it's your own Internet service
    providers like Verizon or Comcast or the like。So the world just decided to use
    that technology as well。one other acronym for now，TCP TCP。or Transmission control
    protocol is a solution to a couple of problems。one of which is that it tends to
    be pretty convenient for，individual servers on the Internet。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在星巴克时，可能是星巴克的网络。这是你的互联网服务提供商，如Verizon或Comcast等。因此，世界也决定使用该技术。暂时还有一个缩写，TCP，TCP。或者说传输控制协议是几个问题的解决方案。其中一个是对互联网上的个别服务器来说，这通常非常方便。
- en: To be able to do multiple things right，There's lots of things the Internet can
    do。The servers can host email。They can host websites，they can host chat servers。Videoconferencing。that's
    already a growing list of features of software that you can use on the。And it
    would be nice financially administratively if one server could do。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够同时正确处理多个事务，互联网可以做很多事情。服务器可以托管电子邮件，托管网站，托管聊天服务器，以及视频会议。这已经是你可以在软件中使用的功能的不断增长的列表。如果一个服务器能做到这一点，在财务和管理上会很好。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_15.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_15.png)'
- en: multiple things at once。And indeed they can。So when a computer receives one
    of these virtual envelopes and that computer。that server happens to support multiple
    services email。It looks at the envelope for one additional piece of information。![](img/ada90f1c39922f956d79e8b087ef9d26_17.png)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 同时处理多项事务。实际上，它们可以。因此，当一台计算机收到其中一个虚拟信封时，而该计算机，恰好支持多个服务（如电子邮件），它会查看信封以获取一条额外的信息。![](img/ada90f1c39922f956d79e8b087ef9d26_17.png)
- en: and that piece of information is known as a port number。R T number。which is
    just a small integer that the world has decided represents specific，in the world
    of TCP。The world decided years ago that our computers should virtually right the
    number。80 on these envelopes after the I P address to signify that this is a request
    for a Web。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这一信息被称为端口号。R T号。它只是一个小整数，世界上已经决定用它来表示TCP领域中的特定内容。多年前，世界决定我们的计算机在IP地址后面虚拟地写上数字**80**，以表示这是一个请求网页的请求。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_19.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_19.png)'
- en: page or 443 on the outside of the envelope。If it's a secure request for a Web
    page using something called https more on that。in a bit and there's other numbers
    as well。Email has its own unique numbers。Zoom has its own unique numbers，and all
    these other Internet services that you and I might use every day have their own
    unique TCP。ports so that companies and people can have one server doing multiple
    things。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 网页或**443**在信封外侧。如果这是一个使用称为https的安全请求网页的请求，稍后会详细说明，还有其他数字。电子邮件有其独特的号码，Zoom有其独特的号码，而你我每天可能使用的所有其他互联网服务也都有其独特的TCP端口，以便公司和个人可以让一个服务器同时处理多项事务。
- en: But upon receipt of one of these envelopes，the server could look at it and be
    and realized。this isn't request for email。This is a request for a Web page。This
    is a request for chat or something else altogether。notably to TCP，also handles
    delivery。And it's the part of the protocol that also ensures that when you send
    data，from point A to Point B。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 但在收到这些信封中的一个时，服务器可以查看它并意识到。这不是请求电子邮件。这是请求一个网页。这是请求聊天或其他完全不同的请求。显然，TCP还处理数据的传递。它是协议的一部分，确保当你将数据从点A发送到点B时。
- en: if any data gets lost because literally something's wrong with one of those
    routers or。because maybe 31 of those writers got overwhelmed and just received
    way。more packets at once than it can handle。That could happen because these computers
    have。If you send too much data through one，the Internet might get congested。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果任何数据丢失，那是因为这些路由器中的某一个出现了问题，或者可能是31个路由器中的一个被压垮了，接收的包裹数量远远超过它能处理的数量。这种情况可能会发生，因为这些计算机具有。如果你通过一个路由器发送太多数据，互联网可能会变得拥堵。
- en: your video might buffer and a whole bunch of other symptoms might arise。So TCP
    also handles the process of re transmitting data as。If any of these packets is
    lost on the Internet literally。![](img/ada90f1c39922f956d79e8b087ef9d26_21.png)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你的视频可能会缓冲，其他很多症状可能会出现。因此，TCP还处理数据的重新传输过程。如果这些数据包在互联网上丢失，那确实是。![](img/ada90f1c39922f956d79e8b087ef9d26_21.png)
- en: TCP will also compel your Mac or PC your phone to resend that，data as well。But
    what's notable about the Internet is that data doesn't necessarily follow one，specific
    path。if you send multiple packets from one person to another。those packets might
    actually take different routes each time。And this is actually a feature。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: TCP 也会促使你的 Mac、PC 或手机重新发送数据。但互联网的一个显著特点是数据并不一定遵循一条特定的路径。如果你从一个人发送多个数据包到另一个人，这些数据包可能每次都走不同的路。这实际上是一个特性。
- en: because you can imagine servers getting congested or problems needed to getting
    needing to。be routed around。And so TC Pipi also supports with other protocols
    and。adaptive solution to this problem。![](img/ada90f1c39922f956d79e8b087ef9d26_23.png)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你可以想象服务器可能会拥堵，或者需要绕过的问题。因此，TCP 也支持其他协议和适应性解决方案来应对这个问题。![](img/ada90f1c39922f956d79e8b087ef9d26_23.png)
- en: whereby maybe your data will go this way。Sometimes maybe it'll go this way some
    other times。but this is why in part that sometimes your Internet speeds are variable
    because again。these routers in between might be different or might be a little
    bit overloaded。So we thought we tried to tell this story by you，invoking some
    of enlisting the help of some of CS 50 staff。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 数据可能会沿这条路走。有时候也许会沿着另一条路走，但这部分原因就是为什么有时你的互联网速度会变得不稳定，因为中间的路由器可能不同，或者可能有些超负荷。因此，我们试图通过引入一些
    CS 50 的工作人员来讲述这个故事。
- en: Would you mind taking on the role in just a moment of playing a Web browser？Someone's
    own Mac or PC？
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你介意在稍后扮演一个网页浏览器的角色吗？某人的 Mac 或 PC？
- en: Your phone and request of me，maybe something silly，like asking me for a picture
    of a cat？
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 你的手机向我请求，可能是一些无厘头的事情，比如让我给你一张猫的照片？
- en: So if I want to ask you some Web server for a picture of a cat。I need to send
    a message to you in order to send that request you。So I might write down my request
    on ah，on a sheet of paper。and I'll just put that request inside of an envelope。and
    then I would have to label that envelope with all the information we talked about。in
    particular with your I p address that I might look up with DNS on。![](img/ada90f1c39922f956d79e8b087ef9d26_25.png)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我想向某个网络服务器请求一张猫的照片，我需要给你发送一条消息，以便发送那个请求。因此，我可能会在一张纸上写下我的请求，并把这个请求放进一个信封里。然后我需要在信封上标注我们讨论过的所有信息，特别是你的
    IP 地址，我可能会通过 DNS 查找。![](img/ada90f1c39922f956d79e8b087ef9d26_25.png)
- en: Send that envelope off，and I think we need a little bit of help here because
    Brian and I are in different places。And so he and I can't just hand the envelope
    from one to the other。So let's go ahead and list the help of CS 50 staff here
    also who have chimed in here on zoom。and see if we can't route this This request
    from Brian。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 把那个信封寄出，我想我们需要一点帮助，因为布莱恩和我在不同的地方。所以我们不能简单地把信封从一个人递给另一个人。所以让我们也请 CS 50 的工作人员来帮助，他们也在
    Zoom 上参与了讨论，看看我们能否将布莱恩的请求路由过去。
- en: who is playing the role of a web browser to me who will play the role of a web
    server in order。to receive this request for a cat。Let's see if we can enlist the
    team here。Oh。thank you to Phyllis for having handed me this envelope。And what
    we have now is the request that Brian sent me。I'm gonna go open it up。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 谁在扮演网页浏览器的角色，而我将扮演网页服务器，以接收这个猫的请求。让我们看看能否在这里召集团队。哦，感谢 Phyllis 递给我这个信封。现在我们有的是布莱恩发给我的请求。我将打开它。
- en: and I did see and a message inside requesting a picture of a cat。which is not
    uncommon on the internet。if I'm the Web server and I actually have an archive
    of pictures of cats。I'm gonna go ahead and respond to Brian with one of those
    cats。I'm gonna go ahead and have to look up on my hard drive or somewhere in the
    computer。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实看到了一条消息，里面请求了一张猫的照片，这在互联网并不罕见。如果我是网络服务器，实际上我有一份猫的照片档案，我会给布莱恩回复其中的一只猫。我需要在我的硬盘或者电脑的某个地方查找一下。
- en: that picture of a cat and here's one here。So I'm gonna go and send Brian this
    very happy cat。I've got some envelopes of my own and I'm going to go ahead and
    write Brian's I P。address on the middle of this envelope。I'm gonna put my I P
    address on the top left of this envelope and then maybe any other identifying
    information I。and then I'll go ahead and put the cat into the envelope。this isn't
    really going to fit。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这是猫的照片，这里有一张。所以我打算把这只非常快乐的猫发送给布莱恩。我有一些自己的信封，我将把布莱恩的 IP 地址写在这个信封的中间。我会把我的 IP
    地址写在这个信封的左上角，然后也许还有其他任何识别信息。然后我将把猫放进信封里，这个猫其实放不进去。
- en: and this is actually quite commonly the case。Anytime a computer is trying to
    transmit a decent amount of data。whether it's a big image or maybe it's an even
    bigger video file for equities sake。it tends to be good for computers to chop
    up large packets into multiple smaller packets。you might have heard of something
    called net neutrality or more technical topic known of quality of service。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 而且这实际上是非常常见的情况。每当计算机尝试传输大量数据时，无论是一个大图像，还是为了股票市场而可能更大的视频文件，将大型数据包拆分成多个小数据包通常是有利的。你可能听说过网络中立性或更专业的服务质量（QoS）主题。
- en: Net neutrality speaks to just what kinds of decisions computer should make when
    it comes to。prioritizing data，and a common convention is historically that all
    of us should chop up our large packets。into smaller packets。Send them out so they
    could get them commingled with other people's packets。And we all sort of reach
    our destinations at the same rate。Net neutrality as an aside。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 网络中立性涉及计算机在优先处理数据时应做出何种决策，历史上一个共同的惯例是，我们所有人应将大型数据包分割成小型数据包。发送出去，以便与其他人的数据包交错。我们都以相同的速率到达目的地。网络中立性作为附带话题。
- en: is all about an interest by some parties and prioritizing maybe the。data from
    certain companies that pay a bit mawr。And so this really speaks to just use or
    maybe abuse of these basic primitives here。But this is not fair for me to try
    to cram this one big image into an envelope。So I'm gonna literally go ahead and
    tear the picture in half。Essentially chop the packet into two。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这关乎一些方的利益，优先考虑那些付费更多的特定公司的数据。因此，这确实涉及到这些基本原语的使用或滥用。但我试图把这幅大图塞进一个信封，这对我来说是不公平的。所以我打算真的把这幅图一分为二。基本上把数据包分成两个。
- en: Let me go ahead now and put this into the envelope because it'll fit a little
    more easily。So I've got one packet of information for Brian I've got。let's see
    one MAWR packet of information for Brian。That'll fit the other half of this image
    into。but I think I'm gonna have to do something else before I drop this out on
    the。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让我现在把这个放入信封，因为它会更容易适应。所以我有一份信息包给布莱恩，还有一份MAWR信息包给布莱恩。这将把这幅图像的另一半放进去，但我想我必须在把它放出去之前做点别的。
- en: Internet and hand it back to Phyllis to send out back to Brian。I might need
    some additional information on these envelopes。I've already got Brian Sipe in
    the to field。I've got my I P address in the from field。I've also draught it down
    the port number that I should use for Brian and my own return。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 将互联网交还给菲利斯，再寄回给布莱恩。我可能需要关于这些信封的额外信息。我已经在“收件人”字段中写下了布莱恩·西普的名字。在“发件人”字段中有我的IP地址。我还写下了我应该给布莱恩使用的端口号以及我自己的回程端口。
- en: port number and those who have decided，typically by my Mac or PC。But I feel
    like I probably need a little more information。What more should I virtually right
    on the outside of this envelope to make。sure that the data is received as intended？Any
    intuition？No familiarity with TC pipe assumed here。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 端口号以及那些通常由我的Mac或PC决定的人。但我觉得我可能需要更多信息。我在这个信封外面还应该虚拟写些什么，以确保数据按预期接收？有什么直觉？这里假设对TCP管道没有熟悉度。
- en: But if Brian's about to now get two envelopes，what additional data should I
    perhaps give him grit？
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果布莱恩即将收到两个信封，我或许应该给他提供什么额外的信息？
- en: So Brandon confused the top of the photo with the bottom。So you need to somehow
    to tell Brian that this is the top and this is the bottom。maybe toe converge them
    perfect。And so we need to make sure Brian knows the order in which these packets
    should be reassembled so that he indeed gets。the the right way and not the wrong
    way。so you know what probably suffices is for me to add what we'll call a sequence
    number to each of these packets。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 布兰登把照片的顶部和底部搞混了。因此，你需要以某种方式告诉布莱恩，这里是顶部，那是底部。也许要完美地合并它们。所以我们需要确保布莱恩知道这些数据包应该按什么顺序重新组装，以便他确实能以正确的方式，而不是错误的方式接收。大概我只需为每个数据包添加一个我们称之为序列号的内容就足够了。
- en: which is essentially a number。![](img/ada90f1c39922f956d79e8b087ef9d26_27.png)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这本质上是一个数字。![](img/ada90f1c39922f956d79e8b087ef9d26_27.png)
- en: which you can think of as one of two and on the other one two of two so that，Brian
    knows when。what order to reassemble the packets，but also more importantly。in case
    one of the packets or both of them gets lost or somehow dropped by one of the。routers
    along the way。There's enough information on those packets to enable me and him
    to recover that and。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以把它看作是两个中的一个，而另一个是两个中的两个，这样，布莱恩就知道该以什么顺序重新组装数据包，更重要的是，如果其中一个或两个数据包在路由器的过程中丢失或掉落，就能有足够的信息让我们恢复它们。
- en: resend packet one and or two as needed。So let's go ahead and do this。The help
    of the team is starting with Phyllis here and Phyllis，if you'd like to go ahead
    here and。that's only half of the problem。So I'm gonna go ahead now and send the
    second packet。I would actually send these out in parallel，but there's no reason
    that they couldn't still follow different paths。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需要重新发送数据包一或二。那么我们现在就开始吧。团队的帮助从菲莉斯开始，如果菲莉斯想继续的话。这仅仅是问题的一半。所以我现在要发送第二个数据包。实际上我会并行发送这些，但它们仍然可以沿不同的路径发送。
- en: might take a little bit more time。e，you wanna go ahead and open up your envelopes
    and reassemble them？
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要一点更多的时间。你想先打开你的信封并重新组装它们吗？
- en: so I don't have to envelopes。I guess I'll open up the one says one of two first。and
    it is the top half of the cat。And then I'll open up the other envelope，which is
    two of two。and that is the bottom half of the cat。And so together I think I now
    have the full cat。![](img/ada90f1c39922f956d79e8b087ef9d26_29.png)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我没有信封。我想我会先打开那个写着“一个中的二”的。它是猫的上半部分。然后我会打开另一个信封，也就是“二中的二”，那是猫的下半部分。所以现在我想我有完整的猫了。![](img/ada90f1c39922f956d79e8b087ef9d26_29.png)
- en: Wonderful，Brian into the whole team。I p is this protocol the set of conventions
    that standardizes what gets written on these。It's how computers uniquely address
    each other with numbers of some sort。TCP governs a few different things，but among
    them is this numbering of services like 80 for。![](img/ada90f1c39922f956d79e8b087ef9d26_31.png)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了，布莱恩加入了整个团队。我所说的这个协议是规范写入内容的一套约定。这是计算机如何以某种数字唯一地相互地址的方式。TCP 管理几种不同的内容，其中之一就是像
    80 这样的服务编号。![](img/ada90f1c39922f956d79e8b087ef9d26_31.png)
- en: insecure Web traffic or 443 for secure Web traffic。That ensures that the data
    gets from one point to another and is handled by the right。application running
    on that particular server。![](img/ada90f1c39922f956d79e8b087ef9d26_33.png)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 不安全的网络流量是 80，安全的网络流量是 443。这确保了数据从一个点到另一个点，并由在特定服务器上运行的正确应用程序处理。![](img/ada90f1c39922f956d79e8b087ef9d26_33.png)
- en: is what we used to begin with。If Brian had his own domain name。my computer would
    have had a look up his I p address。he would have had to look up mine so that we
    humans who are actually using the Internet in a human。![](img/ada90f1c39922f956d79e8b087ef9d26_35.png)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们最初使用的。如果布莱恩有自己的域名，我的计算机会查找他的 I P 地址，他也需要查找我的，这样我们这些实际使用互联网的人才能进行连接。![](img/ada90f1c39922f956d79e8b087ef9d26_35.png)
- en: friendly way don't have to remember I P addresses，which again are just numbers。but
    instead can remember things like Harvard，edu and the like。is the Internet the
    fundamental infrastructure，on top of which we now have the ability to get data
    from point A to point B。if you're comfortable with that，we can now sort of abstract
    the Internet away and just think of it as being a。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 以一种友好的方式，我不需要记住 I P 地址，这些地址只是数字，而是可以记住像 Harvard、edu 这样的东西。互联网是基础设施的根本，在此之上我们现在能够将数据从
    A 点传输到 B 点。如果你对此感到舒适，我们现在可以将互联网抽象出来，仅将其视为一种。
- en: mechanism that gets data from one point to another。And so long as we can now
    assume that we have this fundamental public service that gets data from one point。![](img/ada90f1c39922f956d79e8b087ef9d26_37.png)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个点到另一个点的数据传输机制。因此，只要我们现在可以假设我们有这一基本的公共服务，可以将数据从一个点传输。![](img/ada90f1c39922f956d79e8b087ef9d26_37.png)
- en: Now we can start to build on top of it in terms of software and other languages。and
    actually use it for interesting things。But before we forge ahead to do those things。any
    questions or confusion，we can clear up on TCP or I P or DNS。Or the Internet or
    routers or any of these other new，terms grid back to you。I have a question。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可以在软件和其他语言上建立基础，并将其用于有趣的事情。但在我们继续做这些事情之前，有关 TCP、I P、DNS、互联网、路由器或其他新术语的任何问题或疑惑，我们可以澄清。我有个问题。
- en: So does shopping the information create any problem？Because I don't know。a piece
    of information can go there for two seconds and another one for three seconds。Does
    it create any problem for the user？These packets can take different durations
    of time。And even though I did stipulate that they should go out to Phyllis his
    hands roughly at the same time。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 那么购物信息会产生任何问题吗？因为我不知道。一条信息可能在那里待两秒，而另一条可能待三秒。这对用户会造成问题吗？这些数据包可以花费不同的时间。尽管我确实规定它们应该大致在同一时间发往菲利斯的手中。
- en: even if she needs to pass them in two different directions，there can absolutely
    be delays。as humans will start to notice delays if packets take more than 200。milliseconds
    to get from Point A to point B。it looks like there's a bit of delay。And certainly
    if it's two or three seconds，you'll really notice that at that point。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 即使她需要将它们传递到两个不同的方向，也绝对可能会有延迟。如果数据包从A点到B点花费超过200毫秒，人们开始注意到延迟。看起来确实有一点延迟。如果是两到三秒，你在那个时候真的会注意到。
- en: it's not necessarily a problem。Brian hopefully would patiently wait for the
    second half of the cat for some amount of。time if he only received one packet
    eventually。A computer would probably get a little anxious and would ask me to
    re transmit a packet if it。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这不一定是个问题。希望布莱恩会耐心等待猫的下半部分，如果他最终只收到一个数据包。计算机可能会有点焦虑，会让我重新传输一个数据包，如果它。
- en: doesn't arrive after five seconds。These time outs can typically be specified
    by the software running on the person's computer。but at that point you and I would
    certainly notice the difference。Other questions or confusion。It looks like all
    questions have been answered。So if we now have this ability fundamentally。to get
    data from Point A to point B，what is actually inside of the envelope that Brian
    sent me and what was inside the。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在五秒后没有到达，这些超时通常可以由在个人电脑上运行的软件指定。但在那时，你我肯定会注意到区别。其他问题或困惑。看起来所有问题都已经得到解答。所以如果我们现在在根本上具备这种能力，从A点获取数据到B点，布莱恩给我发送的信封里面到底有什么，以及里面是什么。
- en: envelope I sent him，besides just the picture of a cat？
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我发给他的信封，除了那张猫的照片，还有什么？
- en: we transition to another language or another protocol，rather called http hypertext
    transfer protocol。and this is an acronym you've probably seen or typed Bunches
    of times。what appears in the beginning of URLs uniform resource locators。which
    are theme the tools that you and I used to actually figure。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们过渡到另一种语言或另一种协议，称为http超文本传输协议。这是你可能见过或输入过很多次的缩写，出现在URL（统一资源定位符）的开头，这些是你我用来实际查找的工具。
- en: what website or what image we actually want to request of the Internet。So the
    Web。the World Wide Web is really just one of many services that run on，top of
    the Internet。The Web gives us Web pages。Zoom gives us videoconferencing。Other
    tools give us text chatting。voice chatting and the like。So the Web is really just
    an application。On top of the Internet。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上想从互联网请求哪个网站或哪个图像。所以网络，全球互联网实际上只是许多在互联网之上运行的服务之一。网络为我们提供网页。Zoom提供视频会议。其他工具提供文本聊天、语音聊天等。所以网络实际上只是互联网之上的一个应用。
- en: it's hands down the most popular application，but it really is just an application。It's
    a service that's using that underlying plumbing。So http is a different protocol
    that really governs what，goes inside of these envelopes。TCP I p governs what goes
    outside the envelopes。Http governs what goes inside of the envelopes。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 毫无疑问，这是最流行的应用程序，但它实际上只是一个应用。它是一个使用底层管道的服务。所以http是一个不同的协议，真正管理这些信封内的内容。TCP/IP管理信封外的内容。Http管理信封内的内容。
- en: assuming we are talking about Web browsers and Web servers and not videoconferencing
    or something else。So with http，it comes with a few different commands or pretty
    limited vocabulary。two of which are the most important terms to know which is。get
    in post these air literally English verbs and their two of the commands。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们谈论的是网页浏览器和网页服务器，而不是视频会议或其他东西。所以使用http，它带有几种不同的命令或相当有限的词汇，其中两个是最重要的术语，就是get和post，这两个字面上是英语动词，它们是这两个命令。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_39.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_39.png)'
- en: That http supports and what Brian probably did inside of that envelope。![](img/ada90f1c39922f956d79e8b087ef9d26_41.png)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 那么http支持的内容以及布莱恩可能在那个信封里做的事情。![](img/ada90f1c39922f956d79e8b087ef9d26_41.png)
- en: is he probably literally wrote down，Get cat or something like that。Post is used
    for other applications that will get to before long。But get is the operative word。and
    it literally is how a browser will request or get information from a server。So
    somewhere in the envelope Brian sent me was the English word get probably bought。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 他可能真的写下了“获取猫”或类似的东西。邮寄用于其他应用程序，我们很快会讲到。但是“获取”是关键字。这确实是浏览器如何请求或获取来自服务器的信息。因此，在布莱恩寄给我的信封中，英文单词“获取”可能是写的。
- en: followed by cat J。Peg or something like that。There's probably a bit more information。but
    the essence of http means that if Brian wants something from me。and he's the browser
    and I'm the server。He should start his request with the standardized verb get
    followed by the。name of the file that he wants to get。So let's put this now into
    the context of one of the more familiar girl。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是cat J。Peg或类似的东西。可能还有更多的信息，但http的本质意味着如果布莱恩想从我这里获取某些东西，而他是浏览器而我是服务器。他应该用标准化的动词get开始他的请求，后面跟着他想获取的文件名。那么让我们现在把这个放入更熟悉的女孩的上下文中。
- en: a canonical form out of the girl。Let's highlight a few features of it。https。you're
    seeing this on the Web。![](img/ada90f1c39922f956d79e8b087ef9d26_43.png)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个女孩身上得到一种标准形式。让我们强调一下它的几个特点。https。你在网络上看到这个。![](img/ada90f1c39922f956d79e8b087ef9d26_43.png)
- en: It's often automatically appearing in the address bar of your browser because
    browser's or Web servers are。S just refers to a secure version of http and we'll
    come back to this。topic of security next week and beyond。To But in the context
    off http。this just means that the data between me and Brian and vice versa is。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 它通常会自动出现在你浏览器的地址栏中，因为浏览器或网络服务器是。S只是指http的安全版本，我们下周及以后会再讨论这个安全话题。但是在http的上下文中，这只是意味着我和布莱恩之间的数据，以及反向数据是。
- en: Somehow it's way better than Caesar or other ciphers。It's way more mathematically
    sophisticated。but it essentially just scrambles the information so that Brian
    knows he's asking for a cat。knows he's asking for a cat。But if any of you or any
    of the TFC who were playing the role of routers sort of。maliciously or knows really
    opened the envelope instead of handing it off to the next staff member。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 不知何故，它比凯撒密码或其他密码更好。它在数学上复杂得多。但它本质上只是将信息进行混淆，以便布莱恩知道他在请求一只猫。知道他在请求一只猫。但如果你们中的任何一个人或者任何一个TFC在扮演路由器的角色时，恶意地或者真的打开了信封而不是将其交给下一个工作人员。
- en: they wouldn't understand what's inside the envelope because it would look like
    similar to Caesar and other。sort of like random zeros in one。So https just means
    that the contents of these packets are encrypted。What else is salient about these
    girls？here's what we call a domain name。Odds are most everyone knows what a domain
    name is。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 他们不会理解信封里的内容，因为它看起来类似于凯撒密码和其他随机的零。所以https只是意味着这些数据包的内容是加密的。还有什么是关于这些女孩的显著特点？这就是我们所称的域名。大多数人很可能知道什么是域名。
- en: and it's typically two phrases something dot something else。An example dot com
    is。edu and millions of others these days。is what we would typically called the
    top level domain。This is just the type of website historically that you're trying
    to。![](img/ada90f1c39922f956d79e8b087ef9d26_45.png)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 通常是两个短语，某个点其他某个东西。一个例子是点com，点edu和如今的数百万其他域名。这就是我们通常称之为顶级域名。这只是历史上你试图得到的那种类型的网站。![](img/ada90f1c39922f956d79e8b087ef9d26_45.png)
- en: Comment commercial that human education dot net meant some kind of network。![](img/ada90f1c39922f956d79e8b087ef9d26_47.png)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 评论商业人教育点net意味着某种网络。![](img/ada90f1c39922f956d79e8b087ef9d26_47.png)
- en: an organization that's no longer really the case。there's hundreds，perhaps even
    thousands。of top level domains nowadays that you can buy domains in。![](img/ada90f1c39922f956d79e8b087ef9d26_49.png)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 一个组织不再真的是这样的情况。如今有数百，甚至可能成千上万的顶级域名，你可以购买域名。![](img/ada90f1c39922f956d79e8b087ef9d26_49.png)
- en: that try to categorize things sometimes，but there's no hard rules around most
    of those top level domains。You have to be an accredited educational institution
    to use dot you do you You have to be in the U。Military to do use dot m i l They're
    similar constraints in other。countries who have their own to character country
    code T LDs like u dot u。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候会试图对事物进行分类，但大多数顶级域名周围并没有硬性规则。你必须是认可的教育机构才能使用点edu。你必须在U.S.军事中才能使用点mil。在其他国家也有类似的限制，它们有自己两字符的国家代码TLD，如点u。
- en: K for united kingdom dot jp for Japan and many others。each country is free to
    standardize as it sees fit。But you and I could buy a dot com or go dot net dot
    us dot There's。you can see a nearly exhaustive list。But this just tends to categorize
    the type of website that it iss。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: K 代表英国，jp 代表日本，还有许多其他国家。每个国家都可以根据自己的需要进行标准化。但你和我可以购买 dot com，或 go dot net dot
    us 等等。你可以看到几乎详尽的列表。这只是为了对网站类型进行分类。
- en: there's this prefix。This generally known as，ah host name，and www is just a human
    convention。pretty much any server on the Internet that had a human friendly，name
    like this。Www dot example dot com This was just meant to ca note to the user that
    o W W。W This must be the address of a Web server and not a mail server，not a chat
    server or something else。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个前缀，通常被称为主机名，而 www 只是一个人类惯例。几乎所有互联网上拥有这样人类友好名称的服务器，比如 www dot example dot
    com，都是为了向用户传达，这必定是一个网页服务器，而不是邮件服务器、聊天服务器或其他什么。
- en: It's not strictly required。It's just human convention。you probably don't even
    bother typing this in anymore。But it is a historical feature that allows。visual
    cue clue typically to the humans as to what type of server it is。So besides that
    there's this one hidden piece of information as well。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是严格要求的。这只是人类的惯例，你可能甚至不再费心输入这个了。但这是一个历史特征，能够给人类提供视觉提示，帮助判断服务器的类型。因此，除了这些，还有一个隐藏的信息。
- en: If you just want to visit example dot com's homepage。you might just type this
    girl or even just type example dot com and hit。Enter and let the browser redirect
    you，take you to this canonical form of the URL。But very often you're technically
    requesting a specific file and if not。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只是想访问 example dot com 的首页，你可能只需输入这个网址，甚至只需输入 example dot com 然后按下 Enter，让浏览器重定向你，带你到这个网址的规范形式。但是通常你实际上是在请求一个特定的文件，如果没有的话。
- en: mentioned that file name is typically index html。It could be other things as
    well。depending on the language or the server。Technology that someone's using。But
    implicit at the end of your girls is often the name of a file Brian might have。specifically
    requested Cat J Peg。But if he were requesting not a picture of a cat but a full
    fledged Web page with text and other。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 提到的文件名通常是 index html。也可能是其他的，取决于所使用的语言或服务器技术。但你输入的网址的末尾通常是一个文件名，比如可能会特别请求 Cat
    J Peg。但如果他请求的不是一张猫的图片，而是一个完整的网页，包含文本和其他内容。
- en: odds are there's an implicit file name。They're like index html。and this is now
    important because when we look inside this envelope。this is a piece of information
    that needs to then be in there。So let's take a look at some sample http requests
    and responses。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能有一个隐含的文件名。通常是 index html。这一点很重要，因为当我们查看这个封装时，这是一条需要包含在内的信息。那么让我们来看看一些示例的
    HTTP 请求和响应。
- en: the more technical dive into what Brian and I and the staff acted out a moment
    ago。Technically speaking，when Brian sent me a request for that cat。he wrote inside
    this envelope not only the keyword get and something like Cat。He also specified
    a couple of other things and let's generis eyes it now away from cats and just
    proposed this。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 更技术性地深入了解 Brian 和我以及工作人员刚才的表现。技术上讲，当 Brian 向我请求那只猫时，他在这个封装内不仅写了关键词 get 和类似 Cat
    的内容。他还指定了其他一些内容，现在让我们泛化一下，远离猫这个话题，提出这个。
- en: Http request that is，any of these virtual envelopes is literally request for。like
    get followed by slash。If you don't want a cat，you just want the default home page。followed
    by a mention of what version of http。The browser and server should speak。1。1 is
    pretty common to is pretty is increasingly common。Three is even now out there。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP 请求就是，这些虚拟封装字面上是请求，比如 get 后面跟着斜杠。如果你不想要猫，只想要默认的首页，后面跟着 HTTP 的版本说明。浏览器和服务器应该使用的版本，1.1
    是相当常见的，2 也越来越常见，3 现在也在使用中。
- en: But there's just different versions of the protocol。It's like humans have refined
    what it means to shake hands。These versions of protocols evolve over time，but
    there's also a line like this。Host Colon。Www dot example dot com Because just
    in case I I'm a particularly fancy。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 但协议有不同的版本。就像人类在握手时逐渐细化了含义。这些协议版本随着时间的推移而演变，但也有像这样的格式。主机冒号 www dot example dot
    com，因为以防万一我特别讲究。
- en: to server that supports not only example dot com，but maybe Harvard edu and Yale
    dot edu It's possible long story short for companies。nowadays to host multiple
    websites and multiple domains on the same server。![](img/ada90f1c39922f956d79e8b087ef9d26_51.png)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 向不仅支持example.com，还可能支持Harvard.edu和Yale.edu的服务器发送请求。如今，公司可以在同一台服务器上托管多个网站和多个域名。![](img/ada90f1c39922f956d79e8b087ef9d26_51.png)
- en: This little clue inside the envelope make sure that it goes to example Com or
    Harvard。Do you or Yale do with all of these entities are sharing the same physical。server
    so more specifically，a request might look instead look like this。If you're not
    just requesting the default home page，but you want a specific file。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小线索在信封里确保它发送到example.com或Harvard。你或Yale与所有这些实体共享同一台物理服务器，因此更具体地说，请求可能看起来是这样的。如果你不是只请求默认的主页，而是想要特定的文件。
- en: it might say slash index HTML instead，what does my response look like？
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会显示为斜杠index HTML，那么我的响应看起来是什么样的？
- en: So I've gotten Brian's envelope。Now I'm gonna go ahead and respond with my own
    one or two or more envelopes inside of mine。is going to go pieces of that cat，but
    some additional information as well per the protocol。So my response，just like
    in the human world，I might extend my hand if I see Brian initiated and handshake。I'm
    gonna respond with something like this。which just reminds the browser What's version
    I'm speaking then a number。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我收到了Brian的信封。现在我要回应我的一个或两个或多个信封，里面将有一些猫的部分，但根据协议还有一些附加信息。所以我的响应，就像在现实世界中一样，如果我看到Brian发起握手，我会伸出我的手。我要回应类似这样的内容，这提醒浏览器我说的版本号。
- en: which is the status code，followed by a shorthand summary like，piece by piece
    in these envelopes。and I also put in the envelope a mention of the content type。If
    it's a Web page。I'm gonna put text slash html。![](img/ada90f1c39922f956d79e8b087ef9d26_53.png)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这是状态代码，后面跟着一个简短的摘要，比如，逐一放在这些信封里。我还在信封里提到了内容类型。如果是网页，我会写text/html。![](img/ada90f1c39922f956d79e8b087ef9d26_53.png)
- en: If it's a J peg，I might instead say image slash jpeg。And there's the different
    content types otherwise known as mind types for all different file。formats in
    the world。that's not always going to be the case that the response is as simple
    as that。whereby browser requested information and the server responds with the，requested
    information。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是JPEG，我可能会说image/jpeg。还有不同的内容类型，也被称为MIME类型，适用于世界上所有不同的文件格式。响应并不总是那么简单，浏览器请求信息，服务器回应请求的信息。
- en: Sometimes the users make their way to the wrong place。I suppose that's a browser
    visits www dot harvard dot，The response might not necessarily be okay。it might
    not be status code 200 in fact we can see this。![](img/ada90f1c39922f956d79e8b087ef9d26_55.png)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 有时用户会走错地方。我想这就是浏览器访问www.harvard.dot的情况，响应可能并不一定是好的。事实上，它可能不是状态代码200，我们可以看到这一点。![](img/ada90f1c39922f956d79e8b087ef9d26_55.png)
- en: Let me go ahead and open up on my screen here，a browser window that's going
    to take me to。harvard dot e d U。And I'm gonna go ahead and type into the u。R l
    bar http colon slash slash www dot harvard。![](img/ada90f1c39922f956d79e8b087ef9d26_57.png)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 让我在我的屏幕上打开一个浏览器窗口，带我去harvard.edu。我将继续在URL栏中输入http://www.harvard。![](img/ada90f1c39922f956d79e8b087ef9d26_57.png)
- en: dot e d You enter now？All this happened pretty quickly。But if I click on the
    URL bar。which has been simplified or shortened by chroma，the moment notice where
    I actually ended up somehow or other。my browser did not keep me at http。It redirected
    me，to https。This is probably intentional on Harvard's part。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: dot e d 你现在进入了吗？这一切发生得相当快。但是如果我点击URL栏，这个被Chrome简化或缩短的地方，瞬间我注意到我实际上到达了某个地方。我的浏览器没有让我停留在http。它将我重定向到https。这可能是哈佛故意的。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_59.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_59.png)'
- en: They would rather that I'd be visiting them securely so that if I'm reading
    articles or other content。there's really nobody's business except mine。no routers
    in between should be able to see this。So somehow Harvard redirected me from http
    to https。how can I see this？
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 他们更希望我安全访问，以便如果我在阅读文章或其他内容，这实在是没有别人可以插手的事情。中间没有路由器能够看到这一点。因此哈佛以某种方式将我从http重定向到了https。我该如何看到这一点？
- en: embedded in chrome and edge and Firefox and Safari。all of today's browsers there
    are often developer tools that sometimes you have to enable via。But these developer
    tools are so powerful，and they allow you the user or now you the programmer toe。actually
    see and understand what's going on underneath the hood off these，browsers and
    servers。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌入在Chrome、Edge、Firefox和Safari中的所有现代浏览器，通常都有开发者工具，有时你需要手动启用。但是这些开发者工具是如此强大，让你作为用户或现在作为程序员，可以实际看到并理解这些浏览器和服务器的内部运作。
- en: So I'm going to do this in Chrome specifically。![](img/ada90f1c39922f956d79e8b087ef9d26_61.png)
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我将专门在Chrome中进行这个操作。![](img/ada90f1c39922f956d79e8b087ef9d26_61.png)
- en: I'm gonna go to view developer，and then I'm gonna go to developer tools。if you're
    chrome user。this menu option has always been there，even if you never noticed it。So
    feel free to play along at home and then notice this pops up on the top right
    here。I'm gonna go ahead and move it down to the bottom just by clicking the dot。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我要去查看开发者，然后进入开发者工具。如果你是Chrome用户，这个菜单选项一直存在，即使你从未注意到。所以请在家里也试试看，然后注意到它会在右上角弹出。我将通过点击点将其移到底部。
- en: and move the developer tools to the bottom of my screen just so we can see things
    a little wider。And I'm gonna go ahead and click on the network tab up here。And
    when I click on the network tab here。I'm going to see a whole bunch of information
    related to my last request。So I'm gonna go ahead and do this request again。Let
    me go ahead and go back to the U。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我将开发者工具移动到屏幕底部，以便我们可以更宽广地查看内容。然后我会点击上面的网络选项卡。当我点击这里的网络选项卡时，我会看到与我上一个请求相关的大量信息。所以我会重新执行这个请求。让我回到U。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_63.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_63.png)'
- en: R L Bar and let me go ahead and actually just for good measure，let me do this
    in incognito mode。![](img/ada90f1c39922f956d79e8b087ef9d26_65.png)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: R L Bar，让我再在隐身模式下做一次验证。![](img/ada90f1c39922f956d79e8b087ef9d26_65.png)
- en: And even though you perhaps you're in the habit of using incognito mode。if you
    don't want the browser to remember where you've been or what you've logged in
    as incognito mode is incredibly。powerful for developers Tool so that you can sort
    of reset the browser state。to like a first condition without any previous network
    browsing，showing up in your history。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你可能习惯使用隐身模式，如果你不希望浏览器记住你访问过的地方或登录的信息，隐身模式对开发者来说是极其强大的工具，可以让你重置浏览器状态，仿佛是第一次使用，没有任何先前的网络浏览历史。
- en: So I'm going to do this again now in incognito mode after having open developer
    tools。Http colon slash slash www dot harvard dot edu。![](img/ada90f1c39922f956d79e8b087ef9d26_67.png)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我现在要在隐身模式下再次执行这个操作，之前已经打开了开发者工具。Http://www.harvard.edu。![](img/ada90f1c39922f956d79e8b087ef9d26_67.png)
- en: Enter and a whole bunch of stuff just flew by the window。some of which is this
    chart information。which shows me the performance。So to grade your question earlier
    about noticing amount of time。you could see that some of the requests that were
    just induced vary between a few milliseconds and over。1000 milliseconds。But what
    I care about for now is this fairly arcane listing down here。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 按下回车后，很多信息飞快地在窗口中出现，其中一些是性能图表。因此，针对你之前关于时间量的提问，你可以看到一些请求的响应时间从几毫秒到超过1000毫秒不等。但我目前关心的是下面这个相当晦涩的列表。
- en: whole lot of stuff just flew across the screen。if I zoom in on the bottom simply
    visiting Harvard。U induces 70 http requests per，this Mentioned in the bottom left
    hand corner，it resulted in 6。8 megabytes of information being transferred，it took
    rather atrociously 11。95 seconds。So grid like that is slow，relatively speaking。absolutely
    speaking。So what's the take away here？
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 许多内容迅速飞过屏幕。如果我放大底部，简单访问哈佛大学会导致每个请求70次HTTP请求，左下角提到，这导致传输了6.8MB的信息，耗时相当可怕的11.95秒。所以，相对而言，这样的速度很慢，绝对而言也是。所以这里的要点是什么？
- en: any time you visit a Web page，there's not just the one Web page itself。With
    all of the text in it。There's probably images，maybe music and other things。All
    of those get downloaded separately。So if Brian had asked me for a full Web page
    like the Courses Home website。I might respond not with a single envelope or two
    envelopes。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 每次你访问一个网页时，不仅仅是网页本身，里面的所有文字，还有可能包含的图片、音乐等，所有这些内容都是单独下载的。因此，如果布莱恩问我是否能提供像课程主页网站那样的完整网页，我可能不会只回复一个或两个信封。
- en: I might respond with 70 envelopes containing the responses to every piece。of
    media that composes CS 50 Zone website or，let's focus on Lee on the first of these
    requests。If I look at the first row here in chrome，I will see a reminder of where
    I visited first。But notice the status column over here is 301 301 moved。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我可能会回复70个信封，包含组成CS50 Zone网站的每个媒体的响应，或者，我们先关注这些请求中的第一个。如果我查看这里在Chrome中的第一行，我会看到我第一次访问的提醒。但注意这里的状态栏是301，301移动。
- en: It turns out that there's numbers besides 200 that tell browsers what to dio
    200，just means okay。here's the data you requested。301 means whatever you requested
    has moved permanently to a。different girl。So let me go ahead and click this first
    row and you'll see that a whole different set of。I'm gonna click headers here。And
    now let me define a term when Brian and I are using http inside of these。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，除了200之外还有其他数字告诉浏览器该做什么，200仅意味着好的，这里是你请求的数据。301意味着你请求的内容已永久移动到另一个位置。所以让我先点击这一行，你会看到一整套不同的内容。我将点击这里的头。现在让我定义一个术语，当Brian和我在这些内容中使用http时。
- en: envelopes and I write something like get slash http 1。1 or。host Colin W W example
    dot com Each of those lines of text is what we'll call，in http header。It's a line
    of text inside of the envelope。So what we're seeing here is chrome summary of
    all of the headers that were inside of these。Let me go ahead and look at my request。I'm
    gonna click view source。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 信封中，我写下像get slash http 1.1或host www.example.com这样的内容。每一行文本被称为http头。它是信封内部的一行文本。所以我们在这里看到的是Chrome对这些头的总结。让我来查看一下我的请求。我将点击查看源代码。
- en: and I can literally see the raw request that my browser sent to。www dot harvard
    dot you Do you get slash http 1。1，Host Colin Dub dub dub dot harvard dot edu And
    then a bunch of other stuff which will ignore for。But those are all http headers。But
    if I scroll back up here，let's look at the response headers。Now what came back
    in a different envelope from Harvard to my laptop，notice here that it's http 1。1。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以清楚地看到我的浏览器发送到的原始请求。www.harvard.edu/，你能理解slash http 1.1，Host www.harvard.edu，然后还有一堆我们暂时不理会的其他内容。但这些都是http头。如果我向上滚动，我们来看一下响应头。从哈佛到我笔记本的不同信封中返回的内容，这里注意到的是http
    1.1。
- en: it's 301 moved permanently。This is a hint to my browser that，there's nothing
    at the oral you visited。You need to visit a different location instead to know
    where I need to go。I need to scroll down and find this header here。Notice that
    the third line in the response is location。Colon https colon slash slash www dot
    harvard。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '这是301移动永久。这是对我的浏览器的提示，表示你访问的URL没有内容。你需要访问另一个位置。为了知道我需要去哪里，我需要向下滚动找到这个头。注意响应中的第三行是location:
    https://www.harvard。'
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_69.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_69.png)'
- en: So this is how the envelope that comes back contains a clue to me to say we
    have。moved permanently to the secure version of the website。And if I zoom out
    now and click this little X to close those tabs。you'll see that the next request
    that my browser automatically sent on its own，was to instead。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是返回的信封包含的线索，告诉我我们已经永久转移到网站的安全版本。如果我现在缩小视图并点击这个小X来关闭这些标签，你会看到我的浏览器自动发送的下一个请求，是去别的地方。
- en: if I scroll down here to this request，U R L https colon slash slash www dot
    harvard dot edu and the。response he got this time under this general summary here
    was now indeed。![](img/ada90f1c39922f956d79e8b087ef9d26_71.png)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我在这个请求中向下滚动，网址是https://www.harvard.edu，而这次的响应在这个一般摘要下确实是。![](img/ada90f1c39922f956d79e8b087ef9d26_71.png)
- en: So this is just a simple mechanism that allows a browser and server to inter
    communicate。in a way that can send them from one location to another。And let me
    make this a little more familiar。Odds are you have seen not this before explicitly，because
    you as a human would rarely if ever see the number 31 or move permanently until。![](img/ada90f1c39922f956d79e8b087ef9d26_73.png)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个简单的机制，它允许浏览器和服务器之间进行通信，以便将它们从一个位置发送到另一个位置。让我稍微把这个变得更熟悉一些。你可能没有明确地见过这个，因为作为一个人，你几乎不会看到数字31或移动到永久的位置。![](img/ada90f1c39922f956d79e8b087ef9d26_73.png)
- en: now that you're a programmer who's using these developer tools。But odds are
    you've seen another number。Maybe in the chat if you want to just chime in。If you're
    thinking about Web pages and numbers，has anyone seen quite often probably a number
    that maybe now。makes a little more sense？A lot of people saying 404。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你是一位使用这些开发者工具的程序员。但你可能看到过另一个数字。如果你想参与聊天，关于网页和数字，有没有人见过可能现在看起来更有意义的数字？很多人说
    404。
- en: I also saw 505 02 s 0404 is the code that humans。![](img/ada90f1c39922f956d79e8b087ef9d26_75.png)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我也见过 505 和 502，0404 是人类的代码。![](img/ada90f1c39922f956d79e8b087ef9d26_75.png)
- en: adopted years ago that just signifies not found。So if you visit an incorrect
    girl or an old girl that's no longer。exists on a server for maybe an old cat that's
    been deleted，the server will respond not with 200。but with 404 not found there
    by telling your browser to display some kind of，error message。Weirdly browsers
    years ago weren't especially user friendly。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 多年前采用的代码只表示找不到。因此，如果你访问了一个错误的页面，或者一个不再存在的旧页面，比如一个被删除的旧猫，服务器将不会以 200 响应，而是以 404
    找不到来告诉你的浏览器显示某种错误信息。奇怪的是，多年前的浏览器并不是特别用户友好。
- en: and then browsers just told us humans 4444 which，is not very user friendly。But
    all it boils down to is this little hint inside of the response envelope coming。back
    that indicates that something went wrong，that something was not found。And there's
    a whole list of these status codes，and this is certainly not something you need
    to memorize。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 然后浏览器只是告诉我们人类 4444，这并不是很用户友好。但归根结底，这都是回应信封中的一个小提示，表明出现了问题，找不到某些东西。而且有一整套这些状态码，这绝对不是你需要记住的。
- en: But as we focus more on more on Web programming，you'll just get naturally familiar
    with some of these。There's other ways of redirecting the user from one place to
    another 32 and 307 could be。used for efficiency。Servers can sometimes respond
    with 304 which essentially means you already asked me。![](img/ada90f1c39922f956d79e8b087ef9d26_77.png)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 但随着我们越来越专注于网页编程，你会自然熟悉其中的一些。这还有其他方法可以将用户从一个地方重定向到另一个地方，32 和 307 可以用于效率。服务器有时会以
    304 响应，这基本上意味着你已经问过我了。![](img/ada90f1c39922f956d79e8b087ef9d26_77.png)
- en: The cat has not changed on the server。Use your own copy of the cat So long。If
    Brian's own browser were smart，it would cash C a C h e。remember the cat that he
    just downloaded from me so that if Brian hits reload or。he comes back to that
    same website again and wants to see the cat again。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器上的猫没有变化。使用你自己的猫的副本。如果布莱恩自己的浏览器聪明的话，它会缓存（C a C h e）他刚从我这里下载的猫，这样如果布莱恩点击重新加载或再次访问同一网站并想再次查看猫。
- en: his browser loads the local copy instead of bothering me the Web server and
    wasting time。Sending another cat three or four would just say the cat is the same。Use
    your own local copy。Then there's others you might have seen 401 or 403 before。not
    being logged incorrectly or something like that 500 is actually bad。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 他的浏览器加载本地副本，而不是打扰我这个网页服务器并浪费时间。发送另一个猫的请求 304 或 404 只会说猫是一样的。使用你自己的本地副本。然后你可能见过其他的
    401 或 403，都是因为未正确登录或类似的问题，500 实际上是坏的。
- en: I can pretty much guarantee that over the next couple of weeks。all of you will
    experience your very first of several http。That's gonna be next week that you
    screwed up with your code and you actually wrote buggy python code。That just meant
    the whole server didn't know what to do。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我几乎可以保证，在接下来的几周里，你们所有人都会经历你们的第一次 http。这将是下周，你的代码出错了，实际上写了有问题的 python 代码。这意味着整个服务器不知道该怎么做。
- en: And that's an internal server error fixable and will help you debug it。that's
    quite common as well。Five or three just means the server might be overloaded in
    some way。And so service is unavailable and there's others dot。![](img/ada90f1c39922f956d79e8b087ef9d26_79.png)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个内部服务器错误，可以修复并帮助你调试。这种情况也相当常见。503 仅表示服务器可能在某种方式上超载。因此服务不可用，还有其他状态码。![](img/ada90f1c39922f956d79e8b087ef9d26_79.png)
- en: So we can actually have a little bit of fun with this and a couple of different
    directions。![](img/ada90f1c39922f956d79e8b087ef9d26_81.png)
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们实际上可以在这方面玩一点乐子，还有几个不同的方向。![](img/ada90f1c39922f956d79e8b087ef9d26_81.png)
- en: It turns out that if we send this http request，we can take a look at what comes
    back and let me go ahead and do this instead of using my browser。![](img/ada90f1c39922f956d79e8b087ef9d26_83.png)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，如果我们发送这个 http 请求，我们可以查看返回的内容，让我代替使用浏览器来执行这个操作。![](img/ada90f1c39922f956d79e8b087ef9d26_83.png)
- en: I'm gonna use a command line tool，which tends to just be a little cleaner because
    I don't have to fuss around with all of these buttons。Let me go ahead and use
    a program called Curl and Curls。Purpose in life is just to connect to a oral。and
    it's not gonna bother showing me the Web page or any of the contents。It's just
    going to show me the http headers if I use a command line argument of dash Capital。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我打算使用一个命令行工具，这通常会更清晰，因为我不需要操心所有这些按钮。让我使用一个叫 Curl 的程序，Curl 的目的就是连接到一个 URL，它不会烦恼地显示网页或任何内容。只会给我显示
    HTTP 头，如果我使用一个命令行参数 dash Capital。
- en: I and now I'm gonna go ahead and do HTTP colon slash slash safety。school dot
    org's and I'm gonna go ahead and enter。And this is my Mac now sending one envelope
    to safety school dot or。containing get that verb requesting the home page there。presumably
    going to respond to me with another each envelope inside of which is some kind
    of response。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在要继续访问 HTTP colon slash slash safety。school dot org 的内容，我要进入。这是我的 Mac 现在发送一个信封到
    safety school dot or，里面包含请求主页的 get 动词。可以想象，它将回复我另一个信封，里面包含某种响应。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_85.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_85.png)'
- en: Maybe it's a 200。Maybe it's something else。![](img/ada90f1c39922f956d79e8b087ef9d26_87.png)
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 也许是 200。也许是其他的。![](img/ada90f1c39922f956d79e8b087ef9d26_87.png)
- en: It looks like forgive May that safety school Orc has moved。permanently per this
    301 to this new location。![](img/ada90f1c39922f956d79e8b087ef9d26_89.png)
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来请原谅，可能安全学校的 Orc 已经永久迁移。根据这个 301 到新的位置。![](img/ada90f1c39922f956d79e8b087ef9d26_89.png)
- en: Www dot gail dot e d u Sorry。![](img/ada90f1c39922f956d79e8b087ef9d26_91.png)
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Www dot gail dot e d u 对不起。![](img/ada90f1c39922f956d79e8b087ef9d26_91.png)
- en: we can do this if I owe copy this URL and let me go into a browser。I'll use
    incognito again so that I don't have any past history。![](img/ada90f1c39922f956d79e8b087ef9d26_93.png)
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我复制这个网址，我们可以这样做，让我进入浏览器。我会再次使用隐身模式，这样就没有任何历史记录。![](img/ada90f1c39922f956d79e8b087ef9d26_93.png)
- en: enter and what a lot of the visual effect is。as the headers would imply。with
    the funny thing about this joke is that someone on the Internet has been paying
    for the domain name。safety school or for like，20 years now。For this joke on the
    on Lee thing it does is redirect one domain name。Let me go ahead and transition
    away from safety school or to Harvard sucks dot org's。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 输入，以及很多视觉效果。正如标题所暗示的。这则笑话的有趣之处在于，网上有人已经为域名支付了费用。安全学校或者说，已经 20 年了。这个笑话唯一的作用是重定向一个域名。让我继续从安全学校转到
    Harvard sucks dot org。
- en: which also exists，and someone on the other side has been hosting this website
    for some time。![](img/ada90f1c39922f956d79e8b087ef9d26_95.png)
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这个网站也存在，而且对面有人已经托管这个网站一段时间了。![](img/ada90f1c39922f956d79e8b087ef9d26_95.png)
- en: if you visit that girl，let's go to Harvard，sucks dot org's enter。You'll actually
    see a whole website。So the Yalies really went all out here，and you can actually
    see an amazing hack here。whereby at Harvard sucks dot org's。![](img/ada90f1c39922f956d79e8b087ef9d26_97.png)
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你去见那个女孩，咱们去哈佛，sucks dot org 的入口。你实际上会看到一个完整的网站。所以耶鲁的学生们真的全力以赴，你实际上可以看到一个惊人的黑客作品。在
    Harvard sucks dot org 上。![](img/ada90f1c39922f956d79e8b087ef9d26_97.png)
- en: There's an old YouTube video of an amazing hack or prank that was pulled at
    one of the Harvard Yale football。games some years ago，tricked us into spelling
    out with a bit map of all things，we suck。So in any bit of a stretch to connect
    those two underlying HDP messages。But it all indeed relates to these very simple
    primitives。Let me point out one other thing as well。
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个旧的 YouTube 视频，展示了几年前在哈佛耶鲁橄榄球比赛中发生的一个惊人的黑客或恶作剧，骗我们拼出一个位图上的内容：我们烂。因此，将这两个基本的
    HTTP 消息连接起来有点牵强。但这确实与这些非常简单的基本元素有关。让我再指出一件事。
- en: We might also see in the form of http，requests even more sophisticated first
    lines where you're not requesting just。slash the default home page。You're not
    requesting slash cat J peg or slash index dot html。There might also be question
    marks and equal signs and notice。This is an excerpt from an envelope my Mac or
    PC or phone might send to google。
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能还会看到 HTTP 请求形式中更复杂的首行，其中你不仅请求。斜杠默认主页。你并不是在请求斜杠 cat J peg 或斜杠 index dot html。可能还有问号和等号，请注意。这是我的
    Mac、PC 或手机可能发送给谷歌的信封摘录。
- en: dot com requesting pictures of cats And in fact。![](img/ada90f1c39922f956d79e8b087ef9d26_99.png)
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: dot com 请求猫的图片。事实上。![](img/ada90f1c39922f956d79e8b087ef9d26_99.png)
- en: let me go ahead and do this on my browser。Let me go to https。I'm not gonna bother
    using the insecure version at all。I'm gonna go explicitly to google dot com slash
    search question，mark Q equals cats。![](img/ada90f1c39922f956d79e8b087ef9d26_101.png)
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我在我的浏览器上做这个。让我访问 https。我根本不打算使用不安全的版本。我将明确地访问 google.com/search?Q=cats。![](img/ada90f1c39922f956d79e8b087ef9d26_101.png)
- en: So this is the human version of the URL that my Mac will translate。into this
    lower level message that's going to be shoved inside of the virtual envelope。So
    I'm gonna go ahead and enter and voila，I now see indeed，a whole bunch of pictures
    of cats。including some or horrific photos from a movie that didn't fare well as
    well。
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是我 Mac 将翻译的人类版本 URL。它会转换成这个将被放入虚拟信封的低级消息。好了，我要输入，瞧，我现在确实看到一大堆猫的照片，包括一些来自表现不佳的电影的可怕照片。
- en: So that is to say that it seems that once you understand your l formats。you
    could begin to pass input to servers。And here's now we're re bridge past weeks
    to future weeks。when we visited Web pages like Harvard do you and Yale dot edu
    and the like。We're just visiting static Web content。We're not actually providing
    user input like you would using get string or input。
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是说，一旦你理解了 URL 格式，你就可以开始向服务器传递输入。这里是我们如何将过去几周与未来几周连接起来。当我们访问像哈佛大学、耶鲁大学这样的网页时，我们只是访问静态网页内容。我们实际上没有像使用
    GET 字符串或输入那样提供用户输入。
- en: or any kinds of command line programs we've written。But it turns out that you
    are else do support user input and their standardized。If you see a question mark
    and then the name of a variable like Q and then an。equal sign and then a word
    like cats。![](img/ada90f1c39922f956d79e8b087ef9d26_103.png)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们写的任何命令行程序。但事实证明，URL 确实支持用户输入并且是标准化的。如果你看到一个问号，然后是一个变量名，比如 Q，然后是一个等号，再加上一个单词，比如
    cats。![](img/ada90f1c39922f956d79e8b087ef9d26_103.png)
- en: that's like the Web based analog off a command line program。Having asked you
    what is the value of Q and the human typing in cats？
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像基于网页的命令行程序模拟。当被问到 Q 的值时，人类输入 cats。
- en: So this is to say there is a way using you RL's that will actually allow us
    to pass，input to。that's what's happening when you're visiting google dot com。But
    it just boils down to understanding these girls。And before we begin to build some
    of our own solutions on top of this infrastructure。
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是说，有一种方法可以使用 URL 实际允许我们传递输入。这就是当你访问 google.com 时发生的事情。但这归结于理解这些 URL。在我们开始在这个基础设施上构建自己的解决方案之前。
- en: any questions now，our confusion on http or status codes，or anything we've seen
    thus far。anything at all？over Thio Santiago。So when you want to，publish a Web
    page。why is it you have to buy a domain name？Is that because you're you're kind
    of like using memory and some server？
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有任何问题吗，关于 http、状态代码或我们到目前为止见过的任何东西？任何事情都可以？过渡到圣地亚哥。所以当你想发布网页时，为什么你必须购买域名？是因为你在使用某种内存和服务器吗？
- en: it's a really good question。Why do you have to buy a domain name？It kind of
    boils down to capitalism。there is a non zero cost to running certain aspects of
    the Internet。![](img/ada90f1c39922f956d79e8b087ef9d26_105.png)
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个很好的问题。为什么你必须购买域名？这实际上归结于资本主义。运营互联网的某些方面是有成本的。![](img/ada90f1c39922f956d79e8b087ef9d26_105.png)
- en: certainly a really all aspects of the Internet。There are some non profit and
    volunteers。nonprofit organizations and volunteers that have historically helped
    govern it。there's overhead to operationalize ing the Internet。![](img/ada90f1c39922f956d79e8b087ef9d26_107.png)
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网的确涉及各个方面。有一些非营利组织和志愿者历史上帮助管理它。运营互联网是需要一定开销的。![](img/ada90f1c39922f956d79e8b087ef9d26_107.png)
- en: running things like the main DNS servers and other features and So there are
    what are called。![](img/ada90f1c39922f956d79e8b087ef9d26_109.png)
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 运行主要的 DNS 服务器和其他功能，所以有一些所谓的东西。![](img/ada90f1c39922f956d79e8b087ef9d26_109.png)
- en: Internet registrars，much like a university registrar whose purpose in life is
    to allow people to。essentially rent domain names on an annual basis。![](img/ada90f1c39922f956d79e8b087ef9d26_111.png)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 互联网注册商，类似于大学注册处，其目的是允许人们基本上以年度为基础租用域名。![](img/ada90f1c39922f956d79e8b087ef9d26_111.png)
- en: it's not yours permanently。![](img/ada90f1c39922f956d79e8b087ef9d26_113.png)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是永久归你所有。![](img/ada90f1c39922f956d79e8b087ef9d26_113.png)
- en: Once renewal fee，every one or two or three years or the like。![](img/ada90f1c39922f956d79e8b087ef9d26_115.png)
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦续费，每一到两年或三年一次。![](img/ada90f1c39922f956d79e8b087ef9d26_115.png)
- en: It might range from a couple of dollars to hundreds or even thousands of dollars。We
    could go down the rabbit hole talking about domain names。![](img/ada90f1c39922f956d79e8b087ef9d26_117.png)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 它的价格可能从几美元到几百甚至几千美元不等。我们可以深入讨论域名的相关问题。![](img/ada90f1c39922f956d79e8b087ef9d26_117.png)
- en: whereby if you think of a really cool word and you buy the domain name and someone
    else comes along and wants it。![](img/ada90f1c39922f956d79e8b087ef9d26_119.png)
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想到一个非常酷的词，然后购买了该域名，而其他人也想要它。![](img/ada90f1c39922f956d79e8b087ef9d26_119.png)
- en: there's capitalism at play there，potentially a knopper to nitty for you to sell
    the domain name to someone else。![](img/ada90f1c39922f956d79e8b087ef9d26_121.png)
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有资本主义的运作，可能会让你将域名出售给其他人。![](img/ada90f1c39922f956d79e8b087ef9d26_121.png)
- en: But in part it helps just regulate exactly who can sign。![](img/ada90f1c39922f956d79e8b087ef9d26_123.png)
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 但在某种程度上，它有助于严格规范谁可以注册。![](img/ada90f1c39922f956d79e8b087ef9d26_123.png)
- en: up for domain names and presumably put some downward pressure on all of them
    just disappearing。If you could just sign up for free for as many as you want other
    questions or。![](img/ada90f1c39922f956d79e8b087ef9d26_125.png)
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 注册域名似乎给所有域名施加了一些下行压力，以免它们全部消失。如果你可以免费注册任意数量的域名，那还有其他问题吗？![](img/ada90f1c39922f956d79e8b087ef9d26_125.png)
- en: clarifications on not just http but also TCP I peed ness。or any l thing else
    from today's alphabet soup。A question came in in the chat。If you have multiple
    packets that you're trying to send from one place to the other。did they have to
    be sent out one after the other？Or can you send all the packets out at the same
    time？
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 关于不仅是HTTP，还有TCP/IP协议或今天的字母汤中的其他任何内容的澄清。聊天中有个问题。如果你有多个数据包要从一个地方发送到另一个地方，它们是否必须一个接一个地发送？还是可以同时发送所有数据包？
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_127.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_127.png)'
- en: We did not think that we humans could do that very well，choreographically using
    zoom a bit ago。So we sent one packet of time through through the teaching。![](img/ada90f1c39922f956d79e8b087ef9d26_129.png)
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并不认为人类能很好地做到这一点，之前在Zoom中有些舞蹈。于是我们通过教学一次发送一个数据包。![](img/ada90f1c39922f956d79e8b087ef9d26_129.png)
- en: the computer would typically dump all of those packets out at the same time。They
    would be serialized one after the other，but it would happen very quickly。and by
    chance they might all follow the same route through the teaching fellows as routers。![](img/ada90f1c39922f956d79e8b087ef9d26_131.png)
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机通常会同时传送所有这些数据包。它们会依次序列化，但会非常快速地发生。碰巧的是，它们可能都通过教学助手作为路由器走同一条路线。![](img/ada90f1c39922f956d79e8b087ef9d26_131.png)
- en: Or they might go in different directions，depending on just how congested or
    how busy the Internet is at that moment。they might arrive out of order。that's
    why Brian needs to know what the sequence number is on the outside of the envelope
    so he can rearrange them。
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 或者它们可能会朝不同的方向走，具体取决于互联网此时的拥堵程度或繁忙程度。它们可能会按顺序到达。这就是布赖恩需要知道信封外部序列号的原因，以便他可以重新排列它们。
- en: in the correct order。How did the routers know which way to send any particular
    packet of data？
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 以正确的顺序发送。路由器如何知道将特定的数据包发送到哪个方向？
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_133.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_133.png)'
- en: Really Good question How did the writers know so back in the day？
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 真是个好问题，作家们是如何知道的，早在那时？
- en: And in some cases it's literally hard coded。You can think of a router is having
    essentially。like an Excel spreadsheet in its memory with it least two columns，one
    of which is an I P address。the other of which is like the direction it should
    go out on。like right left up and down like the cables are going in。but you can
    think of it in metaphorically。
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，它是硬编码的。你可以把路由器想象成在内存中有一个类似Excel电子表格的东西，至少有两列，一列是IP地址，另一列是应该发送的方向，比如左右上下，电缆的走向。但你可以从隐喻的角度来理解。
- en: it tells the router that if you receive data for this I p address。send it out
    on this cable or if it's for this I P address。send it out on that cable on All
    of these cables are connected to other routers in the same city。in different cities
    across an ocean to some other end point。That would be very painful。
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 它告诉路由器，如果你接收到这个IP地址的数据，就通过这根电缆发送；如果是这个IP地址，就通过那根电缆发送。这些电缆都连接到同一城市中的其他路由器，以及跨越海洋连接到其他城市的终点。这会非常麻烦。
- en: if humans had to manually configure all of the interconnections。We saw Mitt
    map just a bit ago。and so it turns out there's other protocols out there that
    we won't spend time on in this class。but that drought er's rely on in order to
    dynamically adapt。There are protocols that will figure out if all of a sudden
    my packets are not getting through。
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果人类必须手动配置所有的互连。我们刚刚看到的Mitt地图。因此，确实存在其他协议，我们在这堂课中不会花时间讨论，但那些路由器依赖于这些协议以动态适应。有一些协议会判断我的数据包是否突然无法通过。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_135.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_135.png)'
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_136.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_136.png)'
- en: I'm going to start routing around that dynamically。and the routers are going
    to figure out that does not seem to be a good destination。![](img/ada90f1c39922f956d79e8b087ef9d26_138.png)
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我将开始动态地进行路由。路由器会判断那似乎不是一个好的目的地。![](img/ada90f1c39922f956d79e8b087ef9d26_138.png)
- en: because I'm not getting any response or it's just taking way too long to hear
    back。So there are protocols that govern how you can decide whether to start dynamically
    changing。those so called routing tables。![](img/ada90f1c39922f956d79e8b087ef9d26_140.png)
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我没有收到任何响应，或者花了太长时间才得到回复。因此有一些协议决定你是否可以动态地改变那些所谓的路由表。![](img/ada90f1c39922f956d79e8b087ef9d26_140.png)
- en: the spreadsheet to which I referred earlier。so we have now at this point an
    infrastructure known as the Internet that allows us to。send packets of information
    from point A to point B by writing addresses and port numbers on the。outside of
    those envelopes，we have another protocol called http。which is specifically used
    for Web browsers and Web servers separate from video。
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '我之前提到的电子表格。因此，在这一点上，我们现在有一个称为互联网的基础设施，允许我们通过在信封外部写地址和端口号，将信息数据包从A点发送到B点。我们还有一个称为HTTP的协议，专门用于网页浏览器和网页服务器，与视频分开。 '
- en: which have their own set of conventions and protocols。But we have a mechanism
    for get requesting information and responding with information。and we know from
    problems that for how you can respond with a cat，it's just a sequence of bits。Whether
    it's a bit map or Jay Peak or something else。
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 它们有自己的一套约定和协议。但我们有一个机制来请求信息并以信息回应。我们从问题中知道，如何用猫进行回应，这只是一串位。无论是位图还是其他东西。
- en: but we haven't yet seen what an actual Web page looks like。if we look a little
    deeper in the envelope that I'm sending to Brian and he's sending to。me and you
    were getting back from Harvard and we're getting back from Yale。we're going to
    see another language altogether。It's not a programming language per se。
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们还没有看到实际网页的样子。如果我们更深入地查看我发送给布莱恩的信封，而他又将其发送给我，你从哈佛收到的回应，以及我们从耶鲁收到的回应，我们会看到另一种语言。这并不是一种编程语言。
- en: It's what's known as a markup language，which just means it's more about aesthetics
    than it is about logic。And there's gonna be a couple of other languages tucked
    in their CSS cascading style sheets。which is a proper programming language。But
    let's go ahead and take a five minute break here。we'll learn to make Web pages
    themselves。
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 它被称为标记语言，这意味着它更多地关乎美学而非逻辑。而且还会有其他几种语言被嵌套其中，CSS层叠样式表，它是一种正规的编程语言。但我们先休息五分钟，我们将学习如何制作网页。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_142.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_142.png)'
- en: So when you visit a website requesting the home page or a specific，file on the
    website。exactly what is inside of the virtual envelope a little deeper down below
    the HDP。headers that you get back from the server。that language is known as HTML
    hypertext markup language。![](img/ada90f1c39922f956d79e8b087ef9d26_144.png)
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当你访问一个网站请求主页或特定文件时，虚拟信封的内部内容是什么，稍微深入一下HDP。服务器返回的标题。该语言称为HTML超文本标记语言。![](img/ada90f1c39922f956d79e8b087ef9d26_144.png)
- en: which indeed is not a programming language，which means there's no loops，there's
    no conditions。![](img/ada90f1c39922f956d79e8b087ef9d26_146.png)
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这确实不是一种编程语言，这意味着没有循环，没有条件。![](img/ada90f1c39922f956d79e8b087ef9d26_146.png)
- en: There's no functions or variables per se。It's just text that tells the browser
    fairly pedantic。Lee top to bottom left to right。What to display and how。![](img/ada90f1c39922f956d79e8b087ef9d26_148.png)
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 它实际上没有函数或变量。这只是文本，告诉浏览器以相当细致的方式从上到下，从左到右，显示什么以及如何显示。![](img/ada90f1c39922f956d79e8b087ef9d26_148.png)
- en: So let's take a look at some examples。HTML pages gonna contain really two different
    concepts inside of it。![](img/ada90f1c39922f956d79e8b087ef9d26_150.png)
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些示例。HTML 页面将包含两种不同的概念。![](img/ada90f1c39922f956d79e8b087ef9d26_150.png)
- en: What we call tags or elements Andi also attributes well。![](img/ada90f1c39922f956d79e8b087ef9d26_152.png)
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们称之为标签或元素，以及属性。![](img/ada90f1c39922f956d79e8b087ef9d26_152.png)
- en: here is perhaps the simplest Web page we can make，and this is HTML itself。and
    you'll see that it's structured and kind of ah，symmetric way。Something's air indented
    like in a proper programming language。But there is some symmetry to what's going
    on here。
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 这里可能是我们能制作的最简单的网页，这就是 HTML 本身。你会看到它是结构化的，并且有一种对称的方式。某些内容像在适当的编程语言中那样缩进。但这里的确有某种对称性。
- en: So let's tease apart top to bottom exactly what we're looking at here。This very
    first line is known as a document type declaration。Long story short whenever making
    a modern Web page。this should just be the very first line of your file。no matter
    what it signifies that you and I are using the latest version of HTML。which is
    Version five。this line will probably change as HTML itself。The language evolves
    as humans and more and more features to it below。then notices a pair of what we're
    gonna call tags。Tags are things between open brackets。
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们逐步理清我们在这里看到的内容。这第一行被称为文档类型声明。长话短说，每当制作现代网页时，这应该是你文件的第一行。无论如何，这表明你和我正在使用最新版本的
    HTML，即版本五。随着 HTML 本身的演变，这一行可能会改变。下面注意一对我们将称之为标签的内容。标签是开括号之间的内容。
- en: Let's start with a word like HTML or some succinct phrase like that optionally。with
    something like this word and an equal sign and maybe something in quotes after
    that but highlighted in。Here is the first of our HTML tags，this tag is the HTML
    tag。And the way it works is as follows。When a browser receives of envelope containing
    text like this。
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从一个词，如 HTML，或者一些简洁的短语开始，可选地。像这样一个词和一个等号，后面可能还有一些带引号的内容。这里是我们的第一个 HTML 标签，这个标签是
    HTML 标签。它的工作方式如下。当浏览器收到一个包含文本的信封时。
- en: it first reads that first line and says，this file contains HTML Version five。What's
    what comes after it？here is the contents of the Web page。browser here comes from
    HTML。Notice down here is sort of the opposite of that statement。When you get to
    the end of this file。you'll see a similar looking tag，but there's a forward slash
    in front of the same word。
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 它首先读取第一行并说，这个文件包含 HTML 版本五。接下来是什么？这是网页的内容。浏览器来自 HTML。请注意，这里有点与该声明相反。当你到达文件的末尾时。你会看到一个类似的标签，但前面有一个斜杠。
- en: That's what we'll call a closed tag if we think of this as an open tag。or if
    you think of this as a start tag，this is an end tag，and most tags indeed have
    that symmetry。whereby when you open them once，you should eventually close them
    ideally in the appropriate order。Notice that you don't have to repeat other stuff
    when you close a tag。
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们将其视为一个开放标签，或者如果你将其视为起始标签，这就是结束标签，大多数标签确实有这种对称性。打开它们一次后，理想情况下你应该在适当的顺序中关闭它们。请注意，关闭标签时你不必重复其他内容。
- en: You just mentioned the name of the tag to keep it fairly succinct。that's it
    for the HTML。what's inside of that？If we look down below this，you'll see that
    there's this thing here。which is what's gonna be called an attribute。Attributes
    tend to be short。succinct phrases that have some special meaning for that particular
    tag。This particular attributes。
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你只需提到标签的名称，以保持简洁。HTML 就是这样。里面有什么呢？如果我们往下看，你会看到这里有一个东西，这就是我们将称之为属性的内容。属性往往是简短的、简洁的短语，对特定标签具有特殊含义。这些特定的属性。
- en: If you read the documentation for the language，HTML will say that if you add
    Lang equals quote unquote something to。your HTML tag，that's gonna be a clue to
    the browser that says，Here comes HTML。And by the way。the contents of this Web
    page are going to be in English，by default for E N。Every language in the world
    has its own two digit or three digit three character to character or three。
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你阅读该语言的文档，HTML 会说，如果你在 HTML 标签中添加 Lang 等于引号中的某个内容，这将是浏览器的线索，告诉它，接下来是 HTML。顺便提一下。该网页的内容默认是英文，E
    N。世界上每种语言都有自己的两位或三位字符编码。
- en: character code that could be placed inside these quotes that will standardized。exactly
    what the browser interprets it as useful these days。like translation enabled in
    your browser。It knows what language the pages written in so that it can help you
    translate it to your own spoken。there's two sets，two pairs of tags，the head tag
    here and the body tag here。
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 可以放置在这些引号内的字符代码将标准化浏览器所解释的内容。现在很有用，例如浏览器中的翻译功能。它知道页面用什么语言编写，因此可以帮助你将其翻译为你所说的语言。这里有两对标签，即头部标签和主体标签。
- en: And I've highlighted them both at the same time because you can think of these
    as both Children off the。HTML tag。So if we borrow our metaphor of，family tree
    and some kind of hierarchy here。if you think of like the HTML tag is being like
    the parent。This parent has two Children ahead tag and a body tag。
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我同时突出显示了它们，因为你可以将这两个视为HTML标签的子项。因此，如果我们借用家庭树和某种层级的比喻，想象HTML标签是父项。这个父项有两个子项，头部标签和主体标签。
- en: each of which is respectively opened and closed。Let's consider the first one
    the head tag。What's inside of that，Inside of that is the title tag，as you might
    guess by now。is going to represent the title of the Web page were writing specifically。The
    title of this Web page is gonna be literally and just goofily Hello。
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 每个标签都分别打开和关闭。我们考虑第一个，即头部标签。里面的内容，你现在可能猜到了，是标题标签，将表示我们正在编写的网页的标题。这个网页的标题将是字面上的，也就是“你好”。
- en: So that's what you would see in like the tab of this Web page。Let's back up
    a little bit and look now with the second child of the HTML tag。this so called
    body tag。This is going to be the big rectangular region of the Web page。otherwise
    known as the body or view port。And here we see that the contents of that rectangular
    region of the page is gonna be literally。
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是你在这个网页标签中看到的内容。让我们稍微回顾一下，现在看看HTML标签的第二个子标签，即所谓的主体标签。这将是网页的大矩形区域，也称为主体或视口。在这里，我们看到该矩形区域的内容将是字面上的。
- en: this is the HTML for a fairly simplistic Web page whose title。bar in the tab
    is hello comma title and whose body in the big rectangular region，comma body。And
    it's perhaps helpful now to call out explicitly that we can think of this all
    our。Five is really a data structure，even though it's just text inside of that
    envelope that gets red top to bottom left to right。
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个相对简单的网页的HTML，其标签栏标题是“你好，标题”，而其主体在大的矩形区域中，称为主体。现在明确指出，我们可以将这一切视为一个数据结构，即使它只是包裹内的文本，自上而下、从左到右读取。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_154.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_154.png)'
- en: What the browser is actually going to do on your laptop or desktop or phone
    is actually。build a data structure in memory。So Microsoft，who wrote Chrome or
    Apple，who wrote Safari。wrote code that reads html top to bottom，left to right
    like a big long string parses it that is。analyzes it and builds up into the computer's
    memory。
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器在你的笔记本电脑、台式机或手机上实际上要做的事情是构建一个内存中的数据结构。所以，编写Chrome的微软或编写Safari的苹果，写了代码从上到下、从左到右读取HTML，就像一个长字符串，解析它，即分析它并将其构建到计算机的内存中。
- en: A tree like data structure like this much like for problems that five。You built
    up your own hash table in memory for what was otherwise just a big text，file of
    words。So you can see the hierarchy here。If you think of the whole file is being
    the so called document will draw a node。the very first and on Lee Child of that
    is the HTML tag。
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 这样的树状数据结构就像是为问题五构建的。在内存中构建自己的哈希表，以处理原本只是一个大型文本文件的单词。因此，你可以看到这里的层级。如果将整个文件视为所谓的文档，将绘制一个节点，而该节点的第一个也是唯一的子项就是HTML标签。
- en: every Web page has to start with that HTML tag。It has two Children，as I proposed
    head and body。and then head has a title child and that has a child itself。which
    is just text and just to be a little nitpicky of deliberately drawn these nodes
    in。slightly different shapes，just to ca note that HTML head title and body。
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 每个网页都必须以HTML标签开始。它有两个子项，正如我所提到的，头部和主体。头部有一个标题子项，而标题本身也有一个子项，那就是文本。为了稍微挑剔一下，我故意将这些节点绘制成略微不同的形状，以表示HTML头部、标题和主体。
- en: are indeed all tags opened and closed。These ovals here are just text。Those air
    not inside of those air，not tags themselves。That's just raw text here and here。and
    then the document note is the one random one。This is the only thing that's going
    to start with an exclamation point。typically，unless you have what we'll call comments
    in HTML。
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，所有的标签都被打开和关闭了。这些椭圆形的只是文本。那些并不在标签内部，那些本身并不是标签。这只是这里和这里的原始文本。而文档注释是唯一一个随机的。这是唯一一个会以感叹号开头的内容。通常，除非你有我们所称的
    HTML 注释。
- en: which are just notes to self that we saw and see。And in Python they're similar
    syntax for those。if this is the simplest Web page we can make，where do we make
    it？
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是我们看到和理解的自我备注。在 Python 中也有类似的语法。如果这是我们能制作的最简单的网页，我们该在哪里制作呢？
- en: So you could certainly just open up your Mac or PC and open up something like
    text。edit or note pad X and type this out。Save the file and open in your browser。But
    that's not that interesting，because if you just save a HTML file on your Mac or
    PC。you are going to be literally the only on one in the world who convince it
    it。
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你当然可以打开你的 Mac 或 PC，打开像 text edit 或 note pad X 这样的程序，输入这些内容。保存文件并在浏览器中打开。但这并不太有趣，因为如果你只是在你的
    Mac 或 PC 上保存一个 HTML 文件。你将 literalmente 是世界上唯一一个能打开它的人。
- en: you want to server on which you can write and save your HTML so that other people。can
    visit the file via the Internet。we all have access to a tool already called CS
    50。which itself is a Web based tool for writing code，and the code will start writing
    now just happens to be an HTML。So let me go ahead and do that。Go ahead and open
    up a new file。
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要一个服务器，这样你就可以编写和保存你的 HTML，以便其他人可以通过互联网访问该文件。我们都有一个名为 CS 50 的工具，实际上这是一个用于编写代码的
    Web 工具，而我们现在开始编写的代码恰好是 HTML。所以让我来做这个。继续打开一个新文件。
- en: I'll go ahead and call this say hello dot html dot。![](img/ada90f1c39922f956d79e8b087ef9d26_156.png)
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我将称这个文件为 hello dot html dot。![](img/ada90f1c39922f956d79e8b087ef9d26_156.png)
- en: Being the conventional file extension on，let me just go ahead and re type that。So
    doc type HTML says。Here comes version five html Lang equals quote unquote e n。And
    now notice what the idea is doing for me，For better or for worse，depending on
    your preferences。it's gonna try to complete your thoughts for you so you can just
    type less。
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 作为常规文件扩展名，让我重新输入一下。所以 doc type HTML 表示。这里是版本五 html Lang 等于 quote unquote e n。现在注意，IDE
    正在为我做什么，视你的偏好而定，好的或坏的。它会尝试为你完成你的想法，这样你可以少输入一些。
- en: This is increasingly a feature of IEDs，integrated development environments because
    now I can type roughly half assed much。I'm gonna go ahead and open the head of
    the page，notice it got automatically closed。I'm gonna go ahead and open the title
    of the page that will automatically close as。And let me go ahead and just do something
    like hello title。
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这越来越成为集成开发环境（IEDs）的一个特性，因为现在我可以大约输入一半的内容。我将打开页面的 head，注意它已自动关闭。我将打开页面的 title，它也会自动关闭。让我来做一些像
    hello title 的事情。
- en: And then down here outside of the head tag，I'll do my body tag and do Hello，comma
    body。strictly speaking，this indentation is not necessary。If I wanted to be a little
    more terse and not uses many lines。this is totally reasonable is well and it's
    probably reasonable。If I had a crazy long title。
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在 head 标签外面，我会添加我的 body 标签，并写上 Hello，逗号 body。从严格意义上讲，这种缩进并不是必需的。如果我想稍微简洁一点，不用那么多行。这完全是合理的，而且可能也很合理。如果我有一个非常长的标题。
- en: I probably should move it to a line of its own。these details are not going to
    matter to the computer。to the browser reading this。But they certainly make it
    prettier and easier for me。the human and presumably you to read as well。So I've
    gone ahead and save this file。and in the past I would have used，make for C or
    I would have used Python for Python。
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我可能应该把它移到自己的一行。这些细节对计算机来说并不重要，对浏览器来说也是。可是它们确实让它更美观，也更容易让我这个人，假设你也是，去阅读。所以我已经保存了这个文件。在过去我会使用
    make for C，或者我会使用 Python for Python。
- en: But neither of those is applicant because we're not writing or running code。I
    now want to visit this Web page，I need a browser and I'm all set there。I can use
    chrome safari whatever on my own Mac。But I also need a server。and it turns out
    that CS 50 i d。In so far as it is already a Web server that we used to write code。
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 但这两者都不适用，因为我们并不是在编写或运行代码。我现在想访问这个网页，我需要一个浏览器，我已经准备好了。我可以在我的 Mac 上使用 Chrome、Safari
    等。但我也需要一个服务器。结果发现 CS 50 ID 本身就是一个我们用来编写代码的 Web 服务器。
- en: we can use it as a Web server to serve our HTML as well。a moment a little bit
    ago。when I played the role of a Web server，I need to essentially implement in
    the idea that same notion of some program that's just。gonna listen and listen
    and listen。Like I was waiting for Brian。And any time I get a http request from
    anyone's browser。
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以用它作为 Web 服务器来提供我们的 HTML。就在不久前，当我扮演 Web 服务器的角色时，我基本上需要在这个想法中实现一些程序，只是在听、听、再听。就像我在等待
    Brian。当我从任何人的浏览器收到 http 请求时。
- en: I'm going to respond with the appropriate file。Now we're not going to implement
    a Web server ourselves。Web servers or kind of commodity。anyone can just download
    or pay for one and use one。the idea comes with one quite simply called http dash
    server。So this is a program preinstalled in the I。It's free and open source。
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 我将用合适的文件进行回应。现在我们不打算自己实现一个 Web 服务器。Web 服务器算是一种商品，任何人都可以下载或付费使用。这个想法简单地来自一个叫做
    http dash server 的程序。这是一个预装在 I 中的程序，它是免费且开源的。
- en: You can use it on Lenox or Macs or PCs as well，but it's pre installed in the
    I D。And when I run it。what it's going to do for me is start curiously，a second
    Web server。Because the idea itself is already running on CS 50 Zone Web server。I
    need to now run my own Web server。But in order to distinguish one from the other。
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在 Linux、Mac 或 PC 上使用它，但它在 I D 中预装。当我运行它时，它会为我启动一个新的 Web 服务器。因为这个想法本身已经在 CS
    50 自己的 Web 服务器上运行。我现在需要运行自己的 Web 服务器，以便区分两个服务器。
- en: I'm just going to use a different port and by default，the port that ccs 50 i
    d uses is this 1 80 80。So again by default。Most Web servers in the world to use
    Port 80 insecure and Port 443，if secure。But those air unfortunately already used
    by CS 50 Idea itself。which is running already on CS Fifties Web server。So if I
    want to use the same server。
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用不同的端口，默认情况下，ccs 50 i d 使用的是 1 80 80 这个端口。所以再次默认情况下，世界上大多数 Web 服务器使用不安全的
    80 端口和安全的 443 端口。但不幸的是，这两个端口已被 CS 50 自身使用，它已经在 CS 50 的 Web 服务器上运行。所以如果我想使用同一个服务器。
- en: the same computer in the cloud to listen for other requests of my own。I'm just
    going to start my own second Web server in parallel and just haven't listened
    on a different。And that's just so that you and I can run our own Web server。even
    though we don't have control over the idea itself outside of our own accounts。
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 同一台云计算机监听我自己的其他请求。我只是要并行启动自己的第二个 Web 服务器，只是在不同的地方监听。这就是为了让你我能够运行自己的 Web 服务器，尽管我们在自己的账户之外无法控制这个想法。
- en: Now it's a pretty cryptic looking host name，It's this random thing。Zero CD 83813
    and so forth。But at the end of the day，it's just a oral noticed that it ends in
    CS 50 X y Z。which is a domain name that we bought and we use solely for this purpose
    of running Web servers。![](img/ada90f1c39922f956d79e8b087ef9d26_158.png)
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这是一个看起来相当神秘的主机名，它是一个随机的东西，Zero CD 83813 等等。但归根结底，它只是一个口头通知，最后以 CS 50 X y Z
    结束，这是一个我们购买的域名，仅用于运行 Web 服务器。![](img/ada90f1c39922f956d79e8b087ef9d26_158.png)
- en: on CS 50。I'd so if I go ahead and click that and click open Y la。I will now
    see a fairly arcane textual listing off all of the。files in the folder in which
    I just ran。Http server and let me go ahead and zoom in a little bit and you'll
    see that there's only one file in there thus。far that we've written hello dot
    html。So let me go ahead and click on that file and voila！
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在 CS 50 上。如果我继续点击并打开 Y la。我现在会看到一个相当复杂的文本列表，列出了我刚刚运行 http server 的文件夹中的所有文件。让我放大一点，你会看到里面只有一个文件，就是我们写的
    hello dot html。所以让我点击这个文件，瞧！
- en: There it iss hello body，my very first page。I don't see the title because I'm
    in full screen mode。but let me go ahead and on full screen myself。if I zoom in
    on the title and the tab off this page。comma title。So what has just happened？I
    happen to be using CS 50 I to eat just because it's convenient。You and I already
    have accounts on it。We're running our own Web server。
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我的第一个页面，hello body。我没有看到标题，因为我处于全屏模式。但让我退出全屏模式。如果我放大这个页面的标题和标签。标题。那么刚刚发生了什么？我刚好在使用
    CS 50 I，因为这很方便。你我都已经有账户了。我们正在运行自己的 Web 服务器。
- en: implementing the software version of the role I was humanly playing earlier。I'm
    using chrome as my browser，just like Brian was our browser in the story before。And
    so when I visit this long U R L in my browser's bar that the server told me。to
    visit notice that it ends with slash hello dot html So，all in one environment。
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 实现我之前作为人类所扮演角色的软件版本。我用Chrome作为我的浏览器，就像布莱恩之前在故事中一样。所以当我在浏览器的地址栏中访问这个长URL时，服务器告诉我访问的地址。注意，它以slash
    hello.html结尾，所以一切都在一个环境中。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_160.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_160.png)'
- en: I'm sort of serving Web pages and requesting Web pages。because this is what
    a real world software developer would dio when building their own websites or
    Web。They want to actually keep everything local and work on it and work on it
    until they're ready to release it。Any questions or confusions thus far on the
    web page？We just built any，questions or confusion。
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在提供网页和请求网页。这是一个现实世界的软件开发者在构建自己的网站时所做的。他们希望实际保持一切本地，反复工作，直到准备好发布。有任何关于我们刚刚构建的网页的问题或困惑吗？有任何问题或困惑吗？
- en: Brian done here？let me go ahead here and point out one thing in the tab here。some
    of you very cleverly are actually amazingly transcribed that your because I'm
    seeing more。Http requests coming in right now。Notice that in the terminal window
    of my ID where I ran http server。I'm seeing row by row，the requests coming in，and
    so this is kind of a log because my web server is still running。
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 布莱恩做完了吗？让我在这里指出一个标签中的事情。你们中一些人非常聪明，实际上惊人地转录了你们，因为我看到更多的。HTTP请求现在进来了。注意到在我运行HTTP服务器的终端窗口中，我看到请求一行行地进来，这算是一种日志，因为我的Web服务器仍在运行。
- en: And if any of you actually want to type out that same u r l again。![](img/ada90f1c39922f956d79e8b087ef9d26_162.png)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你们想再次输入那个相同的URL。![](img/ada90f1c39922f956d79e8b087ef9d26_162.png)
- en: if you rewind in time in the video，you can actually visit my hello dot html
    file right now on the Internet。![](img/ada90f1c39922f956d79e8b087ef9d26_164.png)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你倒回视频的时间，你实际上可以在互联网上访问我的hello.html文件。![](img/ada90f1c39922f956d79e8b087ef9d26_164.png)
- en: assuming you're watching Lecture live and you can see New Rose appearing in
    my output here。![](img/ada90f1c39922f956d79e8b087ef9d26_166.png)
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你正在观看现场讲座，你可以看到“新玫瑰”出现在我的输出中。![](img/ada90f1c39922f956d79e8b087ef9d26_166.png)
- en: But that's just to say it's useful for us，but let me go ahead and do something
    else here for just a moment。I'm gonna go ahead and in a moment，create another
    file，this time to demonstrate some other HTML tags。So let's go back here and in
    my，I'll keep my terminal window running。But I don't really care about the output
    now，so I'm just gonna go ahead and minimize it down there。
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 但这只是说这对我们有用。让我在这里稍微做点别的。我将创建另一个文件，这次演示一些其他的HTML标签。所以让我们回到这里，我会保持我的终端窗口运行。但我现在不太关心输出，所以我只会把它最小化。
- en: I'm gonna go ahead and create another file appear called paragraphs dot html。![](img/ada90f1c39922f956d79e8b087ef9d26_168.png)
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我将创建另一个文件，叫做paragraphs.html。![](img/ada90f1c39922f956d79e8b087ef9d26_168.png)
- en: and let's see if we can't introduce some other features of HTML。I'll go ahead
    and type out the same as before。Doc type html。My HTML tag with my Lang for English
    attributes。the idea will get confused。If I sort of started thought，don't finish
    my thought，then try to finish it again。
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看是否可以引入一些HTML的其他特性。我会继续输入和之前一样的内容。文档类型HTML。我的HTML标签带有英文的Lang属性。这个想法会让人困惑。如果我开始一个想法却没有完成，然后再试图完成它。
- en: You might just have to clean up with The idea is trying to do for you to be
    helpful。I'm gonna go ahead and create the head tag here。I'm going give myself
    a title here。I'll call this page paragraph，so I'll keep it all in one line just
    to keep it succinct。Open up my body。And now I'm gonna go ahead and type out like
    five paragraphs of Latin text。
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能需要清理一下，想法是为了帮助你。我现在来创建这个头部标签。我给自己起个标题。我称这个页面为段落，所以我会把它保持在一行，以便简洁明了。打开我的主体。现在我要输入五段拉丁文本。
- en: that I'll just go ahead and put right here。Let me go ahead and invent this nicely
    just to make it nice and readable。This is your sort of Lauren ipsum text，which
    is just sort of Latin like nonsense。And here I have five paragraphs of text now。![](img/ada90f1c39922f956d79e8b087ef9d26_170.png)
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我就直接把这个放在这里。让我来好好构造一下，使其更加易读。这是你们的洛伦·伊普森文本，基本上是一些类似拉丁语的无意义内容。现在我有五段文本了。![](img/ada90f1c39922f956d79e8b087ef9d26_170.png)
- en: It's way more than just hello body。So let me go ahead and save this file。Let
    me go back to my other tab here。Notice that nothing has changed until I click
    Reload。which will reveal the latest contents of my folder。So let me click paragraph。study
    HTML and I should see five paragraphs of Latin like text。
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这远不止是hello body。所以让我保存这个文件。让我回到我的另一个标签。在我点击重新加载之前，注意到没有任何变化，这将显示我文件夹的最新内容。所以让我点击段落，学习HTML，我应该看到五个拉丁文段落。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_172.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_172.png)'
- en: huh？that's just a big mess。One massive long paragraph。Any instincts for what？The
    bug here might be？
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 呜？这真是一团糟。一个庞大的长段落。对此可能存在的bug有什么直觉吗？
- en: Any thoughts on the chat？Or were the raised hand，over Thio Ryan？At least from
    the way it's set up。It doesn't look like HTML has kind of auto line spacing by
    default。So it's not going to kind of collect them all into this one big string
    unless you somehow。create a space in between each paragraph。like most any computer
    language programming or otherwise。
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 关于聊天有什么想法？还是Ryan举手了？至少从设置的方式来看，HTML似乎没有默认的自动行距。所以它不会把所有内容收集到这个大的字符串中，除非你以某种方式在每个段落之间创建一个空格，就像大多数计算机语言一样。
- en: is gonna take you literally。And if you don't tell it what to do using an HTML
    cases these tags。it's just going to do some default behavior instead。So let me
    actually go back。Thio CS 50 id。Let me introduce another tag here。Turns out there's
    a tag called the paragraph tag and the shorthand notation for that is。quite simply
    open Bracket P closed bracket。The idea is gonna try to finish my thought。
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 它会字面意思上处理你。如果你不通过HTML标签告诉它该做什么，它就会执行一些默认行为。所以让我回到CS50的页面。让我在这里引入另一个标签。原来有一个叫做段落标签，简写是简单的开括号P闭括号。我的想法是完成我的思路。
- en: but because I already have the paragraph，I'm gonna need to manually fix this
    myself。So let me go ahead and open it there and let me go ahead now and just kind
    of insert a few of these。one there and let me go ahead and copy the closed tag
    one there。one there and one there and now let me，just for style sake in Dent further。
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 但是因为我已经有段落了，我需要手动修复这个问题。所以让我在这里打开它，接下来插入几个这样的标签。一个在这里，再复制一个闭合标签到这里，再一个在这里，现在让我为了样式在后面再加一点。
- en: And I know that pretty much in every past week I've claimed that copy Paste
    is bad。Not really the case with HTML，because if you want multiple paragraphs，there's
    no notion of a loop。You can kind of create five paragraphs of Latin like text
    with HTML alone。in this case is the right solution。let me go ahead now and go
    back to my other tab and now hit。
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道几乎在过去每一周我都声称复制粘贴是不好的。对于HTML来说并非如此，因为如果你想要多个段落，就没有循环的概念。你可以仅用HTML创建五个拉丁文段落。在这种情况下，这是正确的解决方案。让我回到我的另一个标签并现在点击。
- en: Nothing's going to change until you tell it，So just like you would reload a
    normal website。let me reload my own。And voila！We fixed the problem that Ryan identified
    by now explicitly using HTML paragraph tag。And it's deliberately the P tag。Because
    HTML tags tend to be succinct。It's fewer characters to type。And how do I know
    it's the P tag？You just have to learn it at some point in a class in a book and
    a website。
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 在你告诉它之前，什么都不会改变。所以，就像你重新加载一个普通网站一样，让我重新加载一下自己的页面。瞧！我们通过明确使用HTML段落标签修复了Ryan识别的问题。故意使用的是P标签，因为HTML标签往往简洁，输入的字符更少。我怎么知道是P标签？你只需在课堂、书本或网站上学习到这一点。
- en: and indeed much like with python as with C，we're not going to aspire to teach
    you the the laundry list off HTML。tags and attributes that are out there but focused
    today，particularly on concepts and fundamental。so that you can add to your vocabulary
    quite quickly via any number of online。let's go ahead and do this rather than
    do everything from scratch。
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 的确，像Python和C一样，我们并不打算教你HTML中所有的标签和属性，而是今天特别关注概念和基础，以便你可以通过许多在线资源快速扩充你的词汇。让我们这样做，而不是从头开始。
- en: Let me go ahead and copy this and create another file that I'll call headings
    dot html。When writing a paper or writing，writing or reading a book。like chapter
    headings or section or subsection headings。you could do this in HTML as well。So
    I'm gonna go ahead and introduce a couple more tags here，namely the H one tag。
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 让我复制这个并创建一个我称之为headings.html的文件。在写论文或读书时，比如章节标题或小节标题，你也可以用HTML做到这一点。所以我会在这里引入几个更多的标签，即H1标签。
- en: which is like the biggest heading tag。I'm just going to write the word one here
    just to keep it simple over here。I'm going to do H two and I'll say to down here，I'm
    gonna go ahead and say h three and I'll say three and down here。I'll do H four
    and then four。I'll do H five here，five and then down here。I ran out of paragraphs。so
    I'm gonna go ahead and give myself one duplicated paragraph just for demonstration
    sake so that。
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像是最大的标题标签。我这里只是写下一个简单的单词。我要做 H 二，然后说到这里，我将继续做 h 三，并说三到这里。我将做 H 四，然后是四。我将在这里做
    H 五，五，然后到这里。我没有段落了。所以我准备给自己一个重复的段落，仅仅为了演示。
- en: we have all six here and go ahead and save it there。![](img/ada90f1c39922f956d79e8b087ef9d26_174.png)
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这里有六个，并继续保存它。![](img/ada90f1c39922f956d79e8b087ef9d26_174.png)
- en: So if I go back now to my browser and reload，Nothing happens because I'm in
    the wrong file。But if I go back，I now have a file called headings dot html。![](img/ada90f1c39922f956d79e8b087ef9d26_176.png)
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我现在回到我的浏览器并重新加载，什么也不会发生，因为我在错误的文件中。但是如果我回去，我现在有一个名为 headings.html 的文件。![](img/ada90f1c39922f956d79e8b087ef9d26_176.png)
- en: and it's the same content。But now it's kind of getting a little prettier，It's
    big and bold headings。1234 Notice those headings。You're getting smaller and smaller。but
    that's kind of the convention in a book or an academic paper。where your sections
    and sub sections and sub sub sections get smaller and smaller。
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 内容是一样的。但现在看起来有点更好，它是大而粗体的标题。1234 注意这些标题。它们越来越小。这在书籍或学术论文中是一种惯例，你的章节、子章节和子子章节会越来越小。
- en: And we can customize this if we really want。But out of the box HTML gives us
    the ability to even format things like headings like that。what else can we do
    in HTML？let me go back to my I d。Let me go ahead and copy paste some of this just
    to save some time。and then we create another file called Say list dot html。
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们真的想，我们可以自定义这个。但开箱即用的 HTML 让我们能够格式化像这样的标题。我们在 HTML 中还可以做些什么呢？让我回到我的 ID。让我先复制粘贴一些内容以节省时间。然后我们创建另一个文件，命名为
    Say list.html。
- en: Turns out HTML makes it really easy to write lists。Two lists and down here if
    I want to have a list of three things like Foo Bar and。which is sort of generic
    computer science terms whenever you just need placeholders like X y and Z and
    math。few Barnabas or what people tend to reach for All right，I have a nice clean
    list there。
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，HTML 使写列表变得非常简单。在这里，如果我想列出三个东西，比如 Foo、Bar 和，这些都是非常通用的计算机科学术语，当你只需要占位符时，比如数学中的
    X、Y 和 Z，或者人们常常会想到的几个 Bar。好的，我有一个干净的列表。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_178.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_178.png)'
- en: Let me go back to my other tab。Go back to my directory index here and there's
    list at HTML。Same problem is Ryan identified again。If I don't pedantic Lee，tell
    the browser，Start a list。It's just going to assume that I just want one big block
    of text。it preserved white space。It collapsed all of those new lines and tabs
    into single spaces。
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 让我回到我的其他标签。返回我的目录索引，这里有 HTML 的列表。瑞恩再次发现了同样的问题。如果我不详细告诉浏览器开始一个列表，它就会假设我只是想要一个大的文本块。它保留了空白字符。它将所有的换行和制表符压缩成单个空格。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_180.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_180.png)'
- en: But that's not what I want。So how can I fix this？I need some kind of additional
    tag。and it turns out there's a couple of approaches。There's the A Northern List
    tag。So you l for a Nord Erred list，which means it's not numbered and then inside
    of that。you can have child tags called the L I or list，Let me give myself another
    one bar and give myself another one。
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 但这不是我想要的。那么我该如何解决这个问题？我需要某种额外的标签。结果发现有几种方法。有一个无序列表标签。所以你使用 l 来表示无序列表，这意味着它不是编号的，然后在里面，你可以有名为
    LI 的子标签，或列表。让我再给自己一个条目，然后再给自己一个。
- en: So it's more to type。And definitely there's almost a many red characters the
    HTML。which is just being nicely syntax highlighted for me by the ID than there
    is actual content。But if I now go back here and reload，And if you looked at the
    Courses website。we actually make heavy use of bulleted lists for content and invitation
    and so forth。
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 所以输入更多的内容。而且实际上，HTML 中几乎有那么多红色字符，这些字符都被我的 IDE 进行了很好的语法高亮，远比实际内容要多。但是如果我现在回到这里并重新加载，如果你查看课程网站，我们实际上在内容和邀请等方面大量使用了项目符号列表。
- en: We're just using ah，whole bunch of ul tags。you wanted the computer to number
    things for you。you could certainly do like this 123 But you can imagine。that getting
    a little annoying quickly if you want to reorder things or add things in between。So
    computers are really good at doing tedious things。
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只是在使用一大堆ul标签。如果你希望计算机为你编号，你当然可以这样做，123。但你可以想象，如果你想重新排序或在中间添加东西，这会变得很烦人。因此，计算机在处理繁琐的事情上非常擅长。
- en: A Northern list toe in ordered list using ol instead。![](img/ada90f1c39922f956d79e8b087ef9d26_182.png)
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 使用有序列表（ol）中的北方列表项。![](img/ada90f1c39922f956d79e8b087ef9d26_182.png)
- en: And if I go back to the other tab，Now it's 123 and it's automatically numbered
    for me。![](img/ada90f1c39922f956d79e8b087ef9d26_184.png)
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我回到另一个标签，现在是123，并且它为我自动编号。![](img/ada90f1c39922f956d79e8b087ef9d26_184.png)
- en: I don't have to worry about it at all。Let's do one other that speaks to the
    sort of structure of a page。Let me go ahead and copy my starting point。Hello and
    create a file called Table HTML。If you ever wanna layout tabular data where you
    have rows and columns because you want to。make sense of some financial information
    or just something akin to a spreadsheet in your own。
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 我完全不需要担心这个。让我们再做一个，涉及到页面的结构。让我复制我的起始点，Hello，并创建一个名为Table HTML的文件。如果你想布局表格数据，有行和列，因为你想要理清一些财务信息或类似电子表格的内容。
- en: how can we do this？Let me go ahead and call this table。And down here in my body。let
    me introduce the table tag and the table tag is a little more involved because
    you have to。define what are called table Rose so I could do a TR tag there and
    then inside，So TD for table data。Let me just put like the number one and let me
    go ahead and make let me mock up something a little familiar。
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们该如何做到这一点？让我继续并称之为表格。在我的主体部分，我来引入表格标签，表格标签稍微复杂一些，因为你需要定义所谓的表格行，所以我可以在这里放一个TR标签，然后在里面，放TD用于表格数据。让我随便放个数字，比如一，接下来让我模拟一些更熟悉的东西。
- en: like a phone keypad two and three。Then let me go ahead and copy this once more
    and give myself another row with。456 and let me give myself one Mawr of those，with
    How about seven，89 and then。one mawr of those just to give myself like the equivalent
    of a keypad and do like the。asterisk and then zero and then the pound key。Let
    me save this。
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 比如手机键盘的2和3。然后让我再复制一次，给自己再加一行，填上456，接着再给自己加一行，填上789，然后再来一行，给自己提供一个类似键盘的布局，加上星号、零和井号。让我保存一下。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_186.png)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_186.png)'
- en: Go to my other browser tab。Open up table dot html and while you see something。Akin
    toa like an old school phone keypad there and there's sort of implicit rows and。![](img/ada90f1c39922f956d79e8b087ef9d26_188.png)
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 去我的另一个浏览器标签页。打开table.html，你会看到一些像旧式手机键盘的东西，还有隐含的行。![](img/ada90f1c39922f956d79e8b087ef9d26_188.png)
- en: I could make it a little prettier with actual lines or borders in between and
    around these things。But HTML gives them the ability to lay out tabular data using
    TR's for。table rose and TDs for the columns there in。this is all pretty boring
    and textual and really not the Web that you and I all know。So let me go back here
    and let's do something a little more interesting。
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以让它变得更好看，加上实际的线条或边框。但HTML使它们能够使用TR标签布局表格数据，用TD标签表示列。这一切都是相当乏味的文本，真的不是你我所知道的网络。因此，让我回去做一些更有趣的事情。
- en: Let me go ahead and start off a file called Maybe Image HTML and。let me go ahead
    and start with our boilerplate。I'll rename the this title image and down here。let
    me go ahead and do something like this。Let me go ahead and do image。How about
    source equals？
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 让我开始一个名为Maybe Image HTML的文件，并从我们的基本模板开始。我会把这个标题重命名为image，在下面，做一些这样的事情。让我进行图像处理。源代码怎么写？
- en: Quote unquote harvard dot jpeg。It turns out I came with oven image of Harvard
    in my i d and let me go ahead and。describe it as much to let me add this。Ault
    attributes here Harvard University。and we'll come back to what this means in a
    moment。But here we have the second tag thus far That actually shows us。
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 引号里的harvard.jpeg。结果我有一张哈佛的图像在我的ID里，让我尽量描述它，加上这个。Ault属性，哈佛大学。我们稍后再讨论这是什么意思。但到目前为止，我们有第二个标签，实际上向我们展示了。
- en: how to customize the behavior of a tag。So the Lang attribute earlier customize
    the behavior of the whole Web page by telling the browser。Here comes a Web page
    written in English and down here we have two attributes。which has a value after
    the equal sign and then source SRC。which itself has a value after the equal sign，you
    can use single quotes or double quotes。
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 如何自定义标签的行为。之前的 Lang 属性通过告知浏览器来定制整个网页的行为。这里有一个用英语编写的网页，下面有两个属性。一个在等号后有值，另一个是源
    SRC，它在等号后也有值，你可以使用单引号或双引号。
- en: but you should be consistent on do you can。But each of these attributes should
    have an equal sign in between the key and the value。So how might I go about doing
    this？let me go ahead and open up this file。Now let me go ahead and grab this real
    quick。![](img/ada90f1c39922f956d79e8b087ef9d26_190.png)
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 但你应该尽量保持一致。不过，每个属性之间应该有一个等号连接键和值。那么我该如何做到这一点呢？让我打开这个文件。现在让我快速抓取一下这个。![](img/ada90f1c39922f956d79e8b087ef9d26_190.png)
- en: Give me just one second to get this demo ready and let me go。ahead and give
    me one sec to make sure I have my image in。![](img/ada90f1c39922f956d79e8b087ef9d26_192.png)
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 给我一秒钟来准备这个演示，让我确保我有我的图片在这里。![](img/ada90f1c39922f956d79e8b087ef9d26_192.png)
- en: let me go ahead and open up。Our other tab were over in there。Let me go ahead
    and reload。We should see now image dot html and Harvard JPEG。![](img/ada90f1c39922f956d79e8b087ef9d26_194.png)
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 让我打开我们的另一个标签页。让我们去那里。让我重新加载一下。我们现在应该能看到 image dot html 和 Harvard JPEG。![](img/ada90f1c39922f956d79e8b087ef9d26_194.png)
- en: which I just grabbed for my ID and Walla image dot html is theory journal。painting
    of what's adorned our backdrop here for the past several weeks。You can link to
    a specific image like that，and what's the role of the altar attributes？
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 我刚刚为我的 ID 抓取的，哇 image dot html 是理论期刊，展示了过去几周装饰我们背景的画作。你可以像那样链接到特定的图像，祭坛属性的角色是什么？
- en: So the altar attributes all too overlooked by new and experienced programmers
    alike。But this speaks to accessibility。Not all of us can necessarily see and hear
    and interact with media in the same way as others。And so those who have difficulty
    with site or with sound or the like。the Ault attributes is a wonderfully powerful
    and so simple mechanism to include on your。
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 所以祭坛属性常常被新手和经验丰富的程序员忽视。但这与可访问性有关。并非所有人都能以相同的方式看到、听到和与媒体互动。因此，那些在网站或声音等方面有困难的人，祭坛属性是一个强大且简单的机制，可以包含在你的网页中。
- en: image tags that literally just describes in English or your own spoken language
    what it。is a human would otherwise be looking at，even if they are perhaps blind
    and cannot actually see what's there。And if they have a screen reader installed
    software that actually can vocalize text on the screen。this incredibly usefully
    helps people hear what it is that you and I。
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 图像标签字面上用英语或你自己的语言描述了它。人类本来可能在看着的东西，即使他们可能失明，无法看到那里有什么。如果他们安装了屏幕阅读软件，可以将屏幕上的文本读出来，这对人们听到你我在说的内容非常有帮助。
- en: might otherwise Onley be looking at。So be sure to be mindful of those kinds
    of tags。and you would only know that these tags exists by again taking a class
    reading a book。Looking at our online reference，we're just beginning to add to
    now our vocabulary。let's take this one step further and do something a little
    more powerfully and familiar。
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 否则可能只是看着这些标签。因此，请务必注意这些标签。你只有通过上课或阅读书籍才能知道这些标签的存在。查看我们的在线参考资料，我们才刚开始扩展我们的词汇。让我们更进一步，做一些更强大且熟悉的事情。
- en: let me go ahead and create a file called link dot html。Let me paste my starting
    point there。I'll re title this as Link。is filled with links。hypertext markup language
    is all about hypertext。which is an arcane illusion to links。Hypertext is context
    with links that link elsewhere。So how might I implement a link in a Web page？let
    me go ahead and in this page initially。
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 让我创建一个名为 link dot html 的文件。让我在这里粘贴我的起始点。我将其重新命名为 Link，充满了链接。超文本标记语言完全与超文本有关，这是一个关于链接的深奥概念。超文本是包含其他链接的上下文。那么我该如何在网页中实现一个链接呢？让我先在这个页面中继续。
- en: just encourage people to visit Harvard Period。Let me go back to my other browser
    window open up now linked html。![](img/ada90f1c39922f956d79e8b087ef9d26_196.png)
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 只是鼓励人们访问哈佛。让我回到我的另一个浏览器窗口，打开链接 html。![](img/ada90f1c39922f956d79e8b087ef9d26_196.png)
- en: this does not really do anything I can click on Visit or Harvard or anything
    else and have it do。anything because it's obviously just text。![](img/ada90f1c39922f956d79e8b087ef9d26_198.png)
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上并没有做任何事情，我可以点击访问或哈佛或其他任何东西，但它什么也不会做，因为显然这只是文本。![](img/ada90f1c39922f956d79e8b087ef9d26_198.png)
- en: So how can I actually link the user to some destination？we need another tag。It
    is called the anchor tag，abbreviated with a single letter A。And it has an attribute
    of h ref for hyper reference and hyper reference just means。What do you want to
    link Thio？let's go ahead and keep it simple。
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我该如何实际将用户链接到某个目的地？我们需要另一个标签，称为锚点标签，简称为单个字母A。它有一个属性h ref，表示超链接，超链接的意思是。你想链接到什么？让我们保持简单。
- en: Let's link to a file I already created Image HTML and the，word I want to link
    is literally Harvard。So on the left of the word Harvard，I have a terrific was
    quote unquote image html。I have the clothes tag and again notice。Just because
    I had an attribute on the tag does not mean you need to redundantly copy。paste
    it in the closed tag。
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们链接到我已经创建的文件Image HTML，想要链接的字是字面上的哈佛。所以在哈佛这个词的左边，我有一个绝妙的所谓图像html。我有闭合标签，再次注意。仅仅因为我在标签上有一个属性，并不意味着你需要在闭合标签中冗余地复制粘贴。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_200.png)'
  id: totrans-301
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_200.png)'
- en: It suffices to close on Lee the name of the tag。Now let me zoom in a little
    bit and reload and voila！
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 只需关闭标签的名称就足够了。现在让我放大一点，重新加载，哇！
- en: Now you see the familiar hyper link that you might see on many Web pages where
    it's actually。if I hover over that，if I hover over that and then click voila will
    find ourself at。Harvard University back in 17 92 because now what I'm looking
    at is image dot。let me go out of full screen mode for just a moment to make clear
    that the girl at this point in the story。
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你看到的是熟悉的超链接，你可能在许多网页上看到过。如果我将鼠标悬停在上面，然后点击，哇，我们将发现自己回到了1792年的哈佛大学，因为现在我看到的是图像。让我暂时退出全屏模式，以便明确此时故事中的女孩。
- en: where I see just visit Harvard in the page is something slash link dot。Your
    oral will differ from mine，but mine happens to be this long。cryptic string free
    because it's my account slash link dot html。![](img/ada90f1c39922f956d79e8b087ef9d26_202.png)
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 在页面中我看到的只是访问哈佛，后面是某个链接。你的URL将与我的不同，但我的恰好是这么长的加密字符串，因为这是我的账户/链接.html。![](img/ada90f1c39922f956d79e8b087ef9d26_202.png)
- en: When I click on the link，notice that I end up at image html。thereby taking me
    to a relative u R l That is a file in my own，If I don't want a link to that file。maybe
    I want a link to Harvard itself。It's not sufficient to just do Harvard edu。That
    is not a URL。WwW is not a girl。I need my protocol。
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 当我点击链接时，请注意我最终到达的是图像html，从而将我带到相对的u R l，即我自己的文件。如果我不想链接到那个文件，也许我想链接到哈佛本身。仅仅做哈佛edu是不够的。那不是一个URL。WwW不是女孩。我需要我的协议。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_204.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_204.png)'
- en: If I save that file now and reload and go back here。The text looks exactly the
    same。but notice if I hover over it。There's a tiny。![](img/ada90f1c39922f956d79e8b087ef9d26_206.png)
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我现在保存该文件并重新加载，回到这里，文本看起来完全一样。但请注意，如果我将鼠标悬停在上面，有一个微小的。![](img/ada90f1c39922f956d79e8b087ef9d26_206.png)
- en: tiny little visual clue at the bottom of the screen that says where I'm going
    to end up。if I click this now，R L bar is not gonna stay as my i d slash linked
    HTML。It's gonna whisk me away to the actual Harvard i e。And here it's worth noting
    that chrome and safari and browsers，for better or for worse。
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕底部有一个小小的视觉提示，说明我将要到达哪里。如果我现在点击，R L栏不会停留在我的i d/链接html上。它会将我带到实际的哈佛。值得注意的是，Chrome和Safari等浏览器，无论好坏。
- en: are increasingly simplifying the user experience or UX of browsers。I am not
    literally at Harvard I e d。if you click or double click on the address bar。you'll
    see where you actually are。And this is for developers or worse。![](img/ada90f1c39922f956d79e8b087ef9d26_208.png)
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器的用户体验（UX）越来越简化。我并不真的在哈佛。如果你单击或双击地址栏，你会看到你实际上在哪里。这对开发者来说更糟糕。![](img/ada90f1c39922f956d79e8b087ef9d26_208.png)
- en: for regular users。It's probably cleaner just to see the domain name。But all
    of the information is indeed there if you dig for it just a little bit。But there's
    kind of a new exploit here，There's kind of an exploit here。What if I were to do
    something somewhat maliciously like this。
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 对于普通用户来说，看到域名可能更清晰。但是所有信息确实在这里，如果你稍微挖掘一下。但这里有一种新漏洞，有点像恶意行为。
- en: like let me change this to Yale dot cdo and leave the word Harvard。If I go back
    now to my other tab and reload，It looks different at the moment because it's blue
    instead of purple。Purple by default means I've been there before，which we were
    a few minutes ago。Blue means I haven't visited before。But if I don't really notice
    that subtlety。
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 比如让我把这个改成 Yale dot cdo，并保留“哈佛”这个词。如果我现在回到另一个标签并重新加载，当前看起来不同，因为它是蓝色而不是紫色。默认情况下，紫色意味着我之前去过，而蓝色则意味着我没有去过。但如果我没注意到这个微妙的差别。
- en: I might very well think that Oh，this is the university I want to go to。![](img/ada90f1c39922f956d79e8b087ef9d26_210.png)
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 我很可能会认为哦，这是我想去的大学。![](img/ada90f1c39922f956d79e8b087ef9d26_210.png)
- en: But while when I click on that wrong place Alright，silly example。But this could
    really be exploited for ill purposes。What comes to mind or what threats come to
    mind with this very simple，mechanism right？
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 但当我点击那个错误的地方时，好吧，傻例子。但这确实可能被恶意利用。你想到的是什么，或者与这个非常简单的机制相关的威胁是什么？
- en: Now that you have the ability to make Web pages，you have the ability to sort
    of say you're going one place。but really lead the user elsewhere。Can you see how
    this might be abused？
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你有能力制作网页，你可以说你要去一个地方，但实际上引导用户去别处。你能看到这可能被滥用吗？
- en: Santiago e think it maybe could be，so evolved hackers who can then insert malicious
    software to your。and they trick you into doing that？and trick is the operative
    word。most of us are probably not in the habit of opening up before clicking on
    a link。hovering over it like I did a moment ago and then very。
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 圣地亚哥认为这可能是演变出的黑客，他们可以插入恶意软件。然后他们会欺骗你去执行这个操作？而“欺骗”是关键字。我们大多数人可能没有在点击链接之前先查看的习惯。就像我刚才那样悬停在上面，然后很。
- en: paranoiac Li like looking down here to see if my really going to the right place
    and。even this could be spoofed。You can trick the user into thinking they're going
    to the right place but still override this behavior。And so if you've ever been
    the victim of or the near victim of phishing attack，P H I S H I N G。Fishing refers
    to trying to trick humans and。
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 偏执的我可能会看看下方以确认我是否真的去到正确的地方。即使这样也可能被欺骗。你可以欺骗用户，让他们觉得自己要去正确的地方，但仍然覆盖这种行为。因此，如果你曾经成为钓鱼攻击的受害者或近乎受害者，P
    H I S H I N G。钓鱼指的是试图欺骗他人。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_212.png)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_212.png)'
- en: Santiago says，via social engineering into doing something that they didn't actually
    intend。And so you can imagine receiving spam in your email inbox that says。Click
    this link to visit paypal dot com because you need to verify your password or
    click here to。tell us your Social Security number。
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 圣地亚哥说，通过社会工程学让人做一些他们实际上并不打算做的事情。你可以想象收到邮箱中的垃圾邮件，上面写着点击这个链接访问 paypal dot com，因为你需要验证你的密码，或者点击这里告诉我们你的社会安全号码。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_214.png)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_214.png)'
- en: This is so common these days to get emails，which themselves these days are。![](img/ada90f1c39922f956d79e8b087ef9d26_216.png)
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 这些天收到这样的邮件是非常普遍的，邮件本身也是。![](img/ada90f1c39922f956d79e8b087ef9d26_216.png)
- en: If they're not just text，they are HTML itself。When you're looking at any email
    in Gmail that has clickable links or images。that email contains HTML like we're
    writing here。It is trivial to trick users into going places。that they didn't actually
    intend。among the takeaways for today。beyond the mechanics of how to do these things
    should be consideration for your own personal。
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它们不仅仅是文本，那它们就是 HTML。当你在 Gmail 中查看任何包含可点击链接或图片的电子邮件时，该邮件包含的 HTML 就像我们在这里编写的内容一样。欺骗用户进入他们并不真的想去的地方是微不足道的。今天的要点之一，除了如何做这些事情的机制之外，还应该考虑你个人的。
- en: security as to how distrusting you should really be off websites because of。how
    simple these mechanisms are and how they can lead you indeed，to the wrong place。let's
    go ahead and clarify just a couple of things Here。Thio one final example and see
    if we can't Now come back to，that idea of user input。
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 关于你应该对网站的不信任程度的安全性，因为这些机制是多么简单，它们确实可以将你引导到错误的地方。让我们澄清这里的几件事。这是最后一个例子，看看我们能否回到用户输入的想法上。
- en: So let me go back to the idea here and let me grab Ah。little bit of starter
    code from my hello file as before。and create one final example here called search
    dot html。That's purely html indeed。I'm gonna name this thing search and then I'm
    gonna down in my body of the page Cruz，Another new tag。
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 让我回到这个想法上来，让我从我的 hello 文件中抓取一点启动代码，并创建一个最终的例子，叫做 search dot html。这确实是纯 HTML。我将把这个命名为
    search，然后在页面的主体部分再加一个新标签。
- en: Turns out HTML also supports a form tag，and that form tag can take a couple
    of attributes。one of which is action。And this is where you want to have the form
    lead the user。I'm going to go ahead and come back to that in just a moment。The
    other is method and the method is the Asian to be verb to use。
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，HTML 也支持表单标签，而这个表单标签可以有几个属性，其中之一是 action。这是你希望表单引导用户的位置。我将稍后再回到这一点。另一个是
    method，方法是使用的动词。
- en: I'm going to use get and here inconsistently，it should be lower case。Even though
    we've previously seen it in upper case inside of the form tag。I'm gonna have a
    couple of inputs and input whose name is gonna be Q and。whose type is going to
    be search。I'm gonna have another input whose type is going to be submit and whose
    value is。
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 我将使用 get，而这里不一致，应该是小写。尽管我们之前在表单标签中见过它是大写的。我将有几个输入，其中一个的名字将是 Q，类型将是 search。还有另一个输入，其类型将是
    submit，值将是。
- en: going to be quote unquote search as well。I'm deliberately omitting the name
    because it's not strictly necessary。But where am I going with this？I haven't actually
    implemented a search engine。All I'm doing at the moment is implementing a front
    end to a search engine。front end to google dot com。I'm gonna like Google itself
    through the hard work of actually searching the date of the Internet for me。
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 将会被称为“搜索”。我故意省略了名字，因为这并不是绝对必要的。但我想说什么呢？我实际上并没有实现一个搜索引擎。我现在所做的只是实现一个搜索引擎的前端。前端指向
    google.com。我将通过实际在互联网上搜索数据来使用谷歌本身。
- en: So I'm gonna specify an action of www dot google dot com slash search。So here
    we have what is about to be，ah form text boxes and buttons that the user can interact
    with the。action of which is going to be to send the user to this girl using。but
    that you are l is going to have automatically added to it by my，One http parameter
    so to speak。
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我将指定一个动作为 www.google.com/search。在这里我们将要有表单文本框和按钮，用户可以与之交互。这个动作将会把用户发送到这个链接，但这个链接会自动添加一个
    HTTP 参数。
- en: a variable of sorts called Q and why。This will recall earlier that when I visited
    google dot com。![](img/ada90f1c39922f956d79e8b087ef9d26_218.png)
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个名为 Q 的变量。还记得我访问 google.com 时的情况吗？![](img/ada90f1c39922f956d79e8b087ef9d26_218.png)
- en: I was able to simulate a search by literally going to https colon slash slash。www
    dot google dot com slash search question mark Q equals cats。I claimed that Google
    is designed by the software engineers。They're to take user input via the URL。you
    and I do not search for things by typing out long girls like that with Q equals。
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 我能够通过直接访问 https://www.google.com/search?Q=cats 来模拟搜索。我声称谷歌是由软件工程师设计的。他们通过 URL
    获取用户输入。你我并不会通过键入像那样的长链接来搜索东西。
- en: anything that would be incredibly poor experience。You and I just type things
    into search boxes or forms。if I now go into my other tab here for search dot html。you're
    not gonna be very impressed by the aesthetics of my form。It's just a rectangular
    text box and a search button。But watch what happens。
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 任何会造成极差体验的事情。你我只是把东西输入搜索框或表单。如果我现在进入我的另一个标签，这里是 search.html。你不会对我的表单的美观感到印象深刻。它只是一个矩形文本框和一个搜索按钮。但请看发生了什么。
- en: My your relative moment ends in search html。I'm gonna go ahead and type in something
    literally like cats。And now notice if I hit，enter or manually click on the search
    button。My Web page。which contains an HTML form because it has an action of that's
    Google's girl and a。method of get my browser is going to convert that into the
    corresponding，http request and in turn。
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 我的相对链接结束于 search.html。我将输入一些像 cats 的内容。现在注意，如果我按下 enter 或手动点击搜索按钮。我的网页，包含一个有着谷歌链接的
    HTML 表单，并且方法是 get，我的浏览器将把它转换为相应的 HTTP 请求，并且。
- en: girl so that the user is automatically sent thio by double click on it。This
    full girl here and the users input is automatically by the。browser upended Thio
    the girl via question mark Q，and it's not just cats。We now have our own very simple
    Google search engine。
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 这样用户就可以通过双击自动发送到这个链接。这个完整的链接和用户输入会自动通过浏览器附加到链接上，形式为问号 Q，而不仅仅是 cats。我们现在有了自己非常简单的谷歌搜索引擎。
- en: where we can search for dogs to if we want and notice that the U。R L hear changes。![](img/ada90f1c39922f956d79e8b087ef9d26_220.png)
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要的话，可以搜索 dogs，注意到 URL 会改变。![](img/ada90f1c39922f956d79e8b087ef9d26_220.png)
- en: To be question mark Q equals dogs。this is how the Web now works。We talked earlier
    about how the Internet works，how you just get raw data heroes and once packets
    of info from point A to point B。This is now how the Web works when you visit a
    website and don't just want a specific picture of a cat。you want to search for
    cats or dogs or you want to log into a website or you want to check out of。
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 问号Q等于狗。这就是现在网络的运作方式。我们之前谈到互联网是如何工作的，如何从A点到B点传送原始数据包。这就是当你访问一个网站时的运作方式，你不仅仅想要一张猫的特定图片，而是想要搜索猫或狗，或者你想要登录一个网站，或者你想要结账。
- en: providing user input。You are always filling out HTML forms，which look essentially
    just like this。They might have mawr inputs，and there might be a little more complicated。but
    they are a form tag on amazon dot com on facebook dot com on any website with
    one arm。or inputs that when submitted，enter or clicking，submit or search or whatever
    the button is labeled。
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 提供用户输入。你总是在填写HTML表单，表单的外观基本上就是这样。它们可能有更多的输入，可能会更复杂。但它们都是在amazon.com、facebook.com或任何一个网站上的一个表单标签，带有一个输入，提交时，按下或点击，提交或搜索，或者不论按钮的标签是什么。
- en: That's how the next request gets submitted to the server。Who so it's a lot。and
    that's not all the HTML tags out there。But that's all the ideas of HTML。It really
    is like open tags and close tags，some of which can have zero arm or attributes
    and just understanding that mental model。And now via forms，we have the mechanism
    for submitting，user input to search to websites。
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是下一个请求如何提交给服务器的方式。这意味着有很多内容。而且这并不是所有的HTML标签。但这就是HTML的所有概念。它真的就像开放标签和闭合标签，有些标签可能没有属性，仅仅理解这个心理模型。而现在通过表单，我们有了提交用户输入以搜索网站的机制。
- en: toe Web servers and just to call out that other verb here。Turns out Google Onley
    supports get for its search program at www dot google，You could only use get。But
    post is also very common。![](img/ada90f1c39922f956d79e8b087ef9d26_222.png)
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 到Web服务器上，只是要指出另一个动词。事实证明，Google仅在www.google上支持GET用于其搜索程序，你只能使用GET。但POST也很常见。![](img/ada90f1c39922f956d79e8b087ef9d26_222.png)
- en: Post is a different verb that could be tucked inside of that envelope。And Post
    actually changes what happens in the browser so。![](img/ada90f1c39922f956d79e8b087ef9d26_224.png)
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: Post是一个不同的动词，可以放在那个封包内。而且Post实际上改变了浏览器中发生的事情。所以。![](img/ada90f1c39922f956d79e8b087ef9d26_224.png)
- en: that Q equals cats and Q equals dogs does not show up in the URL because this
    is actually。one other threat to our privacy，If your little sibling comes over
    to your browser or your parents after you've been searching on the Web。they can
    scroll through often your entire history of your browser。Because literally everything
    you searched for on Google or Bing or whatever ended up in the oral。
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: Q等于猫和Q等于狗不会出现在URL中，因为这实际上是我们隐私的另一个威胁。如果你的小兄弟或父母在你搜索网络后来到你的浏览器，他们可以滚动浏览你浏览器的整个历史记录。因为你在Google、Bing或其他地方搜索的所有内容都会出现在URL中。
- en: Because of this mechanism and for user convenience。your browser tends to cash
    or save all of those girls。Now that's mine early。Intrusive certainly when you
    have room mates or family members of the like to your privacy。But it's especially
    concerning if you are registering for websites or checking out with user names
    and。
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 由于这种机制和用户的便利性，你的浏览器往往会缓存或保存所有这些内容。现在这对我来说是早期的。对于有室友或家人的人来说，显然是侵扰你的隐私。但如果你在注册网站或使用用户名结账时，这尤其令人担忧。
- en: passwords and credit card numbers and things that are even mawr sensitive。Long
    story short post。which is just a different verb that you can use an http that
    hides the Q。equals cats that hides the credit card number equals this that hides
    the。![](img/ada90f1c39922f956d79e8b087ef9d26_226.png)
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 密码和信用卡号码以及其他更敏感的内容。长话短说，Post只是一种不同的动词，可以在HTTP中使用，它隐藏了Q等于猫，隐藏了信用卡号码等。![](img/ada90f1c39922f956d79e8b087ef9d26_226.png)
- en: password equals that essentially，deeper in the envelope。It does not put it into
    the URL bar。![](img/ada90f1c39922f956d79e8b087ef9d26_228.png)
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 密码等于基本上更深入地放在封包内。它不会放入URL栏中。![](img/ada90f1c39922f956d79e8b087ef9d26_228.png)
- en: but it still sends it to the server a little more privately。That was a lot of
    tags all at once。culminating in this ability to get system it user input。the syntax
    or the implications of making Web pages with this language？Anything at all？
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 但它仍然以更私密的方式发送到服务器。刚才提到的标签很多。最终使得获取用户输入的能力成为可能。使用这种语言制作网页的语法或隐含意义是什么？有什么内容吗？
- en: I'm kind of embarrassed by all of the work I've done thus far because all of
    these pages are incredibly boring。very underwhelming and nowhere close to the
    sort of user interfaces that you and I are familiar with。day today when using
    the actual Web。So let me go ahead and close most of these tabs。And let's transition
    to not focusing on the structure of Web pages alone。
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 我对迄今为止所做的所有工作有些尴尬，因为这些页面实在是太无聊了，令人失望，远没有你我熟悉的日常网页用户界面。所以让我先关闭大部分标签，转而不再仅关注网页的结构。
- en: but now focusing on the aesthetics of Web pages，the stylization of Web pages
    where now you're sort of artistic flair could really come。and we can begin to
    re create user interface is ultimately more like our world of。where you actually
    see colors and shapes and images and sounds。but still using these basic building
    blocks。And for this we need a language called CSS or cascading style sheets。
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们关注网页的美学，网页的样式，这里可以真正展现艺术风格。我们可以开始重建用户界面，最终更像我们的世界。在这里你可以看到颜色、形状、图像和声音，但仍然使用这些基本构建块。为此，我们需要一种叫做CSS或层叠样式表的语言。
- en: This to not a programming language，but it is an additional language that you
    can use in conjunction with。In order to stylized your pages and make them prettier。CSS
    boils down to the use of what we call properties。Properties are similar and spirits
    of variables。they're just mawr key value pairs and again notice this recurring
    theme like we introduced dictionaries。
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一种编程语言，但它是一种额外的语言，可以与之结合使用。为了给你的页面加上样式，使其更加美观，CSS归结为使用我们称之为属性的东西。属性类似于变量，它们只是键值对，再次注意这个反复出现的主题，就像我们之前介绍字典那样。
- en: or dicks in Python a couple of weeks ago。Those air just collections of key value
    pairs in the form of a hash table。we saw just a moment ago attributes in HTML，which
    essentially are key value pairs。Q equals cats is a key equals of value。Q equals
    dogs is a key equals value。CSS has the same idea。But because different people
    invented this，they call these things properties instead of attributes。
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在几周前我们提到的Python中的字典。它们只是以哈希表形式存储的键值对集合。我们刚才看到的HTML中的属性，基本上就是键值对。Q等于猫是一个键等于一个值。Q等于狗是一个键等于一个值。CSS有相同的概念。但因为不同的人发明了它们，所以他们称这些为属性，而不是属性。
- en: But it's the same idea，just a different vocabulary。and there's going to be different
    ways to applying different properties like color and font。size and positioning
    two HTML tags using，So how do we get there？
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 但这个想法是一样的，只是词汇不同。应用不同的属性，如颜色、字体、大小和定位在HTML标签上会有不同的方法。那么我们该如何实现呢？
- en: it turns out that CSS is a language that you can use in conjunction with，HTML。you
    can start with in HTML page like this like we've already created saying Hello
    title on hello body。But you can add some additional attributes and or tags to
    it to begin to。You can actually add a style tag in the head of the Web page here。
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，CSS是一种可以与HTML结合使用的语言。你可以从这样的HTML页面开始，就像我们已经创建的那样，显示“Hello title”和“hello
    body”。但你可以添加一些额外的属性和/或标签来开始。你实际上可以在网页的<head>中添加一个<style>标签。
- en: which is another thing we could put inside the head，it could go elsewhere in
    the body as well。Alternatively，you can link to a file in a separate file。and so
    we'll see a couple of different approaches there。But before we do that。let's make
    this more real with Cem concrete examples。
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是我们可以放在<head>中的另一件事，它也可以放在<body>的其他地方。或者，你可以链接到一个单独的文件。因此，我们将看到几种不同的方法。但在此之前，让我们通过一些具体的例子使之更真实。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_230.png)'
  id: totrans-351
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_230.png)'
- en: Let me go ahead and whip up a new example here in a file called CSS dot html。Just
    to demonstrate this new language，let me go ahead and start as always。with just
    my raw HTML with my doc type HTML。Let me go ahead and do my html Lang equals English。Then
    down here I'll do the head of my page，the title of my page。
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 让我在一个名为CSS.html的文件中创建一个新的示例。为了演示这门新语言，我将像往常一样，从我的原始HTML开始，使用我的DOCTYPE HTML。让我来设置我的html
    lang为英语。然后在这里我将处理我页面的<head>和<title>。
- en: I'll just title it simply CSS the body of my Web page。And now let's actually
    do something interesting。Let me introduce a few more HTML tags。that are available
    in the language。One is called Header。And here I'm gonna go ahead and say something
    like John Harvard。
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 我就简单地把它命名为CSS，作为我的网页的主体。现在让我们做一些有趣的事情。让我介绍一些在这个语言中可用的HTML标签。其中一个叫做Header。在这里我会说类似约翰·哈佛的话。
- en: I'm gonna make a home page for John Harvard，the founder of Harvard。and let me
    go ahead here and do a main section of my page。And I'm going to say Welcome to
    my home page And then down here。I'm gonna have a so called footer on inside of
    here。I'm going to say copyright like copyright symbol John Harvard。So super simple
    Web page three lines。And just here's three new HTML tags。You would only know this
    again from a class A book or an online reference。but there are tags called Header
    Main and Footer that don't do anything。![](img/ada90f1c39922f956d79e8b087ef9d26_232.png)
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 我将为约翰·哈佛创建一个主页，他是哈佛大学的创始人。让我在这里做我页面的主要部分。我将说“欢迎来到我的主页”，然后在这里。我将有一个所谓的页脚，在这里我将写上版权符号约翰·哈佛。所以这是一个超级简单的网页，三行。这里有三个新的
    HTML 标签。你只有在课堂书籍或在线参考中才会知道这一点。还有叫做 Header、Main 和 Footer 的标签，它们不执行任何操作。![](img/ada90f1c39922f956d79e8b087ef9d26_232.png)
- en: They don't make things big and bold，like the heading tags did。H one to h six。They're
    just what are called semantic tags they are mawr than generic paragraph tags。and
    they help the browser know that。this is the header of your page。This is the main
    part of your page。with screen readers distinguishing what's really important on
    the page。
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 它们不会像标题标签那样使内容变得大而粗体。H1 到 H6。它们被称为语义标签，比普通的段落标签更具意义，帮助浏览器知道这是什么。页面的页眉，这是你页面的主要部分。屏幕阅读器能够区分页面上真正重要的内容。
- en: It can help with translation tools like Google translate to know what you actually
    want translated like the main part of the。page and not less important info like
    the Header or Footer。So just three HTML tags。But you can think of them like paragraph
    tags，but with more specific names。so let me go ahead and save this file。but go
    back to the index。And now I have a new file CSS html。
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以帮助翻译工具，比如 Google 翻译，了解你实际想翻译的内容，比如页面的主要部分，而不是像页眉或页脚这样不那么重要的信息。所以只有三个 HTML
    标签。但你可以把它们想象成段落标签，但名称更具体。所以让我先保存这个文件。然后返回到索引。现在我有了一个新的文件 CSS html。
- en: Let's click it and voila！You know it's pretty underwhelming，but it does what
    it says。It's got three lines With this content。![](img/ada90f1c39922f956d79e8b087ef9d26_234.png)
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 点击它，瞧！你知道这看起来有点乏味，但它确实如它所说的那样。它包含三行这样的内容。![](img/ada90f1c39922f956d79e8b087ef9d26_234.png)
- en: let's begin to style eyes this and try toe，make it a little more inviting。let
    me go ahead and add a style attribute with equals。Now here's where things get
    a little weird in the world of HTML and CSS。You do actually or can actually co
    mingle the two languages，and we kind of saw this already。
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开始给它添加样式，并尝试让它更具吸引力。让我添加一个带等号的样式属性。现在，在 HTML 和 CSS 的世界里，这里有些奇怪。你实际上可以将这两种语言混合在一起，我们已经看到了这一点。
- en: We saw Python code with sequel inside of it。Today we're seeing HTML code with
    CSS inside of it。inside of these quotes，I'm gonna put some of those so called
    properties key value pairs。Let me go ahead and change the font size of my header
    to be large and let me go ahead and。align the text as centered and notice the
    pattern。Here It's new。It's not an equal sign。
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到包含 SQL 的 Python 代码。今天我们看到的是包含 CSS 的 HTML 代码。在这些引号里，我将放一些所谓的属性键值对。让我将我页眉的字体大小改为大，并且让我将文本对齐为居中，注意这个模式。这里有新内容，不是等号。
- en: there's not additional quotes。left hand wasn't talking to right hand。and different
    people invented HTML and CSS essentially。But font size is the name of a CSS property
    and aesthetic detail。Colon is what separates the key from the value，and the value
    in this case is large。
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 没有额外的引号。左手没有和右手沟通。不同的人基本上是发明了 HTML 和 CSS。但是字体大小是 CSS 属性的名称和美学细节。冒号是分隔键和值的符号，在这个案例中值是大。
- en: and I'm choosing large because it's one of available ones。extra large and a
    bunch of others as well。You can also use specific font sizes or pixel size isas。text
    Daschle line is gonna align text colon in the center now let me go ahead and do
    something。similar here on the main tag。Let's do font size medium and then text
    align，center and then down here。
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 我选择大是因为它是可用选项之一。还有超大和其他一些。你也可以使用特定的字体大小或像素大小。文本对齐现在将文本居中，让我在主标签上做一些类似的事情。我们来做字体大小为中等，然后文本对齐为中心，然后在这里。
- en: Let's do style equals font size。Small because it's the foot，Text align center。And
    I'm sad to say the semi colons air back。They're not strictly necessary in all
    places。but I'm doing it for consistency。There definitely needed here to separate
    keys from other keys。![](img/ada90f1c39922f956d79e8b087ef9d26_236.png)
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们做样式等于字体大小。小，因为它是脚部，文本居中对齐。让我遗憾地说，分号又回来了。在所有地方它们并不是绝对必要的，但我这么做是为了保持一致性。在这里绝对需要分隔键与其他键。![](img/ada90f1c39922f956d79e8b087ef9d26_236.png)
- en: Let me open up this page again。Reload and wa la It's a little prettier。It's
    nothing to write home about，John Harvard is large。Welcome to my home page is medium
    and the footer as something small。And let me clean this up to this open parenthesis。closed
    parenthesis isn't necessarily that pretty。
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 让我再打开这个页面。重新加载，哇，它变得更好看了。这没什么值得骄傲的，约翰·哈佛的字体很大。“欢迎来到我的主页”的字体中等，而页脚的字体很小。让我把这整理一下，这个开括号和闭括号并不一定那么好看。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_238.png)'
  id: totrans-364
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_238.png)'
- en: I don't know where the symbol is on my screen，but let me go ahead here and let
    me type out this ampersand hash。169 Semi colon。but this is a feature of HTML called
    in HTML Entity。which is a numeric code that identifies a symbol。![](img/ada90f1c39922f956d79e8b087ef9d26_240.png)
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道这个符号在我的屏幕上在哪里，但让我在这里输入这个和号#169分号。这是HTML的一个特性，称为HTML实体，是一个标识符号的数字代码。![](img/ada90f1c39922f956d79e8b087ef9d26_240.png)
- en: that is often not on your keyboard，but you might want to display anyway。Let
    me go ahead here and reload。And while a fi zoom in now we have a proper copyright
    symbol。And there's other HTML entities for other A symbols as well。![](img/ada90f1c39922f956d79e8b087ef9d26_242.png)
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常不在你的键盘上，但你可能还是想显示出来。让我在这里重新加载一下。当放大时，我们有了正确的版权符号。还有其他HTML实体用于其他符号。![](img/ada90f1c39922f956d79e8b087ef9d26_242.png)
- en: especially if you can't see them on your keyboard。what happens after this？
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 尤其是当你在键盘上看不到它们时。这之后会发生什么？
- en: but I feel like there's an in elegance here。Can anyone recognize in the code
    I've written this far？
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 但我觉得这里有些不优雅。有人能认出我到目前为止写的代码吗？
- en: Even if you've never seen HTML before，is there an opportunity for better design？I
    claim it's correct。but feel free to chime in in the chat。Can I improve the design？
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你从未见过HTML，是否有更好的设计机会？我认为这是正确的，但请随时在聊天中发表意见。我能改善设计吗？
- en: And even though I said earlier that Copy Paste is bad。that doesn't mean we can't
    or is necessary in HTML。That doesn't mean we can't chip away at it in some places。![](img/ada90f1c39922f956d79e8b087ef9d26_244.png)
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我之前说过复制粘贴不好，但这并不意味着我们在HTML中不能使用它，也不意味着我们不能在某些地方逐步改进它。![](img/ada90f1c39922f956d79e8b087ef9d26_244.png)
- en: Any thing jumping out。Some people are saying that your style attributes are
    starting to get very long。They are getting along。![](img/ada90f1c39922f956d79e8b087ef9d26_246.png)
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 有什么特别的地方吗？有人说你的样式属性开始变得很长。它们确实在变长。![](img/ada90f1c39922f956d79e8b087ef9d26_246.png)
- en: and I definitely redundant，even though the font size is changing，so that seems
    kind of necessary。Text the line center text the line center text，the line center
    that seems unnecessary。Like why am I doing that again and again？But here's where
    the C in C s s comes in。CSS is cascading style sheets which literally refers to
    kind of a waterfall effect。
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 而且我觉得是多余的，尽管字体大小在变化，所以这似乎是必要的。文本居中文本居中文本居中，似乎没有必要。我为什么要一次又一次地这样做呢？但这就是CSS的意义所在。CSS是层叠样式表，字面意思是指一种瀑布效果。
- en: off these properties。So what I can actually do is let me go ahead and remove
    text。align center from each of header main and footer and let me，Let me go up
    to my body tag。which is the so called parent tag for those three at a style attributes
    there。and put text the line center there and trust that because body is the parents。
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 去掉这些属性。那么我实际上可以做的是去掉每个头部、主体和页脚的文本居中，并且让我回到我的body标签，这个被称为这三个样式属性的父标签。在那里把文本居中，并相信因为body是父元素。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_248.png)'
  id: totrans-374
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_248.png)'
- en: any properties it has will cascade down onto，thereby allowing me to define textile
    line in one place instead of three。![](img/ada90f1c39922f956d79e8b087ef9d26_250.png)
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 它所具有的任何属性都会级联到其他元素，从而让我能够在一个地方定义文本行，而不是在三个地方。![](img/ada90f1c39922f956d79e8b087ef9d26_250.png)
- en: Let me go ahead and reload the page and voila！Nothing has changed。But I claim
    now that my pages better designed because I've eliminated that。redundancy and
    made my lines to Brian's point a little shorter as well。but this seems a little
    bit of a slippery slope。If if I wanted to make a larger home page。
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 让我重新加载页面，瞧！没有改变。但我现在声称我的页面设计得更好，因为我消除了冗余，并使我的行稍微短一些。但这似乎有点滑坡。如果我想制作一个更大的主页。
- en: which surely I might with lots more content。Having all of these style attributes
    all over the place very quickly gets messy。that makes it hard for you and I to
    collaborate with better artists than you or I might。It might be nice for one of
    us if working on a team，maybe for even a CS 50 final project。One of us does the
    HTML one of us does the CSS。This would be a mess if you and I were trying to collaborate
    on the same exact file。
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 我很可能会有更多内容。到处都有这些样式属性会迅速变得混乱，这让你我与比你我更好的艺术家合作变得困难。如果我们在团队中工作，可能会对我们其中一个人有好处，也许是
    CS 50 的最终项目。我们中的一个做 HTML，另一个做 CSS。如果你我试图在同一个文件上合作，这将是一团糟。
- en: So let's see if we can take a step toward factoring these out and keeping HTML，and
    CSS separate。So how might I do this？let me go ahead here and get rid of all of
    this。Let me get rid of all of these style attributes，which again just doesn't
    feel very maintainable。My page gets longer and let me transition to that other
    format。We saw a teaser for before，style tag。
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们看看能否向将这些因素分开，保持 HTML 和 CSS 的分离迈出一步。我该怎么做呢？让我这里去掉所有这些。让我去掉所有这些样式属性，这再次让人感觉不太可维护。我的页面变得更长，让我过渡到另一个格式。我们之前看到了一个样式标签的预告。
- en: but a tag that can go in the head of the Web page here and let me go ahead and
    do。something a little different here let me go ahead and say My header should
    be，text ah line center。My main part should be text a line。Let me do this just
    like if we didn't see text align center and then my foot。er will be text align
    center and then just for，consistency with before font size large down here in
    Maine。
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 但这里有一个可以放在网页头部的标签，让我继续做一些不同的事情。让我说我的标题应该是，文本居中。我的主体部分应该是文本对齐。让我这样做，就像我们没有看到文本居中一样，然后我的脚注也将是文本居中，为了与之前保持一致，字体大小在这里是大号。
- en: Font size medium down here，font size small。The idea is not recognizing all of
    these keywords。but it's OK that some are white。Some are blue here，so there's still
    some redundancy here。but notice what I'm doing now。Inside of my style tag。it is
    allowed to use what's called a CSS selector，and there's different types of selectors。
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 字体大小中等，字体大小小。这个想法并不是识别所有这些关键字，但有些是白色的，有些是蓝色的，所以这里仍然存在一些冗余。但请注意我现在所做的。在我的样式标签内，允许使用所谓的
    CSS 选择器，并且有不同类型的选择器。
- en: But the one we're seeing now is what's called the type selector，and it's a bit
    arcane。But this just means that if you want to style every instance of a certain
    tag，every header tag。every footer tag，you can literally inside of a style tag。Put
    the name of that tag。then a pair of curly braces。They are back for CSS，and then
    inside of those curly braces you just put those key value pairs。
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们现在看到的是所谓的类型选择器，这有点古怪。但这仅仅意味着，如果你想为某个标签的每个实例进行样式化，每个标题标签，每个脚注标签，你可以在样式标签内直接写下那个标签的名字，然后是一对大括号。然后在那些大括号内，你只需放置那些键值对。
- en: the properties separated by semicolons and I'm style izing it nice on。![](img/ada90f1c39922f956d79e8b087ef9d26_252.png)
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 属性由分号分隔，我正在将其优雅地样式化。![](img/ada90f1c39922f956d79e8b087ef9d26_252.png)
- en: separate lines just so that it's a lot more readable。The effect is not gonna
    be any different if I go back to my other tab and reload。Nothing has changed。but
    I've begun toe tease out the CSS from the rest of my page。![](img/ada90f1c39922f956d79e8b087ef9d26_254.png)
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 分开行，以便它更易读。如果我回到我的其他标签并重新加载，效果不会有什么不同。没有改变。但我已经开始将 CSS 从页面的其余部分分离出来。![](img/ada90f1c39922f956d79e8b087ef9d26_254.png)
- en: But notice there's still some redundancy here and I could remove。text the line
    center from here。text the line center from here，text the line center from here
    and maybe apply it to the body instead。![](img/ada90f1c39922f956d79e8b087ef9d26_256.png)
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意这里仍然存在一些冗余，我可以删除这里的文本居中。这里的文本居中，可能将其应用于主体而不是。![](img/ada90f1c39922f956d79e8b087ef9d26_256.png)
- en: But there's other types of selectors I can use if you want to define one or
    more properties。in a reusable way such that you can use them on all sorts of tags。Turns
    out CSS supports what are called classes，and I'm gonna go ahead and do this instead。instead
    of just saying my header is gonna have a font size of large。
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你想以可重用的方式定义一个或多个属性，我可以使用其他类型的选择器，这样你就可以在各种标签上使用它们。结果发现，CSS支持所谓的类，我将继续这样做。与其仅仅说我的标题将有一个大的字体大小。
- en: I'm gonna introduce what's called the class in CSS。the syntax for which is to
    use a dot and then a keyword of your own choice。![](img/ada90f1c39922f956d79e8b087ef9d26_258.png)
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 我将介绍在CSS中称为类的东西，其语法是使用一个点，然后是你自己选择的关键字。![](img/ada90f1c39922f956d79e8b087ef9d26_258.png)
- en: and I'm gonna call this first set of properties large this next set of properties。things
    next set of properties medium and this next set of properties dot small。And this
    is a little weird that it's starting with the DOT。That's just because humans decided
    that when you define what's called the class a reusable set of。
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 我将称这一组属性为大的，下一组属性为中等，而这下一组属性为小的。这有点奇怪，因为它以点开始。这只是因为人类决定在定义所谓的类时，使用一个可重用的属性集合。
- en: you start your keyword with the dot and I'm gonna give myself one other one
    dot Centered is。going to be text align center。So none of these classes centered
    large。medium or small are in use yet until I now apply them to my HTML。So let
    me scroll back down to my HTML where I removed earlier all of those style attributes。
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 你开始你的关键字时加一个点，我将再给自己一个点居中将是文本对齐居中。因此，这些类居中大的、中等或小的类尚未使用，直到我现在将它们应用于我的HTML。所以让我滚回到我的HTML，在那里我之前去掉了所有样式属性。
- en: and I'm going to use a different attributes now called Class。I'm gonna go ahead
    and add to this header，centered large。I'm gonna add class to the main tag as centered
    medium。and down here I'm going to say class equals centered small so I。can have
    inside of the attributes called class ah，That's just a space separated list of
    words and certainly speaking。it could be any number of spaces，but that just looks
    stupid and his stupid stylistically so just one space suffices。but this just means
    Hey，Apply the centered class and the medium class to the following contents。![](img/ada90f1c39922f956d79e8b087ef9d26_260.png)
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我将使用一个不同的属性，称为Class。我将继续添加这个居中大的标题。我将把类添加到主要标签上作为居中中等。然后在这里，我将说类等于居中小，以便我可以在属性中有一个名为类的内容，啊，这只是一个用空格分隔的单词列表，当然可以有任意数量的空格，但那看起来很傻，风格上也很傻，所以只用一个空格就足够了。这意味着，嘿，将居中类和中等类应用于以下内容。![](img/ada90f1c39922f956d79e8b087ef9d26_260.png)
- en: if I go back to the tab and reload。![](img/ada90f1c39922f956d79e8b087ef9d26_262.png)
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我回到标签并重新加载。![](img/ada90f1c39922f956d79e8b087ef9d26_262.png)
- en: nothing still has changed。I'm just changing the design。I'm hopefully improving
    the design。But here too you can probably note that using centered again and again
    is also again dumb。Let me remove that redundancy。Let me add to my body a class
    of centered And now things are getting a little tight like I've。reintroduced some
    attributes。But now if I'm collaborating with someone I could say Can you go ahead
    and create me CSS classes for large。
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然没有任何改变。我只是改变设计。希望我在改善设计。但在这里你也许会注意到，一再使用居中也是愚蠢的。让我去掉这种冗余。让我在我的主体中添加一个居中的类，现在事情变得有点紧凑，就像我重新引入了一些属性。但是如果我和某人合作，我可以说，你能帮我创建一个大的CSS类吗？
- en: I'll just assume that you're going to do that correctly。And I can just use those
    terms those classes and assume that you have。defined code and CSS like this stuff
    here。I can do one step better。I don't need you to even touch this same file。You
    and I can work pretty independently。
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 我会假设你会正确地做到这一点。我可以使用这些术语和类，并假设你已经定义了这样的代码和CSS。我可以做得更好。我甚至不需要你触碰这个相同的文件。你和我可以相对独立地工作。
- en: let me go ahead and propose this。Let me highlight all of the code I just wrote
    up here and cut it let me。get rid of this style tag altogether。Let me create a
    new file called Let's Say styles dot。CSS just by convention。But I could call it
    anything I want dot CSS paste it into their and。save it and let me go ahead and
    I don't need any of the indentation anymore。
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 让我继续提议这个。让我突出显示我刚刚写的所有代码，然后剪切它，彻底去掉这个样式标签。让我创建一个新文件，称为假设是styles.dot.CSS，仅仅出于约定。但我可以把它叫成任何我想要的dot
    CSS，把它粘贴到里面并保存，让我继续，我不再需要任何缩进了。
- en: So let me just shift everything over there using a fancy keyboard shortcut。This
    could be the file you're working on。You create all of these properties in these
    classes for me in a separate file。Then in my HTML file。If you and I are collaborating，I
    can use a link tag。hyper reference value of styles dot CSS，the relationship of
    which is that of style sheet to your。
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我使用一个炫酷的键盘快捷键把所有内容移动到那边。这可能是你正在处理的文件。你在一个单独的文件中为我创建了这些属性和类。然后在我的HTML文件中。如果你和我在合作，我可以使用链接标签。样式表的超链接值是styles.css，其关系是样式表对你的。
- en: Now here's where you just have to throw up your hands。we would have called links
    in Web pages the link tag。and we wouldn't have used open bracket A for anchor。In
    the clickable sense。This just means link this HTML file to this CSS file with
    a，relationship off style sheet。
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你只需举手投降。我们会称网页中的链接为链接标签。我们不会使用开放括号A作为锚点。在可点击的意义上。这仅仅意味着将这个HTML文件链接到这个CSS文件，样式表之间有一种关系。
- en: What is the style sheet？It is a sheet of styles。It is a file off properties。![](img/ada90f1c39922f956d79e8b087ef9d26_264.png)
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是样式表？它是一张样式表。它是一个属性文件。![](img/ada90f1c39922f956d79e8b087ef9d26_264.png)
- en: and those properties can be inside of types or classes，or what will soon see
    our unique IEDs as well。![](img/ada90f1c39922f956d79e8b087ef9d26_266.png)
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性可以在类型或类中，或者我们即将看到的独特ID中。![](img/ada90f1c39922f956d79e8b087ef9d26_266.png)
- en: And there's other types for that as well。But here we have now arguably the best
    design version in that this is pretty compact。html and HTML values in attributes。But
    all the CSS is in this second file。Now you and I can really collaborate independently。then
    on CSS and what we can do with it？
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他类型的颜色。不过现在我们可以说这是相对较好的设计版本，因为这是非常紧凑的。HTML和HTML属性值在属性中。但所有的CSS都在这个第二个文件中。现在你我可以真正独立地合作。那么关于CSS和我们可以用它做什么呢？
- en: We have on Lee scratch the surface of CSS thus far。![](img/ada90f1c39922f956d79e8b087ef9d26_268.png)
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只是在CSS的表面上轻轻划过。![](img/ada90f1c39922f956d79e8b087ef9d26_268.png)
- en: But suffice it to say and actually just to tease just how bad it this I might
    be。Suppose you really want to have ah，colorful background。let me go into my CSS
    file here。![](img/ada90f1c39922f956d79e8b087ef9d26_270.png)
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 但可以说，实际上只是为了让你对这有多糟糕有些刺激。假设你真的想要一个多彩的背景。让我进入我的CSS文件。![](img/ada90f1c39922f956d79e8b087ef9d26_270.png)
- en: Styles CSS and I don't have to use Onley classes。I could say something like。let's
    go ahead and making my body tag have a background color。![](img/ada90f1c39922f956d79e8b087ef9d26_272.png)
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: Styles CSS，我不必只使用类。我可以说一些类似的。让我们继续，让我的body标签有一个背景颜色。![](img/ada90f1c39922f956d79e8b087ef9d26_272.png)
- en: How about red semi colon？Let's go back to the browser。![](img/ada90f1c39922f956d79e8b087ef9d26_274.png)
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 怎么样，红色分号？让我们回到浏览器。![](img/ada90f1c39922f956d79e8b087ef9d26_274.png)
- en: it's getting ugly pretty fast。Let me go ahead and change the color of my text。![](img/ada90f1c39922f956d79e8b087ef9d26_276.png)
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 这变得很丑很快。让我继续改变我的文本颜色。![](img/ada90f1c39922f956d79e8b087ef9d26_276.png)
- en: Maybe too white to make it stand out a little more on the red。it's back to something
    there。![](img/ada90f1c39922f956d79e8b087ef9d26_278.png)
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 也许太白了，让它在红色上更突出一点。它又回到了某种状态。![](img/ada90f1c39922f956d79e8b087ef9d26_278.png)
- en: I can change this to any color。Maybe Little Yale Blue over here。![](img/ada90f1c39922f956d79e8b087ef9d26_280.png)
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以把它改成任何颜色。也许是小耶鲁蓝在这里。![](img/ada90f1c39922f956d79e8b087ef9d26_280.png)
- en: Or if you really want to be fancy per week four。How about we make it 00 f 00。![](img/ada90f1c39922f956d79e8b087ef9d26_282.png)
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 或者如果你真的想要更炫酷，怎么让它变成00f00呢？![](img/ada90f1c39922f956d79e8b087ef9d26_282.png)
- en: speaking Hexi decimal。![](img/ada90f1c39922f956d79e8b087ef9d26_284.png)
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 说到十六进制。![](img/ada90f1c39922f956d79e8b087ef9d26_284.png)
- en: is gonna make it green for me instead。there's so many different CSS properties
    out there and again。we're focusing here on Lee on the list。The ideas when it comes
    time to actually using these properties will point you in the appropriate。Just
    a flesh out your vocab。All the more are any questions then。on the capabilities
    of CIA CSS and its relationship，with HTML。
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 这将让我看到绿色的效果。外面有这么多不同的CSS属性，再次强调。我们这里主要关注列表。当真正使用这些属性的时候，我会指引你到合适的地方。只是为了扩展你的词汇。如果有任何问题，关于CSS的能力以及它与HTML的关系。
- en: So the one thing we haven't done any of today at all is programming。we actually
    need a third and final language，that of Java script。And in the past weeks of the
    course。we've used what we would describe this really server side programming you
    have written C code you for。![](img/ada90f1c39922f956d79e8b087ef9d26_286.png)
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 所以今天我们根本没有进行任何编程。我们实际上需要第三种也是最后一种语言，即JavaScript。在过去几周的课程中，我们使用的是我们所描述的真正的服务器端编程，你已经为此编写了C代码。![](img/ada90f1c39922f956d79e8b087ef9d26_286.png)
- en: python code on the server specifically on CS 50 i D，which is by nature in the
    cloud ah server。But it turns out that all this time you haven't really been using
    your own Mac or your own。PC or your own phone for that matter。Other than is just
    a very expensive display。a very expensive screen。
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器上的python代码，特别是在CS 50 i D上，这本质上是在云端的服务器。但事实证明，这段时间你并没有真正使用自己的Mac、PC或手机。除了它们只是一个非常昂贵的显示器，非常昂贵的屏幕。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_288.png)'
  id: totrans-411
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_288.png)'
- en: All of the code is written。All of the code is running on this back end server。And
    that's a missed opportunity because all of your users。all of us are on our own
    pretty fancy Macs and PCs or phones these days。![](img/ada90f1c39922f956d79e8b087ef9d26_290.png)
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的代码都是写好的。所有的代码都在这个后端服务器上运行。这是一个错失的机会，因为你所有的用户，我们所有人如今都在使用自己相当不错的Mac、PC或手机。![](img/ada90f1c39922f956d79e8b087ef9d26_290.png)
- en: It's kind of a shame that those devices all have CPUs and RAM and storage space。![](img/ada90f1c39922f956d79e8b087ef9d26_292.png)
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 这些设备都拥有CPU、RAM和存储空间，真是太可惜了。![](img/ada90f1c39922f956d79e8b087ef9d26_292.png)
- en: Yet we're not using any of those capabilities were really just using the glass
    screen to。![](img/ada90f1c39922f956d79e8b087ef9d26_294.png)
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，我们并没有利用这些能力，我们实际上只是利用了这个玻璃屏幕来。![](img/ada90f1c39922f956d79e8b087ef9d26_294.png)
- en: see what's elsewhere on a server。But with Java script。we have another language
    that we'll see in a bit that will allow us to write code。![](img/ada90f1c39922f956d79e8b087ef9d26_296.png)
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 看看服务器上的其他内容。但是有了JavaScript，我们有另一种语言，稍后我们将看到，它将允许我们编写代码。![](img/ada90f1c39922f956d79e8b087ef9d26_296.png)
- en: save it on the server，but run it on user's computers and do what's called client
    side programming。So we'll still save the code。We write on the server。but we're
    going to include the code inside of these virtual envelopes that get downloaded
    by users。And instead of just reading the code top to bottom left to right and
    displaying information。
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 将其保存在服务器上，但在用户的计算机上运行，进行所谓的客户端编程。因此我们仍将保存我们在服务器上编写的代码，但我们将把代码放入这些虚拟信封中，用户将下载这些信封。与其只是从上到下、从左到右读取代码并显示信息。
- en: as is the case with HTML and CSS will additionally read the JavaScript。code
    deeper in the envelope and execute that on users，Macs and PCs and phones。And here's
    where Web programming gets really interesting because you now have a full fledged。computer
    at your disposal。That's not even your own。
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 像HTML和CSS一样，我们还会在信封中深入读取JavaScript代码，并在用户的Mac、PC和手机上执行该代码。在这里，网页编程变得非常有趣，因为你现在有一台完整的计算机可供使用。甚至不是你自己的。
- en: So let's go ahead and take another five minute break here，we'll conclude with
    a look at JavaScript。![](img/ada90f1c39922f956d79e8b087ef9d26_298.png)
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们在这里休息五分钟，最后看看JavaScript。![](img/ada90f1c39922f956d79e8b087ef9d26_298.png)
- en: And we're about to introduce a programmatic way of controlling Web pages and
    even。adding to Web pages and changing the content users see。thereby making our
    websites no longer just static that is written once and viewable the。same way
    forever but dynamic，somehow changing in response to user interactions or user
    input。
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 我们即将介绍一种程序化的方法来控制网页，甚至向网页添加内容并更改用户看到的内容，从而使我们的网站不再只是静态的——一次性编写、永远以相同的方式可视化，而是动态的，某种程度上对用户交互或用户输入作出反应。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_300.png)'
  id: totrans-420
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_300.png)'
- en: But first we need a couple of final building blocks that allow us to tie the
    world of CSS。together with Java script so that all three of these languages html。CSS
    and JavaScript or somehow interacting and recall that a bit ago。We wrote this
    link dot html example，in the correct version a link to w w dot harvard dot edu
    whose text was the word。
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 但首先我们需要几个最终的构建模块，使我们能够将CSS的世界与JavaScript结合起来，以便这三种语言——HTML、CSS和JavaScript可以相互作用。请回忆一下不久前，我们编写了这个link.html示例，其正确版本是一个指向w
    w dot harvard dot edu的链接，文本是这个单词。
- en: Suppose now that we want to override the browsers default Stylization of links。![](img/ada90f1c39922f956d79e8b087ef9d26_302.png)
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 现在假设我们想要覆盖浏览器的默认链接样式。![](img/ada90f1c39922f956d79e8b087ef9d26_302.png)
- en: which recall if I now visit in my other tab link dot html is pretty boring。and
    this has been true for like 20 years。Links tend to be blue and underlined before
    you visit them or purple and。underlined after you visited them at least once a
    sort of visual cube。![](img/ada90f1c39922f956d79e8b087ef9d26_304.png)
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下，如果我现在在另一个标签页访问link.html，实在是太无聊了。这种情况已经持续了大约20年。链接在你访问之前通常是蓝色并带下划线，或者在你至少访问过一次后是紫色并且带下划线，算是一种视觉提示。![](img/ada90f1c39922f956d79e8b087ef9d26_304.png)
- en: But most websites today，including CS 50 zone，use different colors and different
    aesthetics for links on a Web page。with or without underlining different colors，maybe
    even different background colors。You can style these things using CSS and Bunches
    of ways。So how might we do this？
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 但如今大多数网站，包括CS50区，都使用不同的颜色和美学来呈现网页上的链接。有无下划线的不同颜色，甚至可能还有不同的背景颜色。你可以通过CSS和多种方式来样式化这些东西。那么我们该如何做到呢？
- en: let's go ahead and be fair here and say Visit Harvard or，a traffic was quote
    unquote https。Dub dub dub dot Yale dot e d u Question。No close bracket。![](img/ada90f1c39922f956d79e8b087ef9d26_306.png)
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们公平一点，说访问哈佛，或者说交通是所谓的https。Dubbub dot Yale dot e d u 问题。没有闭合括号。![](img/ada90f1c39922f956d79e8b087ef9d26_306.png)
- en: Let's give myself two lengths。if I reload just looks like this。Both of them
    are now boring and purple because we've been to both places already。![](img/ada90f1c39922f956d79e8b087ef9d26_308.png)
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 让我给自己设定两个长度。如果我重新加载，就像这样。它们现在都是无聊的紫色，因为我们已经去过这两个地方。![](img/ada90f1c39922f956d79e8b087ef9d26_308.png)
- en: So let me go ahead and add a style tag up here just to keep us in the same file。I'm
    going to go back to using a style tag rather than introduce a separate file eso
    to keep things。simple in my style tag。Let me go ahead and change these links。toe
    have a color of Maybe let's make them all red initially。
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我在这里添加一个样式标签，保持在同一个文件中。我将回到使用样式标签，而不是引入一个单独的文件，这样可以让事情简单。在我的样式标签中，让我改变这些链接的颜色。也许我们先把它们都设为红色。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_310.png)'
  id: totrans-428
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_310.png)'
- en: f foo and let's go ahead and save that。Let me reload and you'll see that now
    Both of the links are red and underlines。![](img/ada90f1c39922f956d79e8b087ef9d26_312.png)
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: f foo，让我们保存它。让我重新加载，你会看到现在这两个链接都是红色并带下划线。![](img/ada90f1c39922f956d79e8b087ef9d26_312.png)
- en: I don't really like the Underline，so let's get rid of that。Let's change the
    text decoration of my A tags to be none。you would only know these properties exist
    from some form of reference。![](img/ada90f1c39922f956d79e8b087ef9d26_314.png)
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不太喜欢下划线，所以我们来去掉它。让我的A标签的文本装饰设置为无。你只能通过某种参考形式知道这些属性的存在。![](img/ada90f1c39922f956d79e8b087ef9d26_314.png)
- en: just adding to our vocabulary。Let's reload now and now the underlines air gone。but
    it would be kind of cool，like some websites。If when you hover over the link。at
    least on a laptop or desktop。![](img/ada90f1c39922f956d79e8b087ef9d26_316.png)
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 只是增加我们的词汇量。现在让我们重新加载，看看下划线消失了。但这就像某些网站那样，如果在你悬停在链接上时，至少在笔记本电脑或桌面上，感觉会很酷。![](img/ada90f1c39922f956d79e8b087ef9d26_316.png)
- en: the link then underlines，drawing your attention all them or to it。How can we
    do that？
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 这个链接然后会出现下划线，吸引你的注意力。我们该如何做到这一点？
- en: it turns out that you can use what are called pseudo selectors。which are work
    like this if I want to change the behavior of the A tag。when a user is hovering
    over it，you literally write the name of the tag colon hover。And then inside of
    this block，I'm going to go ahead and say Text decoration underline So。
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，你可以使用所谓的伪选择器。如果我想在用户悬停时改变A标签的行为，你只需写标签名加冒号hover。然后在这个块里面，我将说文本装饰为下划线。
- en: make everything red and not underlined by default。But when the user hovers。go
    ahead and decorate it with an underline。![](img/ada90f1c39922f956d79e8b087ef9d26_318.png)
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，把所有东西设为红色并且不带下划线。但当用户悬停时，给它加上下划线。![](img/ada90f1c39922f956d79e8b087ef9d26_318.png)
- en: So let's go back to the file after saving Reload。No visual change yet until
    I move my cursor up here and voila！
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们在保存后重新回到文件。还没有视觉变化，直到我把光标移到这里，瞧！
- en: Now it's getting a little more like modern websites。Now this isn't quite fair
    to Yale that both of the links are red。![](img/ada90f1c39922f956d79e8b087ef9d26_320.png)
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 现在它变得更像现代网站了。现在这对耶鲁来说不太公平，因为这两个链接都是红色的。![](img/ada90f1c39922f956d79e8b087ef9d26_320.png)
- en: So what if we change the colors of different types of links？let me go down here。and
    I need to distinguish these links in different ways，and I could use classes for
    that。But if I've only got one Harvard link and one Yale link，I might as well uniquely
    identify them。Let me go ahead and add an attribute called I'd off quote unquote
    Harvard。
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们改变不同类型链接的颜色会怎样呢？让我在这里往下看。我需要以不同方式区分这些链接，我可以为此使用类。但如果我只有一个哈佛链接和一个耶鲁链接，我还不如给它们唯一标识。让我添加一个叫做`Id`的属性，引用“哈佛”。
- en: and I'll keep it all lower case。Kind of like a variable on that。Then here I'm
    going to say I d equals quote unquote Yale。I could call these things anything
    I want。but because there's only one Harvard Lincoln，I'm going to add an attributes
    in HTML that just lets me verbally uniquely。identify each of those links。But up
    here，notice what I can do。
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 我会保持全小写。有点像变量。然后在这里我要说`id`等于“耶鲁”。我可以随意命名这些东西，但因为只有一个哈佛链接，我将在HTML中添加一个属性，让我能口头上唯一识别每一个链接。但在这里，注意我能做什么。
- en: Now Let me go ahead and remove the color from here and let me。instead say that
    for any tag that for the tag that has an，idee off Harvard。go ahead and color it
    as f 0000 But if it has an idea，go ahead and have a color off UH 0000。So that
    should give me my blue in RGB and notice the new symbol here is the hash。
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我从这里移除颜色，而是说对于任何具有`id`为哈佛的标签，给它上色为`#f00000`。但如果它有`id`，就给它上色为`#0000ff`。这应该给我RGB中的蓝色，并且注意这里的新符号是井号。
- en: So in the world of CSS ah，hash symbol before a word means the unique identify
    or Harvard or the unique identify。or Yale adopt before a word means the class
    centered，the class large or medium or small。And if you don't have any symbol before
    the word like a hash or a dot It means。literally the tag called a or literally
    the tag，called a when it's being hovered over it。
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 在CSS的世界中，单词前的井号表示唯一标识符，比如哈佛或耶鲁，单词前的点则表示类，比如类大、中或小。如果单词前没有任何符号，比如井号或点，这意味着字面上的标签是`a`，或者字面上的标签，当它被悬停时。
- en: few pieces of syntax。It's not programming code。![](img/ada90f1c39922f956d79e8b087ef9d26_322.png)
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 几个语法片段。这不是编程代码。![](img/ada90f1c39922f956d79e8b087ef9d26_322.png)
- en: but it is code of some sort。Let me go back to my tab and reload and voila！
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 但这确实是某种代码。让我回到我的标签页并重新加载，瞧！
- en: Now I have kind of the beginnings of a prettier website where I'm distinguishing
    Harvard with its。underline in Red and Yale，with its underlined in blue but on
    Lee under those certain conditions。![](img/ada90f1c39922f956d79e8b087ef9d26_324.png)
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我有了一个更美观的网站的开端，我用红色下划线区分哈佛，用蓝色下划线区分耶鲁，但仅在特定条件下。![](img/ada90f1c39922f956d79e8b087ef9d26_324.png)
- en: with CSS the ability to much more precisely control the，aesthetics of our Web
    pages。but that's static content。This Web page will never change。Let's now actually
    introduce another language known as Java script。and consider how we might use
    JavaScript to start dynamically updating our Web。
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 使用CSS可以更精确地控制我们网页的美观。但那是静态内容。这个网页永远不会改变。现在让我们引入另一种语言，称为JavaScript，并考虑如何使用JavaScript动态更新我们的网页。
- en: Here's a canonical Web page again，just html at the moment。Recall that we can
    add style tags to it up。Let's go ahead and now consider how we can make our Web
    page is all the more dynamic by introducing Java script。![](img/ada90f1c39922f956d79e8b087ef9d26_326.png)
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个标准的网页，目前仅为HTML。回想一下我们可以为其添加样式标签。让我们考虑如何通过引入JavaScript使我们的网页更加动态。![](img/ada90f1c39922f956d79e8b087ef9d26_326.png)
- en: So let's go ahead quickly and introduce just some of the syntax of JavaScript
    and wonderfully。And tactically is pretty similar to see and Python a little more
    sin tactically。But there's no memory management。so it's kind of like somewhere
    in between see and Python syntax。But it should all come fairly familiar，fairly
    easily now in scratch。
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们快速介绍一下JavaScript的一些语法，令人惊叹的是，它的语法与C和Python相似，但稍微简单一些。但没有内存管理，所以它有点介于C和Python的语法之间。但在Scratch中，这些都应该变得相当熟悉。
- en: Recall when we had a variable called counter initialized to zero。How do we now
    declare the same in Java script？It's gonna look like this。So it's not quite python。You
    literally use the keyword let，which means let the following variable exist。The
    variables called counter equals zero semi colon。the semi colons aren't always
    necessary。
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下我们有一个名为counter的变量初始化为零。我们现在如何在JavaScript中声明相同的变量？看起来是这样的。所以这不是Python。你实际上使用关键字let，这意味着让以下变量存在。这个变量叫做counter，值为零，后面跟着分号。分号并不总是必要的。
- en: but for consistency，I'll keep using them here。I suppose you want to change the
    counter by one as in scratch。implemented by one in Java script。You could do it
    very，very verbose。You can do it a little more succinctly like this，like in python
    and see or the plus plus is back。So if you've been missing that in Python，the
    pleasant assed Nicholas seems to be the plus。
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 但为了保持一致，我会在这里继续使用它们。我想你想要像在Scratch中那样将计数器增加1。在JavaScript中实现为1。你可以非常冗长地做到这一点。你也可以像这样更简洁地做到，就像在Python中一样，或者加加号又回来了。所以如果你在Python中怀念它，愉快的Nicholas似乎是加号。
- en: Plus is now back as well。How about something like this？
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 加号现在也回来了。那么像这样做怎么样？
- en: So if you want to say if X less than why in Java script。it's going to say if
    X less than why So here we have the curly braces。But the ideas are still the same。If
    else in scratch look like this in Java script。it's gonna look like that in ah，If
    else If else looks like this in Java script。
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果你想在JavaScript中说“如果X小于Y”，它将表达为“如果X小于Y”。所以这里有大括号。但思想仍然是相同的。在Scratch中的if else看起来像这样，在JavaScript中将是这样。if
    else在JavaScript中看起来是这样的。
- en: it's gonna look like this。there's no weird L if abbreviation it's literally
    else。But with the parentheses and with the curly braces。if you get hung up early
    on in these next few weeks，the stupid details of learning some new language。you
    got to develop the muscle memory。You got to start remembering what language is
    what but don't stress when you get hung up on。
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来是这样的。没有奇怪的L如果缩写，字面意思是else。但有括号和大括号。如果在接下来的几周早期你陷入这些学习新语言的琐碎细节中，必须培养肌肉记忆。你得开始记住语言是什么，但在遇到困难时不要感到压力。
- en: curly braces and parentheses like those things have never fundamentally mattered。matter
    to the computer，certainly intellectually，as we introduce the new。compelling features
    of this language。How about something like a for loop or wild loop。for that matter
    in scratch？If you wanted to do something forever。
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 大括号和括号这些东西从根本上来说并不重要。对计算机来说，确实是知识上的，当我们引入这个语言的新功能时。像for循环或while循环这样的内容呢？在Scratch中，如果你想要永远做某事。
- en: you can convert that now in JavaScript，similar to see while true or while any
    expression is true。If you want to repeat something three times almost the same
    asi。But I'm using let here instead of end。![](img/ada90f1c39922f956d79e8b087ef9d26_328.png)
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以在JavaScript中转换这个，类似于C语言中的while true或while任何表达式为真。如果你想重复某事三次，几乎与之相同。但我在这里使用let，而不是end。![](img/ada90f1c39922f956d79e8b087ef9d26_328.png)
- en: is loosely typed。It has types，don't need to stress over specifying them the
    computer will figure it out。So let is how you would declare a keyword。there are
    other ways to declare variables in JavaScript。including Constance。we'll keep things
    simple and focused on Lee on this keyword here。So here is that Web page again
    and the tree representation thereof。And this tree is useful on Leah's。
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 是松散类型的。它有类型，不需要强调指定它们，计算机会自动识别。所以让我们看看如何声明一个关键字。JavaScript中还有其他声明变量的方法，包括常量。我们将保持简单，专注于这里的关键字。所以这是那个网页，以及它的树形表示。这个树在Leah的场景中是有用的。
- en: a mental model for what the computer is doing inside off its memory。After having
    loaded a Web page with Java script。Now we have the ability to change this tree
    in real time。When the user clicks something，type something in with Java script。we
    will now have a programming language that allows us to mutate this tree in real。
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个关于计算机在其内存中正在做什么的心理模型。在用JavaScript加载网页后，我们现在能够实时更改这个树。当用户点击某个东西，或者用JavaScript输入一些内容时，我们将拥有一种编程语言，可以实时变更这个树。
- en: thereby making our Web pages no longer static or fixed in one state，but dynamic
    and changing instead。So how might we do this？let's consider exactly where we can
    go about writing some JavaScript code。We can do that by adding a script tag in
    the head like this。it can also go in the body like this。and there are some logical
    implications of those choices。
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们的网站就不再是静态的或固定的状态，而是动态和变化的。那么我们该如何做到这一点呢？让我们考虑一下我们如何编写一些 JavaScript 代码。我们可以通过在头部添加一个脚本标签来做到这一点，像这样。它也可以像这样放在主体中。这些选择有一些逻辑含义。
- en: Or we can even factor it out to a file like scripts dot Js，just as we did with
    CSS。So even though the tag is different，and the attribute is different。Its source
    and it's stupidly written like this。![](img/ada90f1c39922f956d79e8b087ef9d26_330.png)
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们甚至可以将它提取到一个文件中，比如 scripts dot Js，就像我们对 CSS 所做的那样。所以尽管标签不同，属性也不同。它的来源写得很愚蠢。![](img/ada90f1c39922f956d79e8b087ef9d26_330.png)
- en: If you are using an external file，you literally close the tag。even though there's
    nothing inside of it。That's one of these reality of using this particular tag。let
    me go ahead and propose that we write an actual program in JavaScript。Let me go
    back over to my ID。Let's create a new file called Actually let's go ahead and
    open up our old one。
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用外部文件，你实际上关闭标签。即使里面没有内容。这是使用这个特定标签的现实之一。让我继续提议我们在 JavaScript 中编写一个实际程序。让我回到我的
    IDE。让我们创建一个新的文件，实际上让我们打开我们的旧文件。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_332.png)'
  id: totrans-459
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_332.png)'
- en: hello dot html and Let's make it interactive rather than say hello body all。![](img/ada90f1c39922f956d79e8b087ef9d26_334.png)
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: hello dot html，让我们让它变得互动，而不是简单地说 hello body all。![](img/ada90f1c39922f956d79e8b087ef9d26_334.png)
- en: Let's see if we can't make it say a little something to me and to you。So down
    here in the body of my page，let me go ahead and change this and do something like
    this form。close form input。How about lets Dio I d of，quote unquote name and type
    is going to be text。and then let me go ahead and give myself a submit button type
    equal submit。So super simple。
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看能否让它对我和你说点什么。所以在我页面的主体部分，让我去修改这个，做一些像这样 form。close form input。我们可以设置 ID
    为“name”，类型将是文本。然后让我继续给自己一个提交按钮，类型等于提交。所以非常简单。
- en: The only difference now is I want a generic text box。I don't want one that's
    specific to searching。![](img/ada90f1c39922f956d79e8b087ef9d26_336.png)
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 现在唯一的区别是我想要一个通用的文本框。我不想要一个特定于搜索的文本框。![](img/ada90f1c39922f956d79e8b087ef9d26_336.png)
- en: and I want a submit button a generic one。I don't care what it says。Let me go
    back to my other tab。Click hello dot html and we have a form similar to the Google
    search example。![](img/ada90f1c39922f956d79e8b087ef9d26_338.png)
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要一个通用的提交按钮。我不在乎它说什么。让我回到我的其他标签。点击 hello dot html，我们有一个类似于 Google 搜索示例的表单。![](img/ada90f1c39922f956d79e8b087ef9d26_338.png)
- en: But now I am going to use a Web form in my own，HTML file to interact with the
    user because after all。this is how humans interact with web pages typically is
    via these forms。I want to enable the user to type in their name，and then I want
    my Web page now。Not Google to say hello，Whoever types this in，so I'm not gonna
    use a form in quite the same way as before。
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在我将使用我自己的 HTML 文件中的 Web 表单与用户互动，因为毕竟，人类与网页的典型互动方式就是通过这些表单。我想让用户输入他们的名字，然后我希望我的网页，而不是
    Google，说“你好”，不管是谁输入的，所以我不会以之前的方式使用表单。
- en: There's not gonna be in action because I'm not going to send it to Google。I'm
    not going to send it anywhere else。That's entirely client side in the browser
    itself。The form to dio When this for miss submitted，I wanted to call a function
    called greet。We're going to clean this up in a moment。But there is this attributes
    in html con ALTs on submit the value of which is not。
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 这将不会被执行，因为我不会将其发送到 Google。我不会将其发送到其他地方。这完全是在浏览器内的客户端。当这个表单提交时，我希望调用一个名为 greet
    的函数。我们稍后会清理这一点。但在 HTML 中有这个属性 con ALTs on submit，它的值不是。
- en: It's now JavaScript code。I want to call a function called greet。This function
    doesn't exist yet。but it will soon。How do I go about doing that？let me go ahead
    and go up here and add my script tag and up here。let me go ahead and define a
    function in javascript。It's a little similar to see It's a little similar to python
    you literally。
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是 JavaScript 代码。我想调用一个名为 greet 的函数。这个函数尚不存在，但很快就会出现。我该怎么做呢？让我继续上去添加我的脚本标签，然后在这里。让我继续在
    JavaScript 中定义一个函数。这有点像 C，也有点像 Python，你确实。
- en: though in javascript say function。You write the name of your function。any arguments
    and parentheses and then in curly braces，you define the function。I'm going to
    go ahead and just say alert，quote unquote Hello。I'm gonna keep it simple and just
    goofily output。And because this form。
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中定义函数时，你写下函数的名称、任何参数和括号，然后在大括号中定义函数。我将简单地说 alert，"Hello"。我会保持简单，只是愚蠢地输出。而因为这个表单。
- en: as with all forms typically does get submitted to a server，I'm gonna add one
    other curiosity。I'm going to say return False。Also inside of this on submit attributes。So
    I realized things were kind of escalating quickly here because there's a lot of
    pieces in motion。But focus again on the basics。The attribute is on Submit。
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 和所有表单一样，通常会提交到服务器，我还要添加一个好奇心。我将说 return false。同样在这个 on submit 属性中。因此我意识到事情迅速升级，因为有很多环节在运作。但再一次专注于基础。这个属性是在提交时。
- en: What do you want to do when the user submits？I want to execute these two lines
    of JavaScript code called the Greek function。and then return false return。False
    in this context means don't submit the form。but don't submit the form anywhere。I
    just want to use it as a client side tool for interacting with the user。I don't
    need to send it to the server or to Google to anyone else。
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户提交时你想做什么？我想执行这两行 JavaScript 代码，称为 Greek 函数，然后返回 false。这里的 return false 意味着不提交表单，但不提交到任何地方。我只是想将其用作与用户交互的客户端工具。我不需要将其发送到服务器或谷歌或其他人。
- en: Let me go ahead now and specify this。I deliberately gave this text field annoy
    idea of name。![](img/ada90f1c39922f956d79e8b087ef9d26_340.png)
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我继续指定这一点。我故意给这个文本框一个名称的想法。![](img/ada90f1c39922f956d79e8b087ef9d26_340.png)
- en: but we'll use that in just a moment。Let me go over to my other tab。Now reload
    because I've made changes。I can type in David，but I'm gonna be ignored for the
    moment。submit now notice。It's not the best user interface。but there is an alert
    on my screen from my specific oral that says。
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 不过我们稍后就会用到这个。让我转到另一个标签。现在重新加载，因为我做了更改。我可以输入“David”，但我暂时会被忽视。现在提交。请注意，这并不是最佳的用户界面，但我的屏幕上出现了一个来自我特定的警告。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_342.png)'
  id: totrans-472
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_342.png)'
- en: But I'd like it to say hello，So how can I do that？let me go back into my code
    here and let me go ahead and define a variable called。But I could call it anything
    I want and let me use this special function document dot，query selector。And this
    is a function that comes with Java script that allows you to select any，HTML element。but
    you need to be able to identify it using some kind of selector。
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 但我希望它能打招呼，那么我该怎么做呢？让我回到我的代码中，定义一个叫做的变量。其实我可以随便给它命名，并使用这个特殊函数 document dot，query
    selector。这是一个 JavaScript 提供的函数，允许你选择任何 HTML 元素，但你需要通过某种选择器来识别它。
- en: And here's where for better for worse，CSS and HTML and JavaScript start borrowing
    ideas from each other。If I want to get the value of the users text box，I bet I
    could give it a unique ID like quote unquote name and Aiken。selected by using
    my CSS syntax off name。And once I've selected that HTML elements。so to speak that
    tag，I'm gonna go inside of it and get its value。So this syntax is a little familiar。
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，无论好坏，CSS、HTML 和 JavaScript 开始相互借鉴。如果我想获取用户文本框的值，我可以给它一个独特的 ID，比如说“名称”，并使用我的
    CSS 语法进行选择。一旦我选择了那个 HTML 元素，可以说是那个标签，我会进入其中获取它的值。这种语法稍显熟悉。
- en: We've seen the dot notation before and see when it came to Struck's。We've seen
    the dot notation in Python when it came to libraries like the C S V library。We're
    using it in a similar way。Document is the special global variable that just comes
    with Java script in the browser。and it gives you access to all things related
    to your document。
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前见过点符号，看看它在结构中的表现。我们在处理 Python 的库时也见过点符号，比如 CSV 库。我们以类似的方式使用它。Document 是一个特殊的全局变量，它随
    JavaScript 一起提供在浏览器中，并且它让你访问与文档相关的所有内容。
- en: Your Web page query selector is a function that comes with that。document that
    Google and Microsoft and Apple wrote，for you called query selector。whose purpose
    in life is to take a CSS selector in quotes that。identifies one or mawr nodes
    that is nodes，from the tree。
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 你的网页查询选择器是一个由谷歌、微软和苹果为你编写的 document 函数，称为 query selector。其目的在于接受一个 CSS 选择器，这个选择器标识一个或多个节点，也就是树中的节点。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_344.png)'
  id: totrans-477
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_344.png)'
- en: and this tree actually has a name，though I have not used it before。This tree
    that we keep referring。Teoh is technique called a dom，a document object model。![](img/ada90f1c39922f956d79e8b087ef9d26_346.png)
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 这棵树实际上有一个名字，尽管我之前没有使用过。我们一直提到的这棵树。Teoh 是一种称为 DOM 的技术，即文档对象模型。![](img/ada90f1c39922f956d79e8b087ef9d26_346.png)
- en: which is just a fancy way of saying that document this global variable gives，you
    access to this dom。So when you call document Doc query selector that induces your
    browser for you to search the。whole tree all of those nodes and parents and Children
    and grandchildren and so forth all of。those nodes looking for the one with the
    unique identifier of name and then looking inside of that。
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一种说法，表明文档这个全局变量赋予你访问这个 DOM 的权限。所以当你调用 document Doc query selector 时，它会引导你的浏览器去搜索整个树，所有的节点、父节点、子节点和孙子节点等等，寻找那个具有唯一标识符“名称”的节点，然后在里面查找。
- en: node inside that rectangle，getting the actual value that the human typed in。So
    if I want to now output this value，I'm just gonna use some old school concatenation。Let
    me add to that string Hello Name and I can use double。quotes I can use single
    quotes does not matter。So long as you're consistent in the Java script world。
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 矩形内部的节点，获取人类输入的实际值。因此，如果我现在想输出这个值，我只会使用一些旧式的连接。让我在这个字符串上添加“你好，名字”，我可以使用双引号，也可以使用单引号，这没有关系。只要在
    JavaScript 世界中保持一致即可。
- en: the convention tends to be used single quotes，if only because you can type it
    almost twice as fast because you don't have to hold the stupid shift key。the type
    of double quote or to type of single quote。![](img/ada90f1c39922f956d79e8b087ef9d26_348.png)
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 这个约定倾向于使用单引号，原因仅仅是因为你可以几乎快两倍地输入，因为你不必按住那个愚蠢的 Shift 键。双引号或单引号的类型。![](img/ada90f1c39922f956d79e8b087ef9d26_348.png)
- en: let me go back to this page Reload because I've made changes。Let me type in
    my name again。Auto complete is popping up nicely。Click submit and voila！Still
    kind of lame。but it's a least now dynamic，and I can type in anyone's name as you
    could。Brian submit。and you can change other things about the Web page。
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 让我返回这个页面，重新加载，因为我做了更改。让我再次输入我的名字。自动完成很好地弹出。点击提交，瞧！还是有点无聊，但至少现在是动态的，我可以输入任何人的名字，就像你可以的那样。布莱恩提交。你可以更改网页的其他内容。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_350.png)'
  id: totrans-483
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_350.png)'
- en: and some of this is just sort of implementation details。But recall that you
    could give a button of value and you can say something like Greet me now if I
    go back here。![](img/ada90f1c39922f956d79e8b087ef9d26_352.png)
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是一些实现细节。但请记住，你可以给一个按钮赋值，并且可以说一些像“现在问候我”的话，如果我回到这里。![](img/ada90f1c39922f956d79e8b087ef9d26_352.png)
- en: and reload my But now says Greet me。![](img/ada90f1c39922f956d79e8b087ef9d26_354.png)
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 重新加载我的，但现在说的是问候我。![](img/ada90f1c39922f956d79e8b087ef9d26_354.png)
- en: Turns out that your input for text can have a placeholder like。![](img/ada90f1c39922f956d79e8b087ef9d26_356.png)
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 结果发现，文本的输入可以有一个占位符。![](img/ada90f1c39922f956d79e8b087ef9d26_356.png)
- en: What's your name？And then saving that file on reloading you see in great out
    text a prompt on the。box that's not actually there，because once you start clicking。![](img/ada90f1c39922f956d79e8b087ef9d26_358.png)
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 你叫什么名字？然后在重新加载文件时，你会看到灰色文本提示框，但实际上并不存在，因为一旦你开始点击。![](img/ada90f1c39922f956d79e8b087ef9d26_358.png)
- en: I can also disable that somewhat annoying auto complete by saying auto complete
    equals。![](img/ada90f1c39922f956d79e8b087ef9d26_360.png)
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 我还可以通过设置自动完成等于来禁用那种令人讨厌的自动完成。![](img/ada90f1c39922f956d79e8b087ef9d26_360.png)
- en: quote unquote off。And then I could go back to my page，me reload and now notice。Even
    when I click in there，it doesn't auto complete。which is maybe good for privacy
    sake and notice to I could do one other thing。![](img/ada90f1c39922f956d79e8b087ef9d26_362.png)
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: 引用说完后，我可以回到我的页面，重新加载，现在注意到。即使我点击那里，它也不会自动完成。这或许出于隐私考虑，我还可以做其他事情。![](img/ada90f1c39922f956d79e8b087ef9d26_362.png)
- en: Let me go ahead and add auto focus。Notice that Every time I reload the page。![](img/ada90f1c39922f956d79e8b087ef9d26_364.png)
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 让我继续添加自动聚焦。请注意，每次我重新加载页面时。![](img/ada90f1c39922f956d79e8b087ef9d26_364.png)
- en: I had to click in the box。when I reload the page，the cursor is already there。blinking
    and ready to go there by saving your users one step。another vote in favor of accessibility
    and usability by just putting the user where。![](img/ada90f1c39922f956d79e8b087ef9d26_366.png)
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须点击那个框。当我重新加载页面时，光标已经在那里闪烁，准备好通过节省用户一步到达。这是另一个支持可访问性和可用性的投票，通过将用户放在正确的位置。![](img/ada90f1c39922f956d79e8b087ef9d26_366.png)
- en: they probably want to be。any questions thus far on this introduction of Java
    script by way。greet inside of our new script tag and using this new on submit
    attributes。that calls that function and then short circuits the form submission
    by just saying Return false。But don't submit the form to the server like we did
    with Google。Any questions or confusion？
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 他们可能想要的是什么？在这段JavaScript的介绍中有任何问题吗？通过在我们的新脚本标签内使用问候，并使用这个新的提交属性，调用那个函数，然后通过返回false来短路表单提交。但不要像我们用Google那样将表单提交到服务器。有什么问题或困惑吗？
- en: Anything on your end？let me at the risk of making it look more complicated。let
    me make it more complicated。But in a way that will be familiar over the next couple
    of weeks。When you see more and more examples and use third party libraries，you've
    seen some building blocks。We would not expect you to write this this week。based
    on these examples but just to give you the mental model for how javascript is
    typically。
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 你那边有什么问题吗？让我冒着让事情看起来更复杂的风险，让事情变得更复杂。但以一种在接下来的几周里会熟悉的方式。当你看到越来越多的例子并使用第三方库时，你会看到一些构建块。我们并不期望你在这一周写出这个，基于这些例子，但只是给你一个关于JavaScript通常是怎样的思维模型。
- en: like with CSS，tends to be a little poorly designed。When you start co mingling
    your language is like that makes it hard to collaborate with someone else。It makes
    it hard to maintain one language independent of another。so it tends to be a good
    thing to keep these things separate。And that's not always the case。
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 像CSS一样，往往设计得不太好。当你开始混合语言时，这让与他人合作变得困难。它让一个语言独立于另一个语言的维护变得困难。所以保持这些东西分开通常是个好主意。这并不总是如此。
- en: especially in mobile app development of putting these things back together。But
    this tends to keep things clean，at least when were first starting out。So let me
    go ahead and actually go ahead and get rid of my code up。here for now and let
    me go ahead and get rid of this on。
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是在移动应用开发中，将这些东西重新组合。但这通常保持事情的清晰，至少在我们刚开始的时候。所以让我继续，实际上现在把我的代码删掉。这里暂时先放一放，让我把这个也去掉。
- en: Submit handler and let me go ahead now and down here，actually appear。Give myself
    a script tag and let me go ahead and do the same thing a little differently。Document
    dot query selector This time，let me select the form and I'm not gonna bother giving
    it a name。so if I just select form that will give me my form and let me use this
    fancy function。
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 提交处理程序，让我继续，现在在这里，实际上出现。给我一个脚本标签，让我以略微不同的方式做同样的事情。这次我选择表单，而我不会麻烦给它一个名称。所以如果我只选择表单，这会给我我的表单，让我使用这个花哨的函数。
- en: Add event listener。It turns out that the world of Web programming is filled
    with what we would call events。When you click on a page，that's an event when you
    drag on a page，that's an event on a phone。When you touch a page that's an event。Turns
    out using Java script you。Now the programmer can write code that listens for these
    events and responds to them by。
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: 添加事件监听器。事实证明，网页编程的世界充满了我们所称之为事件的东西。当你在页面上点击时，这就是一个事件；当你在页面上拖动时，这也是一个事件；在手机上，当你触摸页面时，这也是一个事件。事实证明，使用JavaScript，你。现在程序员可以编写代码，监听这些事件并对此做出响应。
- en: So I'm gonna go ahead and add an event listener on my form that's listening
    for the submit event。What do I want my code to dio When the forms，I want to call
    the greet function all right for the greet function to work。I need to reintroduce
    it。So let me quickly whip up the greet function。Let me go ahead and do an alert
    of hello and then plus name。
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我将继续在我的表单上添加一个事件监听器，监听提交事件。我希望我的代码在表单提交时能做什么呢？我想调用问候函数。好吧，为了使问候函数正常工作，我需要重新引入它。所以让我快速写出问候函数。让我先弹出一个“你好”，然后加上名字。
- en: So let me say Let name equals document dot，query selector And now let me go
    ahead and I still have the i d。So let's say quote unquote hash name dot value。So
    I think Greek now exists。But now this line of code notice does this。find me the
    form。Then add an event listener listening for the submit event。And when that event
    is called。
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我说，让名字等于文档的查询选择器。现在让我继续，我仍然有ID。那么我们说引用一下哈希名字的值。所以我认为希腊语现在存在了。但现在这一行代码注意到这点。找到表单。然后添加一个事件监听器，监听提交事件。当这个事件被调用时。
- en: when that event happens，call this function。This is very similar。somewhat similar
    to our Lambda example last week when we passed a function，into the sorted function。So
    it's to tell it to sort by value instead of by key。Remember that syntax when we
    defined a function just to help us sort。
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
  zh: 当那个事件发生时，调用这个函数。这与我们上周的 Lambda 示例非常相似，当我们将一个函数传入排序函数时。这是告诉它按值排序而不是按键排序。记住我们定义函数时的语法，以帮助我们排序。
- en: Notice that I do not want to call greet。I do not want to call greet online。I
    want to tell the browser to call greet when it is ready。![](img/ada90f1c39922f956d79e8b087ef9d26_368.png)
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我不想在线调用 greet。我想告诉浏览器在准备好时调用 greet。![](img/ada90f1c39922f956d79e8b087ef9d26_368.png)
- en: I passed the function in by name。Let me go ahead now and save and reload。Nothing
    visually has changed。But when I type in David and Great May，Huh，Let me say David
    greet。Nothing happened。if something's acting up，let's go back to those developer
    tools。developer developer tools and let's not look at network。But look at console。
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 我是通过名称传入函数的。让我继续保存并重新加载。视觉上没有变化。但当我输入 David 和 Great May，呃，让我说 David greet。什么都没发生。如果出现问题，让我们回到开发者工具，开发者开发者工具，不要看网络，而是看控制台。
- en: And here is where your new friend is going to show you all of the mistakes that
    you've made in Java。just like in python and see you see the errors in your terminal
    window because Java。script is being run and the client side in the user's browser。You
    can't just look at your terminal window。There won't be any errors there。
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，你的新朋友将向你展示你在 Java 中犯的所有错误。就像在 Python 中一样，你会在终端窗口中看到错误，因为 Java 脚本是在用户的浏览器中运行的。你不能只看终端窗口，那里不会有任何错误。
- en: You need to look in your own browser if you're the one testing things。notice
    here cannot read property。Add event listener off null So this is a subtle。but
    I did it deliberately because it's so common。![](img/ada90f1c39922f956d79e8b087ef9d26_370.png)
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你是测试者，你需要在自己的浏览器中查看。注意这里不能读取属性。添加事件监听器为空，因此这是一个微妙的错误，但我故意这样做，因为这非常常见。![](img/ada90f1c39922f956d79e8b087ef9d26_370.png)
- en: I promise I did it deliberately。Let me go back here and point out this browsers
    air Pretty naive。It's fancy and as powerful as they seem to be getting。They still
    take us literally。just like python and seeded top to bottom，left to right and
    if Online 13。I am saying query for the form tag，but the form tag doesn't exist
    until Line 21。
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 我保证我这样做是故意的。让我回到这里指出这个浏览器的错误相当幼稚。尽管看起来华丽且功能强大，但它们仍然是字面意思地处理，就像 Python 一样，从上到下、从左到右。在第
    13 行，我说查询表单标签，但表单标签在第 21 行之前并不存在。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_372.png)'
  id: totrans-506
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_372.png)'
- en: It's not going to work，and therefore the error message I'm seeing makes sense。You
    cannot read property。Add event listener of null。![](img/ada90f1c39922f956d79e8b087ef9d26_374.png)
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 这将无法工作，因此我看到的错误信息是有意义的。你无法读取属性。添加事件监听器为空。![](img/ada90f1c39922f956d79e8b087ef9d26_374.png)
- en: Coming from form is currently null。As of line 13 it does not exist until line
    2021。So how do we fix this？the sort of quick and dirty way would be。let's just
    move this down below inside of the body now。![](img/ada90f1c39922f956d79e8b087ef9d26_376.png)
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 来自表单的内容当前为空。从第 13 行开始，它在第 21 行之前并不存在。那么我们该如何解决这个问题呢？一种快速而肮脏的方法是，把它移到<body>内部的下面。![](img/ada90f1c39922f956d79e8b087ef9d26_376.png)
- en: but below the form tag。And I think this will work。Let me go ahead and reload。Now
    the error goes away。But I haven't done anything yet。Let me click in the box and
    say，It's back toe working。but much like in python and see。![](img/ada90f1c39922f956d79e8b087ef9d26_378.png)
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 但在表单标签下。我认为这样会有效。让我继续重新加载。现在错误消失了。但我还没做任何事情。让我点击框并说，它又可以工作了。但就像在 Python 中一样。![](img/ada90f1c39922f956d79e8b087ef9d26_378.png)
- en: this is kind of a slippery slope like the solution to our problems。Can't just
    We'll move it down。There's got to be a better way similar and spirit of prototypes。but
    not quite in the same way the way Java script handles this problem is as follows。If
    I undo that and go back to the top where I have my script now。
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点像解决我们问题的滑坡。不能就这样我们把它往下移。一定有更好的方法，类似原型的精神，但不完全是同样的方式，JavaScript 处理这个问题的方法如下。如果我撤销这一点，回到顶部我现在有我的脚本。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_380.png)'
  id: totrans-511
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_380.png)'
- en: I can actually do this Instead，I can do something like this document。I can do
    this document dot add event listener and this，But Dom content loaded。this function
    Listen and let me go here and give myself a，second function function。and inside
    of this function will be that one line of code。So I've got two functions now。
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 我实际上可以这样做，我可以这样做document。我可以做这个document.addEventListener和这个，但是DOM内容加载。这个函数Listen，让我在这里再给自己一个第二个函数，并且这个函数内部将是那一行代码。所以我现在有两个函数。
- en: one of which handles the greeting。Is there a new one called Listen whose purpose
    in life is just to add that。That's all but notice here online。Now I'm adding an
    event listener to the document itself。saying when the Dom content is loaded。![](img/ada90f1c39922f956d79e8b087ef9d26_382.png)
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一个处理问候。有一个新的称为Listen的函数，其生命目的只是添加那个。这就全部，但请注意在线。现在我正在向文档本身添加一个事件监听器。表示当DOM内容加载时。![](img/ada90f1c39922f956d79e8b087ef9d26_382.png)
- en: when this whole tree has been loaded and therefore the form tag has been loaded
    and everything。![](img/ada90f1c39922f956d79e8b087ef9d26_384.png)
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 当整个树加载完成，表单标签和一切都被加载时。![](img/ada90f1c39922f956d79e8b087ef9d26_384.png)
- en: else go ahead and call the listen function。The listen function is just going
    to add another listener to the form。![](img/ada90f1c39922f956d79e8b087ef9d26_386.png)
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，继续调用监听函数。监听函数将会为表单添加另一个监听器。![](img/ada90f1c39922f956d79e8b087ef9d26_386.png)
- en: listening for submissions。And so now if I go ahead and save this reload。I'll
    keep my developer tools open and type in David and greet May still works。but I
    haven't had to sort of do this stupid resort of like moving my code down to the
    bottom in solving the。![](img/ada90f1c39922f956d79e8b087ef9d26_388.png)
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 监听提交。因此，现在如果我保存并重新加载这个页面。我会保持开发者工具打开，输入David并向May打招呼仍然有效。但是我不需要像以前那样愚蠢地将代码移动到底部来解决这个问题。![](img/ada90f1c39922f956d79e8b087ef9d26_388.png)
- en: I'm just telling the browser，don't do the following until the Dom's content
    has loaded。all right questions on any of this，and this is absolutely them or the
    most sophisticated。I think of the syntax and the logic we've done today。we're
    just planting the seeds for understanding this in the weeks to come。Questions
    Confusion。
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是告诉浏览器，在DOM内容加载之前不要执行以下操作。对此有任何问题吗？这绝对是最复杂的。我认为今天我们做的语法和逻辑只是为未来几周理解这些内容播下种子。问题和困惑。
- en: let me go ahead and blow your minds with one other feature of Java script that
    actually has。similarities with python。Recall that any time we define a function
    in one place and then use it in。that's generally been kind of lame。Why are you
    bothering to create a function？
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 让我给你们展示JavaScript的另一个功能，它实际上与Python有相似之处。回想一下，每当我们在一个地方定义一个函数并在其他地方使用时，通常都显得有些无聊。你为什么要麻烦地创建一个函数？
- en: Adding lines of code to write a function that you're only gonna call once last
    week with。Recall that two weeks ago with Python recall，we defined a function f
    and then we said。Let's just use a lambda function an anonymous functions because
    it's only being used in one place。So this is gonna be the ugliest we see。If I
    know that I want to call a function called listen。
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 添加代码行以编写一个你只会调用一次的函数。回想一下，两周前我们用Python定义了一个函数f，然后我们说。让我们使用一个匿名的lambda函数，因为它只在一个地方被使用。因此，这将是我们看到的最丑陋的。如果我知道我要调用一个名为listen的函数。
- en: when the Dom's content is loaded，I don't need to give that function a name。I
    can actually just put the function right there。I'm gonna literally copy and paste
    this over here。Let me remove the excess white space Here，let me go ahead and now
    point out and I'm gonna。do this a little stylistically differently，just to be
    consistent with what other people dio notice。
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 当DOM内容加载时，我不需要给那个函数一个名字。我可以直接把函数放在那儿。我将会字面上复制并粘贴这个。让我移除多余的空白，接下来我将以不同的风格来说明，以便与其他人保持一致。
- en: Now I've done this。I've literally move that function as the second argument
    toe add event。listener and I don't need its name at this point。I'm gonna go ahead
    and just do this。The equivalent in Java script of a lambda function is toe literally
    just say。function with no name and still have open parentheses，with or without
    a space in between them。
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我已经完成这个。我实际上将那个函数作为addEventListener的第二个参数移动，而此时我不需要它的名字。我会继续这样做。在JavaScript中，lambda函数的等效物就是字面上说。没有名字的function，且仍然保持开放的括号，括号之间可以有或没有空格。
- en: This is now saying a little more elegantly，even though more cryptically on the
    document object your global variable。Add the event listener Listening for the
    dom content loaded。what do you want to do when the Dom's content has loaded call
    this anonymous function。otherwise known as a lambda function。But notice what we're
    gonna dio。
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这更优雅地表达了，即使在文档对象上更为隐晦。你的全局变量。添加事件监听器，监听DOM内容加载。你想在DOM内容加载后做什么？调用这个匿名函数，也称为lambda函数。但请注意我们要做的事情。
- en: We're gonna query for the form and we're gonna add an event listener on submit
    by calling the Greek function。we don't need to do that。Let's go ahead and remove
    that。Let's go ahead and delete the greet function name and get rid of it。Let's
    make one mawr anonymous function。Let me paste this in here。
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查询表单，并通过调用问候函数添加提交事件监听器。我们不需要这样做。让我们删除这个。让我们去掉问候函数的名称，把它去掉。让我们再做一个匿名函数。让我把这个粘贴到这里。
- en: I got to clean up my formatting real quick。So let me go ahead and remove some
    white space here。Remove the function name。Put my curly brace over there。Get rid
    of this one here in Dent。That indent this close this Ooh，or at least cryptic looking。depending
    on whether you like this kind of thing。it's just basic building blocks。
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要快速整理一下我的格式。所以让我去掉一些空格。去掉函数名。把我的大括号放到那里。把这个去掉，并进行缩进。那缩进关闭这个，哦，或者至少看起来很隐晦。这取决于你是否喜欢这种东西。这只是基本的构建块。
- en: You could define functions that don't have names。because if you wanna pass one
    function to another function。you can literally just write the code using the supported
    syntax。which in Java script is not to use the word lambda，but to use the word
    function no name。but still parentheses and then making sure it's still well formed。
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以定义没有名称的函数。因为如果你想把一个函数传递给另一个函数，你实际上可以直接使用支持的语法来编写代码。在JavaScript中，不使用单词lambda，而是使用无名函数这个词，但仍然需要括号，并确保它格式正确。
- en: Function with an open curly brace here and close curly brace。Here you can then
    write out your code and the only reason I have this other parenthesis over。here
    eyes because I'm already inside of。![](img/ada90f1c39922f956d79e8b087ef9d26_390.png)
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个打开的大括号和一个闭合的大括号。你可以在这里写出你的代码，而我之所以有这个额外的括号，是因为我已经在里面了。![](img/ada90f1c39922f956d79e8b087ef9d26_390.png)
- en: ah function called at event listener。that not a problem，certainly at this stage。we're
    just kind of now stacking these different ideas on top on top，on top of one another。let
    me show you now a pre made example that shows you exactly what you could do now
    with these。Here's a non exhaustive list of events that you can listen for in a
    browser。
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 事件监听器中调用的函数。这在这个阶段当然不是问题。我们现在只是将这些不同的想法一层一层叠加上去。让我给你展示一个预制的示例，它准确地展示了你现在可以用这些做的事情。以下是你可以在浏览器中监听的事件的一个非详尽列表。
- en: not just things like submitting but also，clicking and dragging。Keep pressing，moving
    your mouse over。moving your mouse down the button up and down。![](img/ada90f1c39922f956d79e8b087ef9d26_392.png)
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅仅是提交的事情，还有点击和拖动。持续按住，移动鼠标。鼠标向下移动，按钮上下移动。![](img/ada90f1c39922f956d79e8b087ef9d26_392.png)
- en: touching and moving and other such events。There's this whole list of events
    that you could do such that you can actually do things like this。Let me go back
    to my ID and let me open up a pre made example。This one called Hello。five html
    and in hello，five html。I've got this example already that it's just doing a few
    things。It's listening for Dom content loaded，but it's then listening for key up。
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: 触摸、移动和其他类似的事件。有一个完整的事件列表，你可以做这些事情。让我回到我的ID，打开一个预制的示例。这个叫做Hello。five html，在Hello，five
    html中。我已经有这个示例，它只是做了一些事情。它在监听DOM内容加载，同时也在监听键盘抬起。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_394.png)'
  id: totrans-530
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_394.png)'
- en: And what's it going to do with key up？Let me go over here into my index。I'm
    gonna close the debugging tools。Let me reload my directory index here。And that
    gives me this other file in Source eight called Hello，five html。Now notice here。I'm
    gonna go ahead and type in。who notice the web page itself is immediately interacting
    with May。
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 那么键盘抬起事件会做什么呢？让我看看我的索引。我将关闭调试工具。让我重新加载我的目录索引。这会给我在源文件八中另一个文件，叫做Hello，five html。现在注意这里。我将开始输入。注意，网页本身正在立即与我互动。
- en: And as soon as I deleted it says Hello，let me type in Brian。And now we sort
    of have this auto complete here where I can type in Montague or arithmetic。and
    it just keeps auto completing。![](img/ada90f1c39922f956d79e8b087ef9d26_396.png)
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 当我删除它时，它显示“你好”，让我输入“Brian”。现在我们有一种自动完成的效果，我可以输入“Montague”或“arithmetic”，它会一直自动完成。![](img/ada90f1c39922f956d79e8b087ef9d26_396.png)
- en: you have the ability even to change the contents of the web page。not just by
    throwing up a ugly alert。You can use code like you see here。which we won't get
    into the details off but allows you to change the page itself and notice。This
    is kind of ugly looking syntax。
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至可以更改网页的内容，而不仅仅是弹出一个丑陋的警告。你可以使用你看到的代码，尽管我们不详细讨论，但这允许你更改页面本身，并注意。这种语法看起来有点丑。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_398.png)'
  id: totrans-534
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_398.png)'
- en: You don't even have to concoct。just like python has f strings in Java script。![](img/ada90f1c39922f956d79e8b087ef9d26_400.png)
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至不需要编造。就像 Python 有 f 字符串，JavaScript 也有。![](img/ada90f1c39922f956d79e8b087ef9d26_400.png)
- en: You can use back ticks plus a dollar sign and stupid curly braces and do the
    same thing。And I'm kind of showing some some bias here。But same exact idea，as
    it was in python and again。These are the kinds of things that will trip you up
    early on inevitably。as you get more comfortable with the language，all of the ideas
    will outshine the particular syntax。
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用反引号加美元符号和大括号，做同样的事情。我在这里有点偏向了，但这和 Python 中的想法是一样的。再说一次，这些是早期不可避免会让你困惑的东西。随着你对语言的熟悉，所有的想法将会超越具体的语法。
- en: let's look at a few other pre made examples just to give you a sense of the
    capabilities of Java script。Here's a program called Background HTML，and this Web
    page you'll see is gonna have three buttons。It turns out you can implement buttons
    on a Web page in different ways。You can literally use the button tag down here。I
    have a whole bunch of code using query selector again。
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些其他的预制示例，让你感受一下 JavaScript 的能力。这是一个名为 Background HTML 的程序，这个网页你会看到有三个按钮。事实证明，你可以以不同的方式在网页上实现按钮。你可以在这里使用按钮标签。我有一大堆使用查询选择器的代码。
- en: Notice what you can also dio if you go ahead in Java script and select your
    body。by saying Document a query，You can actually then access ah。special variable
    inside of the pages body or any tag for that matter called。And then you can change
    with JavaScript，the style off a CSS property using code，and unfortunately。
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 注意如果你继续使用 JavaScript 并选择你的主体，通过说 Document 查询，你实际上可以访问页面主体或任何标签内的一个特殊变量。然后你可以使用
    JavaScript 更改 CSS 属性的样式，但不幸的是。
- en: left hand was not talking to right hand in CSS。It would be background dash color。in
    Java script at proper programming language。This would be in background，minus color。like
    literally arithmetic。So the world decided that any CSS properties with hyphens
    would instead become something。like background capital color to distinguish the
    two。
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: CSS 中的左手和右手没有沟通。这应该是 background-dash-color。在 JavaScript 中，作为适当的编程语言。这将是 background-minus-color，像是字面上的算术。所以世界决定，任何带有连字符的
    CSS 属性将改为像 background capital color 这样，以区分二者。
- en: But it's the same exact idea if I go now into this file here。![](img/ada90f1c39922f956d79e8b087ef9d26_402.png)
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我现在进入这个文件，想法是一样的。![](img/ada90f1c39922f956d79e8b087ef9d26_402.png)
- en: now I have a very simple page with three buttons R。but notice when I click on
    them I have to find in advance。![](img/ada90f1c39922f956d79e8b087ef9d26_404.png)
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我有一个非常简单的页面，有三个按钮，但注意当我点击它们时，我必须提前找到。![](img/ada90f1c39922f956d79e8b087ef9d26_404.png)
- en: I claim some event listeners for click，and every time I hear the click。![](img/ada90f1c39922f956d79e8b087ef9d26_406.png)
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 我为点击声明了一些事件监听器，每次我听到点击时。![](img/ada90f1c39922f956d79e8b087ef9d26_406.png)
- en: I changed the CSS of the page。And if this weren't cool already，let me open up
    view Developer Tools。![](img/ada90f1c39922f956d79e8b087ef9d26_408.png)
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 我更改了页面的 CSS。如果这还不够酷，让我打开开发者工具。![](img/ada90f1c39922f956d79e8b087ef9d26_408.png)
- en: developer tools here notice the third and final tab。Today is elements no matter
    how ugly your HTML is，the developer tag the developer tools elements Tab will
    always show it's you in a very。pretty printed，colorful fashion。But it will also
    show you the actual CSS as it's changing in real time。So let me reload the page
    by default。a white background and notice down here。
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 开发者工具中注意第三个也是最后一个选项卡。今天是元素，不管你的 HTML 有多丑，开发者工具的元素选项卡总是以一种非常漂亮的格式显示给你。而且它会实时显示实际的
    CSS 变化。所以让我重新加载页面，默认是白色背景，注意这里。
- en: the body has no style attributes on it，but if I zoom out for a moment。and now
    click our watch the HTML on the bottom of the page。Chrome just dynamically added
    background color red If I click green。![](img/ada90f1c39922f956d79e8b087ef9d26_410.png)
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: body没有样式属性，但如果我稍微缩小一下，点击查看页面底部的HTML。Chrome动态添加了背景颜色红色，如果我点击绿色。![](img/ada90f1c39922f956d79e8b087ef9d26_410.png)
- en: background color green is now there and blue。So using these developer tools。you
    can interact with your own website and see what's changing in the。![](img/ada90f1c39922f956d79e8b087ef9d26_412.png)
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 背景颜色绿色现在在这里和蓝色。因此，使用这些开发者工具，你可以与自己的网站互动，看到发生了什么变化。![](img/ada90f1c39922f956d79e8b087ef9d26_412.png)
- en: Were changing in real time the attributes of this tree，thereby making the page
    all the Mawr dynamic。This is powerful to let me go to harvard dot edu。![](img/ada90f1c39922f956d79e8b087ef9d26_414.png)
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实时更改这个树的属性，从而使页面更加动态。这是强大的，让我去harvard dot edu。![](img/ada90f1c39922f956d79e8b087ef9d26_414.png)
- en: open up developer tools and notice。Here we can see all of Harvard that you'd
    use HTML in the Elements。tab notice。It's a lot of HTML tear，but there's all of
    these triangles that expand it or rather。that collapse it just to make it more
    succinct。If you wanna look at specific things。let's go ahead and say something
    like this。Let's see what could be fun to change here？How about this？
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 打开开发者工具，注意这里我们可以看到哈佛在元素选项卡中使用的所有HTML。注意，这里有很多HTML层级，但有很多可以展开或折叠的小三角形，只是为了使其更简洁。如果你想查看特定的东西，我们来看看像这样的内容。看看这里有什么有趣的变化？怎么样？
- en: I'm gonna go ahead and right click or control click on about Harvard because
    this I'm finding。![](img/ada90f1c39922f956d79e8b087ef9d26_416.png)
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 我将继续右键单击或按住控制键点击关于哈佛，因为我正在发现这一点。![](img/ada90f1c39922f956d79e8b087ef9d26_416.png)
- en: It's gonna automatically open in the Elements Tab，the actual HTML that Harvard
    used to create about Harvard。It's got some other tags here。Span is another thing。It's
    like a mini paragraph all on one line class we've seen before。I don't know what
    LG Navteq is probably large navigational text that Harvard invented as a class。
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 它会自动在元素选项卡中打开哈佛用来创建关于哈佛的实际HTML。这里还有其他一些标签。Span是另一种东西，就像一行中的迷你段落，类是我们之前见过的。我不知道LG
    Navteq是什么，可能是哈佛作为类发明的大的导航文本。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_418.png)'
  id: totrans-551
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_418.png)'
- en: But notice what I could do here。How about we change this to Yale and then hit
    Enter and Walla。![](img/ada90f1c39922f956d79e8b087ef9d26_420.png)
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 但是注意我在这里可以做什么。我们把这个改成耶鲁，然后按回车，哇！![](img/ada90f1c39922f956d79e8b087ef9d26_420.png)
- en: hacking harvard dot e d。![](img/ada90f1c39922f956d79e8b087ef9d26_422.png)
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: hacking harvard dot e d。![](img/ada90f1c39922f956d79e8b087ef9d26_422.png)
- en: understanding what's going on here is important。I'm on Lee changing my local
    copy of Harvard you view that's been downloaded onto my。If you've got a Harvard
    that you do you now，It's not hacking per se。but this is really to how you can
    learn how to design Web pages if I go to Yale。Edu Aiken Similarly。look at all
    of Yale's HTML and change things here。Let me right Click on about Yale。Click on
    Inspect。
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 理解这里发生的事情很重要。我在更改我下载到本地的哈佛的副本。如果你有一个哈佛，现在的情况并不算黑客攻击。但这真的可以让你学会如何设计网页。如果我去耶鲁。Edu
    Aiken类似地，查看耶鲁的所有HTML并在这里更改。让我右键单击关于耶鲁，点击检查。
- en: Let me go ahead and change this to Harvard。Enter and I could be really malicious。but
    on my own machine notice。Over here it right in the developer tools。You can see
    all of the CSS styles that are currently being applied to that particular。tag
    and notice this。If I change color down here at top bottom right。
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 让我继续将其更改为哈佛。按回车，我可能真的很恶意，但在我自己的机器上注意。这里在开发者工具中，你可以看到所有当前应用于该特定标签的CSS样式，注意这一点。如果我在右上角更改颜色。
- en: let me change it to F 0000 and hit。Enter Wallach。I've changed all of Yale's
    tags along that row to be read。so this isn't again about hacking some website
    because it has no effect on the actual server。but it it's so much easier and faster
    to sort of fine tune your own pages aesthetics。by just using your browser。try
    new properties and so forth。when you're ready to save it。
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: 让我将其更改为F 0000并按回车。Wallach。我已将耶鲁大学这一行的所有标签改为红色。因此，这不是在黑客攻击某个网站，因为它对实际服务器没有影响。但通过使用浏览器微调自己页面的美学要容易得多且更快。尝试新的属性等等，当你准备好保存时。
- en: then go into your text editor and type out or copy paste those，particular attributes。let
    me show you a few final examples here to let me go ahead and go into ah size dot。Here's
    some sample Latin text in an initial font size。but I'm using a little drop down
    menu that you see commonly on eight Web forms。
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 然后进入你的文本编辑器，输入或复制粘贴那些特定属性。让我在这里给你展示几个最终示例，接下来我们进入 ah size dot。这里有一些初始字体大小的样本拉丁文本。但我使用的是你在许多Web表单上常见的小下拉菜单。
- en: Let me make the text larger。Let me make it extra extra large。This is just using
    JavaScript。listening for change events to this drop down menu and correspondingly。changing
    the styles size off that particular paragraph of。Let me do this other thing back
    in my day when I learned html html。We're up to five now。
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: 让我把文本放大。让我把它放得更大更大。这只是使用JavaScript。监听这个下拉菜单的变化事件，并相应地。改变该特定段落的样式大小。让我回到我学习HTML的那段时间。我们现在已经到了五个。
- en: There was literally in HTML，tag called Blink that would literally do this。My
    first home page probably greeted visitors would like。Welcome to my Web page in
    this hideous。hideous blinking aesthetic。we could do the same thing and let me
    go open and let me go ahead and open。Inspect here and let me move this up here
    and zoom in notice what's happening。
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 在HTML中确实有一个标签叫做Blink，它真的会这样做。我的第一个主页可能会以这样的方式迎接访问者。欢迎来到我的网页，采用这种可怕的。可怕的闪烁美学。我们可以做同样的事情，让我打开并去查看。检查一下，看看发生了什么。
- en: I wrote some JavaScript code in this file called blink dot html。that every half
    a second or second is changing the style of my body，to be visible or hidden。![](img/ada90f1c39922f956d79e8b087ef9d26_424.png)
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这个名为blink dot html的文件中写了一些JavaScript代码。每半秒或一秒钟就会改变我的主体样式，使其可见或隐藏。![](img/ada90f1c39922f956d79e8b087ef9d26_424.png)
- en: visible or hidden。And if you want a little teaser of that。if I actually look
    at that html in blink HTML。![](img/ada90f1c39922f956d79e8b087ef9d26_426.png)
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 可见或隐藏。如果你想提前了解一下，如果我查看blink HTML中的那个html。![](img/ada90f1c39922f956d79e8b087ef9d26_426.png)
- en: that's because in Java script，there's this cool function called window dot set
    Interval that lets you call a function。every number of milliseconds。![](img/ada90f1c39922f956d79e8b087ef9d26_428.png)
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为在JavaScript中，有一个很酷的函数叫做window dot set Interval，它可以让你每隔一定毫秒调用一次函数。![](img/ada90f1c39922f956d79e8b087ef9d26_428.png)
- en: So if I were to change this to be even faster，let's do it every 100 milliseconds
    and save and reload。You'll see now it's flashing even faster so you can do things
    again and again。by registering these kinds of intervals in code，even cooler。Let
    me go ahead and grab another u R l here。And just because of my browser settings。
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我把这个改得更快，让我们每100毫秒做一次，保存并重新加载。你会看到现在闪烁得更快了，所以你可以不断重复这些操作。通过在代码中注册这种间隔，甚至更酷。让我去抓另一个u
    R l。只是因为我的浏览器设置。
- en: I'm gonna go ahead and open this one in safari instead of chrome。this is called
    geo location dot html。we've written some code in advance that's actually gonna
    try to figure out where in the world you are and notice for privacy。We can't just
    presume to figure out where you all are。We're instead going to prompt you like
    this。The browser is going to do that for you。I'm gonna go ahead and allow this
    query and voila。
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定在Safari中打开这个，而不是在Chrome中。这是名为geo location dot html的文件。我们提前写了一些代码，实际上会尝试找出你在世界上的位置，请注意出于隐私原因。我们不能假设找出你们的位置。我们会像这样提示你。浏览器会为你完成这件事。我将允许这个查询，瞧。
- en: This this file geo location。Html just prints out your GPS coordinates。Not particularly
    interesting。![](img/ada90f1c39922f956d79e8b087ef9d26_430.png)
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件geo location。Html只是打印出你的GPS坐标。并不是特别有趣。![](img/ada90f1c39922f956d79e8b087ef9d26_430.png)
- en: But if I goto like Google Maps，I can literally search for those GPS coordinates。And
    if you're curious as to where I am right now，But if I go into satellite mode and
    zoom in。we are indeed roughly in that part of the American Repertory Theater on
    Brattle，Street in Cambridge。Use a so pretty creepy that using Java script，you
    can even figure out where your users are creepy at first glance。
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果我去Google Maps，我实际上可以搜索那些GPS坐标。如果你想知道我现在在哪里，但如果我进入卫星模式并放大。我们确实大致在剑桥Brattle街的美国剧院附近。使用JavaScript真是挺吓人的，你甚至可以知道你的用户在哪里，乍一看有点可怕。
- en: But if you've used uber eats or grubhub or merely any website like for the weather。that
    asks you for your location，how is it doing that？
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果你使用过Uber Eats或Grubhub，或者任何一个像天气网站那样的网站。问你的位置，那它是怎么做到的？
- en: the programmer of those websites has written some code，as we did in Geo location
    HTML。that has a line of code like this。Navigator dot geo location。Get current
    position。And then it's a function built into your browser that，will tell you the
    users latitude and longitude。![](img/ada90f1c39922f956d79e8b087ef9d26_432.png)
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: 网站的程序员编写了一些代码，正如我们在地理定位 HTML 中所做的，代码中有这样一行。Navigator.geoLocation.getCurrentPosition。然后这是内置于你的浏览器中的一个函数，可以告诉你用户的纬度和经度。![](img/ada90f1c39922f956d79e8b087ef9d26_432.png)
- en: just some built in functionality to the browser and then one final example here
    in Java。It turns out that you can implement auto complete in an even fancier way。we
    converted problems at five spellchecker 140，000 plus words。The text file called
    large into a corresponding Java script file called large dot Js。
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览器内置了一些功能，然后这里有一个最后的 Java 示例。结果证明，你可以以更复杂的方式实现自动完成。我们转换了五个拼写检查器，包含超过140,000个单词。名为
    large 的文本文件被转换成相应的 JavaScript 文件 large.js。
- en: and we wrote Auto complete here。So let me go ahead and type in a and I will
    instantaneously see an a Nordic list of。all of the words that start with a Let
    me type in AP Now it's changing toe all the words that start。with a p a p p l
    e。This is how auto complete works using Java script。What am I listening for？
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里编写了自动完成。让我输入 a，我将瞬间看到一个以 a 开头的单词列表。让我输入 AP，现在它正在改变为以 p 开头的所有单词：a p p l
    e。这就是如何使用 JavaScript 实现自动完成的。我要监听什么？
- en: if I go back to this laundry list of events from a moment ago。![](img/ada90f1c39922f956d79e8b087ef9d26_434.png)
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我回到刚才提到的事件清单。![](img/ada90f1c39922f956d79e8b087ef9d26_434.png)
- en: I bet I'm listening for one of these key presses or key up events。So listening
    for the user hitting their key。And as soon as they type their key。I'm using probably
    that dot value syntax to get the value of whatever the human typed in。![](img/ada90f1c39922f956d79e8b087ef9d26_436.png)
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: 我敢打赌我正在监听这些按键或抬起键事件之一。所以在监听用户按下的键。一旦他们输入他们的键，我可能在使用 dot value 语法获取人类输入的值。![](img/ada90f1c39922f956d79e8b087ef9d26_436.png)
- en: And then I'm displaying it in the Web page and then dynamically adding。or removing
    L I elements from the Web page dynamically。we've not seen hands on how to do this。But
    the building blocks are there。You can change the Web pages style。You can add HTML
    to the page。and you can listen for these kinds of events。Now it turns out that
    it is not on Lee Java script that could make use of。
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我在网页中显示它，并动态添加或移除网页中的 L I 元素。我们还没有实际看到如何实现这一点，但构建块已在这里。你可以改变网页的样式，向页面添加 HTML，并可以监听这些事件。现在，结果证明，不仅仅是
    JavaScript 可以利用这些。
- en: girls in this way，and we thought we'd do one final demo here，this one calling
    back into play Python。whereby I'm going to do a little something with our Jacko
    lantern Here。let me bring him over closer to me and you'll see that he's got a。![](img/ada90f1c39922f956d79e8b087ef9d26_438.png)
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式进行演示，我们认为我们会在这里做最后一个演示，这个演示回归到 Python。我将在这里与我们的南瓜灯做一点小事情。让我把它带得更近一些，你会看到它有一个。![](img/ada90f1c39922f956d79e8b087ef9d26_438.png)
- en: light bulb tucked inside of him。And let's go ahead and face him forward。It turns
    out that the light bulb inside of this Jack O lantern here，is actually one of
    these fancier。modern led light bulbs that has an Internet connection。It's an Internet
    of things device and coyote device。
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: 藏在他里面的灯泡。我们继续把它面朝前。结果证明，这个南瓜灯里的灯泡实际上是这些更复杂的现代 LED 灯泡之一，具备互联网连接。它是物联网设备和智能设备。
- en: and it happens to be talking to this little wireless device here that I have
    on the lectern。so that the light bulb is literally communicating wirelessly to
    that device on the lectern。is plugged into Harvard's network。is plugged into Harvard's
    network。And so we have the ability Now it would seem to write code on my Mac or
    your。
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 它恰好在与我讲台上这个小无线设备进行通信。因此，灯泡实际上是通过无线方式与讲台上的设备通信。它接入了哈佛的网络。现在看起来我们有能力在我的 Mac 或你的设备上编写代码。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_440.png)'
  id: totrans-577
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_440.png)'
- en: PC that somehow talks to this light bulb by using our local Internet，to connect
    those two devices。And it turns out that devices like this very often have a P
    I s application。![](img/ada90f1c39922f956d79e8b087ef9d26_442.png)
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: PC 通过使用本地互联网与这个灯泡进行通信，从而连接这两个设备。结果证明，这样的设备通常会有一个应用程序接口（API）。![](img/ada90f1c39922f956d79e8b087ef9d26_442.png)
- en: programming interfaces that for simplicity are actually based on girls。There's
    simple u R l so that if I send a certain http request to this light bulb。it will
    turn itself off or on or do something else。And if I send another request。it will
    do that thing as well。Now that's not how all a piece work，but indeed。
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
  zh: 编程接口出于简单起见实际上是基于女孩的。有一个简单的URL，因此如果我向这个灯泡发送某个HTTP请求，它将自行打开或关闭或做其他事情。如果我发送另一个请求，它也会执行那个操作。现在并不是所有的东西都是这样的，但确实如此。
- en: just because we're transitioning now the Web programming doesn't mean we're
    leaving Python behind。next week will bring Python back all the more and sequel。Combine
    all five of these technologies html。Python and Sequel and tie them all together
    into a full fledged Web application。let me go ahead and create a program here
    called Light dot Pie in。
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅因为我们现在正在转向网络编程，并不意味着我们会抛弃Python。下周将更加强调Python和Sequel。将这五种技术结合起来：HTML、Python和Sequel，将它们全部整合成一个完整的Web应用程序。让我在这里创建一个名为Light
    dot Pie的程序。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_444.png)'
  id: totrans-581
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_444.png)'
- en: so that I'm not in the cloud。I'm actually on Harvard's local network here。let
    me import a couple of libraries。![](img/ada90f1c39922f956d79e8b087ef9d26_446.png)
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我就不在云端。实际上，我在哈佛的本地网络中。让我导入几个库。![](img/ada90f1c39922f956d79e8b087ef9d26_446.png)
- en: import OS and import requests。We've not seen this before。but there's a library
    that's available with python called requests。which allows you to make with Python。HTTP
    requests just like a browser。Let me go ahead and declare ah，variable called user
    name that's going to be the result of just getting what's called an environment。
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: 导入OS和导入requests。我们以前没有见过这个，但有一个可用的Python库叫做requests，它允许你像浏览器一样进行HTTP请求。让我声明一个变量，叫做user
    name，它将是获取名为环境变量的结果。
- en: variable called user name。So for privacy sake，I don't wanna type my own user
    name and password for Harvard's network into this program。So there exists what
    are called environment variables on Macs and PCs and Lennox computers。that you
    can store values sort of secretly elsewhere。And using Python's OS Get n function。you
    can load those into the computers memories somewhat privately。
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: 这个环境变量叫做user name。为了保护隐私，我不想在这个程序中输入我在哈佛网络上的用户名和密码。所以在Mac、PC和Linux电脑上存在一些被称为环境变量的东西，你可以在其他地方秘密存储值。使用Python的OS
    Get n函数，你可以在计算机内存中以某种私密的方式加载这些值。
- en: Let me go ahead and get the I p address of the light bulb by doing os dot get
    end quote unquote i p。let me go ahead and constructed u R l by having read the
    documentation。a colleague constructed you or else that looks like this。Colon slash
    slash then the i p address off the lightbulb。
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: 让我通过执行os.dot get“ip”来获取灯泡的IP地址。让我通过阅读文档来构造URL，一位同事构造的URL看起来像这样：冒号斜杠斜杠然后是灯泡的IP地址。
- en: slash ap I slash my user name personally in case different people want to control
    the light。bulb slash lights slash one slash state。So this is a weird looking u
    R l。![](img/ada90f1c39922f956d79e8b087ef9d26_448.png)
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
  zh: 斜杠api斜杠我的用户名，个人来说，以防不同的人想控制灯泡。斜杠lights斜杠one斜杠state。所以这是一个奇怪的URL。![](img/ada90f1c39922f956d79e8b087ef9d26_448.png)
- en: But it's essentially gonna be HDP colon slash slash whatever the numeric I P
    addresses off this light。bulb slash i p slash my user name slash lights slash
    one slash。state so I could literally copy and paste that into a browser if I knew
    what those values were。But I'm gonna do this programmatically。I'm gonna go ahead
    and write requests。
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 但本质上将是http://无论这个灯泡的数值IP地址是什么/ ip /我的用户名/ lights / one / state，所以如果我知道那些值，我可以直接复制并粘贴到浏览器中。但我将通过编程来完成这一点。我要开始写请求。
- en: and I could say Get if I want to send a get request。which is not what I want
    because I don't want to get the value of the light bulb。I don't want to post the
    value of the light bulb。It turns out there's a third http verb that we've not
    seen before。but it's often used for a piece called Put。But in code it's written
    in lower case dot put。
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以说Get，如果我想发送一个GET请求，但这不是我想要的，因为我不想获取灯泡的值。我也不想发布灯泡的值。结果有一个我们之前没有见过的第三个HTTP动词，但它通常用于称为Put的操作。但在代码中它是用小写字母写的.put。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_450.png)'
  id: totrans-589
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_450.png)'
- en: So this is going to send that it's going to send a message from my Mac to this
    light bulb。So let me go ahead and put to this u R l The following python。![](img/ada90f1c39922f956d79e8b087ef9d26_452.png)
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这将发送消息，从我的Mac到这盏灯泡。让我来把下面的Python代码放到这个URL里。![](img/ada90f1c39922f956d79e8b087ef9d26_452.png)
- en: I'm gonna go ahead and put a value of quote unquote on to the python，Boolean
    value of false。Now what is Jason？Jason stands for JavaScript object notation。which
    is just a conventional way of sending textual messages across the Internet so
    we'll。this is just sending to the lightbulb a dictionary with Chazz AKI of，On
    and a value of false。
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: 我将继续为Python赋值，布尔值为false。那么，Jason是什么呢？Jason代表JavaScript对象表示法。这只是通过互联网发送文本消息的一种传统方式，因此我们将发送一个包含Chazz
    AKI的字典，其中“On”的值为false。
- en: '![](img/ada90f1c39922f956d79e8b087ef9d26_454.png)'
  id: totrans-592
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ada90f1c39922f956d79e8b087ef9d26_454.png)'
- en: And if I didn't do anything wrong，let me go ahead and close this file。Run python
    of light dot pie Cross my fingers is always。Now this light bulb doesn't have to
    be 1 ft for me。It could be literally elsewhere on the Internet。so long as I have
    an Internet connection and I have access to that I p address over the。
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我没有做错任何事情，让我关闭这个文件。运行Python的light.py，祈祷一切顺利。这个灯泡不必在我身边，它可以在互联网的任何地方，只要我有网络连接并能访问到那个IP地址。
- en: which I didn't want to do today，lest we have hundreds of people turning the
    light bulb on and off for me。But let me go ahead and change the code a little
    bit。Now let me go ahead and turn it back on and change on。almost the same code。Let
    me go ahead now and run Python of light pie again，on and let's make it a little
    fancier。
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 其实我今天不想这样做，以免有成百上千的人帮我开关灯。但是让我稍微改一下代码。现在让我重新打开它并改变状态，几乎是相同的代码。接下来，我将再次运行Python的light.py，增加点花样。
- en: Let's go ahead and get a little more logical here，doing things a little more
    interestingly than we have thus far。and let's see if we can't bring that blink
    toe life as well。Let me go down here and let's do something infinitely this time。How
    about while true so forever this demo will go on？While true，go ahead and put to
    that oral。
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更有逻辑性一点，让事情变得更有趣。看看我们能否让这个闪烁的效果活过来。让我下来，这次做点无限循环的事情。如何用“while true”让这个演示永远进行呢？在“while
    true”中，将其发送到那个接口。
- en: not just on and off。Let's go ahead and change the brightness to a value of 254
    so really bright。And let's go ahead and change on to true as before。![](img/ada90f1c39922f956d79e8b087ef9d26_456.png)
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅仅是开和关。让我们把亮度改为254，真的很亮。并且像之前一样将“on”改为true。![](img/ada90f1c39922f956d79e8b087ef9d26_456.png)
- en: But then let's go ahead and sleep for a moment，so time dot Sleep for one second
    and then let's go ahead and send another request。after a second to that same oral
    sending in a python dictionary where on，is now false。And then let's go ahead and
    sleep for one second。You might have noticed I need another library。I need to import
    time，which kind of sounds amazing，but it's just the library called time。
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们稍微暂停一下，time.sleep一秒，然后再发送另一个请求。在一秒后，向同一个接口发送一个Python字典，其中“on”现在为false。然后我们再暂停一秒。你可能注意到我需要另一个库。我需要导入时间，这听起来很神奇，但其实只是一个叫做time的库。
- en: I've saved the file，and I'm forever going to send one request，turning it on
    another request。![](img/ada90f1c39922f956d79e8b087ef9d26_458.png)
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经保存了文件，我将永远发送一个请求，将其打开，再发送另一个请求。![](img/ada90f1c39922f956d79e8b087ef9d26_458.png)
- en: And now the climactic finish python of light pie。![](img/ada90f1c39922f956d79e8b087ef9d26_460.png)
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，光控制Python的高潮部分！[](img/ada90f1c39922f956d79e8b087ef9d26_460.png)
- en: All right。Okay。That's it for CS 50。We will see you next time。![](img/ada90f1c39922f956d79e8b087ef9d26_462.png)
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，行。CS 50到此为止。下次再见。![](img/ada90f1c39922f956d79e8b087ef9d26_462.png)
