- en: P22：11-06-triggers-demo-part-2.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P22：11-06-triggers-demo-part-2.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
- en: If you made it through that long first part of the demo of triggers， here we
    are in part。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经完成了演示的第一部分，展示了触发器的内容，我们现在进入第二部分。
- en: '![](img/6cb78d1fae7c69689e799fa280d93b57_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6cb78d1fae7c69689e799fa280d93b57_1.png)'
- en: two。 As a reminder， our introduction video about triggers use the SQL standard，
    but no database。 system actually implements the standard， and most systems deviate
    considerably。 Postgres is the closest and is the most expressive with triggers。
    However。 it has a kind of cumbersome syntax， so we're not using it for our demos。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 两个。作为提醒，我们关于触发器的介绍视频使用了SQL标准，但没有数据库系统完全实现这个标准，大多数系统有很大的偏差。Postgres是最接近的，并且是最具表现力的触发器系统。然而，它的语法比较繁琐，所以我们没有在演示中使用它。
- en: SQLite follows Postgres and is also quite expressive。 My SQL is considerably
    less expressive。 mostly with some limitations it has in how， triggers can interact。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite遵循Postgres，并且也非常灵活。相比之下，MySQL则表现得较为有限，主要体现在触发器的交互上存在一些限制。
- en: '![](img/6cb78d1fae7c69689e799fa280d93b57_3.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6cb78d1fae7c69689e799fa280d93b57_3.png)'
- en: So again， we're using SQLite for our demo， and just a few of the differences
    from the， standard。 it has row level triggers only， no statement level triggers，
    and an immediate， activation semantics。 For each row can be specified in triggers，
    but if it's not there， it's still a row level， trigger。 It doesn't have old table
    or new table since it has immediate activation semantics only。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，作为提醒，我们的演示使用的是SQLite，且与标准有一些差异。它只支持行级触发器，没有语句级触发器，并且具有立即激活的语义。每行都可以在触发器中指定，但如果没有指定，仍然是行级触发器。由于它只有立即激活语义，所以没有old
    table或new table。
- en: and it doesn't have a referencing clause。 The variables old and new are automatically
    bound in every trigger to what would be old。 row and new row if it had a referencing
    clause。 And finally。 the action part of SQLite triggers are SQL statements embedded
    in begin and blocks。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 它没有引用子句。在每个触发器中，变量old和new会自动绑定到如果有引用子句时的old.row和new.row。最后，SQLite触发器的动作部分是嵌入在`begin`和`end`块中的SQL语句。
- en: '![](img/6cb78d1fae7c69689e799fa280d93b57_5.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6cb78d1fae7c69689e799fa280d93b57_5.png)'
- en: Overall， here's the long list of features that are being covered in our two
    part demo。 We covered the first five features in part one， so in part two we'll
    be talking about。 self-triggering triggers。 We'll be talking about triggers that
    have cyclic behavior， conflicts。 that means when， we have multiple triggers triggered
    at the same time。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 总体来说，以下是我们在两部分演示中涵盖的功能清单。第一部分涵盖了前五个功能，在第二部分我们将讨论自触发触发器。我们将讨论具有循环行为的触发器，冲突。这意味着当我们有多个触发器同时触发时。
- en: and finally nested trigger invocations， when the action part of a trigger triggers
    additional triggers。 And finally， we'll also add to the demo a demonstration of
    SQLite's row level immediate， activation。 And again， that doesn't follow the standard。
    It's a bit subtle， but let me review it。 In the SQL standard， all triggers are
    activated at the end of the commands， even if they modify。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最后是嵌套的触发器调用，当触发器的动作部分触发其他触发器时。最后，我们还将向演示中添加SQLite的行级立即激活演示。再次说明，这不符合标准。虽然这有点微妙，但让我来解释一下。根据SQL标准，所有触发器都在命令执行结束时激活，即使它们修改了数据。
- en: multiple rows。 Whereas in SQLite and also in MySQL。 triggers are activated immediately
    after each row level， modification。 The tables that we'll use for this demo are
    very simple because we want to focus specifically。 on trigger behavior， so we'll
    just be using four tables each with a single attribute。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 多行数据。而在SQLite和MySQL中，触发器会在每一行级别的修改后立即激活。我们将在这个演示中使用的表非常简单，因为我们想专注于触发器行为，因此我们只会使用四个表，每个表都有一个属性。
- en: '![](img/6cb78d1fae7c69689e799fa280d93b57_7.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6cb78d1fae7c69689e799fa280d93b57_7.png)'
- en: Let's go to the demo。 Our first trigger is a simple one that demonstrates triggers
    triggering themselves。 It's activated when we have an insertion on T1。 It has
    no condition， and after that insertion。 it inserts an additional row into T1 that
    contains， the value that was inserted plus one。 So let's go ahead and insert a
    row and see what happened。 The first tuple in T1， the one。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来做一个演示。我们的第一个触发器是一个简单的示例，演示触发器如何触发自身。它在我们对T1进行插入时被激活。它没有条件，插入之后，它会向T1中插入一行数据，这行数据包含插入的值加一。所以，让我们插入一行数据，看看会发生什么。T1中的第一个元组，就是那个。
- en: is the tuple that we inserted with our command。 The second tuple， the two。 was
    inserted automatically by the trigger。 However。 we expected additional trigger
    activations to insert additional tuples。 It turns out that SQLite。 as a default，
    doesn't allow a trigger to be activated more than once。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们通过命令插入的元组。第二个元组“2”是由触发器自动插入的。然而，我们预计会有额外的触发器激活，插入更多的元组。事实证明，SQLite 默认情况下不允许在一次触发器处理会话中触发器被激活多次。
- en: in a trigger processing session， presumably to prevent infinite behavior。 But
    if we'd like。 we can toggle a variable in the SQLite session called recursive
    triggers。 If we turn recursive triggers on， then that checking is turned off and
    triggers can be。 activated arbitrarily many times during a trigger processing
    session。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是为了防止无限循环行为。但是，如果我们愿意的话，可以在 SQLite 会话中切换一个变量，叫做递归触发器。如果我们启用递归触发器，那么该检查会被关闭，触发器可以在触发器处理会话中任意次数地激活。
- en: Now with recursive triggers on， this trigger would in fact activate itself indefinitely。
    inserting more and more tuples into T1。 Actually what would happen is eventually
    an error is generated。 but we can modify the trigger， in order to put in a limit。
    Specifically。 we'll add a condition to the trigger that says we'll only perform
    the action。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在启用了递归触发器，这个触发器实际上会无限次地激活自己，不断地将更多元组插入到 T1 中。实际上，最终会发生错误，但是我们可以修改触发器，设置一个限制条件。具体来说，我们会为触发器添加一个条件，表示只有当
    T1 中的元组数少于 10 时，才会执行操作。
- en: when the number of tuples in T1 is less than 10。 So what we expect now is when
    we start by inserting a tuple。 we'll insert 1， 2， 3， 4， 5 and so on。 But when
    the size reaches 10。 the condition will not be satisfied， the action won't be，
    executed and trigger processing stops。 I deleted the two tuples from T1， so now
    let's once again start by inserting a single。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们期望的情况是，当我们开始插入一个元组时，我们会插入 1、2、3、4、5 等等。但当大小达到 10 时，条件将不再满足，操作将不再执行，触发器处理停止。我从
    T1 中删除了两个元组，所以现在我们重新开始，插入一个元组。
- en: '![](img/6cb78d1fae7c69689e799fa280d93b57_9.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6cb78d1fae7c69689e799fa280d93b57_9.png)'
- en: tuple with the value 1 and let's see what happened。 We take a look at table
    T1。 we refresh and we see that indeed 10 tuples were inserted。 the first one we
    inserted all the rest by self-triggering of our single trigger and when it got
    to。 the size of 10， triggering terminated because the condition part of the trigger
    was not satisfied。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看一下表 T1，刷新一下，看到确实插入了 10 个元组，第一个是我们手动插入的，剩下的都是通过我们单一触发器的自我触发插入的，当达到 10 个元组时，触发停止，因为触发器的条件部分没有满足。
- en: Now let's generalize the idea to three triggers that trigger each other in a
    cycle。 The first trigger is going to be activated by inserts on T1 and when there's
    an insert。 on T1 it will insert into table T2 the same tuple except incremented
    by 1。 That will activate trigger R2 which is triggered by insertions on T2。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们将这个概念推广到三个互相触发的触发器。第一个触发器将通过 T1 上的插入操作激活，当 T1 上插入时，它会将相同的元组插入到 T2 表中，只不过值会增加
    1。这将激活触发器 R2，而 R2 是由 T2 上的插入触发的。
- en: When R2 is activated it will likewise insert into table T3， again the value
    that was inserted。 into T2 incremented by 1， then trigger T3 will be activated
    by those insertions onto。 T3 and it will go back and insert back into table T1
    again incrementing the value。 So let's start as usual by inserting into the first
    table the value 1 and let's see what， happened。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当 R2 被激活时，它也会将插入的值增加 1 并插入到 T3 表中，然后触发器 T3 会被激活，插入到 T1 表中，再次将值增加 1。所以，让我们像往常一样，从插入值
    1 开始，看发生了什么。
- en: Now let me mention that before I started this example I turned the recursive
    triggers flag， off。 So here's our original tuple 1 that activated a trigger and
    it inserted 2 into table T2。 we can go ahead and see that。 That in turn activated
    a trigger that inserted a 3 into table T3 and then we go back to table。 T1 and
    the 4 was inserted but because SQLite has as a default the limitation that each。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我提一下，在开始这个示例之前，我关闭了递归触发器标志。所以这是我们的原始元组 1，它激活了触发器并将 2 插入到了 T2 表中。我们可以继续查看。这又激活了一个触发器，将
    3 插入到 T3 表中，然后我们回到 T1 表，插入了 4，但因为 SQLite 默认情况下限制每次触发器处理会话中只能激活一次触发器，
- en: trigger is activated only once in a trigger processing session at that point
    trigger processing。 terminated。 Now we're going to do the same thing that we did
    last time and we're going to turn recursive。 triggers on again using this command
    for our SQLite session and then we're going to modify。 our triggers to put in
    a termination condition。 So we only need to put the termination condition in one
    trigger and we'll put it in the third。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在触发器处理会话中，触发器只会被激活一次，到那时触发器处理就会终止。现在，我们将做与上次相同的操作，重新启用递归触发器，使用此命令启动SQLite会话，然后我们将修改触发器，添加一个终止条件。所以我们只需要在一个触发器中加入终止条件，我们将把它放在第三个触发器中。
- en: trigger and this will allow it to go a little farther。 So the third trigger
    will add a condition that when the size of the first table T1 is。 less than 100
    then the trigger will go ahead and execute its action but when the size of。 T1
    exceeds 100 then it won't and that will break the cycle and trigger processing
    will， terminate。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 第三个触发器将添加一个条件，当第一个表T1的大小小于100时，触发器会继续执行其操作，但当T1的大小超过100时，它就不会执行，这将打破循环，触发器处理将终止。
- en: As always let's start things off by inserting the tuple 1 into table T1。 So
    when we look at table T1 we see our original insertion this one inserted a 2 into
    table。 T2 which then caused a 3 to be inserted in table T3 and then back to a
    4 being inserted。 in table T1 and that triggered 5 being inserted into T2 and
    so on。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 一如既往，让我们先通过插入元组1到表T1来开始操作。当我们查看表T1时，我们看到原始插入项，接着它将2插入到表T2中，然后导致3被插入到表T3中，再回到表T1插入4，进而触发5被插入到T2中，以此类推。
- en: So we can see the trigger behavior now we did put in a limitation so when we
    go look at。 the size of table T1 we'll see that it got to exactly 100 and then
    when the size of T1。 exceeded 100 the third triggers condition was not satisfied
    and that caused its action。 to not be executed which brought everything to a halt。
    Okay that's enough of cycles。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们现在可以看到触发器的行为，我们确实设置了一个限制条件，因此当我们查看表T1的大小时，我们会看到它的大小正好是100，当T1的大小超过100时，第三个触发器的条件不满足，这导致它的操作没有执行，从而使得整个过程停了下来。好吧，这就是关于循环的部分。
- en: Now let's take a look at a situation where we have two triggers activated at
    exactly the。 same time and they perform updates to exactly the same portion of
    the database。 Both of our triggers are activated by insertions into table T1 and
    we're going to again start。 trigger processing by inserting one tuple with the
    value 1。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看一个情况，假设我们有两个触发器在完全相同的时间被激活，并且它们对数据库的相同部分进行更新。我们的两个触发器都是通过向表T1插入数据来激活的，我们将通过插入一个值为1的元组来启动触发器处理。
- en: The first trigger has no condition it updates the contents of T1 to set all
    the values to， 2。 The second trigger checks to see if there exists a 2 in table
    T1 and if so it sets the values， to 3。 So these two triggers are designed specifically
    so we can see which one goes first。 If trigger R1 goes first it will set the value
    to 2 the condition part of R2 will be。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个触发器没有条件，它会将T1中的所有值更新为2。第二个触发器检查表T1中是否存在值为2的项，如果有，它就会将这些值设置为3。所以这两个触发器的设计特别是为了让我们看到哪个会先执行。如果触发器R1先执行，它会将值设置为2，而R2的条件部分将会。
- en: true and it will then in turn set the value to 3。 However if trigger R2 goes
    first it will not find a 2 in table T1 so its action will not。 be executed and
    will then trigger R1 will go next and it will set the value to 2。 Okay so let's
    go ahead and do our insertion with these two triggers defined and see what， happens。
    We insert the value we take a look at T1 and we discover that we have the value
    2。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 触发器R1会先激活，并且会将值设置为3。然而，如果触发器R2先执行，它将不会在表T1中找到2，因此它的操作将不会执行，然后触发器R1会接着执行，并将值设置为2。好吧，接下来我们按照定义的这两个触发器进行插入操作，看看会发生什么。我们插入了值后，查看T1，发现我们得到了值2。
- en: So what does that tell us？ That actually tells us that trigger R2 went first。
    We performed our insertion it looked to see if there was a 2 in the table there
    wasn't。 because it was just a 1 it didn't execute its action then trigger R1 went
    and it modified。 the value to be 2。 So that's interesting the second trigger went
    first。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这告诉我们什么呢？实际上，这告诉我们触发器R2先执行了。我们进行了插入，它查看表中是否有2，但由于表中只有1，所以它没有执行其操作，然后触发器R1执行并将值修改为2。所以这很有趣，第二个触发器先执行了。
- en: So as an experiment let's try reversing the order in which the triggers are
    defined。 We'll create trigger R2 first and R1 second。 I've deleted a tuple that
    was in T1 so once again we'll insert a T1 to get 3 things started。 we go take
    a look and now we see indeed that we have the value 3。 Going back to look at our
    triggers the value 3 means that trigger R1 went first it set the。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 作为实验，我们试着反转触发器定义的顺序。我们将首先创建触发器R2，然后创建触发器R1。我已经删除了T1中的一个元组，所以我们再次插入一个T1，以便启动三件事。我们来查看一下，现在我们确实看到了值3。回过头来看我们的触发器，值3意味着触发器R1先执行，它将值设为2，这使得触发器R2的条件成立，然后它将值设为3。所以有趣的是，在SQLite中，当触发器同时激活时，似乎是第二个创建的触发器先执行。
- en: value to 2 that made trigger R2's condition true and then it set the value to
    3。 So interestingly in SQLite when you have triggers that are activated at the
    same time。 it appears that the trigger that was created second is the one that's
    going to go first。 Now let's experiment with nested invocation of triggers。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '现在让我们实验一下触发器的嵌套调用。 '
- en: We make things exciting this time I'm going to start by inserting a 0 into table
    T1 instead， of a 1。 And we're going to be using all four of our tables T1 through
    T4 with 3 triggers。 The first trigger is going to be activated by the insertion
    into T1 and it will simply。 insert a tuple 1 into table T2 and a tuple 1 into
    table T3。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这次我们来点刺激的，我将从插入一个0到表T1开始，而不是1。我们将使用所有四个表T1到T4，并且有三个触发器。第一个触发器将在T1的插入操作后被激活，它将简单地在表T2和表T3中各插入一个元组1。
- en: What we're going to see and what we're specifically experimenting with is that
    the first insertion。 will in fact activate triggers before the second insertion
    is performed。 The first insertion into T2 will activate our second trigger， inserts
    on T2 and this trigger。 will in turn insert into tables T3 and T4 and it will
    insert the values too。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要看到并具体实验的是，第一个插入操作实际上会在第二个插入操作执行之前激活触发器。第一个插入到T2会激活我们的第二个触发器，在T2上插入数据，这个触发器将会进一步插入到表T3和T4中，并且也会插入相应的值。
- en: So this will occur in a somewhat nested fashion and in fact in this action we'll
    see the first。 command will be executed and it will in a nested fashion activate
    our trigger R3 which。 will insert simply into table T4 the value 3。 So let's get
    started and again as I mentioned for excitement we'll be inserting a 0 this。 time
    and let's go see what happened to our tables。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这将以某种嵌套的方式发生，事实上，在这个操作中，我们将看到第一个命令会被执行，并且它将在嵌套的方式下激活我们的触发器R3，触发器R3将简单地将值3插入到表T4中。那么，让我们开始吧，正如我之前提到的，为了让它更刺激，我们这次将插入一个0，然后我们来看看我们的表发生了什么。
- en: So table T1 has just the 0 that we inserted as expected。 Table T2 has just a
    single tuple with the value 1 which is exactly what we expected。 This trigger
    is only activated once。 Now let's take a look at table T3。 Table T3 has a 2 and
    a 1 and they're in that order and what that tells us is that this。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以表T1只包含我们预期插入的0。表T2只有一个元组，值为1，正是我们预期的内容。这个触发器只会被激活一次。现在让我们来看一下表T3。表T3有2和1，它们的顺序是这样的，这告诉我们。
- en: insertion here activated by trigger R2 happened before this insertion here from
    trigger R1 and。 that's what demonstrates the nested invocation of the triggers。
    And just to look at the last table we'll see something similar in T4 we again
    can see the。 nested invocation because the 2 occurs after the first insertion
    of 3 and then we have the。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的插入操作由触发器R2激活，它发生在由触发器R1激活的插入之前，这就演示了触发器的嵌套调用。为了查看最后一个表，我们会在T4中看到类似的情况，我们再次看到嵌套调用，因为2出现在第一次插入3之后，然后我们有了最后一次的插入3。
- en: final insertion of 3。 So this is a bit complicated you might want to look at
    the video again or even better。 yet download the triggers and try them yourself。
    Our last example is designed specifically to demonstrate the immediate activation
    of the。 row level triggers implemented in SQLite。 Specifically I've populated
    table T1 already with 4 tuples with the value 1 and what my。 trigger is going
    to do when I insert additional values into T1 is insert into table T2 the。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这个有点复杂，您可能想重新看一下视频，或者更好的是，下载触发器并自己尝试一下。我们的最后一个例子是专门设计来展示在SQLite中立即激活行级触发器的。具体来说，我已经在表T1中填充了4个值为1的元组，当我向T1中插入更多值时，我的触发器将会插入到表T2。
- en: average value in T1。 What I'm going to do is insert a batch of tuples into T1。
    In fact I'm going to insert 4 tuples with the value 2 so when I'm done I'll have
    4。 tuples in table T1。 If triggers followed the SQL semantics of being activated
    the very end of the entire。 statement so the entire batch of inserts then the
    average values that we insert into T2。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 表T1中的平均值。我将插入一批元组到T1。实际上，我将插入4个值为2的元组，这样当我完成时，表T1中将有4个元组。如果触发器遵循SQL语义，在整个语句的最后激活，即整个批量插入完成后，那么我们插入到T2的平均值将会是...
- en: would reflect the average of the 4 ones and the 4 tuples so it would be the
    value 1。5。 However what SQLite does is activates the trigger after each tuple
    level insertion so。 as we insert the 2s one at a time an average will be inserted
    into table T2 and the first。 average will reflect having 1 2 in table T1 the second
    will reflect having 2 tuples in table。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 它将反映4个值和4个元组的平均值，所以结果应该是1.5。然而，SQLite的做法是在每次插入元组后激活触发器。因此，当我们一次插入一个2时，平均值会被插入到表T2中，第一个平均值反映的是表T1中有一个2，第二个平均值则反映的是表中有两个元组。
- en: T1 and so on。 I think you'll get the idea when I show what happens。 So here's
    the command I'm going to use to insert the 4 tuples into table T1。 I'm going to
    insert into T1 the result of the sub query which takes every value and adds， 1。
    So let's go ahead and do it and let's take a look at table T1 and we see now that
    indeed。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: T1等。 当我展示发生了什么时，我想你会明白的。所以这是我将用来将4个元组插入表T1的命令。我将插入一个子查询的结果，该查询将每个值加1。现在我们继续执行，看看表T1，我们现在看到确实如此。
- en: we have the 4 ones and the 4 tuples。 So the real story is told when we look
    at table T2 and here we see indeed that we do not get。 4 averages that are 1。5
    which is what we would have gotten with the SQL standard semantics。 Instead we
    saw that for each 2 that was inserted we inserted the average into table T2 reflecting。
    the number of tuples that were in the table so far。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有4个1和4个元组。所以，真正的故事是在查看表T2时讲述的，在这里我们确实看到，结果并不是我们在SQL标准语义下会得到的4个1.5的平均值。相反，我们看到每插入一个2，就会将一个平均值插入到T2，反映到目前为止表中的元组数量。
- en: Again fairly complicated you might want to watch this example a second time
    or download。 it and try it at home。 So that concludes a rather long coverage of
    triggers。 We've seen that it can actually be quite complicated when triggers interact
    with updates on the。 database when they perform updates and especially when they
    interact with each other。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这相当复杂，你可能需要再看一遍这个示例，或者下载下来自己尝试。所以，这就结束了关于触发器的相当长的讲解。我们已经看到，当触发器与数据库上的更新交互时，尤其是它们相互作用时，事情实际上可能变得相当复杂。
- en: Now the reality is that a lot of times that triggers are used in applications
    is for very。 simple purposes。 We might have a couple of triggers that are enforcing
    simple constraints。 They don't interact with each other and they don't interact
    with the database in complicated， ways。 And I've shown a few of those triggers
    early on。 However I did want to make a point that when triggers are used for more
    complicated purposes。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，触发器在应用程序中的许多使用场景是为了非常简单的目的。我们可能有几个触发器用于强制执行简单的约束。它们不会彼此交互，也不会以复杂的方式与数据库交互。我之前已经展示过一些这样的触发器。然而，我想强调的是，当触发器用于更复杂的目的时...
- en: when they interact with each other and with the database in complicated ways
    it is important。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当它们彼此以及与数据库的交互变得复杂时，这是非常重要的。
- en: '![](img/6cb78d1fae7c69689e799fa280d93b57_11.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6cb78d1fae7c69689e799fa280d93b57_11.png)'
- en: to be very careful to fully understand how they behave。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 必须非常小心，完全理解它们是如何工作的。
