- en: 5.5   Data Compression
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.5   数据压缩
- en: 原文：[https://algs4.cs.princeton.edu/55compression](https://algs4.cs.princeton.edu/55compression)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://algs4.cs.princeton.edu/55compression](https://algs4.cs.princeton.edu/55compression)
- en: This section under major construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节正在大规模施工中。
- en: 'Data compression: reduces the size of a file to save *space* when storing it
    and to save *time* when transmitting it. Moore''s law: # transistor on a chip
    doubles every 18-24 months. Parkinson''s law: data expands to fill available space.
    Text, images, sound, video, etc. Wikipedia provides [public dumps](http://meta.wikimedia.org/wiki/Data_dumps)
    of all content for academic research and republishing. Uses bzip and SevenZip''s
    LZMA. Can take a week to compress of 300GB of data.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 数据压缩：将文件大小缩小以节省*空间*存储和在传输时节省*时间*。摩尔定律：芯片上的晶体管数量每 18-24 个月翻一番。帕金森定律：数据会扩张以填满可用空间。文本、图像、声音、视频等。维基百科提供[公共转储](http://meta.wikimedia.org/wiki/Data_dumps)以供学术研究和再发布。使用
    bzip 和 SevenZip 的 LZMA。对 300GB 数据进行压缩可能需要一周的时间。
- en: Ancient ideas.
  id: totrans-4
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 古代思想。
- en: Morse code, decimal number system, natural language, rotary phones (lower numbers
    were quicker to dial, so New York was 212 and Chicago 312).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 摩尔斯电码，十进制数系统，自然语言，旋转电话（较低的号码拨号速度更快，所以纽约是 212，芝加哥是 312）。
- en: Binary input and output streams.
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 二进制输入和输出流。
- en: We use [BinaryStdIn.java](BinaryStdIn.java.html), [BinaryStdOut.java](BinaryStdOut.java.html),
    [BinaryDump.java](BinaryDump.java.html), [HexDump.java](HexDump.java.html), and
    [PictureDump.java](PictureDump.java.html).
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 [BinaryStdIn.java](BinaryStdIn.java.html)、[BinaryStdOut.java](BinaryStdOut.java.html)、[BinaryDump.java](BinaryDump.java.html)、[HexDump.java](HexDump.java.html)
    和 [PictureDump.java](PictureDump.java.html)。
- en: Fixed length codes.
  id: totrans-8
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 固定长度编码。
- en: Need ceil(lg R) bits to specify one of R symbols. [Genome.java](Genome.java.html).
    Uses [Alphabet.java](Alphabet.java.html).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 需要 ceil(lg R) 位来指定 R 个符号中的一个。[Genome.java](Genome.java.html)。使用 [Alphabet.java](Alphabet.java.html)。
- en: Run length encoding.
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行长度编码。
- en: '[RunLength.java](RunLength.java.html).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '[RunLength.java](RunLength.java.html)。'
- en: Variable-length codes.
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 变长编码。
- en: 'Desire unique decodable codes. One way to achieve this is to append a special
    stop symbol to each codeword. Better approach: prefix-free codes: no string is
    a prefix of another. For example, { 01, 10, 0010, 1111 } is prefix free, but {
    01, 10, 0010, 1010 } is not because 10 is a prefix of 1010.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 希望有唯一可解码的编码。实现这一目标的一种方法是向每个码字附加一个特殊的停止符号。更好的方法是前缀无码：没有字符串是另一个字符串的前缀。例如，{ 01,
    10, 0010, 1111 } 是前缀无码，但 { 01, 10, 0010, 1010 } 不是，因为 10 是 1010 的前缀。
- en: Give fax machine example.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 给出传真机的例子。
- en: Huffman codes.
  id: totrans-15
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Huffman 编码。
- en: Specific way to construct optimal prefix-free codes. Invented by David Huffman
    while a student at MIT in 1950. [Huffman.java](Huffman.java.html) implements Huffman
    algorithm.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 构建最佳前缀无码的特定方式。由 David Huffman 在 1950 年在 MIT 时发明。[Huffman.java](Huffman.java.html)
    实现了 Huffman 算法。
- en: '**Property A.** No prefix free code uses fewer bits.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**属性 A.** 没有前缀无码使用更少的比特。'
- en: LZW compression.
  id: totrans-18
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: LZW 压缩。
- en: Using prefix match code from [TST.java](TST.java.html), [LZW.java](LZW.java.html)
    implements LZW compression.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 [TST.java](TST.java.html) 中的前缀匹配代码，[LZW.java](LZW.java.html) 实现了 LZW 压缩。
- en: 'Real world: Pkzip = LZW + Shannon-Fano, GIF, TIFF, V.42bis modem, Unix compress.
    Practical issues:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现实世界：Pkzip = LZW + Shannon-Fano，GIF，TIFF，V.42bis 调制解调器，Unix 压缩。实际问题：
- en: Encode everything in binary.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将所有内容编码为二进制。
- en: Limit the number of elements in the symbol table (GIF = throw away and start
    over, Unix compress = throw away when not effective).
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制符号表中元素的数量（GIF = 丢弃并重新开始，Unix 压缩 = 不起作用时丢弃）。
- en: Initially dictionary has 512 elements (with 256 elements filled in for ASCII
    characters), so we transmit 9 bits per integer. When it fills up, we double it
    to 1024 and start transmitting 10 bits per integer.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最初字典有 512 个元素（其中填充了 256 个 ASCII 字符），因此我们每个整数传输 9 位。当填满时，我们将其扩展到 1024 并开始每个整数传输
    10 位。
- en: Only traverse the tree once (might break our string table abstraction).
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 只遍历树一次（可能会破坏我们的字符串表抽象）。
- en: 'Practical issues: limit the number of elements in the symbol table.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 实际问题：限制符号表中元素的数量。
- en: Summary.
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 总结。
- en: 'Huffman: variable length code for fixed length symbols. LZW: fixed length code
    for variable length strings.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Huffman：固定长度符号的变长编码。LZW：变长字符串的固定长度编码。
- en: Universal compression algorithm.
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用压缩算法。
- en: 'Impossible to compress all files (proof by simple counting argument). Intuitive
    argument: compress life work of Shakespeare, then compress result, then compress
    result again. If each file strictly shrinks, eventually you will be left with
    one bit.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 不可能压缩所有文件（通过简单计数论证）。直观论证：压缩莎士比亚的生平作品，然后压缩结果，再次压缩结果。如果每个文件都严格缩小，最终将只剩下一个比特。
- en: References.
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 参考文献。
- en: Guy Blelloch of CMU has an excellent chapter on [data compression](http://www.cs.cmu.edu/afs/cs/project/pscico-guyb/realworld/www/compression.pdf).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 卡内基梅隆大学的 Guy Blelloch 在 [数据压缩](http://www.cs.cmu.edu/afs/cs/project/pscico-guyb/realworld/www/compression.pdf)
    方面有一章非常出色。
- en: Error correction / detection.
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误校正/检测。
- en: Suppose channel for sending information is noisy and each bit gets flipped with
    probability p. Send each bit 3 times; to decode take the majority of the 3 bits.
    Decoded bit is correct with probability 3p^2 - 2p^3\. This is less than p (if
    p < 1/2). Can reduce probability of decoding the bit incorrectly by sending each
    bit k times, but this is wasteful in terms of the transmission rate.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 假设用于发送信息的信道存在噪声，每个比特以概率 p 翻转。发送每个比特 3 次；解码时取 3 个比特的大多数。解码比特的正确概率为 3p^2 - 2p^3。这小于
    p（如果 p < 1/2）。可以通过多次发送每个比特来减少解码比特错误的概率，但这在传输速率方面是浪费的。
- en: Reed-Solomon codes.
  id: totrans-34
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Reed-Solomon 编码。
- en: '[Reference](http://www.cs.cornell.edu/Courses/cs722/2000sp/ReedSolomon.pdf).
    Used in mass storage systems (CDs and DVDs) and satellite transmissions (Voyager
    space probe, Mars Pathfinder) when the errors are bursty. Think of data to send
    as a degree d polynomial. Only need d+1 points to uniquely specify the polynomial.
    Send more points to enable error correction / detection. If code we want to send
    is a0, a1, ..., am-1 (each elements over finite field K), think of it as the polynomial
    p(x) = a0 + a1x + ... + am-1 x^m-1. Send p(0), p(b), p(b^2), ..., where b is a
    generator of multiplicative cyclic group over K.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '[参考资料](http://www.cs.cornell.edu/Courses/cs722/2000sp/ReedSolomon.pdf)。用于大容量存储系统（CD和DVD）和卫星传输（旅行者号探测器，火星探路者）当错误是突发性的时候。将要发送的数据视为一个度为d的多项式。只需要d+1个点来唯一指定多项式。发送更多点以实现纠错/检测错误。如果我们要发送的编码是a0，a1，...，am-1（每个元素在有限域K上），将其视为多项式p(x)
    = a0 + a1x + ... + am-1 x^m-1。发送p(0)，p(b)，p(b^2)，...，其中b是K上的乘法循环群的生成元。'
- en: Shannon's coding theorem.
  id: totrans-36
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 香农编码定理。
- en: Roughly speaking, if channel capacity is C, then we can send bits at a rate
    slightly less than C with an encoding scheme that will reduce probability of a
    decoding error to any desired level. Proof is nonconstructive.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 大致来说，如果信道容量为C，则我们可以以略低于C的速率发送比特，使用编码方案将解码错误的概率降低到任意所需水平。证明是非构造性的。
- en: Q+A
  id: totrans-38
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 问答
- en: Exercises
  id: totrans-39
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Which of the following codes are prefix free? Uniquely decodable? For those
    that are uniquely decodable, give the encoding of 1000000000000.
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪些编码是前缀自由的？唯一可解码的？对于那些唯一可解码的编码，给出编码为1000000000000的编码。
- en: '[PRE0]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Given an example of a uniquely-decodable code that is not prefix free.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出一个不是前缀自由的唯一可解码编码的例子。
- en: '*Solution.* Any suffix-free code is uniquely decodable, e.g., { 0, 01 }.'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 任何无后缀编码都是唯一可解码的，例如，{ 0, 01 }。'
- en: Given an example of a uniquely-decodable code that is not prefix free or suffix
    free.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出一个不是前缀自由或无后缀的唯一可解码编码的例子。
- en: '*Solution.* { 0011, 011, 11, 1110 } or { 01, 10, 011, 110 }.'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* { 0011, 011, 11, 1110 }或{ 01, 10, 011, 110 }。'
- en: Are { 1, 100000, 00 }, { 01, 1001, 1011, 111, 1110 }, and { 1, 011, 01110, 1110,
    10011 } uniquely decodable? If not, find a string with two encodings. *Solution.*
    The first set of codewords is uniquely decodable. The second set of codewords
    is not uniquely decodable because 111-01-1110-01 and 1110-111-1001 are two decodings
    of 11101111001. The third set of codewords ins not uniquely decodable because
    01110-1110-011 and 011-1-011-10011 are two decodings of 011101110011.
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '{ 1, 100000, 00 }，{ 01, 1001, 1011, 111, 1110 }和{ 1, 011, 01110, 1110, 10011
    }是唯一可解码的吗？如果不是，找到一个具有两个编码的字符串。*解决方案。* 第一组编码是唯一可解码的。第二组编码不是唯一可解码的，因为111-01-1110-01和1110-111-1001是11101111001的两种解码方式。第三组编码不是唯一可解码的，因为01110-1110-011和011-1-011-10011是011101110011的两种解码方式。'
- en: '**Test for uniquely decodability.** Implement the Sardinas-Patterson algorithm
    for testing whether a set of codewords is uniquely decodable: Add all of the codewords
    to a set. Examine all pairs of codewords to see if any one is a prefix of another;
    if so, extract the *dangling suffix* (i.e., the part of the longer string that
    is not a prefix of the shorter one). If the dangling suffix is a codeword, then
    the code is not uniquely decodable; otherwise, add the dangling suffix to the
    list (provided it is not already there). Repeat this process with the larger list
    until there are no remaining new dangling suffix.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**唯一可解码性测试。** 实现Sardinas-Patterson算法，用于测试一组编码词是否是唯一可解码的：将所有编码词添加到一个集合中。检查所有编码词对，看看是否有一个是另一个的前缀；如果是，提取*悬挂后缀*（即，长字符串中不是短字符串前缀的部分）。如果悬挂后缀是一个编码词，则编码不是唯一可解码的；否则，将悬挂后缀添加到列表中（前提是它尚未存在）。重复此过程直到没有剩余的新悬挂后缀为止。'
- en: The algorithm is finite because all dangling suffixes added to the list are
    suffixes of a finite set of codewords, and a dangling suffix can be added at most
    once.
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该算法是有限的，因为添加到列表中的所有悬挂后缀都是有限一组编码词的后缀，并且悬挂后缀最多只能添加一次。
- en: '{ 0, 01, 11 }. The codeword 0 is a prefix of 01, so add the dangling suffix
    1. { 0, 01, 11, 1 }. The codeword 0 is a prefix of 01, but the dangling suffix
    1 is already in the list; the codeword 1 is a prefix of 11, but the dangling suffix
    1 is already in the list. There are no other dangling suffixes, so conclude that
    the set is uniquely decodable.'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '{ 0, 01, 11 }。编码词0是01的前缀，因此添加悬挂后缀1。{ 0, 01, 11, 1 }。编码词0是01的前缀，但悬挂后缀1已经在列表中；编码词1是11的前缀，但悬挂后缀1已经在列表中。没有其他悬挂后缀，因此得出该集合是唯一可解码的结论。'
- en: '{ 0, 01, 10 }. The codeword 0 is a prefix of 01, so add the dangling suffix
    1 to the list. { 0, 01, 10, 1 }. The codeword 1 is a prefix of 10, but the dangling
    suffix 0 is a codewords. So, conclude that the code is not uniquely decodeable.'
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '{ 0, 01, 10 }。编码词0是01的前缀，因此将悬挂后缀1添加到列表中。{ 0, 01, 10, 1 }。编码词1是10的前缀，但悬挂后缀0是一个编码词。因此，得出该编码不是唯一可解码的结论。'
- en: '**Kraft-McMillan inequality.** Conside a code C with N codewords of lengths
    n1, n2, ..., nN. Prove that if the code is uniquely decodable, then K(C) = sum_i
    = 1 to N 2^(-ni) ≤ 1.'
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Kraft-McMillan不等式。** 考虑一个具有长度为n1, n2, ..., nN的N个编码词的编码C。证明如果编码是唯一可解码的，则K(C)
    = sum_i = 1 to N 2^(-ni) ≤ 1。'
- en: '**Kraft-McMillan construction.** Suppose that we have a set of integers n1,
    n2, ..., nN that satisfy the inequality sum_i = 1 to N 2^(-ni) ≤ 1\. Prove that
    it is always possible to find a prefix-free code with codewords lengths n1, n2,
    ..., nN. Thus, by restricting attention to prefix-free codes (instead of uniquely
    decodable codes), we do not lose much.'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Kraft-McMillan构造。** 假设我们有一组满足不等式sum_i = 1 to N 2^(-ni) ≤ 1的整数n1, n2, ...,
    nN。证明总是可以找到一个编码长度为n1, n2, ..., nN的前缀自由编码。因此，通过将注意力限制在前缀自由编码上（而不是唯一可解码编码），我们不会失去太多。'
- en: '**Kraft-McMillan equality for optimal prefix-free codes.** Prove that if C
    is an optimal prefix-free code then the Kraft-McMillan inequality is an equality:
    K(C) = sum_i = 1 to N 2^(-ni) = 1.'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Kraft-McMillan最优前缀自由编码等式。** 证明如果C是一个最优前缀自由编码，那么Kraft-McMillan不等式是一个等式：K(C)
    = sum_i = 1 to N 2^(-ni) = 1。'
- en: Suppose that all of the symbol probabilities are negative powers of 2. Describe
    the Huffman code.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设所有符号概率都是2的负幂次方。描述哈夫曼编码。
- en: Suppose that all of the symbol frequencies are equal. Describe the Huffman code.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设所有符号频率相等。描述哈夫曼编码。
- en: Find a Huffman code where the length of a symbol with probability pi is greater
    than ceil(-lg pi).
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 找到一个哈夫曼编码，其中概率为 pi 的符号的长度大于 ceil(-lg pi)。
- en: '*Solution.* .01 (000), .30 (001), .34 (01), .35 (1). The codeword 001 has length
    greater than ceil(-lg .30).'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* .01 (000), .30 (001), .34 (01), .35 (1)。码字 001 的长度大于 ceil(-lg .30)。'
- en: True or false. Any optimal prefix-free code can be obtained via Huffman's algorithm.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假。任何最优前缀自由编码都可以通过哈夫曼算法获得。
- en: '*Solution.* False. Consider the following set of symbols and frequencies (A
    26, B 24, C 14, D 13, E 12, F 11).'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* 错误。考虑以下符号和频率集合（A 26, B 24, C 14, D 13, E 12, F 11）。'
- en: '[PRE1]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: In any Huffman code, the codings for A and B must begin with different bits,
    but the code C3 does not have this property (yet it is an optimal prefix-free
    code).
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在任何哈夫曼编码中，字符 A 和 B 的编码必须以不同的位开始，但是代码 C3 没有这个属性（尽管它是一个最优前缀自由编码）。
- en: What is the LZW encoding of the following inputs?
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下输入的 LZW 编码是什么？
- en: T O B E O R N O T T O B E
  id: totrans-63
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: T O B E O R N O T T O B E
- en: Y A B B A D A B B A D A B B A D O O
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: Y A B B A D A B B A D A B B A D O O
- en: A A A A A A A A A A A A A A A A A A A A A
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: A A A A A A A A A A A A A A A A A A A A A
- en: Characterize the tricky situation in LZW coding.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述 LZW 编码中的棘手情况。
- en: '*Solution.* Whenever it encounteres cScSc, where c is a symbol, S is a string,
    cS is in the dictionary but cSc is not.'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* 每当遇到 cScSc，其中 c 是一个符号，S 是一个字符串，cS 在字典中但 cSc 不在字典中。'
- en: As a function of N, how many bits are needed to encode N copies of the symbol
    A? N copies of the sequence ABC?
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作为 N 的函数，编码 N 个符号 A 需要多少位？N 个序列 ABC 需要多少位？
- en: Let F(i) be the ith Fibonacci number. Consider N symbols, where the ith symbol
    has frequency F(i). Note that F(1) + F(2) + ... + F(N) = F(N+2) - 1. Describe
    the Huffman code.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让 F(i) 为第 i 个斐波那契数。考虑 N 个符号，其中第 i 个符号的频率为 F(i)。注意 F(1) + F(2) + ... + F(N) =
    F(N+2) - 1。描述哈夫曼编码。
- en: '*Solution.* Longest codeword has length N-1.'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* 最长的码字长度为 N-1。'
- en: Show that there are at least 2^(N-1) different Huffman codes corresponding to
    a given set of N symbols.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 显示对于给定的 N 个符号集合，至少有 2^(N-1) 种不同的哈夫曼编码。
- en: '*Solution.* There are N-1 internal nodes and each one has an arbitrary choice
    to assign its left and right children.'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* 有 N-1 个内部节点，每个节点都可以任意选择其左右子节点。'
- en: Give a Huffman code where the frequency of 0s in the output is much much higher
    than the frequency of 1s.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出一个哈夫曼编码，其中输出中 0 的频率远远高于 1 的频率。
- en: '*Solution.* If the character ''A'' occurs one million times and the character
    ''B'' occurs once, the code word for ''A'' will be 0 and the codeword for ''B''
    will be 1.'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* 如果字符 ''A'' 出现一百万次，字符 ''B'' 出现一次，那么 ''A'' 的码字将是 0，''B'' 的码字将是 1。'
- en: Prove the following facts about Huffman tries.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 证明有关哈夫曼树的以下事实。
- en: The two longest codewords have the same length.
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个最长的码字长度相同。
- en: If the frequency of symbol i is strictly larger than the frequency of symbol
    j, then the length of the codeword for symbol i is less than or equal to the length
    of the codeword for symbol j.
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果符号 i 的频率严格大于符号 j 的频率，则符号 i 的码字长度小于或等于符号 j 的码字长度。
- en: Describe how to transmit a Huffman code (or optimal prefix-free code) on a set
    of symbols { 0, 1, ..., N-1 } using 2N - 1 + N ceil(lg N) bits.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述如何在一组符号 { 0, 1, ..., N-1 } 上传输哈夫曼编码（或最优前缀自由编码），使用 2N - 1 + N ceil(lg N) 位。
- en: '*Hint*: use 2N-1 bits to specify the structure of the corresponding trie.'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：使用 2N-1 位来指定相应 trie 的结构。'
- en: Suppose that in an extended ASCII file (8-bit characters), the maximum character
    frequency is at most twice the minimum character frequency. Prove that and fixed-length
    8-bit extended ASCII code is optimal.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设在一个扩展 ASCII 文件（8 位字符）中，最大字符频率最多是最小字符频率的两倍。证明固定长度的 8 位扩展 ASCII 码是最优的。
- en: '**Shannon-Fano coding.** Prove that the following top-down version of Huffman''s
    algorithm is not optimal. Split the set of codewords C into two subsets C1 and
    C2 with (almost) equal frequencies. Recursively build the tree for C1 and C2,
    starting all codewords for C1 with 0 and all codewords for C2 with 1. To implement
    the first step, Shannon and Fano propose sorting the codewords by frequency and
    breaking the set up into two subarrays as best as possible.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**香农-范诺编码。** 证明哈夫曼算法的以下自顶向下版本不是最优的。将码字集合 C 分成两个子集 C1 和 C2，其频率（几乎）相等。递归地为 C1
    和 C2 构建树，从 0 开始为 C1 的所有码字，从 1 开始为 C2 的所有码字。为了实现第一步，香农和范诺建议按频率对码字进行排序，并尽可能地将集合分成两个子数组。'
- en: '*Solution.* S 32, H 25, A 20, N 18, O 5.'
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* S 32, H 25, A 20, N 18, O 5。'
- en: '**LZMW coding (Miller-Wegman 1985).** LZ variant: search input for longest
    string already in the dictionary (the current match); add concatenation of previous
    match to current match to the dictionary. Dictionary entries grow more rapidly.
    Can also delete low-frequency entries when the dictionary fills up. Hard to implement.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**LZMW 编码（米勒-韦格曼 1985）。** LZ 变种：在字典中搜索最长的已经存在的字符串（当前匹配）；将前一个匹配与当前匹配的连接添加到字典中。字典条目增长更快。当字典填满时，也可以删除低频率条目。难以实现。'
- en: '**LZAP coding.** Similar to LZMW: instead of adding just the concatenation
    of the previous match with the current match, add the concatenation of the previous
    match with *all prefixes* of the current match. Easier than LZMW to implement,
    but even more dictionary entries.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**LZAP 编码。** 类似于 LZMW：不仅添加前一个匹配与当前匹配的连接，还添加前一个匹配与当前匹配的 *所有前缀* 的连接。比 LZMW 更容易实现，但字典条目更多。'
- en: Identify an optimal code that is not prefix-free.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定一个不是前缀自由的最优编码。
- en: '*Hint*: only need 3 symbols with equal frequencies.'
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：只需要 3 个具有相等频率的符号。'
- en: Identify two optimal prefix-free codes for the same input that have a different
    distribution of codeword lengths.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定对于相同输入的两个最优前缀自由编码，其码字长度分布不同。
- en: '*Hint*: only need 4 symbols.'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：只需要 4 个符号。'
- en: '**Minimum variance Huffman coding.** Due to the nondeterminism associated with
    tiebraking, Huffman''s algorithm may produce codes with different distributions
    of codeword lengths. When transmitting the compressed stream as it is being generated,
    it is desirable to transmit bits at a (near) constant rate. Find Huffman code
    that minimize sum_i (p_i (l_i - l_average(T)) ^2).'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最小方差 Huffman 编码。** 由于与打破平局相关的不确定性，Huffman 算法可能生成具有不同码字长度分布的编码。在生成压缩流时传输，希望以（近）恒定速率传输比特。找到最小化
    sum_i (p_i (l_i - l_average(T)) ^2) 的 Huffman 编码。'
- en: '*Solution.* When combining tries, break ties by picking the earliest produced
    trie with the smallest probability.'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 在组合 tries 时，通过选择具有最小概率的最早生成的 trie 来打破平局。'
- en: '**Two-queue algorithm for Huffman coding.** Prove that the following algorithm
    computes a Huffman code (and runs in linear time if the input symbols are already
    sorted by frequency). Maintain two FIFO queues: the first queue contains the input
    symbols, in ascending order of frequency, the second queue contains the internal
    nodes with combined weights. As long as there is more than one node in the two
    queues, dequeue the two nodes with the smallest weight by examining the fronts
    of both queues. Create a new internal node (left and right child = two nodes,
    weight = sum of weight of two nodes) and enqueue on the second queue.'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**用于 Huffman 编码的双队列算法。** 证明以下算法计算出 Huffman 编码（如果输入符号已按频率排序，则在线性时间内运行）。维护两个
    FIFO 队列：第一个队列包含输入符号，按频率升序排列，第二个队列包含组合权重的内部节点。只要两个队列中有超过一个节点，就通过检查两个队列的前端出队两个权重最小的节点。创建一个新的内部节点（左右子节点
    = 两个节点，权重 = 两个节点的权重之和）并将其加入第二个队列。'
- en: To obtain a minimum variance Huffman code, break ties by choosing nodes from
    the first queue.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 要获得最小方差的 Huffman 编码，通过从第一个队列中选择节点来打破平局。
- en: '*Hint*: prove that the second queue is sorted in ascending order of frequency.'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：证明第二个队列按频率升序排列。'
- en: '**Sibling property.** A binary tree has the *sibling property* if (i) every
    node (except the root) has a sibling and (ii) the binary tree can be listed in
    non-increasing order of probability such that, in the list, all siblings are adjacent.
    Prove that a binary tree represents a Huffman tree if and only if it has the sibling
    property.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**兄弟属性。** 如果（i）每个节点（除了根节点）都有一个兄弟节点，且（ii）二叉树可以按概率的非递增顺序列出，使得在列表中所有兄弟节点都相邻，则二叉树具有
    *兄弟属性*。证明二叉树表示 Huffman 树当且仅当它具有兄弟属性。'
- en: '**Relative coding.** Instead of compressing each pixel in an image, consider
    the difference between a pixel and the previous one and encode the difference.
    Intuition: usually the pixels don''t change much. Use with LZW over color table
    alphabet.'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**相对编码。** 不是压缩图像中的每个像素，而是考虑像素与前一个像素之间的差异并对差异进行编码。直觉：通常像素变化不大。与颜色表字母上的 LZW 一起使用。'
- en: '**Variable-width LZW codes.** Increase the width of the table from p to p+1
    after 2^p th codeword is inserted into table. Used with color table alphabet.'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**可变宽度 LZW 编码。** 在第 2^p 个码字插入表后，将表的宽度从 p 增加到 p+1。与颜色表字母一起使用。'
- en: '**Adaptive Huffman coding.** One-pass algorithm and don''t need to send prefix-free
    code. Build Huffman tree based on frequency of characters read in so far. Update
    tree after reading in each character. Encoder and decoder need to coordinate on
    tie-breaking conventions.'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自适应 Huffman 编码。** 一次通过算法，不需要发送前缀自由码。根据迄今为止读入的字符的频率构建 Huffman 树。在读入每个字符后更新树。编码器和解码器需要协调处理平局的约定。'
- en: '**Shannon entropy.** The entropy H of a discrete random variable X with possible
    values x1, ..., xN that occur with probability p1, ..., pN is defined as H(X)
    = -p1 lg p1 - p2 lg p2 - ... - pN lg pN, where 0 lg 0 = 0 is consistent with the
    limit.'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**香农熵。** 具有可能值 x1, ..., xN 且以概率 p1, ..., pN 出现的离散随机变量 X 的熵 H 定义为 H(X) = -p1
    lg p1 - p2 lg p2 - ... - pN lg pN，其中 0 lg 0 = 0 与极限一致。'
- en: What is the entropy of a fair coin?
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个公平硬币的熵是多少？
- en: What is the entropy of a coin where both sides are heads?
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个硬币的熵是什么，其中两面都是正面？
- en: What is the entropy of a six-sided die?
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个六面骰子的熵是多少？
- en: '*Solution.* -lg (1/6) which is about 2.584962.'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* -lg (1/6) 大约为 2.584962。'
- en: What is the entropy of the sum of two fair dice?
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 两个公平骰子的和的熵是多少？
- en: Given a random variable that takes on N values. What distribution maximizes
    the entropy?The entropy is a fundamental concept in information theory. Shannon's
    source coding theorem asserts that to compress the data from a stream of independent
    and identically distributed random variables requires at least H(X) bits per symbol
    in the limit. For example, to send the results of a sequence of fair die tosses
    requires at least 2.584962 bits per die toss.
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 给定一个取 N 个值的随机变量。什么分布使熵最大化？熵是信息论中的一个基本概念。香农的源编码定理断言，要压缩来自一系列独立同分布随机变量流的数据，至少需要每个符号
    H(X) 位。例如，发送一系列公平骰子投掷结果至少需要每次骰子投掷 2.584962 位。
- en: '**Empirical entropy.** The *empirical entropy* of a piece of text is obtained
    by computing the frequency of occurrence of each symbol and using these as the
    probabilities for a discrete random variable. Compute the empirical entropy of
    your favorite novel. Compare it to the data compression rate achieved by a Huffman
    code.'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**经验熵。** *经验熵* 是通过计算每个符号出现频率并将其用作离散随机变量的概率来获得的一段文本的熵。计算你最喜欢小说的经验熵。将其与 Huffman
    编码实现的数据压缩率进行比较。'
- en: '**Shannon experiment.** Perform the following experiment. Give a subject a
    sequence of k letters from a piece of text (or Leipzig corpus) and ask them to
    predict the next letter. Estimate the fraction of times the subject gets the answer
    right for k = 1, 2, 5, 100.'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**香农实验。** 进行以下实验。给一个主体一段文本（或 Leipzig 语料库）中的 k 个字母序列，并要求他们预测下一个字母。估计主体在 k =
    1, 2, 5, 100 时答对的比例。'
- en: True or false. Fixed-length codes are uniquely decodable.
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假。固定长度编码是���一可解码的。
- en: '*Solution.* True, they are prefix free.'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 真，它们是前缀自由的。'
- en: Give two different Huffman trees the string ABCCDD, with different heights.
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出两棵不同高度的 Huffman 树字符串 ABCCDD。
- en: '**Prefix-free codes.** Design an efficient algorithm to determine if a set
    of binary code words is prefix-free. *Hint*: use a binary trie or sort.'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**前缀自由编码。** 设计一个高效的算法来确定一组二进制码字是否是前缀自由的。*提示*：使用二进制 trie 或排序。'
- en: '**Uniquely decodable code.** Devise a uniquely decodable code that is not a
    prefix free code. Hint: suffix free codes = reverse of prefix free codes. Reverse
    of suffix free code is prefix free code -> can decode by reading compressed message
    in reverse order. Not very convenient.'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**唯一可解码编码。** 设计一个唯一可解码的编码，它不是前缀自由编码。提示：后缀自由编码 = 前缀自由编码的反向。后缀自由编码的反向是前缀自由编码
    -> 可以通过以相反顺序读取压缩消息来解码。不太方便。'
- en: '**Huffman tree.** Modify [Huffman.java](Huffman.java.html) so that the encoder
    prints out the lookup table instead of the preorder traversal, and modify the
    decoder so that it constructs the tree by reading in the lookup table.'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**哈夫曼树。** 修改 [Huffman.java](Huffman.java.html)，使得编码器打印查找表而不是先序遍历，并修改解码器以通过读取查找表构建树。'
- en: True or false. In an optimal prefix-free ternary code, the three symbols that
    occur least frequently have the same length.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假。在最佳前缀自由三进制编码中，出现频率最低的三个符号具有相同的长度。
- en: '*Solution.* False.'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解答。* False.'
- en: '**Ternary Huffman codes.** Generalize the Huffman algorithm to codewords over
    the ternary alphabet (0, 1, and 2) instead of the binary alphabet. That is, given
    a bytestream, find a prefix-free ternary code that uses as few trits (0s, 1s,
    and 2s) as possible. Prove that it yields optimal prefix-free ternary code.'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**三进制哈夫曼编码。** 将哈夫曼算法推广到三进制字母表（0, 1 和 2）上的码字，而不是二进制字母表。也就是说，给定一个字节流，找到一个使用尽可能少的三进制位（0、1
    和 2）的前缀自由三进制编码。证明它产生最佳前缀自由三进制编码。'
- en: '*Solution.* Combine smallest 3 probabilities at each step (instead of smallest
    2). This works when there are 3 + 2k symbols for some integer k. To reduce to
    this case, add 1 or 2 dummy symbols of probability 0. (Alternatively, combine
    fewer than 3 symbols in the first step if the number of symbols is not 3 + 2k.)
    Ex: { 0.1, 0.2, 0.2, 0.5 }.'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解答。* 在每一步中合并最小的 3 个概率（而不是最小的 2 个）。当有 3 + 2k 个符号时，这种方法有效。为了将其减少到这种情况，添加概率为
    0 的 1 或 2 个虚拟符号。（或者，如果符号数量不是 3 + 2k，则在第一步中合并少于 3 个符号。）例如：{ 0.1, 0.2, 0.2, 0.5
    }。'
- en: '**Nonbinary Huffman codes.** Extend the Huffman algorithm to codewords over
    the m-ary alphabet (0, 1, 2, ..., m-1) instead of the binary alphabet.'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**非二进制哈夫曼编码。** 将哈夫曼算法扩展到 m 进制字母表（0, 1, 2, ..., m-1）上的码字，而不是二进制字母表。'
- en: Consider the following 21 character message that consists of 3 a's, 7c's, 6
    t's and 5 g's.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 考虑以下由 3 个 a、7 个 c、6 个 t 和 5 个 g 组成的 21 个字符消息。
- en: '[PRE2]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Are the following 43 bits a possible Huffman encoding of the message above?
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下的 43 位是否是上述消息的可能哈夫曼编码？
- en: '[PRE3]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Justify your answer as concisely and rigorously as possible.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽可能简洁而严谨地证明你的答案。
- en: '*Solution.* A Huffman encoding for a message produces an encoding that uses
    the fewest bits among any prefix free code. The 2-bit binary code a = 00, c =
    01, g = 10, t = 11 is a prefix free code that uses 21 * 2 = 42 bits. Thus, a Huffman
    code would use fewer than 43 bits.'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解答。* 对于一条消息的哈夫曼编码会产生使用最少位数的编码，其中 2 位二进制码 a = 00, c = 01, g = 10, t = 11 是一个使用
    21 * 2 = 42 位的前缀自由编码。因此，哈夫曼编码将使用少于 43 位。'
- en: A binary tree is *full* if every node that is not a leaf has two children. Prove
    that any binary tree corresponding to an optimal prefix-free code is full.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果一个二叉树是*满的*，则除了叶子节点外的每个节点都有两个子节点。证明与最佳前缀自由编码对应的任何二叉树都是满的。
- en: '*Hint*: if an internal node has only one child, replace that internal node
    with its unique child.'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：如果内部节点只有一个子节点，请用其唯一子节点替换该内部节点。'
- en: '**Move-to-front coding (Bentley, Sleator, Tarjan, and Wei 1986).** Write a
    program `MoveToFront` that implements move-to-front encoding and decoding. Maintain
    alphabet of symbols in a list, where frequently occurring symbols are towards
    the front. A symbol is encoded as the number of symbols that precede it in the
    list. After encoding a symbol, move it to the front of the list. [reference](../references/papers/move-to-front.pdf)'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Move-to-front 编码（Bentley, Sleator, Tarjan 和 Wei 1986）。** 编写一个名为 `MoveToFront`
    的程序，实现 move-to-front 编码和解码。维护符号字母表的列表，其中频繁出现的符号位于前面。一个符号被编码为列表中在它之前的符号数。编码一个符号后，将其移动到列表的前面。[参考](../references/papers/move-to-front.pdf)'
- en: '**Move-ahead-k coding.** Same as move-to-front coding, but move symbol k positions
    toward the front.'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Move-ahead-k 编码。** 与 move-to-front 编码相同，但将符号向前移动 k 个位置。'
- en: '**Wait-c-and-move.** Same as move-to-front coding, but move symbol to the front
    only after it has been encountered c times since the last time it was moved to
    the front.'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**等待-c-并移动。** 与 move-to-front 编码相同，但只有在符号在上次移动到前面后遇到 c 次后才将其移动到前面。'
- en: '**Double Huffman compression.** Find an input for which applying the `compress()`
    method in [Huffman.java](Huffman.java.html) twice leads to a strictly smaller
    output than applying `compress()` only once.'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**双哈夫曼压缩。** 找到一个输入，对该输入应用 [Huffman.java](Huffman.java.html) 中的 `compress()`
    方法两次比仅应用 `compress()` 一次导致输出严格较小。'
- en: '**Merging k sorted arrays.** You have k sorted lists, of lenths n1, n2, ...,
    nk. Supposet that the only operation you can perform to combine lists is a 2-way
    merge: given one sorted array of length n1 and another sorted array of length
    n2, replace them with a sorted array of length n = n1 + n2\. Moreover, the 2-way
    merge operation takes exactly n units of time. What is the optimal way to merge
    the k sorted arrays?'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**合并 k 个排序数组。** 你有 k 个已排序的列表，长度分别为 n1、n2、...、nk。假设你可以执行的唯一操作是 2 路合并：给定长度为 n1
    的一个已排序数组和长度为 n2 的另一个已排序数组，用长度为 n = n1 + n2 的已排序数组替换它们。此外，2 路合并操作需要 n 个单位的时间。合并
    k 个已排序数组的最佳方法是什么？'
- en: '*Solution.* Sort the list lengths so that n1 < n2 < ... < nk. Repetedly take
    the two smallest lists and apply the 2-way merge operation. The proof of optimality
    is the same as the proof of optimality of Huffman codes: repeatedly applying 2-way
    merge operations induces a binary tree in which each leaf node corresponds to
    one of the original sorted lists and each internal node corresponds to a 2-way
    merge operation. The contribution of any original list to the overall cost is
    the length of the list multiplied by its tree depth (because that is the number
    of times its elements are involved in a 2-way merge).'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* 将列表长度排序，使得 n1 < n2 < ... < nk。重复地取最小的两个列表并应用2路合并操作。最优性的证明与哈夫曼编码的最优性证明相同：重复应用2路合并操作会产生一棵二叉树，其中每个叶节点对应于原始排序列表中的一个，每个内部节点对应于一个2路合并操作。任何原始列表对总体成本的贡献是列表长度乘以其树深度（因为这是其元素参与2路合并的次数）。'
