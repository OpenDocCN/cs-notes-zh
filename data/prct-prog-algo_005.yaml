- en: 1.3   Conditionals and Loops
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.3   条件和循环
- en: 原文：[https://introcs.cs.princeton.edu/java/13flow](https://introcs.cs.princeton.edu/java/13flow)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/java/13flow](https://introcs.cs.princeton.edu/java/13flow)
- en: In the programs that we have examined to this point, each of the statements
    is executed once, in the order given. Most programs are more complicated because
    the sequence of statements and the number of times each is executed can vary.
    We use the term *control flow* to refer to statement sequencing in a program.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们到目前为止检查的程序中，每个语句都按给定的顺序执行一次。大多数程序更复杂，因为语句的顺序和每个语句执行的次数可能会有所不同。我们使用术语*控制流*来指代程序中的语句顺序。
- en: If statements.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: if 语句。
- en: Most computations require different actions for different inputs.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数计算需要针对不同的输入采取不同的行动。
- en: The following code fragment uses an `if` statement to put the smaller of two
    `int` values in `x` and the larger of the two values in `y`, by exchanging the
    values in the two variables if necessary.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下代码片段使用`if`语句将两个`int`值中较小的值放入`x`，将两个值中较大的值放入`y`，如果需要则交换两个变量中的值。
- en: '![anatomy of an if statement](../Images/74d328fb56c4baf3ab0a7d1fceab0e19.png)'
  id: totrans-6
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![if 语句的解剖](../Images/74d328fb56c4baf3ab0a7d1fceab0e19.png)'
- en: '[Flip.java](Flip.java.html) uses `Math.random()` and an `if-else` statement
    to print the results of a coin flip.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[Flip.java](Flip.java.html) 使用`Math.random()`和`if-else`语句来打印硬币翻转的结果。'
- en: The table below summarizes some typical situations where you might need to use
    an `if` or `if-else` statement.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下表总结了一些典型情况，您可能需要使用`if`或`if-else`语句。
- en: '![examples of conditionals](../Images/d456cee963b7becc52eb898ef7ce5b38.png)'
  id: totrans-9
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![条件示例](../Images/d456cee963b7becc52eb898ef7ce5b38.png)'
- en: While loops.
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: While 循环。
- en: Many computations are inherently repetitive. The `while` loop enables us to
    execute a group of statements many times. This enables us to express lengthy computations
    without writing lots of code.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 许多计算本质上是重复的。`while`循环使我们能够多次执行一组语句。这使我们能够在不编写大量代码的情况下表达冗长的计算。
- en: The following code fragment computes the largest power of 2 that is less than
    or equal to a given positive integer *n*.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以下代码片段计算小于或等于给定正整数*n*的最大2的幂。
- en: '![anatomy of a while loop](../Images/cd58213d17d7d10ae4d40bb361cc3797.png)'
  id: totrans-13
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![while 循环的解剖](../Images/cd58213d17d7d10ae4d40bb361cc3797.png)'
- en: '[TenHellos.java](TenHellos.java.html) prints "Hello World" 10 times.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[TenHellos.java](TenHellos.java.html) 打印"Hello World" 10次。'
- en: '[PowersOfTwo.java](PowersOfTwo.java.html) takes an integer command-line argument
    *n* and prints all of the powers of 2 less than or equal to *n*.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[PowersOfTwo.java](PowersOfTwo.java.html) 接受一个整数命令行参数*n*，并打印小于或等于*n*的所有2的幂。'
- en: For loops.
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: for 循环。
- en: The *for loop* is an alternate Java construct that allows us even more flexibility
    when writing loops.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '*for 循环* 是另一种Java构造，使我们在编写循环时更加灵活。'
- en: '*For notation.* Many loops follow the same basic scheme: initialize an index
    variable to some value and then use a `while` loop to test an exit condition involving
    the index variable, using the last statement in the `while` loop to modify the
    index variable. Java''s `for` loop is a direct way to express such loops.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*符号说明。* 许多循环遵循相同的基本方案：将索引变量初始化为某个值，然后使用`while`循环测试涉及索引变量的退出条件，使用`while`循环中的最后一条语句修改索引变量。Java的`for`循环是表达这种循环的直接方式。'
- en: '![anatomy of a for loop](../Images/befb6a3dc3b25d3c8ef6a28805af9398.png)'
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![for 循环的解剖](../Images/befb6a3dc3b25d3c8ef6a28805af9398.png)'
- en: '*Compound assignment idioms.* The idiom `i++` is a shorthand notation for `i
    = i + 1`.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*复合赋值习语。* 习语`i++`是`i = i + 1`的简写表示。'
- en: '*Scope.* The *scope* of a variable is the part of the program that can refer
    to that variable by name. Generally the scope of a variable comprises the statements
    that follow the declaration in the same block as the declaration. For this purpose,
    the code in the `for` loop header is considered to be in the same block as the
    `for` loop body.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*作用域。* 变量的*作用域*是程序中可以通过名称引用该变量的部分。通常，变量的作用域包括声明后面的语句，与声明在同一块中的语句。为此，`for`循环头中的代码被视为与`for`循环主体在同一块中。'
- en: Nesting.
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 嵌套。
- en: The `if`, `while`, and `for` statements have the same status as assignment statements
    or any other statements in Java; that is, we can use them wherever a statement
    is called for. In particular, we can use one or more of them in the body of another
    statement to make *compound statements*. To emphasize the nesting, we use indentation
    in the program code.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '`if`、`while`和`for`语句与Java中的赋值语句或其他语句具有相同的地位；也就是说，我们可以在需要语句的任何地方使用它们。特别是，我们可以在另一个语句的主体中使用一个或多个语句来创建*复合语句*。为了强调嵌套，我们在程序代码中使用缩进。'
- en: '[DivisorPattern.java](DivisorPattern.java.html) has a `for` loop whose body
    contains a `for` loop (whose body is an `if-else` statement) and a print statement.
    It prints a pattern of asterisks where the *i*th row has an asterisk in each position
    corresponding to divisors of *i* (the same holds true for the columns).'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[DivisorPattern.java](DivisorPattern.java.html) 有一个`for`循环，其主体包含一个`for`循环（其主体是一个`if-else`语句）和一个打印语句。它打印出一个星号模式，其中第*i*行的每个位置都有一个星号，对应于*i*的约数（列也是如此）。'
- en: '[MarginalTaxRate.java](MarginalTaxRate.java.html) computes the marginal tax
    rate for a given income. It uses several nested `if-else` statements to test from
    among a number of mutually exclusive possibilities.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[MarginalTaxRate.java](MarginalTaxRate.java.html) 计算给定收入的边际税率。它使用几个嵌套的`if-else`语句来从一系列互斥的可能性中进行选择。'
- en: Loop examples.
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环示例。
- en: '![examples of loops](../Images/54322f5456ab0719ada9fd756c361407.png)'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![循环示例](../Images/54322f5456ab0719ada9fd756c361407.png)'
- en: Applications.
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用。
- en: The ability to program with loops and conditionals immediately opens up the
    world of computation to us.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用循环和条件语句编程立即为我们打开了计算的世界。
- en: '*Ruler subdivisions.* [RulerN.java](RulerN.java.html) takes an integer command-line
    argument n and prints the string of ruler subdivision lengths. This program illustrates
    one of the essential characteristics of loops—the program could hardly be simpler,
    but it can produce a huge amount of output.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*尺规划分。*[RulerN.java](RulerN.java.html)接受一个整数命令行参数n并打印出尺规划分长度的字符串。这个程序展示了循环的一个基本特征——程序几乎不能再简单了，但它可以产生大量的输出。'
- en: '![Harmonic numbers](../Images/c4bef2a03a0536ef6739d7545dfea76c.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![调和数](../Images/c4bef2a03a0536ef6739d7545dfea76c.png)'
- en: '*Finite sums.* The computational paradigm used in [PowersOfTwo.java](PowersOfTwo.java.html)
    is one that you will use frequently. It uses two variables—one as an index that
    controls a loop, and the other to accumulate a computational result. Program [HarmonicNumber.java](HarmonicNumber.java.html)
    uses the same paradigm to evaluate the sum'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*有限和。*[PowersOfTwo.java](PowersOfTwo.java.html)中使用的计算范式是您经常会使用的范式。它使用两个变量——一个作为控制循环的索引，另一个用于累积计算结果。程序[HarmonicNumber.java](HarmonicNumber.java.html)使用相同的范式来评估和'
- en: $$ H_n = \frac{1}{1} + \frac{1}{2} + \frac{1}{3} + \frac{1}{4} + \; \ldots \;
    + \frac{1}{n} $$
  id: totrans-33
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $$ H_n = \frac{1}{1} + \frac{1}{2} + \frac{1}{3} + \frac{1}{4} + \; \ldots \;
    + \frac{1}{n} $$
- en: These numbers, which are known as the *harmonic numbers*, arise frequently in
    the analysis of algorithms.
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些数字，被称为*调和数*，在算法分析中经常出现。
- en: '*Newton''s method.* ![Newton''s method](../Images/f96a3090a1345417d5c553d11d5e9a3f.png)
    [Sqrt.java](Sqrt.java.html) uses a classic iterative technique known as *Newton''s*
    method to compute the square root of a positive number *x*: Start with an estimate
    *t*. If *t* is equal to *x/t* (up to machine precision), then *t* is equal to
    a square root of *x*, so the computation is complete. If not, refine the estimate
    by replacing *t* with the average of *t* and *x/t*. Each time we perform this
    update, we get closer to the desired answer.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*牛顿法。* ![牛顿法](../Images/f96a3090a1345417d5c553d11d5e9a3f.png) [Sqrt.java](Sqrt.java.html)使用一种经典的迭代技术，称为*牛顿*法，来计算正数*x*的平方根：从一个估计值*t*开始。如果*t*等于*x/t*（直到机器精度），那么*t*等于*x*的平方根，计算完成。如果不是，则通过用*t*和*x/t*的平均值替换*t*来改进估计值。每次执行此更新，我们都会更接近所需的答案。'
- en: '*Number conversion.* [Binary.java](Binary.java.html) prints the binary (base
    2) representation of the decimal number typed as the command-line argument. It
    is based on decomposing the number into a sum of powers of 2. For example, the
    binary representation of 106 is 1101010[2], which is the same as saying that 106
    = 64 + 32 + 8 + 2. To compute the binary representation of *n*, we consider the
    powers of 2 less than or equal to *n* in decreasing order to determine which belong
    in the binary decomposition (and therefore correspond to a 1 bit in the binary
    representation).'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数字转换。*[二进制.java](Binary.java.html)打印出以命令行参数输入的十进制数的二进制（基数2）表示。它基于将数字分解为2的幂的和。例如，106的二进制表示是1101010[2]，这等同于说106
    = 64 + 32 + 8 + 2。要计算*n*的二进制表示，我们按递减顺序考虑小于或等于*n*的2的幂，以确定哪些属于二进制分解（因此对应于二进制表示中的1位）。'
- en: '*Gambler''s ruin.* ![gambler''s ruin](../Images/10f519ea8236b78a7139adee4589d562.png)  Suppose
    a gambler makes a series of fair $1 bets, starting with $50, and continue to play
    until she either goes broke or has $250. What are the chances that she will go
    home with $250, and how many bets might she expect to make before winning or losing?
    [Gambler.java](Gambler.java.html) is a simulation that can help answer these questions.
    It takes three command-line arguments, the initial stake ($50), the goal amount
    ($250), and the number of times we want to simulate the game.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*赌徒的毁灭。* ![赌徒的毁灭](../Images/10f519ea8236b78a7139adee4589d562.png) 假设一个赌徒进行一系列公平的1美元赌注，从50美元开始，并继续玩下去，直到她破产或赢得250美元。她赢得250美元的机会有多大，以及在赢或输之前她可能会做多少赌注？[Gambler.java](Gambler.java.html)是一个可以帮助回答这些问题的模拟。它需要三个命令行参数，初始赌注（50美元），目标金额（250美元）以及我们想要模拟游戏的次数。'
- en: '*Prime factorization.* [Factors.java](Factors.java.html) takes an integer command-line
    argument `n` and prints its prime factorization. In contrast to many of the other
    programs that we have seen (which we could do in a few minutes with a calculator
    or pencil and paper), this computation would not be feasible without a computer.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*质因数分解。*[Factors.java](Factors.java.html)接受一个整数命令行参数`n`并打印出它的质因数分解。与我们看到的许多其他程序不同（我们可以在几分钟内用计算器或纸和笔完成），这个计算没有计算机是不可行的。'
- en: Other conditional and loop constructs.
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 其他条件和循环结构。
- en: To be complete, we consider four more Java constructs related to conditionals
    and loops. They are used much less frequently than the `if`, `while`, and `for`
    statements that we've been working with, but it is worthwhile to be aware of them.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 为了完整起见，我们考虑与条件和循环相关的另外四个Java构造。它们使用频率远低于我们一直在使用的`if`、`while`和`for`语句，但了解它们是值得的。
- en: '*Break statements.* In some situations, we want to immediate exit a loop without
    letting it run to completion. Java provides the `break` statement for this purpose.
    [Prime.java](Prime.java.html) takes an integer command-line argument `n` and prints
    `true` if `n` is prime, and `false` otherwise. There are two different ways to
    leave this loop: either the `break` statement is executed (because `n` is not
    prime) or the loop-continuation condition is not satisfied (because `n` is prime).'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*中断语句。* 在某些情况下，我们希望立即退出一个循环，而不让它运行到完成。Java提供`break`语句来实现这一目的。[Prime.java](Prime.java.html)接受一个整数命令行参数`n`，如果`n`是质数则打印`true`，否则打印`false`。有两种不同的方法可以退出这个循环：要么执行`break`语句（因为`n`不是质数），要么循环继续条件不满足（因为`n`��质数）。'
- en: Note that the `break` statement does not apply to `if` or `if-else` statements.
    In a [famous programming bug](http://users.csc.calpoly.edu/~jdalbey/SWE/Papers/att_collapse.html),
    the U.S. telephone network crashed because a programmer intended to use a `break`
    statement to exit a complicated `if` statement.
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，`break`语句不适用于`if`或`if-else`语句。在一次[著名的编程错误](http://users.csc.calpoly.edu/~jdalbey/SWE/Papers/att_collapse.html)中，美国电话网络崩溃，因为一个程序员打算使用`break`语句退出一个复杂的`if`语句。
- en: '*Continue statements.* Java also provides a way to skip to the next iteration
    of a loop: the `continue` statement. When a `continue` is executed within the
    body of a `for` loopy, the flow of control transfers directly to the increment
    statement for the next iteration of the loop.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Continue语句.* Java还提供了一种跳过循环的下一次迭代的方法：`continue`语句。当在`for`循环的主体内执行`continue`时，控制流直接转移到循环的下一次迭代的增量语句。'
- en: '*Switch statements.* The `if` and `if-else` statements allow one or two alternatives.
    Sometimes, a computation naturally suggests more than two mutually exclusive alternatives.
    Java provides the `switch` statement for this purpose. [NameOfDay.java](NameOfDay.java.html)
    takes an integer between 0 and 6 as a command-line argument and uses a `switch`
    statement to print the corresponding name of the day (Sunday to Saturday).'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Switch语句.* `if`和`if-else`语句允许一个或两个替代方案。有时，一个计算自然地提出了两个以上的互斥的替代方案。Java提供了`switch`语句来实现这一目的。[NameOfDay.java](NameOfDay.java.html)接受一个介于0和6之间的整数作为命令行参数，并使用`switch`语句打印相应的星期几名称（星期日到星期六）。'
- en: '*Do–while loops.* A `do-while` loop is almost the same as a `while` loop except
    that the loop-continuation condition is omitted the first time through the loop.
    [RandomPointInCircle.java](RandomPointInCircle.java.html) sets `x` and `y` so
    that (`x`, `y`) is randomly distributed inside the circle centered at (0, 0) with
    radius 1.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Do-while循环.* `do-while`循环与`while`循环几乎相同，只是第一次通过循环时省略了循环继续条件。[RandomPointInCircle.java](RandomPointInCircle.java.html)设置`x`和`y`，使得(`x`,
    `y`)在以(0, 0)为中心、半径为1的圆内随机分布。'
- en: '![do-while loop](../Images/27b707bf5b6f2852b3e09a22ebe3c94d.png)'
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![do-while循环](../Images/27b707bf5b6f2852b3e09a22ebe3c94d.png)'
- en: With `Math.random()` we get points that are randomly distributed in the 2-by-2
    square center at (0, 0). We just generate points in this region until we find
    one that lies inside the unit disk. We always want to generate at least one point
    so a `do-while` loop is most appropriate. We must declare `x` and `y` outside
    the loop since we will want to access their values after the loop terminates.
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 使用`Math.random()`，我们得到的点在以(0, 0)为中心的2x2正方形中随机分布。我们只在这个区域内生成点，直到找到一个位于单位圆内的点为止。我们总是希望生成至少一个点，因此使用`do-while`循环是最合适的。由于我们希望在循环终止后访问它们的值，因此必须在循环外声明`x`和`y`。
- en: We don't use the following two flow control statements in this textbook, but
    include them here for completeness.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本教材中不使用以下两个流程控制语句，但为了完整性起见在此包含它们。
- en: '*Conditional operator.* The conditional operator `?:` is a ternary operator
    (three operands) that enables you to embed a conditional within an expression.
    The three operands are separated by the `?` and `:` symbols. If the first operand
    (a boolean expression) is `true`, the result has the value of the second expression;
    otherwise it has the value of the third expression.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*条件运算符.* 条件运算符`?:`是一个三元运算符（三个操作数），它使您能够在表达式中嵌入一个条件。这三个操作数由`?`和`:`符号分隔。如果第一个操作数（一个布尔表达式）为`true`，则结果具有第二个表达式的值；否则具有第三个表达式的值。'
- en: '[PRE0]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Labeled break and continue statements.* The `break` and `continue` statements
    apply to the innermost `for` or `while` loop. Sometimes we want to jump out of
    several levels of nested loops. Java provides the labeled break and labeled continue
    statements to accomplish this. Here is an [example](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/branch.html).'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*带标签的break和continue语句.* `break`和`continue`语句适用于最内层的`for`或`while`循环。有时我们希望跳出几层嵌套循环。Java提供了带标签的break和continue语句来实现这一点。这里有一个[示例](http://docs.oracle.com/javase/tutorial/java/nutsandbolts/branch.html)。'
- en: Exercises
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Write a program [AllEqual.java](AllEqual.java.html) that takes three integer
    command-line arguments and prints `equal` if all three are equal, and `not equal`
    otherwise.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[AllEqual.java](AllEqual.java.html)，它接受三个整数命令行参数，并在所有三个参数相等时打印`equal`，否则打印`not
    equal`。
- en: Write a program [RollLoadedDie.java](RollLoadedDie.java.html) that prints the
    result of rolling a loaded die such that the probability of getting a 1, 2, 3,
    4, or 5 is 1/8 and the probability of getting a 6 is 3/8.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[RollLoadedDie.java](RollLoadedDie.java.html)，打印掷一个加载的骰子的结果，使得得���1、2、3、4或5的概率为1/8，得到6的概率为3/8。
- en: 'Rewrite [TenHellos.java](TenHellos.java.html) to make a program [Hellos.java](Hellos.java.html)
    that takes the number of lines to print as a command-line argument. You may assume
    that the argument is less than 1000. Hint: consider using `i % 10` and `i % 100`
    to determine whether to use "st", "nd", "rd", or "th" for printing the `i`th Hello.'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写[TenHellos.java](TenHellos.java.html)以创建一个程序[Hellos.java](Hellos.java.html)，该程序将要打印的行数作为命令行参数。您可以假设参数小于1000。提示：考虑使用`i
    % 10`和`i % 100`来确定是否使用"st"、"nd"、"rd"或"th"来打印第`i`个Hello。
- en: 'Write a program [FivePerLine.java](FivePerLine.java.html) that, using one `for`
    loop and one `if` statement, prints the integers from 1000 to 2000 with five integers
    per line. *Hint*: use the `%` operator.'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[FivePerLine.java](FivePerLine.java.html)，使用一个`for`循环和一个`if`语句，每行打印从1000到2000的整数，每行五个整数。*提示*：使用`%`运算符。
- en: Write a program [FunctionGrowth.java](FunctionGrowth.java.html) that prints
    a table of the values of *ln n*, *n*, *n ln n*, *n²*, *n³*, and *2^n* for *n*
    = 16, 32, 64, ..., 2048. Use tabs (`'\t'` characters) to line up columns.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[FunctionGrowth.java](FunctionGrowth.java.html)，打印出*ln n*，*n*，*n ln n*，*n²*，*n³*和*2^n*的值表，其中*n*
    = 16, 32, 64, ..., 2048。使用制表符(`'\t'`字符)来对齐列。
- en: What is the value of `m` and `n` after executing the [following code](DigitReverser.java.html)?
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行[以下代码](DigitReverser.java.html)后，`m`和`n`的值是多少？
- en: '[PRE1]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: What does the [following code](Fibonacci.java.html) print out?
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码打印出什么？
- en: '[PRE2]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Unlike the harmonic numbers, the sum 1/1 + 1/4 + 1/9 + 1/16 + ... + 1/n² *does*
    converge to a constant as *n* grows to infinity. (Indeed, the constant is π² /
    6, so this formula can be used to estimate the value of π.) Which of the following
    [for loops](SeriesSum.java.html) computes this sum? Assume that `n` is an `int`
    initialized to 1000000 and `sum` is a `double` initialized to 0.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 与调和��不同，和1/1 + 1/4 + 1/9 + 1/16 + ... + 1/n² *确实*会收敛到一个常数，随着*n*趋向无穷。 （实际上，常数是π²
    / 6，因此可以使用这个公式来估计π的值。）以下哪个[for循环](SeriesSum.java.html)计算这个和？ 假设`n`是一个初始化为1000000的`int`，`sum`是一个初始化为0的`double`。
- en: '[PRE3]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Modify [Binary.java](Binary.java.html) to get a program Modify `Kary.java` that
    takes a second command-line argument `K` and converts the first argument to base
    `K`. Assume the base is between 2 and 16\. For bases greater than 10, use the
    letters `A` through `F` to represent the digits 10 through 15, respectively.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改[Binary.java](Binary.java.html)以获得一个程序修改`Kary.java`，它接受第二个命令行参数`K`，并将第一个参数转换为基数`K`。
    假设基数在2到16之间。 对于大于10的基数，使用字母`A`到`F`表示数字10到15。
- en: Write a program [code fragment](IntegerToBinaryString.java.html) that puts the
    binary representation of a positive integer `n` into a `String` variable `s`.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[代码片段](IntegerToBinaryString.java.html)，将正整数`n`的二进制表示放入一个`String`变量`s`中。
- en: Creative Exercises
  id: totrans-66
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
- en: '**Ramanujan''s taxi.** S. Ramanujan was an Indian mathematician who became
    famous for his intuition for numbers. When the English mathematician G. H. Hardy
    came to visit him in the hospital one day, Hardy remarked that the number of his
    taxi was 1729, a rather dull number. To which Ramanujan replied, "No, Hardy! No,
    Hardy! It is a very interesting number. It is the smallest number expressible
    as the sum of two cubes in two different ways." Verify this claim by writing a
    program [Ramanujan.java](Ramanujan.java.html) that takes an integer command-line
    argument n and prints all integers less than or equal to n that can be expressed
    as the sum of two cubes in two different ways - find distinct positive integers
    *a*, *b*, *c*, and *d* such that *a³ + b³ = c³ + d³*. Use four nested for loops.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**拉马努金的出租车。** S.拉马努金是一位以其对数字的直觉而闻名的印度数学家。 有一天，英国数学家G.H.哈代来医院看望他时，哈代说他的出租车号码是1729，一个相当乏味的数字。
    拉马努金回答说：“不，哈代！不，哈代！这是一个非常有趣的数字。它是唯一的一个可以用两种不同方式的两个立方体的和来表示的最小数字。” 通过编写一个程序[Ramanujan.java](Ramanujan.java.html)，接受一个整数命令行参数n，并打印小于或等于n的所有整数，这些整数可以用两种不同方式的两个立方体的和来表示
    - 找到不同的正整数*a*、*b*、*c*和*d*，使得*a³ + b³ = c³ + d³*。 使用四个嵌套的for循环。'
- en: Now, the license plate 87539319 seems like a rather dull number. Determine why
    it's not.
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 现在，车牌号87539319似乎是一个相当乏味的数字。 确定它为什么不是。
- en: '**Checksums.** The International Standard Book Number ([ISBN](http://mathworld.wolfram.com/ISBN.html))
    is a 10 digit code that uniquely specifies a book. The rightmost digit is a *checksum*
    digit which can be uniquely determined from the other 9 digits from the condition
    that *d[1] + 2d[2] + 3d[3] + ... + 10d[10]* must be a multiple of 11 (here *d[i]*
    denotes the ith digit from the right). The checksum digit *d[1]* can be any value
    from 0 to 10: the ISBN convention is to use the value X to denote 10. *Example*:
    the checksum digit corresponding to 020131452 is 5 since is the only value of
    *d[1]* between 0 and and 10 for which *d[1] + 2*2 + 3*5 + 4*4 + 5*1 + 6*3 + 7*1
    + 8*0 + 9*2 + 10*0* is a multiple of 11. Write a program [ISBN.java](ISBN.java.html)
    that takes a 9-digit integer as a command-line argument, computes the checksum,
    and prints the 10-digit ISBN number. It''s ok if you don''t print any leading
    0s.'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**校验和。** 国际标准书号（[ISBN](http://mathworld.wolfram.com/ISBN.html)）是一个包含10位数字的代码，可以唯一指定一本书。
    最右边的数字是一个*校验和*数字，可以根据其他9位数字确定，条件是*d[1] + 2d[2] + 3d[3] + ... + 10d[10]*必须是11的倍数（这里*d[i]*表示从右边数第i位数字）。
    校验和数字*d[1]*可以是0到10之间的任何值：ISBN约定使用值X表示10。 *示例*：对应于020131452的校验和数字是5，因为它是0到10之间*d[1]*的唯一值，使得*d[1]
    + 2*2 + 3*5 + 4*4 + 5*1 + 6*3 + 7*1 + 8*0 + 9*2 + 10*0*是11的倍数。 编写一个程序[ISBN.java](ISBN.java.html)，它以一个9位整数作为命令行参数，计算校验和，并打印10位ISBN号码。
    如果不打印任何前导0，也没关系。'
- en: '**Exponential function.** Assume that `x` is a positive variable of type `double`.
    Write a program [Exp.java](Exp.java.html) that computes e^x using the Taylor series
    expansion'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**指数函数。** 假设`x`是一个正的`double`类型变量。 编写一个程序[Exp.java](Exp.java.html)，使用泰勒级数展开计算e^x'
- en: $$ e^ x = 1 + x + \frac{x^2}{2!} + \frac{x^3}{3!} + \frac{x^4}{4!} + \ldots
    $$
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $$ e^ x = 1 + x + \frac{x^2}{2!} + \frac{x^3}{3!} + \frac{x^4}{4!} + \ldots
    $$
- en: '**Trigonometric functions.** Write two programs [Sin.java](Sin.java.html) and
    `Cos.java` that compute *sin x* and *cos x* using the Taylor series expansions'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**三角函数。** 编写两个程序[Sin.java](Sin.java.html)和`Cos.java`，使用泰勒级数展开计算*sin x*和*cos
    x*'
- en: $$ \sin x = x - \frac{x^3}{3!} + \frac{x^5}{5!} - \frac{x^7}{7!} + \ldots $$
  id: totrans-73
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $$ \sin x = x - \frac{x^3}{3!} + \frac{x^5}{5!} - \frac{x^7}{7!} + \ldots $$
- en: $$ \cos x = 1 - \frac{x^2}{2!} + \frac{x^4}{4!} - \frac{x^6}{6!} + \ldots $$
  id: totrans-74
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: $$ \cos x = 1 - \frac{x^2}{2!} + \frac{x^4}{4!} - \frac{x^6}{6!} + \ldots $$
- en: '**Game simulation.** In the game show *Let''s Make a Deal*, a contestant is
    presented with three doors. Behind one door is a valuable prize, behind the other
    two are gag gifts. After the contestant chooses a door, the host opens up one
    of the other two doors (never revealing the prize, of course). The contestant
    is then given the opportunity to switch to the other unopened door. Should the
    contestant do so? Intuitively, it might seem that the contestant''s initial choice
    door and the other unopened door are equally likely to contain the prize, so there
    would be no incentive to switch. Write a program [MonteHall.java](MonteHall.java.html)
    to test this intuition by simulation. Your program should take an integer command-line
    argument *n*, play the game *n* times using each of the two strategies (switch
    or don''t switch) and print the chance of success for each strategy. Or you can
    [play the game here](http://www.stat.sc.edu/~west/javahtml/LetsMakeaDeal.html).'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**游戏模拟。** 在游戏节目*让我们做个交易*中，一个参赛者面前有三扇门。其中一扇门后面是一个有价值的奖品，另外两扇门后面是恶作剧礼物。在参赛者选择一扇门后，主持人会打开另外两扇门中的一扇（当然不会揭示奖品）。然后参赛者有机会换到另一扇未打开的门。参赛者应该这样做吗？直觉上，参赛者最初选择的门和另一扇未打开的门同样有可能包含奖品，因此没有动机去换。编写一个程序[MonteHall.java](MonteHall.java.html)通过模拟来测试这种直觉。你的程序应该接受一个整数命令行参数*n*，使用两种策略（换门或不换门）玩*n*次游戏，并打印每种策略的成功率。或者你可以[在这里玩游戏](http://www.stat.sc.edu/~west/javahtml/LetsMakeaDeal.html)。'
- en: '**Euler''s sum-of-powers conjecture.** In 1769 Leonhard Euler formulated a
    generalized version of Fermat''s Last Theorem, conjecturing that at least *n*
    *n*th powers are needed to obtain a sum that is itself an *n*th power, for *n*
    > 2. Write a program [Euler.java](Euler.java.html) to disprove Euler''s conjecture
    (which stood until 1967), using a quintuply nested loop to find four positive
    integers whose 5th power sums to the 5th power of another positive integer. That
    is, find *a*, *b*, *c*, *d*, and *e* such that *a*⁵ + *b*⁵ + *c*⁵ + *d*⁵ = *e*⁵.
    Use the `long` data type.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**欧拉幂和猜想。** 1769年，莱昂哈德·欧拉提出了费马大定理的一个广义版本，猜想至少需要*n*个*n*次幂才能得到一个本身是*n*次幂的和，其中*n*
    > 2。编写一个程序[Euler.java](Euler.java.html)来证明欧拉的猜想（直到1967年仍然有效），使用五重嵌套循环找到四个正整数，它们的5次幂之和等于另一个正整数的5次幂。也就是说，找到*a*、*b*、*c*、*d*和*e*，使得*a*⁵
    + *b*⁵ + *c*⁵ + *d*⁵ = *e*⁵。使用`long`数据类型。'
- en: Web Exercises
  id: totrans-77
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络练习
- en: Write a program [RollDie.java](RollDie.java.html) that generates the result
    of rolling a fair six-sided die (an integer between 1 and 6).
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[RollDie.java](RollDie.java.html)，生成掷一个公平的六面骰子的结果（1到6之间的整数）。
- en: Write a program that takes three integer command-line arguments a, b, and c
    and print the number of distinct values (1, 2, or 3) among a, b, and c.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，接受三个整数命令行参数a、b和c，并打印a、b和c中不同值的数量（1、2或3）。
- en: Write a program that takes five integer command-line arguments and prints the
    *median* (the third largest one).
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，接受五个整数命令行参数，并打印*中位数*（第三大的数）。
- en: (hard) Now, try to compute the median of 5 elements such that when executed,
    it never makes more than 6 total comparisons.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: （难）现在，尝试计算5个元素的中位数，使得当执行时，总比较次数不超过6次。
- en: How can I create in an infinite loop with a for loop?
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何使用for循环创建一个无限循环？
- en: '*Solution*: `for(;;)` is the same as `while(true)`.'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：`for(;;)`与`while(true)`相同。'
- en: What's wrong with the following loop?
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下循环有什么问题？
- en: '[PRE4]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The while loop condition uses `=` instead of `==` so it is an assignment statement
    (which makes `done` always `false` and the body of the loop will never be executed).
    It's better to style to avoid using `==`.
  id: totrans-86
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: while循环条件使用`=`而不是`==`，因此是一个赋值语句（这使得`done`始终为`false`，循环体永远不会被执行）。最好避免使用`==`。
- en: '[PRE5]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: What's wrong with the following loop that is intended to compute the sum of
    the integers 1 through 100?
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下循环有什么问题，它旨在计算1到100之间整数的总和？
- en: '[PRE6]'
  id: totrans-89
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The variable `sum` should be defined outside the loop. By defining it inside
    the loop, a new variable `sum` is initialized to 0 each time through the loop;
    also it is not even accessible outside the loop.
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 变量`sum`应该在循环外定义。通过在循环内定义它，每次循环时都会初始化一个新的`sum`变量为0；而且在循环外部无法访问它。
- en: Write a program [Hurricane.java](Hurricane.java.html) that that takes the wind
    speed (in miles per hour) as an integer command-line argument and prints whether
    it qualifies as a hurricane, and if so, whether it is a Category 1, 2, 3, 4, or
    5 hurricane. Below is a table of the wind speeds according to the [Saffir-Simpson
    scale](http://www.marinewaypoints.com/marine/wind.shtml).
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[Hurricane.java](Hurricane.java.html)，将风速（以英里/小时为单位）作为整数命令行参数，并打印出它是否符合飓风标准，如果是的话，它是1、2、3、4还是5级飓风。下面是根据[Saffir-Simpson飓风等级](http://www.marinewaypoints.com/marine/wind.shtml)的风速表。
- en: '| Category | Wind Speed (mph) |'
  id: totrans-92
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 类别 | 风速（英里/小时） |'
- en: '| 1 | 74 - 95 |'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 1 | 74 - 95 |'
- en: '| 2 | 96 - 110 |'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 2 | 96 - 110 |'
- en: '| 3 | 111 - 130 |'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 3 | 111 - 130 |'
- en: '| 4 | 131 - 155 |'
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 4 | 131 - 155 |'
- en: '| 5 | 155 and above |'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 5 | 155及以上 |'
- en: What is wrong with the following code fragment?
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段有什么问题？
- en: '[PRE7]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Solution*: It uses the assignment operator `=` instead of the equality operator
    `==`. A better solution is to write `if (isPositive)`.'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：它使用赋值运算符`=`而不是相等运算符`==`。更好的解决方案是写成`if (isPositive)`。'
- en: Change/add one character so that the following program prints 20 xs. There are
    two different solutions.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 改变/添加一个字符，使得以下程序打印出20个x。有两种不同的解决方案。
- en: '[PRE8]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Solution*: Replace the i < n condition with -i < n. Replace the i-- with n--.
    ( In C, there is a third: replace the < with a +.)'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：将i < n的条件替换为-i < n。将i--替换为n--。（在C中，还有第三种解决方案：将<替换为+。）'
- en: What does the following code fragment do?
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段做什么？
- en: '[PRE9]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Solution*: always prints `positive` regardless of the value of `x` because
    of the extra semicolon after the `if` statement.'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：无论`x`的值如何，由于在`if`语句后面多了一个分号，总是打印`positive`。'
- en: '**RGB to HSB converter.** Write a program `RGBtoHSV.java` that takes an RGB
    color (three integers between 0 and 255) and transforms it to an [HSB color](http://en.wikipedia.org/wiki/HSV_color_space)
    (three different integers between 0 and 255). Write a program `HSVtoRGB.java`
    that applies the inverse transformation.'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**RGB转HSB转换器。** 编写一个名为`RGBtoHSV.java`的程序，该程序接受RGB颜色（0到255之间的三个整数）并将其转换为[HSB颜色](http://en.wikipedia.org/wiki/HSV_color_space)（0到255之间的三个不同整数）。编写一个名为`HSVtoRGB.java`的程序，应用逆转换。'
- en: '**Boys and girls.** A couple beginning a family decides to keep having children
    until they have at least one of either sex. Estimate the average number of children
    they will have via simulation. Also estimate the most common outcome (record the
    frequency counts for 2, 3, and 4 children, and also for 5 and above). Assume that
    the probability p of having a boy or girl is 1/2.'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**男孩和女孩。** 一对开始组建家庭的夫妇决定继续生育，直到他们至少有一个性别。通过模拟估计他们将拥有的平均子女数量。还估计最常见的结果（记录2、3和4个孩子的频率计数，以及5个及以上的孩子）。假设男孩或女孩的概率p为1/2。'
- en: What does the following program do?
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下程序做什么？
- en: '[PRE10]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Solution*: Prints all of the powers of 2 less than or equal to n.'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：打印小于或等于n的所有2的幂。'
- en: '**Boys and girls.** Repeat the previous question, but assume the couple keeps
    having children until they have another child which is of the same sex as the
    first child. How does your answer change if p is different from 1/2?'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**男孩和女孩。** 重复上一个问题，但假设夫妇继续生育，直到他们有另一个与第一个孩子性别相同的孩子。如果p与1/2不同，您的答案会如何改变？'
- en: '*Surprisingly, the average number of children is 2 if p = 0 or 1, and 3 for
    all other values of p. But the most likely value is 2 for all values of p.*'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*令人惊讶的是，如果p = 0或1，则平均子女数为2，对于所有其他p值，则为3。但对于所有p值，最可能的值是2。*'
- en: Given two positive integers `a` and `b`, what result does the following code
    fragment leave in `c`
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定两个正整数`a`和`b`，以下代码片段在`c`中留下什么结果
- en: '[PRE11]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '*Solution*: a * b.'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：a * b。'
- en: Write a program using a loop and four conditionals to print
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用循环和四个条件语句编写一个程序来打印
- en: '[PRE12]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: What does the following program print?
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下程序打印什么？
- en: '[PRE13]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Alice tosses a fair coin until she sees two consecutive heads. Bob tosses another
    fair coin until he sees a head followed by a tail. Write a program to estimate
    the probability that Alice will make fewer tosses than Bob? *Solution*: [39/121](http://math.smsu.edu/~les/Adv51.html).'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 爱丽丝抛一枚公平硬币，直到她看到两个连续的正面。鲍勃抛另一枚公平硬币，直到他看到一个正面后面跟着一个反面。编写一个程序来估计爱丽丝比鲍勃少抛硬币的概率？*解决方案*：[39/121](http://math.smsu.edu/~les/Adv51.html)。
- en: Rewrite [DayOfWeek.java](../12types/DayOfWeek.java.html) from Exercise 1.2.29
    so that it prints the day of the week as Sunday, Monday, and so forth instead
    of an integer between 0 and 6\. Use a `switch` statement.
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新编写[DayOfWeek.java](../12types/DayOfWeek.java.html)，使其打印星期几，例如星期日、星期一等，而不是0到6之间的整数。使用`switch`语句。
- en: '**Number-to-English.** Write a program to read in a command line integer between
    -999,999,999 and 999,999,999 and print the English equivalent. Here is an exhaustive
    list of words that your program should use: negative, zero, one, two, three, four,
    five, six, seven, eight, nine, ten, eleven, twelve, thirteen, fourteen, fifteen,
    sixteen, seventeen, eighteen, nineteen, twenty, thirty, forty, fifty, sixty, seventy,
    eighty, ninety, hundred, thousand, million . Don''t use hundred, when you can
    use thousand, e.g., use one thousand five hundred instead of fifteen hundred.
    [Reference](http://acm.pku.edu.cn/JudgeOnline/showproblem?problem_id=2121).'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**数字转英文。** 编写一个程序，读取介于-999,999,999和999,999,999之间的命令行整数，并打印英文等价物。以下是您的程序应使用的单词的详尽列表：negative,
    zero, one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve,
    thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen, twenty, thirty,
    forty, fifty, sixty, seventy, eighty, ninety, hundred, thousand, million。当您可以使用千时，请不要使用百，例如，使用一千五百而不是一千五百。[参考](http://acm.pku.edu.cn/JudgeOnline/showproblem?problem_id=2121)。'
- en: '**Gymnastics judging.** A gymnast''s score is determined by a panel of 6 judges
    who each decide a score between 0.0 and 10.0\. The final score is determined by
    discarding the high and low scores, and averaging the remaining 4. Write a program
    `GymnasticsScorer.java` that takes 6 real command line inputs representing the
    6 scores and prints their average, after throwing out the high and low scores.'
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**体操评分。** 体操运动员的得分由6名评委组成的小组决定，每位评委决定0.0到10.0之间的得分。最终得分是通过丢弃最高和最低分数，然后对剩余的4个分数取平均值来确定的。编写一个名为`GymnasticsScorer.java`的程序，该程序接受代表6个分数的6个实数命令行输入，并打印它们的平均值，在丢弃最高和最低分数后。'
- en: '**Quarterback rating.** To compare NFL quarterbacks, the NFL devised a the
    [quarterback rating](http://www.mathnotes.com/aw_quarterback.html) formula based
    on the quarterbacks number of completed passes (A), pass attempts (B), passing
    yards (C), touchdown passes (D), and interception (E) as follows:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**四分卫评分。** 为了比较NFL四分卫，NFL设计了基于四分卫完成传球次数（A）、传球尝试次数（B）、传球码数（C）、触球传球（D）和拦截（E）的[四分卫评分](http://www.mathnotes.com/aw_quarterback.html)公式如下：'
- en: 'Completion ratio: W = 250/3 * ((A / B) - 0.3).'
  id: totrans-126
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成比率：W = 250/3 * ((A / B) - 0.3)。
- en: 'Yards per pass: X = 25/6 * ((C / B) - 3).'
  id: totrans-127
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次传球码数：X = 25/6 * ((C / B) - 3)。
- en: 'Touchdown ratio: Y = 1000/3 * (D / B)'
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 触球比率：Y = 1000/3 * (D / B)
- en: 'Interception ratio: Z = 1250/3 * (0.095 - (E / B))The *quarterback rating*
    is computed by summing up the above four quantities, but rounding up or down each
    value so that it is at least 0 and and at most 475/12. Write a program `QuarterbackRating.java`
    that takes five command line inputs A, B, C, D, and E, and prints the quarterback
    rating. Use your program to compute Steve Young''s 1994 record-setting season
    (112.8) in which he completed 324 of 461 passes for 3,969 yards, and threw 35
    touchdowns and 10 interceptions. As of 2014, the all-time single-season record
    is 122.5 by Aaron Rodgers in 2011.'
  id: totrans-129
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 拦截比率：Z = 1250/3 * (0.095 - (E / B))四分卫评分通过总结上述四个量来计算，但将每个值四舍五入，使其至少为0，最多为475/12。编写一个名为`QuarterbackRating.java`的程序，该程序接受五个命令行输入A、B、C、D和E，并打印四分卫评分。使用您的程序计算史蒂夫·杨（Steve
    Young）在1994年创下的纪录赛季（112.8），他完成了461次传球中的324次，总共3969码，投出35次触球和10次拦截。截至2014年，单赛季最高纪录是2011年阿伦·罗杰斯（Aaron
    Rodgers）的122.5。
- en: '**Decimal expansion of rational numbers.** Given two integers p and q, the
    decimal expansion of p/q has an infinitely repeating cycle. For example, 1/33
    = 0.03030303.... We use the notation 0.(03) to denote that 03 repeats indefinitely.
    As another example, 8639/70000 = 0.1234(142857). Write a program `DecimalExpansion.java`
    that reads in two command line integers p and q and prints the decimal expansion
    of p/q using the above notation. *Hint*: use Floyd''s rule.'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**有理数的十进制扩展。**给定两个整数p和q，p/q的十进制扩展具有无限重复循环。例如，1/33 = 0.03030303....我们使用符号0.(03)表示03无限重复。另一个例子，8639/70000
    = 0.1234(142857)。编写一个名为`DecimalExpansion.java`的程序，该程序读取两个命令行整数p和q，并使用上述符号打印p/q的十进制扩展。*提示*：使用Floyd的规则。'
- en: '**Friday the 13th.** What is the maximum number of consecutive days in which
    no Friday the 13th occurs? *Hint*: The Gregorian calendar repeats itself every
    400 years (146097 days) so you only need to worry about a 400 year interval.'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**黑色星期五。**在连续的天数中，没有星期五13号出现的最大天数是多少？*提示*：格里高利历每400年（146097天）重复一次，因此您只需要担心400年的间隔。'
- en: '*Solution*: 426 (e.g., from 8/13/1999 to 10/13/2000).'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：426（例如，从1999年8月13日到2000年10月13日）。'
- en: '**January 1.** Is January 1 more likely to fall on a Saturday or Sunday? Write
    a program to determine the number of times each occurs in a 400 year interval.'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**1月1日。**1月1日更有可能是星期六还是星期日？编写一个程序来确定在400年间隔中每个日期发生的次数。'
- en: '*Solution:* Sunday (58 times) is more likely than Saturday (56 times).'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：周日（58次）比周六（56次）更有可能。'
- en: What do the following two code fragments do?
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下两个代码片段分别做什么？
- en: '[PRE14]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Determine what value gets printed out without using a computer. Choose the correct
    answer from 0, 100, 101, 517, or 1000.
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 不使用计算机确定打印出的值是多少。从0、100、101、517或1000中选择正确答案。
- en: '[PRE15]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Rewrite [CarLoan.java](../22types/CarLoan.java.html) from Creative Exercise
    XYZ so that it properly handles an interest rate of 0% and avoids dividing by
    0.
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重写Creative Exercise XYZ中的[CarLoan.java](../22types/CarLoan.java.html)，以便正确处理0%的利率并避免除以0。
- en: Write the shortest Java program you can that takes an integer command-line argument
    n and prints `true` if (1 + 2 + ... + n) ² is equal to (1³ + 2³ + ... + n³).
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写您可以的最短的Java程序，该程序接受一个整数命令行参数n，并在(1 + 2 + ... + n)²等于(1³ + 2³ + ... + n³)时打印`true`。
- en: '*Solution*: Always print `true`.'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：始终打印`true`。'
- en: Modify [Sqrt.java](Sqrt.java.html) so that it reports an error if the user enters
    a negative number and works properly if the user enters zero.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改[Sqrt.java](Sqrt.java.html)以便在用户输入负数时报告错误，并在用户输入零时正常工作。
- en: What happens if we initialize `t` to `-x` instead of `x` in program [Sqrt.java](Sqrt.java.html)?
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果在程序[Sqrt.java](Sqrt.java.html)中将`t`初始化为`-x`而不是`x`会发生什么？
- en: '**Sample standard deviation of uniform distribution.** Modify Exercise 8 so
    that it prints the sample standard deviation in addition to the average.'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**均匀分布的样本标准差。**修改练习8，以便除了平均值外还打印样本标准差。'
- en: '**Sample standard deviation of normal distribution.** that takes an integer
    N as a command-line argument and uses Web Exercise 1 from [Section 1.2](../12types)
    to print N standard normal random variables, and their average value, and sample
    standard deviation.'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**正态分布的样本标准差。**接受一个整数N作为命令行参数，并使用[第1.2节](../12types)中的Web练习1打印N个标准正态随机变量，以及它们的平均值和样本标准差。'
- en: '**Loaded dice.** [Stephen Rudich] Suppose you have three, three sided dice.
    A: {2, 6, 7}, B: { 1, 5, 9}, and C: {3, 4, 8}. Two players roll a die and the
    one with the highest value wins. Which die would you choose? *Solution*: A beats
    B with probability 5/9, B beats C with probability 5/9 and C beats A with probability
    5/9. Be sure to choose second!'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**偏斜骰子。**[斯蒂芬·鲁迪奇]假设您有三个三面骰子。A：{2, 6, 7}，B：{1, 5, 9}，C：{3, 4, 8}。两名玩家掷骰子，值最高者获胜。您会选择哪个骰子？*解决方案*：A以5/9的概率击败B，B以5/9的概率击败C，C以5/9的概率击败A。一定要选择第二个！'
- en: '**Thue–Morse sequence.** Write a program [ThueMorse.java](ThueMorse.java.html)
    that reads in a command line integer n and prints the [Thue–Morse sequence](http://mathworld.wolfram.com/Thue-MorseSequence.html)
    of order n. The first few strings are 0, 01, 0110, 01101001\. Each successive
    string is obtained by flipping all of the bits of the previous string and concatenating
    the result to the end of the previous string. The sequence has many amazing properties.
    For example, it is a binary sequence that is *cube-free*: it does not contain
    000, 111, 010101, or `sss` where `s` is any string. It is *self-similar*: if you
    delete every other bit, you get another Thue–Morse sequence. It arises in diverse
    areas of mathematics as well as chess, graphic design, [weaving patterns](http://www.cs.arizona.edu/patterns/weaving/webdocs/gre_mt.pdf),
    and music composition.'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Thue–Morse序列。**编写一个程序[ThueMorse.java](ThueMorse.java.html)，读取一个命令行整数n，并打印n阶的[Thue–Morse序列](http://mathworld.wolfram.com/Thue-MorseSequence.html)。前几个字符串是0、01、0110、01101001。每个后续字符串都是通过翻转前一个字符串的所有位并将结果连接到前一个字符串的末尾而获得的。该序列具有许多惊人的特性。例如，它是一个*无立方体*的二进制序列：它不包含000、111、010101或`sss`，其中`s`是任何字符串。它是*自相似*的：如果删除每隔一个位，您将得到另一个Thue–Morse序列。它在数学领域以及国际象棋、图形设计、[编织图案](http://www.cs.arizona.edu/patterns/weaving/webdocs/gre_mt.pdf)和音乐作曲中都有出现。'
- en: 'Program [Binary.java](Binary.java.html) prints the binary representation of
    a decimal number n by casting out powers of 2. Write an alternate version Program
    [Binary2.java](Binary2.java.html) that is based on the following method: Write
    1 if n is odd, 0 if n is even. Divide n by 2, throwing away the remainder. Repeat
    until n = 0 and read the answer backwards. Use `%` to determine whether n is even,
    and use string concatenation to form the answer in reverse order.'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 程序[Binary.java](Binary.java.html)通过去除2的幂来打印十进制数n的二进制表示。编写一个基于以下方法的替代版本程序[Binary2.java](Binary2.java.html)：如果n是奇数，则写1，如果n是偶数，则写0。将n除以2，舍弃余数。重复直到n
    = 0，并将答案倒过来读。使用`%`确定n是否为偶数，并使用字符串连接以逆序形成答案。
- en: What does the following code fragment do?
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段做什么？
- en: '[PRE16]'
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '*Solution*: The number of bits in the binary representation of a natural number
    n. We use a `do-while` loop so that code output 1 if n = 0.'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：自然数n的二进制表示中的位数。我们使用`do-while`循环，因此当n = 0时，代码输出1。'
- en: Write a program `NPerLine.java` that takes an integer command-line argument
    `n` and prints the integers from 10 to 99 with `n` integers per line.
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序`NPerLine.java`，接受一个整数命令行参数`n`，并打印从10到99的整数，每行打印n个整数。
- en: Modify `NPerLine.java` so that it prints the integers from 1 to 1000 with `n`
    integers per line. Make the integers line up by printing the right number of spaces
    before an integer (e.g., three for 1-9, two for 10-99, and one for 100-999).
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`NPerLine.java`，使其每行打印从1到1000的整数，每行打印n个整数。通过在整数前打印正确数量的空格使整数对齐（例如，1-9为三个空格，10-99为两个空格，100-999为一个空格）。
- en: 'Suppose a, b, and c are random number uniformly distributed between 0 and 1\.
    What is the probability that a, b, and c form the side length of some triangle?
    *Hint*: they will form a triangle if and only if the sum of every two values is
    larger than the third.'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设a、b和c是在0和1之间均匀分布的随机数。a、b和c形成某个三角形的边长的概率是多少？*提示*：只有当任意两个值的和大于第三个值时，它们才会形成一个三角形。
- en: 'Repeat the previous question, but calculate the probability that the resulting
    triangle is obtuse, given that the three numbers for a triangle. *Hint*: the three
    lengths will form an obtuse triangle if and only if (i) the sum of every two values
    is larger than the third and (ii) the sum of the squares of every two side lengths
    is greater than or equal to the square of the third.'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重复上一个问题，但计算得到的三角形是钝角三角形的概率，假设三个数字是一个三角形。*提示*：三条边长度将形成一个钝角三角形，当且仅当（i）任意两个值的和大于第三个值，且（ii）任意两边长度的平方和大于或等于第三边长度的平方。
- en: '[Answer](http://math.smsu.edu/~les/Adv28.html).'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[答案](http://math.smsu.edu/~les/Adv28.html)。'
- en: What is the value of `s` after executing the [following code](DigitReverser.java.html)?
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行[以下代码](DigitReverser.java.html)后，s的值是多少？
- en: '[PRE17]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: What is the value of i after the following [confusing code](Confusion.java.html)
    is executed?
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行以下[混乱的代码](Confusion.java.html)后，i的值是多少？
- en: '[PRE18]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Moral: don''t write code like this.'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 寓意：不要编写这样的代码。
- en: '**Formatted ISBN number.** Write a program [ISBN2.java](ISBN2.java.html) that
    reads in a 9 digit integer from a command-line argument, computes the check digit,
    and prints the fully formatted ISBN number, e.g, 0-201-31452-5.'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**格式化的ISBN号码。** 编写一个程序[ISBN2.java](ISBN2.java.html)，从命令行参数中读取一个9位整数，计算校验位，并打印完全格式化的ISBN号码，例如，0-201-31452-5。'
- en: '**UPC codes.** The Universal Product Code ([UPC](http://mathworld.wolfram.com/UPC.html))
    is a 12 digit code that uniquely specifies a product. The least significant digit
    d[1](rightmost one) is a check digit which is the uniquely determined by making
    the following expression a multiple of 10:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**UPC码。** 通用产品代码（[UPC](http://mathworld.wolfram.com/UPC.html)）是一个12位代码，唯一指定一个产品。最低有效位d[1]（最右边的一位）是一个校验位，通过使以下表达式成为10的倍数来唯一确定：'
- en: (d[1] + d[3] + d[5] + d[7] + d[9] + d[11]) + 3 (d[2] + d[4] + d[6] + d[8] +
    d[10] + d[12])
  id: totrans-164
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: (d[1] + d[3] + d[5] + d[7] + d[9] + d[11]) + 3 (d[2] + d[4] + d[6] + d[8] +
    d[10] + d[12])
- en: As an example, the check digit corresponding to 0-48500-00102 (Tropicana Pure
    Premium Orange Juice) is 8 since
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，对应于0-48500-00102（Tropicana Pure Premium Orange Juice）的校验位是8，因为
- en: (8 + 0 + 0 + 0 + 5 + 4) + 3 (2 + 1 + 0 + 0 + 8 + 0) = 50
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: (8 + 0 + 0 + 0 + 5 + 4) + 3 (2 + 1 + 0 + 0 + 8 + 0) = 50
- en: 'and 50 is a multiple of 10. Write a program that reads in a 11 digit integer
    from a command line parameter, computes the check digit, and prints the the full
    UPC. *Hint*: use a variable of type `long` to store the 11 digit number.'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 并且50是10的倍数。编写一个程序，从命令行参数读取一个11位整数，计算校验位，并打印完整的UPC。*提示*：使用`long`类型的变量存储11位数。
- en: Write a program that reads in the wind speed (in knots) as a command line argument
    and prints its force according to the [Beaufort scale](http://boating.ncf.ca/beaufort.html).
    Use a `switch` statement.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，将风速（以节为单位）作为命令行参数读入，并根据[伯福特风级表](http://boating.ncf.ca/beaufort.html)打印其风力。使用`switch`语句。
- en: '**Making change.** Write a program that reads in a command line integer N (number
    of pennies) and prints the best way (fewest number of coins) to make change using
    US coins (quarters, dimes, nickels, and pennies only). For example, if N = 73
    then print'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**找零钱。** 编写一个程序，读取一个命令行整数N（便士数），并打印使用美国硬币（仅限25美分、10美分、5美分和1美分）找零的最佳方式（硬币数量最少）。例如，如果N
    = 73，则打印'
- en: '[PRE19]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '*Hint*: use the greedy algorithm. That is, dispense as many quarters as possible,
    then dimes, then nickels, and finally pennies.'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：使用贪婪算法。即，尽可能多地发放25美分硬币，然后是10美分硬币，然后是5美分硬币，最后是1美分硬币。'
- en: Write a program [Triangle.java](Triangle.java.html) that takes a command-line
    argument N and prints an N-by-N triangular pattern like the one below.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[Triangle.java](Triangle.java.html)，接受一个命令行参数N并打印一个N-by-N的三角形图案。
- en: '[PRE20]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Write a program [Ex.java](Ex.java.html) that takes a command-line argument N
    and prints a (2N + 1)-by-(2N + 1) ex like the one below. Use two `for` loops and
    one `if-else` statement.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[Ex.java](Ex.java.html)，接受一个命令行参数N并打印一个(2N + 1)-by-(2N + 1)的X图案。使用两个`for`循环和一个`if-else`语句。
- en: '[PRE21]'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Write a program [BowTie.java](BowTie.java.html) that takes a command-line argument
    N and prints a (2N + 1)-by-(2N + 1) bowtie like the one below. Use two `for` loops
    and one `if-else` statement.
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[BowTie.java](BowTie.java.html)，接受一个命令行参数N并打印一个(2N + 1)-by-(2N + 1)的蝴蝶结图案。使用两个`for`循环和一个`if-else`语句。
- en: '[PRE22]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Write a program [Diamond.java](Diamond.java.html) that takes a command-line
    argument N and prints a (2N + 1)-by-(2N + 1) diamond like the one below.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[Diamond.java](Diamond.java.html)，接受一个命令行参数N并打印一个(2N + 1)-by-(2N + 1)的菱形图案。
- en: '[PRE23]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Write a program [Heart.java](Heart.java.html) that takes a command-line argument
    N and prints a heart.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[Heart.java](Heart.java.html)，接受一个命令行参数N并打印一个心形。
- en: What does the program [Circle.java](Circle.java.html) print out when N = 5?
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当N = 5时，程序[Circle.java](Circle.java.html)打印出什么？
- en: '[PRE24]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '**Seasons.** Write a program `Season.java` that takes two command line integers
    M and D and prints the season corresponding to month M (1 = January, 12 = December)
    and day D in the northern hemisphere. Use the following table'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**季节。** 编写一个名为`Season.java`的程序，接受两个命令行整数M和D，并打印对应于北半球月份M（1 = 1月，12 = 12月）和日期D的季节。使用以下表格'
- en: '| SEASON | FROM | TO |'
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 季节 | 从 | 到 |'
- en: '| Spring | March 21 | June 20 |'
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 春季 | 3月21日 | 6月20日 |'
- en: '| Summer | June 21 | September 22 |'
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 夏季 | 6月21日 | 9月22日 |'
- en: '| Fall | September 23 | December 21 |'
  id: totrans-187
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 秋季 | 9月23日 | 12月21日 |'
- en: '| Winter | December 21 | March 20 |'
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 冬季 | 12月21日 | 3月20日 |'
- en: '**Zodiac signs.** Write a program `Zodiac.java` that takes two command line
    integers M and D and prints the Zodiac sign corresponding to month M (1 = January,
    12 = December) and day D. Use the following table'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**星座。** 编写一个名为`Zodiac.java`的程序，接受两个命令行整数M和D，并打印对应于月份M（1 = 1月，12 = 12月）和日期D的星座。使用以下表格'
- en: '| SIGN | FROM | TO |'
  id: totrans-190
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 星座 | 从 | 到 |'
- en: '| Capricorn | December 22 | January 19 |'
  id: totrans-191
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 摩羯座 | 12月22日 | 1月19日 |'
- en: '| Aquarius | January 20 | February 17 |'
  id: totrans-192
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 水瓶座 | 1月20日 | 2月17日 |'
- en: '| Pisces | February 18 | March 19 |'
  id: totrans-193
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 双鱼座 | 2月18日 | 3月19日 |'
- en: '| Aries | March 20 | April 19 |'
  id: totrans-194
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 白羊座 | 3月20日 | 4月19日 |'
- en: '| Taurus | April 20 | May 20 |'
  id: totrans-195
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 金牛座 | 4月20日 | 5月20日 |'
- en: '| Gemini | May 21 | June 20 |'
  id: totrans-196
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 双子座 | 5月21日 | 6月20日 |'
- en: '| Cancer | June 21 | July 22 |'
  id: totrans-197
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 巨蟹座 | 6月21日 | 7月22日 |'
- en: '| Leo | July 23 | August 22 |'
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 狮子座 | 7月23日 | 8月22日 |'
- en: '| Virgo | August 23 | September 22 |'
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 处女座 | 8月23日 | 9月22日 |'
- en: '| Libra | September 23 | October 22 |'
  id: totrans-200
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 天秤座 | 9月23日 | 10月22日 |'
- en: '| Scorpio | October 23 | November 21 |'
  id: totrans-201
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 天蝎座 | 10月23日 | 11月21日 |'
- en: '| Sagittarius | November 22 | December 21 |'
  id: totrans-202
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 射手座 | 11月22日 | 12月21日 |'
- en: '**Muay Thai kickboxing.** Write a program that reads in the weight of a Muay
    Thai kickboxer (in pounds) as a command-line argument and prints their weight
    class. Use a `switch` statement.'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**泰拳搏击。** 编写一个程序，通过命令行参数读取泰拳搏击手的体重（以磅为单位），并打印他们的体重级别。使用`switch`语句。'
- en: '| CLASS | FROM | TO |'
  id: totrans-204
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 级别 | 从 | 到 |'
- en: '| Flyweight | 0 | 112 |'
  id: totrans-205
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 雏量级 | 0 | 112 |'
- en: '| Super flyweight | 112 | 115 |'
  id: totrans-206
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 超级雏量级 | 112 | 115 |'
- en: '| Bantamweight | 115 | 118 |'
  id: totrans-207
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 幼量级 | 115 | 118 |'
- en: '| Super bantamweight | 118 | 122 |'
  id: totrans-208
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 超级雏量级 | 118 | 122 |'
- en: '| Featherweight | 122 | 126 |'
  id: totrans-209
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 羽量级 | 122 | 126 |'
- en: '| Super featherweight | 126 | 130 |'
  id: totrans-210
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 超级羽量级 | 126 | 130 |'
- en: '| Lightweight | 130 | 135 |'
  id: totrans-211
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 轻量级 | 130 | 135 |'
- en: '| Super lightweight | 135 | 140 |'
  id: totrans-212
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 超级轻量级 | 135 | 140 |'
- en: '| Welterweight | 140 | 147 |'
  id: totrans-213
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 欢迎量级 | 140 | 147 |'
- en: '| Super welterweight | 147 | 154 |'
  id: totrans-214
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 超级次中量级 | 147 | 154 |'
- en: '| Middleweight | 154 | 160 |'
  id: totrans-215
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 中量级 | 154 | 160 |'
- en: '| Super middleweight | 160 | 167 |'
  id: totrans-216
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 超级中量级 | 160 | 167 |'
- en: '| Light heavyweight | 167 | 175 |'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 轻重量级 | 167 | 175 |'
- en: '| Super light heavyweight | 175 | 183 |'
  id: totrans-218
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 超级轻重量级 | 175 | 183 |'
- en: '| Cruiserweight | 183 | 190 |'
  id: totrans-219
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 重量级 | 183 | 190 |'
- en: '| Heavyweight | 190 | 220 |'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 重量级 | 190 | 220 |'
- en: '| Super heavyweight | 220 | - |'
  id: totrans-221
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_TB
  zh: '| 超级重量级 | 220 | - |'
- en: '**Euler''s sum of powers conjecture.** In 1769 Euler generalized Fermat''s
    Last Theorem and conjectured that it is impossible to find three 4th powers whose
    sum is a 4th power, or four 5th powers whose sum is a 5th power, etc. The conjecture
    was disproved in 1966 by exhaustive computer search. Disprove the conjecture by
    finding positive integers a, b, c, d, and e such that a⁵ + b⁵ + c⁵ + d⁵= e⁵. Write
    a program [Euler.java](Euler.java.html) that reads in a command line parameter
    N and exhaustively searches for all such solutions with a, b, c, d, and e less
    than or equal to N. No counterexamples are known for powers greater than 5, but
    you can join [EulerNet](http://euler.free.fr/index.htm), a distributed computing
    effort to find a counterexample for sixth powers.'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**欧拉幂和猜想。** 1769年，欧拉推广了费马大定��，并猜想找不到三个4次幂的和是4次幂，或者四个5次幂的和是5次幂，等等。这个猜想在1966年被详尽的计算机搜索所证伪。通过找到正整数a、b、c、d和e，使得a⁵
    + b⁵ + c⁵ + d⁵= e⁵来证伪这个猜想。编写一个程序[Euler.java](Euler.java.html)，读取一个命令行参数N，并详尽搜索所有这样的解，其中a、b、c、d和e小于或等于N。对于大于5的幂，目前没有反例，但您可以加入[EulerNet](http://euler.free.fr/index.htm)，这是一个分布式计算项目，旨在找到第六次幂的反例。'
- en: '**Blackjack.** Write a program `Blackjack.java` that takes three command line
    integers x, y, and z representing your two blackjack cards x and y, and the dealers
    face-up card z, and prints the "standard strategy" for a 6 card deck in Atlantic
    city. Assume that x, y, and z are integers between 1 and 10, representing an ace
    through a face card. Report whether the player should hit, stand, or split according
    to these [strategy tables](http://www.blackjackinfo.com/cgi-bin/bjbse.cgi?game=ac6).
    (When you learn about arrays, you will encounter an alternate strategy that does
    not involve as many if-else statements).'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**二十一点。** 编写一个名为`Blackjack.java`的程序，接受三个命令行整数x、y和z，表示您的两张二十一点牌x和y，以及庄家的明牌z，并打印大西洋城6副牌的“标准策略”。假设x、y和z是1到10之间的整数，表示从A到面牌。根据这些[策略表](http://www.blackjackinfo.com/cgi-bin/bjbse.cgi?game=ac6)报告玩家应该要牌、停牌还是分牌。
    （当您学习数组时，您将遇到一种不涉及太多if-else语句的替代策略）。'
- en: '**Blackjack with doubling.** Modify the previous exercise to allow *doubling*.'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**带加倍的二十一点。** 修改前面的练习以允许*加倍*。'
- en: '**Projectile motion.** The following equation gives the trajectory of a ballistic
    missile as a function of the initial angle theta and windspeed: xxxx. Write a
    java program to print the (x, y) position of the missile at each time step t.
    Use trial and error to determine at what angle you should aim the missile if you
    hope to incinerate a target located 100 miles due east of your current location
    and at the same elevation. Assume the windspeed is 20 mph due east.'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**抛射运动。** 以下方程式给出了弹道导弹的轨迹作为初始角度theta和风速的函数：xxxx。编写一个Java程序，在每个时间步长t打印导弹的（x，y）位置。使用试错法确定如果希望焚烧位于当前位置正东100英里处且海拔相同的目标，应该瞄准导弹的角度。假设风速为东风20英里/小时。'
- en: '**World series.** The baseball world series is a best of 7 competition, where
    the first team to win four games wins the World Series. Suppose the stronger team
    has probability p > 1/2 of winning each game. Write a program to estimate the
    chance that the weaker teams wins the World Series and to estimate how many games
    on average it will take.'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**世界大赛。** 棒球世界大赛是一场7局4胜的比赛，第一支赢得四场比赛的球队将赢得世界大赛。假设更强的球队在每场比赛中获胜的概率为p > 1/2。编写一个程序来估计较弱球队赢得世界大赛的机会，并估计平均需要多少场比赛。'
- en: Consider the equation (9/4)^x = x^(9/4). One solution is 9/4\. Can you find
    another one using Newton's method?
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 考虑方程（9/4）^x = x^(9/4)。一个解是9/4。你能使用牛顿法找到另一个解吗？
- en: '**Sorting networks.** Write a program [Sort3.java](Sort3.java.html) with three
    `if` statements (and no loops) that reads in three integers *a*, *b*, and *c*
    from the command line and prints them out in ascending order.'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**排序网络。** 编写一个程序[Sort3.java](Sort3.java.html)，其中有三个`if`语句（没有循环），从命令行读取三个整数*a*、*b*和*c*，并按升序打印它们。'
- en: '[PRE25]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '**Oblivious sorting network.** Convince yourself that the following code fragment
    rearranges the integers stored in the variables A, B, C, and D so that A <= B
    <= C <= D.'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**遗忘排序网络。** 说服自己以下代码片段重新排列存储在变量A、B、C和D中的整数，使得A <= B <= C <= D。'
- en: '[PRE26]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Devise a sequence of statements that would sort 5 integers. How many `if` statements
    does your program use?
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 设计一系列语句来对5个整数进行排序。你的程序使用了多少个`if`语句？
- en: '**Optimal oblivious sorting networks.** Create a program that sorts four integers
    using only 5 `if` statements, and one that sorts five integers using only 9 `if`
    statements of the type above? Oblivious sorting networks are useful for implementing
    sorting algorithms in hardware. How can you check that your program works for
    all inputs?'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最佳遗忘排序网络。** 创建一个程序，使用仅5个`if`语句对四个整数进行排序，并使用仅9个上述类型的`if`语句对五个整数进行排序。遗忘排序网络对于在硬件中实现排序算法非常有用。你如何检查你的程序对所有输入都有效？'
- en: '*Solution*: [Sort4.java](Sort4.java.html) sorts 4 elements using 5 compare-exchanges.
    [Sort5.java](Sort5.java.html) sorts 5 elements using 9 compare-exchanges.'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：[Sort4.java](Sort4.java.html)使用5次比较交换对4个元素进行排序。[Sort5.java](Sort5.java.html)使用9次比较交换对5个元素进行排序。'
- en: The *0-1 principle* asserts that you can verify the correctness of a (deterministic)
    sorting algorithm by checking whether it correctly sorts an input that is a sequence
    of 0s and 1s. Thus, to check that `Sort5.java` works, you only need to test it
    on the 2^5 = 32 possible inputs of 0s and 1s.
  id: totrans-235
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*0-1原则*断言您可以通过检查一个由0和1序列组成的输入是否正确排序来验证（确定性）排序算法的正确性。因此，要检查`Sort5.java`是否有效，您只需要在32个可能的0和1序列输入上进行测试。'
- en: '**Optimal oblivious sorting (challenging).** Find an optimal sorting network
    for 6, 7, and 8 inputs, using 12, 16, and 19 `if` statements of the form in the
    previous problem, respectively.'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最佳遗忘排序（具有挑战性）。** 找到一个最佳的排序网络，用于6、7和8个输入，分别使用12、16和19个前一个问题中形式的`if`语句。'
- en: '*Solution*: [Sort6.java](Sort6.java.html) is the solution for sorting 6 elements.'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：[Sort6.java](Sort6.java.html)是对6个元素进行排序的解决方案。'
- en: '**Optimal non-oblivious sorting.** Write a program that sorts 5 inputs using
    only 7 comparisons. *Hint*: First compare the first two numbers, the second two
    numbers, and the larger of the two groups, and label them so that a < b < d and
    c < d. Second, insert the remaining element e into its proper place in the chain
    a < b < d by first comparing against b, then either a or d depending on the outcome.
    Third, insert c into the proper place in the chain involving a, b, d, and e in
    the same manner that you inserted e (with the knowledge that c < d). This uses
    3 (first step) + 2 (second step) + 2 (third step) = 7 comparisons. This method
    was first discovered by H. B. Demuth in 1956.'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最佳非遗忘排序。** 编写一个程序，使用仅7次比较对5个输入进行排序。*提示*：首先比较前两个数字，然后比较后两个数字，再比较两组中较大的数字，并标记它们，使得a
    < b < d且c < d。其次，通过首先与b比较，然后根据结果与a或d比较，将剩余元素e插入到链条a < b < d的正确位置。第三，通过与b比较，然后根据结果与a或d比较，将c插入到涉及a、b、d和e的链条中的正确位置（知道c
    < d）。这使用了3（第一步）+ 2（第二步）+ 2（第三步）= 7次比较。这种方法最初由H.B. Demuth在1956年发现。'
- en: '**Weather balloon.** (Etter and Ingber, p. 123) Suppose that h(t) = 0.12t⁴
    + 12t³ - 380t² + 4100t + 220 represents the height of a weather balloon at time
    t (measured in hours) for the first 48 hours after its launch. Create a table
    of the height at time t for t = 0 to 48. What is its maximum height? *Solution*:
    t = 5.'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**气象气球。** （Etter和Ingber，第123页）假设h(t) = 0.12t⁴ + 12t³ - 380t² + 4100t + 220表示气象气球在时间t（以小时为单位）后48小时内的高度。创建一个表，列出t
    = 0到48时的高度。它的最大高度是多少？*解决方案*：t = 5。'
- en: Will the following code fragment compile? If so, what will it do?
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段会编译吗？如果会，它会做什么？
- en: '[PRE27]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '*Solution*: It uses the assignment operator `=` instead of the equality operator
    `==` in the conditional. In Java, the result of this statement is an integer,
    but the compiler expects a boolean. As a result, the program will not compile.
    In some languages (notably C and C++), this code fragment will set the variable
    a to 18 and print `equal` without an error.'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：它在条件中使用赋值运算符`=`而不是相等运算符`==`。在Java中，此语句的结果是一个整数，但编译器期望一个布尔值。因此，程序将无法编译。在某些语言（特别是C和C++）中，此代���片段将将变量a设置为18并打印`equal`而不会出现错误。'
- en: '**Gotcha 1.** What does the following code fragment do?'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**陷阱1。** 以下代码片段做什么？'
- en: '[PRE28]'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '*Solution*: it prints `yes`. Note that the conditional uses = instead of ==.
    This means that `a` is assigned the value `true` As a result, the conditional
    expression evaluates to `true`. Java is not immune to the = vs. == error described
    in the previous exercise. For this reason, it is much better style to use `if
    (a)` or `if (!a)` when testing booleans.'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：它打印`yes`。请注意，条件使用=而不是==。这意味着`a`被赋予值`true`。因此，条件表达式评估为`true`。Java并不免疫于前一个练习中描述的=与==错误。因此，在测试布尔值时，最好使用`if
    (a)`或`if (!a)`。'
- en: '**Gotcha 2.** What does the following code fragment do?'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**陷阱2。** 以下代码片段做什么？'
- en: '[PRE29]'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '*Solution*: Always prints 13 since there is a spurious semicolon after the
    `if` statement. Thus, the assignment statement `a = 13;` will be executed even
    though `(x <= y)` It is legal (but uncommon) to have a block that does not belong
    to a conditional statement, loop, or method.'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：由于`if`语句后面有一个多余的分号，所以始终打印13。因此，即使`(x <= y)`，赋值语句`a = 13;`也会被执行。拥有一个不属于条件语句、循环或方法的块是合法的（但不常见）。'
- en: '**Gotcha 3.** What does the following code fragment do?'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**陷阱3。** 以下代码片段做什么？'
- en: '[PRE30]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '*Solution*: It goes into an infinite loop printing `0`. The compound assignment
    statement `x += 0.5` is equivalent to `x = (int) (x + 0.5)`.'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：它进入一个无限循环，打印`0`。复合赋值语句`x += 0.5`等同于`x = (int) (x + 0.5)`。'
- en: What does the following code fragment do?
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段做什么？
- en: '[PRE31]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: It does not compile because the compile cannot guarantee that `rate` is initialized.
    Use `if-else` instead.
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于编译器无法保证`rate`已初始化，因此无法编译。使用`if-else`代替。
- en: '**Application of Newton''s method.** Write a program `BohrRadius.java` that
    finds the radii where the probability of finding the electron in the 4s excited
    state of hydrogen is zero. The probability is given by: *(1 - 3r/4 + r²/8 - r³/192)²
    e^(-r/2)*, where *r* is the radius in units of the Bohr radius (0.529173E-8 cm).
    Use Newton''s method. By starting Newton''s method at different values of *r*,
    you can discover all three roots. *Hint*: use initial values of r= 0, 5, and 13.
    *Challenge*: explain what happens if you use an initial value of r = 4 or 12.'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**牛顿法的应用。** 编写一个程序`BohrRadius.java`，找到氢原子4s激发态中电子出现概率为零的半径。概率由*(1 - 3r/4 +
    r²/8 - r³/192)² e^(-r/2)*给出，其中*r*是以玻尔半径（0.529173E-8厘米）为单位的半径。使用牛顿法。���过在不同的*r*值开始牛顿法，您可以发现所有三个根。*提示*：使用r=
    0、5和13的初始值。*挑战*：解释如果使用初始值r = 4或12会发生什么。'
- en: '**Pepys problem.** In 1693, Samuel Pepys asked Isaac Newton which was more
    likely: getting at least one 1 when rolling a fair die 6 times or getting at least
    two 1''s when rolling a fair die 12 times. Write a program [Pepys.java](Pepys.java.html)
    that uses simulation to determine the correct answer.'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Pepys问题。** 1693年，塞缪尔·皮皮斯问艾萨克·牛顿，在掷一个公平骰子6次时，至少得到一个1的概率更大，还是在掷一个公平骰子12次时至少得到两个1的概率更大。编写一个使用模拟来确定正确答案的程序[Pepys.java](Pepys.java.html)。'
- en: What is the value of the variable s after running the following loop when N
    = 1, 2, 3, 4, and 5.
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在N = 1、2、3、4和5时运行以下循环后，变量s的值是多少。
- en: '[PRE32]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '*Solution*: [Palindrome.java](Palindrome.java.html).'
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：[Palindrome.java](Palindrome.java.html)。'
- en: '**Body mass index.** The [body mass index](http://en.wikipedia.org/wiki/Body_mass_index)
    (BMI) is the ratio of the weight of a person (in kilograms) to the square of the
    height (in meters). Write a program `BMI.java` that takes two command-line arguments,
    `weight` and `height`, computes the BMI, and prints the corresponding BMI category:'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**身体质量指数。** [身体质量指数](http://en.wikipedia.org/wiki/Body_mass_index)（BMI）是一个人的体重（以千克为单位）与身高（以米为单位）的平方的比值。编写一个名为`BMI.java`的程序，接受两个命令行参数，`weight`和`height`，计算BMI，并打印相应的BMI类别：'
- en: 'Starvation: less than 15'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 饥饿：小于15
- en: 'Anorexic: less than 17.5'
  id: totrans-262
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 厌食症：小于17.5
- en: 'Underweight: less than 18.5'
  id: totrans-263
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 体重不足：小于18.5
- en: 'Ideal: greater than or equal to 18.5 but less than 25'
  id: totrans-264
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理想：大于或等于18.5但小于25
- en: 'Overweight: greater than or equal to 25 but less than 30'
  id: totrans-265
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超重：大于或等于25但小于30
- en: 'Obese: greater than or equal to 30 but less than 40'
  id: totrans-266
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 肥胖：大于或等于30但小于40
- en: 'Morbidly Obese: greater than or equal to 40'
  id: totrans-267
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 极度肥胖：大于或等于40
- en: '**Reynolds number.** The *Reynolds number* is the ratio if inertial forces
    to viscous forces and is an important quantity in fluid dynamics. Write a program
    that takes in 4 command-line arguments, the diameter d, the velocity v, the density
    rho, and the viscosity mu, and prints the Reynold''s number d * v * rho / mu (assuming
    all arguments are in SI units). If the Reynold''s number is less than 2000, print
    `laminar flow`, if it''s between 2000 and 4000, print `transient flow`, and if
    it''s more than 4000, print `turbulent flow`.'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**雷诺数。** *雷诺数*是惯性力与粘性力的比值，在流体动力学中是一个重要的量。编写一个程序，接受4个命令行参数，直径d、速度v、密度rho和粘度mu，并打印雷诺数d
    * v * rho / mu（假设所有参数都以国际单位制表示）。如果雷诺数小于2000，则打印`层流`，如果在2000到4000之间，则打印`过渡流`，如果大于4000，则打印`湍流`。'
- en: '**Wind chill revisited.** The wind chill formula from Exercise 1.2.14 is only
    valid if the wind speed is above 3MPH and below 110MPH and the temperature is
    below 50 degrees Fahrenheit and above -50 degrees. Modify your solution to print
    an error message if the user types in a value outside the allowable range.'
  id: totrans-269
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**风寒再探。** 练习1.2.14中的风寒公式仅在风速高于3MPH且低于110MPH，温度低于50华氏度且高于-50华氏度时才有效。修改您的解决方案，如果用户输入超出允许范围的值，则打印错误消息。'
- en: '**Point on a sphere.** Write a program to print the (x, y, z) coordinates of
    a random point on the surface of a sphere. Use [Marsaglia'' method](http://mathworld.wolfram.com/SpherePointPicking.html):
    pick a random point (a, b) in the unit circle as in the `do-while` example. Then,
    set x = 2a sqrt(1 - a^2 - b^2), y = 2b sqrt(1 - a^2 - b^2), z = 1 - 2(a^2 + b^2).'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**球面上的点。** 编写一个程序来打印球面上一个随机点的（x，y，z）坐标。使用[Marsaglia的方法](http://mathworld.wolfram.com/SpherePointPicking.html)：在单位圆中选择一个随机点（a，b），如`do-while`示例中所示。然后，设置
    x = 2a sqrt(1 - a^2 - b^2)，y = 2b sqrt(1 - a^2 - b^2)，z = 1 - 2(a^2 + b^2)。'
- en: '**Powers of k.** Write a program `PowersOfK.java` that takes an integer `K`
    as command-line argument and prints all the positive powers of `K` in the Java
    `long` data type. *Note*: the constant `Long.MAX_VALUE` is the value of the largest
    integer in `long`.'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**k的幂。** 编写一个程序`PowersOfK.java`，将一个整数`K`作为命令行参数，并打印Java `long`数据类型中所有正幂的`K`。*注意*：常量`Long.MAX_VALUE`是`long`中最大整数的值。'
- en: '**Square root, revisited.** Why not use the loop-continuation condition `(Math.abs(t*t
    - c) > EPSILON)` in [Sqrt.java](Sqrt.java.html) instead of `Math.abs(t - c/t)
    > t*EPSILON)`?'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**平方根，再探。** 为什么在[Sqrt.java](Sqrt.java.html)中不使用循环继续条件`(Math.abs(t*t - c) >
    EPSILON)`，而是使用`Math.abs(t - c/t) > t*EPSILON)`？'
- en: '*Solution*: Surprisingly, it can lead to inaccurate results or worse. For example,
    if you supply [SqrtBug.java](SqrtBug.java.html) with the command-line argument
    `1e-50`, you get `1e-50` as the answer (instead of `1e-25`); if you supply `16664444`,
    you get an infinite loop!'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：令人惊讶的是，它可能导致不准确的结果甚至更糟。例如，如果你向[SqrtBug.java](SqrtBug.java.html)提供命令行参数`1e-50`，你会得到`1e-50`作为答案（而不是`1e-25`）；如果你提供`16664444`，你会得到一个无限循环！'
- en: What happens when you try to compile the following code fragment?
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当你尝试编译以下代码片段时会发生什么？
- en: '[PRE33]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '*Solution*: It complains that the variable x might not have been initialized
    (even though we can clearly see that x will be initialized by one of the two if
    statements). You can avoid this problem here by using if-else.'
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：它抱怨变量x可能尚未初始化（尽管我们清楚地看到x将通过两个if语句之一进行初始化）。在这里，你可以通过使用if-else来避免这个问题。'
