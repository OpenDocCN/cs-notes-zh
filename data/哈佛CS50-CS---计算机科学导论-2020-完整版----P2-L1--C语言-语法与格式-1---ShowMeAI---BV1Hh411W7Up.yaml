- en: 哈佛CS50-CS ｜ 计算机科学导论(2020·完整版) - P2：L1- C语言（语法与格式）1 - ShowMeAI - BV1Hh411W7Up
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈佛 CS50-CS ｜ 计算机科学导论（2020·完整版） - P2：L1- C语言（语法与格式）1 - ShowMeAI - BV1Hh411W7Up
- en: brian you can open the second room too。![](img/216227000afccd2cf223fad469ab56f3_1.png)
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 布莱恩，你也可以打开第二个房间。![](img/216227000afccd2cf223fad469ab56f3_1.png)
- en: '![](img/216227000afccd2cf223fad469ab56f3_2.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/216227000afccd2cf223fad469ab56f3_2.png)'
- en: '![](img/216227000afccd2cf223fad469ab56f3_3.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/216227000afccd2cf223fad469ab56f3_3.png)'
- en: all right this is cs50 and this is。![](img/216227000afccd2cf223fad469ab56f3_5.png)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这是 CS50，这就是。![](img/216227000afccd2cf223fad469ab56f3_5.png)
- en: week one our second week and today，recall that we'll we'll focus on。this other
    programming language called c，last time，where and i propose that this code here。on
    the screen is something that you，will soon know how to program if not。already
    but suffice it to say it looks，quite a bit dissimilar。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 第一周我们的第二周，今天回想一下，我们将关注另一种编程语言 C，上次，我们看到我提出的这段代码在屏幕上，是你很快就会知道如何编程的内容，如果还没有的话，但足够说它看起来有些不同。
- en: to what we looked at last week which of，course was scratch which was much more。playful
    much more graphical，and so allow me to disclaim right from，the get-go today that。uh
    for most of us today will feel like a，bit of a fire hose in fact pictured here。is
    an old hack from mit，wherein some industrious seniors hooked，fountain。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下我们上周看到的，当然是 Scratch，它更加玩乐，更加图形化，所以请让我从一开始就声明，呃，对我们大多数人来说，今天会感觉像是打开了一个消防水龙头，实际上这里是麻省理工学院的一个老黑客作品，其中一些勤奋的学长连接了喷泉。
- en: uh the saying being that getting an，a a，fire hydrant today will feel a little。bit
    like that because this is sort of a，special occasion，that you don't really have
    occasion to。describe very often but it's one in，which we're all going to learn。a
    new language and indeed that's not，something we do every day and so at the。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 呃，今天得到一个消防栓的感觉会有点像，因为这是一个特殊的场合，你并没有机会经常描述，但这是我们所有人将学习一种新语言的机会，确实这并不是我们每天都会做的事情。
- en: first glance it's going to look like a，yet，allow me to reassure that what will
    soon，look like this。this c code here is fundamentally the，same thing that you've。seen
    and now experimented with last week，by way of scratch，that is to say within this
    other。programming language c which is more，traditional which is more text based，more
    keyboard based。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 从第一眼看去，它会看起来像，但请让我向你保证，马上看起来的这个 C 代码在根本上是与上周通过 Scratch 看到和实验的内容是相同的，也就是说，在这种更传统、以文本为基础、以键盘为基础的编程语言
    C 中。
- en: we're still going to see functions，conditions boolean expressions loops。and
    so on they're going to all look a，little different but，the ideas are the same
    and so much like。when uh walking into someone's home for，the very first time and
    getting the lay。of the land and seeing a lot of things，that you haven't seen before。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然会看到函数、条件、布尔表达式、循环等等，它们看起来会有些不同，但理念是一样的，就像第一次走进某人的家，了解环境，看到许多你之前未见过的事物。
- en: you typically don't care about all of，simply，walk forward and sit down or perhaps
    uh。uh and begin your conversation similarly，today we're about to see a whole lot
    of，language。necessarily，understand and latch on to those ideas，that are familiar，actually。writing
    computer programs how do we go，about uh writing them well。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你通常不会关心所有这些，简单地向前走坐下，或者开始你的对话，类似地，今天我们将看到大量的语言。必须理解并抓住那些熟悉的概念，实际上是编写计算机程序，我们如何编写它们。
- en: and so allow me to propose that there's，a few guy a few，guiding lights that
    should guide writing。of code one of course is correctness and，we explored this
    last week whereby the。correctness of your code just speaks to，does it work as
    intended when you，command。does the program that you or someone，else wrote behave
    correctly does it do，what it says。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我提出，有几个指导原则应该指导代码的编写，其中之一当然是正确性，我们上周探讨过这一点，即你的代码的正确性是否能如预期那样工作。当你命令时，你或其他人编写的程序是否表现正确，是否做到它所说的那样。
- en: but there's other aspects to writing，good software，and writing good programs
    and that has。to do with design and we alluded a，little bit to this last week but
    with。design it's more of a qualitative a more，subjective measure，just how well
    written your code is so。where you have to write，essays you could certainly make
    very，correct arguments。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 但是写作、编写优秀软件以及撰写良好程序还有其他方面，这与设计有关，我们上周对此稍微提到了一点，但设计更是一种定性，更多的是主观的衡量标准，你的代码写得有多好。因此，当你需要写论文时，你当然可以提出非常正确的论点。
- en: but you could make very correct，arguments by writing very long，rambling sentences
    repeating yourself。and generally not，it might be correct，there's nothing in that
    paper for your，it may be。that you said that was incorrect but you，might not get
    very good marks on it。because it's just not very well，designed and so similarly
    in the。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你可以通过写非常长的、冗长的句子来提出非常正确的论点，*重复自己*。通常来说，这可能是正确的，但在你的论文中可能没有什么价值。你可能说这是不正确的，但你可能得不到很高的分数，因为它设计得并不好，所以在这个方面也是如此。
- en: programming world is there this notion，code，but well-designed code wherein you
    don't，repeat yourself。you write code that's fairly efficient，it doesn't do more，uh
    more work than it actually needs to。and then lastly let me propose for today，onward
    in this class，that there's a third access you should。keep in mind when it comes
    to writing，good code and that has to do with style。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 编程世界中有一个概念，代码，但良好设计的代码让你不必重复自己。你编写的代码效率相当高，*不会做多余的工作*。最后让我提出，今天在这个课程中，编写良好代码时你应该考虑的第三个方面，与风格有关。
- en: this is much more of an aesthetic，so this in the analogous world of，writing
    an essay would be。are you using good punctuation，capitalization，are you indenting
    new paragraphs and。those kinds of aesthetics，that fundamentally don't change the，correctness
    of what you're saying。don't change necessarily the quality of，the arguments that
    you're making。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这更像是一种审美，因此在写论文的类比世界中就是：你是否使用了良好的标点符号、大小写，是否为新段落缩进，这些审美因素在根本上不会改变你所说的内容的正确性，也不一定会改变你论点的质量。
- en: but the style of your essay much like，the style of your code，makes your code
    much much more readable。so when it comes to，writing good code you want it first
    and，designed。and also well styled much like again you，would when writing an essay
    that you。would hope would reflect well，on your capabilities as well，so when it
    comes to writing code like。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 但你的论文风格就像你的代码风格，使你的代码更加可读。因此，当涉及到编写良好的代码时，你首先希望它是设计良好的，同时也是风格良好的，*就像你写一篇希望能很好反映你能力的论文一样*。
- en: this for instance this first c program，simply，prints out on the screen hello
    world。well how do we go about writing this，code last week we wrote code，dragging
    and dropping。puzzle pieces today is going to be a，little different we're going
    to use a，different tool here on。out and we're going to use our keyboard，program，but
    to do so we're going to go ah**d and。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 比如这个第一个 C 程序，简单地在屏幕上打印出“hello world”。那么我们如何开始编写这段代码呢？上周我们通过拖放拼图块来编写代码，今天会有点不同，我们将使用不同的工具来编程，但为此我们要去**进行**。
- en: this semester，this one known as cs50 ide ide，is an acronym a term of art in。programming
    that stands for integrated，development environment which is just a。![](img/216227000afccd2cf223fad469ab56f3_7.png)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本学期，这个被称为 cs50 ide 的工具，是编程中“集成开发环境”的缩写，简单来说就是一个。
- en: fancy way of saying in this context that，cs50 ide，is cs50's own web-based programming。environment
    and it's not，specific to cs50 per se we've simply，features。on top of a third-party
    cloud tool，that anyone on the internet can use and。our own version thereof lives
    at this，url ide。cs50。io so you're welcome to，need not。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，cs50 ide 是 cs50 自己的基于网络的编程环境，并不特定于 cs50，我们只是在一个第三方云工具上进行了功能增强，任何在互联网上的人都可以使用，而我们的版本位于这个网址
    ide.cs50.io，所以你可以自由使用。
- en: during lecture itself but on this coming，actually use，and get more familiar
    with this tool。hands-on so let me go ah**d and open up，in advance，and what you
    see here is the basic user。interface that's available to you，and fortunately there's
    only a couple of，right now。so at the top of the screen here is just，a big black
    rectangle that in a moment。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在讲座本身期间，但在接下来的时间里，实际上可以使用这个工具并更加熟悉它。动手操作，所以让我去**打开**，提前准备，您看到的这是可用的基本用户界面，幸运的是，现在只有几个。
- en: is going to be filled with code much，like using google documents or something。![](img/216227000afccd2cf223fad469ab56f3_9.png)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在屏幕顶部是一个大黑矩形，稍后会被代码填充，*就像使用谷歌文档或其他工具一样*。
- en: like that where you can create new tabs，and create new files，this is where i'm
    going to do my。programming along the top of the screen，moment going to start。calling
    our terminal window it's in this，terminal window，that i can actually run commands
    and。ultimately run，my actual code but let's go ah**d and，environment。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样的地方，你可以创建新标签，并创建新文件，这就是我将进行编程的地方。屏幕顶部，我现在将开始调用我们的终端窗口，实际上在这个终端窗口中，我可以运行命令，并且最终运行我的实际代码，但让我们继续深入，设置环境。
- en: and realize that this tool indeed is not，representative，of a very common popular
    programming。text editor，or tabbed windows where you can write，code and a terminal
    window where you can。actually run commands ours happens to，alternatively，program
    certainly on your own mac or pc。or any other device these days，but frankly it
    tends to involve just a。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 并意识到这个工具确实并不代表一种非常常见的流行编程文本编辑器，或者可以编写代码的标签窗口，以及可以实际运行命令的终端窗口。我们可以替代地编程，当然可以在你自己的
    Mac 或 PC，或者现在的任何其他设备上进行，但坦率地说，这往往涉及到一些。
- en: non-trivial number of technical，difficulties early on especially when we。all
    have different versions of mac os，and windows and the like，so this cloud-based
    environment just。ensures that on day zero，we can all have the same exact，programming
    experience。so i'm gonna go ah**d and do this i'm，file。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 早期会面临不少技术难题，尤其是当我们都有不同版本的 Mac OS 和 Windows 等操作系统时，所以这个基于云的环境确保在第一天，我们都能有相同的编程体验。所以我现在要继续进行这个文件。
- en: '![](img/216227000afccd2cf223fad469ab56f3_11.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/216227000afccd2cf223fad469ab56f3_11.png)'
- en: and this is gonna create a new tab by，default called untitled。not very interesting
    so i'm going to now。![](img/216227000afccd2cf223fad469ab56f3_13.png)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这将默认创建一个名为“未命名”的新标签。这并不有趣，所以我现在要。![](img/216227000afccd2cf223fad469ab56f3_13.png)
- en: go up to file and save，and by default i'm going to save this，file as for instance
    the name，program。in this language called c i'm going to，call my file hello but
    i'm going to end。it in a file extension，called dot c and that's indeed the，convention
    when writing。c programs they should end with dot c，just like scratch programs
    as you may，recall end in dot。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 上到文件并保存，默认情况下我将把这个文件保存为程序的名称。在这个叫做 C 的语言中，我将我的文件命名为 hello，但我将以一个名为 .c 的文件扩展名结束，这确实是编写
    C 程序的惯例，它们应该以 .c 结尾，就像你可能记得的 Scratch 程序以点结尾。
- en: '![](img/216227000afccd2cf223fad469ab56f3_15.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/216227000afccd2cf223fad469ab56f3_15.png)'
- en: click the green button，here that's called save nothing is，really going to change
    except for the。name and the tab there，now i see a top left that this tab is，called
    hello。c。and now i can start typing anything i，from memory，the very first program
    we saw last week。and just a moment ago，i'm going to do include standard io dot，h
    whatever that is for now。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 点击这个绿色按钮，保存，实际上没有什么变化，除了名称和标签，现在我在左上方看到这个标签被称为 hello.c。现在我可以开始输入任何我记得的内容，就是我们上周看到的第一个程序，刚才提到的，我将做的是包含标准
    io.h，不管那是什么。
- en: i'm going to going to do int main void，whatever that is for now。i'm going to
    use a curly brace and then，close that curly brace so to speak。thereafter and in
    here i'm going to go，ahead and do printf，quote unquote hello world followed by。a
    semicolon now that was a whole lot of。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我将做的是 int main void，不管那是什么。我要使用一个大括号，然后在此之后关闭那个大括号。在这里，我将继续做 printf，"你好，世界"，后面跟一个分号，现在这真是太多了。
- en: '![](img/216227000afccd2cf223fad469ab56f3_17.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/216227000afccd2cf223fad469ab56f3_17.png)'
- en: text right off the top of my head，this is the kind of muscle memory that。you'll
    soon develop when writing a，program i've of course done this。many times before
    so i was able to just，moment，we'll tease apart what all of the，typed。actually
    do but what i'd now like to do，week，that this is just going to print hello，world
    but how。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我脑海中立即想到的内容，这种肌肉记忆是你在编写程序时很快会发展的。我当然之前做过很多次，所以我能够一下子，分解出所有输入的内容。但我现在想做的是，打印“你好，世界”，但怎么做呢？
- en: well in the world of our macs and pcs，and phones we would all just tap an icon。if
    we want to actually run a program，that's not going to be the case today。because
    now we're in more of a，traditional programming environment，the environment that
    we're now in。requires that i use my keyboard，a little bit more or what's known
    as a，command line interface or cli。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 Mac、PC 和手机的世界中，如果我们想要实际运行一个程序，我们都会点击一个图标，但今天情况并非如此。因为现在我们处于一种更传统的编程环境中，当前的环境要求我多用键盘，或称为命令行界面（CLI）。
- en: this is in contrast with a graphical，user interface or，gui or gui which is what
    describes mac。os windows ios and，android but in a command line interface，i have
    to do everything。at a so-called command line and by that，i'm referring to this
    blinking prompt，along the bottom。reported along the bottom of my screen，window，where
    i'm going to type commands and。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这与图形用户界面（GUI）形成对比，图形用户界面描述的是 macOS、Windows、iOS 和 Android，但在命令行界面中，我必须在所谓的命令行上做所有事情，我指的是屏幕底部闪烁的提示符，在我的屏幕底部报告，我将在这里输入命令。
- en: this is my command line interface，anything i type here is going to get，sent
    to this computer。and hopefully execute uh on its own，hardware so，how do i do this
    and what do i do well。the catch of course。![](img/216227000afccd2cf223fad469ab56f3_19.png)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我的命令行界面，我在这里输入的任何内容都会被发送到这台计算机，并希望它能够在自己的硬件上执行。因此，我该如何操作呢？当然，这里有一个问题。
- en: is that when writing code in c or python，or java or bunches of other languages，that
    happen to exist。that's really meant to be written and，understood by me and you
    the humans。but per last week what is the only，language in a sense that computers，understand
    brian could we。call on someone for this what language，do computers，only speak，because
    i think there's a disconnect。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 当编写 C、Python、Java 或其他许多存在的语言代码时，这些代码实际上是为了我们人类理解而编写的。然而，上周提到的唯一一种计算机理解的“语言”是什么呢？布莱恩，我们能请人来解释一下吗？计算机只说什么语言？因为我觉得这里有一些误解。
- en: '![](img/216227000afccd2cf223fad469ab56f3_21.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/216227000afccd2cf223fad469ab56f3_21.png)'
- en: between where we left off last week and，where we're currently at。![](img/216227000afccd2cf223fad469ab56f3_23.png)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们上周停下来的地方和我们目前所在的地方之间。
- en: this cindy，what language do computers speak would，you say，um binary binary and
    just elaborate a。little bit what do you mean by binary to，recap，yeah so they use
    ones and zeros to。represent everything，exactly they use ones and zeros to，represent
    everything and last week we。focused on only things like numbers and，letters then
    colors and。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这位 Cindy，计算机说什么语言，你会说，嗯，二进制，能稍微详细说明一下你所说的二进制吗？为了回顾一下，是的，他们使用零和一来表示所有内容，确切地说，他们用零和一来表示所有内容。上周我们只专注于数字、字母以及颜色等。
- en: images and videos and sound and so forth，but we didn't all，actually speak to
    built-in functionality。which computers also use zeros and ones，to represent that
    is to say computers of。course have the ability these days，to print something on
    the screen and，that notion of printing that。represented，underneath the hood of
    a computer so to，speak by some pattern of zeros and ones。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 图像、视频、声音等等，但我们并没有真正利用内置功能。计算机也使用零和一来表示，也就是说，计算机当然现在有能力在屏幕上打印某些东西，而这种打印的概念在计算机内部是由一些零和一的模式所代表的。
- en: which is to say that everything i just，typed even though it kinda sorta looks。like
    english and kinda sort of，computer，have just typed，in order for to understand
    what i've。just typed i need to actually convert it，to zeros and ones and so indeed
    the next。step in this process is to take what，i'll describe as my source code。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我刚才输入的所有内容，尽管看起来有点像英语，实际上是计算机刚刚输入的。为了让计算机理解我刚刚输入的内容，我需要将其实际转换为零和一。因此，这个过程的下一步是将我称之为源代码的内容进行处理。
- en: written here in c and last week too we，saw source code it was just graphical
    it。was those puzzle pieces in scratch，this is my source code that even though。cryptic
    is something i at least the，human eventually can read and write。but i need to
    literally convert it to，patterns of zeros and ones that the，computer can understand。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这里用 C 编写的源代码，上周我们也看到了源代码，它只是图形化的，像是 Scratch 中的拼图块。这是我的源代码，尽管很难懂，但至少我这个人最终能够读写它。不过，我需要将其字面上转换为计算机能理解的零和一的模式。
- en: now how do i get to this point well，last week，that involves problem solving
    and here's。a problem how do i take source code，called c，and convert it to zeros
    and ones that。the computer understands，well my input i dare say is going to be，my
    source code，what we'll call。machine code machine code is just a term，of art describing
    the zeros and ones。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我如何得出这一点呢？上周，这涉及到问题解决。这里有一个问题：我如何将称为 C 的源代码转换为计算机理解的零和一？我敢说，我的输入将是我的源代码，我们称之为机器代码。机器代码只是一个术语，用来描述这些零和一。
- en: that computers understand，we didn't use that expression last week，on the right。and
    c code on the left so that invites，source code，and machine code if i take my source，black
    box。how do i get out of this black box the，understands，well i need a special program
    that we're。going to start calling a compiler，a compiler is a program that you
    can，download for free。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机能理解的，我们上周没有使用那个表达式，右边是C代码，左边是源代码和机器代码。如果我拿我的源代码黑箱，如何摆脱这个理解的黑箱？嗯，我需要一个特殊的程序，我们将开始称其为编译器，编译器是一个你可以免费下载的程序。
- en: or pay for back in the day that is a，program design，to convert source code to
    machine code。so all i need do，if i want to actually solve the problem，as stated
    earlier whereby。i have written this code in c and i now，need to convert it to
    zeros and ones i。just need to give myself access to，a compiler and it turns out
    one of those，exists within cs50 ide。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在过去你可以付费的程序，设计用来将源代码转换为机器代码。所以我只需要做的就是，如果我想实际解决如前所述的问题，我已经在C中编写了这段代码，现在需要将其转换为零和一，我只需要给自己访问一个编译器，结果在CS50
    IDE中存在这样一个编译器。
- en: and this is a tool you could download on，your own mac or pc or the like。and
    for now we're going to describe that。![](img/216227000afccd2cf223fad469ab56f3_25.png)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种你可以在自己的Mac或PC等上下载的工具。现在我们将对此进行描述。![](img/216227000afccd2cf223fad469ab56f3_25.png)
- en: tool as being quite simply called，program，i'm going to go ah**d and type make。hello
    and then i'm going to run it with，a little bit of a cryptic syntax。dot slash hello
    but let's see that in，action to tie this all together，terminal window。or my command
    line interface and i'm，going to literally type hello。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 工具简单地称为程序，我将去**前进**并输入`make.hello`，然后我将用一点难懂的语法运行它，`./hello`，但让我们看看它在终端窗口或我的命令行界面中的实际效果，我将字面上输入`hello`。
- en: notice i am not typing make hello dot c，i'm typing the name of the program i。actually
    want to make and i just want to，call this program，from this command。that i actually
    intend to compile a file，called hello。c，i'm going to go ah**d and hit enter。there's
    some crazy cryptic output more，on that another day，but the fact that i don't see
    any big。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 注意我并不是在输入`make hello.c`，我输入的是我实际上想要制作的程序名称，我只是想从这个命令中调用这个程序。实际上我打算编译一个叫`hello.c`的文件，我将去**前进**并按下回车。接下来会有一些疯狂的难懂输出，关于这一点留到以后再说，但我没有看到任何大问题。
- en: scary red error messages is a good thing，this means that my program compiled，successfully
    why。there's just no yellow or red messages，to say otherwise，but now if i want
    to actually run this。program i need to type a different，command that's the analog
    of double，phone。i'm going to type literally dot slash，dot slash hello essentially
    is like。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 可怕的红色错误消息是件好事，这意味着我的程序成功编译，为什么呢？因为没有黄色或红色的消息说明相反，但现在如果我想实际运行这个程序，我需要输入一个不同的命令，这相当于双击。我将字面上输入`././hello`，本质上就像是。
- en: saying go into the current folder，on the computer i'm using and look for a，program
    called hello。i'm going to go ah**d and hit enter and。![](img/216227000afccd2cf223fad469ab56f3_27.png)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着进入我正在使用的计算机的当前文件夹，并查找一个叫`hello`的程序。我将去**前进**并按下回车和！[](img/216227000afccd2cf223fad469ab56f3_27.png)。
- en: voila hello world，now i see again a dollar sign and some，other text on the screen
    and we'll tease。apart in just a bit what this means，but notice this dollar sign
    is just a，constant visual reminder。more commands，and the computer has done literally
    what，i asked it printed out hello world and。now it's waiting for my second command，so
    that was the analog of just printing，hello world out of。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 瞧，hello world，现在我再次看到一个美元符号和屏幕上的其他文本，我们稍后会解析这意味着什么，但注意这个美元符号只是一个常量视觉提醒。更多命令，计算机实际上完成了我要求的，它打印出了hello
    world，现在它在等待我的第二个命令，所以这相当于只是打印hello world出来。
- en: can do，more than this but let's tie it back to，what we did last week as well。so
    that not everything here is all that，dissimilar，so recall that last week we had。arguments
    even though we didn't，function，is like a mini program it's an action or。a verb
    that you can use when writing，your own program，that does something we saw the
    say block。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 可以做的事情远不止这些，但让我们将其与我们上周做的联系起来，这样这里的一切就不那么不同。回想一下上周我们有参数，尽管我们没有函数，它像一个迷你程序，是一个行动或动词，你可以在编写自己的程序时使用，做一些事情，我们看到了`say`块。
- en: week those were，verbs or actions or more generally known，as functions but functions
    can also take。inputs recall and we did see that last，calling，inputs to functions
    arguments so to。speak another term for them is，parameters but for all intents
    and，purposes those are。synonyms for our purposes arguments are，the inputs to functions。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上周那些是，动词或动作，更普遍地被称为函数，但函数也可以接收。输入，回想一下，我们上次看到的调用，函数的输入参数，所以。换句话说，另一个术语是，参数，但就我们而言，它们是。对我们目的来说，参数是函数的输入。
- en: so let's consider then from last week，this say block that we saw last。time which
    simply is trying to say out，of the cat's mouth hello world。well let me go ah**d
    and convert this if，you will to corresponding c code。just to emphasize how similar，fundamentally，these
    two languages are even though。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我们考虑一下，上周我们看到的这个 say 块。它只是想说，猫嘴里说出你好世界。好吧，让我去**转换一下，如果可以的话，把它对应的转成 C 代码。只是为了强调，根本上这两种语言是多么相似，尽管。
- en: syntactically c absolutely looks，uh visually different it turns out that。if
    you want to say something，i just did，you're not going to write se you're。instead
    going to write print that's，actually a bit of a white lie you're not，to say。print
    f for reasons we'll eventually see，it means print a formatted，analog in c。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 从语法上讲，C 看起来绝对，呃，视觉上不同，结果是。如果你想说什么，我刚刚做了，你不会写 se，而是会写 print，这其实有点白 lie，你实际上是要说。print
    f，原因我们最终会看到，它意味着格式化输出，C 中的一个类似物。
- en: of say in scratch now notice in c i've，got this open parenthesis and closed。parenthesis
    that nicely enough are kind，of ovular in shape and notice that they。kind of mimic
    the white oval，into which we provided input last week，so in between those parentheses。are
    going to be my inputs to this，function printf otherwise known as。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Scratch 中说的，现在注意到在 C 中我，有这个开放括号和闭合括号，它们恰好呈椭圆形，并且注意到它们。模仿了上周我们提供输入的白色椭圆，因此在这两个括号之间。将是我对这个，函数
    printf 的输入，或者说。
- en: arguments but they're going to be a，little different this week i yes i'm，going
    to say hello world。with a comma in between grammatically，c，i have to be a little
    more particular i。also have to add double quotes，on the left and the right and
    somewhat，annoyingly i also have to add。![](img/216227000afccd2cf223fad469ab56f3_29.png)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这周它们会有一点不同，我是的，我要说你好世界。中间有个逗号，从语法上讲，C 中，我必须更为严格。我还必须在左边和右边加上双引号，略微麻烦的是，我还必须加上。![](img/216227000afccd2cf223fad469ab56f3_29.png)
- en: a semicolon at the end of this line of，code so just like in english or in a
    lot。of human languages you end a sentence，for instance with a period，see。you've
    also got to finish your thought，in this case with a，semicolon so this then on
    the right is。the closest way of translating，this thing on the left from scratch
    to c，respectively。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码末尾的分号，就像在英语或许多。人类语言中，你结束一个句子，例如用一个句号。你也得在这种情况下用，分号结束你的想法，所以右边这个是。将左边的 Scratch
    转换成 C 的最接近方式，分别。
- en: so the ideas are still the same but the，syntax looks a little different and
    we，ultimately。what these patterns are and what these，human conventions are but
    notice that，paradigm。as last week but let's add a little more，terminology this
    week。last week we described the black box as，potentially being algorithms。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这些想法依然相同，但语法看起来稍微不同，我们，最终。要弄清楚这些模式是什么，以及这些，人的约定是什么，但请注意，范式。和上周一样，但我们这周增加了一些，术语。上周我们将黑箱描述为，可能是算法。
- en: initially and then we started calling，them functions functions are just a。programmed
    version of an algorithm the，implementation of an algorithm in code。in software
    so a function might be，otherwise，known now as arguments but it turns out。that
    functions can do at least two，different types of things，in the world of programming
    and we've。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最初我们开始称它们为函数，函数只是算法的编程版本，即在代码中实现一个算法。在软件中，所以函数也可以，称为参数，但事实是。函数在编程的世界中可以做至少两种不同类型的事情，我们已经。
- en: seen these things already but we didn't，describe them quite as particularly
    as，we will today。when a function takes inputs that is to，say arguments just like。hello
    world is an input to the say block，in scratch or the hell，or the printf function
    in c。functions can have what are called side，time，when we used the say block it
    did output。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这些东西我们已经见过，但我们并没有像今天这样具体地描述它们。当一个函数接收输入，也就是说参数，就像。你好世界是 Scratch 中的 say 块的输入，或者是
    C 中的 printf 函数。函数可以有被称为副作用的东西，记住，当我们使用 say 块时，它确实输出了。
- en: '![](img/216227000afccd2cf223fad469ab56f3_31.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/216227000afccd2cf223fad469ab56f3_31.png)'
- en: something but more technically it had a，side effect a visual side effect when
    i。used the say block last week，and the printf function this week you，see something
    on the screen。and that is yes some form of output but，form，of output that we saw
    last time so a。side effect of a function，on the screen，like text or audio in that
    case but。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 更技术性地说，它有一个副作用，一个视觉副作用，当我上周使用 say 块时，以及这周的 printf 函数时，你在屏幕上看到了某些东西。是的，这是一种输出，但这是我们上次看到的输出形式。因此，一个函数的副作用，在屏幕上显示，例如文本或音频。
- en: there's this other feature of functions，that we're going to see and leverage，function
    can。really just hand you back a value it's，not going to，vocalize it audibly it's
    going to just。pass it back to you in a way that you，the programmer can reuse。whatever
    the output of that function was，ideally storing it even in a variable。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 还有这个函数的另一个特性，我们将看到并利用，函数实际上可以把一个值返回给你，它不会用声音表达，而是以一种程序员可以重用的方式返回给你。无论那个函数的输出是什么，理想情况下，甚至可以存储在一个变量中。
- en: so for instance recall last week that we，asked the human their name，to the ask
    block。in this white oval was what's your name，and then recall that this ask block
    was。a little special last week，because it gave us access to whatever，the human
    ultimately typed in。and that is to say that the ask block，last week，essentially
    returned a value it didn't，just blindly。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，回想上周我们问人类他们的名字，在这个白色椭圆形框中写着“你叫什么名字”，然后回想一下这个 ask 块上周是有点特别的，因为它让我们访问了人类最终输入的任何内容。也就是说，上周的
    ask 块本质上返回了一个值，而不仅仅是盲目地。
- en: display whatever word the human typed in，on the screen no，it instead returned
    it in some sense。metaphorically，and stored it in a special variable，called answer。and
    so again that's the difference the，say block literally says something on。the screen
    and there's an immediate，visual effect，with the ask block after you type in。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 显示人类输入的任何单词在屏幕上，不，它在某种意义上返回了它。比喻地说，并将其存储在一个特殊变量中，称为 answer。所以下面就是区别，say 块字面上在屏幕上显示某些内容，并且有一个直接的视觉效果，而
    ask 块在你输入后。
- en: your name you don't，see your name printed or displayed again，on the screen instead
    your name is sort。of tucked away in a variable just like a，mathematician would
    store a number。in a variable like x or y or z the onus，to eventually，do something
    with the value my name。that was in that variable called answer，so how are we going
    to translate。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你的名字并没有再次在屏幕上打印或显示，而是你的名字有点藏在一个变量中，就像数学家会将一个数字存储在 x、y 或 z 这样的变量中。最终要做一些事情的是这个叫做
    answer 的变量中的值“我的名字”，所以我们将如何翻译。
- en: last week's ask block to c this week，to do this in c，none of which are very
    easy unless you。use what's called a library，a library is code that someone else
    has，we'll use today。is the so-called cs50 library which is a，staff and i，wrote
    just to make it easier to do。simple things these are training wheels，of sorts
    that will take off。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 上周的 ask 块在 c 中查看这个星期，做这个在 c 中，没有一个很简单，除非你使用所谓的库，库是别人写的代码，我们今天将使用的就是所谓的 cs50
    库，这个库是我和我的团队写的，旨在让简单的事情变得更容易。这些可以算是训练轮，某种意义上会被取下。
- en: completely within a few weeks time but，in order to get started quickly it's。going
    to make it easier to do things，like getting text from the user。so string is a
    term of art in the，programming world a string。is text it's a word it's a letter
    it's a，paragraph it's a page of text it's just。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在几周内完全掌握，但为了快速入门，会更容易做一些事情，比如从用户那里获取文本。所以字符串是编程世界中的术语，字符串就是文本，它可以是一个单词，一个字母，一个段落，或者一页文本。
- en: text in some form string is what a，computer scientist would call text。getstring
    is a function that we wrote，that we will provide to you。that does take inputs
    notice per the，parentheses here in c，it can take input what might that input。be
    well just like the ask block it's，going to be a prompt，that the human should ultimately
    see so。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 文本在某种形式上，字符串是计算机科学家所称的文本。getstring 是我们写的一个函数，我们会提供给你，它确实接受输入，注意这里在 c 中的括号，它可以接受输入。那么这个输入可能是什么呢？就像
    ask 块一样，它将是一个提示，人类最终应该看到。
- en: there's a bit more involved though than，just using this function。when you use
    get string in c as we will，soon see in a live demo，you want to do something with
    the。human's name and to do something with，the human's name it's not quite。sufficient
    to just trust that scratch，will put it in a variable for you。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，涉及到的事情比仅仅使用这个函数要多。当你在 c 中使用 get string 时，正如我们将很快在现场演示中看到的那样，你想对人类的名字做一些事情，而仅仅信任
    scratch 会为你将它放入一个变量中是不够的。
- en: in c as with most programming languages，it's a lot more pedantic like if you。want
    something to end up in a variable，you've got to do it yourself mit is not。going
    to magically put it in an answer，yourself，so to do this you simply come up with。the
    name of the variable that you want，be it x or y or z or more compellingly。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在C语言中，与大多数编程语言一样，它更加严格。如果你希望某个值放入变量中，你必须自己来处理，MIT不会自动把它放入答案中。所以你只需想出你想要的变量名称，可以是x、y、z或者更有吸引力的名称。
- en: answer and you use an equal sign a，single equal sign，and even though in math
    this generally。implies equality，languages，the equal sign actually means what we'll，call
    assignment。it means effectively copy whatever is on，the right，into whatever's
    on the left so if on the。right hand side there's a function whose，purpose in life
    is to ask the human what，their name is。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 答案你使用一个等号，一个单等号，即使在数学中这通常意味着相等，语言中的等号实际上意味着我们所说的赋值。它的意思是有效地将右侧的内容复制到左侧的内容中，所以如果右侧有一个函数，其目的就是询问人类他们的名字。
- en: that name is going to get copied from，right to left ultimately。into this variable
    called answer mit did，that automatically for us in scratch。in c you have to do
    it yourself but you，have to be a little more particular too。it turns out that
    in the world of c you，can't just have variables you have to。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个名字最终会从右到左复制到名为answer的变量中。在scratch中MIT自动为我们完成了这个过程，而在C中你必须自己来处理，但你还需要更具体一点。事实证明，在C语言中，你不能仅仅有变量。
- en: tell the computer in advance what type，of variable you want，and specifically
    i'm going to tell the。computer that the type of variable i，want is going to be
    a string and the，convention for doing so。is you literally write the name of the，type
    that you want，string being the only one we've seen。variable，and then again to
    assign a value to that，variable from right to left。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 事先告诉计算机你想要什么类型的变量，具体来说，我将告诉计算机我想要的变量类型是字符串，约定是你必须字面写出你想要的类型名称，字符串是我们看到的唯一变量，然后再次从右向左为该变量赋值。
- en: we have to use the single equal sign，here and now just a quick pause。brian if
    we could call on someone for，before，if you've taken to heart one of my。pieces
    of advice earlier，want to，finish the translation of this scratch。code to see on
    the right hand side what，is missing，from what you can tell if you've。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里必须使用单等号，现在稍作停顿。布莱恩，如果我们能请某人来，在你心中牢记我早些时候的一条建议，想要完成这个scratch代码的翻译，以便在右侧查看缺失的部分。
- en: programmed before odds auto will jump，before，you'll have to think back on what
    i said。earlier jacob what do you think，uh semicolon exactly there's just one，end
    of the line。which is necessary to make clear to the，computer that this is the
    end。of this thought and i sort of impugned，it as stupid because honestly。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 之前编程时，奥兹自动会跳出，你需要回想我之前所说的，雅各布你觉得呢，呃，分号，确实只有一行结束。这是为了让计算机明确这是这个思路的结束，而我有点愚弄它，因为老实说。
- en: one of the biggest frustrations when，learning how to code as will now happen。today
    and this week and beyond，is initially you're going to forget。stupid things like
    the semicolon or，mark，or a parenthesis or things like this and。the most important
    like advice i can，give today is this，try not to get frustrated by those kinds。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 学习编程时最大的挫折之一就是现在将要发生的事情，今天、这一周以及之后，最初你会忘记一些愚蠢的东西，比如分号、标点符号或括号之类的东西。我今天可以给出的最重要的建议是，尽量不要因这些小事而感到沮丧。
- en: of stupid things it's a lot more，interesting it's a lot more useful in，and conditions。and
    not to let yourself get frustrated，by the more minor aesthetic things。that honestly
    will just come with，you make，is missing a semicolon and it takes you。10 minutes
    an hour to figure out，what is wrong with your code totally。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这些愚蠢的事更有趣，也更有用，尤其是在条件中。而且不要让自己因更微小的审美问题而感到沮丧，老实说，这些问题只会随着你的进步而来，比如缺少分号，可能需要你花10分钟或一个小时来搞清楚代码出错的原因。
- en: normal and that those frustrations go，away，quite quickly in time so。we then
    have this translation of one，function to another，where else can we take it from
    here well。let's take a look at one，other translation that we used after，that ask
    block last week。after we asked the human their name as，by providing an input to
    the function。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 正常情况下，这些挫折会随着时间的推移而迅速消失。所以我们有了一个函数到另一个函数的转换，我们还可以从这里进行什么？让我们看看上周在ask block后使用的另一个转换。我们询问人类他们的名字，作为向函数提供输入。
- en: and getting some output we then，proceeded to do something，with the return value
    or output of ask。again we asked the human their name，scratch magically last week
    put the。name into the answer variable but then i，mean，to distinguish side effects
    which just。kind of happened to you，like something printing on the screen，like
    the cat saying something。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们获取一些输出，接着进行了某种处理，使用了`ask`的返回值或输出。我们再次询问人类他们的名字，神奇的是，上周将名字放入了`answer`变量中，但我想区分一些副作用，这些只是发生在你身上的事情，比如在屏幕上打印东西，像猫在说话。
- en: out of its mouth versus a return value，which is a piece of information like
    a。name a human has typed in，being stored somewhere where you the，programmer can
    make use of it。later it's not happening to you it's，being handed to you for subsequent
    use。and last week in order to say hello，speak，we kind of had to stack these puzzle。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 通过其输出与返回值相比，返回值是一条信息，比如一个人输入的名字，被存储在某个地方，以便你，程序员，之后可以利用它。这并不是发生在你身上的事情，而是为后续使用而交给你的。上周，为了打招呼，我们不得不堆叠这些拼图。
- en: pieces on top of one another making the，output of join，the input of say in c
    this is actually a。syntax，again printf is going to be the analog，for say and we've
    seen that。a moment ago we're still going to have，the parentheses we're still going
    to，now the input。how do i provide hello comma answer，to c well i'm going to go
    ah**d and do，hello comma。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将各个部分叠加在一起，使`join`的输出成为`say`的输入，在C语言中，这实际上是一种语法，再次`printf`将是`say`的类比，我们刚才已经看到了，我们仍然会有括号，我们仍然会有输入。我该如何向C提供“hello,
    answer”呢？我将前进并输入“hello,”。
- en: in double quotes but then this strange，new，syntax here percent s this is what
    we're。going to call a format，printf，printf doesn't just print things it can，print
    format codes as well。plug in，some actual value here don't print out，percent s
    literally。this is a placeholder for what will be s，a string well what do i want
    to put。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在双引号中，但这有些奇怪的新语法，`%s`这是我们将称之为格式的东西，`printf`不仅仅是打印东西，它也可以打印格式代码。这里插入一些实际的值，而不是字面打印出`%s`。这是一个占位符，表示将要插入的字符串。那么我想放什么呢？
- en: there here's something new too，in scratch if you had two inputs to a，this。and
    this one here that you could either，type words or numbers into or drag。variables
    into in c there's no notion of，ovals or graphics at all。so instead we're just
    going to go old，school and just use a comma，if you use a comma in between the。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有一些新内容，在Scratch中，如果你有两个输入，可以在这里输入单词或数字，或将变量拖入，而在C中根本没有椭圆或图形的概念。因此，我们将采用老派的方法，只需使用逗号，如果在参数之间使用逗号。
- en: parentheses，as the arguments or inputs to a function，left，from the one on the
    right thereby being。analogous to having two ovals，in the world of scratch now
    there's。something that's potentially a little，visually confusing here，there's
    actually two commas here of。course and here，but notice the important detail that。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 括号，作为函数的参数或输入，来自右侧的那个，因此相当于在Scratch的世界中有两个椭圆。现在这里有一些潜在的视觉混乱，这里实际上有两个逗号，当然在这里，但请注意这个重要的细节。
- en: '![](img/216227000afccd2cf223fad469ab56f3_33.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/216227000afccd2cf223fad469ab56f3_33.png)'
- en: comma，that i've put inside of my quoted string，my quoted phrase of text that
    has。nothing to do with programming that just，has everything to do with english
    the。fact that this comma is outside of those，double quotes though。means it's significant
    in this language，called c and it separates first argument。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我在引号字符串内放置的逗号，与编程无关，完全与英语有关。值得注意的是，这个逗号在双引号之外，这在名为C的语言中是有意义的，它分隔了第一个参数。
- en: from second argument and so in this way，do we have the ability now to also。say
    something on the screen using uh，printf in this slightly new way so let，me go
    ah**d then。and do this for real let me go back to，cs50 ide and i'm going to go
    ah**d and。go back into this program here。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 从第二个参数，因此以这种方式，我们现在是否有能力使用`printf`以这种稍微新颖的方式在屏幕上说些什么，所以让我来实际操作一下，回到`cs50 ide`，我将前进并回到这个程序中。
- en: '![](img/216227000afccd2cf223fad469ab56f3_35.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/216227000afccd2cf223fad469ab56f3_35.png)'
- en: and consider for just a moment how we，which，literally just prints hello world
    not。that interesting i can run it all day，long it's going to say the same thing。how
    do i now get input from the user，well it turns out，that i can simply enhance this
    code a。little bit let me go ah**d，earlier，let me do something like string answer。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 只需片刻考虑一下，我们这个程序，它字面上只是打印“hello world”，并不那么有趣，我可以整天运行它，它会说同样的话。那我现在如何从用户那里获取输入呢？结果是，我可以稍微增强一下这段代码，让我来做点像`string
    answer`这样的事情。
- en: equals get underscore string，quote unquote what's your name so i'm。![](img/216227000afccd2cf223fad469ab56f3_37.png)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 等于get underscore string，quote unquote 你叫什么名字，所以我。![](img/216227000afccd2cf223fad469ab56f3_37.png)
- en: literally typing out what we saw in c a，moment ago i'm going to remember my，semicolon
    over here。and then i have to change the second，line of code now to not say hello
    comma。world but instead to say hello，comma percent s and then outside of the。double
    quotes i'm going to do a comma，and then provide literally the word，variable。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 逐字输入我们刚才在c中看到的内容，我会记住我的分号在这里。然后我需要更改第二行代码，现在不说hello comma。world，而是说hello，comma
    percent s，然后在双引号外面，我会加一个逗号，然后字面上提供这个词，变量。
- en: but i'm not quite done and this is a，little subtle and invariably you'll。forget
    this at some point too，in order to use get string i have to use。this thing called
    the cs50 library，code that the staff wrote that you don't，do that。i need to add
    one line of code that will，explain in more detail in a little bit。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 但我还没有完成，这有点微妙，你也会在某个时刻忘记这一点，为了使用get string，我必须使用这个叫做cs50库的东西，工作人员编写的代码，你不需要这样做。我需要添加一行代码，稍后会更详细地解释。
- en: but for now just take it on faith that，by adding this line of code，at the very
    top include cs50。h。getstring，function which i otherwise wouldn't have，access to
    all right now i'm going to go。back to the terminal window，and notice the dichotomy
    here if i just，run dot slash hello。sort of enthusiastically let's see what，my
    new program does i'm about to be。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在只要相信，通过在最顶部添加这行代码，包含cs50。h。getstring，功能，否则我将无法访问。好吧，现在我要回到终端窗口，注意这里的二分法，如果我只是，运行dot
    slash hello。稍微热情一些，让我们看看，我的新程序会做什么，我快要。
- en: unfortunately disappointed because it，still says hello world and you might。realize
    intuitively what the problem of，course here is i haven't actually。recompiled the
    code and so anytime you，make a change to your code it does not。suffice to just
    save the file via file，save or control or command，s i need to recompile it and
    to。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是让我失望，因为它仍然显示hello world，你可能会直觉地意识到这里的问题是，当然我没有实际重新编译代码，因此每次你对代码进行更改时，仅仅保存文件并不足够，通过文件，保存或控制或命令，s我需要重新编译它。
- en: deal，i just type make hello enter cross my，scary text，this is all good it seems
    to have。compiled into machine code，now i can retype dot slash hello and。enter
    and you'll see now my program is，running and waiting for me let me go。ahead and
    type my name david enter，hello comma david let me go ah**d and。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我只需输入make hello回车，穿过我的，令人害怕的文本，这一切看起来都很好，似乎已经编译成机器代码，现在我可以重新输入dot slash hello和，回车，你会看到我的程序正在运行并等待我，让我继续输入我的名字david，回车，hello
    comma david让我继续啊**d和。
- en: run it again after clearing the screen，let me run it again and this time。let's
    say my name is brian and i see，hello comma brian，so quite similar to what we did
    in。scratch but now we're more powerfully，doing this all thus far，via my keyboard
    alone。all right so that was a lot we wrote，hello world super quickly off the top
    of。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 清屏后再次运行，让我再试一次。这次，假设我的名字是brian，我看到的是，hello comma brian，这与我们在scratch中的做法非常相似，但现在我们更强大，至今为止，完全通过键盘完成。好吧，我们写了很多，hello
    world 非常迅速。
- en: my memory and then enhanced it to now i，take input from the user，let me pause
    here if there are any。questions you're welcome to ask via chat，for either staff
    or classmates to answer。but if you'd like to raise your，virtual hand and zoom
    please feel free，so that i can。clarify or expound on anything here，the chat but，so
    the string before the answer that's。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我的内存，然后增强到现在我，接收用户输入，让我在这里暂停一下，如果有任何问题，欢迎通过聊天提问，让工作人员或同学回答。但如果你想在zoom上举手，请随意，这样我可以澄清或详细说明这里的任何内容，聊天之前的字符串就是。
- en: not the name of the variable，string que，you can make it like string a or string。anything
    else it just matters what comes，after string is the name of the variable。exactly
    really good question in the，world of scratch you were required to，use the variable
    called。answer in c we have the complete，flexibility over what we want to do so，as
    ryan proposed。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 不是变量的名字，字符串que，你可以把它写成string a或string。其他任何东西，只要在string后面的是变量的名字就行。真是个好问题，在scratch的世界中，你必须使用叫做。答案的变量，而在c中我们有完全的灵活性，可以做我们想做的，所以，正如ryan所建议的。
- en: i could change my variable's name to，just a for short，i would have to change
    it elsewhere too。![](img/216227000afccd2cf223fad469ab56f3_39.png)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以把变量的名字改成，只是简写为a，但我也需要在其他地方进行更改。![](img/216227000afccd2cf223fad469ab56f3_39.png)
- en: to make clear that the variable being，used is the same one by a different name。that's
    perfectly fine but here's where，we now get into a matter of，of better style having
    a variable。called just a doesn't make really lends，itself to the readability。of
    your code i might now glance at my，code and be like what is the variable a。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 是为了明确被使用的变量是同一个，只是名字不同，这完全可以，但现在我们进入了更好的风格问题，变量名叫**a**并不利于代码的可读性，我现在可能看着我的代码，想知道变量**a**是什么。
- en: it's a little better when it comes to，writing good code to actually be。more
    verbose and using an actual word，like answer，in this case indeed even though i
    keep。describing x and y and z as the go-to，variables for a mathematician those。really
    say nothing outside the context，of like a cartesian plane。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到编写好的代码时，实际上更加冗长并使用实际的单词，例如在这种情况下的**答案**，虽然我不断描述x、y和z作为数学家的主要变量，但在笛卡尔平面之外它们并没有真正的意义。
- en: so in a program that you write in c or，scratch or anything else。using descriptive
    variable names is a，matter of good，style as well uh jonathan over to you。yeah
    just a quick question how come we，time，um and unlike different ides which if，compiles。uh
    why do we have to manually do it yeah，really good question why do you have to。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在你用**C**、**Scratch**或其他任何东西编写的程序中，使用描述性的变量名是良好的风格，嗯，乔纳森，轮到你了。是的，我有个简单的问题，为什么我们要手动编译，嗯，与其他不同的IDE相比，确实是个好问题，为什么你必须这样做。
- en: keep recompiling the code，short answer is just because this is the，way c is。um
    it's an older language decade's now，old and so back then，everything was very deliberate
    user。interface was not the top priority，performance instead was for instance。and
    so nowadays there are fancier，some of you，might have used things like，codecademyonline
    or code。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 不断重新编译代码，简短的答案就是因为这是**C**语言的特点，嗯，这是一个已经有十年历史的老语言，所以在那时，一切都是非常刻意的，用户界面并不是首要任务，性能才是重点。
- en: org where，button，that you can just click in the user，or，runs your program what
    we're doing in。this class is showing you what those，buttons are doing so if you
    do use a uni。an environment like that that seems to，automate this it's still happening
    but。for our purposes certainly at the，beginning of the semester，we're going to
    do it manually ourselves。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有一些更花哨的东西，有些人可能用过像**Codecademy**或**Code.org**这样的在线平台，用户只需点击按钮就可以运行程序，而我们在这堂课中要展示这些按钮的作用，因此如果你使用这样的自动化环境，这仍在进行，但为了我们的目的，尤其是在学期初，我们将手动完成。
- en: later in the term when we introduce a，different language all together for，instance
    python，compile。any more but more on that in a few weeks，good question uh sophia，over
    to you i。had a question about i noticed in the，like n，at the end of the string
    is that。necessary for every time even if it's，just one line，really good question
    this backslash n。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在学期稍后，我们将引入完全不同的语言，例如**Python**，不再编译，但几周后会详细讲解，好的问题，索菲亚，轮到你了，我注意到字符串末尾的**\n**是必要的吗？即使只是单行，真的很好的问题，这个反斜杠n。
- en: that you're seeing elsewhere，a bit of a spoiler but yeah let's go，seen。even
    though i'm kind of ignoring it you，know this now gets a little particular。but
    this looks kind of stupid honestly，dollar sign，like that is not my intended output
    i。literally only wanted to say hello brian，or hello david，this visual artifact
    here the dollar。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 你在其他地方看到的，有点剧透，但即使我有点忽略它，你知道这看起来有点奇怪，美元符号，像那样并不是我想要的输出，我真的只想说**你好，布莱恩**，或者**你好，戴维**，这个可视化伪影这里的美元符号。
- en: sign and the tilde and the slash，have to do with my terminal window this。command
    line environment that i'm using，and honestly just to be a little。nitpicky frankly
    it should probably be，on a new line it should just。be on its own line so it's
    not confused，with my own output，and as sophia notes we there is a。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 符号和波浪线以及斜杠与我使用的终端窗口有关，这是我正在使用的命令行环境，老实说，稍微挑剔一下，它应该在新的一行上，应该单独一行，这样就不会与我自己的输出混淆，正如索菲亚所说，我们有一个。
- en: solution to this。![](img/216227000afccd2cf223fad469ab56f3_41.png)
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案。![](img/216227000afccd2cf223fad469ab56f3_41.png)
- en: when writing，algorithms and in turn code you have to，be super precise。nowhere
    in my code have i told the，line，so i can do that explicitly by doing。backslash
    n immediately after the，percent s but still，inside of the double quotes this is。shorthand
    notation，for what would be telling the computer，move the cursor to the next line。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写算法和代码时，你必须非常精确。在我的代码中没有明确告诉这一行，所以我可以通过在 `%s` 后面立即加上 `\n` 来显式地做到这一点，但仍然在双引号内部。这是告诉计算机移动光标到下一行的简写符号。
- en: now you might think that well why don't，i just hit enter like this。and even
    though this all might be new to，most of us suffice it to say that。this just feels
    like it's going to get，messy quickly if you start hitting enter。in the middle
    of your code，that's probably not the right solution，so instead programmers years
    ago。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会想，为什么我不直接按回车呢？即使这些对我们大多数人来说可能都是新的，简单来说，如果你在代码中间开始按回车，事情会很快变得混乱，这可能不是正确的解决方案。因此，多年前的程序员们想出了这个方法。
- en: decided to come up with shorthand，notation like backslash n，that sim，line。here
    so backslash n is newline and let，me go ah**d and recompile this。after saving
    my file let me go ah**d and，do make，hello it seems to compile okay dot slash。hello
    let me go ah**d and type in，brian's name again and voila。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 决定提出简写符号，比如 `\n`，它表示换行。这里 `\n` 是换行符，让我继续编译这个程序。在保存我的文件后，让我继续运行 `make hello`，它似乎编译得不错，`./hello`。让我再次输入布赖恩的名字，瞧。
- en: still the same output but it's a little，cleaner so we're doing a being a little。bit
    better about housekeeping now，really good question uh uh bj。is it uh yeah so one
    question i had is，get string，in order for you for it to ask for input。like it
    still asked your input when you，assigned it to the variable。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 输出还是一样，但更干净了，所以我们在整理上做得稍微好一点。非常好的问题，呃，BJ。我有一个问题是，`get_string`，为了让它请求输入。它在你将其分配给变量时仍然会询问你的输入。
- en: answer ah really good question why don't，i have to call getstring for instance
    by。putting it on a line of its own，the way that c and a lot of programming，languages
    work。is they will evaluate an entire line of，line。![](img/216227000afccd2cf223fad469ab56f3_43.png)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 很好的问题，为什么我不需要通过将 `get_string` 放在单独一行上来调用它。C 语言和许多编程语言的工作方式是，它们会评估整行代码。![](img/216227000afccd2cf223fad469ab56f3_43.png)
- en: six uh from right，to left at least in this context when，you have an equal sign。on
    this in the code like i do here，that's telling the computer，you first have to
    execute that is do。what is said on the right-hand side，and then whatever the output
    of that。thing is store it on the left-hand side，just now，spreading things out
    on longer lines of。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个上下文中，至少从右到左，当你有一个等号时。在我这里的代码中，这告诉计算机，你首先要执行右侧所述的内容，然后将该内容的输出存储在左侧。现在，把事情分散在更长的行上。
- en: code if you will if that makes sense，so getstring is getting executed，right
    so。we've been taking for granted frankly a，few details of these programs that
    it's。probably only fair to start teasing，main，void and a whole bunch of other
    syntax，so let's tease apart。some of these other lines of code that i，memory，but
    kind of do need to be there in every。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可以的话，代码就是这样，如果这样理解的话，`get_string` 正在执行。坦率地说，我们对这些程序的一些细节已经习以为常。可能公平地说，开始提及
    `main`、`void` 和其他许多语法，让我们拆解一些我记得的代码行，但实际上在每个地方都需要存在。
- en: c program you write let's at least start，to make sense of some of that detail。recall
    that in scratch we always started，our programs initially，with when green flag
    clicked we，like。when uh you hear an event or when，there's camera motion，but this
    really kick-started most of the。programs that we wrote in scratch，what is the
    analog in c of the of the。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 你写的 C 程序，至少让我们开始理解一些细节。回想一下，在 Scratch 中，我们总是从“当绿色旗帜被点击”开始我们的程序，就像是。当你听到事件或者有摄像头运动时，这实际上启动了我们在
    Scratch 中编写的大部分程序，在 C 语言中对应的是什么。
- en: when green flag clicked publicly piece，it's essentially this we won't spend，time
    in detail today。explaining why it's int why it's void，parentheses，for today's
    purposes only let me just。stipulate that this is the analog，for this when green
    flagged clicked。puzzle piece you've just got to start，your programs initially。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: “当绿色旗帜被点击”的公共部分，实际上就是这个。今天我们不会花时间详细解释为什么它是 `int`，为什么是 `void`，括号。为了今天的目的，我只想说明这是“当绿色旗帜被点击”的对应部分。你只需要开始你的程序。
- en: with this kind of boilerplate code so to，speak we will start to explain this
    in。much more detail but for now just take，on faith that this is how you start，writing
    a program。but there's of course a little more to，the programs we've written thus
    far。and particularly we've seen a couple of，things called header files。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种类型的样板代码，呃，我们将开始更详细地解释这一点，但现在只需相信这是你开始编写程序的方式。当然，我们写的程序还有更多内容，特别是我们看到了一些称为头文件的东西。
- en: this is another term of art that refers，to a pro a file，written in the language
    called c whose。name ends with not，dot c but with dot h so we've seen these，before。as
    follows here recall was the simplest，program we wrote last week in scratch it。just
    says hello world when you clicked，on the green flag，this is the analog the more
    complete。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个专业术语，指的是一个用 c 语言编写的文件，文件名以 dot h 结尾，而不是 dot c。所以我们之前见过这些，像这样。回忆一下，这是我们上周在
    scratch 中写的最简单的程序，它在你点击绿色旗帜时只会显示“你好，世界”，这就是更完整的模拟。
- en: analog on the right。![](img/216227000afccd2cf223fad469ab56f3_45.png)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧的模拟。![](img/216227000afccd2cf223fad469ab56f3_45.png)
- en: of that program today but there's，something missing，and it's probably jumping
    out at some of，shorter。than it was before something's missing，which is this line
    here and i just wrote。that from memory earlier，but it's referring to a file called，stdio。h。which
    stands for standard input output，dot h so i o is an acronym in the。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的那个程序有些东西缺失，可能在某些短小的地方特别明显。缺失的就是这一行，我刚刚从记忆中写下了它，它指的是一个名为`stdio.h`的文件，代表标准输入输出，点
    h，所以 i o 是一个缩略词。
- en: computer world that just generally，refers to input and output，so standard io。h
    is just a very。popular file that is used in c programs，that gives you the ability
    to get input。and output from the user，and it does so by providing you with，printf
    for instance which of course。allows you to generate some form of，output via those，those
    side effects that we described。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机世界通常指的是输入和输出，所以标准 io.h 是一个非常流行的文件，广泛用于 c 程序中，允许你从用户那里获取输入和输出，它通过提供`printf`来实现，这当然允许你通过这些副作用生成某种形式的输出。
- en: earlier but when i wrote my other，program recall that actually had。get string
    as bj noted earlier where i，can get a line of text from the user i。needed something
    else altogether，and that's when we added a moment ago a。second header file called
    cs50。h，so these header files just give you，access to more。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 之前我写的另一个程序中确实有，正如 bj 之前提到的`get string`，我可以从用户那里获取一行文本。我需要的是完全不同的东西，这时我们刚刚添加了第二个头文件`cs50.h`，这些头文件让你能够访问更多。
- en: functions than you might automatically，get from the language，you're using which
    here is c it's。similar in spirit recall last week when，i started poking around
    scratch's，extensions menu。and i used the translate block and the，the voice block
    the sort of fancier。features that were buried under the，scratch，is similar to
    using a header file in c。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 函数，这些函数是你可能不会自动从你使用的语言中获得的，而这里是 c。回想一下上周，当我开始研究 scratch 的扩展菜单时，我使用了翻译块和语音块，那些被埋藏的更复杂的功能，就像在
    c 中使用头文件一样。
- en: it's giving me access to a bit more，functionality than you otherwise get。for
    free out of the box so to speak，all right let me pause here to see if。there are
    any other questions，before we forge ahead to actually create，some problems。uh
    that you two will likely encounter，and we'll give you tools via which to。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 它让我访问了更多的功能，换句话说，就是说你得到了额外的功能。好吧，让我在这里暂停一下，看看是否还有其他问题，然后我们继续实际创建一些你们可能会遇到的问题，呃，我们将给你提供解决这些问题的工具。
- en: solve those problems so that you don't，feel completely，on your own in a new
    language any。questions brian，back，until brian gives me the cue all right，well
    let me go ah**d and propose that。there are so many different ways in，which i could
    have screwed up。over the past few minutes of writing，these programs，uh i might
    have omitted a semicolon as i。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这些问题，这样你在学习新语言时不会感到完全孤立。有什么问题吗，布莱恩？等布莱恩给我提示，好吧，让我继续提出，我在写这些程序的过程中有那么多不同的方式可能搞砸了，呃，我可能漏掉了一个分号，就像我。
- en: implied i might have not closed my，quotes i might have gotten my，parentheses
    wrong i might have。misspelled words altogether，there's many different ways i could
    have。screwed that program up and frankly off，the record i was sort of crossing
    my。fingers that i didn't screw up，our very first program together but，invariably。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我可能没有关闭我的引号，可能括号写错了，可能完全拼错了单词，我可能有很多不同的方式让那个程序出错，坦白说，我有点心存侥幸，希望我没有弄错我们一起写的第一个程序，但不可避免地。
- en: at some point maybe not your first，program but early on in learning how to。program
    or learning how to program in c，you will screw up and you're going to。make some
    typo there's going to be，some disconnect between what your。understanding is and
    what you're trying，to get the computer to do，and this is to say there are tools。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时刻，也许不是你的第一个程序，但在学习如何编程或学习如何用C语言编程的早期，你会出错，你会犯一些拼写错误，你的理解和你想让计算机做的事情之间会有一些脱节，这就是说有一些工具。
- en: thankfully that can help you，solve those problems and the first of，which is
    called help 50。any of the，tools whose names end with 50，are specifically educationally
    oriented。written by cs50 staff，that are temporary training wheels that，the class。but
    then eventually optionally take away，in the sense that you won't need them，troubleshoot。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，有一些工具可以帮助你解决这些问题，第一个叫做help50。任何以50结尾的工具，都是专门针对教育的，由CS50的工作人员编写的，是临时的训练工具，课程中使用，但最终可选地去掉，换句话说，你不会需要它们来排除故障。
- en: problems that you might not otherwise，see obviously，in your own code and let
    me go ah**d and。simulate this，as follows let me go back to the very，first program
    that we wrote in c。which was quite simply this one whereby。![](img/216227000afccd2cf223fad469ab56f3_47.png)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 可能你在自己的代码中看不到的问题，让我先模拟一下，像这样，让我回到我们在C语言中写的第一个程序，这个程序非常简单。![](img/216227000afccd2cf223fad469ab56f3_47.png)
- en: it only said hello world，and there's a few different places i。could have screwed
    up here for instance，myself，and i omitted the standard io。h file。![](img/216227000afccd2cf223fad469ab56f3_49.png)
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 它只显示了“你好，世界”，而我在这里可能有几个地方出错，例如，我遗漏了标准输入输出头文件。![](img/216227000afccd2cf223fad469ab56f3_49.png)
- en: at the top of my program the implication，is that now，printf，is because it hasn't
    been included via。standardio。h so let's see what the error，message is hopefully
    it'll be a very。self-explanatory message that makes，perfect sense，let me go ah**d
    and recompile this，incorrect。and oh my god like i this i have more，lines of errors
    than i actually have，neces。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的程序顶部的暗示是，现在printf没有通过标准io.h包含，所以让我们看看错误消息，希望它是一个非常自我解释的消息，完全有意义，让我重新编译这个错误的代码。天哪，我的错误行数比我实际需要的行数还要多。
- en: well this is kind of a reality of，programming，a lot of programming languages
    a lot of。tools frankly were not designed with，ease of use in mind or user friendliness。in
    mind they were really designed with，succinctness and precision in mind and。they
    tend unfortunately，to assume that the audience is as，program。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是编程的一个现实，很多编程语言和工具坦率地说并不是为了易用性或用户友好性而设计的，而是为了简洁性和精确性而设计的。不幸的是，它们往往假设观众是程序员。
- en: this of course can backfire when you're，first place，and you have to make sense
    of crazy。cryptic output like this，today we don't have to focus on every，the screen。but
    let's start to recognize patterns，walking into a new space and just，physical world。let's
    now do that with code the most，of，is that when you mess up and you make。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，当你第一次看到这些输出时，这可能会适得其反，你不得不理解像这样的疯狂模糊输出，今天我们不需要关注每一条信息，但让我们开始识别模式，走进一个新的空间和现实世界。现在让我们用代码来做到这一点，最重要的是，当你出错并且在你的代码中犯了一些错误，以至于你的程序甚至无法从源代码编译成机器代码，通常你会在错误输出的顶部看到一个线索。
- en: some mistake in your code such that your，program doesn't even compile from source。code
    into machine code，odds are you're going to see a clue，toward the top of the erroneous
    output。that tells you the name of the file，where you messed up and the line number，where
    you messed up。three implying line three and then five，might imply what，column
    or what character in that line。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这个线索告诉你出错的文件名和行号，第三行意味着第三行，然后第五行可能暗示在那一行中的列或字符。
- en: but it depends on the particular problem，if that's that useful。so on line three
    i am getting an error，printf，would type in const char star i mean。like who knows
    what that even means，you will eventually but for today it。just means something
    bad went wrong and，you might not see it，you might not know if i hadn't told you。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上取决于特定的问题，如果这有用的话。因此在第三行我遇到了一个错误，printf，应该输入 const char star，我的意思是，谁知道那甚至是什么意思，你最终会知道，但今天它只是意味着发生了错误，你可能看不到，也可能不知道，如果我没告诉你。
- en: that i intentionally deleted that line，so let's see if we can't make sense of。this
    by using this tool help 50 is a，tool written by cs50 staff。that will help translate
    arcane cryptic，computer messages to more human friendly。advice and questions that
    your teaching，fellow or teaching assistant。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我故意删除了那一行，所以让我们看看能否通过使用这个工具 help 50 来理解这一点。这个工具是由 cs50 工作人员编写的，它将帮助翻译晦涩的计算机消息为更人性化的建议和问题，供你的同学或助教参考。
- en: might offer you say in the context of，office hours so to use help 50。instead
    of running the same command，again and again and seeing the same，erroneous output。literally
    just write help 50 first at，your terminal window，then write the same exact command
    that。reason，and hit enter then and what will happen，is the same command will get
    run。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在办公室时间的上下文中，它可能会给你提供建议，所以使用 help 50。不要一次又一次运行同样的命令，看到相同的错误输出。实际上，只需先在你的终端窗口中输入
    help 50，然后输入完全相同的命令，按下回车键，然后发生的事情是同样的命令将被运行。
- en: we will analyze using the help50 program，highlight in yellow，the stuff we recognize
    and then。translate it to more human friendly，language for instance，after running
    help50 we're asking for。help dot dot dot，in yellow here is the thing we recognize，before。and
    then down here did you forget to，include standardio。h，in which printf is declared
    atop your。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 help50 程序进行分析，突出显示我们识别的内容，然后将其翻译为更人性化的语言。例如，在运行 help50 后，我们请求帮助……这里用黄色显示的就是我们之前识别的内容。然后在这里，你是否忘记在你的文件顶部包含
    `#include <stdio.h>`，其中声明了 printf。
- en: file so hopefully，if we recognize the problem we can guide，you with this sort
    of rhetorical。question that makes you realize oh yes，that's what i did wrong so
    now i can go，back up here。move to the top of my file and add，include，standardio。h
    and now notice if i rerun，all together。and we could do this all day long，there's
    so many places to mess up for。
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 所以希望如果我们能识别出问题，我们可以用这种修辞式的问题来引导你，让你意识到“哦，是的，我犯了这个错误”，所以现在我可以回到这里，移动到我的文件顶部，添加
    `#include <stdio.h>`，现在注意，如果我重新运行，一切都在一起。
- en: instance i omit the semicolon now，let me go ah**d and make hello now。without
    the semicolon now we're going to，get a different error message。and you'll see
    again the name of the，file where i messed up hello。c，because。the line numbers
    move down after i added，more stuff up there and you can see。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我省略了分号，现在让我去做 hello，没有分号的情况下，我们将得到一个不同的错误消息。你将再次看到我出错的文件名 hello.c，因为在我上面添加了更多内容后，行号向下移动，你可以看到。
- en: expected semicolon after expression，so this one's a little more。straightforward
    but you could run help，50 on this command too。just to get back a little more explicit，advice
    so help50 will be your friend，your code。to actually compile well let me do，something
    else that's，bad now i've very deliberately been。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在表达式之后预期分号，所以这个稍微简单一些，但你也可以在这个命令上运行 help 50。只是为了获得一些更明确的建议，因此 help 50 将成为你的朋友，你的代码。
- en: writing fairly pretty code i've indented，the word printf，i included some blank
    line up here just。to make it clear i've put these curly，braces so to speak on
    their own lines。but frankly my computer or cs50 ide，is not so particular i could
    technically。get rid of this blank line，i could move this curly brace way up。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 为了写出相当漂亮的代码，我缩进了 printf 这个词，我在这里添加了一些空白行，仅仅是为了让它清晰，我把这些花括号放在自己的行上。但是老实说，我的电脑或
    cs50 ide 并不那么挑剔，我从技术上讲可以去掉这一空白行，我可以把这个花括号移得更上去。
- en: here i could get rid of this indentation，altogether and move it on the。on its
    own line and then i could just，move this curly brace up here。thereby writing a
    program that's now，only two lines long，not six but hopefully already even if。you've
    never programmed before，this should probably rub you the wrong。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我可以完全去掉这个缩进，将其移动到单独的一行，然后我可以将这个花括号移到这里。这样就可以写出一个现在只有两行长的程序，不是六行，但希望即使你之前从未编程，这也应该让你感到不舒服。
- en: way this is like people in the real，world that like don't use punctuation in。their
    social media posts or their emails，or their text messages they just kind of。go
    on and on and on，and yes the information is there you can，glean what it is they're
    trying to。communicate but my god is it annoying，it's hard to read there's probably
    a。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这就像现实世界中一些人不在社交媒体帖子、电子邮件或短信中使用标点符号，他们只是不断地说下去，是的，信息在那里，你可以推测他们想要传达的内容，但天哪，这太烦人了，难以阅读，可能。
- en: higher probability that there's a，mistake and it's going to be harder to，balanced。on
    the left and on the right and on the，be，described as bad style my program is。still
    correct i've got the standard io。h，i've got the semicolon and everything，it's
    just。ugly there's not much white space，there's not a lot of blank lines or。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 更高的概率说明这里有个错误，而且它将变得更难以平衡。我的程序依然是正确的，但描述起来是糟糕风格。标准输入输出库`io.h`和分号都没问题，只是看起来有点丑，空白空间不多，空行也很少。
- en: indentations that just make it easier，for you and i，notice。![](img/216227000afccd2cf223fad469ab56f3_51.png)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 缩进只是让你和我更容易注意到。![](img/216227000afccd2cf223fad469ab56f3_51.png)
- en: it does compile so help 50 is not going，to help me fix this problem because
    it，compiles okay。![](img/216227000afccd2cf223fad469ab56f3_53.png)
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 它确实编译，所以help 50不会帮助我解决这个问题，因为它编译得不错。![](img/216227000afccd2cf223fad469ab56f3_53.png)
- en: but i it can run another program that，we're going to call style 50。this is。another
    educationally oriented tool，that's installed in cs50 ide。that allows you to figure
    out how to，improve the style of your code。so when i run style 50 we'll see some，output
    that at first glance might be a，little cryptic。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我可以运行另一个程序，我们称之为style 50。这是一个教育工具，安装在CS50 IDE中，可以帮助你改善代码的风格。当我运行style 50时，我们会看到一些乍一看可能有点神秘的输出。
- en: but i think it'll help us make sense of，the program ultimately。to run style
    50 you instead run style 50，and then just the name of the file in，this case hello。c
    so you don't run，make again you don't run make hello you，do style 50，hit enter。and
    you'll see some somewhat cryptic，output here but in green highlights。
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 但我认为这会帮助我们最终理解程序。要运行style 50，你只需运行style 50，然后是文件名，在这种情况下是hello.c。所以你不需要再运行make，也不需要运行make
    hello，你只需做style 50，按回车。你会看到一些有点神秘的输出，但用绿色高亮显示。
- en: the tool is trying to coax me toward，improving，this file so notice here backslash
    n。this was noted earlier，that it means move the move the cursor，to the next line。so
    the fact that this is green here，backslash n that means my gosh。hit enter after
    this parenthesis the，fact that there's another backslash n，here means hey human。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工具试图引导我改善这个文件，注意这里的反斜杠n。之前提到过，它表示将光标移动到下一行。因此，这里绿色的反斜杠n意味着我的天，在这个括号后按回车。另一个反斜杠n则意味着，人类，。
- en: hit the enter key again to move the，curly brace onto its own line。the fact that
    there's four green spaces，here means a human literally hit the。spacebar four times
    or hit tab，once to indent your code and then。finally one more new line here so
    style，50 doesn't fix the code for you，stylistically。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 再按一次回车键，将大括号移到自己的行上。这里有四个绿色空格意味着人类字面上按了四次空格键或按了一次Tab键来缩进代码，最后再加一行新行。因此，style
    50并不会为你在风格上修复代码。
- en: but it tries to draw your attention to，all of the possible places。where you
    can improve this so let me，line there，let me add a blank line there let me。indent
    by four spaces there，and let me move the curly brace down，there and now，code。and
    hopefully it indeed looks good but，it's still giving me advice。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 但它试图引起你对所有可能的改进点的注意，所以让我在这里添加一行，让我在那添加一个空行，让我在那缩进四个空格，让我把大括号移下来，现在，代码。希望它看起来确实不错，但它仍然给我提供建议。
- en: it's telling me to add something called，comments and a bunch of you figured
    this。out in the world of scratch，you can add little sticky notes or。post-it notes
    to scratch that are sort，of notes to self that remind you。what something does
    or maybe explain to，assistant what，something does c supports these as well。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 它告诉我添加一些叫做注释的东西，很多人已经在Scratch的世界中发现了这一点。你可以在Scratch中添加小便条或便签，提醒自己某些功能或解释某些内容，C语言也支持这些。
- en: so for instance if i just wanted to be，really pedantic here，and make clear to
    the human reading my。code what i'm trying to do，i could say something like greet
    user，new line。above my existing line of code and i've，lines up，slash，which says
    hey compiler this is a，is not。actual c code per se then i hit the，space bar and
    then i just typed out an。
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，如果我想在这里特别严谨一点，向阅读我代码的人清楚表明我的意图，我可以在现有代码行的上方写“问候用户，新行”。我已经写了一些，斜杠，表示嘿，编译器，这不是实际的C代码。然后我按下空格键，接着我只是输入了一个。
- en: english phrase and this could be any，spoken language，but i went ahead and typed
    greet user。why well it's just a reminder to myself，what the purpose of the following
    line。of code is is to greet the user，this is marginally better for instance，than
    saying。print hello world and let me just ask，here even if you've never，programmed
    before why is the first。
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 英语短语，这可以是任何一种口语，但我继续输入“问候用户”。为什么？因为这只是对我自己一个提醒，后面这行代码的目的是问候用户，这比说“打印你好，世界”要稍微好一些。让我问一下，即使你从未编程过，为什么第一件事情是。
- en: comment，of better comments than the second like，why should i say。if anything
    greet user instead of print，hello world，you want to call on，one person's hand
    here。oh you're unmuted in zoom but can't hear，you technically，can you hear me
    now yes okay it tells。you the purpose of the code，yeah the purpose of the code
    as opposed。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 评论，为什么我应该说“问候用户”而不是“打印你好，世界”，你可以用一个手指在这里。哦，你在Zoom中未静音但听不见，你技术上可以，现在可以听见我了吗？是的，好吧，它告诉你代码的目的。是的，代码的目的与之相对。
- en: to what what distinction are you making，doing，yeah exactly if your comment is
    almost。identical to the actual code，you're not really conveying much more。information
    to the reader let alone，yourself in the future，explaining it more generally what
    the。purpose of this line of code is to do is，to greet the user，that's a little
    more descriptive now to。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你在做什么，确切地说，你在区分什么，如果你的注释几乎与实际代码相同，你并没有向读者传达更多的信息，更不用说将来对自己解释了。更一般地说，这行代码的目的，是问候用户，这样的描述要更清晰一些。
- en: so short，that even though style50 yes would，prefer that you add some comments。if
    you're lying if your program really，reduces to one line of code you probably。don't
    need a comment now，here however pretty much every other，program we're going to
    write here and。after is going to be more than just one，main line of code like
    this printf。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 因为如此简短，即使风格50会更希望你添加一些注释。如果你的程序确实只归结为一行代码，你可能不需要注释。现在，然而，几乎我们接下来要写的每一个程序都会超过一行主代码，比如这行printf。
- en: so it's going to make much more sense，soon to come that we're going to want
    to，actually print out。add to our code some actual comments，well let me introduce
    one。final tool here that will help us solve，sophisticated，programs and this is
    check 50。this is a。tool specifically，that you'll use either in labs or in，assignments。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 所以很快就会变得更有意义，我们将希望实际打印出来。给我们的代码添加一些实际的注释。好吧，让我介绍一个最终的工具，这将帮助我们解决复杂的程序，这就是检查50。这是一个特别的工具，你将会在实验室或作业中使用。
- en: to actually check the correctness of，your code so whereas help 50，just helps
    you compile your code。typically when it's not compiling at all，style 50 helps
    you improve the style of，your code check 50。will check the correctness of your
    code，against，have written，homework problem。actually is so we write some tests
    to，correctly，as per our own specifications so how，might i。
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上检查你代码的正确性，而帮助50仅仅是帮助你编译代码。通常在它完全无法编译的时候，风格50帮助你改善代码的风格，检查50将会检查你的代码的正确性，针对你写的作业题目。实际上我们写了一些测试，以正确地符合我们的规格，所以我该如何。
- en: run check 50 this will totally depend on，the problem set or the lab。and we will
    always in the problem setter，lab tell you what command to type for，check 50。it's
    not something you could，necessarily figure out on your own，i happen to remember
    that we have a。check that is a test，called cs50 slash problems slash hello，and
    this just happens to be a unique。
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 运行检查50这将完全依赖于问题集或实验室。我们将在问题设置器或实验室中告诉你要输入的命令。你可能无法自己弄明白，我恰好记得我们有一个测试，叫做cs50/problems/hello，这恰好是一个独特的。
- en: it's not a url，it's not the path of a file it's just a，tell you。in the problem
    set or lab if i run this，command now what's going to happen is，the file called
    hello。c in my ide，is being uploaded to github this popular，place for storing code
    i'm going to log。in with my student account，and then oh none of you can actually
    see。
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 它不是一个网址，也不是一个文件的路径，它只是一个说明。在问题集或实验室中，如果我现在运行这个命令，发生的事情是，我的 ide 中的名为 hello.c
    的文件正在上传到这个流行的存储代码的地方 github，我将用我的学生账户登录，然后哦，你们都看不到。
- en: what i'm doing here so we're going to，restart this demonstration here。because
    now you can actually see my code，so made it，almost without a mistake so check
    50 is。this tool that's going to allow you to，test the correctness of your code
    let me。go ah**d now and run it as follows i'm，going to type check 50。
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里做的事情，所以我们将重新开始这个演示，因为现在你实际上可以看到我的代码，所以几乎没有错误地完成，所以 check 50 是这个工具，它将允许你测试你的代码的正确性。让我现在继续并按如下方式运行，我将输入
    check 50。
- en: and then cs50 slash problem slash hello，odds are you will never run this，identical
    command。again in the problem set or lab we will，always tell you，what to type you
    won't know what。otherwise to type unless we tell you，what test to use，this is
    going to now upload my file，hello。c。to a service called github which again，is
    a popular tool for sharing code we。
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是 cs50 斜杠问题斜杠 hello，概率是你将永远不会运行这个相同的命令。在问题集或实验室中，我们总会告诉你该输入什么，你不会知道该输入什么，除非我们告诉你使用什么测试，这现在将上传我的文件
    hello.c 到一个叫做 github 的服务，它再次是一个流行的共享代码工具。
- en: use it to collect submissions for this，i'm going to then type in my password。you
    won't see it you'll instead see，asterisks or like bullets in a web page。i'm going
    to go ah**d and hit enter then，it's going to verify my code it's going，to do some
    thinking。it's uploading now dot dot dot and now，we're just waiting for the internet
    to，servers。
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 用它来收集提交，我接下来将输入我的密码。你看不到它，你会看到星号或像网页中的项目符号。我将会前进并按下回车，然后它将验证我的代码，它会进行一些思考。它正在上传，现在我们只是在等待互联网的服务器。
- en: we are running your code after compiling，your code or in this case mine。![](img/216227000afccd2cf223fad469ab56f3_55.png)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在编译你的代码后运行你的代码，或者在这个情况下是我的。![](img/216227000afccd2cf223fad469ab56f3_55.png)
- en: and making sure yes it actually behaved，as it should have and what you'll，typically
    see hopefully。are a bunch of green smiley faces saying，yes that your code exists。yes
    that your code compiles and yes for，instance it prints hello world。sometimes you
    might see red frowny faces，which means no your code did not work，the problem set。
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 并确保是的，它实际上按预期运行，而你通常会看到，希望的是一堆绿色微笑脸，表示是的，你的代码存在。是的，你的代码可以编译，并且是的，例如，它打印 hello
    world。有时你可能会看到红色的皱眉脸，这意味着不，你的代码没有工作，问题集。
- en: at which point it's back to the drawing，board on your part to figure out exactly。what
    needs to be fixed up here，sometimes you'll see yellow output with。just a straight
    yellow face which just，means we weren't even able to run。a certain test because
    some other test，relatively，quick feedback on the correctness of。
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在这时，就得回到你的白板，弄清楚这里到底需要修复什么。有时你会看到黄色输出，只有一个简单的黄脸，这意味着我们甚至无法运行某个测试，因为某个其他测试，关于正确性提供了相对快速的反馈。
- en: your code before you even submit it，and call it a day and check 50。instructions
    will always be accompanied，by the problem itself in the lab，here now。within this
    terminal window i can do，more than just run，make and dot slash hello or whatever
    my。program's name is，50 and，check 50。 it turns out that i'm really，using in the
    form of cs50 ide。
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在提交代码之前，你可以检查一下，结束这一天并检查 check 50。说明将始终伴随问题本身，在实验室中，在这个终端窗口中，我可以做的不仅仅是运行 make
    和 dot slash hello 或者我程序的名字是 50 并检查 50。结果是我实际上是在 cs50 ide 的形式中使用。
- en: my own server in the cloud so yes i'm，using a website，your own。server or your
    own computer in the cloud，somewhere out there on the internet。you have your own
    username and password，in the form of cs50 ide，you write。the programs that you
    write that are，stored in this ide，and there's a few more features i'll now。
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我自己在云中的服务器，所以是的，我正在使用一个网站，你自己的服务器或你自己的计算机在云中，在互联网上的某个地方。你有自己的用户名和密码，以 cs50 ide
    的形式，你编写的程序存储在这个 ide 中，还有一些我现在会介绍的其他功能。
- en: draw our attention to perhaps the most，friendly one is this little folder icon，at
    top left。if i click this little folder icon，you'll now see what's。![](img/216227000afccd2cf223fad469ab56f3_57.png)
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 也许最友好的一个是左上角的小文件夹图标。如果我点击这个小文件夹图标，你现在会看到是什么。![](img/216227000afccd2cf223fad469ab56f3_57.png)
- en: generally called a file browser or a，file tree which is just like a graphical。representation
    of the files，in my account or in my ide in this case。looks similar to mac os looks
    similar to，windows and this is just a graphical。user interface built into the
    ide。
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 通常被称为文件浏览器或文件树，就像是我的账户或这个案例中我 IDE 中文件的图形表示。看起来类似于 macOS，看起来类似于 Windows，这只是内置于
    IDE 的图形用户界面。
- en: '![](img/216227000afccd2cf223fad469ab56f3_59.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/216227000afccd2cf223fad469ab56f3_59.png)'
- en: so that for instance if i close my tab，by clicking this little x button up here。![](img/216227000afccd2cf223fad469ab56f3_61.png)
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我通过点击右上角的这个小 x 按钮来关闭我的标签。![](img/216227000afccd2cf223fad469ab56f3_61.png)
- en: and i want to reopen the file much like，you would imagine on a mac or pc。it's
    as simple as double-clicking the，file on the left-hand side，but notice i didn't
    click on hello。![](img/216227000afccd2cf223fad469ab56f3_63.png)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我想重新打开文件，就像你在 Mac 或 PC 上想象的一样。只需双击左侧的文件，但请注意我并没有点击 hello。![](img/216227000afccd2cf223fad469ab56f3_63.png)
- en: because notice what happens if i open，hello my gosh，like what is going on here。this
    is kind of a mess there's redness，there's dots，any thoughts from someone on why。i'm
    seeing what i'm seeing because odds，are you will accidentally at some point。click
    on a file like hello，instead of on a file like hello。c，it is the binary code so
    it's the。
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 因为请注意，如果我打开，天哪，发生了什么。这有点乱，有红色，还有点点，谁能告诉我这是为什么。我看到的这些是因为概率，或许你在某个时刻会不小心点击一个文件，比如
    hello，而不是像 hello.c 这样的文件，它是二进制代码。
- en: machine language so it doesn't allow the，user to see them besides the code they，write
    and see。yeah exactly what you're trying to look，at in this tab，is binary codes
    zeros and ones however。those zeros and ones are technically，being misinterpreted
    at the moment。as ascii characters or unicode，characters so recall from last week。
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 机器语言不允许用户看到他们所写的代码之外的内容。是的，正如你在这个标签页中所尝试查看的，实际上是二进制代码，零和一。然而，这些零和一在技术上被误解为 ASCII
    字符或 Unicode 字符，请回忆一下上周的内容。
- en: ascii is this mapping between numbers，and letters，and numbers of course are
    just patterns。of zeros and ones and this looks super，cryptic because we're trying
    to。misinterpret zeros and ones as though，there's，many more characters in ascii
    and，unicode than a。through z and the numbers there's some，unprintable characters，and
    indeed all the funkiness we're。
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: ASCII 是数字、字母之间的映射，数字当然只是零和一的模式，这看起来非常神秘，因为我们试图误解零和一，好像在 ASCII 和 Unicode 中有更多的字符，而不是
    a 到 z 之间的字母和数字，还有一些不可打印的字符，实际上所有的怪异之处都是。
- en: seeing here is just a misinterpretation，of zeros and ones，that are instructions
    to the computer。machine code，for the computer being misinterpreted as，text so
    you can't edit a binary file。like this so to speak，you should just close hello
    when you do。something like that and make sure you've，double clicked on and opened。
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里看到的只是零和一的误解，这些是计算机的指令。机器代码被误解为文本，因此你无法编辑这样的二进制文件。因此，当你做类似的事情时，你应该关闭 hello，并确保你已双击并打开了它。
- en: your actual source code file as well，so we've seen strings and there's other。data
    types and there's other functions，much more，i think we're at a good point now
    to。perhaps take a break let this sink in，minute break，and when we resume we'll
    introduce a few。more features of c and compare them，against what we saw last week。
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 你的实际源代码文件也是如此，所以我们看到了字符串，还有其他数据类型，还有其他函数，更多的，我觉得现在是个不错的时机，也许我们可以休息一下，让这些内容消化，休息一分钟，等我们恢复时，我们将介绍
    C 的一些新特性，并将其与上周看到的进行比较。
- en: in scratch so we'll see you in seven，all right we are back so recall where we。left
    off was we were looking at this，graphical user interface the top left。the file
    browser the file tree that just，gives us more graphical，let's now。do this the
    the old school command，line way in my terminal window so it。
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Scratch 中，我们七天后再见，好吧，我们回来了，请回忆一下我们停留的地方，我们正在查看这个左上角的图形用户界面，文件浏览器，文件树，这给了我们更多的图形。现在让我们以老派的命令行方式在我的终端窗口中来做这个。
- en: turns out that using our terminal window，can we not only compile code and run，and
    the like。we can also manipulate files and folders，even that happen to exist。in
    my ide that is in the computer i have，access to here in the cloud。and the first
    command i'll propose is，that we type ls，ls is shorthand notation for list and。
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，使用我们的终端窗口，我们不仅可以编译代码并运行等操作。我们还可以操作文件和文件夹，即使这些文件夹存在于我的 IDE 中，也就是我在这里的云端计算机上可以访问的地方。我要提的第一个命令是，输入
    ls，ls 是列出的简写。
- en: quite simply ls，current folder，so this would be like double clicking on。your
    my documents folder in windows or，documents in mac os，ls just lists the contents
    now notice。hello is a little weird it's highlighted，in green and there's an asterisk。and
    there's an asterisk after it and，that's just a visual cue。
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 非常简单的ls，当前文件夹，所以这就像在windows中双击你的“我的文档”文件夹或在mac os中的“文档”。ls只是列出内容，现在注意，hello有点奇怪，它被高亮显示为绿色，并且后面有一个星号，那只是一个视觉提示。
- en: '![](img/216227000afccd2cf223fad469ab56f3_65.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/216227000afccd2cf223fad469ab56f3_65.png)'
- en: that that file is executable that is，dot slash，hello the star is not part of
    the file。name and of course we see hello。c，rename，my file well i could much like
    in mac os。![](img/216227000afccd2cf223fad469ab56f3_67.png)
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 那个文件是可执行的，也就是说，点斜杠hello，星号不是文件名的一部分，当然我们看到hello.c，重命名我的文件，嗯，我可以像在mac os中那样。![](img/216227000afccd2cf223fad469ab56f3_67.png)
- en: or windows i could go up to the file，browser up here，i could control click or
    right click and。notice there's a whole bunch of menu。![](img/216227000afccd2cf223fad469ab56f3_69.png)
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 或者在windows上，我可以去上面的文件浏览器，控制单击或右键单击，注意有一大堆菜单。![](img/216227000afccd2cf223fad469ab56f3_69.png)
- en: own computer，and i could rename the file right up。![](img/216227000afccd2cf223fad469ab56f3_71.png)
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我自己的电脑，我可以直接重命名文件。![](img/216227000afccd2cf223fad469ab56f3_71.png)
- en: here but generally speaking we're going，to do things at the command line only，operations
    today。are it's going to be a much more，powerful command line interface for me。so
    suppose i change my mind and，you know what i i don't like this，program。and start
    over strictly speaking i don't，need to delete hello ever i can just。
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，但一般来说，我们今天将只在命令行上进行操作。这将为我提供一个更强大的命令行界面。因此，假设我改变主意，我知道我不喜欢这个程序，并且想重新开始，严格来说，我并不需要删除hello，我可以直接。
- en: recompile it and it will keep getting，changed and changed but if i do want to。remove
    it i can type rm，hello and then hit enter and then i'll，be asked remove regular
    file hello。that's just a visual confirmation that i，y，or yes or some such reply
    and if i hit y。and enter nothing seems to happen but，notice what happened up here
    at top。
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 重新编译它，它会不断被修改，但如果我想删除它，我可以输入rm hello，然后按回车，接着会被询问是否要删除常规文件hello。这只是一个视觉确认，我可以回复y或yes之类的，如果我按y和回车，似乎没有发生什么，但注意顶部发生的事情。
- en: left notice that hello is now gone，leaving only hello。c，code file。maybe now
    i want to change this program，and i don't want to write hello。c but，goodbye。c。well
    let me close the tab up there and，yes i could go and right click or。control click
    on it but again we don't，need to use the graphical interface。
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 左边注意，hello现在消失了，只留下hello.c代码文件。也许现在我想更改这个程序，不想写hello.c，而是goodbye.c。让我关闭上面的标签，是的，我可以右键单击或者控制单击它，但我们不需要使用图形界面。
- en: let me go ah**d and instead do mv，hello。c，goodbye。c mv is the move command。and
    even though it would be nice if it's，called rename instead of move。move just moves
    one file to another，move，hello。c goodbye。c notice what happened，at top left。now
    my same file is called goodbye。c and，if again i type，ls i can see that it's indeed
    uh。
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让我继续，然后做mv hello.c goodbye.c，mv是移动命令。尽管如果它叫重命名而不是移动会更好，但移动只是将一个文件移到另一个地方，移动hello.c
    goodbye.c，注意左上方发生的事情。现在我的同一个文件叫做goodbye.c，如果我再次输入ls，我可以看到它确实是。
- en: renamed now let me go ah**d and move，that back because i want to stay，on my
    hello。c program but suppose i want，programs，and so my account is going to get
    a。little bit messy with more and more，files over the course of today。so suppose
    you want to create a folder，otherwise known as a directory，make。
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我继续，把它移回去，因为我想保留hello.c程序，但假设我想要程序，因此我的账户会随着今天越来越多的文件变得有些混乱。假设你想创建一个文件夹，也就是一个目录，make。
- en: directory and then the name of the，directory i want to make for instance。lecture
    you could call it anything you，code，maybe i want to store all of today's。files
    in a lecture directory，when i hit enter there notice what，happens in my file tree
    up here。the triangle，it's empty because i haven't put，move，hello。c into the lecture
    folder mv，hello。
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 目录，然后是我想要创建的目录的名称。例如，lecture，你可以随意命名，也许我想把今天所有的文件存储在lecture目录中，当我按下回车时，注意我的文件树上发生了什么。三角形是空的，因为我还没有移动hello.c到lecture文件夹中，mv
    hello。
- en: c lecture and now let me hit enter，and voila now notice that it's nested。inside
    of this lecture folder，and indeed if i now type ls for list i，only see the lecture
    folder。unfortunately i'm kind of now don't have，access to hello。c，within this
    command line environment。unless i change into that directory now，in the world
    of macs and pcs。
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: c 讲座，现在让我按下回车键，瞧，现在注意到它被嵌套在这个讲座文件夹中，实际上如果我现在输入 ls 列出文件，我只看到讲座文件夹。不幸的是，我现在没有访问
    hello.c 的权限，无法在这个命令行环境中访问，除非我切换到那个目录，在 mac 和 pc 的世界里。
- en: we obviously would just double click on，a folder and voila we're inside of it。in
    a command line interface you need to，be more deliberate so i'm going to do cd。for
    change directory then lecture and，then i'm going to go ah**d and hit enter。and
    now notice and now it might make，more sense why this whole time we've，been seeing
    in blue。
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们显然会双击一个文件夹，瞧，我们就在里面。在命令行界面中，你需要更有目的性，所以我要使用 cd 来更改目录，然后是讲座，然后我将继续按回车。现在注意，这样做可能更能解释为什么这段时间我们一直看到蓝色。
- en: this tilde lecture slash the tilde just，my，own account my own default folder
    like，mac os。that's what tilde represents in，of the folder，that i am now inside
    so it's as though i。double-clicked on lecture in mac os or，windows to open a folder。now
    i'm inside this lecture directory in，my terminal window，voila，was uh。
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 ~ 讲座 / ，这个 ~ 只是我自己的账户，我自己的默认文件夹，像 mac os 一样。这就是 ~ 在我现在所在的文件夹中的代表，仿佛我在 mac
    os 或 windows 上双击讲座以打开一个文件夹。现在我在终端窗口中进入这个讲座目录，瞧，嗯。
- en: that i moved into it now let me undo，this because i'm going to go ah**d and。keep
    things a little simpler for now，and suppose that i want to move hello。c，of syntax。there's
    this shorthand notation for what，we'll call a parent folder。so just like in family
    trees there's the，notion of parents and children。
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经进入其中，现在让我撤销这个，因为我想保持简单一点，假设我想移动 hello.c 的语法。对于我们称之为上级文件夹的内容，有这种简写符号。因此，就像在家谱中，有父母和孩子的概念。
- en: and grandchildren and so forth that's，also true on computer systems that have。folders
    and folders inside of folders，folders，there's a hierarchy there much like a。family
    tree so if i want to move hello。c，one level up i can actually do mv，like saying。when
    i do that，notice what happened at top left now，hello。c，is not inside of the lecture
    folder but。
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 孙子和孙女等等，这在有文件夹和文件夹内有文件夹的计算机系统中也是如此，文件夹之间有层级关系，就像家谱一样。因此，如果我想将 hello.c 移动到上一级，我实际上可以使用
    mv，就像在说。当我这样做时，注意左上角发生了什么，现在 hello.c 不再在讲座文件夹中。
- en: below it and indeed if i type ls，now in the lecture folder there's。nothing there
    how do i move myself，these folders，dot，so change directory to my parent dot dot，above。enter
    and now i'm apparently in just，tilda slash which is again。cryptic shorthand notation
    for your own，home directory your my documents，ls here。
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面，实际上如果我现在在讲座文件夹中输入 ls，里面是空的，我该如何在这些文件夹之间移动呢？点（.），因此切换到我的上级目录（..），回车，现在我显然在
    ~ 目录下，这又是你自己家目录的简写符号，你的我的文档，ls 在这里。
- en: i'm done with this lecture folder i，folder，i can do not rm for remove like uh。i
    did to get rid of hello but rmdir，gone，and i've undone all of the various。![](img/216227000afccd2cf223fad469ab56f3_73.png)
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经完成了这个讲座文件夹，我可以使用 rm 来删除像我之前做的那样来移除 hello，但用 rmdir，已经不见了，我撤销了所有的各种操作。![](img/216227000afccd2cf223fad469ab56f3_73.png)
- en: changes that i made earlier，but perhaps now it makes a little more。sense why
    i was doing something earlier，let me open up my hello。c file。let me make hello
    again which is way，back where we left off，and recall that all this time i've been。doing
    dot slash hello。
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前所做的更改，但或许现在可以更好地理解为什么我之前做了一些事情，让我打开我的 hello.c 文件。让我再次创建 hello，这正是我们停下来的地方，回想一下，这段时间我一直在使用
    ./hello。
- en: '![](img/216227000afccd2cf223fad469ab56f3_75.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/216227000afccd2cf223fad469ab56f3_75.png)'
- en: well why is that well just as dot dot，dot，refers to your current directory so
    even。though this looks a little silly，way，called hello，that's right here in my
    current。directory dot means current directory，dot dot means parent directory and
    so，there we see finally。why i've been typing dot slash hello all，this time but
    again it's just the，textual analog。
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么会这样呢？就像点点（..）指代你当前的目录，尽管这看起来有点傻，名为 hello 的文件夹就在我当前的目录中，点（.）代表当前目录，点点（..）代表上级目录，所以，我们终于明白了为什么我一直在输入
    ./hello，这只是文本的类比。
- en: of doing something like uh double，clicking on an icon in mac os。or windows so
    there's other commands too，and over time you'll get exposed to。these and use them
    for various problems，cp for copy for instance uh is yet。another and many others
    but these are，all just standard commands they are not，cs50 specific。
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 做类似于在 mac os 或 windows 上双击图标的事情。还有其他命令，随着时间推移你会接触到这些命令并在各种问题中使用它们，比如 cp 是复制的命令，等等，许多其他命令，但这些都是标准命令，并不是
    cs50 特有的。
- en: standard commands that allow us to，manipulate files and folders。![](img/216227000afccd2cf223fad469ab56f3_77.png)
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 允许我们操作文件和文件夹的标准命令。![](img/216227000afccd2cf223fad469ab56f3_77.png)
- en: in a computer like this and question，from max，don't really understand the difference。between
    the hello，program and the hello。c program it seems，like the one that doesn't have。c
    on it isn't used for anything or oh it，things，in the story we have source code
    which。is the c code i've been writing，and then machine code which is the zeros。
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这样的计算机中，来自 max 的问题是，我不太明白 hello 程序和 hello.c 程序之间的区别，似乎没有 c 的那个没有用处。哦，在这个故事中，我们有源代码，就是我写的
    c 代码，然后是机器代码，即零。
- en: and ones that the computer understands，i have been writing all of my code in，the
    file called hello。c。make，program creates a new file called hello，that technically
    contains only zeros and。ones and that is the machine code that，i'm actually running，use，rm
    and i can get rid of the hello。program just like i did before，and now we're back
    at the very beginning。
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机理解的那些代码，我一直在写的所有代码都在一个叫 hello.c 的文件中。make 程序会创建一个新的文件叫 hello，技术上来说它只包含零和一，而这就是我实际运行的机器代码。我可以使用
    rm 来删除 hello 程序，就像我之前做的那样，现在我们回到了最开始。
- en: of the story where we wrote this code，from scratch，if i now type make and let
    me do this。now ls notice i've only got one file，let me now do make hello i see
    that。cryptic output but if i type ls again，only，the green one with the asterisk
    is。executable that is the machine code that，the compiler。
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们从零开始写代码的故事，如果我现在输入 make，让我来试试。现在 ls 注意到我只有一个文件，现在让我做 make hello，我看到那个神秘的输出，但如果我再次输入
    ls，只有绿色带星号的那个是可执行的，那是编译器生成的机器代码。
- en: '![](img/216227000afccd2cf223fad469ab56f3_79.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/216227000afccd2cf223fad469ab56f3_79.png)'
- en: has created for me and i should say and，disclaim i've been telling a little
    bit，of a white lie today。make itself is not actually a compiler，doing，but it's
    making it easier for us to。actually compile our code。
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 为我创建的程序，我应该说，声明一下，我今天说了一点小谎言。make 本身其实不是一个编译器，而是让我们更容易去编译我们的代码。
