- en: 1.1 Your First Program
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.1 您的第一个程序
- en: 原文：[https://introcs.cs.princeton.edu/python/11hello](https://introcs.cs.princeton.edu/python/11hello)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/python/11hello](https://introcs.cs.princeton.edu/python/11hello)
- en: In this section, our plan is to lead you into the world of Python programming
    by taking you through the basic steps required to get a simple program running.
    The *Python system* (hereafter abbreviated *Python*) is a collection of applications,
    not unlike many of the other applications that you are accustomed to using (such
    as your word processor, email program, and web browser). As with any application,
    you need to be sure that Python is properly installed on your computer. You also
    need a text editor and a terminal application. Your first task is to follow the
    instructions for installing such a Python programming environment.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们的计划是通过带领您完成运行简单程序所需的基本步骤，将您引入Python编程的世界。*Python系统*（以下简称*Python*）是一组应用程序，与您习惯使用的其他应用程序（如文字处理器、电子邮件程序和网络浏览器）类似。与任何应用程序一样，您需要确保Python已正确安装在您的计算机上。您还需要一个文本编辑器和一个终端应用程序。您的第一个任务是按照安装这样一个Python编程环境的说明。
- en: You must install either a Python 3 or a Python 2 programming environment.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 您必须安装Python 3或Python 2编程环境中的一个。
- en: Here are instructions for installing a Python 3 programming environment [ [Windows](../windows3)
    · [Mac OS X](../mac3) · [Linux](../linux3) ]. We recommend that you install and
    use the Python 3 programming environment.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是安装Python 3编程环境的说明[[Windows](../windows3) · [Mac OS X](../mac3) · [Linux](../linux3)]。我们建议您安装并使用Python
    3编程环境。
- en: Here are instructions for installing a Python 2 programming environment [ [Windows](../windows2)
    · [Mac OS X](../mac) · [Linux](../linux2) ]. We recommend that you use the Python
    2 programming environment only if you have a compelling reason (external to the
    requirements of this book and booksite) to do so.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是安装Python 2编程环境的说明[[Windows](../windows2) · [Mac OS X](../mac) · [Linux](../linux2)]。我们建议您仅在有充分理由（不属于本书和书站要求的外部原因）时使用Python
    2编程环境。
- en: '* * *'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Programming in Python
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python编程
- en: 'To program in Python, you need to:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Python中编程，您需要：
- en: '*Compose* a program by typing it into a file named, say, `myprogram.py`.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过将其键入到一个名为，比如`myprogram.py`的文件中来*撰写*一个程序。
- en: '*Run* (or *execute*) it by typing `python myprogram.py` in the terminal window.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过在终端窗口中键入`python myprogram.py`来*运行*（或*执行*）它。
- en: '* * *'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Composing a Python Program
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 撰写Python程序
- en: A Python program is nothing more than a sequence of characters stored in a file
    whose name has a `.py` extension. To create one, you need only define that sequence
    characters using a text editor.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个Python程序只是存储在具有`.py`扩展名的文件中的一系列字符。要创建一个，您只需使用文本编辑器定义该字符序列。
- en: The program [helloworld.py](helloworld.py.html) is an example of a complete
    Python program. We repeat the program in this page to facilitate the following
    description. The line numbers are shown to make it easy to reference specific
    lines, but they are not part of the program and should not be in your [helloworld.py](helloworld.py.html)
    file.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序[helloworld.py](helloworld.py.html)是一个完整Python程序的示例。我们在本页重复该程序以便后续描述。行号显示出来是为了方便引用特定行，但它们不是程序的一部分，也不应该出现在您的[helloworld.py](helloworld.py.html)文件中。
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The program's sole action is to write a message back to the terminal window.
    A Python program consists of statements. Typically you place each statement on
    a distinct line.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 该程序的唯一操作是向终端窗口写入一条消息。一个Python程序由语句组成。通常，您将每个语句放在不同的行上。
- en: Line 1 contains an `import` statement. That statement tells Python that you
    intend to use the features defined in the `stdio` module, that is, in a file named
    `stdio.py`. The `stdio.py` file is one that we designed specifically for this
    book. It defines functions related to reading input and writing output. Having
    imported the `stdio` module, you can later call a function that is defined in
    that module.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第1行包含一个`import`语句。该语句告诉Python您打算使用在名为`stdio.py`的文件中定义的`stdio`模块中定义的功能。`stdio.py`文件是我们专门为本书设计的一个文件。它定义了与读取输入和写入输出相关的函数。导入`stdio`模块后，您可以稍后调用该模块中定义的函数。
- en: Line 2 is a blank line. Python ignores blank lines; programmers use them to
    separate logical blocks of code.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第2行是空行。Python会忽略空行；程序员使用它们来分隔代码的逻辑块。
- en: Line 3 contains a comment, which serves to document the program. In Python a
    comment begins with the '#' character and extends to the end of the line. Python
    ignores comments; they are present only for human readers of the program.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第3行包含一个注释，用于记录程序。在Python中，注释以'#'字符开始，并延伸到行尾。Python会忽略注释；它们仅供程序的人类读者阅读。
- en: Line 4 is the heart of the program. It is a statement that calls the `stdio.writeln()`
    function to write one line with the given text on it. Note that we call a function
    in another module by writing the module name, followed by a period, followed by
    the function name.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第4行是程序的核心。这是一个调用`stdio.writeln()`函数写入一行给定文本的语句。请注意，我们通过写入模块名、后跟一个句点、后跟函数名的方式来调用另一个模块中的函数。
- en: '|'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '|'
- en: Python 2
  id: totrans-22
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Python 2
- en: . The lingua france in this booksite is Python 3, because it is the future of
    Python programming. However, we have been very careful to ensure that the code
    in the booksite works with either Python 2 or Python 3\. For example, in Python
    2, the [helloworld.py](helloworld.py.html) program could be simply the single
    line `print 'Hello, World'`, but this is not a valid program in Python 3\. To
    develop code for writing output that works in either version of Python, we use
    our `stdio` module. Whenever there is a significant difference between the two
    languages, we call attention to Python 2 users in a callout box like this one.
    |
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本书站的通用语言是Python 3，因为它是Python编程的未来。然而，我们非常小心地确保书站中的代码适用于Python 2或Python 3。例如，在Python
    2中，[helloworld.py](helloworld.py.html)程序可能只是一行`print 'Hello, World'`，但这在Python
    3中不是有效的程序。为了开发能在两个Python版本中都有效的输出代码，我们使用我们的`stdio`模块。每当两种语言之间有显著差异时，我们会在一个类似这样的提示框中提醒Python
    2用户。|
- en: '* * *'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Executing a Python Program
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 执行 Python 程序
- en: Once you compose the program, you can run (or execute) it. To run your program
    the Python compiler translates your Python program into a language that is more
    suitable for execution on a computer. Then the Python interpreter directs your
    computer to follow the instructions expressed in that language. To run your program,
    type the `python` command followed by the name of the file containing the Python
    program in a terminal window.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您编写好程序，您可以运行（或执行）它。为了运行您的程序，Python 编译器将您的 Python 程序转换为更适合在计算机上执行的语言。然后 Python
    解释器指导您的计算机按照该语言中表达的指令执行。要运行您的程序，在终端窗口中键入`python`命令，后跟包含 Python 程序的文件名。
- en: '[PRE1]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If all goes well, you will see the following response:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一切顺利，您将看到以下响应：
- en: '[PRE2]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'For the time being, all of your programs will be just like [helloworld.py](helloworld.py.html),
    except with a different sequence of statements. The easiest way to compose such
    a program is to:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，您的所有程序都将与[helloworld.py](helloworld.py.html)相同，只是语句序列不同。组成这样的程序的最简单方法是：
- en: Copy [helloworld.py](helloworld.py.html) into a new file whose name is the program
    name followed by `.py`.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将[helloworld.py](helloworld.py.html)复制到一个新文件中，文件名为程序名称后跟`.py`。
- en: Replace the call of `stdio.writeln()` with a different statement or sequence
    of statements.
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用不同的语句或语句序列替换`stdio.writeln()`的调用。
- en: '* * *'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Errors
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 错误
- en: It is easy to blur the distinction among editing, compiling, and interpreting
    programs. You should keep them separate in your mind when you are learning to
    program, to better understand the effects of the errors that inevitably arise.
    You can find several examples of errors in the Q&A at the end of this section.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在学习编程时，很容易混淆编辑、编译和解释程序之间的区别。在学习编程时，您应该将它们分开，以更好地理解不可避免出现的错误的影响。您可以在本节末尾的问答中找到几个错误的示例。
- en: You can fix or avoid most errors by carefully examining the program as you create
    it. Some errors, known as *compile-time errors*, are raised when Python compiles
    the program, because they prevent the compiler from doing the translation. Python
    reports a compile-time error as a `SyntaxError`. Other errors, known as *run-time
    errors*, are not raised until Python interprets the program. For example, if you
    forget the `import stdio` statement in [helloworld.py](helloworld.py.html), then
    Python will raise a `NameError` at run time.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 通过仔细检查程序，您可以修复或避免大多数错误。一些错误，称为*编译时错误*，在 Python 编译程序时引发，因为它们阻止编译器进行翻译。Python
    报告编译时错误为`SyntaxError`。其他错误，称为*运行时错误*，直到 Python 解释程序时才会引发。例如，如果您在[helloworld.py](helloworld.py.html)中忘记了`import
    stdio`语句，那么 Python 将在运行时引发`NameError`。
- en: '* * *'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Input and Output
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 输入和输出
- en: Typically, we want to provide input to our programs, that is, data that they
    can process to produce a result. The simplest way to provide input data is illustrated
    in [useargument.py](useargument.py.html). Whenever you run that program, it accepts
    the command-line argument that you type after the program name and writes it back
    out to the terminal as part of the message.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，我们希望为我们的程序提供输入，即它们可以处理以产生结果的数据。提供输入数据的最简单方法在[useargument.py](useargument.py.html)中有所说明。每当您运行该程序时，它都会接受您在程序名称后键入的命令行参数，并将其作为消息的一部分写回终端。
- en: '[PRE3]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In [useargument.py](useargument.py.html), the statement `import sys` tells Python
    that you wish to use the features defined in the `sys` module. One of those features,
    named `argv`, is a list of command-line arguments (which appear after `python
    useargument.py` on the command line, delimited by spaces). Section 1.4 describes
    lists in detail; for now it is sufficient to understand that `sys.argv[1]` is
    the first command-line argument that you type after the program name, `sys.argv[2]`
    is the second command-line argument that you type after the program name, and
    so forth.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在[useargument.py](useargument.py.html)中，语句`import sys`告诉 Python 您希望使用`sys`模块中定义的功能。其中一个功能名为`argv`，是一个命令行参数列表（出现在命令行上`python
    useargument.py`之后，由空格分隔）。第 1.4 节详细描述了列表；目前了解`sys.argv[1]`是您在程序名称后键入的第一个命令行参数，`sys.argv[2]`是您在程序名称后键入的第二个命令行参数，依此类推。
- en: In addition to `stdio.writeln()`, [useargument.py](useargument.py.html) calls
    the `stdio.write()` function. This function is just like `stdio.writeln()`, but
    writes just the string (not a newline character).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 除了`stdio.writeln()`，[useargument.py](useargument.py.html)还调用`stdio.write()`函数。该函数与`stdio.writeln()`类似，但只写入字符串（不是换行符）。
- en: '* * *'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Getting More Information
  id: totrans-44
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取更多信息
- en: 'We encourage you to visit the official Python website, [http://www.python.org](http://www.python.org),
    frequently while using this booksite. More specifically:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我们鼓励您在使用本书站时经常访问官方 Python 网站[http://www.python.org](http://www.python.org)。更具体地说：
- en: '[http://docs.python.org/reference/index.htm](http://docs.python.org/reference/index.html)
    provides information on the Python language.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://docs.python.org/reference/index.htm](http://docs.python.org/reference/index.html)提供有关
    Python 语言的信息。'
- en: '[http://docs.python.org/library/index.html](http://docs.python.org/library/index.html)
    provides information on the Python standard libraries.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://docs.python.org/library/index.html](http://docs.python.org/library/index.html)提供有关
    Python 标准库的信息。'
- en: '[http://www.python.org/dev/peps/pep-0008/](http://www.python.org/dev/peps/pep-0008/)
    provides information on Python programming style.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[http://www.python.org/dev/peps/pep-0008/](http://www.python.org/dev/peps/pep-0008/)提供有关
    Python 编程风格的信息。'
- en: '* * *'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Programming Style
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编程风格
- en: The final item in that list deserves some elaboration. Concerning programming
    style...
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的最后一项值得一些详细说明。关于编程风格...
- en: The overarching goal when composing code is to make it easy to understand. Understandable
    programs are more likely to be correct, and are more likely to stay correct as
    they are maintained over time.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写代码时的首要目标是使其易于理解。易于理解的程序更有��能是正确的，并且在随着时间的推移而进行维护时更有可能保持正确。
- en: Programmers use style guides to make programs easier to understand. As noted
    above, the official Python style guide is given by the page [http://www.python.org/dev/peps/pep-0008/](http://www.python.org/dev/peps/pep-0008/).
    We recommend that you give the style guide a quick read now, and that your return
    to it occasionally as you gain more experience with composing Python programs.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员使用风格指南使程序更易于理解。正如上面所述，官方 Python 风格指南在页面 [http://www.python.org/dev/peps/pep-0008/](http://www.python.org/dev/peps/pep-0008/)
    中给出。我们建议你现在快速阅读一下风格指南，并在以后随着编写 Python 程序的经验增加时偶尔返回查看。
- en: '[Appendix B](../appendix_style) complements the official Python style guide,
    providing recommendations that are appropriate for those who are new to computer
    programming. We recommend that you give Appendix B a guick read now, and return
    to it occasionally.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '[附录 B](../appendix_style) 补充了官方 Python 风格指南，提供了适合初学计算机编程的建议。我们建议你现在快速阅读一下附录
    B，并偶尔返回查看。'
- en: '* * *'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Q & A
  id: totrans-56
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 问与答
- en: '**Q.** Why Python?'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 为什么选择 Python？'
- en: '**A.** The programs that we are studying are very similar to their counterparts
    in several other languages, so our choice of language is not crucial. We use Python
    because it is widely available, embraces a full set of modern abstractions, and
    has a variety of automatic checks for mistakes in programs, so it is suitable
    for learning to program. Python is evolving and comes in many versions.'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 我们正在研究的程序与其他几种语言中的对应程序非常相似，因此我们选择的语言并不重要。我们使用 Python 是因为它广泛可用，包含一整套现代抽象，并且具有各种��动检查程序错误的功能，因此适合学习编程。Python
    正在不断发展，并有许多版本。'
- en: '**Q.** Which version of Python should I use?'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 我应该使用哪个版本的 Python？'
- en: '**A.** We recommend Python 3, but we have been very careful to ensure that
    the code in the book works with either Python 2 or Python 3\. All of the code
    has been tested with Python versions 2.7 and 3.4 (the latest major releases of
    Python 2 and Python 3 at the time of publication). We use the generic term Python
    2 to refer to Python 2.7 and Python 3 to refer to Python 3.4.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 我们推荐使用 Python 3，但我们非常小心地确保本书中的代码适用于 Python 2 或 Python 3。所有代码都经过了 Python
    2.7 和 3.4 版本的测试（出版时的最新主要版本）。我们使用通用术语 Python 2 指 Python 2.7，Python 3 指 Python 3.4。'
- en: '**Q.** Do I really have to type in the programs in the book to try them out?
    I believe that you ran them and that they produce the indicated output.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 我真的必须在书中输入程序以尝试运行它们吗？我相信你已经运行过它们并且它们产生了指定的输出。'
- en: '**A.** You should type in and run [helloworld.py](helloworld.py.html). Your
    understanding will be greatly magnified if you also run [useargument.py](useargument.py.html),
    try it on various inputs, and modify it to test different ideas of your own.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 你应该输入并运行 [helloworld.py](helloworld.py.html)。如果你还运行 [useargument.py](useargument.py.html)，尝试不同的输入并修改它以测试自己的想法，你的理解将大大增强。'
- en: '**Q.** When I run [helloworld.py](helloworld.py.html), Python generates the
    message'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 当我运行 [helloworld.py](helloworld.py.html) 时，Python 生成消息'
- en: '[PRE4]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: What does that mean?
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 那是什么意思？
- en: '**A.** That means that the booksite module `stdio` is not available to Python.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 这意味着书站模块 `stdio` 对 Python 不可用。'
- en: '**Q.** How can I make the booksite module `stdio` available to Python?'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 如何使书站模块 `stdio` 可用于 Python？'
- en: '**A.** If you followed the step-by-step instructions on the booksite for installing
    a Python programming environment, the `stdio` module should already be available
    to Python.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 如果你按照本书网站上的逐步说明安装 Python 编程环境，`stdio` 模块应该已经可用于 Python。'
- en: '**Q.** What are Python''s rules regarding whitespace characters such as tabs,
    spaces, and newlines?'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** Python 对制表符、空格和换行符等空白字符有什么规定？'
- en: '**A.** In general, Python considers most whitespace in program text to be equivalent,
    with two important exceptions: *string literals* and *indentation*. A string literal
    is a sequence of characters inside single quotes, such as `''Hello, World''`.
    If you put any number of spaces within the quotes, you get precisely the same
    number of spaces in the string literal. Indentation is whitespace at a beginning
    of a line. The number of spaces at the beginning of a line plays an important
    role in structuring Python programs, as we will see in Section 1.3\. For now you
    should not indent any code.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 一般来说，Python 认为程序文本中的大多数空白字符是等效的，但有两个重要的例外：*字符串字面值* 和 *缩进*。字符串字面值是单引号内的字符序列，比如
    `''Hello, World''`。如果在引号内放入任意数量的空格，你将在字符串字面值中得到完全相同数量的空格。缩进是行首的空白。行首的空格数量在构建 Python
    程序结构中起着重要作用，我们将在第 1.3 节中看到。目前你不应该缩进任何代码。'
- en: '**Q.** Why should I use comments?'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 为什么要使用注释？'
- en: '**A.** Comments are indispensable because they help other programmers to understand
    your code and even can help you to understand your own code in retrospect. Whereas
    constraints of the book format demand that we use comments sparingly in the programs
    shown in the book, the programs on this booksite are commented to a more realistic
    degree.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 评论是必不可少的，因为它们帮助其他程序员理解你的代码，甚至可以帮助你回顾时理解自己的代码。尽管书中的程序要求我们在书中展示的程序中节制使用注释，但本书网站上的程序被注释得更加现实。'
- en: '**Q.** Can I put more than one statement on a line?'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 我可以在一行上放置多个语句吗？'
- en: '**A.** Yes, by separating statements with semicolons. For example, this single
    line of code produces the same output as [helloworld.py](helloworld.py.html):'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 是的，通过用分号分隔语句。例如，这行代码产生与 [helloworld.py](helloworld.py.html) 相同的输出：'
- en: '[PRE5]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: But many programmers advise against doing this, as a matter of style.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 但许多程序员建议不要这样做，作为一种风格问题。
- en: '**Q.** What happens when you omit a parenthesis or misspell one of the words,
    like `stdio` or `write` or `writeln`?'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 如果省略括号或拼错单词，比如 `stdio`、`write` 或 `writeln`，会发生什么？'
- en: '**A.** It depends upon precisely what you do. These so-called *syntax errors*
    are usually caught by the compiler. For example, if you make a program `bad.py`
    that is exactly the same as [helloworld.py](helloworld.py.html) except that you
    omit the first left parenthesis, you get the following reasonably helpful message:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 这取决于你具体做什么。这些所谓的*语法错误*通常会被编译器捕获。例如，如果你编写一个程序`bad.py`，与[helloworld.py](helloworld.py.html)完全相同，只是省略了第一个左括号，你���得到以下相当有用的消息：'
- en: '[PRE6]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'From this message, you might correctly surmise that you need to insert a left
    parenthesis. But the compiler may not be able to tell you exactly which mistake
    you made, so the error message may be hard to understand. For example, if you
    omit the first right parenthesis instead of the first left parenthesis, you get
    the following less helpful message, which references the line following the erroneous
    one:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 从这条消息中，你可能会正确地推测你需要插入一个左括号。但编译器可能无法告诉你确切地犯了哪个错误，所以错误消息可能难以理解。例如，如果你省略了第一个右括号而不是第一个左括号，你会得到以下不太有用的消息，它引用了错误行后面的行：
- en: '[PRE7]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: One way to get used to such messages is to intentionally introduce mistakes
    into a simple program and then see what happens. Whatever the error message says,
    you should treat the compiler as a friend, because it is just trying to tell you
    that something is wrong with your program.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 习惯于这种消息的一种方法是故意在一个简单的程序中引入错误，然后看看会发生什么。无论错误消息说什么，你都应该把编译器当作朋友，因为它只是在试图告诉你你的程序有问题。
- en: '**Q.** When I run useargument.py, I get a strange error message. Please explain.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 当我运行`useargument.py`时，我收到一个奇怪的错误消息。请解释一下。'
- en: '**A.** Most likely, you forgot to include a command-line argument:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 最有可能的是，你忘记包含一个命令行参数：'
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The Python interpreter is complaining that you ran the program but did not
    type a command-line argument as promised. You will learn more details about list
    indices in Section 1.4\. Remember this error message: you are likely to see it
    again. Even experienced programmers forget to type command-line arguments on occasion.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Python 解释器抱怨你运行了程序，但没有像承诺的那样输入命令行参数。在第1.4节中，你将更详细地了解列表索引。记住这个错误消息：你可能会再次看到它。即使有经验的程序员偶尔也会忘记输入命令行参数。
- en: '**Q.** Which Python modules and functions are available for me to use?'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 我可以使用哪些 Python 模块和函数？'
- en: '**A.** Many standard modules are bundled with any Python installation. Many
    others are available as extension modules that you can download and install subsequently.
    We composed still others (such as the `stdio` module) specifically for this book
    and booksite; we''ll call them *booksite modules*. In short, hundreds of Python
    modules, each (typically) defining multiple functions, are available for you to
    use. This book introduces only the most fundamental modules and functions, and
    does so in a deliberately incremental fashion (starting in the next section) to
    avoid overwhelming you with information.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 许多标准模块都随着任何 Python 安装捆绑在一起。许多其他模块作为扩展模块可供下载和安装。我们专门为本书和书站编写了其他模块（如`stdio`模块）；我们将它们称为*书站模块*。简而言之，有数百个
    Python 模块可供你使用，每个模块（通常）定义多个函数。本书只介绍最基本的模块和函数，并且有意以逐步增量的方式（从下一节开始）介绍，以避免用信息压倒你。'
- en: '* * *'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Exercises
  id: totrans-90
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Compose a program that writes the `Hello, World` message 10 times.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，将`Hello, World`消息写出10次。
- en: '*Solution*: See [tenhellos1.py](tenhellos1.py.html).'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '*解决方案*：参见[tenhellos1.py](tenhellos1.py.html)。'
- en: 'Describe what happens if you omit the following in helloworld.py:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述如果你在helloworld.py中省略以下内容会发生什么：
- en: '`import`'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`import`'
- en: '`stdio`'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`stdio`'
- en: '`import stdio`'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`import stdio`'
- en: 'Describe what happens if you misspell (by, say, omitting the second letter)
    the following in [helloworld.py](helloworld.py.html):'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述如果你在[helloworld.py](helloworld.py.html)中拼错（比如说，省略第二个字母）以下内容会发生什么：
- en: '`import`'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`import`'
- en: '`stdio`'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`stdio`'
- en: '`write`'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`write`'
- en: '`writeln`'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`writeln`'
- en: 'Describe what happens if you omit the following in [helloworld.py](helloworld.py.html):'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述如果你在[helloworld.py](helloworld.py.html)中省略以下内容会发生什么：
- en: the first `'`
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第一个`'`
- en: the second `'`
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个`'`
- en: the `stdio.writeln()` statement
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`stdio.writeln()`语句'
- en: 'Describe what happens if you try to execute [useargument.py](useargument.py.html)
    with each of the following command lines:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述如果你尝试用以下每个命令行执行[useargument.py](useargument.py.html)会发生什么：
- en: '`python useargument.py python`'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`python useargument.py python`'
- en: '`python useargument.py @!&^%`'
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`python useargument.py @!&^%`'
- en: '`python useargument.py 1234`'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`python useargument.py 1234`'
- en: '`python useargument Bob`'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`python useargument Bob`'
- en: '`useargument.py Bob`'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`useargument.py Bob`'
- en: '`python useargument.py Alice Bob`'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`python useargument.py Alice Bob`'
- en: Modify [useargument.py](useargument.py.html) to compose a program that takes
    three names and writes a proper sentence with the names in the reverse of the
    order they are given, so that, for example, `python usethree.py Alice Bob Carol`
    writes the string `'Hi Carol, Bob, and Alice'`.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改[useargument.py](useargument.py.html)编写一个程序，接受三个名字，并按给定顺序的相反顺序写出一个包含这些名字的正确句子，例如，`python
    usethree.py Alice Bob Carol`写出字符串`'Hi Carol, Bob, and Alice'`。
- en: '*Solution*: See [usethree.py](usethree.py.html).'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '*解决方案*：参见[usethree.py](usethree.py.html)。'
- en: Compose a program that writes your initials using nine rows of asterisks like
    the one below.
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，使用九行星号写出你的姓名首字母，就像下面这样。
- en: '[PRE9]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '*Solution*: See [initials.py](initials.py.html).'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：参见[initials.py](initials.py.html)。'
