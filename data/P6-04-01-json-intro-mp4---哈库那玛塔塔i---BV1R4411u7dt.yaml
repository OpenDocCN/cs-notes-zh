- en: P6：04-01-json-intro.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P6：04-01-json-intro.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
- en: This video introduces JSON。 Let's start by talking about its pronunciation。
    Some people call it JSON， and some call it JSON。 I did a little bit of investigation
    and discovered that the original developer of JSON calls it JSON。 so I'll do that
    too。 Like XML， JSON can be thought of as a data model。 an alternative to the relational
    data model that is more appropriate for semi-structured data。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本视频介绍了JSON。我们从谈论它的发音开始。有些人叫它JSON，有些人叫它JSON。我做了一些调查，发现JSON的原始开发者叫它JSON，所以我也这么叫。像XML一样，JSON可以被看作是一种数据模型，是关系数据模型的一种替代方案，更适合半结构化数据。
- en: In this video， I'll introduce the basics of JSON， and I'll also compare JSON
    to the relational data model。 and I'll compare it to XML。 But it's not crucial
    to have watched those videos to get something out of this one。 Now， among the
    three models， the relational model XML in JSON， JSON is by a large margin the
    newest。 and it does show there aren't as many tools for JSON as we have for XML
    and certainly not as we have for relational。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本视频中，我将介绍JSON的基础知识，同时将JSON与关系数据模型进行比较，并将其与XML进行比较。但观看那些视频并不是理解这一个视频内容的必要条件。现在，在这三种模型中，关系模型、XML和JSON，JSON是最新的，且JSON的工具远少于XML，当然也不如关系模型的工具那么多。
- en: '![](img/6a2fc62e24a1743a802a9119373e7f3a_1.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a2fc62e24a1743a802a9119373e7f3a_1.png)'
- en: JSON stands for JavaScript Object Notation， although it's evolved to become
    pretty much independent of JavaScript at this point。 The little snippet of JSON
    in the corner is right now mostly for decoration。 We'll talk about the details
    in just a minute。 Now。 JSON was designed originally for what's called serializing
    data objects that is taking data objects that are in a program and sort of writing
    them down in a serial fashion。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: JSON代表JavaScript对象表示法，尽管现在它已经基本独立于JavaScript。角落里的这段JSON代码现在主要是装饰用途。我们稍后会详细讨论它。现在，JSON最初是为所谓的数据对象序列化设计的，即将程序中的数据对象以串行的方式写下来。
- en: typically in files。 One thing about JSON is that it is human readable。 similar
    to the way XML is human readable， and it's often used for data interchange。 So
    for writing out， say， the objects in a program so they can be exchanged with another
    program and read into that one。 Also， just more generally， because JSON is not
    as rigid as the relational model。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 通常在文件中。关于JSON的一点是，它是可读的，人类可以读取，类似于XML的可读性，它通常用于数据交换。例如，将程序中的对象写出来，以便它们可以与另一个程序交换并在那个程序中读取。此外，由于JSON不像关系模型那样严格，因此它也被广泛使用。
- en: it's generally useful for representing and for storing data that doesn't have
    rigid structure that we've been calling semi-structured data。 As I mentioned，
    JSON is no longer closely tied to JavaScript。 Many different programming languages
    do have parsers for reading JSON data into the program and for writing out JSON
    data as well。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 它通常用于表示和存储没有严格结构的数据，我们称之为半结构化数据。正如我提到的，JSON现在不再与JavaScript紧密相关。许多不同的编程语言都提供了用于读取JSON数据并将JSON数据写入程序的解析器。
- en: '![](img/6a2fc62e24a1743a802a9119373e7f3a_3.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a2fc62e24a1743a802a9119373e7f3a_3.png)'
- en: Now let's talk about the basic constructs in JSON， and as we will see。 these
    constructs are recursively defined。 We'll use the example JSON data shown on the
    screen。 and that data is also available in a file for download from the website。
    The basic atomic values in JSON are fairly typical。 We have numbers， we have strings。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来谈谈JSON中的基本构造，我们将看到这些构造是递归定义的。我们将使用屏幕上显示的示例JSON数据，这些数据也可以从网站下载。JSON中的基本原子值是相当典型的，我们有数字，也有字符串。
- en: we also have boolean values， although there are none of those in this example
    that's true and false and null values。 There are two types of composite values
    in JSON， objects and arrays。 Objects are enclosed in curly braces， and they consist
    of sets of label value pairs。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也有布尔值，虽然在这个示例中没有，这些布尔值有**true**和**false**，以及**null**值。在JSON中有两种复合值类型，分别是对象和数组。对象用大括号括起来，由一组标签值对组成。
- en: '![](img/6a2fc62e24a1743a802a9119373e7f3a_5.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a2fc62e24a1743a802a9119373e7f3a_5.png)'
- en: For example， we have an object here that has a first name and a last name。 We
    have a bigger。 let's say， object here that has ISBN， price， edition and so on。
    When we do our JSON demo。 we'll go into these constructs in more detail。 At this
    point， we're just introducing them。 The second type of composite value in JSON
    is arrays。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们有一个对象，它包含名字和姓氏。我们有一个更大的对象，假设它包含 ISBN、价格、版本等。在进行 JSON 演示时，我们会更详细地探讨这些结构。此时，我们只是简单介绍它们。JSON
    中的第二种复合值类型是数组。
- en: and arrays are enclosed in square brackets with commas between the array elements。
    actually had commas in the objects as well， and arrays are lists of values。 For
    example。 we can see here that authors is a list of author objects。 Now。 I mentioned
    that the constructs are recursive， specifically the values inside arrays can be
    anything。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 数组用方括号括起来，数组元素之间用逗号分隔。实际上，对象中也有逗号，数组则是值的列表。例如，我们可以看到，作者（authors）是一个作者对象的列表。现在，我提到过，这些结构是递归的，特别是数组中的值可以是任何类型。
- en: They can be other arrays or objects， base values， and the values making up the
    label value pairs in objects can also be any composite value or a base value。
    And I did want to mention， by the way， that sometimes this word "label" here for
    label value pairs is called "property"。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 它们可以是其他数组或对象、基本值，且对象中的标签值对（label value pairs）的值也可以是任何复合值或基本值。而且，我想提一下，有时候这个“标签”（label）这个词，指的是标签值对时，也被称为“属性”（property）。
- en: So just like XML， JSON has some basic structural requirements in its format。
    but it doesn't have a lot of requirements in terms of uniformity。 We have a couple
    of examples of heterogeneity in here。 For example。 this book has an addition and
    the other one doesn't。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，和 XML 一样，JSON 在其格式中有一些基本的结构要求，但它对统一性要求并不严格。这里有几个异质性的例子。例如，这本书有一个版本（edition），而另一本文本没有。
- en: This book has a remark and the other one doesn't， but we'll see many more examples
    of heterogeneity when we do the demo and look into JSON data in more detail。 Now
    let's compare JSON and the relational model。 We will see that many of the comparisons
    are fairly similar to when we compared XML to the relational model。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书有备注，另一本文本没有，但我们在演示并更详细地查看 JSON 数据时，会看到更多异质性的例子。现在，让我们比较一下 JSON 和关系模型。我们会发现，许多比较与我们之前将
    XML 与关系模型进行比较时非常相似。
- en: Let's start with the basic structures underlying the data model。 So the relational
    model is based on tables we set up， structure of tables， a set of columns。 and
    then the data becomes rows in those tables。 JSON is based instead on sets。 the
    sets of label value pairs and arrays， and as we saw they can be nested。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从数据模型的基本结构开始。所以，关系模型是基于表的，我们设置表的结构、列的集合，然后数据就成为这些表中的行。JSON 则是基于集合的，标签值对和数组的集合，正如我们所见，它们可以是嵌套的。
- en: One of the big differences between the two models， of course， is the schema。
    So the relational model has a schema fixed in advance。 You set it up before you
    have any data loaded and then all data needs to conform to that schema。 JSON on
    the other hand typically does not require a schema in advance。 In fact。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 关系模型与 JSON 模型之间的一个主要区别是模式（schema）。关系模型的模式是预先固定的。你在加载任何数据之前就设置好它，然后所有数据都需要符合这个模式。而
    JSON 则通常不需要预先定义模式。事实上。
- en: the schema and the data are kind of mixed up together just like in XML。 and
    this is often referred to as self-describing data。 where the schema elements are
    within the data itself。 And this is of course typically more flexible than the
    relational model。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 模式（schema）和数据就像在 XML 中一样混合在一起，这通常被称为自描述数据（self-describing data），即模式元素包含在数据本身中。当然，这通常比关系模型更灵活。
- en: though there are advantages to having schema as well， definitely。 As far as
    queries go。 one of the nice features of the relational model is that there are
    simple。 expressive languages for querying the database。 In terms of JSON。 although
    a few things have been proposed， at this point there's nothing widely used for
    querying JSON data。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然拥有模式（schema）确实有其优势，但肯定也有其局限性。就查询而言，关系模型的一个优点是它提供了简单、表达力强的查询语言来查询数据库。至于 JSON，尽管已有一些提议，但目前还没有广泛使用的查询
    JSON 数据的工具。
- en: Typically JSON data is read into a program and it's manipulated programmatically。
    Now let me interject that this video is being made in February 2012。 So it is
    possible that some JSON query languages will emerge and become widely used。 There's
    just nothing used at this point。 There are some proposals。 There's a JSON path
    language。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 通常JSON数据被读入程序中，并以编程方式进行操作。现在让我插一句，这个视频是在2012年2月制作的。所以有可能某些JSON查询语言会出现并得到广泛使用，但截至目前还没有使用的标准。确实有一些提案，比如JSON路径语言。
- en: JSON query， a language called Jackal。 It may be that just like XML。 the query
    languages are going to follow the prevalent use of the data format or data model。
    but that has not happened yet as of February 2012。 How about ordering？
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: JSON查询，一种名为Jackal的语言。可能就像XML一样，查询语言会遵循数据格式或数据模型的普遍使用方式，但截至2012年2月，这还没有发生。那排序呢？
- en: One aspect of the relational model is that it's an unordered model。 It's based
    on sets。 And if we want to see relational data in sorted order， then we put that
    inside a query。 In JSON we have arrays as one of the basic data structures and
    arrays are ordered。 Of course。 there's also the fact like XML that JSON data is
    often is usually written to files and files themselves are naturally ordered。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 关系模型的一个方面是它是一个无序模型。它基于集合。如果我们想按排序顺序查看关系数据，就需要将其放入查询中。在JSON中，我们有数组作为基本数据结构之一，数组是有序的。当然，就像XML一样，JSON数据通常被写入文件，而文件本身自然是有序的。
- en: But the ordering of data in files usually isn't relevant。 Sometimes it is， but
    typically not。 Finally， in terms of implementation for the relational model。 there
    are systems that implement the relational model natively。 They're very mature。
    generally quite efficient and powerful systems。 For JSON。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但文件中数据的排序通常并不重要。有时重要，但通常不重要。最后，在关系模型的实现方面，有些系统原生实现了关系模型。这些系统非常成熟，通常高效且功能强大。对于JSON来说，
- en: we haven't yet seen standalone database systems that use JSON as their data
    model。 Instead。 JSON is more typically coupled with programming languages。 One
    thing I should add， however。 is that JSON is used in no SQL systems。 We do have
    videos about no SQL systems。 You may or may not have watched those yet。 There's
    a couple of different ways that JSON is used in those systems。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有看到使用JSON作为数据模型的独立数据库系统。相反，JSON通常与编程语言配合使用。不过，我应该补充的是，JSON在NoSQL系统中得到了应用。我们有关于NoSQL系统的视频，你可能看过，也可能没有看过。在这些系统中，JSON有几种不同的使用方式。
- en: One of them is just as the format for reading data into the systems and writing
    data out from the systems。 The other way it's used is that some of the no SQL
    systems are what are called document management systems。 where the documents themselves
    may contain JSON data and then the systems will have special features。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 其中一种用途是作为数据读取和写入系统的格式。另一种用途是一些NoSQL系统，通常被称为文档管理系统，文档本身可能包含JSON数据，然后这些系统会有一些特殊的功能。
- en: '![](img/6a2fc62e24a1743a802a9119373e7f3a_7.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a2fc62e24a1743a802a9119373e7f3a_7.png)'
- en: for manipulating the JSON in the documents that are stored by the system。 Now
    let's compare JSON and XML。 This is actually a hotly debated comparison right
    now。 There is significant overlap in the uses of JSON and XML。 Both of them are
    very good for putting semi-structured data into a file format and using it for
    data interchange。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 用于操作存储在系统中的JSON文档。现在让我们对比一下JSON和XML。这实际上是一个当前激烈讨论的话题。JSON和XML在用途上有很大的重叠。它们都非常适合将半结构化数据放入文件格式中，并用于数据交换。
- en: Because there's so much overlap in what they're used for。 it's not surprising
    that there's significant debate。 I'm not going to take sides。 I'm just going to
    try to give you a comparison。 Let's start by looking at the verbosity of expressing
    data in the two languages。 It is the case that XML is in general a little bit
    more verbose than JSON。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于它们的用途有很多重叠，因而出现了激烈的争论也就不足为奇了。我不会站在某一方，只是尽量为你提供一个对比。我们先来看看这两种语言表达数据的冗长性。通常情况下，XML比JSON更冗长一些。
- en: The same data expressed in the two formats will tend to have more characters
    in XML than in JSON。 You can see that in our examples because our big JSON example
    is actually pretty much the same data that we used when we showed XML。 The reason
    for XML being a bit more verbose largely has to do actually with closing tags
    and some other features。 I'll let you judge for yourself whether the somewhat
    longer expression of XML is a problem。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 用这两种格式表示的相同数据，通常 XML 会比 JSON 多一些字符。你可以从我们的示例中看到这一点，因为我们的大型 JSON 示例实际上和我们展示 XML
    时使用的几乎是相同的数据。XML 比较冗长的原因，主要是由于结束标签和其他一些特性。是否 XML 表达方式略长是一个问题，我让你自己判断。
- en: Second is complexity。 Here too most people would say that XML is a bit more
    complex than JSON。 I'm not sure I entirely agree with that comparison。 If you
    look at sort of the subset of XML that people really use， you've got attributes。
    sub-elements and text， and that's more or less it。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个是复杂性。大多数人会说 XML 比 JSON 更复杂。我不确定我完全同意这个比较。如果你看一下人们真正使用的 XML 子集，你会看到它包含属性、子元素和文本，大致就是这些。
- en: If you look at JSON you've got your basic values and you've got your objects
    and your arrays。 I think the issue is that XML has a lot of extra stuff that goes
    along with it。 So if you read the entire XML specification it'll take you a long
    time。 JSON you can con-grasp the entire specification a little bit more quickly。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看 JSON，你会看到基本值、对象和数组。我认为问题在于，XML 里有很多附加的东西。所以，如果你阅读整个 XML 规范，它会花费你很长时间。而
    JSON 的规范你可以更快地理解。
- en: Now let's turn to validity。 By validity I mean the ability to specify constraints
    or restriction or schema on the structure of data in one of these models and have
    it enforced by tools or by a system。 Specifically in XML we have the notion of
    document type descriptors or DTDs。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来谈谈有效性。所谓有效性，我指的是能够在这些模型之一中指定数据结构上的约束、限制或架构，并由工具或系统强制执行这一约束。具体来说，在 XML
    中，我们有文档类型描述符（DTD）的概念。
- en: We also have XML schema which gives us SSDs， XML schema descriptors。 And these
    are schema like things that we can specify and we can have our data check to make
    sure it conforms to the schema。 And these are I would say fairly widely used at
    this point for XML。 For JSON there's something called JSON schema and you know
    similar to XML schema it's a way to specify the structure and then we can check
    that JSON conforms to that structure。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有 XML 架构，它为我们提供了 SSD 和 XML 架构描述符。这些是类似架构的东西，我们可以指定，并且可以检查我们的数据，确保它符合架构要求。这些东西现在可以说在
    XML 中得到了广泛应用。对于 JSON，有一种叫做 JSON 架构的东西，类似于 XML 架构，它是一种指定结构的方式，然后我们可以检查 JSON 是否符合这个结构。
- en: And we will see some of that in our demo。 The current status February 2012 is
    that this is not widely used at this point but again it could really just be evolution。
    If we look back at the XML as it was originally proposed probably we didn't see
    a whole lot of use of DTDs and in fact not X SSDs for sure until later on。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在演示中看到其中的一些内容。2012年2月的现状是，这在目前还不广泛使用，但这可能只是一个进化过程。如果我们回顾最初提出的 XML，可能当时并没有看到
    DTD 的广泛使用，实际上直到后来才开始使用 X SSD。
- en: So we'll just have to wait and see whether JSON evolves in a similar way。 Now
    the programming interface is where JSON really shines。 The programming interface
    for XML can be fairly clunky。 The XML model。 the attributes and sub elements and
    so on don't typically match the model of data inside a programming language。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们只能等待看看 JSON 是否会以类似的方式发展。现在，JSON 的编程接口才是真正的亮点。XML 的编程接口可以说相当繁琐。XML 模型，属性和子元素等，通常与编程语言中的数据模型不匹配。
- en: In fact that's something called the impedance mismatch。 The impedance mismatch
    has been discussed in database systems actually for decades because one of the
    original criticisms of relational database is that it's not a problem。 The difference
    of relational database systems is that the data structures used in the database
    specifically tables didn't match directly with the data structures in programming
    languages。 So there has to be some manipulation at the interface between programming
    languages and the database system and that's the mismatch。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，这被称为阻抗不匹配。阻抗不匹配在数据库系统中已经讨论了几十年，因为关系型数据库最初的批评之一就是它不是一个问题。关系型数据库系统的区别在于，数据库中使用的数据结构，特别是表格，并不直接与编程语言中的数据结构相匹配。因此，在编程语言和数据库系统之间的接口处必须进行一些操作，这就是不匹配。
- en: So that same impedance mismatch is pretty much present in XML where in JSON
    it's really a more direct mapping between many programming languages and the structures
    of JSON。 Finally let's talk about querying。 I already touched on this a bit but
    JSON does not have any mature widely used query languages at this point。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的阻抗不匹配问题也出现在 XML 中，而在 JSON 中，它实际上是许多编程语言与 JSON 结构之间的更直接映射。最后，让我们谈谈查询。我之前提到过这一点，但目前
    JSON 并没有任何成熟且广泛使用的查询语言。
- en: For XML we do have XPath， we have XQuery， we have XSLT。 maybe not all of them
    are widely used but there's no question that XPath at least and XSLT are used
    quite a bit。 As far as JSON goes there's been a proposal called JSONPath that
    looks actually quite a lot like XPath but maybe it'll catch on。 There's something
    called JSONQuery， it doesn't look so much like XMLQuery， I mean XQuery。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 XML，我们有 XPath，我们有 XQuery，我们有 XSLT。虽然并不是所有这些技术都被广泛使用，但毫无疑问，至少 XPath 和 XSLT
    被使用得相当多。至于 JSON，曾有一个名为 JSONPath 的提案，它看起来实际上和 XPath 非常相似，或许它会被广泛采用。还有一个叫做 JSONQuery
    的东西，它看起来不像 XMLQuery，我是说 XQuery。
- en: And finally there has been a proposal called Jackal for the JSON query language
    but again as of February 2012 all of these are still very early so we just don't
    know what's going to catch on。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，有一个名为 Jackal 的 JSON 查询语言提案，但同样，截止到 2012 年 2 月，所有这些提案仍处于非常早期的阶段，因此我们还不知道哪种方式会得到广泛应用。
- en: '![](img/6a2fc62e24a1743a802a9119373e7f3a_9.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a2fc62e24a1743a802a9119373e7f3a_9.png)'
- en: So now let's talk about the validity of JSON data。 So do JSON data that's syntactically
    valid simply needs to adhere to the basic structural requirements？
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 那么现在我们来讨论 JSON 数据的有效性。那么，语法有效的 JSON 数据仅仅需要遵循基本的结构要求吗？
- en: As a reminder that would be that we have sets of label value pairs。 we have
    arrays of values and our base values are from predefined types。 And again these
    values here are defined recursively。 So we start with a JSON file and we send
    it to a parser。 the parser may determine that the file has syntactic errors or
    if the file is syntactically correct then it can be parsed into objects in a programming
    language。 Now if we're interested in semantically valid JSON that is JSON that
    conforms to some constraints or a schema then in addition to checking the basic
    structural requirements we check whether JSON conforms to the specified schema。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下，我们有标签值对的集合。我们有值的数组，并且我们的基本值来自预定义类型。而且，这些值是递归定义的。因此，我们从一个 JSON 文件开始，然后将其发送给解析器。解析器可能会判断文件是否存在语法错误，或者如果文件在语法上是正确的，那么它就可以被解析为编程语言中的对象。如果我们关心的是语义上有效的
    JSON，即符合某些约束或模式的 JSON，那么除了检查基本的结构要求，我们还要检查 JSON 是否符合指定的模式。
- en: If we use a language like JSON schema for example we put a specification in
    as a separate file and in fact JSON schema is expressed in JSON itself as we'll
    see in our demo。 We send it to a validator and that validator may find that there
    are syntactic errors or it may find that there are some semantic errors so the
    data could be correct syntactically but not conform to the schema。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用像 JSON 模式这样的语言，例如，我们将一个规范作为单独的文件提供，实际上，JSON 模式本身就是用 JSON 表示的，正如我们在演示中将看到的那样。我们将其发送给一个验证器，验证器可能会发现存在语法错误，或者可能会发现存在某些语义错误，因此数据在语法上可能是正确的，但并不符合模式。
- en: If it's both syntactically and semantically correct then it can move on to a
    parser where we'll be parsed again into objects in a programming language。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它在语法和语义上都正确，那么它可以继续交给解析器，我们会再次将其解析为编程语言中的对象。
- en: '![](img/6a2fc62e24a1743a802a9119373e7f3a_11.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a2fc62e24a1743a802a9119373e7f3a_11.png)'
- en: So to summarize JSON stands for JavaScript Object Notation。 It's a standard
    for taking data objects and serializing them into a format that's human readable。
    It's also very useful for exchanging data between programs and for representing
    and storing semi-structured data in a flexible fashion。 In the next video we'll
    go live with a demonstration of JSON。 We'll use a couple of JSON editors。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，JSON 代表 JavaScript 对象表示法。它是一种将数据对象序列化为人类可读格式的标准。它还非常有用，用于程序之间交换数据，和以灵活的方式表示及存储半结构化数据。在下一个视频中，我们将通过
    JSON 的演示进行实际操作。我们将使用几个 JSON 编辑器。
- en: We'll take a look at the structure of JSON data when it's syntactically correct。
    We'll demonstrate how it's very flexible when our data might be irregular and
    we'll also demonstrate schema checking using an example of JSON schema。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看当 JSON 数据在语法上正确时的结构。我们还将演示当数据不规则时，它是如何非常灵活的，同时还将通过 JSON 模式的示例演示模式检查。
- en: '![](img/6a2fc62e24a1743a802a9119373e7f3a_13.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a2fc62e24a1743a802a9119373e7f3a_13.png)'
