- en: 5\.   Strings
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5\.   字符串
- en: 原文：[https://algs4.cs.princeton.edu/50strings](https://algs4.cs.princeton.edu/50strings)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://algs4.cs.princeton.edu/50strings](https://algs4.cs.princeton.edu/50strings)
- en: Overview.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 概述。
- en: 'We communicate by exchanging strings of characters. We consider classic algorithms
    for addressing the underlying computational challenges surrounding applications
    such as the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过交换字符串来进行通信。我们考虑经典算法来解决围绕以下应用程序的基本计算挑战：
- en: '[*5.1 String Sorts*](../51radix) includes LSD radix sort, MSD radix sort, and
    3-way radix quicksort for sorting arrays of strings.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*5.1 字符串排序*](../51radix) 包括 LSD 基数排序、MSD 基数排序和用于对字符串数组进行排序的三向基数快速排序。'
- en: '[*5.2 Tries*](../52trie) describes R-way tries and ternary search tries for
    implementing symbol tables with string keys.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*5.2 Trie*](../52trie) 描述了用于实现具有字符串键的符号表的 R-way trie 和三向搜索 trie。'
- en: '[*5.3 Substring Search*](../53substring) describes algorithms for searching
    for a substring in a large piece of text, including the classic Knuth-Morris-Pratt,
    Boyer-Moore, and Rabin-Karp algorithms.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*5.3 子字符串搜索*](../53substring) 描述了在大段文本中搜索子字符串的算法，包括经典的 Knuth-Morris-Pratt、Boyer-Moore
    和 Rabin-Karp 算法。'
- en: '[*5.4 Regular Expressions*](../54regexp) introduces a quintessential search
    tool known as grep that we use to search for incompletely specified substrings.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*5.4 正则表达式*](../54regexp) 介绍了一种称为 grep 的基本搜索工具，我们用它来搜索不完全指定的子字符串。'
- en: '[*5.5 Data Compression*](../55compression) introduces data compression, where
    we try to reduce the size of a string to the minimum possible. We present the
    classic Huffman and LZW algorithms.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[*5.5 数据压缩*](../55compression) 介绍了数据压缩，我们试图将字符串的大小减少到最小。我们介绍了经典的 Huffman 和
    LZW 算法。'
- en: Rules of the game.
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 游戏规则。
- en: For clarity and efficiency, our implementations are expressed in terms of the
    Java [String](http://download.oracle.com/javase/6/docs/api/java/lang/String.html)
    class. We briefly review their most important characteristics.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为了清晰和高效，我们的实现是基于 Java [String](http://download.oracle.com/javase/6/docs/api/java/lang/String.html)
    类表达的。我们简要回顾它们最重要的特性。
- en: '*Characters.* A `String` is a sequence of characters. Characters are of type
    `char` and can have one of 2^16 possible values. For many decades, programmers
    restricted attention to characters encoded in 7-bit ASCII or 8-bit extended ASCII,
    but many modern applications call for 16-bit Unicode.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*字符.* `String` 是字符序列。字符的类型是 `char`，可以有 2^16 种可能的值。几十年来，程序员们一直关注编码为 7 位 ASCII
    或 8 位扩展 ASCII 的字符，但许多现代应用程序需要 16 位 Unicode。'
- en: '*Immutability.* `String` objects are immutable, so that we can use them in
    assignment statements and as arguments and return values from methods without
    having to worry about their values changing.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*不可变性.* `String` 对象是不可变的，因此我们可以在赋值语句中使用它们，并且作为方法的参数和返回值，而不必担心它们的值会改变。'
- en: '*Indexing.* The `charAt()` method extracts a specified character from a string
    in constant time.'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*索引.* `charAt()` 方法以常数时间从字符串中提取指定字符。'
- en: '*Length.* The `length()` method returns the length of a string in constant
    time.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*长度.* `length()` 方法以常数时间返回字符串的长度。'
- en: '*Substring.* The `substring()` method typically extracts a specified substring
    in constant time.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*子字符串.* `substring()` 方法通常以常数时间提取指定的子字符串。'
- en: 'WARNING: Beginning with Oracle and OpenJDK Java 7, Update 6, the `substring()`
    method takes linear time and space in the size of the extracted substring. Since
    we did not anticipate this drastic change, some of our string-processing code
    will suffer the consequences. The [String API](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)
    provides no performance guarantees for any of its methods, including `substring()`
    and `charAt()`. The lesson is to use at your own risk.'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 警告：从 Oracle 和 OpenJDK Java 7，更新 6 开始，`substring()` 方法在提取的子字符串大小上需要线性时间和空间。由于我们没有预料到这种
    drastical 变化，我们的一些字符串处理代码将受到影响。[String API](http://docs.oracle.com/javase/7/docs/api/java/lang/String.html)
    对其任何方法，包括 `substring()` 和 `charAt()`，都不提供性能保证。教训是自行承担风险。
- en: See [this article](http://java-performance.info/changes-to-string-java-1-7-0_06/)
    for more details.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 查看[这篇文章](http://java-performance.info/changes-to-string-java-1-7-0_06/)获取更多细节。
- en: '![String operations](../Images/e5ccb96ba41b7fdc8ca13f7f422cdc99.png)'
  id: totrans-18
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![字符串操作](../Images/e5ccb96ba41b7fdc8ca13f7f422cdc99.png)'
- en: '*Concatenation.* The `+` operator performs string concatenation. We avoid forming
    a string by appending one character at a time because that is a *quadratic-time*
    process in Java. (Java has a [StringBuilder](http://download.oracle.com/javase/6/docs/api/java/lang/StringBuilder.html)
    class for that use.)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*连接.* `+` 运算符执行字符串连接。我们避免逐个字符附加形成字符串，因为在 Java 中这是一个 *二次时间* 的过程。（Java 有一个 [StringBuilder](http://download.oracle.com/javase/6/docs/api/java/lang/StringBuilder.html)
    类用于这种用途。）'
- en: '*Character arrays.* The Java `String` is not a primitive type. The standard
    implementation provides the operations just described to facilitate client programming.
    By contrast, many of the algorithms that we consider can work with a low-level
    representation such as an array of `char` values, and many clients might prefer
    such a representation, because it consumes less space and takes less time.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*字符数组.* Java 的 `String` 不是原始类型。标准实现提供了上述操作，以便于客户端编程。相比之下，我们考虑的许多算法可以使用低级表示，比如一个
    `char` 值数组，许多客户端可能更喜欢这种表示，因为它占用更少的空间并且耗时更少。'
- en: Alphabets.
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字母表。
- en: Some applications involve strings taken from a restricted alphabet. In such
    applications, it often makes sense to use an [Alphabet.java](Alphabet.java.html)
    class with the following API:![Alphabet API](../Images/f98f6543a37b5dbceed04162ad50f388.png)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一些应用程序涉及从受限字母表中获取的字符串。在这种应用程序中，使用具有以下 API 的 [Alphabet.java](Alphabet.java.html)
    类通常是有意义的：![Alphabet API](../Images/f98f6543a37b5dbceed04162ad50f388.png)
- en: 'The constructor that takes as argument an R-character string that specifies
    the alphabet; the `toChar()` and `toIndex()` methods convert (in constant time)
    between string characters and `int` values between 0 and R-1\. The method `R()`
    returns the number of characters in the alphabet or *radix*. A number of predefined
    alphabets are included:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 构造函数以R个字符的字符串作为参数，该字符串指定了字母表；`toChar()`和`toIndex()`方法在常数时间内在字符串字符和介于0和R-1之间的`int`值之间进行转换。`R()`方法返回字母表或*基数*中的字符数。包括一些预定义的字母表：
- en: '![Alphabets](../Images/2b81c444b7268baf93da09e17c286e43.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![字母表](../Images/2b81c444b7268baf93da09e17c286e43.png)'
- en: '[Count.java](Count.java.html) is a client that takes an alphabet specified
    on the command line, reads in a sequence of characters over that alphabet (ignoring
    characters not in the alphabet), computes the frequency of occurrence of each
    character,'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '[Count.java](Count.java.html)是一个客户端程序，它在命令行上指定一个字母表，读取该字母表上的一系列字符（忽略不在字母表中的字符），计算每个字符出现的频率，'
- en: Java programs in this chapter.
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 本章中的Java程序。
- en: Below is a list of Java programs in this chapter. Click on the program name
    to access the Java code; click on the reference number for a brief description;
    read the textbook for a full discussion.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是本章中的Java程序列表。单击程序名称以访问Java代码；单击参考号以获取简要描述；阅读教科书以获取全面讨论。
- en: '| REF | PROGRAM | DESCRIPTION / JAVADOC |'
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| REF | 程序 | 描述 / JAVADOC |'
- en: '| [-](../50strings/index.php#-) | [Alphabet.java](../50strings/Alphabet.java.html
    "alphabet") | alphabet |'
  id: totrans-29
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [-](../50strings/index.php#-) | [Alphabet.java](../50strings/Alphabet.java.html
    "字母表") | 字母表 |'
- en: '| [-](../50strings/index.php#-) | [Count.java](../50strings/Count.java.html
    "alphabet client") | alphabet client |'
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [-](../50strings/index.php#-) | [Count.java](../50strings/Count.java.html
    "字母表客户端") | 字母表客户端 |'
- en: '| [5.1](../51radix/index.php#5.1) | [LSD.java](../51radix/LSD.java.html "LSD
    radix sort") | LSD radix sort |'
  id: totrans-31
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [5.1](../51radix/index.php#5.1) | [LSD.java](../51radix/LSD.java.html "LSD基数排序")
    | LSD基数排序 |'
- en: '| [5.2](../51radix/index.php#5.2) | [MSD.java](../51radix/MSD.java.html "MSD
    radix sort") | MSD radix sort |'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [5.2](../51radix/index.php#5.2) | [MSD.java](../51radix/MSD.java.html "MSD基数排序")
    | MSD基数排序 |'
- en: '| [-](../51radix/index.php#-) | [InplaceMSD.java](../51radix/InplaceMSD.java.html
    "In-place MSD radix sort<sup>1</sup>") | In-place MSD radix sort¹ |'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [-](../51radix/index.php#-) | [InplaceMSD.java](../51radix/InplaceMSD.java.html
    "原地MSD基数排序<sup>1</sup>") | 原地MSD基数排序¹ |'
- en: '| [5.3](../51radix/index.php#5.3) | [Quick3string.java](../51radix/Quick3string.java.html
    "3-way string quicksort") | 3-way string quicksort |'
  id: totrans-34
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [5.3](../51radix/index.php#5.3) | [Quick3string.java](../51radix/Quick3string.java.html
    "三向字符串快速排序") | 三向字符串快速排序 |'
- en: '| [-](../51radix/index.php#-) | [AmericanFlag.java](../51radix/AmericanFlag.java.html
    "American flag sort<sup>1</sup>") | American flag sort¹ |'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [-](../51radix/index.php#-) | [AmericanFlag.java](../51radix/AmericanFlag.java.html
    "美国国旗排序<sup>1</sup>") | 美国国旗排序¹ |'
- en: '| [-](../51radix/index.php#-) | [AmericanFlagX.java](../51radix/AmericanFlagX.java.html
    "non-recursive American flag sort<sup>1</sup>") | non-recursive American flag
    sort¹ |'
  id: totrans-36
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [-](../51radix/index.php#-) | [AmericanFlagX.java](../51radix/AmericanFlagX.java.html
    "非递归美国国旗排序<sup>1</sup>") | 非递归美国国旗排序¹ |'
- en: '| [5.4](../52trie/index.php#5.4) | [TrieST.java](../52trie/TrieST.java.html
    "multiway trie symbol table") | multiway trie symbol table |'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [5.4](../52trie/index.php#5.4) | [TrieST.java](../52trie/TrieST.java.html
    "多向字典树符号表") | 多向字典树符号表 |'
- en: '| [-](../52trie/index.php#-) | [TrieSET.java](../52trie/TrieSET.java.html "multiway
    trie set") | multiway trie set |'
  id: totrans-38
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [-](../52trie/index.php#-) | [TrieSET.java](../52trie/TrieSET.java.html "多向字典树集合")
    | 多向字典树集合 |'
- en: '| [5.5](../52trie/index.php#5.5) | [TST.java](../52trie/TST.java.html "ternary
    search trie") | ternary search trie |'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [5.5](../52trie/index.php#5.5) | [TST.java](../52trie/TST.java.html "三向单词查找树")
    | 三向单词查找树 |'
- en: '| [5.6](../53substring/index.php#5.6) | [KMP.java](../53substring/KMP.java.html
    "substring search (Knuth–Morris–Pratt)") | substring search (Knuth–Morris–Pratt)
    |'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [5.6](../53substring/index.php#5.6) | [KMP.java](../53substring/KMP.java.html
    "子字符串查找（Knuth–Morris–Pratt）") | 子字符串查找（Knuth–Morris–Pratt） |'
- en: '| [5.7](../53substring/index.php#5.7) | [BoyerMoore.java](../53substring/BoyerMoore.java.html
    "substring search (Boyer–Moore)") | substring search (Boyer–Moore) |'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [5.7](../53substring/index.php#5.7) | [BoyerMoore.java](../53substring/BoyerMoore.java.html
    "子字符串查找（Boyer–Moore）") | 子字符串查找（Boyer–Moore） |'
- en: '| [5.8](../53substring/index.php#5.8) | [RabinKarp.java](../53substring/RabinKarp.java.html
    "substring search (Rabin–Karp)") | substring search (Rabin–Karp) |'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [5.8](../53substring/index.php#5.8) | [RabinKarp.java](../53substring/RabinKarp.java.html
    "子字符串查找（Rabin–Karp）") | 子字符串查找（Rabin–Karp） |'
- en: '| [5.9](../54regexp/index.php#5.9) | [NFA.java](../54regexp/NFA.java.html "NFA
    for regular expressions") | NFA for regular expressions |'
  id: totrans-43
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [5.9](../54regexp/index.php#5.9) | [NFA.java](../54regexp/NFA.java.html "正则表达式的NFA")
    | 正则表达式的NFA |'
- en: '| [-](../54regexp/index.php#-) | [GREP.java](../54regexp/GREP.java.html "grep")
    | grep |'
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [-](../54regexp/index.php#-) | [GREP.java](../54regexp/GREP.java.html "grep")
    | grep |'
- en: '| [-](../55compression/index.php#-) | [BinaryDump.java](../55compression/BinaryDump.java.html
    "binary dump") | binary dump |'
  id: totrans-45
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [-](../55compression/index.php#-) | [BinaryDump.java](../55compression/BinaryDump.java.html
    "二进制转储") | 二进制转储 |'
- en: '| [-](../55compression/index.php#-) | [HexDump.java](../55compression/HexDump.java.html
    "hex dump") | hex dump |'
  id: totrans-46
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [-](../55compression/index.php#-) | [HexDump.java](../55compression/HexDump.java.html
    "十六进制转储") | 十六进制转储 |'
- en: '| [-](../55compression/index.php#-) | [PictureDump.java](../55compression/PictureDump.java.html
    "picture dump") | picture dump |'
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [-](../55compression/index.php#-) | [PictureDump.java](../55compression/PictureDump.java.html
    "图片转储") | 图片转储 |'
- en: '| [-](../55compression/index.php#-) | [Genome.java](../55compression/Genome.java.html
    "genomic code") | genomic code |'
  id: totrans-48
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [-](../55compression/index.php#-) | [Genome.java](../55compression/Genome.java.html
    "基因组编码") | 基因组编码 |'
- en: '| [-](../55compression/index.php#-) | [RunLength.java](../55compression/RunLength.java.html
    "data compression (run-length coding)") | data compression (run-length coding)
    |'
  id: totrans-49
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [-](../55compression/index.php#-) | [RunLength.java](../55compression/RunLength.java.html
    "数据压缩（行程长度编码）") | 数据压缩（行程长度编码） |'
- en: '| [5.10](../55compression/index.php#5.10) | [Huffman.java](../55compression/Huffman.java.html
    "data compression (Huffman)") | data compression (Huffman) |'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [5.10](../55compression/index.php#5.10) | [Huffman.java](../55compression/Huffman.java.html
    "数据压缩（赫夫曼）") | 数据压缩（赫夫曼） |'
- en: '| [5.11](../55compression/index.php#5.11) | [LZW.java](../55compression/LZW.java.html
    "data compression (Lempel–Ziv–Welch)") | data compression (Lempel–Ziv–Welch) |'
  id: totrans-51
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| [5.11](../55compression/index.php#5.11) | [LZW.java](../55compression/LZW.java.html
    "数据压缩（Lempel–Ziv–Welch）") | 数据压缩（Lempel–Ziv–Welch） |'
- en: Q + A
  id: totrans-52
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Q + A
- en: '**Q.**What is Unicode.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 什么是Unicode。'
- en: '**A.** Unicode (Universal character encoding) = complex 21-bit code to represent
    International symbols and other characters.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** Unicode（通用字符编码）= 复杂的21位代码，用于表示国际符号和其他字符。'
- en: '**Q.**What is UTF-16.'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 什么是UTF-16。'
- en: '**A.** UTF-16 (Unicode Transformation Format) = complex 16-bit variable width
    code to represent Unicode characters. Most common characters are represented using
    16 bits (a `char`), but *surrogate pairs* are represented using a pair of `char`
    values. If first `char` value is between `D800` and `DFFF`, then it is combined
    with the next `char` (in the same range) to form a surrogate pair. No Unicode
    characters correspond to `D800` through `DFFF`. For example, `007A` represents
    a lowercase Z, `6C34` represents the Chinese symbol for water, and `D834 DD1E`
    represents the musical G clef.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** UTF-16（Unicode转换格式）= 复杂的16位可变宽度代码，用于表示Unicode字符。大多数常见字符使用16位（一个`char`）表示，但*代理对*使用一对`char`值表示。如果第一个`char`值在`D800`和`DFFF`之间，则与下一个`char`（在相同范围内）组合形成代理对。没有Unicode字符对应于`D800`到`DFFF`。例如，`007A`表示小写字母Z，`6C34`表示中文水的符号，`D834
    DD1E`表示音乐的G大调。'
- en: '[Unicode reference](http://docs.oracle.com/javase/6/docs/api/java//lang/Character.html#unicode).'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '[Unicode参考](http://docs.oracle.com/javase/6/docs/api/java//lang/Character.html#unicode)。'
- en: '**Q.** What''s the substring trap?'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 什么是子字符串陷阱？'
- en: '**A.** The String method call s.substring(i, j) returns the substring of s
    starting at index i and ending at j-1 (not at j as you might suspect).'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 字符串方法调用`s.substring(i, j)`返回s从索引i开始到j-1结束的子字符串（而不是在j结束，正如你可能会怀疑的那样）。'
- en: '**Q.** How can I change the value of a string?'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 如何更改字符串的值？'
- en: '**A.** You can''t since strings are immutable in Java. If you want a new string,
    then you must create a new one using string concatenation or one of the string
    methods that returns a new string such as `toLowerCase()` or `substring()`.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 在Java中无法修改字符串，因为字符串是不可变的。如果你想要一个新的字符串，那么你必须使用字符串连接或返回新字符串的字符串方法之一，如`toLowerCase()`或`substring()`来创建一个新的字符串。'
- en: Web Exercises
  id: totrans-62
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网页练习
- en: '**Squeeze whitespace.** Write a program [Squeeze.java](Squeeze.java.html) that
    takes as input a string and removes adjacent spaces, leaving at most one space
    in-a-row.'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**挤压空格。**编写一个程序[Squeeze.java](Squeeze.java.html)，该程序接受一个字符串作为输入，并删除相邻的空格，最多保留一个空格。'
- en: '**Remove duplicates.** Given a string, create a new string with all the consecutive
    duplicates removed. For example, `ABBCCCCCBBAB` becomes `ABCBAB`.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**删除重复项。**给定一个字符串，创建一个新字符串，其中删除所有连续的重复项。例如，`ABBCCCCCBBAB`变为`ABCBAB`。'
- en: '**String of N x''s.** Describe the string that the following function returns,
    given a positive integer `N`?'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**N个x的字符串。**描述以下函数返回的字符串，给定一个正整数`N`？'
- en: '[PRE0]'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**Palindrome check.** Write a function that takes as input a string and returns
    `true` if the string is a palindrome, and `false` otherwise. A *palindrome* is
    a string that reads the same forwards or backwards.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**回文检查。**编写一个函数，该函数以字符串作为输入，并在字符串是回文时返回`true`，否则返回`false`。*回文*是指字符串从前往后读和从后往前读是相同的。'
- en: '**Watson-Crick complemented palindrome check.** Write a function that takes
    as input a string and returns `true` if the string is a Watson-Crick complemented
    palindrome, and `false` otherwise. A *Watson-Crick complemented palindrome* is
    a DNA string that is equal to the complement (A-T, C-G) of its reverse.'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Watson-Crick互补回文检查。**编写一个函数，该函数以字符串作为输入，并在字符串是Watson-Crick互补回文时返回`true`，否则返回`false`。*Watson-Crick互补回文*是指DNA字符串等于其反向的互补（A-T，C-G）。'
- en: '**Watson-Crick complement.** Write a function that takes as input a DNA string
    of A, C, G, and T characters and returns the string in reverse order with all
    of characters replaced by their complements. For example, if the input is ACGGAT,
    then return ATCCGT.'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Watson-Crick互补。**编写一个函数，该函数以A、C、G和T字符的DNA字符串作为输入，并返回以其互补替换所有字符的反向字符串。例如，如果输入是ACGGAT，则返回ATCCGT。'
- en: '**Perfect shuffle.** What does the following recursive function return, given
    two strings `s` and `t` of the same length?'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**完美洗牌。**给定长度相同的两个字符串`s`和`t`，以下递归函数返回什么？'
- en: '[PRE1]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Binary tree representation.** Write a data type `TreeString.java` that represents
    an immutable string using a binary tree. It should support concatenation in constant
    time, and printing out the string in time proportional to the number of characters.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**二叉树表示。**编写一个名为`TreeString.java`的数据类型，使用二叉树表示不可变字符串。它应该支持在常数时间内进行连接，并在与字符数成比例的时间内打印出字符串。'
- en: '**Reverse a string.** Write a recursive function to reverse a string. Do not
    use any loops. *Hint*: use the String method `substring()`.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**反转字符串。**编写一个递归函数来反转一个字符串。不要使用任何循环。*提示*：使用String方法`substring()`。'
- en: '[PRE2]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How efficient is your method? Our method has a linearithmic running time.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你的方法效率如何？我们的方法具有线性对数运行时间。
- en: '**Random string.** Write a recursive function to create a random string of
    characters between ''A'' and ''Z''.'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**随机字符串。**编写一个递归函数，创建一个由字符''A''和''Z''之间的随机字符组成的字符串。'
- en: '[PRE3]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '**Subsequence.** Given two strings `s` and `t`, write a program [Subsequence.java](Subsequence.java.html)
    that determines whether `s` is a subsequence of `t`. That is, the letters of `s`
    should appear in the same order in `t`, but not necessarily contiguously. For
    example `accag` is a subsequence of `taagcccaaccgg`.'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**子序列。**给定两个字符串`s`和`t`，编写一个程序[Subsequence.java](Subsequence.java.html)，确定`s`是否是`t`的子序列。也就是说，`s`的字母应该按照相同的顺序出现在`t`中，但不一定是连续的。例如`accag`是`taagcccaaccgg`的子序列。'
- en: '**Longest complemented palindrome.** In DNA sequence analysis, a *complemented
    palindrome* is a string equal to its reverse complement. Adenine (A) and Thymine
    (T) are complements, as are Cytosine (C) and Guanine (G). For example, ACGGT is
    a complement palindrome. Such sequences act as transcription-binding sites and
    are associated with gene amplification and genetic instability. Given a text input
    of N characters, find the longest complemented palindrome that is a substring
    of the text. For example, if the text is `GACACGGTTTTA` then the longest complemented
    palindrome is `ACGGT`. *Hint*: consider each letter as the center of a possible
    palindrome of odd length, then consider each pair of letters as the center of
    a possible palindrome of even length.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最长互补回文。** 在 DNA 序列分析中，*互补回文*是一个等于其反向互补的字符串。腺嘌呤（A）和胸腺嘧啶（T）是互补的，胞嘧啶（C）和鸟嘌呤（G）也是互补的。例如，ACGGT
    是一个互补回文。这样的序列作为转录结合位点，并与基因扩增和遗传不稳定性相关。给定一个长度为 N 的文本输入，找到文本的最长互补回文子串。例如，如果文本是 `GACACGGTTTTA`，那么最长的互补回文是
    `ACGGT`。*提示*：将每个字母视为奇数长度可能回文的中心，然后将每对字母视为偶数长度可能回文的中心。'
- en: '**DNA to RNA.** Write a function that takes a DNA string (A, C, G, T) and returns
    the corresponding RNA string (A, C, G, U).'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**DNA 转 RNA。** 编写一个函数，该函数接受一个 DNA 字符串（A、C、G、T）并返回相应的 RNA 字符串（A、C、G、U）。'
- en: '**DNA complement.** Write a function that takes as input a DNA string (A, C,
    G, T) and returns the complementary base pairs (T, G, C, A). DNA is typically
    found in a *double helix* structure. The two complementary DNA strands are joined
    in a spiral structure.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**DNA 互补。** 编写一个函数，该函数以 DNA 字符串（A、C、G、T）作为输入，并返回互补的碱基对（T、G、C、A）。DNA 通常以*双螺旋*结构存在。两条互补的
    DNA 链以螺旋结构连接在一起。'
- en: '**Convert from hexadecimal to decimal.** [Hex2Decimal.java](Hex2Decimal.java.html)
    contains a function takes a hexadecimal string (using A-F for the digits 11-15)
    and returns the corresponding decimal integer. It uses a number of the string
    library methods and Horner''s method.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**从十六进制转换为十进制。** [Hex2Decimal.java](Hex2Decimal.java.html) 包含一个函数，该函数接受一个十六进制字符串（使用
    A-F 表示数字 11-15）并返回相应的十进制整数。它使用了一些字符串库方法和霍纳方法。'
- en: '[PRE4]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Alternate solution: `Integer.parseInt(String s, int radix)`. More robust, and
    works with negative integers.'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 替代方案：`Integer.parseInt(String s, int radix)`。更加健壮，并且适用于负整数。
