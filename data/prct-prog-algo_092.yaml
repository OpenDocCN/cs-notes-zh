- en: 2.3   Quicksort
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.3   快速排序
- en: 原文：[https://algs4.cs.princeton.edu/23quicksort](https://algs4.cs.princeton.edu/23quicksort)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://algs4.cs.princeton.edu/23quicksort](https://algs4.cs.princeton.edu/23quicksort)
- en: Quicksort is popular because it is not difficult to implement, works well for
    a variety of different kinds of input data, and is substantially faster than any
    other sorting method in typical applications. It is in-place (uses only a small
    auxiliary stack), requires time proportional to N log N on the average to sort
    N items, and has an extremely short inner loop.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 快速排序很受欢迎，因为它不难实现，适用于各种不同类型的输入数据，并且在典型应用中比任何其他排序方法都要快得多。它是原地排序（仅使用一个小型辅助栈），平均需要时间与N
    log N成正比来对N个项进行排序，并且具有极短的内部循环。
- en: The basic algorithm.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本算法。
- en: 'Quicksort is a divide-and-conquer method for sorting. It works by *partitioning*
    an array into two parts, then sorting the parts independently.![Quicksort overview](../Images/7133ac8bc941198c386419eae49a6d6b.png)The
    crux of the method is the partitioning process, which rearranges the array to
    make the following three conditions hold:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 快速排序是一种分而治之的排序方法。它通过*分区*数组为两部分，然后独立对这两部分进行排序。![快速排序概述](../Images/7133ac8bc941198c386419eae49a6d6b.png)方法的关键在于分区过程，该过程重新排列数组以满足以下三个条件：
- en: The entry `a[j]` is in its final place in the array, for some `j`.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 条目`a[j]`在数组中处于最终位置，对于某个`j`。
- en: No entry in `a[lo]` through `a[j-1]` is greater than `a[j]`.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a[lo]`到`a[j-1]`中没有任何条目大于`a[j]`。'
- en: No entry in `a[j+1]` through `a[hi]` is less than `a[j]`.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a[j+1]`到`a[hi]`中没有任何条目小于`a[j]`。'
- en: We achieve a complete sort by partitioning, then recursively applying the method
    to the subarrays. It is a *randomized* algorithm, because it randomly shuffles
    the array before sorting it.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过分区实现完整排序，然后递归地将该方法应用于子数组。这是一种*随机化*算法，因为它在对数组进行排序之前对数组进行随机洗牌。
- en: Partitioning.
  id: totrans-9
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 分区。
- en: 'To complete the implementation, we need to implement the partitioning method.
    We use the following general strategy: First, we arbitrarily choose `a[lo]` to
    be the partitioning item—the one that will go into its final position. Next, we
    scan from the left end of the array until we find an entry that is greater than
    (or equal to) the partitioning item, and we scan from the right end of the array
    until we find an entry less than (or equal to) the partitioning item.![Quicksort
    partitioning overview](../Images/f51cf8a7d2f60693d39cb5ed98face62.png)The two
    items that stopped the scans are out of place in the final partitioned array,
    so we exchange them. When the scan indices cross, all that we need to do to complete
    the partitioning process is to exchange the partitioning item `a[lo]` with the
    rightmost entry of the left subarray (`a[j]`) and return its index `j`.![Quicksort
    partitioning](../Images/107bb0b25994e6502758b8e42f241f16.png)'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 要完成实现，我们需要实现分区方法。我们采用以下一般策略：首先，我们任意选择`a[lo]`作为分区项—即将进入最终位置的项。接下来，我们从数组的左端开始扫描，直到找到一个大于（或等于）分区项的条目，然后我们从数组的右端开始扫描，直到找到一个小于（或等于）分区项的条目。![快速排序分区概述](../Images/f51cf8a7d2f60693d39cb5ed98face62.png)停止扫描的两个条目在最终分区数组中是不正确的，因此我们交换它们。当扫描索引交叉时，为了完成分区过程，我们只需将分区项`a[lo]`与左子数组的最右边的条目（`a[j]`）交换并返回其索引`j`。
- en: Quicksort.
  id: totrans-11
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 快速排序。
- en: '[Quick.java](Quick.java.html) is an implementation of quicksort, using the
    partitioning method described above.![Quicksort trace](../Images/4ed80061292b6891faf286d40c006a73.png)'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[Quick.java](Quick.java.html)是一个使用上述分区方法的快速排序实现。![快速排序跟踪](../Images/4ed80061292b6891faf286d40c006a73.png)'
- en: Implementation details.
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 实现细节。
- en: There are several subtle issues with respect to implementing quicksort that
    are reflected in this code and worthy of mention.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现快速排序方面存在一些微妙的问题，这些问题反映在这段代码中，并值得一提。
- en: '*Partitioning inplace.* If we use an extra array, partitioning is easy to implement,
    but not so much easier that it is worth the extra cost of copying the partitioned
    version back into the original.'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*原地分区。* 如果我们使用额外的数组，分区就很容易实现，但并不比将分区版本复���回原始数组的额外成本值得。'
- en: '*Staying in bounds.* If the smallest item or the largest item in the array
    is the partitioning item, we have to take care that the pointers do not run off
    the left or right ends of the array, respectively.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*保持边界。* 如果数组中最小项或最大项是分区项，我们必须注意指针不要跑到数组的左端或右端。'
- en: '*Preserving randomness.* The random shuffle puts the array in random order.
    Since it treats all items in the subarrays uniformly, [Quick.java](Quick.java.html)
    has the property that its two subarrays are also in random order. This fact is
    crucial to the algorithm''s predictability. An alternate way to preserve randomness
    is to choose a random item for partitioning within `partition()`.'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*保持随机性。* 随机洗牌使数组处于随机顺序。由于它均匀对待子数组中的所有项，[Quick.java](Quick.java.html)具有其两个子数组也处于随机顺序的特性。这一事实对算法的可预测性至关重要。保持随机性的另一种方法是在`partition()`中选择一个随机项进行分区。'
- en: '*Terminating the loop.* Properly testing whether the pointers have crossed
    is a bit trickier than it might seem at first glance. A common error is to fail
    to take into account that the array might contain other keys with the same value
    as the partitioning item.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*终止循环。* 正确测试指针是否交叉比起初看起来要棘手一些。一个常见的错误是忽略了数组可能包含其他与分区项相同值的键。'
- en: '*Handling items with keys equal to the partitioning item''s key.* It is best
    to stop the left scan for items with keys greater than *or equal to* the partitioning
    item''s key and the right scan for items less than *or equal to* the partitioning
    item''s key. Even though this policy might seem to create unnecessary exchanges
    involving items with keys equal to the partitioning item''s key, it is crucial
    to avoiding quadratic running time in certain typical applications.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*处理具有与划分项目键相等的键的项目。* 最好停止扫描具有大于或等于划分项目键的键的项目的左扫描，以及停止扫描具有小于或等于划分项目键的键的项目的右扫描。尽管这种策略似乎会导致涉及具有与划分项目键相等的键的项目的不必要的交换，但这对于避免在某些典型应用程序中出现二次运行时间至关重要。'
- en: '*Terminating the recursion.* A common mistake in implementing quicksort involves
    not ensuring that one item is always put into position, then falling into an infinite
    recursive loop when the partitioning item happens to be the largest or smallest
    item in the array.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*终止递归。* 在实现快速排序时的一个常见错误是没有确保始终将一个项目放在正确位置，然后当划分项目恰好是数组中最大或最小的项目时，陷入无限递归循环。'
- en: Proposition.
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。
- en: Quicksort uses ~2 N ln N compares (and one-sixth that many exchanges) on the
    average to sort an array of length N with distinct keys.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 快速排序平均使用~2 N ln N次比较（和其中六分之一的交换）来对具有不同键的长度为N的数组进行排序。
- en: Proposition.
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。
- en: Quicksort uses ~N²/2 compares in the worst case, but random shuffling protects
    against this case.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 快速排序在最坏情况下使用~N²/2次比较，但随机洗牌可以防止这种情况发生。
- en: The standard deviation of the running time is about .65 N, so the running time
    tends to the average as N grows and is unlikely to be far from the average. The
    probability that quicksort will use a quadratic number of compares when sorting
    a large array on your computer is much less than the probability that your computer
    will be struck by lightning!
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 运行时间的标准偏差约为0.65 N，因此随着N的增长，运行时间趋于平均值，并且不太可能远离平均值。在您的计算机上对大数组进行排序时，快速排序使用二次比较的概率远小于您的计算机被闪电击中的概率！
- en: Improvements.
  id: totrans-26
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 改进。
- en: Quicksort was invented in 1960 by C. A. R. Hoare, and it has been studied and
    refined by many people since that time.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 快速排序是由C. A. R. Hoare于1960年发明的，并自那时以来一直被许多人研究和完善。
- en: '*Cutoff to insertion sort.* As with mergesort, it pays to switch to insertion
    sort for tiny arrays. The optimum value of the cutoff is system-dependent, but
    any value between 5 and 15 is likely to work well in most situations.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*切换到插入排序。* 与归并排序一样，对于微小数组，切换到插入排序是值得的。截断的最佳值取决于系统，但在大多数情况下，任何值在5到15之间可能都能很好地工作。'
- en: '*Median-of-three partitioning.* A second easy way to improve the performance
    of quicksort is to use the median of a small sample of items taken from the array
    as the partitioning item. Doing so will give a slightly better partition, but
    at the cost of computing the median. It turns out that most of the available improvement
    comes from choosing a sample of size 3 (and then partitioning on the middle item).'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*三取样划分。* 改进快速排序性能的另一种简单方法是使用从数组中取出的一小部分项目的中位数作为划分项目。这样做将给出一个稍微更好的划分，但需要计算中位数的成本。事实证明，大部分可用的改进来自选择大小为3的样本（然后在中间项目上进行划分）。'
- en: Visualization.
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可视化。
- en: '[QuickBars.java](QuickBars.java.html) visualizes quicksort with median-of-3
    partitioning and cutoff for small subarrays.![Quicksort visualization](../Images/97cd178e5a07aee6721b9297f1d037f0.png)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '[QuickBars.java](QuickBars.java.html)使用三取样划分和对小子数组进行截断的快速排序进行可视化。![快速排序可视化](../Images/97cd178e5a07aee6721b9297f1d037f0.png)'
- en: Entropy-optimal sorting.
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 熵最优排序。
- en: Arrays with large numbers of duplicate sort keys arise frequently in applications.
    In such applications, there is potential to reduce the time of the sort from linearithmic
    to linear.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中经常出现具有大量重复排序键的数组。在这种应用程序中，有可能将排序时间从线性对数减少到线性。
- en: One straightforward idea is to partition the array into three parts, one each
    for items with keys smaller than, equal to, and larger than the partitioning item's
    key. Accomplishing this partitioning was a classical programming exercise popularized
    by E. W. Dijkstra as the *Dutch National Flag problem*, because it is like sorting
    an array with three possible key values, which might correspond to the three colors
    on the flag.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个直接的想法是将数组划分为三部分，分别用于具有小于、等于和大于划分项目键的项目。完成这种划分是一个经典的编程练习，由E. W. Dijkstra推广为*荷兰国旗问题*，因为它类似于对具有三种可能键值的数组进行排序，这可能对应于国旗上的三种颜色。
- en: Dijkstra's solution is based on a single left-to-right pass through the array
    that maintains a pointer `lt` such that `a[lo..lt-1]` is less than `v`, a pointer
    `gt` such that `a[gt+1..hi]` is greater than `v`, and a pointer `i` such that
    `a[lt..i-1]` are equal to v, and `a[i..gt]` are not yet examined.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Dijkstra的解决方案基于数组的单向左到右遍历，维护指针`lt`，使得`a[lo..lt-1]`小于`v`，指针`gt`，使得`a[gt+1..hi]`大于`v`，指针`i`，使得`a[lt..i-1]`等于v，`a[i..gt]`尚未检查。
- en: '![Quicksort 3-way partitioning overview](../Images/953b02f78b8bbb545b40806c3a024bae.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![快速排序3路划分概述](../Images/953b02f78b8bbb545b40806c3a024bae.png)'
- en: 'Starting with `i` equal to `lo` we process `a[i]` using the 3-way compare given
    us by the `Comparable` interface to handle the three possible cases:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 从`i`等于`lo`开始，我们使用`Comparable`接口给出的3路比较来处理`a[i]`，以处理三种可能的情况：
- en: '`a[i]` less than `v`: exchange `a[lt]` with `a[i]` and increment both `lt`
    and `i`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a[i]`小于`v`：交换`a[lt]`和`a[i]`，并同时增加`lt`和`i`'
- en: '`a[i]` greater than `v`: exchange `a[i]` with `a[gt]` and decrement `gt`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a[i]`大于`v`：交换`a[i]`和`a[gt]`，并减少`gt`'
- en: '`a[i]` equal to `v`: increment `i`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a[i]`等于`v`：增加`i`'
- en: '![Quicksort 3-way partitioning trace](../Images/eda2b31d5768752690b2413f6b2261c0.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![快速排序3路划分跟踪](../Images/eda2b31d5768752690b2413f6b2261c0.png)'
- en: '[Quick3way.java](Quick3way.java.html) is an implementation of this method.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '[Quick3way.java](Quick3way.java.html)是这种方法的一个实现。'
- en: Proposition.
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。
- en: Quicksort with 3-way partitioning is entropy-optimal.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 三路划分的快速排序是熵最优的。
- en: Visualization.
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 可视化。
- en: '[Quick3wayBars.java](Quick3wayBars.java.html) visualizes quicksort with 3-way
    partitioning.![3-way quicksort visualization](../Images/7044e5f33bf05d01675262d99631ac27.png)'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '[Quick3wayBars.java](Quick3wayBars.java.html) 可视化了使用三向切分的快速排序。![三向快速排序可视化](../Images/7044e5f33bf05d01675262d99631ac27.png)'
- en: Exercises
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Show, in the style of the trace given with `partition()`, how that method partitions
    the array `E A S Y Q U E S T I O N`.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展示`partition()`如何以`E A S Y Q U E S T I O N`数组进行划分的跟踪风格。
- en: '![Partitioning trace](../Images/89d604462e59a0b4532827cb5ed0728d.png)'
  id: totrans-49
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![切分跟踪](../Images/89d604462e59a0b4532827cb5ed0728d.png)'
- en: Show, in the style of the quicksort trace, how quicksort sorts the array `E
    A S Y Q U E S T I O N`. (For the purposes of this exercise, ignore the initial
    shuffle.)
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展示快速排序如何对数组`E A S Y Q U E S T I O N`进行排序的快速排序跟踪风格。（在这个练习中，忽略初始洗牌。）
- en: '![Quicksort trace](../Images/102a6d0a7dfbc2442b6e2c4a2350aa59.png)'
  id: totrans-51
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![快速排序跟踪](../Images/102a6d0a7dfbc2442b6e2c4a2350aa59.png)'
- en: Write a program [Sort2distinct.java](Sort2distinct.java.html) that sorts an
    array that is known to contain just two distinct key values.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[Sort2distinct.java](Sort2distinct.java.html)，对已知只包含两个不同关键值的数组进行排序。
- en: About how many compares will `Quick.sort()` make when sorting an array of N
    items that are all equal?
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当对一个包含N个相同项的数组进行排序时，`Quick.sort()`会进行多少次比较？
- en: '*Solution.* ~ N lg N compares. Each partition will divide the array in half,
    plus or minus one.'
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 〜 N lg N 次比较。每个划分将数组分成两半，加上或减去一个。'
- en: Show, in the style of the trace given with the code, how the entropy-optimal
    sort first partitions the array `B A B A B A B A C A D A B R A`.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展示熵最优排序如何首先对数组`B A B A B A B A C A D A B R A`进行划分的跟踪风格。
- en: '![3-way Partitioning trace](../Images/f0b435b8d2f94911800849fdbb99860a.png)'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![三向切分跟踪](../Images/f0b435b8d2f94911800849fdbb99860a.png)'
- en: Creative Problems
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创造性问题
- en: '**Nuts and bolts.** (G. J. E. Rawlins). You have a mixed pile of N nuts and
    N bolts and need to quickly find the corresponding pairs of nuts and bolts. Each
    nut matches exactly one bolt, and each bolt matches exactly one nut. By fitting
    a nut and bolt together, you can see which is bigger. But it is not possible to
    directly compare two nuts or two bolts. Given an efficient method for solving
    the problem.'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**螺母和螺栓。**（G. J. E. Rawlins）。你有一堆混合的N个螺母和N个螺栓，需要快速找到相应的螺母和螺栓配对。每个螺母恰好匹配一个螺栓，每个螺栓恰好匹配一个螺母。通过将螺母和螺栓配对，你可以看出哪个更大。但不能直接比较两个螺母或两个螺栓。给出一个解决问题的高效方法。'
- en: '*Hint*: customize quicksort to the problem. Side note: only a very complicated
    deterministic O(N log N) algorithm is known for this problem.'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：根据问题定制快速排序。顺便说一句：对于这个问题，已知只有一个非常复杂的确定性O(N log N)算法。'
- en: '**Best case.** Write a program [QuickBest.java](QuickBest.java.html) that produces
    a best-case array (with no duplicates) for `Quick.sort()`: an array of N distinct
    keys with the property that every partition will produce subarrays that differ
    in size by at most 1 (the same subarray sizes that would happen for an array of
    N equal keys). For the purposes of this exercise, ignore the initial shuffle.'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最佳情况。** 编写一个程序[QuickBest.java](QuickBest.java.html)，为`Quick.sort()`生成一个最佳情况数组（无重复项）：一个包含N个不同键的数组，具有每个划分产生的子数组大小最多相差1的特性（与N个相等键的数组产生相同子数组大小的情况相同）。在这个练习中，忽略初始洗牌。'
- en: '![Best-case input for quicksort](../Images/de28bece22a68d5abe2a12deb6e17c87.png)'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![快速排序的最佳情况输入](../Images/de28bece22a68d5abe2a12deb6e17c87.png)'
- en: '**Fast three-way partitioning.** (J. Bentley and D. McIlroy). Implement an
    entropy-optimal sort [QuickBentleyMcIlroy.java](QuickBentleyMcIlroy.java.html)
    based on keeping equal keys at both the left and right ends of the subarray. Maintain
    indices p and q such that a[lo..p-1] that a[q+1..hi] are all equal to a[lo], an
    index i such that a[p..i-1] are all less than a[lo] and an index j such that a[j+1..q]
    are all greater than a[lo]. Add to the inner partitioning loop code to swap a[i]
    with a[p] (and increment p) if it is equal to v and to swap a[j] with a[q] (and
    decrement q) if it is equal to v before the usual comparisons of a[i] and a[j]
    with v.![Bentley-McIlroy 3-way partitioning overview](../Images/08d1fb2323dce430d0c67eea23260042.png)After
    the partitioning loop has terminated, add code to swap the equal keys into position.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**快速三向切分。**（J. Bentley和D. McIlroy）。实现一个基于保持相等键在子数组的左右两端的熵最优排序[QuickBentleyMcIlroy.java](QuickBentleyMcIlroy.java.html)。维护索引p和q，使得a[lo..p-1]和a[q+1..hi]都等于a[lo]，一个索引i，使得a[p..i-1]都小于a[lo]，一个索引j，使得a[j+1..q]都大于a[lo]。在内部划分循环代码中添加代码，如果a[i]等于v，则交换a[i]和a[p]（并增加p），如果a[j]等于v，则交换a[j]和a[q]（并减少q），然后再进行通常的a[i]和a[j]与v的比较。![Bentley-McIlroy
    3-way划分概述](../Images/08d1fb2323dce430d0c67eea23260042.png)在划分循环结束后，添加代码将相等的键交换到正确位置。'
- en: Web Exercises
  id: totrans-63
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络练习
- en: '[QuickKR.java](QuickKR.java.html) is one of the simplest quicksort implementations,
    and appears in K+R. Convince yourself that it is correct. How will it perform?
    All equal keys?'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '[QuickKR.java](QuickKR.java.html)是最简单的快速排序实现之一，并出现在K+R中。说服自己它是正确的。它将如何执行？所有相等的键呢？'
- en: '**Randomized quicksort.** Modify `partition()` so that it always chooses the
    partitioning item uniformly at random from the array (instead of shuffling the
    array initially). Compare the performance against [Quick.java](Quick.java.html).'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**随机化快速排序。** 修改`partition()`，使其总是从数组中均匀随机选择划分项（而不是最初对数组进行洗牌）。与[Quick.java](Quick.java.html)比较性能。'
- en: '**Antiquicksort.** The algorithm for sorting primitive types in Java 6 is a
    variant of 3-way quicksort developed by [Bentley and McIlroy](../references/papers/bentley-mcilroy.pdf).
    It is extremely efficient for most inputs that arise in practice, including inputs
    that are already sorted. However, using a clever technique described by M. D.
    McIlroy in [A Killer Adversary for Quicksort](../references/papers/mcilroy.pdf),
    it is possible to construct pathological inputs that make the system sort run
    in quadratic time. Even worse, it overflows the function call stack. To see the
    sorting library in Java 6 break, here are some killer inputs of varying sizes:
    [10,000](antiquicksort10K.txt), [20,000](antiquicksort20K.txt), [50,000](antiquicksort50K.txt),
    [100,000](antiquicksort100K.txt), [250,000](antiquicksort250K.txt), [500,000](antiquicksort500K.txt),
    and [1,000,000](antiquicksort1M.txt). You can test them out using the program
    [IntegerSort.java](IntegerSort.java.html) which takes a command line input N,
    reads in N integers from standard input, and sorts them using the system sort.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Antiquicksort.** Java 6 中用于对原始类型进行排序的算法是由 [Bentley 和 McIlroy](../references/papers/bentley-mcilroy.pdf)
    开发的 3 路快速排序的变体。对于实践中出现的大多数输入，包括已经排序的输入，它非常高效。然而，使用 M. D. McIlroy 在 [A Killer Adversary
    for Quicksort](../references/papers/mcilroy.pdf) 中描述的巧妙技术，可以构造使系统排序在二次时间内运行的病态输入。更糟糕的是，它会溢出函数调用堆栈。要看到
    Java 6 中的排序库崩溃，请尝试一些不同大小的致命输入：[10,000](antiquicksort10K.txt), [20,000](antiquicksort20K.txt),
    [50,000](antiquicksort50K.txt), [100,000](antiquicksort100K.txt), [250,000](antiquicksort250K.txt),
    [500,000](antiquicksort500K.txt), 和 [1,000,000](antiquicksort1M.txt)。您可以使用程序 [IntegerSort.java](IntegerSort.java.html)
    进行测试，该程序接受一个命令行输入 N，从标准输入读取 N 个整数，并使用系统排序对它们进行排序。'
- en: '**Bad partitioning.** How does not stopping on equal keys make quicksort go
    quadratic when all keys are equal?'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**糟糕的分区。** 当所有键相等时，不停止在相等键上会使快速排序变为二次的原因是什么？'
- en: '*Solution.* Here is the result of partitioning AAAAAAAAAAAAAAA when we don''t
    stop on equal keys. It unevenly partitions the array into one subproblem of size
    0 and one of size 14.'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 这是在我们在相等键上停止时对 AAAAAAAAAAAAAAA 进行分区的结果。它将数组不均匀地分成了一个大小为 0 的子问题和一个大小为
    14 的子问题。'
- en: '![Partitioning AAAAAAAAAAAAAAA when we don''t stop on equal keys](../Images/0038acc56487f1b7be11ec3d50f37e64.png)'
  id: totrans-69
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![在我们不停止在相等键上时对 AAAAAAAAAAAAAAA 进行分区](../Images/0038acc56487f1b7be11ec3d50f37e64.png)'
- en: Here is the result of partitioning AAAAAAAAAAAAAAA when we do stop on equal
    keys. It evenly partitions the array into two subproblems of size 7.
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是在我们在相等键上停止时对 AAAAAAAAAAAAAAA 进行分区的结果。它将数组均匀地分成了两个大小为 7 的子问题。
- en: '![Partitioning AAAAAAAAAAAAAAA when we do stop on equal keys](../Images/330c426741c1ce20c7e877fb24d3308a.png)'
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![在我们在相等键上停止时对 AAAAAAAAAAAAAAA 进行分区](../Images/330c426741c1ce20c7e877fb24d3308a.png)'
- en: '**Comparing an item against itself.** Show that our implementation of quicksort
    can compare an item against itself, i.e., calls `less(i, i)` for some index `i`.
    Modify our implementation so that it never compares an item against itself.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**将项目与自身进行比较。** 展示我们的快速排序实现可以将项目与自身进行比较，即对某个索引 `i` 调用 `less(i, i)`。修改我们的实现，使其永远不会将项目与自身进行比较。'
- en: '**Hoare''s original quicksort.** Implement a version of Hoare''s original quicksort
    algorithm. It''s similar to our two-way partitioning algorithm except that the
    pivot is not swapped into its final position. Instead, the pivot is left in one
    of the two subarrays, no element is fixed in its final position, and the two subarrays
    where the pointers cross are sorted recursively.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**霍尔原始快速排序。** 实现霍尔原始快速排序算法的一个版本。它类似于我们的两路分区算法，只是枢轴不会交换到其最终位置。相反，枢轴留在两个子数组中的一个，没有元素固定在其最终位置，指针交叉的两个子数组会递归排序。'
- en: '*Solution.* [HoareQuick.java](QuickHoare.java.html). We note that, while this
    verison is quite elegant, it does not preserve randomness in the subarrays. According
    to [Sedgewick''s PhD thesis](https://sedgewick.io/wp-content/themes/sedgewick/papers/1975Quicksort.pdf),
    "this bias not only makes analysis of the method virtually impossible, it also
    slows down the sorting process considerably."'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* [HoareQuick.java](QuickHoare.java.html)。我们注意到，虽然这个版本非常优雅，但它不会保留子数组中的随机性。根据
    [Sedgewick 的博士论文](https://sedgewick.io/wp-content/themes/sedgewick/papers/1975Quicksort.pdf)，“这种偏差不仅使方法的分析几乎不可能，而且还会显著减慢排序过程。”'
- en: '**Dual-pivot quicksort.** Implement a version of Yaroslavskiy''s dual-pivot
    quicksort.'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**双轴快速排序。** 实现 Yaroslavskiy 的双轴快速排序的版本。'
- en: '*Solution.* [QuickDualPivot.java](QuickDualPivot.java.html) is an implementation
    that is very similar to [Quick3way.java](Quick3way.java.html).'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* [QuickDualPivot.java](QuickDualPivot.java.html) 是一个非常类似于 [Quick3way.java](Quick3way.java.html)
    的实现。'
- en: '**Three-pivot quicksort.** Implement a version of three-pivot quicksort ala
    [Kushagra-Ortiz-Qiao-Munro](http://epubs.siam.org/doi/abs/10.1137/1.9781611973198.6).'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**三轴快速排序。** 实现类似 [Kushagra-Ortiz-Qiao-Munro](http://epubs.siam.org/doi/abs/10.1137/1.9781611973198.6)
    的三轴快速排序的版本。'
- en: '**Number of compares.** Give a family of arrays of length n for which the standard
    quicksort partitioning algorithm makes (i) n + 1 compares, (ii) n compares, (iii)
    n - 1 compares, or argue that no such family of arrays exist.'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**比较次数。** 给出一个长度为 n 的数组族，使得标准快速排序分区算法进行 (i) n + 1 次比较，(ii) n 次比较，(iii) n -
    1 次比较，或者证明不存在这样的数组族。'
- en: '*Solution*: ascending order; descending order; none.'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：升序；降序；无。'
