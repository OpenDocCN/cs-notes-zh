- en: P26：15-03-nonlinear-mutual-recursion.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P26：15-03-nonlinear-mutual-recursion.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
- en: In this video， we'll be exploring some further issues involved in recursion
    in the SQL language。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个视频中，我们将进一步探讨 SQL 语言中递归涉及的一些问题。
- en: '![](img/43771b425ce5b32b6ff32a64b8cd4e6c_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43771b425ce5b32b6ff32a64b8cd4e6c_1.png)'
- en: First， a reminder of how SQL implements recursion。 There's a width statement
    in SQL that can be specified to have recursively defined relations in it。 We say
    with recursive and then we define a set of relations where the query defining
    relation could involve the relation itself。 That's where recursion pops in。 And
    then at the end。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '首先，提醒一下 SQL 如何实现递归。SQL 中有一个 `WITH` 语句，可以指定递归定义的关系。我们说 `WITH RECURSIVE`，然后定义一组关系，在这些关系中，定义关系的查询可能会涉及到关系本身。这就是递归的由来。然后在最后， '
- en: the final result is a query that might involve those recursively defined relations。
    as well as other tables in the database。 As we saw in the previous video and demo。
    it's very common for recursively defined relations in the width statement to take
    the structure of having a base query that doesn't involve our the recursively
    defined relation unioned with the recursive query。 We saw many examples of that
    form。 The first thing I want to talk about in this video is what's called linear
    recursion。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最终结果是一个查询，它可能涉及到那些递归定义的关系，也可能涉及到数据库中的其他表。正如我们在前一个视频和演示中看到的，递归定义的关系在 `WITH` 语句中的结构通常是先有一个不涉及递归定义关系的基本查询，再与递归查询联合。我们看到了很多这种形式的例子。我想在这个视频中谈的第一件事就是所谓的线性递归。
- en: Linear recursion specifies that in the recursive definition of R， and again。
    let's assume it takes this form of the base query union， the recursive query。
    in the recursive query， there is only one reference to the recursively defined
    relation R。 So let's take a look at an example to understand linear recursion
    and nonlinear recursion。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 线性递归指定了在 R 的递归定义中，假设它采取基本查询联合递归查询的形式。在递归查询中，只有一个对递归定义关系 R 的引用。那么我们来看一个例子，来理解线性递归和非线性递归。
- en: The first example we used when we introduced recursion was finding ancestor
    relationships from a base table that just has parent-child relationship。 So a
    basic transit of closure operation and the query we wanted to run was to find
    all of Mary's ancestors。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在介绍递归时使用的第一个例子是从一个只有父子关系的基本表中找到祖先关系。所以这是一个基本的闭包操作，查询我们想要运行的是找到所有 Mary 的祖先。
- en: And here's the query that we wrote。 It does take the form of having a base query
    here。 which says if we have a parent relationship， that's also an ancestor relationship。
    And then the recursion occurs in the second part of the union where we join the
    recursively defined ancestor relationship。 ancestor relation with parents so that
    we extend the ancestors with one more generation。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们写的查询。它的形式确实有一个基本查询，这里说的是，如果我们有一个父关系，它也是一个祖先关系。然后递归发生在联合的第二部分，在那里我们连接递归定义的祖先关系和父关系，以便我们能将祖先扩展一个代。
- en: Now this query does have linear recursion because we only have one instance
    here of the recursively defined relation ancestor。 So let's take a look at what
    happens underneath when this query is executed。 We start with our parent table。
    And here it is with a parent and child and let's suppose we have say Sue and John
    and John and Mary。 for example， in our parent table。 Then in what's effectively
    the first iteration。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这个查询确实具有线性递归，因为我们在这里只有一个递归定义关系的实例，即祖先关系。所以让我们看看当这个查询执行时，底层发生了什么。我们从父表开始，这里有父子关系，假设我们有比如说
    Sue 和 John，John 和 Mary，例如在我们的父表中。然后在实际的第一次迭代中，
- en: the base query here is run that copies the parent table to the ancestor table。
    So now we have Sue and John and John and Mary and anything else that we had in
    the parent table in the ancestor table。 As the iteration continues， we're effectively
    joining the parent table and the ancestor table to get additional tuples in the
    ancestor table。 For example， we see that Sue and John， the Sue and John tuple
    here。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的基本查询会运行，它将父表复制到祖先表中。所以现在我们有了 Sue 和 John，John 和 Mary，以及父表中的其他任何内容，都在祖先表中了。随着迭代的进行，我们实际上是在将父表和祖先表进行连接，以便在祖先表中获取更多的元组。例如，我们看到这里的
    Sue 和 John 这对元组。
- en: would join with the John and Mary tuple and that would give us Sue and Mary
    in the ancestor table。 The iteration continues until there are no new tuples to
    add to the ancestor table and then we're done with our recursively defined relation
    and we can go ahead and execute the final query in the with statement。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 将与John和Mary元组连接，这样我们就会在祖先表中得到Sue和Mary。迭代继续，直到没有新的元组可以添加到祖先表中，然后我们就完成了递归定义的关系，可以继续执行`WITH`语句中的最终查询。
- en: And again， often when I say we， I really mean we， the system， all this of course。
    is being performed by the system as it executes the recursively defined with statement。
    Now let's take a look at a nonlinear expression of the same query。 Here it is。
    What we see here is that the primary change is right in here。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，当我说“我们”时，实际上是指系统，所有这些当然是在系统执行递归定义的`WITH`语句时由系统完成的。现在，让我们看一下同一查询的非线性表达式。这里就是它。我们看到的主要变化就在这里。
- en: Instead of joining the parent with ancestor in the recursive half。 we're going
    to join two instances of the ancestor relation。 And let's see what happens during
    execution when this is how we express our recursion。 So we again start by copying
    the contents of the parent table into the ancestor table as part of the base query
    and I've already shown that here。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在递归部分，我们不再将父节点与祖先节点连接，而是将祖先关系的两个实例连接起来。让我们看看当我们以这种方式表达递归时，执行过程中会发生什么。所以，我们再次通过将父表的内容复制到祖先表中作为基本查询的一部分，而我已经在这里展示过了。
- en: But now instead of during iteration joining the parent table with the ancestor
    table。 we're actually going to join the ancestor table with itself to generate
    new tuples。 For example。 we will join the first two tuples in ancestor with each
    other， Sue， John and John Mary。 in order to obtain what was the same tuple we
    obtained with a linear recursion。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在我们不再在迭代过程中将父表与祖先表连接，而是实际上将祖先表与自身连接，以生成新的元组。例如，我们将祖先表中的前两个元组进行连接，Sue，John
    和 John Mary，以获得线性递归中得到的相同元组。
- en: which would be the tuple with Sue and Mary。 Just a quick reminder， I intended
    to say this earlier。 but it's the fact that we have these two references to ancestor
    in the recursion here。 That makes it nonlinear。 Okay， so what's the deal with
    these two queries？
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是包含Sue和Mary的元组。只是一个简短的提醒，我本来打算早些说的，但事实是我们在递归中有这两个指向祖先的引用，这使得它变成了非线性。好的，那这两个查询有什么不同呢？
- en: Why might we prefer one form of the query over the other？ And take my word for
    it， by the way。 we do get equivalent results to the query in its linear and nonlinear
    versions。 Well。 here are some pros and cons to nonlinear versus linear for this
    particular query and actually in general when we can express a query both ways。
    First of all， there's some pluses to the nonlinear。 So the query looks cleaner。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么我们可能更倾向于使用某种查询形式而非另一种呢？顺便说一下，听我说，我们确实可以得到线性和非线性版本的查询的等效结果。好了，下面是非线性和线性查询在这个特定查询中的一些优缺点，实际上，通常当我们可以用两种方式表达一个查询时，都是适用的。首先，非线性版本有一些优点。比如查询看起来更简洁。
- en: If you go back and look at the two queries， the nonlinear version is sort of
    more symmetric。 a little shorter even to express than the linear version。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回去看这两个查询，非线性版本在某种程度上更对称，甚至比线性版本表达起来稍微简短一些。
- en: '![](img/43771b425ce5b32b6ff32a64b8cd4e6c_3.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43771b425ce5b32b6ff32a64b8cd4e6c_3.png)'
- en: Second of all， the nonlinear version actually converges faster to the fixed
    point to the final state than the linear version。 And I'm going to show that a
    little bit abstractly because it is actually fairly important。 So I'm going to
    create this abstract example， parent-child relation。 which is going to be completely
    linear just for illustrative purposes。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，非线性版本实际上比线性版本更快收敛到固定点，即最终状态。我将稍微抽象地展示这一点，因为它实际上非常重要。所以我将创建这个抽象的例子，父子关系，完全线性的，只是为了说明。
- en: So we have this person here who's the parent of the person here who's a parent
    of a person here and so on。 We're going to make it eight levels deep。 So this
    is an abstraction of our parent table。 And now let's see how ancestors are computed。
    So in the first step。 we'll add one ancestor tuple for each tuple in the parent
    relation。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们这里有一个人，他是这里这个人的父母，而这个人又是这里这个人的父母，依此类推。我们将其扩展到八级深度。所以这是我们父表的抽象表示。现在，让我们看看祖先是如何计算的。首先，我们将为父关系中的每个元组添加一个祖先元组。
- en: So the purple are the tuples that are added to ancestor。 Then in the second
    iteration。 we're going to join those with themselves。 I'm sorry。 we're going to
    join the ancestor tuples with parent tuples。 So each ancestor tuple could be extended
    by one。 So that's going to give us all pairs of tuples。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 所以紫色的是添加到祖先中的元组。然后在第二次迭代中，我们将这些元组与它们自身结合。抱歉，我们将祖先元组与父母元组结合。因此，每个祖先元组可以通过扩展一个元素来形成新元组。这将给我们所有的元组配对。
- en: I'm sorry， it's already getting a bit crowded here， but I think you'll get the
    idea。 On the next iteration， we're going to again take our ancestor tuples and
    extend them by one by joining them with parent。 So after the second， we'll have
    all triples here。 So all great grandparent relationships。 Okay。 and that's a big
    mess， but you can really see what's going on。 Each time we iterate。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 抱歉，已经有点拥挤了，但我认为你会明白我的意思。在下一次迭代中，我们将再次获取祖先元组，并通过与父母元组结合将它们扩展一个元素。所以第二次迭代后，我们将得到所有三代关系。所以，所有的曾祖父母关系。好的，这有点乱，但你可以真正看到发生了什么。每次迭代时。
- en: we get one more generation added into the ancestors。 And now let's think about
    what happens when we use the nonlinear version。 We're after the first step we
    join ancestor with itself instead of ancestor with parent。 So as before on the
    first step， and now I'm going to make these red。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会向祖先中添加一代。现在让我们想想当我们使用非线性版本时会发生什么。在第一步后，我们将祖先与自身结合，而不是将祖先与父母结合。就像第一步一样，现在我将它们标记为红色。
- en: the ancestor relation will contain exactly the same as parents。 And the second
    step is the same as well。 We're going to join ancestor with itself。 but since
    each one of ancestor is only the parent relationship。 we're again going to get
    all pairs in the second step of the iteration。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 祖先关系将与父母关系完全相同。第二步也是一样。我们将祖先与自身结合。但由于每个祖先只有父母关系，我们将在迭代的第二步中再次获取所有的配对。
- en: The difference begins in the third step。 Now we're joining ancestor with itself。
    So we will be joining these two step ancestors with the single ones， just like
    before。 to get all the threes， but we will also be joining twos with twos。 In
    other words。 we'll be joining grandparent relationships with grandparent relationships
    and we'll be getting in that same iteration。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 差异从第三步开始。现在我们将祖先与自身结合。所以我们将像之前一样将这两个步骤的祖先与单一的祖先连接，目的是获取所有的三代关系，但我们也会将二代与二代相连接。换句话说，我们将祖父母关系与祖父母关系结合，并且在同一迭代中得到结果。
- en: the fours。 So as you can see， the nonlinear version does converge faster。 Now
    this example is very small， so it's not as blatantly obvious。 but the linear version
    is going to take a linear number of iterations in order to converge to the final
    recursively defined relation contents。 Whereas when we use the nonlinear version，
    it's actually logarithmic。 So for a large database。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 四代关系。正如你所看到的，非线性版本的收敛速度更快。现在这个例子非常小，所以不那么明显。但线性版本需要进行线性次数的迭代才能收敛到最终的递归定义关系内容。而当我们使用非线性版本时，实际上是对数时间复杂度。所以对于一个大型数据库。
- en: it can be considerably faster。 So what about the downsides of nonlinear recursion？
    Well。 the major downside is that it's harder to implement， or certainly harder
    to implement efficiently。 And as a result of that， actually the SQL standard only
    requires linear recursion。 and the Postgres system that we've been using also
    only supports linear recursion。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以显著加速。那么非线性递归的缺点是什么呢？最大的缺点是它更难实现，或者说更难高效地实现。因此，实际上 SQL 标准只要求线性递归，而我们一直使用的
    Postgres 系统也只支持线性递归。
- en: So back to the basic form of our RIT recursive statement in order to introduce
    a different topic。 which is the topic of mutual recursion。 Mutual recursion， as
    I alluded to in the previous video。 is the case where one of our recursively defined
    relations does not refer to itself。 but rather to a different recursively defined
    relation。 And that one refers back to the first one。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到我们的 RIT 递归语句的基本形式，以引入一个不同的话题——互递归。互递归，如我在之前的视频中提到的，是其中一个递归定义的关系不直接引用自身，而是引用另一个递归定义的关系，而那个关系又引用回第一个。
- en: or we could even have a loop of three or four or more。 So the idea is that we
    can't look at these individually to see the recursion。 but together they are recursive，
    and they have to kind of be computed in tandem。 So the example I'm going to use
    here is what's known as hubs and authorities。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们甚至可以有三个、四个或更多的循环。所以这个想法是，我们不能单独查看这些节点来看到递归，但它们结合在一起时是递归的，并且它们必须以某种方式同时计算。所以我将在这里使用的例子是所谓的中心节点和权威节点。
- en: Hubs and authorities was an algorithm for web searching， actually。 for annotating
    web nodes for the purposes of searching。 It was developed around the same time
    as Google's PageRank。 I guess we can see which one won out。 But hubs and authorities
    are actually quite interesting just in what it does。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 中心节点和权威节点算法实际上是一个用于网页搜索的算法，用于为网页节点添加注释，以便进行搜索。它是在谷歌的PageRank算法大约同时开发的。我想我们可以看出哪一个最终获胜了。但中心节点和权威节点其实非常有趣，尤其是在它所做的事情方面。
- en: So let me go ahead and define the meaning of hubs and authorities and then show
    how mutual recursion and SQL can be used to compute the hubs and authorities in
    a database that contains a link structure。 a graph， basically。 So here's a little
    graph， and we're going to assume that each node has a number。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 让我先定义中心节点和权威节点的含义，然后展示如何在包含链接结构的数据库中使用互递归和SQL来计算中心节点和权威节点，基本上是一个图。所以这是一个小图，我们假设每个节点都有一个编号。
- en: say， associated with it， and that we have a relation called link that just tells
    us the edges of the graph。 so the source， a node， and the destination node。 So
    in a graph。 we're going to designate some of the nodes as hub nodes and some of
    the nodes as authority nodes。 and we're going to define a hub node to be a node
    that points to at least some number， let's say。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 假设它关联着一个我们称为link的关系，它只是告诉我们图的边，即源节点和目标节点。因此，在一个图中，我们将指定一些节点为中心节点，另一些节点为权威节点，并且我们将定义中心节点为一个指向至少一些节点的节点，假设是这样。
- en: three authority nodes。 And similarly， we're going to say an authority node is
    a node that's pointed to by。 let's say， at least three， again， hub nodes。 And
    by the way， these numbers， three and three。 don't have to be the same。 And another
    thing I wanted to mention is in a graph， say。 representing the web， we wouldn't
    expect a large fraction of the nodes to be hubs and authorities。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 三个权威节点。类似地，我们将说权威节点是一个至少被三个中心节点指向的节点。顺便提一句，这些数字，三和三，不必相同。我还想提到的是，在一个图中，比如说表示网页的图，我们不会期望大量的节点是中心节点和权威节点。
- en: Many would be normal nodes。 But again， this is just for illustrative purposes。
    but it also serves to teach you about the hubs and authorities concept。 which
    is kind of interesting。 Now， you can see already how mutual recursion is going
    to fit into the picture。 but how are we going to get started？ And the only way
    you can actually get started is to have some nodes that are predesignated as hubs
    and authorities。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 很多节点将是普通节点。但这仅仅是为了说明问题，同时也有助于教授你关于中心节点和权威节点的概念，这是相当有趣的。现在，你已经可以看到互递归如何适应这个图景了。那么我们该如何开始呢？实际上，你能开始的唯一方式就是先有一些节点被预先指定为中心节点和权威节点。
- en: For example， if we predesignated as authorities these three middle nodes here。
    then we could compute the fact that node one is a hub。 So we'll also assume that
    we have two or more relations in our database。 One of them gives us a set of nodes
    predesignated as hubs and the other a set of nodes predesignated as authorities。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，如果我们把这三个中间节点预先指定为权威节点，那么我们就可以计算出节点一是一个中心节点。所以我们还假设我们的数据库中有两个或更多的关系。其中一个给出了预先指定为中心节点的节点集合，另一个则是预先指定为权威节点的节点集合。
- en: And our job is to write a query that computes all of the hub and authority nodes
    based on this mutually recursive definition here。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的任务是写一个查询，根据这个互递归定义，计算出所有的中心节点和权威节点。
- en: '![](img/43771b425ce5b32b6ff32a64b8cd4e6c_5.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43771b425ce5b32b6ff32a64b8cd4e6c_5.png)'
- en: So here's the query that does it。 By the way， you've certainly noticed that
    I'm not doing a live demo of the recursive queries in this particular video。 Nonlinear
    recursion is not supported in the Postgres system。 and it's also not part of the
    SQL standard。 Mutual recursion in limited forms is part of the SQL standard。 but
    it's also currently not supported in Postgres。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是执行此操作的查询。顺便提一下，你肯定已经注意到我在这个视频中并没有做递归查询的现场演示。Postgres系统不支持非线性递归，而且它也不是SQL标准的一部分。SQL标准只在有限的形式中支持互递归，但Postgres目前也不支持。
- en: So I've used the nice interface here to get the coloring of the queries。 but
    these queries currently don't run on the systems that we're using。 Okay。 so back
    to our actual query here。 So this is a query to compute hubs and authorities。
    given that we have a starting set of hub nodes and a starting set of authority
    nodes。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我使用了这里的漂亮界面来获取查询的着色效果，但这些查询目前无法在我们使用的系统上运行。好了，回到我们实际的查询上。这是一个用于计算中心节点和权威节点的查询，前提是我们有一组初始的中心节点和初始的权威节点。
- en: And then we have the link relation that gives us the structure of our graph。
    So we're going to compute two relations， the hub relation with the nodes that
    are hubs。 the authorities relation of the nodes that are authorities。 and they
    are going to have mutual recursion between them。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们有链接关系，它给出了我们图的结构。因此，我们将计算两个关系，分别是包含中心节点的中心节点关系，和包含权威节点的权威节点关系，它们之间会有相互递归。
- en: '![](img/43771b425ce5b32b6ff32a64b8cd4e6c_7.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43771b425ce5b32b6ff32a64b8cd4e6c_7.png)'
- en: So let's take a look first at the hubs and we'll see that the structure of the
    queries for hubs and authorities is very。 very similar。 So the base case for the
    hubs is that the nodes that are in the hub star relation are in the hub relation。
    of course。 And then the recursive query here is a little bit complex。 So what
    we're going to find is links， elements in our link relation。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们先来看一下中心节点，我们会发现中心节点和权威节点的查询结构非常，非常相似。因此，中心节点的基本情况是，位于中心节点起始关系中的节点也属于中心节点关系，当然。然后这里的递归查询有点复杂。所以我们将找到的是链接关系中的元素。
- en: where the destination is an authority。 And so we're going to find all of the
    sources that point to an authority。 We're going to group by the source so we consider
    each node one at a time。 and then we count how many times it appears in the link
    pointing to an authority。 So this is going to give us a nodes that point two greater
    than or equal to three authorities。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 其中目标是一个权威节点。因此，我们将找到所有指向权威节点的源节点。我们按源节点进行分组，逐一考虑每个节点，然后计算它在指向权威节点的链接中出现的次数。因此，这将给我们提供指向至少三个权威节点的节点。
- en: which was our definition of hubs。 Now here， of course， we're referring to authority。
    which itself is a recursively defined relation。 The authority relation is very
    similar。 As I said。 we start at it with our base case of adding nodes that are
    in the authority start relation。 And then we consider destinations instead of
    sources in our link relation such that there are at least three sources that are
    hubs。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们对中心节点的定义。现在，在这里，当然，我们指的是权威性。权威关系本身是一个递归定义的关系。权威关系非常相似。正如我所说，我们从将节点添加到权威起始关系的基本情况开始。然后我们考虑链接关系中的目标，而不是源节点，要求至少有三个源节点是中心节点。
- en: And that's what we've got down here。 So this is going to give us elements that
    are pointed to by greater than or equal to three hubs。 And here， of course， we're
    using hub， which is also a recursively defined relation。 So you can think of these
    two as working in tandem。 You can think of this system as sort of iteratively
    adding to the hubs and the authorities until there's nothing more to add to either
    one。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们下面的定义。因此，这将给我们提供被至少三个中心节点指向的元素。当然，在这里我们使用的是中心节点，它也是一个递归定义的关系。所以你可以认为这两个关系是相辅相成的。你可以把这个系统看作是一个迭代地不断添加中心节点和权威节点，直到两者都没有更多节点可以添加为止。
- en: Now， one thing that this definition of hubs of authorities and this computation
    allows is for a node to be both a hub and authority。 And there's nothing wrong
    with that if the structure of the graph yields that result。 But let's suppose
    we don't want nodes to be allowed to be both hubs and authorities。 We want every
    node to be either one or the other。 That will require us to modify our query to
    not add nodes to become hubs if they're already authorities or to have nodes become
    authorities if they're already hubs。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这种关于中心节点和权威节点的定义及计算允许一个节点既是中心节点又是权威节点。如果图的结构导致这种结果，那是没有问题的。但假设我们不希望节点既能是中心节点又能是权威节点，我们希望每个节点只能是其中之一。为了实现这一点，我们需要修改查询，不让已经是权威节点的节点成为中心节点，或者不让已经是中心节点的节点成为权威节点。
- en: So let's go ahead and modify the query to incorporate that additional constraint。
    So here's the query and by the way， just a reminder that you can download these
    queries from our website even though you can't run them at this point in time。
    The difference in this query from the previous one is one additional condition
    in the definition of hubs right here saying I'm not going to add a node。 a source
    node to the hubs if it's already in the authorities。 And similarly。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们继续修改查询，以加入这个附加的约束。这里是查询，顺便提醒一下，虽然目前无法执行这些查询，但你仍然可以从我们的网站下载它们。这个查询与之前的一个不同之处在于，定义中心时多了一个额外的条件，在这里说明，如果节点已经在权威中，我不会将它加入中心。同时，类似的条件也适用。
- en: I've added one more condition here in authorities that I'm not going to add
    a node to authorities if it's already a hub。 Now let's suppose we have the following
    graph structure。 We have a node here that hasn't been labeled as a hub or authority
    yet。 And let's suppose that this node is pointed to by three nodes that have already
    been designated as hub nodes。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我在权威中增加了一个条件，如果节点已经是中心，我不会将它加入到权威中。现在假设我们有以下图结构。我们有一个节点，它还没有被标记为中心或权威。假设这个节点被三个已经被标记为中心的节点指向。
- en: And furthermore， this node points to three nodes that have already been designated
    as authorities。 So by our definition， this node could be a hub because it points
    to three authorities and it could also be an authority because it's pointed to
    by three hubs。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，这个节点还指向三个已经被标记为权威的节点。所以根据我们的定义，这个节点可以是一个中心，因为它指向三个权威节点，它也可以是一个权威，因为它被三个中心节点指向。
- en: '![](img/43771b425ce5b32b6ff32a64b8cd4e6c_9.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43771b425ce5b32b6ff32a64b8cd4e6c_9.png)'
- en: But the query we've given now is not going to allow us to label this node as
    both a hub and authority。 And just to be clear， in the previous query， we would
    have put this node in both the hub relation and the authority relation。 But now
    we're not going to be able to do that because of these conditions right down here。
    So actually， whether this node ends up as a hub or an authority depends on effectively
    which one of these arms of our width statement gets executed first。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们现在给出的查询将不允许我们将这个节点同时标记为中心和权威。为了明确起见，在之前的查询中，我们会将这个节点同时放入中心关系和权威关系中。但现在由于这里的条件，我们无法再这样做。所以实际上，这个节点最终是成为中心还是权威，实际上取决于我们这个宽度语句中的哪个分支先被执行。
- en: If we first consider the possibility of the node being a hub。 then it will be
    put in the hub relation and then it won't be allowed to be put in the authority
    relation。 On the other hand， if we first make an authority， then when we look
    for computing the hub relation。 it wouldn't be allowed to be a hub。 So you can
    think of this as a sort of non-deterministic behavior or if you're into theory
    that's a non-unique fixed point of the recursion。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们首先考虑节点作为中心的可能性，那么它将被放入中心关系中，并且不允许被放入权威关系中。另一方面，如果我们首先定义一个节点为权威，那么当我们寻找计算中心关系时，它就不会被允许作为中心。所以你可以将其看作一种非确定性行为，或者如果你对理论感兴趣的话，这是一种递归的非唯一固定点。
- en: And this is considered a not good thing。 Generally。 database people when they
    run queries like to have one answer all the time。 They like to have a deterministic
    answer for their queries。 So actually。 this type of mutual recursion is not allowed
    in the SQL standard。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这被认为是不好的事情。通常情况下，数据库人员在运行查询时希望得到一个一致的答案。他们希望查询能够返回确定性的结果。因此，实际上，在SQL标准中是不允许这种互递归的。
- en: And the real crux of the problem here is that one recursively defined relation
    is depending negatively on another one。 So this negative dependence is what causes
    the problem。 And actually。 we can have a negative dependence even without mutual
    recursion。 We could define a relation that sort of depends negatively on itself
    and a subquery。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的核心在于，一个递归定义的关系依赖于另一个关系，并且是负向依赖的。因此，这种负向依赖造成了问题。实际上，我们即使没有互递归，也可以有负向依赖。我们可以定义一个关系，它依赖于自身以及一个子查询。
- en: And that wouldn't be allowed either。 So that completes the example of hubs and
    authorities。 And again， what we're trying to show first of all is mutual recursion，
    which can be quite powerful。 And second of all， the restriction that we can't
    have negative subqueries across recursively defined relations。 The last thing
    I wanted to mention in this video， it's not in the title of the video since we're
    focusing mostly on non-linear and mutual recursion。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是不被允许的。所以这就完成了枢纽和权威的示例。再一次，我们首先要展示的是互递归，它可以非常强大。其次，我们要展示的是一个限制，即我们不能在递归定义的关系中进行负向子查询。我在这段视频中最后要提到的一点，虽然它没有出现在视频标题中，因为我们主要聚焦于非线性和互递归。
- en: is recursion with aggregation。 And let me just show a simple abstract example。
    So we have a relation P that just contains one attribute。 We can assume that it's
    integers。 And we're going to try in our with recursive statement to compute a
    recursively defined relation called R that contains the tuples in P together with
    the sum of the values in the attribute of P。 I'll just write that as sum of P。
    So here's how we write it in SQL。 We have our base case。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 递归与聚合。让我先展示一个简单的抽象示例。所以我们有一个关系P，它只包含一个属性。我们可以假设它是整数类型的。我们将在我们的`with recursive`语句中计算一个递归定义的关系R，R包含P中的元组以及P属性值的总和。我将它表示为P的总和。那么我们在SQL中是这样写的。我们有我们的基本情况。
- en: which is that the tuples in P are also in R。 And then we do our union of the
    recursive part。 which says， and also in R， I want to have the sum of the tuples
    in R。 So let's say that P starts out with two tuples， the values one and two。
    So what does the query compute for R？ Well， certainly one and two are in R based
    on the first part here。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，P中的元组也在R中。然后我们进行递归部分的联合，这表示在R中，我还希望包含R中元组的总和。那么假设P开始时有两个元组，值分别是1和2。那么这个查询计算出的R是什么呢？显然，基于第一部分的内容，1和2确实在R中。
- en: And then based on the second part， then in the first iteration， R should also
    contain the sum of R。 which is three， except as soon as we put three in， the sum
    of R isn't three anymore。 The sum of R is six。 So should we cross out the three
    and put six there。 but then now the sum of R has become six， 79， et cetera。 So
    we can see the problem。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 然后根据第二部分，在第一次迭代中，R也应该包含R的总和。总和是三，但一旦我们把三放进去，R的总和就不再是三了。R的总和变成了六。那么我们是否应该把三去掉，改成六呢？但现在R的总和变成了六、七九等等。所以我们可以看到这个问题。
- en: There's no good definition for what R should contain based on this recursion。
    And for that reason。 actually recursion with aggregation is disallowed in the
    SQL standard and isn't supported by any system。 So to summarize both of our videos
    about recursion。 SQL has introduced recursion into the standard as part of the
    with statement。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这种递归，R应该包含什么没有明确的定义。因此，实际上，SQL标准不允许递归与聚合一起使用，并且任何系统都不支持这种做法。总结一下我们关于递归的两段视频内容，SQL已经将递归引入标准，作为`with`语句的一部分。
- en: Whether the keyword recursive goes with the with or with the recursively defined
    relations is a bit inconsistent。 But in any case， the basic idea is the same。
    When we have this statement。 we can write queries that refer to the relation that's
    being defined。 And we can also have mutual recursion between the queries that
    are defined in the with statement。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 递归关键字是与`with`一起使用，还是与递归定义的关系一起使用，这一点有些不一致。但无论如何，基本思想是一样的。当我们有这个语句时，我们可以编写引用正在定义的关系的查询。我们还可以在`with`语句中定义的查询之间进行互递归。
- en: And finally， the result is the running of the final query。 which might involve
    the recursively defined relations。 Adam recursion to SQL does strictly extend
    its expressiveness。 There are queries that can't be written without recursion。
    They usually involve some type of unbounded computation。 For example。 computing
    any number of flights or any depths of ancestors。 Usually there's a transit of
    closure flavor to those queries。 Without recursion。 the iteration involved in
    computing a recursively defined relation has to be written outside of the database。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 最终，结果是运行最终查询，这可能涉及递归定义的关系。将递归引入SQL确实扩展了它的表达能力。有些查询如果没有递归无法编写。它们通常涉及某种类型的无界计算。例如，计算航班数量或祖先的任何深度。这些查询通常带有传递闭包的性质。如果没有递归，计算递归定义关系所需的迭代必须写在数据库外部。
- en: Has to be written in code in some fashion。 Now we saw that the basic functionality
    of SQL recursion is linear recursion。 where we only have one instance of the recursively
    defined relation in the query defining the relation。 We can write a lot with linear
    recursion。 It's very expressive and can express most of the natural queries we
    might want to do in recursive SQL。 But there is extended functionality。 There's
    nonlinear recursion。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 必须以某种形式写成代码。我们已经看到，SQL递归的基本功能是线性递归，其中查询中只会有一个递归定义的关系实例来定义关系。我们可以用线性递归写很多内容，它非常具有表现力，能够表达我们可能希望在递归SQL中执行的大多数自然查询。但是，SQL还有扩展功能，存在非线性递归。
- en: We saw that nonlinear recursion can lead to nicer looking queries and can converge
    faster。 but it's actually more difficult to implement efficiently。 And then there's
    mutual recursion where R1 here might be defined in terms of R2。 which itself is
    defined in terms of R1。 And we saw one interesting example where we'd like to
    use mutual recursion。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到，非线性递归可以生成更简洁的查询，且收敛速度更快，但实际上更难以高效实现。然后是互递归，其中R1可能是基于R2定义的，而R2又是基于R1定义的。我们看到一个有趣的例子，在其中我们希望使用互递归。
- en: where it was appropriate。 Finally in terms of what's disallowed， recursive subqueries。
    by that I mean referencing the recursively defined relation in a subquery is actually
    in the SQL standard。 not supported by the Postgres system that we were using。
    When a reference in a subquery to a recursively defined relation is negative。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在适当的地方。最后，关于禁止的内容，递归子查询。我的意思是，在子查询中引用递归定义的关系，这在SQL标准中是允许的，但我们使用的Postgres系统并不支持。当在子查询中引用递归定义的关系时，结果是负面的。
- en: sort of like a non-exists or not， and that is disallowed by the SQL standard。
    And we saw that that can lead to non-obvious behavior， non-deterministic final
    results。 And finally aggregation causes complication as well in recursion and
    is disallowed too。 The features that are disallowed really don't come up that
    often naturally。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点像非存在（non-exists）或者否定（not），而这在SQL标准中是被禁止的。我们看到这可能会导致不明显的行为，最终结果可能是非确定性的。最后，聚合也会在递归中引发复杂性，并且同样是被禁止的。那些被禁止的特性其实在自然情况下并不经常出现。
- en: And once again let me just emphasize that the basic functionality of linear
    recursion does allow one to express a lot of really nice queries and does extend
    the expressiveness of the SQL language。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，线性递归的基本功能确实允许我们表达很多非常好的查询，并且扩展了SQL语言的表现力。
- en: '![](img/43771b425ce5b32b6ff32a64b8cd4e6c_11.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/43771b425ce5b32b6ff32a64b8cd4e6c_11.png)'
