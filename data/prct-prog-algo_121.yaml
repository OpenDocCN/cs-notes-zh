- en: 2\.   Recurrence Relations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2\.   递归关系
- en: 原文：[https://aofa.cs.princeton.edu/20recurrence](https://aofa.cs.princeton.edu/20recurrence)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://aofa.cs.princeton.edu/20recurrence](https://aofa.cs.princeton.edu/20recurrence)
- en: This chapter concentrates on fundamental mathematical properties of various
    types of *recurrence relations* which arise frequently when analyzing an algorithm
    through a direct mapping from a recursive representation of a program to a recursive
    representation of a function describing its properties.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章重点讨论各种类型的*递归关系*的基本数学性质，这些关系在通过将程序的递归表示直接映射到描述其属性的函数的递归表示时经常出现。
- en: 2.1 Basic Properties.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.1 基本性质。
- en: Recurrences are classified by the way in which terms are combined, the nature
    of the coefficients involved, and the number and nature of previous terms used.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 递归按照项的组合方式、涉及的系数性质以及使用的先前项的数量和性质进行分类。
- en: '|     recurrence type | typical example |'
  id: totrans-5
  prefs: []
  type: TYPE_TB
  zh: '|     递归类型 | 典型示例 |'
- en: '|     first-order |  |'
  id: totrans-6
  prefs: []
  type: TYPE_TB
  zh: '|     一阶 |  |'
- en: '|         linear | $a_n=na_{n-1}-1$ |'
  id: totrans-7
  prefs: []
  type: TYPE_TB
  zh: '|         线性 | $a_n=na_{n-1}-1$ |'
- en: '|         nonlinear | $a_n=1/(1+a_{n-1})$ |'
  id: totrans-8
  prefs: []
  type: TYPE_TB
  zh: '|         非线性 | $a_n=1/(1+a_{n-1})$ |'
- en: '|     second-order |  |'
  id: totrans-9
  prefs: []
  type: TYPE_TB
  zh: '|     二阶 |  |'
- en: '|         linear | $a_n=a_{n-1}+2a_{n-2}$ |'
  id: totrans-10
  prefs: []
  type: TYPE_TB
  zh: '|         线性 | $a_n=a_{n-1}+2a_{n-2}$ |'
- en: '|         nonlinear | $a_n=a_{n-1}a_{n-2}+\sqrt{a_{n-2}}$ |'
  id: totrans-11
  prefs: []
  type: TYPE_TB
  zh: '|         非线性 | $a_n=a_{n-1}a_{n-2}+\sqrt{a_{n-2}}$ |'
- en: '|         variable coefficients    | $a_n=na_{n-1}+(n-1)a_{n-2}+1$ |'
  id: totrans-12
  prefs: []
  type: TYPE_TB
  zh: '|         变量系数    | $a_n=na_{n-1}+(n-1)a_{n-2}+1$ |'
- en: '|     $t$th order | $a_n=f(a_{n-1},a_{n-2},\ldots,a_{n-t})$ |'
  id: totrans-13
  prefs: []
  type: TYPE_TB
  zh: '|     第$t$阶 | $a_n=f(a_{n-1},a_{n-2},\ldots,a_{n-t})$ |'
- en: '|     full-history | $a_n=n+a_{n-1}+a_{n-2}\ldots + a_1$ |'
  id: totrans-14
  prefs: []
  type: TYPE_TB
  zh: '|     完全历史 | $a_n=n+a_{n-1}+a_{n-2}\ldots + a_1$ |'
- en: '|     divide-and-conquer | $a_n=a_{\lfloor{n/2}\rfloor}+a_{\lceil{n/2}\rceil}+n$
    |'
  id: totrans-15
  prefs: []
  type: TYPE_TB
  zh: '|     分治法 | $a_n=a_{\lfloor{n/2}\rfloor}+a_{\lceil{n/2}\rceil}+n$ |'
- en: '*Calculating values.* Normally, a recurrence provides an efficient way to calculate
    the quantity in question. In particular, the very first step in attacking any
    recurrence is to use it to compute small values in order to get a feeling for
    how they are growing. This can be done by hand for small values, or it is often
    easy to implement a program to compute larger values, as we already saw in Chapter
    1. You can find the Java code referred to in the lecture slides [here](Java).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '*计算数值。* 通常，递归提供了计算所需数量的有效方法。特别是，攻击任何递归的第一步是使用它来计算小值，以了解它们的增长方式。对于小值，可以手动完成，或者通常可以轻松实现一个程序来计算更大的值，就像我们在第1章中已经看到的那样。您可以在讲义幻灯片中找到所提到的Java代码[这里](Java)。'
- en: 2.2 First-Order Recurrences.
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.2 一阶递归。
- en: We can often solve a recurrence relation in a manner analogous to solving a
    differential equations by multiplying by an integrating factor and then integrating.
    Instead, we use a *summation factor* to telescope the recurrence to a sum. Proper
    choice of a summation factor makes it possible to solve many of the recurrences
    that arise in practice. $$\eqalign{ NC_N &= (N+1)C_{N-1} + 2N {\quad\rm for\quad}
    N > 1 {\quad\rm with\quad} C_1 = 2\\ {C_N\over N+1} &= {C_{N-1}\over N} + {2\over
    N+1} \quad({\rm summation\ factor \ }{1\over N(N+1)})\\ &= {C_{N-2}\over N-1}
    + {2\over N} + {2\over N+1}\\ &= 2H_{N+1} - 2\\ }$$
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常可以通过乘以一个积分因子然后积分的方式解决递归关系，类似于解决微分方程。相反，我们使用一个*求和因子*将递归关系变换为一个求和。适当选择求和因子使得能够解决实践中出现的许多递归关系。
    $$\eqalign{ NC_N &= (N+1)C_{N-1} + 2N {\quad\rm for\quad} N > 1 {\quad\rm with\quad}
    C_1 = 2\\ {C_N\over N+1} &= {C_{N-1}\over N} + {2\over N+1} \quad({\rm 求和因子 \
    }{1\over N(N+1)})\\ &= {C_{N-2}\over N-1} + {2\over N} + {2\over N+1}\\ &= 2H_{N+1}
    - 2\\ }$$
- en: Any first-order linear recurrence, with constant or nonconstant coefficients,
    can be transformed to a sum in this way. The problem of solving the recurrence
    is reduced to the problem of evaluating the sum.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 任何具有常数或非常数系数的一阶线性递归都可以通过这种方式转换为一个求和。解决递归的问题被简化为求解求和的问题。
- en: 2.3 Nonlinear First-Order Recurrences.
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.3 非线性一阶递归。
- en: 2.4 Higher-Order Recurrences
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.4 高阶递归
- en: 2.5 Methods for Solving Recurrences
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.5 解决递归的方法
- en: 2.6 Binary Divide-and-Conquer Recurrences and Binary Numbers.
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.6 二进制分治递归和二进制数。
- en: 'Good algorithms for a broad variety of problems have been developed by applying
    the following fundamental algorithmic design paradigm: "Divide the problem into
    two subproblems of equal size, solve them recursively, then use the solutions
    to solve the original problem." Mergesort is a prototype of such algorithms. The
    number of comparisons used by Mergesort is given by the solution to the recurrence
    $$C_N=C_{\lfloor N/2\rfloor} +C_{\lceil N/2\rceil}+N \quad{\rm for}\ N>1{\rm \
    with\ } C_1=0.$$ This recurrence, and others similar to it, arise in the analysis
    of a variety of algorithms with the same basic structure as Mergesort. It is normally
    possible to determine the asymptotic growth of functions satisfying such recurrences,
    but it is necessary to take special care in deriving exact results, primarily
    because of the simple reason that a problem of "size" $N$ cannot be divided into
    equal-sized subproblems if $N$ is odd: the best that can be done is to make the
    problem sizes differ by one. For large $N$, this is negligible, but for small
    $N$ it is noticeable, and, as usual, the recursive structure insures that many
    small subproblems will be involved. The end result is that exact solutions tend
    to have periodicities, sometimes even severe discontinuities, and often cannot
    be described in terms of smooth functions. For Mergesort, the number of compares
    is $$C_N = N\lfloor\lg N\rfloor+2N-2^{\lfloor\lg N\rfloor+1}$$ which can be written
    as $$ C_N = N\lg N + N\theta({1-\{\lg N\}}),$$ where $\theta(x)=1+x-2^x$ is a
    positive function satisfying $\theta(0)=\theta(1)=0$ and $0'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 对于各种问题，通过应用以下基本算法设计范式已经开发出了良好的算法："将问题分解为两个大小相等的子问题，递归求解，然后利用这些解来解决原始问题。" 归并排序是这类算法的原型。
    归并排序使用的比较次数由递归方程的解给出 $$C_N=C_{\lfloor N/2\rfloor} +C_{\lceil N/2\rceil}+N \quad{\rm
    for}\ N>1{\rm \ with\ } C_1=0.$$ 这种递归方程以及类似的其他方程在分析具有与归并排序相同基本结构的各种算法时会出现。 通常可以确定满足这些递归方程的函数的渐近增长，但是在推导精确结果时需要特别小心，主要是因为问题的"大小"为
    $N$ 时，如果 $N$ 是奇数，则无法将问题分解为大小相等的子问题：最好的方法是使问题大小相差一个。 对于大的 $N$，这是可以忽略的，但对于小的 $N$，这是明显的，并且通常情况下，递归结构确保会涉及许多小的子问题。
    最终结果是确切解通常具有周期性，有时甚至有严重的不连续性，并且通常无法用平滑函数来描述。 对于归并排序，比较次数为 $$C_N = N\lfloor\lg
    N\rfloor+2N-2^{\lfloor\lg N\rfloor+1}$$ 可以写成 $$ C_N = N\lg N + N\theta({1-\{\lg
    N\}}),$$ 其中 $\theta(x)=1+x-2^x$ 是一个满足 $\theta(0)=\theta(1)=0$ 和 $0
- en: '![](../Images/326cc65ab39c976b450a08cdf6df28ec.png)'
  id: totrans-25
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![](../Images/326cc65ab39c976b450a08cdf6df28ec.png)'
- en: The top curve is $1-\{\lg N\}$ and the middle curve is $1-2^{1-\{\lg N\}}$.
    Adding these together gives $$2-\{\lg N\}-2^{1-\{\lg N\}} = \theta({1-\{\lg N\}}),$$
    a continuous but periodic function. Such situations arise frequently in the analysis
    of algorithms, and this result indicates the challenge of precisely characterizing
    the performance of some algorithms because periodic behavior of this sort is inherent.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 顶部曲线是 $1-\{\lg N\}$，中间曲线是 $1-2^{1-\{\lg N\}}$。将它们相加得到 $$2-\{\lg N\}-2^{1-\{\lg
    N\}} = \theta({1-\{\lg N\}}),$$ 一个连续但周期性的函数。 在算法分析中经常出现这种情况，这个结果表明准确描述某些算法性能的挑战，因为这种周期性行为是固有的。
- en: 2.7 General Divide-and-Conquer Recurrences.
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 2.7 一般的分治递归方程。
- en: 'More generally, efficient algorithms and upper bounds in complexity studies
    are very often derived by extending the divide-and-conquer algorithmic design
    paradigm along the following lines: "Divide the problem into smaller (perhaps
    overlapping) subproblems, solve them recursively, then use the solutions to solve
    the original problem." A variety of "divide-and-conquer" recurrences arise that
    depend on the number and relative size of subproblems, the extent to which they
    overlap, and the cost of recombining them for the solution. It is normally possible
    to determine the asymptotic growth of functions satisfying such recurrences, but,
    as above, the periodic and fractal nature of functions that are involved make
    it necessary to specify details carefully.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般地，高效的算法和复杂度研究中的上界往往通过扩展分治算法设计范式得出，其思路如下："将问题分解为更小（可能重叠）的子问题，递归求解，然后利用这些解来解决原始问题。"
    会出现各种"分治"递归方程，这些方程取决于子问题的数量和相对大小，它们之间的重叠程度，以及重新组合它们以解决问题的成本。通常可以确定满足这些递归方程的函数的渐近增长，但是，正如上文所述，所涉及的函数的周期性和分形性质使得有必要仔细说明细节。
- en: Selected Exercises
  id: totrans-29
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 选定练习
- en: '2.11'
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2.11'
- en: 'Solve the recurrence $$na_n = (n-2)a_{n-1} + 2\quad{\rm for}\ n>1{\rm \ with\
    } a_1=1.$$ *Solution.* Use the summation factor $n-1$: $$\eqalign{ n(n-1)a_n &=
    (n-1)(n-2)a_{n-1} + 2(n-1)\\ &= (n-2)(n-3)a_{n-2} + 2(n-2) + 2(n-1)\\ &= 2(1 +
    2 + \ldots + n-1)\\ &= n(n-1)\\ a_n &= 1\quad{\rm for}\ n\ge 1\\ }$$'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '解决递归方程 $$na_n = (n-2)a_{n-1} + 2\quad{\rm for}\ n>1{\rm \ with\ } a_1=1.$$
    *解法.* 使用求和因子 $n-1$: $$\eqalign{ n(n-1)a_n &= (n-1)(n-2)a_{n-1} + 2(n-1)\\ &= (n-2)(n-3)a_{n-2}
    + 2(n-2) + 2(n-1)\\ &= 2(1 + 2 + \ldots + n-1)\\ &= n(n-1)\\ a_n &= 1\quad{\rm
    for}\ n\ge 1\\ }$$'
- en: '*Easier solution.* Compute $a_2=1$, think for a moment, and then prove by induction
    that $a_n=1$ for all $n\ge 1$.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '*更简单的解法.* 计算 $a_2=1$，思考片刻，然后通过归纳证明对所有 $n\ge 1$ 都有 $a_n=1$。'
- en: '2.12'
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2.12'
- en: Solve the recurrence $$a_n = 2a_{n-1} + 1\quad{\rm for}\ n>1{\rm \ with\ } a_1=1.$$
    *Hint.* Divide both sides by $2^n$.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 解决递归方程 $$a_n = 2a_{n-1} + 1\quad{\rm for}\ n>1{\rm \ with\ } a_1=1.$$ *提示.*
    将两边除以 $2^n$。
- en: '2.13'
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2.13'
- en: Solve the recurrence $$a_n = {n\over n+1}a_{n-1} + 1\quad{\rm for}\ n>0{\rm
    \ with\ } a_0=1.$$
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 解决递归方程 $$a_n = {n\over n+1}a_{n-1} + 1\quad{\rm for}\ n>0{\rm \ with\ } a_0=1.$$
- en: '2.15'
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2.15'
- en: Solve the recurrence $$na_n = (n+1)a_{n-1} + 2n\quad{\rm for}\ n>0{\rm \ with\
    } a_0=0.$$
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 解决递归方程 $$na_n = (n+1)a_{n-1} + 2n\quad{\rm for}\ n>0{\rm \ with\ } a_0=0.$$
- en: '2.17'
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2.17'
- en: '[Yao] ("Fringe analysis of 2-3 trees") Solve the recurrence $$A_N = A_{N-1}-{2A_{N-1}\over
    N} + 2\Bigl(1-{2A_{N-1}\over N}\Bigr) \quad{\rm for}\ N>1{\rm \ with\ } A_1=1.$$
    This recurrence describes the following random process: A set of $N$ elements
    collect into "2-nodes" and "3-nodes." At each step each 2-node is likely to turn
    into a 3-node with probability $2/N$ and each 3-node is likely to turn into two
    2-nodes with probability $3/N$. What is the average number of 2-nodes after $N$
    steps?'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '[姚] ("2-3树的边缘分析") 解决递归关系式 $$A_N = A_{N-1}-{2A_{N-1}\over N} + 2\Bigl(1-{2A_{N-1}\over
    N}\Bigr) \quad{\rm for}\ N>1{\rm \ with\ } A_1=1.$$ 这个递归描述了以下随机过程：一组 $N$ 个元素聚集成"2-节点"和"3-节点"。在每一步中，每个2-节点有可能以
    $2/N$ 的概率变成3-节点，每个3-节点有可能以 $3/N$ 的概率变成两个2-节点。经过 $N$ 步后，平均有多少个2-节点？'
- en: '2.69'
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2.69'
- en: Plot the periodic part of the solution to the recurrence $$a_N = 3a_{\lfloor
    N/3\rfloor} + N \quad{\rm for}\ N>3{\rm \ with\ } a_1=a_2=a_3=1.$$ for $1\le N\le
    972$.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 绘制递归解的周期部分 $$a_N = 3a_{\lfloor N/3\rfloor} + N \quad{\rm for}\ N>3{\rm \ with\
    } a_1=a_2=a_3=1.$$ 对于 $1\le N\le 972$。
- en: '2.71'
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2.71'
- en: Give an asymptotic solution to the recurrence $$a(x) = \alpha a_{x/\beta} +
    2^x \quad{\rm for}\ x>1{\rm \ with\ } a(x)=0{\rm \ for\ } x\le 1.$$
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 给出递归关系的渐近解 $$a(x) = \alpha a_{x/\beta} + 2^x \quad{\rm for}\ x>1{\rm \ with\
    } a(x)=0{\rm \ for\ } x\le 1.$$
- en: '2.73'
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '2.73'
- en: Give an asymptotic solution to the recurrence $$a_N = a_{N/2} + a_{N/4} + N
    \quad{\rm for}\ N>2{\rm \ with\ } a_1=a_2=a_3=1.$$
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 给出递归关系式的渐近解 $$a_N = a_{N/2} + a_{N/4} + N \quad{\rm for}\ N>2{\rm \ with\ }
    a_1=a_2=a_3=1.$$
- en: Review Questions
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 复习问题
- en: Q2.1
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q2.1
- en: Solve the recurrence $na_n = (n-3)a_{n-1} + n\quad{\rm for}\ n\ge 3{\rm \ with\
    } a_0=a_1=a_2=0.$
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 解决递归关系式 $na_n = (n-3)a_{n-1} + n\quad{\rm for}\ n\ge 3{\rm \ with\ } a_0=a_1=a_2=0.$
- en: Q2.2
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q2.2
- en: Which of the following is true of the number of compares used by Mergesort to
    sort $N$ items? (*a*) Order of growth is $N lg N$ (*b*) Exactly $N lg N$ when
    $N$ is a power of 2 (*c*) Is equal to the number of 1s in the binary representation
    of the numbers < $N$ (*d*) Has periodic behavior (*e*) Is less than $N lg N +
    N/4$ for all $N$
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 以下哪项关于归并排序用于排序 $N$ 个项目时所需的比较次数是正确的？ (*a*) 增长阶为 $N lg N$ (*b*) 当 $N$ 是2的幂时恰好为
    $N lg N$ (*c*) 等于小于 $N$ 的数字的二进制表示中的1的数量 (*d*) 具有周期性行为 (*e*) 对于所有 $N$ 都小于 $N lg
    N + N/4$
- en: Q2.3
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q2.3
- en: 'Consider the following recurrences:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下递归关系：
- en: '**A. **$(n+1)a_{n+1} = (n-2)a_n + n $'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**A. **$(n+1)a_{n+1} = (n-2)a_n + n $'
- en: '**B. **$a_{n+1} = 4a_{n-1} + (n+1)(n+2) $'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**B. **$a_{n+1} = 4a_{n-1} + (n+1)(n+2) $'
- en: '**C. **$na_n = 4a_{n-1} + (n+1)(n+2) $'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**C. **$na_n = 4a_{n-1} + (n+1)(n+2) $'
- en: '**D. **$na_{n+1} = (n+4)a_{n-1} + n+4 $'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '**D. **$na_{n+1} = (n+4)a_{n-1} + n+4 $'
- en: '**E. **$(n+1)a_{n+1} = (n+2)a_n + n $'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '**E. **$(n+1)a_{n+1} = (n+2)a_n + n $'
- en: 'Match each recurrence with an expression from this list that could be used
    to make it telescope: $(n+1)(n+2)(n+3) $, $n(n+2)(n+4) $, $2^{n+1} $, $(n+1)!
    $, $(n-1)!/4^n $, $n(n-1) $, $(n+1)(n+2) $.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将每个递归关系与此列表中可用于使其变为望远镜的表达式进行匹配：$(n+1)(n+2)(n+3) $, $n(n+2)(n+4) $, $2^{n+1}
    $, $(n+1)! $, $(n-1)!/4^n $, $n(n-1) $, $(n+1)(n+2) $.
- en: Q2.4
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q2.4
- en: (R. Brott) Consider the family of recurrences $a_n = ba_{n-1} - a_{n-2}$ for
    $n>1$ with $a_0=0$ and $a_1=1$. For which integer values of $b$ does this sequence
    oscillate?
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: (R. Brott) 考虑递归族 $a_n = ba_{n-1} - a_{n-2}$，其中 $n>1$，$a_0=0$，$a_1=1$。对于哪些整数值的
    $b$，这个序列会振荡？
