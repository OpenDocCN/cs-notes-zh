- en: 哈佛 CS50-WEB ｜ 基于Python ／ JavaScript的Web编程(2020·完整版) - P9：L3- Django网络编程 1 (web应用，http，路由)
    - ShowMeAI - BV1gL411x7NY
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈佛CS50-WEB｜基于Python／JavaScript的Web编程（2020·完整版）- P9：L3- Django网络编程 1（web应用，http，路由）-
    ShowMeAI - BV1gL411x7NY
- en: '![](img/f5fbdb40944f8266f6c7ca9c36676021_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5fbdb40944f8266f6c7ca9c36676021_0.png)'
- en: '[Music]，okay welcome back everyone to web，programming with Python and JavaScript。so
    thus far in the course we''ve taken a，look at a couple of different。technologies
    we took a look at HTML and，CSS which are languages we can use to。describe the
    structure of a web page and，then style it appropriately and then we。'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[音乐]，欢迎大家回到使用Python和JavaScript的网页编程课程。在这门课程中，我们已经看了一些不同的技术，我们查看了HTML和CSS，这些语言可以用来描述网页的结构，并适当地进行样式设置。'
- en: also took a look at Python a programming，language that we could use to get。programming
    features features like loops，and conditions and variables and。functions and more
    and what we're going，to do today is introduce Django which is。going to combine
    these two Django is a，Python web framework which is going to。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还查看了Python，这是一种可以用来获取编程特性的编程语言，如循环、条件、变量和函数等。今天我们要介绍Django，它将结合这两者。Django是一个Python网络框架，可以让我们编写能够动态生成HTML和CSS的Python代码，最终构建动态网络应用。
- en: allow us to write Python code that is，able to dynamically generate HTML and。CSS
    ultimately allowing us to build a，dynamic web application so what is this。now
    going to enable us to do that we，weren't able to previously do using just。HTML
    and CSS well using HTML and CSS the，web pages that we created were static。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 这将使我们能够做一些以前仅用HTML和CSS无法做到的事情。使用HTML和CSS时，我们创建的网页是静态的。
- en: web pages they were the same and every，time you visited the web page the page。you
    were looking at was identical but，ultimately if you think about websites。you interact
    with on a day to day basis，say like the New York Times for example。it's not the
    case that every time you go，to the New York Times home page you're。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 每当你访问网页时，页面是相同的，但如果你考虑一下日常使用的网站，比如纽约时报，这种情况并不是每次你访问纽约时报主页时都是相同的。
- en: seeing the exact same HTML it changes，the next day you might see the new date。you
    might see the next day's articles，whenever someone comments on an article。you
    can see those comments and you can，see how many people have commented on an。article
    for example and it's probably，not the case that someone is sitting。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 看到的正是相同的HTML，第二天你可能会看到新的日期，你可能会看到第二天的文章，无论何时有人对文章发表评论，你都可以看到这些评论，并看到有多少人对某篇文章发表评论，而这种情况可能并不是有人在那儿。
- en: there updating the HTML of the New York，Times website every time something。changes
    but rather more likely there is，some program may be written Python may。be written
    in some other language that，is dynamically generating that HTML and。CSS and allowing
    the web application to，respond based on how users are。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 每次有变化时，他们并不会更新纽约时报网站的HTML，而更可能是有某个程序（可能用Python或其他语言编写）动态生成HTML和CSS，使得网络应用能够根据用户的互动进行响应。
- en: interacting with it and this is，ultimately what we're going to be trying。to
    create using this django web，framework we're going to be creating。software that's
    going to run on a web，server such that clients running in。their web browser can
    make requests to，our web server and our server is going。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与其互动，这就是我们最终要通过这个Django网络框架创建的。我们将创建在网络服务器上运行的软件，使得运行在浏览器中的客户端可以向我们的网络服务器发出请求。
- en: to respond back with some sort of，response and so how does this process。actually
    happen well ultimately it boils，down to this protocol HTTP otherwise。known as
    the hypertext Transfer Protocol，which is the protocol for how messages。are going
    to be sent back and forth over，the Internet in this case you can think。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 要进行某种回应，这个过程实际上是如何发生的，最终归结于这个协议HTTP，通常被称为超文本传输协议，这就是在互联网上消息如何来回发送的协议。你可以这样理解。
- en: about this as a computer some user which，we might call the client and then our。server
    which is going to be the server，that is going to contain our web。application we
    are going to write，a web application that is going to run。on this server and clients
    are going to，make requests to that server the server。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以看作是计算机中某个用户（我们称之为客户端）和我们的服务器（它将包含我们的网络应用）之间的关系。我们将编写一个在该服务器上运行的网络应用，客户端将向该服务器发出请求。
- en: is going to process that request and，then return some sort of response that。request
    might look a little something，like this underneath the hood it might。start with
    the word get get is just an，example of a request method a way that。you might try
    to get a page so get just，means I would like to get a particular。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 将处理该请求，并返回某种响应，该请求可能看起来像这样，从内部来看，可能以“get”一词开始，get只是请求方法的一种示例，是你可能尝试获取页面的一种方式，get仅意味着我想获取特定的。
- en: page in this case the page I'm trying to，get is the slash page just denoting
    the。root of the website usually the default。![](img/f5fbdb40944f8266f6c7ca9c36676021_2.png)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我试图获取的是根页面，仅表示网站的根目录，通常是默认的。![](img/f5fbdb40944f8266f6c7ca9c36676021_2.png)
- en: page for the website HTTP 1-1 is just，the version of HTTP that we're using and。the
    host is what URL we're trying to，access the web page for so example。com。or some
    other website for example that I，might be trying to make a request to so。this
    request ultimately gets sent by my，web browser when I type in a URL and。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 网站的页面HTTP 1.1只是我们正在使用的HTTP版本，主机是我们试图访问的网页的URL，比如example.com或其他我可能试图请求的网站，所以这个请求最终会由我的网络浏览器在我输入URL时发送。
- en: press return for example the server，processes that request and then gives。back
    some sort of response and the，response will generally look a little，something
    like this。beginning with the HTTP version 1。1 or，in some cases - version 2 now
    and then。some sort of response code 200 is a，response code that just means okay。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 按回车键，例如，服务器处理该请求，然后返回某种响应，响应通常看起来会像这样，以HTTP版本1.1或在某些情况下，版本2开头，然后是某种响应码，200是表示正常的响应码。
- en: everything was okay the page was，returned successfully for example and。here
    on the second line we see content，type text slash HTML which just means。the format
    of the data that's coming，back in this response is HTML data its。HTML data that
    the user's web browser on，the client should then render as HTML。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 一切正常，页面成功返回，例如，在第二行我们看到内容类型为text/html，这仅意味着返回的响应数据格式为HTML数据，用户的web浏览器在客户端应将其呈现为HTML。
- en: for example and there are other content，types as well and other information
    that。comes back in that response but the key，idea is just thinking about the web
    in。terms of requests and responses one user，makes a request to get a particular。webpage
    and what they get back is a，response like this that hopefully。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，还有其他类型的内容以及其他信息会在响应中返回，但关键思想是将网页视为请求和响应的关系，用户发起请求以获取特定的网页，而他们收到的则是这样的响应，希望能够。
- en: includes status code 200 which means ok，but there are a number of other status。codes
    as well some of the more popular，200 means okay you've probably seen 404。the status
    code that means not found if，you try to request a web page that。doesn't exist
    for example others you，might see your 301 moved permanently。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 包括状态码200，意味着正常，但还有许多其他状态码，比较常见的有200，表示正常，可能你见过404，表示未找到，如果你尝试请求一个不存在的网页，比如说，其他你可能见到的状态码还有301，表示永久移动。
- en: that often happens if you're redirected，from one website to another for example。we'll
    take a look at an example of that，shortly 403 generally means forbidden。you're
    trying to access a page you're，not supposed to have access to and 500。usually
    refers to some sort of internal，server error usually meaning that。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你从一个网站重定向到另一个网站，这种情况经常发生，例如，我们将很快看看一个例子，403通常意味着禁止，你试图访问一个不该访问的页面，而500通常指的是某种内部服务器错误，通常意味着。
- en: whoever was writing the server maybe our，Django web application has。something
    that's buggy in it and we，might need to go back and figure out。where that bug
    is in order to fix it and，again there are other status codes as。well but these
    are some of the most，common that we're going to be seeing and。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 编写服务器的人，也许我们的Django网络应用程序存在一些bug，我们可能需要回过头去找出这个bug所在，以便修复它，同样，还有其他状态码，但这些是我们将会看到的一些最常见的状态码。
- en: interacting with as we go about building，web applications using Django。so Django
    is a web framework it's a set，of tools it has already built for us。that's just
    going to make it easy to get，started by writing Python code in order。to design
    a fully fledged web，application by taking care of some of。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们使用Django构建web应用程序时进行交互，Django是一个web框架，它为我们预先构建了一系列工具，这将使我们能够通过编写Python代码来轻松入门，以设计一个功能齐全的web应用程序，并处理一些事情。
- en: the stuff that most web pages all have，to do such that we can focus on the。interesting
    logic of building our own，web applications，so the first step you'll need to do
    in。order to use Django is to install it if，you're using Python you may be familiar。with
    pip the Python package manager。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数网页都有的一些东西，这样我们可以专注于构建我们自己网络应用程序的有趣逻辑。因此，您在使用Django之前需要做的第一步是安装它。如果您使用的是Python，您可能对pip（Python包管理器）很熟悉。
- en: '![](img/f5fbdb40944f8266f6c7ca9c36676021_4.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5fbdb40944f8266f6c7ca9c36676021_4.png)'
- en: which makes it easy to be able to，install new packages and the first thing。we'll
    probably want to do is install at，Django and here we're gonna be using。Python
    3 so you might need to specify，pip 3 and install Django to install。Django on your
    system and after you do，we can run a command to be able to。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它使得安装新包变得简单，我们可能想做的第一件事就是安装Django，在这里我们将使用Python 3，因此您可能需要指定`pip 3`并安装Django，以在您的系统上安装Django。在您完成后，我们可以运行一个命令。
- en: create a Django project and that command，looks something like this。Django -
    admin start project followed by，the name of the project that we would。like to
    create when we run this command，Django is automatically going to create。some starter
    files for us just to get，started with the process of building a。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个Django项目，该命令看起来像这样。`Django - admin start project`，后面跟着我们想创建的项目名称。当我们运行这个命令时，Django将自动为我们创建一些入门文件，以便开始构建过程。
- en: web application so let's try creating a，project now I'll go ahead and go into
    my。terminal window and what I'm going to do，is type that command I'm gonna type。Django
    admin and then start project and，then I need to give this project a name。and I'm
    just going to give this project，a name of lecture 3 for example you can。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 网络应用程序，所以现在让我们尝试创建一个项目。我将进入我的终端窗口，接下来我会输入那个命令，我将输入`Django admin`，然后`start project`，接着我需要给这个项目命名，我将这个项目命名为“lecture
    3”。
- en: name the project whatever you'd like and，when that happens if I type ls' what
    I。see is that a lecture 3 directory or，folder has been created for me by Django。![](img/f5fbdb40944f8266f6c7ca9c36676021_6.png)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以将项目命名为您喜欢的任何名称，当那发生时，如果我输入`ls`，我看到的是Django为我创建了一个名为“lecture 3”的目录或文件夹。！[](img/f5fbdb40944f8266f6c7ca9c36676021_6.png)
- en: and if I go ahead and open this up，inside of my text editor we can take a。![](img/f5fbdb40944f8266f6c7ca9c36676021_8.png)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我继续打开它，在我的文本编辑器中，我们可以看一下。！[](img/f5fbdb40944f8266f6c7ca9c36676021_8.png)
- en: look at what files are inside of this，lecture 3 directory so actually I'll go。![](img/f5fbdb40944f8266f6c7ca9c36676021_10.png)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 看看这个“lecture 3”目录中有哪些文件，所以实际上我会。！[](img/f5fbdb40944f8266f6c7ca9c36676021_10.png)
- en: ahead and CD into lecture 3 and open it，up and what we see inside of lecture
    3。![](img/f5fbdb40944f8266f6c7ca9c36676021_12.png)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来进入“lecture 3”并打开它，我们在“lecture 3”中看到的内容是！[](img/f5fbdb40944f8266f6c7ca9c36676021_12.png)
- en: are a couple of files that were given，just to get started so there are a。couple
    files not all of them are really，interesting to us right now but first。and foremost
    manage PI is a file that，Django is going to create for us will。generally not need
    to touch that file，but we're going to use the manage by。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一些文件供我们入门，所以有几个文件，目前对我们来说并不是所有的文件都很有趣，但最重要的是`manage.py`是Django将为我们创建的一个文件。我们通常不需要修改该文件，但我们将使用它。
- en: file to be able to execute commands on，this Django project，and we'll see a couple
    of examples of。that now and a couple of examples of，that in future lectures as
    well and then。the other important one that we'll be，looking at is settings dot
    pi which just。contains important configuration，settings for our Django application。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可以在此Django项目上执行命令的文件，我们将看到一些示例，现在以及未来的讲座中也会有一些示例，然后我们将要查看的另一个重要文件是`settings.py`，它包含了我们Django应用程序的重要配置设置。
- en: settings dot pi comes preloaded with a，couple of default settings but we might。want
    to change those settings to be able，to add features to our application as。well
    or make some modifications to how，the application behaves and then the。other important
    file that's pre created，for us now here is urls dot pi and you。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '`settings.py`预加载了一些默认设置，但我们可能想更改这些设置，以便为我们的应用程序添加功能，或者对应用程序的行为进行一些修改。另一个为我们预创建的重要文件是`urls.py`。'
- en: can think of urls pi as a sort of table，of contents for our web application
    then。on any given web application on a，website there are a number of different。URLs
    or routes that you can visit on，Google for example you can visit slash。search
    or slash images and URLs pi is，just going to be a table of contents of。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将 URLs PI 视为我们网页应用的内容目录。在任何给定的网页应用上，有许多不同的 URL 或路由可供访问。例如在 Google 上，你可以访问
    /search 或 /images，而 URLs PI 就是一个内容目录。
- en: all of the URLs on my web application，that I can ultimately visit and so if。I'd
    like to try running this web，application just to see what it looks，the terminal。I'll
    run Python manage PI followed by a，command and the command is called run。server
    and so this is generally how，we'll use manager op I will run manage。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以最终访问的所有 URL，因此如果我想尝试运行这个网页应用，只是想看看它在终端中是什么样子。我会运行 `Python manage.py`，后面跟一个命令，这个命令叫做
    runserver，这通常是我们使用 manage.py 的方式。
- en: PI followed by an argument specifying，what command we would like to run and。python
    managed by run server means go，ahead and actually run this web server。if I do
    this I'm now running this web，server locally and I see a bunch of。debugging output
    but the interesting，point to me is that it says down here。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '`manage.py` 后面跟一个参数，指定我们想要运行什么命令。`python manage.py runserver` 的意思是开始实际运行这个网页服务器。如果我这样做，我现在就在本地运行这个网页服务器，并看到一堆调试输出，但对我来说有趣的是它在下面说。'
- en: starting development server at HTTP，colon slash slash one 27001 colon 8000。and
    so this is where my web application，is currently running one 27001 is an IP。address
    and address on the internet that，just refers to my local computer the。computer
    I'm looking at right now so，only I can access this not anyone else，on the Internet
    and 8。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在 HTTP://127.0.0.1:8000 启动开发服务器。所以这就是我的网页应用当前运行的地方，127.0.0.1 是一个 IP 地址，指向我的本地计算机。我现在看到的计算机，只有我可以访问，而其他人无法在互联网上访问。
- en: 000 is what we，would call a port number it just refers，to what type of service
    is being run and。you might have multiple different，internet services running on
    different。ports in this case our django，application is running on port 8000 so。![](img/f5fbdb40944f8266f6c7ca9c36676021_14.png)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 000 是我们所称的端口号，它指的是正在运行的服务类型。你可能在不同的端口上运行多个不同的互联网服务。在这种情况下，我们的 Django 应用正在 8000
    端口上运行，所以。
- en: if i copy this URL and just go ahead and，go into my web browser and paste that。URL
    in what i see is just Django's，default page to say our installation of。django
    works and this now is the default，page that django is going to give to us。to say
    the Django has been loaded for，this web application and we can now。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我复制这个 URL，然后直接进入我的网页浏览器并粘贴那个 URL，我看到的就是 Django 的默认页面，表明我们的 Django 安装正常工作。这现在是
    Django 将提供给我们的默认页面，说明 Django 已经为这个网页应用加载完毕。
- en: '![](img/f5fbdb40944f8266f6c7ca9c36676021_16.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5fbdb40944f8266f6c7ca9c36676021_16.png)'
- en: actually start to begin building this，web application，by adding the features
    we want to it and。so what we've created here is what we，call a Django project
    and in terms of。the way a Ginga project is structured is，that every Django project
    generally。consists of one or more Django，applications so one project may have。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上开始构建这个网页应用，添加我们想要的功能。因此，我们在这里创建的是一个 Django 项目，就项目的结构而言，每个 Django 项目通常由一个或多个
    Django 应用组成，所以一个项目可能包含。
- en: multiple applications within it and the，reason for this division is if you think。about
    big websites oftentimes a big，website a big project has multiple。different apps
    that are sort of separate，services that operate within it Google。for example has
    Google search but also，Google Images and Google News and Google。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在它内部有多个应用，之所以有这样的划分，是因为如果你考虑大型网站，往往一个大网站或项目有多个不同的应用，分别作为独立的服务在其中运行。例如，Google
    有 Google 搜索、Google 图片和 Google 新闻。
- en: Maps where you can think of each of，those individual services as a separate。app
    oh under one larger project like，Google for example or Amazon's web site。for instance
    might be one big project，that is a couple of different apps。within it one app
    for shopping maybe and，one application for Amazon's video。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 可以把每一个独立的服务看作是一个单独的应用，归属于一个更大的项目，比如 Google，或者像亚马逊的网站。举个例子，可能是一个大型项目，其中包含几个不同的应用，一个用于购物，另一个用于亚马逊的视频。
- en: service for example and so Django comes，pre-loaded with this ability to take
    a。project and divide it into multiple，distinct apps maybe for simpler apps。we're
    only going to have a project that，has one app inside of it instead of。multiple
    but it has the ability to allow，us to create these separate apps that。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Django 自带了将项目划分为多个独立应用程序的功能，也许对于简单的应用程序，我们只会有一个包含一个应用程序的项目，而不是多个，但它具有允许我们创建这些独立应用程序的能力。
- en: have different capacities so if we want，to get started with Django the first。thing
    we'll need to do after we create a，project is create a django app and so，terminal。i'll
    go ahead and exit out of this，server by pressing ctrl C to say I would。like to
    exit stop running the server so，now if I go back to that URL and refresh。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有不同的功能，因此如果我们想开始使用 Django，在创建项目之后，我们首先需要创建一个 Django 应用程序，因此在终端中，我会通过按 ctrl
    C 退出这个服务器，表示我想退出并停止运行服务器，所以现在如果我返回那个 URL 并刷新。
- en: it it won't work because the jenga，server is no longer running but I'll run。the
    command Python managed up I start，app and then the name of the app that I。would
    like to create and for our very，first app I'll just call this app hello。for example
    so I've now created one，Django project called lecture 3 and。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 它不会工作，因为 jenga 服务器不再运行，但我会运行命令 Python managed up I start，应用程序名称是我想创建的，作为我们第一个应用程序，我将其称为
    hello。例如，所以我现在创建了一个名为 lecture 3 的 Django 项目。
- en: inside of which I've created the very。![](img/f5fbdb40944f8266f6c7ca9c36676021_18.png)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建的服务示例是这样的。![](img/f5fbdb40944f8266f6c7ca9c36676021_18.png)
- en: first app that I've now called hello and，so if we take a look at our files now。you'll
    see that it in addition to a，lecture 3 directory which existed before。we also
    now have a hello directory the，Django created for us that is going to。contain
    the information needed for the，hello app to work and there are a number。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在称为 hello 的第一个应用程序，因此如果我们现在查看我们的文件，你会看到除了之前存在的 lecture 3 目录外，我们现在还有一个 Django
    为我们创建的 hello 目录，它将包含 hello 应用程序运行所需的信息，并且有很多。
- en: of files again that are generated by，default we're not going to look at all。of
    them today we're going to focus，primarily on views dot pi we'll see why。in a moment
    which is going to be the，file that lets us describe what it is。the user sees when
    they visit a，particular route for example where we。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 默认生成的文件，我们今天不会查看所有这些文件，我们将主要关注 views.py，稍后会说明原因，它将是让我们描述用户在访问特定路由时看到的内容的文件，例如。
- en: can decide what gets rendered to the，and the other files we'll take a look at。over
    the course of this term taking a，look at what additional features Django，has to
    offer。so we've now created this hello app that，we would like to install into this。project
    and in order to install it we，need to go into the settings for this。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 可以决定渲染到的内容，以及其他文件，我们将在本学期的过程中查看。看看 Django 还提供了哪些额外功能。因此，我们现在已经创建了这个 hello 应用程序，我们希望将其安装到这个项目中，为了安装它，我们需要进入这个项目的设置。
- en: particular Django project so if I go，into the lecture 3 directory and open up。settings
    dot PI what I'll see here is a，big file all created for me by Django I。didn't
    write any of this code but this，is all just the default configuration。for a Django
    project and if you scroll，down somewhere there you'll see a。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 特定的 Django 项目，所以如果我进入 lecture 3 目录并打开 settings.py，我在这里看到的是一个由 Django 为我创建的大文件。我没有写任何代码，这只是
    Django 项目的默认配置，如果你向下滚动到某个地方，你会看到。
- en: variable called installed apps which is，where Django configures what apps are。installed
    on this project and there are，a whole bunch of individual apps that。are installed
    by default that are just，created by Django one for example。manages sessions which
    we'll take a look，at a little bit later but if I want to。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个叫做 installed apps 的变量，这是 Django 配置在这个项目中安装了哪些应用程序的地方，还有很多由 Django 默认安装的单独应用程序，例如，其中一个管理会话，我们稍后会查看，但如果我想要。
- en: add my new app that I've just created，called hello to these installed apps。I'll
    go ahead and just add to this list，of strings this installed apps variable，I'll
    just add hello。and so now Hello is going to be an，installed app on this particular
    Django。project so now what I'd like to do is，actually make this app this hello
    app do。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 添加我刚刚创建的新应用程序，称为 hello 到这些已安装的应用程序中。我会继续将 hello 添加到这个已安装应用程序变量的字符串列表中。因此，现在
    Hello 将成为这个特定 Django 项目中的一个已安装应用程序，所以我现在想做的是，实际上让这个 hello 应用程序工作。
- en: something and display something when I，try and visit a particular route for。example
    so how can I go about doing that，well let's go ahead and go into the。Hello directory
    and let's take a look at，views dot PI inside of my hello app so。here's the default
    file I get four views，PI I see a comment that's given to me。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，当我尝试访问特定路由时显示一些内容。我该如何去做呢？好吧，让我们进入Hello目录，看看我hello应用中的views.py。这里是我得到的默认文件，四个views.py，我看到有一个注释给了我。
- en: that by default that says create your，views here and you can think of each。view
    as something the user might want to，see so let's go ahead and just create a。default
    view and in order to create a，view in Django we're going to define a。function
    so this function I'll just call，index this function by convention takes。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，这个文件上写着“在这里创建你的视图”，你可以将每个视图视为用户可能想要看到的内容。因此，让我们创建一个默认视图，为了在Django中创建一个视图，我们将定义一个函数，这个函数我将称为index，这个函数按惯例接受。
- en: as argument a request argument and this，is going to be an argument that's going。to
    represent the HTTP request that the，user made in order to access our web。server
    so if we want information about，that request we can look inside of this。request
    object to get access to some，other data and we'll take a look at that。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 作为参数一个请求参数，这将是一个代表用户为访问我们的网页服务器而发出的HTTP请求的参数。如果我们想获取关于该请求的信息，可以查看这个请求对象，以访问一些其他数据，我们也会稍后看看。
- en: momentarily too but now what would I，like for this request to do well what I。want
    to do for now is let's just do，something simple and return an HTTP，response of
    hello。world for example now HTTP response is a，special class created by Jango
    and so if。I want to use it I'll generally need to，import it and so Jango is going
    to give。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 但我希望这个请求做什么呢？我现在想做的事情是简单地返回一个“hello world”的HTTP响应。HTTP响应是Django创建的一个特殊类，因此如果我想使用它，通常需要导入它。Django将提供。
- en: us a lot of features that we might want，to use in our web applications but if
    we。want to use them we generally have to，import them first and it just so happens。and
    I only know this from reading，Django's documentation that I can。include a line
    like this from Jango HTTP，import HTTP response to say I would like。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有很多可能想要在网页应用中使用的功能，但如果我们想使用它们，通常需要先导入它们。我只知道这一点是因为阅读了Django的文档，可以通过这一行代码`from
    django.http import HttpResponse`来表示我想要。
- en: to import the ability to give an HTTP，response and now what I have is a。function
    representing my view this，function is called index and what the。index function
    does is it just returns，an HTTP response of hello world and so。this is a response
    but now we need to，tell the app like when should you。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 导入提供HTTP响应的能力，现在我有一个表示我的视图的函数，这个函数叫做index。index函数所做的只是返回一个“hello world”的HTTP响应。因此，这是一个响应，但现在我们需要告诉应用何时。
- en: actually return this response what URL，is the user going to visit and this is。where
    we now begin to create some URL，configuration some sort of setting to。tell Jango
    when a particular URL is，visited then this function should be run。in order to
    return that particular HTTP，response so how'd it do that。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上返回这个响应时，用户将访问哪个URL。这是我们开始创建一些URL配置的地方，一种设置，告诉Django在访问特定URL时应运行哪个函数，以返回该特定的HTTP响应。那么它是如何做到的呢？
- en: well in order to do that we're going to，need to create a URL spy file for this。particular
    app so Jango has one URL spy，file that works for the entire project。but oftentimes
    will have each app，contain its own URLs that PI file just。for the sake of separating
    things out in，two different places such that if we。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，我们需要为这个特定应用创建一个URL配置文件。Django为整个项目有一个URL配置文件，但通常每个应用会有自己的urls.py文件，以便在两个不同的地方分隔内容。
- en: have multiple different apps each of，which is doing something independent we。can
    have each of those individual apps，have its own URL spy file to control。what URLs
    are available for that，particular app so I'll go ahead and go。into the hello directory
    and I'll create，a new file inside of the hello directory。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有多个不同的应用，每个应用都在独立做某事，我们可以让每个单独的应用拥有自己的URL配置文件，以控制该特定应用可用的URL。所以我将进入hello目录，创建一个新的文件。
- en: called URLs PI and what URLs that PI，needs is it needs to define a variable。called
    URL patterns which will be a list，of all of the allowable URLs that can be。accessed
    for this particular app and the，way you create a URL is by first。importing from
    Jango URLs import path，and let's create our first URL I'll say。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 将URLs命名为PI，那么PI需要的是定义一个变量。称为URL模式，这将是一个列表，包含所有允许的URL，可以为这个特定的应用程序访问，创建URL的方式是首先。导入Django
    URLs导入路径，让我们创建第一个URL，我会说。
- en: path and then the first argument here，I'm going to give the empty string to。mean
    no additional argument and we'll，see what that means in just a moment。meaning
    nothing at the end，the route and then the second argument。to path is what view
    should be rendered，when this URL is visited and so if I。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 路径，然后第一个参数，这里我将传递一个空字符串。意味着没有额外的参数，我们很快就会看到这意味着什么。末尾的意思是没有东西，路由，然后第二个参数。路径是当访问此URL时应该渲染的视图，所以如果我。
- en: want to render my index view，recall that in views dot PI over here I。have this
    index function then what I，want to render when someone visits this。URL the empty
    URL is going to be views，dot index views that is represents views。PI that file
    where I've defined all of，my views and index just so happens to be。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 渲染我的索引视图，回想一下在views.py中，我有这个索引函数，那么当有人访问这个。URL时，我想渲染的内容是views.index，视图代表的是views.py文件，我在其中定义了所有的视图，而索引恰好就是。
- en: the name of the function that I want to，call when someone visits this URL for。example
    and then you can optionally，provide a path with a string name to。represent this
    URL I'm gonna give this a，name of index we'll see why this can be。useful later
    on but the idea is giving a，name to a particular URL pattern makes。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 当有人访问这个URL时，我想调用的函数名称，例如，然后你可以选择性地提供一个带字符串名称的路径来表示这个URL，我将给这个名称命名为index，我们稍后会看到这会有用，但想法是给特定的URL模式命名使得。
- en: it easy to reference it from other parts，of the application so later when we。might
    want to link two things or have，forms that are submitting to different。parts of
    the web application giving a，name to a path can be a useful tool in。order to use
    views last line I need to，add URLs dot pi is to say from dot in。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 让它更容易从应用程序的其他部分引用，因此稍后当我们。可能想链接两个东西或有，表单提交到Web应用程序的不同部分时，给路径命名可以是一个有用的工具。为了使用视图，我需要在URLs.py中添加从点导入。
- en: other words from the current directory，go ahead and import views anytime I'm。using
    a variable name like views I'm，using that name I need to import it from。somewhere
    and it just so happens that，views dot PI and URL CI are located in。the same directory
    so I can just say，from dot import views to import all of。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，从当前目录中，继续导入视图，每当我使用一个变量名像视图时，我使用那个名字，我需要从某处导入它，正好views.py和urls.py位于同一目录，所以我可以说，从点导入视图来导入所有。
- en: that into this particular file so this，now is the URLs PI file for this。application
    but the last step in order，to get all of this working for the very。first time
    is to go back into the，lecture 3 directory and open up URLs PI。here this is the
    URLs PI file for the，entire project for all of the apps that。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定文件的URLs.py文件，所以现在这是这个应用程序的URLs.py文件，但为使这一切第一次正常工作，最后一步是返回到讲座3目录并打开URLs.py。这里是整个项目的URLs.py文件，包含所有的应用程序。
- en: might be contained within this project，and it just so happens that there's one。path
    already given to us by default，called admin which runs a default Django。application
    called the admin application，we'll see more about that in the next。lecture but
    for now I'd like to add my，own route here to say that I would like。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 可能包含在这个项目中，碰巧有一个路径是默认提供的，称为admin，它运行一个名为admin的默认Django应用程序，我们将在下一次讲座中看到更多关于它的内容，但现在我想在这里添加自己的路由，说明我希望。
- en: for a particular path to lead to not the，admin app but the hello app that I
    have。just now created so I'll go ahead and，give this a path of hello and what
    I'd。like to do is say that after you've，included the path hello go ahead and。include
    all of the URLs from the URLs PI，of my，low application I basically like to link。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 特定路径的目的是不是指向管理应用，而是我刚刚创建的hello应用，所以我会给这个路径命名为hello，我想说的是，在你包含路径hello之后，继续包含来自我的hello应用的所有URLs.py。
- en: these two URL configuration Styles，together and so the command to do that。is
    include hello dot URLs inside of the，Hello module get at the URLs URLs file。there
    and that is now what I would like，to add as a URL pattern and in order to。do this
    I also need to import include，since I'm using include inside of URL。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 将这两种URL配置风格结合在一起，因此这样做的命令是将include hello.urls包含在Hello模块内获取URLs文件，并且这就是我想作为URL模式添加的，现在为此我还需要导入include，因为我在URL中使用include。
- en: patterns so that was a lot of steps just，to get things started but just to get
    a。high-level overview of how this is all，working I have a Django project called。lecture
    3 and inside of lecture 3，there's a URLs file that decides what。URLs I can access
    I can access slash，admin which takes me to the admin。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这些模式，所以这有很多步骤，只是为了开始，但为了获取一个高层次的概述，这一切是如何运作的，我有一个叫做lecture 3的Django项目，里面有一个决定我可以访问哪些URL的URLs文件，我可以访问/admin，这将我带到管理员界面。
- en: application which is created by Django，we don't have to worry about that just。yet
    but now I've just added that you can，go to slash hello to go to the hello。application
    and when you do that I'm，telling Django to look at the URLs PI。inside of the hello
    directory to figure，out what additional URLs I can get to。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 由Django创建的应用程序，我们现在不必担心，但我刚刚添加了你可以去/hello访问hello应用程序，当你这样做时，我告诉Django查看hello目录内的URLs.py，以找出我可以访问哪些额外的URL。
- en: from there so this is one master URLs，dot pi file that might connect to，multiple
    different other URL。configurations that exists as well then，inside of the URLs
    PI for my app for the。hello app I've said that when someone，visits just the default
    route on this。![](img/f5fbdb40944f8266f6c7ca9c36676021_20.png)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是一个主URLs.py文件，它可能连接到多个不同的其他URL配置，然后在我应用的hello应用的URLs.py中，我说当有人访问这个默认路由时。![](img/f5fbdb40944f8266f6c7ca9c36676021_20.png)
- en: particular application go ahead and just，run the index function that is one
    of my。views so all that's decided now that，that is done I should be able to go
    back。into my terminal and run Python manish，up I run server to actually start
    up。![](img/f5fbdb40944f8266f6c7ca9c36676021_22.png)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 特定应用程序，继续运行索引函数，这是我的一个视图，所以所有这些都已决定，现在完成后，我应该能够返回到我的终端并运行Python manage.py runserver，实际上启动。![](img/f5fbdb40944f8266f6c7ca9c36676021_22.png)
- en: this web server and now I can go back to，this URL but instead of just going
    to。that default URL I'll go ahead and go to，that URL slash hello and when I go
    to。![](img/f5fbdb40944f8266f6c7ca9c36676021_24.png)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 这个网络服务器，现在我可以回到这个URL，但不是仅仅访问那个默认URL，我将前往这个URL/hello，当我去。![](img/f5fbdb40944f8266f6c7ca9c36676021_24.png)
- en: slash hello what I see is hello world so，what was happening there is that I
    typed。in the URL that you are L went to Django，and Django looked at that URL and
    looked。at my URLs dot PI file and said you know，anytime something starts with
    slash。hello that belongs to the hello app and，inside of our hello configuration
    we。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: /hello，我看到的是你好世界。那么，发生了什么事情是我输入了这个URL，它转到Django，Django查看了这个URL，并查看了我的URLs.py文件，并说，你知道的，任何以/hello开头的东西属于hello应用程序，而在我们的hello配置中我们。
- en: said that when we go to the default，route we should run the index function。and
    the index function returns this，hello world response and now we can。begin to change
    that response we can，begin to adjust what it is that views hi。is actually doing
    right，now it says hello world but if I want to。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 他说，当我们访问默认路由时，我们应该运行索引函数，而索引函数返回这个你好世界的响应，现在我们可以开始更改那个响应，我们可以开始调整视图实际在做什么，现在它显示你好世界，但如果我想要。
- en: change it to just say like hello for。![](img/f5fbdb40944f8266f6c7ca9c36676021_26.png)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 将其更改为仅显示你好。![](img/f5fbdb40944f8266f6c7ca9c36676021_26.png)
- en: example I can just edit it now say the，index function just returns an HTTP。![](img/f5fbdb40944f8266f6c7ca9c36676021_28.png)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我可以现在编辑它，索引函数仅返回一个HTTP。![](img/f5fbdb40944f8266f6c7ca9c36676021_28.png)
- en: response of hello for example and so now，I fir refreshed this page now it just。says
    hello so I can edit my files when I，do django notices that a change has been。made
    and it will reappear with my latest，code such that now I can visit slash。hello
    and I can see that an HTTP，response of hello is what ultimately。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 例如的你好响应，现在我刷新了这个页面，现在它只是说你好，所以我可以编辑我的文件，当我这样做时，Django会注意到有变化并且会以我最新的代码重新出现，这样我现在可以访问/hello，我可以看到的HTTP响应的你好是最终的。
- en: comes back to me so now let's take a，look at the idea that in addition to。just
    having one view inside of us by I，can have as many views as I want I can。create
    additional functions that each，return different responses maybe I'd。like a route
    that says hello to me for，example so let me define a new function。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我这儿，所以现在让我们看看这个想法，除了在我们内部只有一个视图，我可以有任意多个视图。我可以创建额外的函数，每个函数返回不同的响应，也许我想要一个说
    hello 的路由。例如，让我定义一个新函数。
- en: then I'll call Brian that accepts the，request argument and this function is。just
    going to return HTTP response hello，Brian for example and now I need to。associate
    this new view that I've，created with a URL so I'll go ahead and。go back to URLs
    PI inside of my hello，directory and so I have a default route。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我将调用 Brian，它接受请求参数，这个函数将返回 HTTP 响应 hello，Brian 作为例子，现在我需要将这个新视图与一个 URL 关联起来。所以我将回到我
    hello 目录中的 URL PI。因此，我有一个默认路由。
- en: represented by the empty string that，loads the index function but I can add。to
    this just add to this list add a new，path where if I type Brian into the URL。instead
    that will load the Brian，function and I'll go ahead and give that。![](img/f5fbdb40944f8266f6c7ca9c36676021_30.png)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 由空字符串表示，它加载索引函数，但我可以在此基础上添加。只需在此列表中添加一个新的路径，如果我在 URL 中输入 Brian，这将加载 Brian 函数，我将继续给它。![](img/f5fbdb40944f8266f6c7ca9c36676021_30.png)
- en: a name as well so now if i refresh the，page I'm still on just a slash hello。route
    and that just displays hello for。![](img/f5fbdb40944f8266f6c7ca9c36676021_32.png)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我刷新页面，我仍然在一个斜杠的 hello 路由上，它只显示 hello。![](img/f5fbdb40944f8266f6c7ca9c36676021_32.png)
- en: example but if I go to slash Brian for，example now I see hello Brian I have
    two。different URLs one that is just slash，hello with nothing after it which was。that
    empty string and one which was，slash hello with Brian following it that。loads
    a different view function that，returns a different HTTP response and so。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 但是如果我访问斜杠 Brian，现在我看到 hello Brian，我有两个不同的 URL，一个是单纯的斜杠 hello，后面什么也没有，这是那个空字符串，另一个是斜杠
    hello 后跟 Brian，它加载一个不同的视图函数，返回不同的 HTTP 响应，因此。
- en: we could imagine continuing to do this I，might want a web application that has
    a。number of different URLs that I can，visit so I could go ahead and add like a。david
    function for example that returns，an HTTP response of hello David and then。again
    inside of my URL configuration I，would say go ahead and give me another。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以想象继续这样做，我可能想要一个具有多个不同 URL 的网络应用程序，我可以访问。因此，我可以添加一个像 david 函数这样的例子，它返回一个
    HTTP 响应 hello David，然后在我的 URL 配置中，我将说继续给我另一个。
- en: route called David that loads the david，function，each time I'm giving it a URL
    so what。![](img/f5fbdb40944f8266f6c7ca9c36676021_34.png)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 路由称为 David，它加载 david 函数，每次我给它一个 URL 时，所以什么。![](img/f5fbdb40944f8266f6c7ca9c36676021_34.png)
- en: comes after the slash hello I'm giving，it a function to run the David function。inside
    of the UCI and giving it a name，just to make it easier to reference a。little bit
    later and so now I have slash，hello / Brian and now I have slash hello。![](img/f5fbdb40944f8266f6c7ca9c36676021_36.png)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在斜杠 hello 之后，我给它一个运行 David 函数的功能，给它一个名称，以便稍后更容易引用。所以现在我有了斜杠 hello / Brian，现在我有了斜杠
    hello。![](img/f5fbdb40944f8266f6c7ca9c36676021_36.png)
- en: / David each of which displays a，different HD view response so you can。imagine
    starting to use this feature to，begin to build a web application that。has a number
    of different routes that，has different routes that do different。things and many
    web applications are，parameterised by what it is it's。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: / David 每个都显示不同的 HTTP 响应，所以你可以想象开始使用这个功能来构建一个具有多个不同路由的网络应用程序，这些路由执行不同的操作，许多网络应用程序都是通过它所具有的参数化。
- en: actually in the URL so for example on，Twitter you can go to twitter。com slash。someone's
    user name to see all of that，users tweets for example or github a。service we've
    taken a look at now you，can go to github。com slash your github。username to be
    able to see all of the，repositories for a particular user for。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上在 URL 中，例如在 Twitter 上，你可以访问 twitter.com/某人的用户名来查看该用户的所有推文，或者是我们现在查看的 GitHub
    服务。你可以访问 github.com/你的 GitHub 用户名，以查看特定用户的所有仓库。
- en: example so if you think about how that，might be implemented if either of these。services
    we're using Django they might，have a URL spy file or something like it。that is
    just defining a whole bunch of，URLs and saying what route should be。associated
    with them when someone visits，that page but you can imagine ultimately。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果你考虑一下如何实现这两个服务中的任意一个，如果我们使用Django，它们可能会有一个URL配置文件或类似的东西，定义一整堆URL，并说明当有人访问该页面时应该关联哪个路由，但你可以想象最终。
- en: that this is probably gonna start to get，tedious that if I want to say hello
    to。anyone if I want to not only support，slash hello slash Brian and slash David。but
    I also want to support arbitrary，names like slash Harry or slash wrong or。slash
    Hermione well then it would seem，that I need to create a whole bunch of。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我想向任何人打招呼，如果我不仅要支持/hello/Brian和/hello/David，还想支持任意名字，比如/hello/Harry或/hello/wrong或/hello/Hermione，那么看来我需要创建一整堆。
- en: different functions each of which says，hello to a different person and then。create
    a whole bunch of different URLs，to be able to do that as well but it。turns out
    that what I can do is create，URL patterns that have placeholders in。effect things
    that allow me to parameter，eyes the path via certain paths。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 每个不同的功能都会向不同的人说“你好”，然后创建一整堆不同的URL，以便能够做到这一点。但事实证明，我可以创建带有占位符的URL模式，从而实现通过某些路径来参数化路径。
- en: converters so to speak so what does that，actually mean，well let's instead of
    creating functions。that just say hello Brian and hello，David let me create a new
    function。that's just called greet for example，that also takes a request but takes
    an。additional parameter takes a parameter，like someone's name for example and
    this。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 所谓的转换器，那么这实际上意味着什么呢？好吧，让我们不再创建仅仅说“你好Brian”和“你好David”的函数，而是创建一个叫greet的新函数，它也接受一个请求，但还需要一个额外的参数，例如某个人的名字。
- en: greet function is going to return an。![](img/f5fbdb40944f8266f6c7ca9c36676021_38.png)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: greet函数将返回一个。![](img/f5fbdb40944f8266f6c7ca9c36676021_38.png)
- en: HTTP response of hello comma and then I，go ahead and plug in the name here I。don't
    need to add an F to the，the string to indicate that it's a。formatted string this
    is just python，syntax to say that i would like to say，hello。not just to anyone
    but to whatever the，value of the name variable happens to be。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP响应为“你好”，然后我继续在这里插入名字。我不需要在字符串中添加F来表示它是一个格式化字符串，这只是Python语法，表示我想说“你好”。不仅仅是对任何人，而是对name变量的值。
- en: i'd like to substitute the name variable，into that greet function and then what
    I。can do is inside of URLs PI I'll go，ahead and add another path but instead。of
    saying a name like Brian or David or，Harry for example here I'm going to say。in
    angled brackets stir colon name and，when someone visits that route let's go。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我想把name变量替换到greet函数中，然后我可以在URLs.py中添加另一个路径，但我不会像Brian或David或Harry那样在这里说名字，而是要在尖括号中说冒号name，当有人访问该路由时，让我们去。
- en: to the views greet function and the name，for this route will be greet and so。what's
    going on here is we have a，fundamentally different kind of path。rather than prescribing
    exactly what the，URL should look like like nothing after。the end of the route
    or Brian at the end，of the route or David at the end of the。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视图的greet函数，路由的名字将是greet。那么这里发生的事情是，我们有一种根本不同的路径，而不是严格规定URL应该是什么样子，比如在路由末尾后没有任何内容，或Brian在路由末尾，或David在路由末尾。
- en: route this route here on line 7 is，saying this route could be any string。that
    we're going to give a variable name，of name to but you could replace a name。with
    something else entirely，and this could be any string so it could。be Brian or David
    or could be any other，name and when that happens we'll call。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这个路由在第7行表示，这个路由可以是我们给定的任何字符串，并将其变量命名为name，但你可以用完全不同的东西替换name，这可以是任何字符串，比如Brian或David，或者其他任何名字。当发生这种情况时，我们会调用。
- en: the greet function and when that，function is called it will pass in this。argument
    this name as a parameter to，that function so now be able to create a。custom route
    that allows me to specify，any string and figure out how to deal。with that appropriately
    so now if I，visit slash hello / Harry for example。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: greet函数，当这个函数被调用时，它会将这个参数作为参数传递给那个函数，所以现在能够创建一个自定义路由，允许我指定任何字符串，并找出如何妥善处理它。所以现在如果我访问/hello/Harry，例如。
- en: not a route that I explicitly created，but that is a string Harry is a string
    I。press return it says hello Harry，I can go to slash hello slash Ron and。say hello
    Ron and slash Hermione to see，hello Hermione as well and you know what。maybe just
    for good measure I'd like to。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是我明确创建的路线，而是一个字符串，哈利是一个字符串。我按回车键，它会说“你好，哈利”，我可以去斜杠“你好，罗恩”，并说“你好，罗恩”，再去斜杠“赫敏”看看，“你好，赫敏”，你知道吗？也许为了好的度量，我想要。
- en: '![](img/f5fbdb40944f8266f6c7ca9c36676021_40.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f5fbdb40944f8266f6c7ca9c36676021_40.png)'
- en: capitalize this name like Hermione for，example well the way to do that is that。I
    can add arbitrary Python logic it，turns out that with any Python string。there
    is a function or method on that，string called capitalism that I can say。is just
    dot capitalized and if I can do，it in Python then Django allows me to。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个名字大写，比如赫敏，做法是我可以添加任意的 Python 逻辑，事实证明，对于任何 Python 字符串，有一个函数或方法叫做 capitalized，我可以说“点大写”，如果我能在
    Python 中做到这一点，那么 Django 也允许我这样做。
- en: incorporate it into the response that，I'm giving back so I'm now using Python。![](img/f5fbdb40944f8266f6c7ca9c36676021_42.png)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 将它融入到我所回馈的响应中，因此我现在使用 Python。![](img/f5fbdb40944f8266f6c7ca9c36676021_42.png)
- en: to take the name capitalize it and use，that in the response that gets sent back。to
    the user so now / remaining returns，hello Hermione with a capital H likewise，for
    hello。![](img/f5fbdb40944f8266f6c7ca9c36676021_44.png)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 取这个名字大写并在返回给用户的响应中使用它，所以现在/剩余返回，“你好，赫敏”，首字母大写 H，同样的，“你好”。![](img/f5fbdb40944f8266f6c7ca9c36676021_44.png)
- en: likewise for hello Harry I've now been，able to add a route that takes an HTTP。request
    as well as a parameter that name，whatever was in the URL and returned an。HTTP
    response that just says hello to，that person so these HTTP responses can。be any
    HTML content right now we're just，using text but you can imagine adding。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，对于“你好，哈利”，我现在已经能够添加一个路由，它接受 HTTP 请求以及参数名称，返回的 HTTP 响应只对那个人说“你好”。所以这些 HTTP
    响应可以是任何 HTML 内容，现在我们只是使用文本，但你可以想象添加。
- en: lists or tables to this as well but you，might imagine that if I have to include。an
    entire HTML page just inside these，double quotes that's gonna get unwieldy。very
    quickly very quickly we're gonna，find that there's a lot of HTML to just。go in
    a single string inside of a Python，program and if we think back to the。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以将列表或表格包含在内，但你可能想象一下，如果我必须将整个 HTML 页面包含在这些双引号内，那会很麻烦。很快我们会发现，有很多 HTML 只是放在
    Python 程序中的一个字符串里，如果我们回想一下。
- en: principles and the ideas that we've been，looking at in this course so far we've。generally
    tried to separate out，different parts of our application。wherever possible and
    there's a lot of，value in that one and just keeping。things clean too and making
    sure that，people are able to collaborate if you。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 本课程到目前为止我们所观察的原则和理念，我们通常尝试分离我们应用程序的不同部分，尽可能做到这一点，这样做有很多价值，保持整洁，并确保人们能够协作。
- en: want one person working on the Python，logic and one person working on the HTML。you'd
    rather they not step on each，other's toes as they're working and so。what we can
    do in Django is well is，separate the response the HTML from the。actual Python
    code here as well and so，the way we can do that is instead of。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望一个人专注于 Python 逻辑，而另一个人专注于 HTML。你希望他们在工作时不要互相干扰。因此，在 Django 中，我们可以将响应的 HTML
    与实际的 Python 代码分开，做法是。
- en: returning an HTTP response I can instead，let's say for this default route instead。of
    returning an HTTP response of hello，let me go ahead and render and when I。render
    something I need to pass in the，HTTP request but I'll also pass it pass。in the
    name of a template and I'll go，ahead and call this template hello /，index。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 返回 HTTP 响应时，我可以说，对于这个默认路由，我不返回“你好”的 HTTP 响应，让我继续渲染，当我渲染某个东西时，我需要传入 HTTP 请求，但我还会传入模板的名称，我将这个模板称为“你好/索引”。
- en: html so if I don't want to render，just a string but I want to render an。entire
    HTML file I can call this render。![](img/f5fbdb40944f8266f6c7ca9c36676021_46.png)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: HTML 所以如果我不想渲染，只是一个字符串，但我想渲染整个 HTML 文件，我可以调用这个渲染。![](img/f5fbdb40944f8266f6c7ca9c36676021_46.png)
- en: function pass in the request but then，also pass in the name of a template and。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 函数传入请求，但还要传入模板的名称。
