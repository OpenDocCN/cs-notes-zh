- en: 3.4   Hash Tables
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 3.4   哈希表
- en: 原文：[https://algs4.cs.princeton.edu/34hash](https://algs4.cs.princeton.edu/34hash)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://algs4.cs.princeton.edu/34hash](https://algs4.cs.princeton.edu/34hash)
- en: If keys are small integers, we can use an array to implement a symbol table,
    by interpreting the key as an array index so that we can store the value associated
    with key i in array position i. In this section, we consider *hashing*, an extension
    of this simple method that handles more complicated types of keys. We reference
    key-value pairs using arrays by doing arithmetic operations to transform keys
    into array indices.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果键是小整数，我们可以使用数组来实现符号表，通过将键解释为数组索引，以便我们可以将与键i关联的值存储在数组位置i中。在本节中，我们考虑*哈希*，这是一种处理更复杂类型键的简单方法的扩展。我们通过进行算术运算将键转换为数组索引来引用键值对。
- en: '![crux of hashing](../Images/9460e7e64c103d7a9b40c351665255cb.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![哈希的关键](../Images/9460e7e64c103d7a9b40c351665255cb.png)'
- en: Search algorithms that use hashing consist of two separate parts. The first
    step is to compute a *hash function* that transforms the search key into an array
    index. Ideally, different keys would map to different indices. This ideal is generally
    beyond our reach, so we have to face the possibility that two or more different
    keys may hash to the same array index. Thus, the second part of a hashing search
    is a *collision-resolution* process that deals with this situation. ![Modular
    hashing](../Images/68088fbf324a67f4e875e8e0fbe08ada.png)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用哈希的搜索算法由两个独立部分组成。第一步是计算*哈希函数*，将搜索键转换为数组索引。理想情况下，不同的键将映射到不同的索引。这种理想通常超出我们的能力范围，因此我们必须面对两个或更多不同键可能哈希到相同数组索引的可能性。因此，哈希搜索的第二部分是处理这种情况的*冲突解决*过程。![模块化哈希](../Images/68088fbf324a67f4e875e8e0fbe08ada.png)
- en: Hash functions.
  id: totrans-5
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 哈希函数。
- en: 'If we have an array that can hold M key-value pairs, then we need a function
    that can transform any given key into an index into that array: an integer in
    the range [0, M-1]. We seek a hash function that is both easy to compute and uniformly
    distributes the keys.'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有一个可以容纳M个键值对的数组，则需要一个函数，可以将任何给定的键转换为该数组的索引：在范围[0, M-1]内的整数。我们寻求一个既易于计算又均匀分布键的哈希函数。
- en: '*Typical example.* Suppose that we have an application where the keys are U.S.
    social security numbers. A social security number such as 123-45-6789 is a 9-digit
    number divided into three fields. The first field identifies the [geographical
    area](http://cpsr.org/prevsite/cpsr/privacy/ssn/ssn.structure.html/) where the
    number was issued (for example number whose first field are 035 are from Rhode
    Island and numbers whose first field are 214 are from Maryland) and the other
    two fields identify the individual. There are a billion different social security
    numbers, but suppose that our application will need to process just a few hundred
    keys, so that we could use a hash table of size M = 1000\. One possible approach
    to implementing a hash function is to use three digits from the key. Using three
    digits from the field on the right is likely to be preferable to using the three
    digits in the field on the left (since customers may not be equally dispersed
    over geographic areas), but a better approach is to use all nine digits to make
    an int value, then consider hash functions for integers, described next.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*典型例子。* 假设我们有一个应用程序，其中键是美国社会安全号码。例如，社会安全号码123-45-6789是一个分为三个字段的9位数。第一个字段标识发放号码的[地理区域](http://cpsr.org/prevsite/cpsr/privacy/ssn/ssn.structure.html/)（例如，第一个字段为035的号码来自罗德岛，第一个字段为214的号码来自马里兰），其他两个字段标识个人。有十亿个不同的社会安全号码，但假设我们的应用程序只需要处理几百个键，因此我们可以使用大小为M
    = 1000的哈希表。实现哈希函数的一种可能方法是使用键中的三位数。使用右侧字段中的三位数可能比使用左侧字段中的三位数更可取（因为客户可能不均匀地分布在地理区域上），但更好的方法是使用所有九位数制成一个整数值，然后考虑下面描述的整数的哈希函数。'
- en: '*Positive integers.* The most commonly used method for hashing integers is
    called *modular hashing*: we choose the array size M to be prime, and, for any
    positive integer key k, compute the remainder when dividing k by M. This function
    is very easy to compute (k % M, in Java), and is effective in dispersing the keys
    evenly between 0 and M-1.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*正整数。* 用于哈希整数的最常用方法称为*模块化哈希*：我们选择数组大小M为素数，并且对于任何正整数键k，计算k除以M的余数。这个函数非常容易计算（在Java中为k
    % M），并且在0和M-1之间有效地分散键。'
- en: '*Floating-point numbers.* If the keys are real numbers between 0 and 1, we
    might just multiply by M and round off to the nearest integer to get an index
    between 0 and M-1. Although it is intuitive, this approach is defective because
    it gives more weight to the most significant bits of the keys; the least significant
    bits play no role. One way to address this situation is to use modular hashing
    on the binary representation of the key (this is what Java does).'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*浮点数。* 如果键是介于0和1之间的实数，我们可能只需乘以M并四舍五入到最接近的整数以获得0和M-1之间的索引。尽管这是直观的，但这种方法有缺陷，因为它给予键的最高有效位更多权重；最低有效位不起作用。解决这种情况的一种方法是使用键的二进制表示进行模块化哈希（这就是Java所做的）。'
- en: '*Strings.* Modular hashing works for long keys such as strings, too: we simply
    treat them as huge integers. For example, the code below computes a modular hash
    function for a String s, where R is a small prime integer (Java uses 31).'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*字符串。* 模块化哈希也适用于长键，如字符串：我们只需将它们视为巨大的整数。例如，下面的代码计算了一个String s的模块化哈希函数，其中R是一个小素数（Java使用31）。'
- en: '[PRE0]'
  id: totrans-11
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Compound keys.* If the key type has multiple integer fields, we can typically
    mix them together in the way just described for `String` values. For example,
    suppose that search keys are of type [USPhoneNumber.java](PhoneNumber.java.html),
    which has three integer fields area (3-digit area code), exch (3-digit exchange),
    and ext (4-digit extension). In this case, we can compute the number'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*复合键。* 如果键类型具有多个整数字段，我们通常可以像刚才描述的`String`值一样将它们混合在一起。例如，假设搜索键的类型为[USPhoneNumber.java](PhoneNumber.java.html)，其中包含三个整数字段：区域（3位区号）、交换（3位交换）和分机（4位分机）。在这种情况下，我们可以计算数字'
- en: '[PRE1]'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '*Java conventions.* Java helps us address the basic problem that every type
    of data needs a hash function by requiring that every data type must implement
    a method called `hashCode()` (which returns a 32-bit integer). The implementation
    of `hashCode()` for an object must be *consistent with equals*. That is, if `a.equals(b)`
    is true, then `a.hashCode()` must have the same numerical value as `b.hashCode()`.
    If the `hashCode()` values are the same, the objects may or may not be equal,
    and we must use `equals()` to decide which condition holds.'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*Java约定。* Java帮助我们解决了每种数据类型都需要一个哈希函数的基本问题，要求每种数据类型必须实现一个名为`hashCode()`的方法（返回一个32位整数）。对象的`hashCode()`实现必须与`equals`一致。也就是说，如果`a.equals(b)`为真，则`a.hashCode()`必须与`b.hashCode()`具有相同的数值。如果`hashCode()`值相同，则对象可能相等也可能不相等，我们必须使用`equals()`来确定哪种情况成立。'
- en: '*Converting a `hashCode()` to an array index.* Since our goal is an array index,
    not a 32-bit integer, we combine `hashCode()` with modular hashing in our implementations
    to produce integers between 0 and M-1 as follows:'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将`hashCode()`转换为数组索引。* 由于我们的目标是一个数组索引，而不是32位整数，因此我们在实现中将`hashCode()`与模块化哈希结合起来，以产生0到M-1之间的整数，如下所示：'
- en: '[PRE2]'
  id: totrans-16
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The code masks off the sign bit (to turn the 32-bit integer into a 31-bit nonnegative
    integer) and then computing the remainder when dividing by M, as in modular hashing.
  id: totrans-17
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 该代码掩盖了符号位（将32位整数转换为31位非负整数），然后通过除以M来计算余数，就像模块化哈希一样。
- en: '*User-defined `hashCode()`*. Client code expects that `hashCode()` disperses
    the keys uniformly among the possible 32-bit result values. That is, for any object
    `x`, you can write `x.hashCode()` and, in principle, expect to get any one of
    the 2^32 possible 32-bit values with equal likelihood. Java provides `hashCode()`
    implementations that aspire to this functionality for many common types (including
    `String`, `Integer`, `Double`, `Date`, and `URL`), but for your own type, you
    have to try to do it on your own. Program [PhoneNumber.java](PhoneNumber.java.html)
    illustrates one way to proceed: make integers from the instance variables and
    use modular hashing. Program [Transaction.java](Transaction.java.html) illustrates
    an even simpler approach: use the `hashCode()` method for the instance variables
    to convert each to a 32-bit `int` value and then do the arithmetic.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*用户定义的`hashCode()`。* 客户端代码期望`hashCode()`在可能的32位结果值中均匀分散键。也就是说，对于任何对象`x`，你可以编写`x.hashCode()`，并且原则上期望以相等的可能性获得2^32个可能的32位值中的任何一个。Java为许多常见类型（包括`String`、`Integer`、`Double`、`Date`和`URL`）提供了渴望实现此功能的`hashCode()`实现，但对于您��己的类型，您必须自己尝试。程序[PhoneNumber.java](PhoneNumber.java.html)演示了一种方法：从实例变量中生成整数并使用模块化哈希。程序[Transaction.java](Transaction.java.html)演示了一种更简单的方法：使用实例变量的`hashCode()`方法将每个转换为32位`int`值，然后进行算术运算。'
- en: 'We have three primary requirements in implementing a good hash function for
    a given data type:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在为给定数据类型实现良好的哈希函数时，我们有三个主要要求：
- en: It should be *deterministic*—equal keys must produce the same hash value.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该是*确定性的*—相同的键必须产生相同的哈希值。
- en: It should be *efficient to compute*.
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 计算效率应该*高*。
- en: It should *uniformly distribute the keys*.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它应该*均匀分布键*。
- en: To analyze our hashing algorithms and develop hypotheses about their performance,
    we make the following idealized assumption.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为了分析我们的哈希算法并对其性能提出假设，我们做出以下理想化假设。
- en: Assumption J (uniform hashing assumption).
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 假设J（均匀哈希假设）。
- en: The hash function that we use uniformly distributes keys among the integer values
    between 0 and M-1.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的哈希函数在0和M-1之间的整数值之间均匀分布键。
- en: Hashing with separate chaining.
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用分离链接进行哈希。
- en: 'A hash function converts keys into array indices. The second component of a
    hashing algorithm is collision resolution: a strategy for handling the case when
    two or more keys to be inserted hash to the same index. A straightforward approach
    to collision resolution is to build, for each of the M array indices, a linked
    list of the key-value pairs whose keys hash to that index. The basic idea is to
    choose M to be sufficiently large that the lists are sufficiently short to enable
    efficient search through a two-step process: hash to find the list that could
    contain the key, then sequentially search through that list for the key.![hashing
    with separate chaining](../Images/31e91fa35e110b53a917843ef465214f.png)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希函数将键转换为数组索引。哈希算法的第二个组成部分是冲突解决：处理两个或更多个要插入的键哈希到相同索引的情况的策略。冲突解决的一个直接方法是为M个数组索引中的每一个构建一个键-值对的链表，这些键的哈希值为该索引。基本思想是选择足够大的M，使得列表足够短，以便通过两步过程进行有效搜索：哈希以找到可能包含键的列表，然后顺序搜索该列表以查找键。![使用分离链接进行哈希](../Images/31e91fa35e110b53a917843ef465214f.png)
- en: Program [SeparateChainingHashST.java](SeparateChainingHashST.java.html) implements
    a symbol table with a separate-chaining hash table. It maintains an array of [SequentialSearchST](SequentialSearchST.java.html)
    objects and implements `get()` and `put()` by computing a hash function to choose
    which `SequentialSearchST` can contain the key and then using `get()` and `put()`
    from `SequentialSearchST` to complete either job. Program [SeparateChainingLiteHashST.java](SeparateChainingLiteHashST.java.html)
    is similar but does it using an explict `Node` nested class.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[SeparateChainingHashST.java](SeparateChainingHashST.java.html)实现了一个带有分离链接哈希表的符号表。它维护了一个[SequentialSearchST](SequentialSearchST.java.html)对象的数组，并通过计算哈希函数来选择哪个`SequentialSearchST`可以包含键，并然后使用`SequentialSearchST`中的`get()`和`put()`来完成工作。程序[SeparateChainingLiteHashST.java](SeparateChainingLiteHashST.java.html)类似，但使用了一个显式的`Node`嵌套类。
- en: '**Proposition K.** In a separate-chaining hash table with M lists and N keys,
    the probability (under Assumption J) that the number of keys in a list is within
    a small constant factor of N/M is extremely close to 1. of N/M is extremely close
    to 1\. (Assumes an idealistic hash function.)'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**命题K。** 在具有M个列表和N个键的分离链接哈希表中，假设J下，列表中键的数量在N/M的小常数因子范围内的概率极其接近1。N/M的小常数因子范围内的概率极其接近1。
    （假设一个理想的哈希函数。）'
- en: This classical mathematical result is compelling, but it completely depends
    on Assumption J. Still, in practice, the same behavior occurs.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这个经典的数学结果很有说服力，但它完全依赖于假设 J。然而，在实践中，相同的行为发生。
- en: '**Property L.** In a separate-chaining hash table with M lists and N keys,
    the number of compares (equality tests) for search and insert is proportional
    to N/M.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**性质 L.** 在具有 M 个列表和 N 个键的分离链接哈希表中，搜索和插入的比较次数（相等测试）与 N/M 成正比。'
- en: Hashing with linear probing.
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用线性探测进行哈希。
- en: 'Another approach to implementing hashing is to store N key-value pairs in a
    hash table of size M > N, relying on empty entries in the table to help with with
    collision resolution. Such methods are called *open-addressing* hashing methods.
    The simplest open-addressing method is called *linear probing*: when there is
    a collision (when we hash to a table index that is already occupied with a key
    different from the search key), then we just check the next entry in the table
    (by incrementing the index). There are three possible outcomes:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 实现哈希的另一种方法是将 N 个键值对存储在大小为 M > N 的哈希表中，依赖表中的空条目来帮助解决冲突。这种方法称为*开放寻址*哈希方法。最简单的开放寻址方法称为*线性探测*：当发生冲突（当我们哈希到已经被不同于搜索键的键占据的表索引时），我们只需检查表中的下一个条目（通过增加索引）。有三种可能的结果：
- en: 'key equal to search key: search hit'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键等于搜索键：搜索命中
- en: 'empty position (null key at indexed position): search miss'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 空位置（索引位置处的空键）：搜索未命中
- en: 'key not equal to search key: try next entry'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键不等于搜索键：尝试下一个条目
- en: '![hashing with linear probing](../Images/4f257cd648e7fe5fd7a93d6597a1f169.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![使用线性探测进行哈希](../Images/4f257cd648e7fe5fd7a93d6597a1f169.png)'
- en: Program [LinearProbingHashST.java](LinearProbingHashST.java.html) is an implementation
    of the symbol-table ADT using this method.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[LinearProbingHashST.java](LinearProbingHashST.java.html)是使用这种方法实现符号表 ADT
    的实现。
- en: As with separate chaining, the performance of open-addressing methods is dependent
    on the ratio α = N/M, but we interpret it differently. For separate chaining α
    is the average number of items per list and is generally larger than 1\. For open
    addressing, α is the percentage of table positions that are occupied; it *must*
    be less than 1\. We refer to α as the *load factor* of the hash table.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 与分离链接一样，开放寻址方法的性能取决于比率 α = N/M，但我们对其进行了不同的解释。对于分离链接，α 是每个列表的平均项目数，通常大于 1。对于开放寻址，α
    是占用的表位置的百分比；它*必须*小于 1。我们将 α 称为哈希表的*负载因子*。
- en: '**Proposition M.** In a linear-probing has table of size M with N = α M keys,
    the average number of probes (under Assumption J) is ~ 1/2 (1 + 1 / (1 - α)) for
    search hits and ~ 1/2 (1 + 1 / (1 - α)^2) for search misses or inserts.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**命题 M.** 在大小为 M 的线性探测哈希表中，N = α M 个键，平均探测次数（在假设 J 下）对于搜索命中约为 ~ 1/2 (1 + 1
    / (1 - α))，对于搜索未命中或插入约为 ~ 1/2 (1 + 1 / (1 - α)^2)。'
- en: Q + A.
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 问与答。
- en: Why does Java use 31 in the `hashCode()` for `String`?
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么 Java 在 `String` 的 `hashCode()` 中使用 31？
- en: It's prime, so that when the user mods out by another number, they have no common
    factors (unless it's a multiple of 31). 31 is also a Mersenne prime (like 127
    or 8191) which is a prime number that is one less than a power of 2. This means
    that the mod can be done with one shift and one subtract if the machine's multiply
    instruction is slow.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 它是质数，因此当用户通过另一个数字取模时，它们没有公共因子（除非它是 31 的倍数）。31 也是梅森素数（如 127 或 8191），是一个比某个 2
    的幂少 1 的素数。这意味着如果机器的乘法指令很慢，那么取模可以通过一次移位和一次减法完成。
- en: How do you extract the bits from a variable of type `double` for use in hashing?
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何从类型为`double`的变量中提取位以用��哈希？
- en: '`Double.doubleToLongBits(x)` returns a 64-bit `long` integer whose bit representation
    is the same as the floating-point representation of the `double` value `x`.'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Double.doubleToLongBits(x)`返回一个 64 位的`long`整数，其位表示与`double`值`x`的浮点表示相同。'
- en: What's wrong with using `(s.hashCode() % M)` or `Math.abs(s.hashCode()) % M`
    to hash to a value between 0 and M-1?
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`(s.hashCode() % M)`或`Math.abs(s.hashCode()) % M`进行哈希到 0 到 M-1 之间的值有什么问题？
- en: The `%` operator returns a non-positive integer if its first argument is negative,
    and this would create an array index out-of-bounds error. Surprisingly, the absolute
    value function can even return a negative integer. This happens if its argument
    is `Integer.MIN_VALUE` because the resulting positive integer cannot be represented
    using a 32-bit two's complement integer. This kind of bug would be excruciatingly
    difficult to track down because it would only occur one time in 4 billion! [ The
    String hash code of "polygenelubricants" is -2^31\. ]
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果第一个参数为负数，则`%`运算符返回一个非正整数，这将导致数组索引越界错误。令人惊讶的是，绝对值函数甚至可以返回一个负整数。如果其参数为`Integer.MIN_VALUE`，那么由于生成的正整数无法用
    32 位的二进制补码整数表示，这种情况就会发生。这种错误将非常难以追踪，因为它只会发生 40 亿分之一的时间！[字符串"polygenelubricants"的哈希码为-2^31。]
- en: Exercises
  id: totrans-48
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Is the following implementation of `hashCode()` legal?
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下面的`hashCode()`实现是否合法？
- en: '[PRE3]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '*Solution.* Yes, but it would cause all keys to hash to the same spot, which
    would lead to poor performance.'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 是的，但这将导致所有键都哈希到相同的位置，这将导致性能不佳。'
- en: Analyze the space usage of separate chaining, linear probing, and BSTs for `double`
    keys. Present your results in a table like the one on page 476.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 分析使用分离链接、线性探测和二叉搜索树（BSTs）处理`double`键的空间使用情况。将结果呈现在类似第 476 页上的表中。
- en: '*Solution.*'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。*'
- en: '*Sequential search.* 24 + 48N. A `Node` in a `SequentialSearch` symbol table
    consumes 48 bytes of memory (16 bytes overhead, 8 bytes key, 8 bytes val, 8 bytes
    next, and 8 bytes inner class overhead). A `SequentialSearch` object consumes
    24 bytes (16 bytes overhead, 8 bytes first) plus the memory for the nodes.'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*顺序搜索。* 24 + 48N. `SequentialSearch` 符号表中的 `Node` 占用 48 字节的内存（16 字节开销，8 字节键，8
    字节值，8 字节下一个，8 字节内部类开销）。`SequentialSearch` 对象占用 24 字节（16 字节开销，8 字节第一个）加上节点的内存。'
- en: Note that the booksite versions uses an extra 8 bytes per `SequentialSearch`
    object (4 for N and 4 for padding).
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，booksite 版本每个`SequentialSearch`对象额外使用 8 字节（4 用于 N，4 用于填充）。
- en: '*Separate chaining.* 56 + 32M + 48N. A `SeparateChaining` symbol table consumes
    8M + 56 bytes (16 bytes overhead, 20 bytes array overhead, 8 bytes for pointer
    to array, 8 bytes per reference to each array entry, 4 bytes for M, 4 bytes for
    N, 4 bytes for padding), plus the memory for the M `SequentialSearch` objects.'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*分离链接。* 56 + 32M + 48N。`SeparateChaining`符号表消耗8M + 56字节（16字节开销，20字节数组开销，8字节指向数组，每个数组条目的引用8字节，4字节M，4字节N，4字节填充），再加上M个`SequentialSearch`对象的内存。'
- en: Creative Exercises
  id: totrans-57
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
- en: '**Hash attack.** Find 2^N strings, each of length N, that have the same `hashCode()`
    value, supposing the `hashCode()` implementation for `String` (as specified in
    the [Java standard](http://docs.oracle.com/javase/6/docs/api/java/lang//String.html#hashCode()))
    is the following:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**哈希攻击。** 找到2^N个长度为N的字符串，它们具有相同的`hashCode()`值，假设`String`的`hashCode()`实现（如[Java标准](http://docs.oracle.com/javase/6/docs/api/java/lang//String.html#hashCode())中指定的）如下：'
- en: '[PRE4]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '*Solution.* It is easy to verify that `"Aa"` and `"BB"` hash to the same `hashCode()`
    value (2112). Now, any string of length 2N that is formed by concatenating these
    two strings together in any order (e.g., BBBBBB, AaAaAa, BBAaBB, AaBBBB) will
    hash to the same value. Here is a list of [10000 strings with the same hash value](hash-attack.txt).'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 很容易验证`"Aa"`和`"BB"`哈希到相同的`hashCode()`值（2112）。现在，任何由这两个字符串以任何顺序连接在一起形成的长度为2N的字符串（例如，BBBBBB，AaAaAa，BBAaBB，AaBBBB）将哈希到相同的值。这里是一个[具有相同哈希值的10000个字符串的列表](hash-attack.txt)。'
- en: '**Bad hash function.** Consider the following `hashCode()` implementation for
    `String`, which was used in early versions of Java:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**糟糕的哈希函数。** 考虑以下用于早期Java版本的`String`的`hashCode()`实现：'
- en: '[PRE5]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Explain why you think the designers chose this implementation and then why you
    think it was abandoned in favor of the one in the previous exercise.
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解释为什么你认为设计者选择了这种实现，然后为什么你认为它被放弃，而选择了上一个练习中的实现。
- en: '*Solution.* This was done in the hopes of computing the hash function more
    quickly. Indeed, the hash values were computed more quickly, but it became more
    likely that many strings hashed to the same values. This resulted in a significant
    degradation in performance on many real-world inputs (e.g., long URLs) which all
    hashed to the same value, e.g., `http://www.cs.princeton.edu/algs4/34hash/*****java.html`.'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 这样做是希望更快地计算哈希函数。确实，哈希值计算得更快，但很可能许多字符串哈希到相同的值。这导致在许多真实输入（例如，长URL）上性能显著下降，这些输入都哈希到相同的值，例如，`http://www.cs.princeton.edu/algs4/34hash/*****java.html`。'
- en: Web Exercises
  id: totrans-65
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络练习
- en: 'Suppose we wish to repeatedly search a linked list of length N elements, each
    of which contains a very long string key. How might we take advantage of the hash
    value when searching the list for an element with a given key? *Solution*: precompute
    the hash value of each string in the list. When searching for a key t, compare
    its hash value to the hash value of a string s. Only compare the string s and
    t if their hash values are equal.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设我们希望重复搜索一个长度为N的链表，每个元素都包含一个非常长的字符串键。在搜索具有给定键的元素时，我们如何利用哈希值？ *解决方案*：预先计算列表中每个字符串的哈希值。在搜索键t时，将其哈希值与字符串s的哈希值进行比较。只有在它们的哈希值相等时才比较字符串s和t。
- en: Implement `hashCode()` and `equals()` for the following data type. Be careful
    since it is likely that many of the points will have small integers for x, y,
    and z.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为以下数据类型实现`hashCode()`和`equals()`。要小心，因为很可能许多点的x、y和z都是小整数。
- en: '[PRE6]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Answer*: one solution would to make the first 16 bits of the hash code be
    the xor of the first 16 bits of x and the last 16 bits of y, and make the last
    16 bits of the hash code be the xor of the last 16 bits of x and the first 16
    bits of y. Thus, if x and y are only 16 bits or less, the hashCode values will
    be different for different points.'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案*：一个解决方案是使哈希码的前16位是x的前16位和y的后16位的异或，将哈希码的后16位是x的后16位和y的前16位的异或。因此，如果x和y只有16位或更少，那么不同点的hashCode值将不同。'
- en: What is wrong with the following implementation of `equals()` for points?
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下点的`equals()`实现有什么问题？
- en: '[PRE7]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Wrong signature for `equals()`. It is an overloaded version of `equals()`, but
    it does not override the one inherited from `Object`. This will break any code
    that uses `Point` with `HashSet`. This is one of the more common gotchas (along
    with neglecting to override `hashCode()` when you override `equals()`).
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`equals()`的错误签名。这是`equals()`的重载版本，但它没有覆盖从`Object`继承的版本。这将破坏任何使用`Point`与`HashSet`的代码。这是更常见的错误之一（与在覆盖`equals()`时忽略覆盖`hashCode()`一样）。'
- en: What will the following code fragment print?
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段将打印什么？
- en: '[PRE8]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: It will print false, false, false. The date 7/21/1969 is inserted onto the hash
    table, but is subsequently changed to 4/12/1961 while the value is in the hash
    table. Thus, although the date 4/12/1961 is in the hash table, when searching
    for x or y, we will look in the wrong bucket and won't find it. We won't find
    z either since there the date 7/21/1969 is no longer a key in the hash table.
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它将打印false，false，false。日期7/21/1969被插入到哈希表中，但在哈希表中的值被更改为4/12/1961。因此，尽管日期4/12/1961在哈希表中，但在搜索x或y时，我们将在错误的桶中查找，找不到它。我们也找不到z，因为日期7/21/1969不再是哈希表中的键。
- en: This illustrates why it is good practice to use only immutable types for keys
    in hash tables. The Java designers probably should have made `GregorianCalendar`
    an immutable object to avoid the potential for problems like this.
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这说明在哈希表的键中只使用不可变类型是一个好习惯。Java设计者可能应该使`GregorianCalendar`成为一个不可变对象，以避免出现这样的问题。
- en: '**Password checker.** Write a program that reads in a string from the command
    line and a dictionary of words from standard input, and checks whether it is a
    "good" password. Here, assume "good" means that it (i) is at least 8 characters
    long, (ii) is not a word in the dictionary, (iii) is not a word in the dictionary
    followed by a digit 0-9 (e.g., hello5), (iv) is not two words separated by a digit
    (e.g., hello2world)'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**密码检查器。** 编写一个程序，从命令行读取一个字符串和从标准输入读取一个单词字典，并检查它是否是一个“好”密码。在这里，假设“好”意味着它（i）至少有
    8 个字符长，（ii）不是字典中的一个单词，（iii）不是字典中的一个单词后跟一个数字 0-9（例如，hello5），（iv）不是由一个数字分隔的两个单词（例如，hello2world）。'
- en: '**Reverse password checker.** Modify the previous problem so that (ii) - (v)
    are also satisfied for reverses of words in the dictionary (e.g., olleh and olleh2world).
    *Clever solution*: insert each word and its reverse into the symbol table.'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**反向密码检查器。** 修改前一个问题，使得（ii）-（v）也适用于字典中单词的反向（例如，olleh 和 olleh2world）。*巧妙的解决方案*：将每个单词及其反向插入符号表。'
- en: '**Mirroring a web site.** Use hashing to figure out which files need to be
    updated to mirror web site.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**镜像网站。** 使用哈希来确定哪些文件需要更新以镜像网站。'
- en: '**Birthday paradox.** Suppose your music jukebox plays songs from your library
    of 4000 songs at random (with replacement). How long do you expect to wait until
    you hear a song played for the second time?'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**生日悖论。** 假设您的音乐点播播放器随机播放您的 4000 首歌曲（带替换）。您期望等待多久才能听到一首歌曲第二次播放？'
- en: '**Bloom filter.** Support insert, exists. Use less space by allowing some false
    positives. Application: ISP caches web pages (especially large images, video);
    client requests URL; server needs to quickly determine whether page is in the
    cache. Solution: maintain one bit array of size N = 8M (M = # elements to insert).
    Choose k independent hash functions from 0 to N-1.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**布隆过滤器。** 支持插入、存在。通过允许一些误报来使用更少的空间。应用：ISP 缓存网页（特别是大图像、视频）；客户端请求 URL；服务器需要快速确定页面是否在缓存中。解决方案：维护一个大小为
    N = 8M（M = 要插入的元素数）的位数组。从 0 到 N-1 选择 k 个独立的哈希函数。'
- en: '**CRC-32.** Another application of hashing is computing *checksums* to verify
    the integrity of some data file. To compute the checksum of a string `s`,'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**CRC-32。** 哈希的另一个应用是计算*校验和*以验证某个数据文件的完整性。要计算字符串 `s` 的校验和，'
- en: '[PRE9]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '**Perfect hashing.** See also GNU utility gperf.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**完美哈希。** 另请参见 GNU 实用程序 gperf。'
- en: '**Cryptographically secure hash functions.** SHA-1 and MD5\. Can compute it
    by converting string to bytes, or when reading in bytes 1 at a time. Program [OneWay.java](OneWay.java.html)
    illustrates how to use a `java.security.MessageDigest` object.'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**密码学安全哈希函数。** SHA-1 和 MD5。可以通过将字符串转换为字节或每次读取一个字节时计算它。程序[OneWay.java](OneWay.java.html)演示了如何使用
    `java.security.MessageDigest` 对象。'
- en: '**Fingerprinting.** Hash function (e.g., MD5 and SHA-1) are also useful for
    verifying the integrity of a file. Hash the file to a short string, transmit the
    string with the file, if the hash of the transmitted file differs from the hash
    value then the data was corrupted.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**指纹。** 哈希函数（例如，MD5 和 SHA-1）也可用于验证文件的完整性。将文件哈希为一个短字符串，将字符串与文件一起传输，如果传输文件的哈希与哈希值不同，则数据已损坏。'
- en: '**Cuckoo hashing.** Maximum load with uniform hashing is log n / log log n.
    Improve to log log n by choosing least loaded of two. (Only improves to log log
    n / log d if choose least loaded of d.) [cuckoo hashing](http://mybiasedcoin.blogspot.com/2007/06/cuckoo-hashing-theory-and-practice-part.html)
    achieves constant average time insertion and constant worst-case search: each
    item has two possible slots. Put in either of two available slots if empty; if
    not, eject another item in one of the two slots and move to its other slot (and
    recur). "The name derives from the behavior of some species of cuckoo, where the
    mother bird pushes eggs out of another bird''s nest to lay her own." Rehash everything
    if you get into a relocation cycle.'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**布谷鸟哈希。** 在均匀哈希的最大负载下为 log n / log log n。通过选择两者中负载最小的来改进为 log log n。（如果选择
    d 中负载最小的，则仅改进为 log log n / log d。）[布谷鸟哈希](http://mybiasedcoin.blogspot.com/2007/06/cuckoo-hashing-theory-and-practice-part.html)
    实现了常数平均插入时间和常数最坏情况搜索：每个项目有两个可能的插槽。如果空，则放入两个可用插槽中的任一个；如果不是，则将另一个插槽中的另一个项目弹出并移动到其另一个插槽中（并递归）。"这个名字来源于一些布谷鸟物种的行为，母鸟将蛋推出另一只鸟的巢来产卵。"如果进入重新定位循环，则重新散列所有内容。'
- en: '**Covariant equals.** [CovariantPhoneNumber.java](CovariantPhoneNumber.java.html)
    implements a covariant `equals()` method.'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**协变等于。** [CovariantPhoneNumber.java](CovariantPhoneNumber.java.html) 实现了一个协变的
    `equals()` 方法。'
- en: '**Last come, first served linear probing.** Modify [LinearProbingHashST.java](LinearProbingHashST.java.html)
    so that each item is inserted where it arrives; if the cell is already occupied,
    then that item moves one entry to the right (where the rule is repeated).'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**后来者先服务线性探测。** 修改[LinearProbingHashST.java](LinearProbingHashST.java.html)，使得每个项目都插入到它到达的位置；如果单元格已经被占用，则该项目向右移动一个条目（规则重复）。'
- en: '**Robin Hood linear probing.** Modify [LinearProbingHashST.java](LinearProbingHashST.java.html)
    so that when an item probes a cell that is already occupied, the item (of the
    two) with the larger current displacement gets the cell and the other item is
    moved one entry to the right (where the rule is repeated).'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**罗宾汉线性探测。** 修改[LinearProbingHashST.java](LinearProbingHashST.java.html)，使得当一个项目探测到已经被占用的单元格时，当前位移较大的项目（两者中的一个）获得单元格，另一个项目向右移动一个条目（规则重复）。'
- en: '**Indifference graph.** Given V points on the real line, its [indifference
    graph](https://en.wikipedia.org/wiki/Indifference_graph) is the graph formed by
    adding a vertex for each point and an edge between two vertices if and only if
    the distance between the two corresponding points is strictly less than one. Design
    an algorithm (under the uniform hashing assumption) to compute the indifference
    graph of a set of V points in time proportional to V + E.'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**冷漠图。** 给定实线上的 V 个点，其[冷漠图](https://en.wikipedia.org/wiki/Indifference_graph)是通过为每个点添加一个顶点并在两个顶点之间添加一条边形成的图，当且仅当两个对应点之间的距离严格小于一时。设计一个算法（在均匀哈希假设下），以时间比��于
    V + E 计算一组 V 点的冷漠图。'
- en: '*Solution.* Round each real number down to the nearest integer and use a hash
    table to identify all points that round to the same integer. Now, for each point
    p, use the hash table to find all points that round to an integer within one of
    the rounded value of p and add an edge (p, q) for each pair of points whose distance
    is less than one. See [this reference](http://11011110.livejournal.com/287956.html)
    for an explanation as to why this takes linear time.'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* 将每个实数向下取整到最近的整数，并使用哈希表来识别所有向同一整数取整的点。现在，对于每个点p，使用哈希表找到所有向p的取整值内的整数取整的点，并为距离小于一的每对点添加一条边(p,
    q)。参见[此参考链接](http://11011110.livejournal.com/287956.html)以了解为什么这需要线性时间。'
