- en: P2：Lecture 2 File Systems - ___main___ - BV1ED4y1R7RJ
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P2：Lecture 2 文件系统 - ___main___ - BV1ED4y1R7RJ
- en: Hello， hello。 Welcome。 Welcome back to day two， CS110。 So we have a lot to cover。
    We。 have a lot to cover every day。 That's one of the things about this class is
    that just。 kind of there's lots and lots of material。 So a couple things I put
    out the first assignment。 which we're going to talk about today。 So hopefully
    we'll get started on that if you。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 你好，大家好。欢迎回来，今天是CS110的第二天。今天我们有很多内容要覆盖。每天都有很多内容要学习。这门课的一个特点就是内容非常多。所以有几件事，我发布了第一份作业，今天我们会讨论这个作业。希望大家能开始做，如果你们还没有开始的话。
- en: haven't already。 Please re-download the assignment if you downloaded it last
    night or like early。 this morning。 I made a couple not critical changes but for
    instance I found out that for。 whatever reason when I the PDF if you open the
    PDF and try to copy some of the things。 from the some of the like commands from
    the PDF and then try to run it it will look like。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你昨晚或今天早上很早就下载了作业，请重新下载。我做了一些小修改，虽然不重要，但比如我发现，无论什么原因，当我打开PDF并尝试从PDF中复制某些内容（比如一些命令）并尝试运行它时，它看起来会像是。
- en: your program is not working but it's because there's some hidden character in
    like the。 pasted thing。 So that like confused me for a while I'm like I think
    my program is working。 but it didn't look like it and so there so re-download
    that I think I fixed that。 That。 would be a really annoying bug to know that your
    program is working fine and then it's。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 你的程序没有正常工作，但其实是因为粘贴的代码中有隐藏字符。这让我困惑了一段时间，我想我的程序是正常的，但看起来并不是，所以重新下载那个，我想我已经修复了这个问题。那个问题真的很烦人，明明知道程序是正常的，却发现并不是。
- en: just because you copied a code and they had hidden characters in it。 So please
    re-download， that。 Let's see Piazza is up and going but there's been a few questions
    on Piazza。 Piazza。 is probably your first line of defense as far as trying to
    get information from about the。 assignments and so forth。 I look at Piazza all
    the time and Tiazza look at Piazza all。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 只是因为你复制了代码，其中有一些隐藏字符。所以请重新下载它。我们来看一下Piazza是否正常运行，但在Piazza上已经有了一些问题。Piazza可能是你获取有关作业等信息的第一道防线。我一直在看Piazza，Tiazza也一直在看Piazza。
- en: the time and so it's a good place to kind of get started if you have a question。
    Obviously。 coming to Offsowers is a great place too but lots of questions get
    answered on Piazza before。 they get answered like in Offsowers or whatever and
    you might as well check there。 Alright。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 时间上，所以这是一个很好的地方来开始，如果你有问题的话。显然，来到Offsowers也是一个很好的选择，但很多问题在Piazza上就得到了回答，在它们在Offsowers或者其他地方回答之前，你不妨先去那里查看。好吧。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_1.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_1.png)'
- en: So on Monday we started out with UMass and the questions afterwards kind of
    indicated。 that I confused a bunch of you so I apologize about that。 I just wanted
    to redo just talk。 about UMass a little bit more or UMass excuse me a little bit
    more just to kind of give。 you the overview of it。 By the way this is not the
    most important part of the class so。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在周一我们开始讨论UMass，之后的一些问题表明我让你们有些困惑，因此我为此道歉。我只是想重新讨论一下UMass，或者说是重新讨论一下UMass，抱歉，我想给你们一个概述。顺便说一下，这不是课堂上最重要的部分。
- en: I wanted to start with the other day not mean to confuse anybody but I just
    wanted to talk。 about permissions a little bit more specifically as it relates
    to UMass so that I kind of unconfused。 you or you have get your questions answered
    right now。 Okay。 The UMass is all about allowing。 the user to control what the
    default permissions are for files。 Okay。 So it's not so much about。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我想从前几天开始，不是想让大家困惑，只是想再具体谈谈权限问题，尤其是它与UMass的关系，这样我就能让你们不再困惑，或者你们可以立即得到解答。好的，UMass的核心是让用户控制文件的默认权限。好的，所以它并不是完全关于。
- en: the program trying to set various permissions。 It's about the user saying hey
    look when a。 program creates a file for me I don't want it to give read access
    to anybody in the world。 That's up to the user to be able to like control that。
    So if you go to your terminal in fact。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序是在尝试设置各种权限。它的意思是用户可以说：“嘿，当一个程序为我创建文件时，我不希望它给任何人全世界的读取权限。”这由用户来控制。如果你去你的终端，其实。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_3.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_3.png)'
- en: we'll just do that right now and you type UMass if you hang on。 I don't know
    why am I hold on。 a sec。 No。 Hang on let me try this again。 Oh that's not good。
    Hold on a sec。 There we， go。 Okay。 There we go。 Okay。 If you type UMass then it
    will tell you your default user permissions， right。 And in fact remember 077 we'll
    go over the details in a minute means that the 0 the first。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在就做这个，输入UMass，如果你稍等一下。我不知道为什么我要等一下。等一下。没有，等一下让我再试一次。哦，这不好。等一下。好了，开始了。好的。如果你输入UMass，它会告诉你你的默认用户权限，对吧？事实上，记住077，我们稍后会详细讲解，这意味着第一个0。
- en: the second 0 after the 0 meaning it's an octal number the actual this 0 here
    means that the user。 can write whatever permissions it wants。 Okay。 So it'll be
    read write execute whatever permissions。 the program tries to write it will be
    able to write it。 The 7 in the 7 means that the group。 and the any other people
    not not the owner cannot write directly to the or cannot actually。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个0表示它是一个八进制数字，实际上这个0表示用户可以设置任何权限。好的。所以它可以是读、写、执行，或者其他权限。程序尝试写入时，它将能够写入。7中的7表示组和其他人（不是所有者）不能直接写入，或者实际上不能写入。
- en: have those permissions set。 Okay。 So let me give you an example。 All right。
    If we actually if I do。 the following where I type touch let's say test 1。txt
    and then do ls-l test 1。txt。 Okay。 Notice that it gave read write permissions
    when you take you touch it doesn't do the execute。 permissions anyway。 The touch
    file the touch will attempt to do the user to do the read write for。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 已经设置了这些权限。好的。让我给你举个例子。好吧。如果我们实际执行以下操作，输入touch，比如test1.txt，然后执行ls -l test1.txt。好的。请注意，它为文件设置了读写权限，当你使用touch时，它不会设置执行权限。无论如何，touch文件会尝试为用户设置读写权限。
- en: anybody is allowed to。 You mask because 077 says you can't do that。 Okay。 But
    if I changed UMass to。 0 okay well that would not now if I just actually check
    it right it's 0 which means that if I tried。 to set a particular permission for
    the owner the or sorry the yeah the owner anybody else and the。 group it will
    now allow me to。 So if I do touch test 2。txt let's see if this is different test
    2。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 任何人都可以做。你掩码是因为077表示你不能这样做。好的。但是如果我把UMass改成0，好的，这样就不行了。如果我实际上检查它，没错，是0，这意味着如果我尝试为所有者、或者抱歉，是的，为所有者、其他人和组设置特定的权限，它现在会允许我这样做。所以如果我做touch
    test2.txt，让我们看看这是否有区别，test2。
- en: txt。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: txt。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_5.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_5.png)'
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_6.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_6.png)'
- en: Guess what it set all the permissions that way。 Okay。 So it's all about the
    user you having control。 over what gets set regardless of what the program tries
    to set。 Okay。 So in other words the touch。 program said set the read write permissions
    for the owner every the group and everybody else。 and the original UMass blocked
    out the setting of the permissions for the group and anybody else。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 猜猜看它是如何设置所有权限的。好的。所以一切都与用户控制有关，控制着无论程序如何设置权限，都会由你来设置。好的。换句话说，touch程序表示为所有者、组和其他人设置读写权限，而原始UMass则阻止了对组和其他人的权限设置。
- en: Okay。 Does that make sense about what's going on now it's basically the UMass
    is saying you as the。 user get to control this if another program tries to set
    the permissions it won't let it or it will。 let it depending on what your situation
    is。 Yeah。 Question。 Touch actually creates like an empty file。 Yeah。 That's all。
    Yeah。 The first one here。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。现在明白了发生了什么吗？基本上，UMass表示你作为用户可以控制它。如果另一个程序尝试设置权限，它不会允许，或者根据你的情况它会允许。对，问题。Touch实际上是创建一个空文件。是的，仅此而已。是的，UMass中的第一个。
- en: Oh the first one in UMass is the it's the fact that it is， an octal number。
    Yeah。 I believe that's what it is anyway but anyway that you put a zero before。
    three digits and it means it's an octal number in Unix talk。 It's really normal
    it is。 What other。 question is that？ Yeah。 Right。 So this is a good question。
    So the question was wait a minute wait。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，UMass中的第一个是它是一个八进制数。对。我相信就是这样，反正你在三位数前加0，表示它是一个Unix中的八进制数。这是非常常见的。那还有什么其他问题？对。所以这是一个很好的问题。问题是等一下，等一下。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_8.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_8.png)'
- en: a minute。 I thought there are all three ones where the bits were on。 I'm gonna
    go over that in a second。 UMass is the reverse。 Why？ I couldn't find out。 Like
    I did all the sorts of searching。 I'm like why would， this be the case？ Not exactly
    sure。 The way you use it。 I'll show you in a second。 Very good question。 Yeah。
    So all of them are on。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一分钟。我以为所有三位都是1，也就是位都打开了。稍后我会讲解这个。U掩码是反转的。为什么？我查不出来。我做了很多搜索，我在想为什么会是这种情况？不太清楚。你怎么使用它，我会稍后展示给你。非常好的问题。是的。所以所有位都打开了。
- en: Why aren't they in the X file？ These files were created various other， reasons。
    Like other programs created these ones。 Yeah。 So and it's it's the default for
    touch for instance。 doesn't ever try to set the executable。 So that's that。 Okay。
    Let's go over some more details about。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么它们不在X文件里？这些文件是由各种其他原因创建的。比如其他程序创建了这些文件。是的。所以，它就是像`touch`命令的默认行为，不会尝试设置可执行权限。就这样。好的，让我们来详细看看一些其他的内容。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_10.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_10.png)'
- en: any other big ones on this one。 Again this is not the most important part of
    this class so I don't。 want to spend an hour kind of going over the nuances of
    it except to say that there are member。 there are three parts to the permissions。
    There's the owner in red。 Sorry for colorblind people。 I。 apologize。 There's owner
    in red and then I put green for the for the group and then blue for the。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 还有什么其他重要的事情吗？再说一次，这不是这门课程中最重要的部分，所以我不想花一个小时去讨论它的细节，除了说，权限有三个部分。第一个是所有者，我用红色表示。抱歉，色盲的朋友们，我道歉。所有者是红色的，然后我用绿色表示组，最后蓝色表示其他。
- en: other。 Anybody else is not in your group and not you。 And that's what it is。
    And the by the permissions， are just bits right。 So if you have a permissions
    if you want permissions R W dash R W dash R W dash。 that would be one one zero
    one one zero one one zero or well one one zero happens to be octal six and。 then
    octal six and octal six。 Okay so zero six six six would be the permissions for
    R W dash R W dash。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 其他。其他人不在你的组内，也不是你。就这样。根据权限，这些只是位，对吧？所以如果你有一个权限，你想要的权限是R W - R W - R W -。那么它就是一一零一一零一一零，或者说，一一零恰好是八进制六。然后是八进制六和八进制六。好的，所以零六六六将是R
    W - R W -的权限。
- en: R W dash。 Okay。 Now the mask does the reverse like it it's the reverse and again
    I'm not exactly sure why。 I'm also not sure。 Oops。 I'm also not sure why the this
    little black。 Hang on。 Let me see if I can't get。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: R W -。好的。现在掩码做反转，就像它是反转一样，但我不完全确定为什么。其实我也不确定。哎呀。我也不确定为什么这个小黑色。等等。让我看看我能不能弄明白。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_12.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_12.png)'
- en: rid of that for a sec。 That is kind of weird。 Maybe that he's。 Hang on。 Let
    me try this。 Nope。 Well。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 先把这个去掉。这有点奇怪。也许是他。等等，让我试试这个。没有。好吧。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_14.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_14.png)'
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_15.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_15.png)'
- en: okay it's just going to stay there for a while。 Um， hang on。 Yeah， I'm not sure
    why。 Well anyway。 The。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，它会在那儿停留一会儿。嗯，等等。是的，我不确定为什么。好吧，不管怎样。那个。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_17.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_17.png)'
- en: so the U mask is actually applied as follows。 Okay。 so if the U mask is zero
    zero seven or zero seven， seven。 In other words， act all zero seven seven。 That
    would be this U mask and it basically says， you're not allowed to create permissions
    for any of the you the group or the other。 That's the bottom， line for it。 And
    what it does and kind of stinks that this is we've got this weird black box in
    here。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以U掩码实际上是这样应用的。好的，如果U掩码是零零七或零七七。换句话说，所有的零七七。那就是这个U掩码，基本上意味着，你不能为你、组或者其他任何人创建权限。这就是它的底线。它的作用就是这样，尽管这其中有个奇怪的黑盒子。
- en: but it basically does whatever you're attempting to set it bitwise and zip with
    the inverse of the。 U mask and that's how it actually gets the actual permissions
    that are set。 Okay， so that's how it。 goes and I did a little example here of
    if you're trying to set this R W dash R W dash R W dash and。 you have a U mask
    that's zero and or zero and all ones。 Then it does the inverse of it and。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 但它基本上会做你试图设置的操作，通过按位与运算并与U掩码的反转结合，这就是它实际上设置权限的方式。好的，就是这样。我这里做了一个小示例，如果你试图设置这个R
    W - R W - R W -，并且你有一个U掩码是零或零和所有的1。然后它会做反转操作。
- en: it against that and you get the permissions out like this。 That's all there
    is to it。 What other。 questions do you have on this stuff？ Yeah。 What is it？ Yeah，
    so let's do let me show you。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 它与此对比，你就会得到这样的权限。这就是全部内容。关于这方面你还有其他问题吗？嗯？什么问题？对，那就让我给你展示一下。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_19.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_19.png)'
- en: That's a good question about what is an actual group here and again， I wish
    I could get rid of。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个好问题，关于什么是真正的组，再说一次，我希望我能去掉。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_21.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_21.png)'
- en: this little thing。 I don't really know why it's even there but oh， ah-ha。 I
    moved it。 I moved it。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个小东西。我真的不知道它为什么在那里，但哦，啊哈。我移动它了。我移动它了。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_23.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_23.png)'
- en: Okay， it's gone。 All right。 All right。 I don't know why it's there， but so if
    you if you do the。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，它没了。好了。好了。我不知道它为什么在那里，但如果你做的话。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_25.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_25.png)'
- en: following and say groups， these are all the group。 I guess the hang on。 It's
    just group。 Group is it？
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 跟随并说这些组，这些都是组。我猜是挂起的。它只是组。组就是它吗？
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_27.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_27.png)'
- en: No。 I thought it was groups。 Anyway， you can find out what groups you're in
    and if you if you。 look at particular files， the second one over here is the actual
    group that your that file。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 不。我以为是组。无论如何，你可以找出你属于哪些组，如果你查看特定文件，第二个文件是你这个文件的实际组。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_29.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_29.png)'
- en: happens to belong to。 So all does each file has a user and then has a group
    that many users may be。 able to use for it。 I'm not sure what the operator one
    in particular is， but that's what it is。 What other question on this？ Any more
    hands？ Okay， so you mask is not that important。 It's just kind。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 恰好属于。每个文件都有一个用户，然后有一个组，许多用户可能会用到它。我不确定操作员特别是什么，但它就是这样。如果有其他问题，大家有什么问题吗？还有手吗？好的，你的U
    mask并不是那么重要。它只是那样的。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_31.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_31.png)'
- en: of a nuanced thing。 I wanted to show you。 All right。 Okay， so if you here's
    another just another。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个细致的事情。我想给你展示一下。好的。如果你这是另一个，另一个。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_33.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_33.png)'
- en: example， I guess about this。 Basically， if you have the file that we created
    the other day， right。 where it just basically tries to set a certain permissions，
    in this case， 0644。 and your U mask is like， if it's zero， it will enable you
    to set all those permissions correctly。 If you change your U mask， you can the
    same program inherits that U mask and then applies it。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我想是这个。基本上，如果你有我们前几天创建的文件，对吧。它基本上试图设置某些权限，在这种情况下是0644。你的U mask如果是零，它将允许你正确地设置所有这些权限。如果你改变了U
    mask，你可以通过相同的程序继承这个U mask并应用它。
- en: and will only allow you to set the permissions here。 Now。 a particular program
    can modify the U mask。 So if the program modifies the U mask。 then it will be
    able to write to it。 But it's all about。 defaults and as long as you know what
    the program is attempting to do， you as the user can control。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 并且只允许你在这里设置权限。现在。一个特定的程序可以修改U mask。所以如果程序修改了U mask，它就能够写入它。但这一切都与默认值有关，只要你知道程序试图做什么，作为用户你就可以控制它。
- en: it。 That's the bottom line there。 Okay。 All right。 Unix file systems are interesting。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 它。这就是底线。好的。好了。Unix文件系统很有趣。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_35.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_35.png)'
- en: Okay。 Assignment one。 How many people actually looked at it already？ Oh， half
    of you。 Okay。 If that。 The first assignment is， well， first of all， we haven't
    covered enough。 stuff for you to get to like do new CS 110 stuff for the first
    assignment。 But what we wanted to do。 is give you a refresher on CS106B and CS107
    and a little bit more， hey， you got to go learn some C。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。作业一。实际上有多少人已经看过了？哦，你们一半。好的。如果是这样。第一个作业是，首先，我们还没有覆盖足够的内容让你去做新的CS 110内容的作业。但我们想做的是，给你们一个关于CS106B和CS107的复习，并且稍微再提一下，嘿，你们得去学点C语言。
- en: plus plus things you didn't learn in 106B。 Okay。 So that's what this assignment
    is all about。 All。 right。 The assignment is meant to get you up to speed on all
    of this coding that you need to be able。 to do for this class。 Okay。 So some of
    you have already emailed me and go， oh my gosh， I haven't。 taken 107 in like two
    and a half years and whatever。 What am I going to do？ Well。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你在 106B 课程中没有学到的内容。好吧。这就是这个作业的核心内容。好的。这个作业的目的是让你赶上所有你需要为这门课做的编码技能。好吧。你们中的一些人已经给我发过邮件，说，天哪，我已经有两年半没学过
    107 了，怎么办呢？那么。
- en: this assignment is， going to get you back at the speed。 All right。 The assignment
    itself， okay。 is kind of a fun， assignment。 It's basically called the six degrees
    of Kevin Bacon。 And why is it Kevin Bacon？ Well， Kevin Bacon happens to have been
    in a ton of movies。 And so if you try to link Kevin Bacon to， another actor。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个作业将帮助你恢复速度。好的。作业本身，好的，是一个挺有趣的作业。它基本上叫做凯文·贝肯的六度分隔法（six degrees of Kevin Bacon）。那为什么是凯文·贝肯呢？嗯，凯文·贝肯恰好出演了很多电影。所以，如果你试图将凯文·贝肯与另一个演员联系起来。
- en: it's very hard to find more than one or two movies where Kevin Bacon was in
    this。 movie with a bunch of actors。 They were in a bunch of different movies。
    And then some other。 actor happened to be in one movie with one of those actors。
    And you can link them together。 like with one movie difference。 Okay。 And so that's
    how the program actually works。 You can。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 很难找到凯文·贝肯（Kevin Bacon）出演的超过一部或两部电影，里面有一群演员，他们出现在许多不同的电影中。然后其他某个演员恰巧和其中一个演员出演了某部电影。你可以通过它们连接起来，像是通过一部电影的差异。好吧。所以这就是程序实际工作的方式。你可以。
- en: you run it by saying dot slash search， which is one of the one of the files
    you will be working on。 And then you type two names in， in this case it's Meryl
    Streep and Jack Nicholson。 And by the way。 many actors， because you can have many
    people with the same name， are in the IMDB internet movie。 database system with
    a little Roman numeral next to their name in parentheses。 That just means。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你通过输入 `dot slash search` 来运行它，这是你将要处理的文件之一。然后你输入两个名字，在这种情况下是梅丽尔·斯特里普和杰克·尼科尔森。顺便提一下。许多演员，因为可能有很多同名的人，都在
    IMDB 互联网电影数据库中，名字旁边有一个小小的罗马数字括号。这仅仅是表示。
- en: that there's two or three or more Jack Nicholson's and you have to type that
    in。 So you have to be。 a little bit careful。 Madonna， for instance， is another
    one。 If you're testing your code for this。 before you test a particular name that
    you haven't tested yet， go and IMDB and look them up。 And if。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 那里可能有两个或三个以上的杰克·尼科尔森，你必须输入那个。所以你必须稍微小心一点。例如，麦当娜（Madonna）是另一个。如果你在测试这个代码时，在你测试一个尚未测试的特定名字之前，去
    IMDB 上查找一下它们。如果。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_37.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_37.png)'
- en: they have a little parentheses like that next to their name， you have to type
    that one in or。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 如果他们的名字旁边有一个类似括号的符号，你必须输入那个。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_39.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_39.png)'
- en: the Roman numeral。 Otherwise it will say Madonna is not in the search in the
    files。 And you'll think， your program is broken when really it's just you didn't
    type it in wrong。 Right。 Okay。 So that's how。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 罗马数字。否则，它会说麦当娜不在搜索文件中。你会觉得程序坏了，实际上只是你没有正确输入对吧？好吧。所以就是这样。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_41.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_41.png)'
- en: it works。 You can type dot slash search， Meryl Streep and Jack Nicholson。 And
    it works fine。 Let's。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 它能工作。你可以输入 `dot slash search`，梅丽尔·斯特里普和杰克·尼科尔森。它可以正常工作。让我们。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_43.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_43.png)'
- en: actually do this。 Oh， no， here we go again。 Hang on。 There we go。 All right。
    There we go。 All right。 Let's see。 We will do assignments， assignment one。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以实际做这个。哦，不，又来了。等等。好了。好了。好了。我们来看看。我们将做作业，作业一。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_45.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_45.png)'
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_46.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_46.png)'
- en: And you can test this out yourself by doing samples， samples slash search。 And
    it's got the。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过进行示例，输入 `samples slash search` 来测试这个。它有。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_48.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_48.png)'
- en: search solution。 And if you type Meryl Streep and you to streak， streak， streak，
    there might be a。 Meryl Streep。 I don't know。 And then you type Jack Nicholson
    parentheses one， right。 It should say。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 搜索解决方案。如果你输入梅丽尔·斯特里普（Meryl Streep），然后你输入 streak，streak，streak，可能会有一个。梅丽尔·斯特里普。我不确定。然后你输入杰克·尼科尔森（Jack
    Nicholson），括号里写着一，右吗？它应该会显示出来。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_50.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_50.png)'
- en: that Meryl Streep was in close up with Jack Nicholson。 Okay。 Let's try some
    others。 Try to fool the。 system。 Give me two names of actors we might have heard
    of just just so but give me two names。 Jerry Kane。 Jerry Kane who talked to class
    before。 I think there might be more than one actually。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 梅丽尔·斯特里普曾与杰克·尼科尔森有过对手戏。好的，试试别的。试着欺骗这个系统。给我两个我们可能听过的演员名字，随便两个。杰瑞·凯恩。杰瑞·凯恩，之前和我们班讲过的那位。我觉得可能不止一个。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_52.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_52.png)'
- en: And then let's try Meryl Streep。 Why not？ He probably wasn't in a， what did
    I do？
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们试试梅丽尔·斯特里普。为什么不呢？他可能没出演过，嗯，我做错了什么？
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_54.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_54.png)'
- en: Forgot the quotes here。 Thank you。 There we go。 Okay。 So Jerry Kane。 one not
    the lecturer who's here。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 忘了加引号，谢谢。好了。这样就好了。所以是杰瑞·凯恩。不是在这里讲课的那位。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_56.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_56.png)'
- en: was in a movie called No Rules with somebody named Don Fry。 Don Fry was in the
    Aunt bully with Meryl， Streep， right？ It's going to be really。 it's actually really
    hard to find more than one or two different， movies。 Give me some other names
    of people that we've heard of。 Sorry？ Michael Jordan。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 他参演过一部叫做《没有规则》的电影，和一个叫唐·弗莱的人一起演的。唐·弗莱曾与梅丽尔·斯特里普一起出演《姑妈的霸凌》，对吧？其实真的很难找到一两部不一样的电影。给我一些我们听过的其他人的名字。抱歉？迈克尔·乔丹。
- en: Michael Jordan was in what？ Here Jordan， or Michael Jordan？ He was in that sort
    of space jam。 Okay。 There's probably more than one but let's try this。 Jordan。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 迈克尔·乔丹是在哪个？这里的乔丹，还是迈克尔·乔丹？他参演过《太空大灌篮》。好的，可能不止一个，我们试试这个。乔丹。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_58.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_58.png)'
- en: and then anybody else？ Keanu。 Is that， did I spell it right？
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后还有其他人吗？基努。是这个拼写对吗？
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_60.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_60.png)'
- en: I think so。 Okay。 Couldn't find Michael Jordan because there's probably more
    than one。 So we will do， let's just see if it's the first one。 I don't know。 There
    we go。 Michael Jordan's in Blink， who knew。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 我想是这样。好的。没找到迈克尔·乔丹，可能不止一个。所以我们就看看是不是第一个。应该不是。好了。迈克尔·乔丹出现在《瞬间决定》，谁知道呢。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_62.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_62.png)'
- en: The Rick， I don't know how it sounds。 And that other person with chain reaction。
    So it's hard。 right？ You can go back a long way。 So let's see if Michael Jordan
    and let's see。 How about Charlie Chaplin？
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 那个“瑞克”，我不确定它听起来怎样。还有那个与连锁反应有关的其他人。所以很难，对吧？你可以追溯很久。让我们看看迈克尔·乔丹，或者试试查理·卓别林？
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_64.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_64.png)'
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_65.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_65.png)'
- en: All right。 That was a while ago， right？ And maybe I wonder if， I haven't tried
    that one yet。 That's interesting。 That's interesting。 We'll let it go for another。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧。那是很久以前的事了，对吧？我在想，可能是，我还没有试过那个。很有趣。真的很有趣。我们再等一下。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_67.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_67.png)'
- en: second or so。 It might be that， hmm， I'm not sure what's going on with that。
    Let me try。 let me try it， everyone。 So I should try these things out before。
    But let's just try Meryl Streep。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 大概是几秒钟。可能是，嗯，我不确定是什么问题。让我试试。让我试试，大家。之前应该试这些东西的。但我们再试一次梅丽尔·斯特里普。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_69.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_69.png)'
- en: And， yeah， that's interesting。 I wonder if Charlie Chaplin's not， well， it shouldn't，
    hmm。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这很有趣。我想知道查理·卓别林是不是，嗯，应该不会，嗯。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_71.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_71.png)'
- en: I don't know。 That's weird。 How about Ronald Reagan？
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道。那很奇怪。那罗纳德·里根呢？
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_73.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_73.png)'
- en: I think something， I think it's the file system actually。 Hang on。 Let's go
    try again and see if。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得是文件系统的问题。稍等一下。我们再试试，看看会不会。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_75.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_75.png)'
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_76.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_76.png)'
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_77.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_77.png)'
- en: I don't know。 I don't know。 That's weird。 Well， anyway， you get kind of the
    idea。 You can。 even though it's a little crazy。 But you can also do things like
    you can do IMDB tests。 which are going to do first， which would be something like
    just check and see it。 Let's just， check。 Oh， you know， is it Charles？ Now I think
    it's， I might be Charles。 Ah， there we go。 Maybe。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道。我不知道。这很奇怪。好吧，无论如何，你大致明白了。你可以。即使有点疯狂，但你也可以做一些事情，比如进行 IMDB 测试。首先做什么，比如检查并查看它。我们就检查一下。哦，你知道吗，是查尔斯？现在我想它可能是查尔斯。啊，来了，可能是。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_79.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_79.png)'
- en: that was the issue before。 Okay， hold on， hold on， hold on。 I don't know why
    I didn't tell。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是之前的问题。好的，等一下，等一下，等一下。我不知道为什么我没告诉你。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_81.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_81.png)'
- en: us Charles ever。 There we go。 Okay。 Well， okay。 So here's one problem with the
    IMDB database。 Charles， Charlie Chaplin didn't， wasn't alive in 2006。 He died
    in like 1970 or something。 But he was， whenever somebody's in like clips in a
    movie， they also put him in here too。 So it's a little bit。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看查尔斯。好了。好的。那么 IMDB 数据库有一个问题。查理·卓别林并没有在 2006 年活着。他大概在 1970 年或那时去世了。但是每当有人在电影中出现片段时，他们也会把他放在这里。所以它有点。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_83.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_83.png)'
- en: little bit trickier。 Anyway， that's it。 But you can do IMDB cert test。 And if
    we do。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 稍微复杂一点。无论如何，就是这样。但你可以做 IMDB 证书测试。如果我们做的话。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_85.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_85.png)'
- en: Charles Chaplin， then it will give you the fact that he was in thousands and
    thousands of movies。 and it will list them， list a bunch of them， not all of them。
    And you can test your program that way。 Okay。 So that's kind of the basic idea
    about the。 about how this works。 Okay。 Let's talk about a。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 查理·卓别林，那么它会告诉你他参演了成千上万的电影，并列出其中一部分，不是全部。你可以通过这种方式测试你的程序。好的。那么这就是关于这个工作原理的基本想法。好的，接下来我们来讨论一个。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_87.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_87.png)'
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_88.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_88.png)'
- en: little bit more details。 There are two big files， big being hundreds of thousands
    of names that。 are called， one's called the actor file， one is called the movie
    file。 And they are set up such。 that you can do binary searching on them。 Okay。
    The actor file has a whole bunch of offsets to。 where various actors are located
    in this file。 And then there they have the name and the actor and。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 详细一点。这里有两个大文件，"大"指的是包含数十万条名字的文件。一个叫做演员文件，另一个叫做电影文件。它们的设置方式是，你可以对其进行二分查找。好的。演员文件包含了一堆偏移量，指向文件中不同演员的位置。然后它们列出了演员的名字。
- en: all the movies that the actor was in。 And the movie database is kind of the
    reverse。 It's got。 movie， it's got a whole bunch of offsets into this file that
    point to movies。 And then the movie。 say what actors they were in。 Okay。 These
    files are big enough that you do not want to read them。 all in at once， number
    one。 But we've actually， we've actually put a lot of that under the hood。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 所有演员参演的电影。电影数据库则是相反的。它包含电影，和指向电影文件的多个偏移量。然后电影会标明演员。好的，这些文件的大小足够大，以至于你不想一次性读取它们。首先。但实际上，我们已经把很多内容封装在了背后。
- en: for you。 You don't need to worry about like the fact that you're not reading
    these。 Just know。 that you're not reading， you're actually jumping to a place
    in the file and reading a little bit。 But the important part about these files
    is that you can do a binary search on them。 They are set。 up in alphabetical order
    such that you can do a binary search。 Awesome binary searches， as you know。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 对你来说，你不需要担心你没读到这些内容。只需要知道你实际上并不是在读取，你只是跳转到文件中的某个位置并读取一点内容。但这些文件的关键之处在于，你可以在它们上进行二分查找。它们按字母顺序排列，以便你可以进行二分查找。二分查找非常棒，正如你所知。
- en: from CS106B are very fast because they break things into chunks and divide and
    conquer， etc。 So you have to figure out how to index correctly into this weird
    file that's got all these offsets。 in it with a whole bunch of different kind
    of nuances to it。 And that's the CS107 part。 Okay。 That's the part where you're
    going to be going， oh boy， I got to remember， I got to remember how。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 从 CS106B 的课程中非常快速，因为他们把问题分解成块，然后采用分治法等等。所以你得弄清楚如何正确地索引这个奇怪的文件，它包含了所有这些偏移量，里面有许多不同的细节。这就是
    CS107 的部分。好的。这是你会说，“哦，天啊，我得记住，我得记住怎么做。”
- en: to do pointer math and pointer arithmetic and indexing into things and so forth。
    So and off by one。 errors and all that kind of stuff。 But that's the CS107 part。
    Okay。 There's a C++ part where you're。 going to use the standard template library
    which is similar but different from the Stanford library。 which you used in like
    106B or 106A。 Specifically you're going to have to use this function called。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要做指针运算、指针算术运算，进行索引等操作。还要处理“越界”错误，等等。但这些是 CS107 的内容。明白吗？C++ 部分是，你将使用标准模板库，它类似于你在
    106B 或 106A 中使用的斯坦福库，但又有些不同。具体来说，你需要使用一个函数。
- en: lower bound which is a standard template library function which does the binary
    search for you。 In fact there was a question on Piazza already that said， hey，
    can we do recursion to do this。 searching？ And I said， whoa， we know recursion
    necessary for searching because lower bound does。 the recursion， does the recursion，
    but it does the searching the binary search for you。 Okay。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: lower bound 是一个标准模板库函数，它为你执行二分查找。事实上，Piazza 上已经有一个问题问了，嘿，我们可以用递归来做这个查找吗？我说，哇，我们知道查找不需要递归，因为
    lower bound 会执行递归，它做的是二分查找。明白了吗？
- en: The idea is you set up the lower bound function and it searches through your
    data but you have to set。 it up correctly。 Okay。 But that's the kind of 106B plus
    sort of stuff that you're going to be working on。 Okay。 This lower bound function，
    it's a little bit interesting。 It returns what we call an iterator。 and an iterator
    for our purposes at least for this assignment is a pointer because an iterator。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这个概念是你设置 lower bound 函数，它会在你的数据中进行查找，但你必须正确设置它。明白吗？但是这些都是 106B 课程中你将要处理的内容。这个
    lower bound 函数，它有点有趣。它返回的是我们所说的迭代器。至少在这个作业中，迭代器相当于指针，因为它是一个迭代器。
- en: allows you to add to it and allows you to allows you to go to the next one in
    the line of whatever。 you're iterating through。 That's what it does。 You will
    be able to learn those sorts of things。 This， is what this week is all about。
    Oh， I don't know what an iterator is yet。 Let me learn what it is。 Okay。 Once
    you have figured all that out， well， you've got this。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许你向其中添加元素，并允许你继续迭代列表中的下一个元素。这就是它的作用。你将能够学到这些内容。这就是这一周的重点。如果你还不知道什么是迭代器，那就去了解一下。明白吗？一旦你搞清楚了这一切，你就能应对自如了。
- en: you're able to search through this， database。 Well， now you actually have to
    link after two。 after one to actor two。 Well， how are you， going to do that？
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 你能够在这个数据库中进行搜索。好了，现在你实际上必须将一和二连接起来。好吧，怎么做呢？
- en: You're going to do a breadth first search。 Ah， more 106B stuff。 Right。 You're。
    going to have to remember how to do a breadth first search。 I'll give you a hint。
    You probably。 want to use a queue or in our case a list， which is a queue by another
    name as such。 So those are。 the big things about the assignment。 Okay。 Now， let's
    talk a little bit more about this lower bound。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 你将进行广度优先搜索。啊，又是 106B 的内容。对吧。你需要记住如何做广度优先搜索。我给你个提示，你可能想使用队列，或者在我们的例子中使用列表，它实际上是队列的另一种表现形式。所以这些就是作业中的重点。好了，现在我们来多聊聊这个
    lower bound。
- en: for a couple minutes。 The assignment itself says I am requiring that you use
    the STL lower bound。 algorithm。 Oh， great。 So you've got to use that to perform
    binary searches and that you use C++。 lambdas， also known as anonymous functions
    with capture clauses to provide nameless comparison。 functions。 And you're thinking
    to yourself， I have never seen that before， right？ We haven't even。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 花了几分钟。作业本身要求你使用 STL 的 lower bound 算法。哦，太好了。你必须用它来执行二分查找，同时你还要使用 C++ 的 lambda，也就是匿名函数，带有捕获子句来提供无名的比较函数。你可能会想，我以前从未见过这个，对吧？我们甚至还没有...
- en: learned it yet。 Well， I'm going to talk to you a little bit about that right
    now。 A C++ lambda。 is it's a new， it's a， it's a new concept probably， if although
    if you've done any， JavaScript。 you have certainly used these before， although
    you might not have known what they were， called。 And what it is， is a function
    that is placed in line as a parameter to another function， okay。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你还没有学会吗？好了，我现在要稍微讲一下这个概念。C++ 中的 lambda，它是一个新的概念，如果你曾经做过 JavaScript 的话，你肯定用过这些，尽管你可能不知道它们的名称。它是一个被作为参数内联传递给另一个函数的函数，明白吗？
- en: which it， which expects the parameter itself to be a function。 So it's kind
    of inception， right？
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 它期望的参数本身是一个函数。所以这有点像是“盗梦空间”，对吧？
- en: You did all this in 107 with function pointers。 Okay。 So if you remember 107，
    you talked。 about function pointers。 This is a function pointer that's in line
    and not like another function that。 you're setting up。 Okay。 So for instance，
    you remember the Q sort function from 107， right？
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 你在107课程中已经学过函数指针了。好的。所以如果你还记得107，你谈到过函数指针。这是一个内联的函数指针，而不像你设置的其他函数。好的。例如，你还记得107中的Q
    sort函数吧？
- en: The last。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 最后。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_90.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_90.png)'
- en: parameter in here is a， oops， not good， is a comparison function that you have
    to define and。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的参数是a，哎呀，不对，是一个你必须定义的比较函数。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_92.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_92.png)'
- en: you pass it in to Q sort。 Okay。 Q sort has no idea how that function works。
    It just knows that I have， two pointers that I'm going to pass them to this function。
    I'm going to get back which ones the， I'm going to get back a zero。 a negative
    one or a one to say whether it's smaller， bigger， the same。 All it knows， right？
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 你把它传给Q sort。好的。Q sort根本不知道这个函数是如何工作的。它只知道，我有两个指针，我会把它们传给这个函数。我会得到一个零，一个负一或一个一，表示它是更小的、更大的，还是相等的。它就知道这些，对吧？
- en: And that's what function pointers are all about。 You give， give this other，
    function。 the function pointer that says， "Hey， I'm going to do something for
    you， use it。" That's。 all it's about。 All it is。 Okay。 That's what that's all
    about。 Okay。 Let's look at a little program。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是函数指针的全部内容。你给这个其他函数，传入一个函数指针，告诉它，“嘿，我会为你做点什么，使用它吧。” 就是这么简单。就这样。好吧。让我们看一个小程序。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_94.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_94.png)'
- en: about this。 Okay。 I just made up some dumb program to do the following。 Okay。
    In this program， okay。 I created two， well， let's start with this one。 I created
    a function called modified VEC。 And what it does， we're now in C++ land， so it
    takes in a C++ vector by reference。 Okay。 It takes in a value and it takes in
    this which is C++ for function pointer。 You can think of it。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这个。好的，我刚做了一个简单的程序来实现以下内容。好的。在这个程序中，好吧。我创建了两个，嗯，我们从这个开始。我创建了一个叫做modified VEC的函数。它的作用是，我们现在在C++的世界里，所以它通过引用接收一个C++向量。好的。它接收一个值，还接收一个this，这是C++中函数指针的表示方式。你可以这么理解。
- en: that way。 Okay。 What it is is it says， "Give me a function that returns an integer
    and takes。 two integers as parameters。" Okay。 And what it's going to do is it's
    going to basically loop through。 the vector and then pass in that vector element，
    a reference to it as it turns out， and the， well。 it's actually going to get to
    reference out。 It's going to pass in the value。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样。好的。它的意思是，它要求给我一个返回整数并接受两个整数作为参数的函数。好的。它要做的是基本上遍历向量，然后传入该向量元素（实际上是传引用），然后，嗯。实际上它会得到引用。它将传入该值。
- en: it's going to pass in the value in the vector and then it's going to apply that
    operation to it。 That's all it's doing。 It's basically updating the vector with
    new values based on some operation。 Okay。 Well， what are the two operations I
    did？ I happen to make one called add which basically。 returns x plus y when you
    pass it in。 Pretty simple。 And then subtract which does x minus y。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 它将传入向量中的值，然后应用那个操作。这就是它所做的。它基本上是根据某些操作更新向量中的新值。好的。那么，我做了哪两种操作？我碰巧做了一个叫做add的操作，基本上就是传入后返回x加y。非常简单。然后是subtract，它做的是x减y。
- en: That's all it does。 Okay。 Well， what is it actually， what are we actually doing
    in main？
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这么简单。好的。那么，我们在main函数中实际上做了什么？
- en: We are getting some stuff out of the command line。 And then we are creating
    a vector and then。 calling the operator inside this modified vector function。
    Okay。 I'm saying modify the vector。 pass in the vector， pass in the value that
    I'm typing on the command line to do the operation with。 and then the function
    itself。 Okay。 A key part of this is that when you call this modified。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从命令行中获取一些内容。然后我们创建一个向量，并调用这个修改过的向量函数里的操作。好吧。我在说修改这个向量，传入向量，传入我在命令行上输入的值来进行操作，然后是函数本身。好的。关键部分是，当你调用这个修改后的。
- en: VEC function， even though add is a function itself， it is not getting called
    immediately。 That's a key key part of this。 When you say modify back when you
    pass in parameter one。 parameter two， parameter three， this is a parameter that
    is not being called until modified VEC。 actually calls it directly。 Okay。 That's
    how this is。 That's how that's working。 Okay。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: VEC 函数，尽管 add 是一个函数，它并不会立即被调用。这是一个关键点。当你说修改时，当你传入参数一、参数二、参数三时，这个参数并不会被调用，直到修改后的
    VEC 实际上直接调用它。好吧，事情就是这样。它是这样工作的。好吧。
- en: And you can test it out by saying like function pointer add 12。 And what we'll
    do is it will take。 the one， two， three， four， five， ten， a hundred thousand and
    add 12 to each one of those and。 print them out。 Okay。 This should look very familiar
    from CS107。 Okay。 If it's not。 if you're a little， rusty on that， okay。 Take a
    look at the example。
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过说像 function pointer add 12 来测试它。我们做的事情是，它会把一、二、三、四、五、十、一百万这些数字加上12并输出。好吧，这应该对你们来说很熟悉，来自
    CS107。好吧，如果不熟悉，或者有点生疏，没关系，看看这个例子。
- en: figure out how it works and ask questions about， it if you've got them。 Okay。
    But the important part is here's where you're passing in a。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 弄清楚它是如何工作的，并提出问题，如果你有的话。好吧，但关键部分是，这是你传入一个的地方。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_96.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_96.png)'
- en: function pointer。 Okay。 Now let's rewrite this as or using this weird thing
    called a lambda function。 Okay。 Everything is the same except for this from right
    here to right here and then the same thing。 on the next line。 What's happening
    here is we are saying， okay， great， pass in the vector。 pass in that value and
    then pass in this weird thing which actually has code inside the function。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 函数指针。好吧，现在让我们用这个叫做 lambda 函数的奇怪东西来重写这个。好吧，一切都一样，除了从这里到这里，然后接下来的代码也一样。发生的事情是，我们在说，好吧，太好了，传入这个向量，传入那个值，然后传入这个奇怪的东西，它实际上在函数内部有代码。
- en: parameter itself。 Seems kind of weird。 But it's just inline code that's going
    to return x plus y。 for parameters x plus y or x and y。 Okay。 Exactly the same
    thing except notice I do not have an。 add and subtract program up here or function
    up here。 I've just done the exact same thing， inline。 That's what a lambda allows
    you to do。 Okay。 A lambda does the following， it has the。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 参数本身。看起来有点奇怪。但它只是内联代码，它会返回 x 加 y，对于参数 x 加 y 或者 x 和 y。好吧，完全相同的事情，只是注意到我没有在这里或者函数中写
    add 或 subtract 程序。我只是做了完全相同的事情，内联的。这就是 lambda 让你能做的事情。好吧，lambda 做的事情是，它有。
- en: following signature。 It has a curly or a hang up。 It's a little hard to see
    here。 It has two square。 brackets and something can go in there。 We'll talk about
    that in a minute。 It has a parameter list。 parameter list and then it has some
    code that's in curly braces。 Okay。 That is a function that gets。 passed into the
    other function as a parameter itself。 Okay。 It does not have a name associated。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 lambda 函数的签名。它有一对花括号，或者说括起来的代码，稍微难看清楚。它有两个方括号，里面可以放一些内容，我们一会儿会讲这个。它有一个参数列表，参数列表，然后它包含了一些代码，放在花括号里。好吧，这是一个函数，它作为参数传递到另一个函数。好吧，它没有与之关联的名称。
- en: with it。 It doesn't need one。 It's right in line。 Okay。 And this is exactly
    what will happen。 It's exact same program now。 Okay。 All right。 We'll talk about
    what this weird thing in this。 square brackets are for a second。 Ponder that for
    a second。 What questions do you have about it。 so far？ You may not have time to
    think through yet but questions you have about it so far。 Yeah。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 它不需要一个名称。它就在内联里。好吧，这就是将会发生的事情。现在这是完全相同的程序。好吧，好吧，我们一会儿会讨论这些方括号中的奇怪东西是干什么用的。思考一下它一秒钟。到目前为止你有什么问题吗？你可能还没来得及思考清楚，但目前有什么问题吗？
- en: Good question。 The question was， what's the advantage of this？ Is the advantage
    that you can。 write in line？ That is one advantage。 Normally these functions are
    short。 They're right there。 You can look at them right there。 That's great。 Another
    advantage which we'll come up to is the。 big advantage is the fact that you can
    do things with lambda you can't do with function pointers。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 好问题。问题是，这样做有什么好处？好处是你可以在内联中写？这是其中一个好处。通常这些函数比较简短，它们就在那儿，你可以马上看到它们。那很棒。另一个我们接下来会提到的好处是，lambda
    的最大优势在于，它可以做一些你用函数指针无法做到的事情。
- en: and we'll get to that in a minute。 But yeah。 But for now I just want to introduce
    it and just kind。 of， hey， this is exactly the same before。 Next we'll go into
    what is new。 What are the questions you， have about that so far？ Okay。 If you
    are like， oh。 I haven't seen this before。 Take a look at it again。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一会儿再讨论这个。但现在我只是想介绍一下它，并且，嗯，就这样，这和之前完全一样。接下来我们会深入了解新的内容。到目前为止，你有什么问题吗？好的。如果你觉得，哦。我以前没见过这个，再看一遍。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_98.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_98.png)'
- en: and we'll get there。 Now it turns out， okay， what if， or I should say， what
    if we want to actually。 utilize variables that we don't want to explicitly pass
    into the function and it's not necessarily just。 a variable。 We could actually
    have a function call inside our lambda function。 It might use。 something local
    to the original calling function。 Let me show you what I mean。 Okay。 This is what。
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会到达那一步。现在事实证明，好的，假如，或者我应该说，如果我们实际上想要利用一些我们不想显式传递给函数的变量，并且这些变量不一定只是。一个变量。我们实际上可以在lambda函数中调用一个函数。它可能会使用。原始调用函数中的某些局部变量。让我给你展示一下我的意思。好的。这就是。
- en: we originally had。 Right。 We had a function here which took in two things。 It
    took in a value and it， took in or it took in two values。 Okay。 One of those values
    is coming from this vector。 The other one， we pass into the function。 That's like
    the 12。 It would add 12 to each one of the， each one of the， elements in the vector。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最初的代码。对吧。我们这里有一个函数，它接受两个东西。它接受一个值，它，接受或者说它接受两个值。好的。其中一个值来自这个向量。另一个我们传入函数。这就像12。它会把12加到向量中的每个元素上。
- en: Okay。 But what if we wanted to change it to say， I only want to deal in my。
    function here with the actual vector element itself。 I don't want to pass another
    element through using， these function parameters。 Okay。 This as it turns out will
    be very hard to do。 In fact， I didn't know。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。但如果我们想把它改成只在我的函数中处理实际的向量元素本身。我不想通过使用这些函数参数传递另一个元素。好的。事实证明，这将会非常困难。事实上，我之前并不知道。
- en: if I know how I would do it with function， a regular old function pointer。 Okay。
    What。 and I'll show you， the example in a second。 It turns out we want modified
    vector in this case to also handle the value。 that we are updating by。 In other
    words， we want the function that calls modified vector to handle that。 before
    it even gets to our modified vector function。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我知道如何用函数来做这个，使用一个普通的旧函数指针。好的。那么，怎么做呢？我马上给你演示一个例子。事实证明，在这种情况下，我们希望修改后的向量能够处理我们正在更新的值。换句话说，我们希望调用修改后的向量的函数来处理这个值，**在它进入我们修改后的向量函数之前**。
- en: We want to like pre-line up what we've got there。 That would be really hard
    to do with a function pointer。 With a lambda function， it is actually。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望像预先排好我们要做的事情一样。用函数指针做这件事会非常难。使用lambda函数，实际上就能做到。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_100.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_100.png)'
- en: possible。 Okay。 Here's how you might do it。 Okay。 Here's what I've done differently
    now。 I have。
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的。好的。接下来是你可能会怎么做。好的。现在我做了哪些不同的改变呢？我有。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_102.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_102.png)'
- en: I've changed this up here。 So basically the function now simply says。 give me
    a vector element and I， will do my operation with some other value on it。 And
    our knife。 our modified vector function is， really easy。 All it needs to know
    is get an element out of a vector。 pass it on to this operation， function and
    it's done。 And then it'll do the rest of it for us。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经在这里做了更改。所以基本上，函数现在只是说。给我一个向量元素，我将用一些其他的值对它执行操作。而我们的操作。我们的修改后的向量函数，非常简单。它只需要知道从向量中取出一个元素，传递给这个操作函数，完成操作。然后它会为我们做剩下的所有事情。
- en: But it still does add that。 Well， down here what I've said was， okay。 and this
    is now the important part here， okay。 I have said， all right， pass into modified
    vector。 the vector we're trying to change。 And then the following， lambda function，
    okay， which is this。 It says only take one parameter x but use the value of v。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 但它仍然会添加这个。好吧，下面我说的是，好的。这现在是这里重要的部分，好的。我说，好的，传入修改后的向量。我们要改变的向量。然后是以下的lambda函数，好的，就是这个。它说只接受一个参数x，但使用v的值。
- en: called val from the scope of this function in the modified x function。 Okay。
    How is it going to do。 that？ It's going to say return x plus that value。 In other
    words。 I am not sending value as a parameter， to modify that anymore。 Okay。 So
    that's what's happening here。 The way this works is through this， idea of captures。
    Okay。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 叫做val，它来自这个函数作用域，并且在修改后的x函数中使用。好吧，它将如何做到这一点？它会说返回x加那个值。换句话说，我不再将值作为参数传递，去修改它了。好吧，这就是这里发生的事情。这个方法通过捕获的概念来实现。
- en: And a capture says， put something inside those square brackets that are。 local
    variables or variables in scope anyway that you want to pass to the。 to the captured
    or to the， lambda function that will get used in some other function。 Okay。 In
    this case， I'm just passing in， val and then we're saying int x is the。
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 捕获表达式是说，把你想要传递给捕获的，或者传递给其他函数使用的lambda函数的局部变量或作用域中的变量放入方括号中。好吧。在这个例子中，我只是传递了val，然后我们在这里声明int
    x是。
- en: and then we're saying in here return x plus val， semicolon and curly brace like
    that。 That's what we're doing inside that function and it allows you， to do that。
    Now。 you might still say， well， it doesn't seem like it's that much different。
    It turns out that it's in。 well， it would be almost impossible to do this with
    a regular function， pointer number one。
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们在这里说返回x加val，分号和大括号，就像那样。我们在函数内部做的就是这个，它让你能够做到这一点。现在，你可能还是会觉得，嗯，这看起来似乎没什么不同。事实证明，如果是普通的函数指针，做这件事几乎是不可能的，第一点。
- en: And number two， it's even more difficult to do if you are in a class function。
    trying to call a non-class function。 Okay。 It's just really hard to do。 especially
    if that non-class， function expects something already handled for you that isn't
    part of the parameter list already。 Okay。 So that's a lot to kind of think about
    right now。 There are， by the way。
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 第二点，如果你在一个类的函数中，尝试调用一个非类函数，那会更加困难。好吧，做起来真的很难，尤其是当那个非类函数期望已经为你处理好一些事情，而这些事情并不在参数列表中时。好吧，这现在需要考虑很多东西。顺便提一下。
- en: there are lots of ways， to capture multiple variables by putting them in a list
    like value one。 value two， etc。 You can， also capture them by reference。 which
    unfortunately looks just like a pointer， but it's not in this， area in a dress
    rather。 But if you said a percent value would pass the value by reference， so
    you're。
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方法可以通过将多个变量放入一个列表中来捕获多个变量，例如value one、value two等。你也可以通过引用来捕获它们。不幸的是，它看起来就像指针，但在这种情况下并不是指针，而是一个地址。如果你说百分号值，它会按引用传递值。
- en: actually changing the original one， you would do this with big data structures
    and so forth。 Now。 the reason I'm bringing all this up and showing you how to
    do this is that you do have to do it。 for this assignment in a very， in a particular
    place， using that lower bound function and go back。 to the notes here and go，
    "Oh， how is this stuff actually working？" Understand these， then you'll。
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，改变原始内容时，你需要处理大数据结构等等。现在，我提到这些并向你展示如何操作，是因为你必须这样做。对于这个作业，你需要在特定的位置使用那个下界函数，并返回到笔记中，去思考：“哦，这些东西到底是怎么工作的？”理解这些，你就能做到。
- en: be able to figure out how to do the one with the assignment。 Yeah。 [inaudible
    question]， Yeah。 So let's think about what we're trying to do。 If we have a function
    that says， "Okay。 you are going to give me a function pointer，" in this case，
    or just a function kind of。 lambda function， "but a function pointer then only
    has one value， but that value is contingent on。
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '你应该能弄明白如何做这个作业了。是的。[听不清的问题]，是的。那么我们来思考一下我们试图做什么。如果我们有一个函数说，“好吧，你将给我一个函数指针”，在这种情况下，或者说只是一个函数那样的lambda函数，“但一个函数指针只有一个值，但那个值是依赖于……” '
- en: something else happening in the original calling function。" In other words，
    this， in other words。 this vowel variable， right？ If I can't pass that in to the
    function up here， how would this。 modify VEC do that unless I was able to pass
    in another variable？ You， I， obviously， could have。 done it with passing that
    other variable in， but they don't do it for things like lower bound。
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 原始调用函数中发生了其他事情。“换句话说，换句话说，这个vowel变量对吧？如果我不能将它传递给上面的函数，那怎么才能做到修改VEC呢？除非我能传入另一个变量？你知道，我显然可以通过传递那个其他变量来做到，但他们并不会为像下界这样的东西这么做。”
- en: They say， "Here's the， here's the function signature。 You get one variable or
    you get one。 function to pass in with one parameter。 You don't get any other parameters。"
    And you go， "Well。 wait a， minute。 I need two parameters for this。 How am I going
    to pass the other one？
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 他们说，"这是，函数签名。你得到一个变量，或者你有一个函数传递进来，并且只有一个参数。你不能再有其他参数。" 你会说，"等等，我需要两个参数才能做到这个。我怎么传递另一个参数呢？"
- en: How am I going to deal， with the other one？ You do it through the lambda function。"
    Okay。 You say。 "Oh， I'll handle it locally， capture that variable I'm going to
    need。 tell the function what to do with that variable。"。 And then when that whole
    function gets passed into the other function， it all gets handled。
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我该怎么处理另一个呢？通过lambda函数来做。"好的。你说，"哦，我将在本地处理它，捕获我需要的变量，告诉函数如何处理那个变量。" 然后，当整个函数被传递到另一个函数时，一切都被处理好了。
- en: as if it was kind of， it's all gets handled as a black box to the original function
    or the one。 you're calling。 So it， these things are subtle， but you'll see later，
    in fact， when you start to。 break the assignment， you'll get to this point and
    go， "I guess I could use a regular function。 player and you go， 'Oh， I can't。
    This won't work that way。 That's， that's where it's going to come。
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 就像它是一个黑箱一样，所有的事情都被处理到了原始函数或者你调用的那个函数。所以这些东西很微妙，但你稍后会看到，实际上，当你开始拆解作业时，你会遇到这一点，然后说，"我猜我可以使用一个常规函数。"
    然后你会想，"哦，我做不到。这样行不通。这样的问题就出现了。"
- en: into play。'" What other questions do you have on this？ No？ Okay。 Look at this
    stuff again。 There are， lots， there's lots of documentation on it and certainly
    feel free to come to office hours。
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 进入实际操作。"你还有其他问题吗？没有？好的。再看看这些东西。上面有很多文档，如果有需要，欢迎来上办公时间。"
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_104.png)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_104.png)'
- en: to look at it as well。 Okay。 All right。 What other comments do we have on here？
    "They are critical。 for C++ classes。 As I said， class method variables。 you actually
    can't pass them by reference at all， to other functions no matter how you do it。
    So that's going to be， you're necessary to use the， the lambda functions。
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以看一下它。好的。好吧。还有什么评论？"它们对于C++类是至关重要的。正如我所说，类方法变量，你实际上不能通过引用将它们传递给其他函数，无论你怎么做。所以，必须使用，lambda函数。"
- en: You can capture all of the variables in a class by using the this， pointer to
    do that。 Okay。 You can also， as I said， do them by one after the other。 There's
    some nuances。 about how you actually need to set these up， but if you wanted to
    pass in this and Val and my。 VEC by reference， that's how you would do it。 Okay。
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过使用this指针来捕获类中的所有变量。好的。正如我所说，你也可以一个接一个地处理它们。关于如何设置这些东西，还有一些细微差别，但如果你想通过引用传递this、Val和我的VEC，就是这样做的。好的。
- en: You'll see when you get into this and by the end， of the class， by the end of
    the quarter。 you'll go， "I get these things。" But the first couple times， you
    see it， you go。 "I don't know what's going on。" Go back to the slides， ask questions
    on Piazza。 and then off-sars and we will figure it out。 Anything else on that？
    Okay。 All right。 Let us go back。
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进入这部分内容时，到课程结束、学期结束时，你会说，"我明白这些东西了。" 但第一次看到它时，你会想，"我不知道发生了什么。" 回到幻灯片，去Piazza上提问，然后在办公时间我们一起搞清楚。还有其他问题吗？好的。好了，我们回到刚才的内容。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_106.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_106.png)'
- en: to where we ended up yesterday。 We're going to talk about file systems some
    more。 Okay。 Yesterday。 I ended with this example， which basically was re-implementing
    the CP command called copy。 And it was a pretty simple， all things considered。
    program that basically says you have file one and。
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们昨天的内容。我们要继续讨论文件系统。好的。昨天我以这个例子结束，基本上是重新实现了名为copy的CP命令。考虑到一切，这是一个相当简单的程序，基本上是说你有文件一和。
- en: file two and you want to copy the contents of file or you want to file two is
    what you're creating。 You want to copy file one into file two as an exact copy。
    Okay。 And what we did was we said， "Okay。 fine。 We're going to get set up a file
    descriptor， which is just an integer。 and we're going to use the open command
    to do it。 And we're going to say it's read-only。 That's。
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 文件二，你想将文件一的内容复制到文件二，作为完全相同的副本。好的。我们做的就是，"好的，没问题。我们将设置一个文件描述符，它只是一个整数。我们将使用open命令来完成。然后我们会说它是只读的。"
- en: all I'm reading from。 We're going to do the exact same thing except we're going
    to create a file。 using another file descriptor using open and using write-only
    O-cre-at and O-X-C-L。 We'll see。 another one in a couple slides as well。 But this
    says， "Create the file if it doesn't exist already。"， Right。 Otherwise， produce
    an error。 And then attempt to do the following permissions。 And that。
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的读取操作。我们将做完全相同的操作，只不过我们将创建一个文件，使用另一个文件描述符，通过open和使用只写O-create和O-X-C-L。我们将在接下来的几页中看到另一个例子。但这行代码表示，“如果文件不存在，则创建它。”对吧。如果已存在，报错。然后尝试进行以下权限操作。
- en: may or may not work with those exact permissions based on the UMass。 Again，
    not super important。 Okay。 And then what do we do？ We set up a little buffer and
    this buffer can be any length we want。 We just happen to make it 1，024 because
    we want to save memory， let's say， but you could make it。 bigger if you wanted
    to。 And then we have a while loop and there are some questions about the while。
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会根据UMass的权限设置工作，也可能不会。再次强调，这并不是特别重要。好的。接着我们该做什么呢？我们设置一个小的缓冲区，这个缓冲区的大小可以根据需要任意设置。我们恰好设置为1024，因为我们想节省内存，假设如此，但如果你愿意，也可以设置得更大。接着我们有一个while循环，这里有一些关于while的疑问。
- en: loop here。 This is to read 1，024 bytes from the file one after another after
    another or 1，000。 1 kilobyte and another kilobyte and another kilobyte。 And each
    time take that kilobyte and put it into， the output file。 That's what the first
    while loop is doing。 Okay。 How does it work？ Well， it reads data。
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这个循环是为了从文件中一个接一个地读取1024个字节，或者说是1千字节，一个千字节，再来一个千字节。每次把那个千字节放入输出文件中。这就是第一个while循环的作用。好的。它是怎么工作的呢？嗯，它读取数据。
- en: It reads from the input file into the buffer and the size of， in this case，
    1，024。 You do not need。 to worry about the fact that there's， oh， there might
    be a null character at the end or these are。 not strings necessarily。 They're
    just data。 So you don't need， you can read all 1，024 bytes worth。 Okay。 If you
    end up getting zero bytes back， it means there were no more bytes to read and
    you can end。
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 它从输入文件读取到缓冲区，在这个例子中是1024个字节。你不需要担心文件末尾可能有空字符，或者这些数据不一定是字符串。它们只是数据。所以你不需要担心，你可以读取所有1024个字节。好的。如果你得到的是零字节，意味着没有更多字节可以读取，然后你就可以结束了。
- en: Okay。 If you get any number of bytes other than zero， well， they came out of
    the file and you then。 need to write them to the other file。 How do you do that？
    Well， you start out and you say， okay。 I've got the number of bytes written， which
    is zero。 I haven't written any yet。 And then I'm going to do， another while loop，
    which is going to attempt to write all of those bytes。
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。如果你得到的字节数不是零，那意味着它们已经从文件中读取出来，你然后需要将它们写入到另一个文件。那么你该如何做呢？首先，你说，好的。我写入的字节数是零，我还没有写入任何字节。然后我会再做一个while循环，尝试写入所有这些字节。
- en: That's right here。 It's going to be right here。 It's going to try to write all
    of those bytes into the file at once。 Okay。 Where it's going to do it into the
    output file， it's going to index so many bytes into the。 buffer。 And the first
    time through this is going to be zero， of course， it's going to start and。 try
    to do all 1024。 It turns out that right may only write some of those bytes。 Why？
    Well。
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 就在这里。它将会在这里。它将尝试一次性将所有这些字节写入文件。好的。它将在输出文件中进行操作，它将把这么多字节索引到缓冲区中。第一次执行时当然是零，它将开始并尝试写入所有1024个字节。结果可能是它只写入了其中一部分字节。为什么？嗯。
- en: that's what the operating system can do。 The operating system can say， you want
    to write a。 thousand 24。 I'm going to only allow you to write a byte。 Sorry。 You
    have to try again later。 That's what this while loop is all about。 It's going
    through until you have successfully written。 all those bytes。 Okay。 It's probably
    not going to fail for 1024 in a local file。 But if you try to。
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是操作系统可以做到的。操作系统可以说，你想写入1024字节。我只允许你写入1个字节。抱歉，你得稍后再试。这就是这个while循环的意义所在。它会一直进行，直到你成功写入所有字节。好的。在本地文件中，1024字节通常不会失败。但如果你尝试...
- en: do a million bytes at once， it might say， oh， you can have half a million， and
    then the next time。 you have to do another half a million。 Okay。 All right。 And
    by the way， the read command， as I。 mentioned yesterday， does block until those
    bytes are read， at least some of those bytes are read。 It will， if there's any
    bytes to be read， it will wait until some are available。
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 一次读取一百万个字节，它可能会说，哦，你可以先读五十万个字节，然后下次再读另五十万个字节。好的。顺便提一下，正如我昨天提到的，`read` 命令会阻塞，直到这些字节被读取，至少有一些字节被读取。如果有字节可以读取，它会等到一些字节可用。
- en: What questions you have on this program so far？ Anything？ Nope。 Okay。 So。 the
    interesting part about that is that the， this is direct and low level。
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，对于这个程序你有什么问题吗？有什么问题吗？没有。好的。那么，有趣的部分是，这是直接的、低级的。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_108.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_108.png)'
- en: Okay。 When I say low level， all the other things that you might have used to
    read and write to files。 uses read and write under the hood to do that。 Okay。
    So， if you're using file pointers， which you。 might use in C or IO streams in
    C++， they are themselves using read and write to do the work。 Okay。 They have
    some other nice benefits to them。 They can buffer connections。 You can go backwards。
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。当我说低级时，所有你可能用来读写文件的其他方法，底层都会使用读取和写入来实现。好的。所以，如果你使用文件指针，比如在 C 语言中使用的，或者 C++
    中的 IO 流，它们本身也是通过读取和写入来完成工作的。好的。它们有一些其他的好处。它们可以缓冲连接。你还可以向后读取。
- en: and forwards using a file， a star or an IO stream。 You can rewind， etc。 You
    can't do that with read。 and write。 You have to like manually figure out the details
    of that in a library function。 So。 read and write are going to be fast， but they're
    really not that developed。 Right？ You。 have to go through that while loop to write
    out。 Otherwise， you may miss writing some other bytes。
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 使用文件、星号或者 IO 流进行前向读取，你可以回放等等。你不能在读取和写入中做到这一点。你必须手动在库函数中处理这些细节。所以，读取和写入会很快，但它们并没有那么发展成熟，对吧？你必须通过那个
    while 循环来写出数据，否则你可能会漏写一些字节。
- en: Okay。 Those are the big things about read and write。 Okay。 What are their questions？
    Anything？
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。这些是关于读取和写入的主要内容。好的。有问题吗？有什么问题吗？
- en: All right。 So， let's move on to another program called T。 Okay。 Now， T is a
    program that you can。
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。那么，让我们进入另一个程序，叫做 T。好的。现在，T 是一个你可以使用的程序。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_110.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_110.png)'
- en: that you have built into Linux。 Okay。 And T works like this。 Okay。 T says does
    the following。 It says。
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Linux 内置的。好的。T 就是这么工作的。好的。T 做的是以下几件事。它说：
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_112.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_112.png)'
- en: okay。 Take input from the command line or piped in through another file and
    then。 print it out to the output and print it into any one of a number of files。
    Okay。 So， for instance。 I can say cat， let's say T。C， which is a file I have。
    Cat。T。C。 No， I don't have T。C。 Hang on。 Maybe。 not there。 Maybe if I went to the
    right file， let's see lecture and then file system。 There we go。
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。从命令行获取输入或通过另一个文件传入，然后输出到屏幕并打印到任何一个文件中。好的。例如，我可以说 `cat`，比如 `T.C`，这是我有的文件。`cat
    T.C`。不，我没有 T.C。等一下。也许……不在那里。也许如果我去正确的文件夹，看看讲座文件夹，然后是文件系统。好了。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_114.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_114.png)'
- en: If I type cat， T。C。 We'll print it out to the screen。 If I type cat， T。C。 And
    then pipe it into。 the T program。 Okay。 What it will do is it will then say， okay，
    fine， I'm going to print out the。 screen and I'm going to copy it into T2。C and
    T3。C and T4。C and whatever。 And it will do that。 So。 it should print out to the
    screen， which it did。 And then if we look at T2。C， it's also there。 And。
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我输入 `cat T.C`，它会打印到屏幕上。如果我输入 `cat T.C` 然后通过管道传入 T 程序，好的。它会说，好的，我将打印到屏幕上，然后将它复制到
    T2.C、T3.C、T4.C 或其他地方。它会这么做。所以，它应该打印到屏幕上，正如它做的那样。然后，如果我们查看 T2.C，它也在那里。并且。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_116.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_116.png)'
- en: it's same thing for T3。C and T4。C。 Okay。 Do you get the idea of what T is doing？
    Yeah。
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 T3.C 和 T4.C，情况是一样的。好的。你明白 T 是在做什么吗？是的。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_118.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_118.png)'
- en: Is it creating those new？ It's creating those。 If they already exist。 If they
    already exist。 let's try。 Let's see if we， let's type file called， I don't know，
    d。txt and abcd。 And let's try the。 exact same thing except now we're going to
    cat D into d。txt into this。txt into T2。T3 and T4。 T2。C。 Yep。 It overrides it。
    Yep。 So it doesn't care。 In that case， it overrides it。 Okay。
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 它正在创建那些新文件吗？它正在创建它们。如果它们已经存在。如果它们已经存在。我们来试试。让我们看看，如果我们，假设输入一个文件，叫做`d.txt`，内容是`abcd`。然后我们试试完全一样的操作，不过现在我们要将`cat
    D`输入到`d.txt`，然后是`this.txt`，然后是`T2.T3`和`T4`，`T2.C`。没错，它会覆盖它。没错。所以它不在乎。在这种情况下，它会覆盖它。好吧。
- en: So to get what's going on here， take a file that， or standard input and do that。
    By the way。 standard input is normally you typing。 That's what standard input
    does。 If we did the。 same thing and I said instead of cat D。txt， I just said，
    okay， T2。D3。4。 Right。 And then I start typing。 This is some text。 Right。 Well，
    it doubles it。 What it's did did it。
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 所以要理解这里发生了什么，拿一个文件，或者标准输入并执行。顺便说一句，标准输入通常是你键入的内容。标准输入的作用就是这个。如果我们做同样的事情，假设我说，不是输入`cat
    D.txt`，而是输入，好的，`T2.D3.4`。对吧？然后我开始输入。这是一些文本。对吧？嗯，它会将其重复一遍。它做了什么呢？
- en: It took that。 This is some， text and it printed out to the screen and it threw
    them into the files。 And then this is some more， text。 It does the same thing
    until I type control D which says end of file。 That's by the way what， that means
    in there。 And then if we look at， if we look at T2。C now。 it's this is some text。
    This is， some other text。 Okay。
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 它拿到了这个。这是一些文本，它打印到屏幕上，并且把它们写入到文件中。然后这是一些更多的文本。它会做同样的事情，直到我输入控制键`D`，它表示文件结束。顺便说一下，那个意思就是这样。然后如果我们看一下，看看现在`T2.C`，它就是这些文本。这是，另一段文本。好吧。
- en: So standard input is you typing or getting information from the output of， another
    file。 That's what the little pipe symbol does。 Okay。 You will be very familiar
    with that pipe。 symbol by the end of this class。 I guarantee it。 Okay。 All right。
    Let's look at T。C。 Let's actually。 look at how we might do this。 Okay。 Well， what
    do I have to do？ We said take standard input。 We。
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 所以标准输入就是你键入或者从另一个文件的输出获取信息。这个小的管道符号就是干这个用的。好吧。你会在这门课结束之前非常熟悉这个管道符号。我保证。好吧。好了，让我们看一下`T.C`。让我们实际看看我们怎么做这个。好吧。那么，我需要做什么？我们说的是拿标准输入。我们。
- en: have to figure out how to do that。 We're going to print the standard input to
    standard output。 We。 have to figure out how to do that。 And then we have to open
    up as many files as we type on the command。 line and then open them up and print
    the data to those as well。 We might want to help our function。 for this just because
    it seems like there's going to be a lot of things going on here。 Okay。
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得弄明白怎么做。我们将把标准输入打印到标准输出。我们得弄明白怎么做。然后我们得打开命令行上输入的文件数目，并打开它们，把数据写入这些文件。我们可能需要帮助我们的函数来处理这个问题，因为看起来这里会有很多事情要发生。好吧。
- en: But let's， actually start this off and say， okay， fine。 Int file descriptors。
    If we have a command line， you remember that the command line is argv and argc。
    argc says how many different things you've， typed on the command line。 The first
    one is the program name and the rest are the things you， typed after the program
    name。
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 但是让我们，实际上从这里开始，假设，好的，没问题。关于文件描述符。如果我们有一个命令行，你还记得命令行是`argv`和`argc`吗？`argc`表示你在命令行上输入的不同项的数量。第一个是程序的名称，后面是你在程序名后面输入的内容。
- en: Okay。 We need to create argc number of files。 Why？ If I type， let's see， let's
    see this。 If I type t abc。txt def。txt， right， we've got a file that's going to
    be， output。 We've got a file for abc。txt and we've got a file for def。txt。 Three
    things on the command。 line means argc is going to be three。 That's how many file
    descriptors we need as it turns out。
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们需要创建`argc`数量的文件。为什么？如果我输入，看看这个，如果我输入`t abc.txt def.txt`，对吧，实际上我们有一个输出文件。我们有一个`abc.txt`的文件，还有一个`def.txt`的文件。命令行上的三项内容意味着`argc`将是三。结果我们需要的文件描述符就是这么多。
- en: Okay。 So let's go back up here and do that。 So we do that。 Okay。 Well， then
    we need to actually。 create them those files except for standard in， right， or
    rather standard out in this case。 Okay。 Because standard out is going to be created
    for you already。 It turns out it already exists。 Here's。 how that works。 Okay。
    FDS0 in this case equals STD0UT standard out file。 That's what it's called。
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧。那么我们回到这里，做这件事。好吧。那么我们实际上需要创建它们，这些文件，除了标准输入之外，对吧，或者说在这种情况下是标准输出。好吧，因为标准输出已经为你创建好了。事实上，它已经存在了。它是这样工作的。好吧。`FDS0`在这种情况下等于`STDOUT`，标准输出文件。就是这么叫的。
- en: Standard out and standard in already exists。 There are two， there are another
    one too。 There's。 standard， well， there's standard in。t file。 There's also standard
    error dot file or standard error。 underscore file。 That's because sometimes you
    want your program to print regular output and also。 output that's an error or
    debugging or whatever。 Just the way it goes。
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 标准输出和标准输入已经存在。还有另一个。还有一个。标准，嗯，还有标准输入文件。还有标准错误文件或标准错误文件。因为有时你希望程序打印常规输出，也输出错误信息或调试信息或其他的。就是这样。
- en: There's three different types， of files that are created for you as we go。 Okay。
    So that's how that works。 All right。 And then， we have to open all those other
    files。 So let's do it this way。 Size ti equals one。 We've already， created FDS0。
    i equals one。 i is less than argc。 i plus plus。 Okay。 And what we're going to
    do here。
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 会为你创建三种不同类型的文件，随着我们继续进行。好的。就是这样。然后，我们必须打开所有其他文件。我们就这样做吧。size t i等于一。我们已经创建了FDS0。i等于一。i小于argc。i加加。好的。然后我们要做的是。
- en: is we are going to say FDSi equals open argv of i。 And then now we're going
    to do the， okay。 we're going to write output to these。 So write only。 Okay。 And
    we're going to， amount。 we're going to bitwise or that with o create because we're
    creating the file。 And then。 there's one other that we haven't seen yet called
    o trunk。 This is the one that says if the file。
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要说FDSi等于打开argv的i。然后现在我们要做的，好的。我们将写输出到这些文件。所以只写。好的。然后我们要，数量。我们将按位或与o create，因为我们正在创建文件。然后。还有一个我们还没有见过的叫做o
    trunk。这是那个会检查文件是否存在的。
- en: exists， wipe it out before you're putting the other stuff into it。 That's what
    your question kind of， goes to。 And then we can say oh let's try to do 044 but
    we know that may or may not work。 Okay。 That's how we're doing that。 Now we've
    opened all those files we're about to push out to。 Okay。 Well let's read in the
    data。 Char buffer will make it 2048 this time。 Why not？ Okay。
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件已经存在，先清空它，再把其他内容写进去。这正是你问题的所在。然后我们可以说，哦，试试做044，但我们知道那可能行也可能不行。好的。这就是我们这样做的方式。现在我们已经打开了所有那些文件，准备输出数据。好的。现在我们来读取数据。字符缓冲区这次设为2048。为什么不呢？好的。
- en: While true。 This is going to look very familiar to what we did before。 Okay。
    While true。 S size。 tier。 Remember that's a signed integer number of bytes red
    equals read。 We're going to read from。 where standard in file number。 That's what
    we said。 We said we read from the input file from the。 typing or or data piped
    in from another file output piped in buffer size of buffer。 Okay。
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 当条件为真时。这将与我们之前做的非常相似。好的。当条件为真时。S size。tier。记住那是一个有符号整数，表示读取的字节数，等于read。我们将从哪里读取。标准输入文件编号。这就是我们所说的。我们说我们从输入文件中读取，或者从另一个文件中通过管道传入的数据，或者通过管道传入的输出，缓冲区的大小是缓冲区。好的。
- en: So we do that。 Okay。 And then if num red equals zero we mean we're done because
    we don't。 anything else to do。 And this is where we'll use our little helper function
    here to write output。 to all those different files。 So let's see， we'll do another
    size t i equals zero i is less than rc。 i plus plus we need to do all of them。
    We'll do a function called write all which we'll write in a。
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们这样做。好的。然后如果num red等于零，意味着我们完成了，因为没有其他事情要做。这就是我们将在这里使用我们的小助手函数，来将输出写入所有不同的文件。所以让我们看看，我们再做一个size
    t i等于零，i小于rc，i加加，我们需要做所有的文件。我们将做一个叫做write all的函数，它会写入。
- en: second。 And then we are going to do we're going to write it out to a buffer。
    I in this case and then， or to a file descriptor。 And then the amount of bytes
    red。 Okay。 And then that will do that。 Sorry， for the size of the screen。 And
    then we are going to let's see。 That's on one line so that actually， will work。
    And then afterwards we're done writing to all those files。
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个。然后我们将做的是将其写入缓冲区。我在这种情况下，然后，或者写入文件描述符。然后是读取的字节数。好的。然后那样做。抱歉，屏幕太小了。然后我们将，看看。那是一行，所以实际上可以工作。然后之后我们完成了对所有文件的写入。
- en: We have to close them all。 Well， we better do another size t i equals zero i
    is less than rc i plus plus。 Right。 And in this case， we're going to close fds
    i。 You can close the input if you want to。 If you're done with it in your， program
    close it。 It's still opened in all the other programs that might be running。 So
    it's not， like you're ruining anything for anybody。 Okay。
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须关闭它们。嗯，我们最好再做一个size t i等于零，i小于rc，i加加。对吧。然后在这种情况下，我们将关闭fds i。如果你想的话，可以关闭输入。如果你在程序中用完了它，关闭它。它在其他可能正在运行的程序中仍然是打开的。所以这不是说你会破坏任何人的东西。好的。
- en: And then now we can return zero which I might， already have in there。 Okay。
    So that's that。 Let's see if there's any issue there。 There will， probably be
    there will be an issue because we haven't created the write all function yet。
    But。
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 然后现在我们可以返回零，我可能已经在那里写了。好了。就这样。让我们看看是否有任何问题。可能会有问题，因为我们还没有创建 `write all` 函数。但是。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_120.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_120.png)'
- en: let's see comparisons do not have their mathematical meaning。 Oh no。
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看，比较运算符并没有它们的数学意义。哦不。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_122.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_122.png)'
- en: Mind 21。 Did you guys notice that？ 21。 There we go。 Oh thank you。 Semi-colon。
    There we go。 Better。 Let's try it again。 Oops。 Oh no。 What have I done？ There
    we go。
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 第21行。你们注意到了吗？21行。好了，谢谢。分号。好了。更好了。再试试。哎呀。哦不。我做了什么？好了。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_124.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_124.png)'
- en: All right。 There we go。 Implicit declaration of and standard out underscore
    file under， layered。 Let's see。 Standard。 Oh。 File number is what it is。 Thank
    you。 I was getting it wrong。
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 好了。我们来看看。隐式声明和标准输出文件，分层。我们来看看。标准。哦。文件号就是它的内容。谢谢，我之前弄错了。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_126.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_126.png)'
- en: It is standard out file like this。 File new like that。 And the same thing。 I
    think the same。 There。
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 它是标准输出文件，像这样。文件新建，就这样。我想是一样的。那里。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_128.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_128.png)'
- en: we go。 Do the same thing。 Okay。 Let's try it again。 Okay。 So what we need to
    do now is just quickly。
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来做同样的事情。好的。再试一次。好的。现在我们需要做的就是快速。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_130.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_130.png)'
- en: write that other function which is just write all which should look very familiar
    to the copy。 function。 Static void write all what does a static function do？
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 写那个其他函数，就是 `write all`，它应该看起来和 `copy` 函数非常相似。静态 `void write all`，静态函数做什么？
- en: Remember only visible in the current file。 You should write your local functions
    as static。 just because it's nice to not pop pollute the namespaces too much if
    you can help it。 Okay。 We're going to do a buffer and a length。 Okay。 And in this
    function， we are going to do。 the same exact thing we did before。 Size T num written
    equals zero。 And then while num。
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，这只在当前文件中可见。你应该把你的本地函数写成静态的。因为如果可以避免，最好不要污染命名空间。好了。我们将做一个缓冲区和一个长度。好吧。在这个函数中，我们将做。我们之前做过的完全一样的事情。Size
    T num_written = 0。然后在 num。
- en: written is less than the length that was passed in， we are going to do what
    we're going to do。 num written plus equals right。 We're writing that with each
    of those files。 Okay。 To the file。 descriptor we passed in the buffer plus the
    number of bytes we've already written。 And the。 length minus number of written
    bytes。 And that should do it。 And that's all our function is。
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果写入的字节数少于传入的长度，我们将执行我们要做的操作。num_written += write。我们将通过每一个文件写入。好的。写入到文件。描述符，我们传入的缓冲区加上我们已经写入的字节数。再加上。长度减去已经写入的字节数。这应该可以了。就这些，我们的函数就是这样。
- en: Question。 Yeah。 Here。 Yeah。 So what does that mean？ Remember what the T command
    is doing。 It's reading from， you typing which is standard input。 So this case
    we have to open that file for we have to open it。 to be able to read to or sorry
    we have to not open it we have to set it because it's already。
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 问题。是的。这里。是的。那么这是什么意思？记住 `T` 命令在做什么。它正在从你输入的内容读取，也就是标准输入。所以在这种情况下，我们必须打开那个文件，或者说我们必须设置它，因为它已经是。
- en: open for you。 So we need that file descriptor。 That's how we do it。 Good question。
    There are。 questions on this before I try it。 Yeah。 No， it's an or so you can
    do them any order。 Totally。 associate like that。 Good question。 Anybody else？
    All right。 Let's try it。 Make。 Oh。 it's a different。
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 为你打开。所以我们需要那个文件描述符。这就是我们做的方式。好问题。在我尝试之前，有没有问题？对。没有，这是“或”运算符，所以你可以按任何顺序做。完全可以。就像这样关联。好问题。还有其他人吗？好了，让我们试试。做。哦。是不同的。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_132.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_132.png)'
- en: file。 Okay。 So T。 If I do dot slash T and then I say F file one dot T X T file
    to dot T X T。
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 文件。好的。那么 T。如果我输入 `./T`，然后我说 `F file1.txt` 和 `file2.txt`。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_134.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_134.png)'
- en: Right。 And I start typing this is me typing more typing。 Right。 And then control
    D。 I should be able。
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 对。然后我开始输入，这是我在输入，更多输入。对。然后按控制 D。我应该能够。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_136.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_136.png)'
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_137.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_137.png)'
- en: to look in F one dot T X T and see that that's where it works。 Okay。 So what
    questions do you have。
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以查看F one dot T X T，看到它在那里工作。好的。那么，你有什么问题吗？
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_139.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_139.png)'
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_140.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_140.png)'
- en: about that？ You've now learned about started about standard file in and our
    standard in file。 number and standard out file number input and output。 There's
    also standard error file number。 Okay。 In our little program here， we're assuming
    everything succeeded but the actual code which。 you can go look at online has
    more error checking。 You should probably do more error checking。 For。
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些问题吗？你现在已经了解了关于标准输入输出文件和标准输出文件编号的基本知识。还有标准错误文件编号。好的。在我们的小程序中，我们假设一切都成功了，但实际上，代码（你可以在线查看）有更多的错误检查。你应该做更多的错误检查。
- en: our class， we're not quite as worried about most error checking。 But you'll
    see in various。 assignments when it's important。 Okay。 Other questions on that？
    All right。 That is T。 Okay。 So。
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的课堂上，我们并不像其他地方那样担心大多数错误检查。但是你会在不同的作业中看到，当它很重要时，如何处理。好的。还有其他问题吗？好的。那么，这是T。好的。所以。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_142.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_142.png)'
- en: let's we're going to continue to dig a little deeper into file system sorts
    of things。 Okay。 There are two functions， STAT and EL STAT， which are system calls。
    And again， a system call is a。 function that the kernel runs。 Okay。 Your code
    calls it and then the kernel takes over and runs it。 Okay。 And they populate this
    other thing called a struct STAT。 Unfortunately， it's overloaded。 Okay。
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续深入了解文件系统的相关内容。好的。这里有两个函数，STAT 和 EL STAT，它们是系统调用。再次提醒，系统调用是内核执行的函数。好的，你的代码调用它，然后内核接管并执行它。好的。它们会填充另一个东西，叫做
    struct STAT。不幸的是，它被重载了。好的。
- en: Struct STAT is called is populated。 The struct STAT you pass in is populated
    by the STAT function。 Okay。 And STAT and EL STAT are exactly the same except that
    if there is a link。 and we'll talk about links， a little bit later， STAT returns
    the functions about the links itself。 EL STAT says， oh， I'm going to go， check
    the details of that link。
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: struct STAT 被调用并填充。你传入的 struct STAT 会被 STAT 函数填充。好的。STAT 和 EL STAT 完全相同，唯一不同的是如果有链接——我们稍后会讨论链接——STAT
    会返回关于链接本身的函数。EL STAT 则会说，哦，我要去检查那个链接的详细信息。
- en: What a link is is think of an alias。 It's basically a name that points， to some
    other file。 Okay。 So we'll get to that in the next day or so。 Okay。 And you can
    definitely， look these things up。 By the way， you should get very used to typing
    things like MAN 2 STAT and so。
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 链接是什么呢？可以把它看作是一个别名。它基本上是指向某个其他文件的名称。好的。我们会在接下来的几天内讨论这个问题。好的。顺便说一句，你可以查找这些东西。你应该习惯于输入类似
    MAN 2 STAT 之类的命令。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_144.png)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_144.png)'
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_145.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_145.png)'
- en: forth。 Two being the part of the manual that you need to。 If you just type MAN
    STAT。 watch what happens。
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: forth。 这里指的是你需要的手册部分。如果你只是输入MAN STAT，看看会发生什么。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_147.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_147.png)'
- en: I think it's a different， it's the built-in command from Unix that gets run
    or that you see instead of。
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为它是一个不同的命令，它是 Unix 的内置命令，或者你看到的是它而不是。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_149.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_149.png)'
- en: the library function。 Okay。 But you've got all the details here for the library
    for the function。
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这是库函数。好的。但是你在这里已经有了库函数的所有细节。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_151.png)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_151.png)'
- en: Okay。 And what they do， okay， is they populate this struct STAT and the struct
    STAT has some。
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。它们的作用是，它们填充这个 struct STAT，而 struct STAT 里面有一些。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_153.png)'
  id: totrans-261
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_153.png)'
- en: information in it that might be useful to you。 Okay。 We eventually will use
    the i number， okay。 or the i node number。 And then， but the one we care about
    is this mode。 Okay。 And the mode is a。 bunch of different bits in one variable
    that allows you to find out information about the file。 Okay。 So you can extract
    information about the file。 Is it a directory？ Is it， I think。
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 其中包含的信息可能对你有用。好的。最终我们会使用 i 数字，好的，或者 inode 编号。然后，我们关心的是这个 mode。好的。mode 是一个包含多个不同位的变量，它允许你获得关于文件的信息。好的。你可以提取关于文件的信息。它是一个目录吗？是的，我认为。
- en: I don't know if that tells how big it is。 I don't think that tells how big it
    is， but it。 says various information about a particular file。 Okay。 And we want
    to actually do a little bit of。
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道那是否告诉你文件有多大。我觉得那并不能告诉你文件的大小，但它会提供关于特定文件的各种信息。好的。我们实际上需要做一点。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_155.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_155.png)'
- en: coding to show you what this is doing。 Okay。 So there's a function called find。
    I used。 Unix for years and years and didn't know about this。 And once I found
    out there was a function called， find。 I went， oh boy， there's the。 I'm going
    to use it every day。 And I did， I have， I use find。
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 编码来展示这是什么在做的。好的。这里有一个叫做 `find` 的函数。我使用 Unix 已经好多年了，直到不知道这个。后来一发现有个叫做 `find`
    的函数，我就想，哦，天哪，这就是我要用的。我每天都会用它。是的，我用了，我现在每天都在用 `find`。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_157.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_157.png)'
- en: every single day。 What find does， it allows you to search through a set of directories
    recursively。
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 每一天。find 做的事情是，它允许你递归地搜索一组目录。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_159.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_159.png)'
- en: and find a particular file or a pattern for a file。 So let's see， we happen
    in。 I know there's search。
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 找到一个特定的文件或文件模式。所以让我们看看，发生了什么。我知道有搜索。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_161.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_161.png)'
- en: dot whatever in here。 So if I go back up to， let's do this， find live lecture。
    and then search dot star， I'll put that in parentheses。 Okay。 Then what it does
    is it goes and says anything that actually。
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 无论这里是什么点。如果我回到上面，做这个，`find live lecture`，然后搜索 `dot star`，我会把它放在括号里。好的。然后它会去说任何实际上。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_163.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_163.png)'
- en: it sort of shows you， well， actually in this case it didn't， hang on， let me
    just do this。 I'll just， say search like that。 And it will tell you where it things。
    the various things are found for that。 Okay。 Let's see。 Oh。 you know what find
    is a little different。 It means a thing called a dot mean。
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 它有点显示给你，实际上在这种情况下没有，等等，让我做一下这个。我会说搜索，像这样。它会告诉你它认为的地方。各种东西在那找到了。好了，我们来看看。哦，你知道吗，find
    有点不同。它表示一个叫做点的东西。
- en: That's what it's looking for。 Okay。 So there we go。 There's where search itself
    is。 If I wanted to find， matching， I hope all the different ones， I would type
    search star。 and it would give me all the。
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它正在寻找的东西。好了，就是这样。那就是搜索本身的位置。如果我想找到匹配的，我希望所有不同的文件，我会输入 `search star`，然后它会给我所有的。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_165.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_165.png)'
- en: different things that had star or search in them， which are all those files。
    Okay。 So it allows you。 to search through various directories to find files based
    on a file name or partial matches。 Okay。
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 含有星号或搜索的不同事物，这些都是文件。好的。所以它允许你通过不同的目录进行搜索，基于文件名或部分匹配来查找文件。好的。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_167.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_167.png)'
- en: So what we're going to do is we're going to write a relatively simple program
    to actually do this。
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们要做的是，编写一个相对简单的程序来实现这个功能。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_169.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_169.png)'
- en: And to do some searching to do exactly that。 If you do find slash user slash
    include。 and then look for STD IO dot H， find slash user slash include STDI。 Let's
    see。 You got to do the。
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 并且进行一些搜索，正好做这个。如果你执行 `find /user/include`，然后查找 `STD IO dot H`，`find /user/include
    STDI`。我们来看看。你得做这个。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_171.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_171.png)'
- en: dash name STD IO dot H and then print is a term。 Bring print as it turns out。
    There we go。 We'll。
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: dash name STD IO dot H 然后打印是一个术语。带上打印，结果就出来了。好了，我们开始吧。我们将。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_173.png)'
  id: totrans-283
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_173.png)'
- en: list all the ones that are called STD IO H and there's a whole bunch of them
    as it turns out。 And our search function should do the exact same thing。 Okay。
    We need to be able to read a file in。 see if it's a directory。 If it's a directory
    traversing that directory and then continue reading。 This， should look very fairly
    familiar from some CS107 things that you did。 Okay。
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 列出所有名为 `STD IO H` 的文件，结果有一大堆。我们的搜索函数应该做完全相同的事情。好的。我们需要能够读取文件。查看它是否是一个目录。如果是目录，就遍历那个目录，然后继续读取。这个应该从你做的一些
    CS107 的事情中非常熟悉。好的。
- en: But let's actually go。
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们实际去做吧。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_175.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_175.png)'
- en: and write the actual command search dot C。 Okay。 I've got all the header stuff
    in there。 We're going to。
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 然后写下实际的命令`search.c`。好的，我已经把所有的头文件都放进去了。我们要开始了。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_177.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_177.png)'
- en: first do the main function。 And then we're going to write this list matches
    function， which is。 which is going to be a little bit more a little bit more involved。
    But for right now。 let's actually do the search function。 In fact， yeah， we'll
    do some of it。 In fact。
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 首先编写主函数。然后我们将编写这个`list matches`函数，它会稍微复杂一些。但现在，先写`search`函数。实际上，是的，我们会先写一些。实际上。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_179.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_179.png)'
- en: I'll just show it to you right now。 And then we can go and run it the actual
    version in a little。
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在就给你演示一下。然后我们可以运行它，稍后再看实际版本。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_181.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_181.png)'
- en: bit。 Okay。 The main function， instead of me typing it all out right now， the
    main function。
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。主要函数，暂时不需要我现在全部写出来，主要函数就是这样。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_183.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_183.png)'
- en: looks like this。 Okay。 It basically uses the the L stat system call to get information
    about whether。 or not a file is a directory。 And how do you do that？ Well， you
    say L stat and then some name。 right， and you populate a struct stat that populates
    a struct stat with that。 And then you check and see， if it is a directory by using
    this macro S is DER。
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 它看起来是这样的。好的。它基本上使用了`lstat`系统调用来获取文件是否是目录的信息。那么如何做到这一点呢？你调用`lstat`然后传入某个名称，对吧，然后你填充一个`struct
    stat`，这个结构体会被填充。然后你可以通过使用宏`S_ISDIR`来检查它是否是一个目录。
- en: And then you pass in the mode that you get back。 All there is to it。 Okay。 And
    then you need to actually go ahead and check the length of the， directory name
    itself。 Okay。 And then you have a pattern that we're going to type in that you。
    actually are going to pass in to the list matches function by basically copying
    the path plus the。
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你传入返回的模式。就这么简单。好。接着，你需要实际检查目录名称本身的长度。好的。然后，你有一个我们将要输入的模式，实际上你将把它传递给`list matches`函数，基本上是复制路径加上这个模式。
- en: file in plus the next plus the next plus the next。 Okay。 And that's how it's
    going to work using the， list matches program or list matches function that we're
    going to write。 Okay。 So it's basically。
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 文件加上下一个，再加下一个，再加下一个。好的。这就是它的工作原理，使用我们将要编写的`list matches`程序或`list matches`函数。好的。所以，基本上。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_185.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_185.png)'
- en: what it is。 You're going to type in the search and then the name of the directory
    you're starting。 search at and then the and then the pattern that you're trying
    to search for。 And it will and the。
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它的操作方式。你输入搜索命令，然后是你开始的目录名称，再接着是你要查找的模式。它会进行搜索。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_187.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_187.png)'
- en: list matches will do all that。 Okay。 All right。 So how's that going to work？
    Well， as I said。 we need。
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`list matches`将会完成所有这些操作。好的。那么它是如何工作的呢？正如我所说，我们需要。'
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_189.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_189.png)'
- en: else that to do this。 Okay。 The S is there is a macro。 A macro is kind of like
    a function except。 it gets replaced in the code immediately。 It doesn't actually
    call a function。 It's like in lines a bunch， of code。 It's basically just trying
    to check some bits。 And if one of those bits is set， it needs， it's a directory
    for this for this case。 Okay。
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 否则就使用`lstat`来进行这个操作。好的。`S_ISDIR`是一个宏。宏类似于一个函数，但它会在代码中立即被替换。它并不真的调用一个函数，而是直接将一段代码内联。它基本上是在检查一些位，如果其中一位被设置，就表示它是一个目录，在这个案例中就是这样。
- en: There's also is reg， which is whether or not it's a regular。 file is link is
    whether it's a link to a file。 That's the alias I mentioned before。 And most of
    this， is actually going to happen in the list matches function。 which I'm going
    to show you in a second。 Okay。 You need to utilize open dir to open a directory
    and you need to utilize dir int。
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 还有`is reg`，它表示是否是常规文件；`is link`表示它是否是指向文件的链接。这就是我之前提到的别名。大部分操作实际上会在`list matches`函数中完成。我稍后会给你展示。好的。你需要利用`opendir`来打开一个目录，并且你需要使用`dir
    int`。
- en: which。
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_191.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_191.png)'
- en: is sorry， you need to use struct dir int and the redir function， which you should
    have done in 107。 If you forget that one， well， you can go look up how to do it。
    But it basically does the traversing。 of this directory for you。 It's kind of
    nice to do that。 And then you need to know how to close。
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 对不起，你需要使用`struct dir int`和`redir`函数，这个你应该在107中做过。如果忘记了，你可以去查找如何做。但它基本上是为你遍历目录的。这样做挺方便的。然后你需要知道如何关闭。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_193.png)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_193.png)'
- en: a directory as well。 Okay。 All right。 So here's the actual implementation of
    the list matches function。
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以是一个目录。好的。好了。那么这里是列表匹配函数的实际实现。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_195.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_195.png)'
- en: Okay。 The list matches function does what？ It opens the directory up。 Okay。
    And if the， directory。 if the path is no， meaning if there is nothing there， then
    it just returns。 Okay。 Otherwise。 it takes the path that copies the， the actual
    path onto the， or the， the。 copies of slash onto the path and then starts going
    through all the different directories or。
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。列表匹配函数是做什么的？它打开目录。好的。如果目录，路径为空，也就是说如果那里什么都没有，那么它就返回。好的。否则，它会把路径复制，实际的路径加到，或者说复制斜杠到路径上，然后开始遍历所有不同的目录。
- en: all the different entries and checking each one to see if it matches what we're
    trying to match。
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 所有不同的条目并检查每个条目，看它是否匹配我们要匹配的内容。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_197.png)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_197.png)'
- en: Okay。 I'm gonna have to do this from my pen down here。 So we are going to read
    in the directory。 in this while loop of going through the directory。 Okay。 Again，
    if it's no。 we're going to stop because， we've gone to， you know， we've gone to
    the end。 That's how this works。 It goes until it gives you back a， no。 Okay。 And
    then we're going to compare this to dot and dot dot dot dot and dot dot are the
    two。
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我得从我这里的笔记开始做。所以我们将要读取目录。在这个循环中遍历目录。好的。再一次，如果路径为空，我们就停止，因为我们已经到达了，已经到达了结尾。这个就是它的工作方式。它会一直遍历，直到返回一个空值。好的。然后我们会把它与点和点点进行比较。点和点点是这两个。
- en: files that are mean what？ What do we say？ Dot and dot dot are same directories
    dot and then。 previous directory is dot dot。 So what it's going to do is it's
    going to ignore those。 It's going to skip them because why， because then it would
    end up in some loop that you don't want to。 go down necessarily。 Okay。 And then
    if you happen to have a path which is too long。
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件是什么意思？我们说过什么？点和点点是相同的目录，点表示当前目录，点点表示上级目录。所以它会忽略这些目录。它会跳过它们，因为为什么？因为否则它就会进入一个不想进入的循环。好的。如果路径太长怎么办？
- en: we only allow a certain path with that's fine。 Then it just kind of says I'm
    done。 I'm not going to go， any farther than that。 Too bad for you。 And then it
    copies the actual name onto the end of the path， after that slash。 And then it
    does the LStack command again checks if it's a regular file。 If it's a regular
    file。
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只允许一个特定的路径，如果符合条件，那就没问题。然后它就说我完成了，我不会继续向前走了。对你来说太遗憾了。接着它把实际的名字复制到路径末尾，添加斜杠后。然后它再次执行LStack命令，检查它是否是一个常规文件。如果是常规文件的话。
- en: it does a string comparison on that file。 And then if it comes out with zero。
    meaning they're the same， then it will actually print out the path。 And that's
    how it actually finds it。 Okay。 If it's a directory， what does it have to do？
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 它会对那个文件做字符串比较。如果比较结果是零，也就是说它们是一样的，那么它就会打印出路径。这就是它如何找到它的方式。好的。如果是一个目录，它需要做什么？
- en: It has to recursively call list matches because， then it needs to traverse through
    the list。 So it's a recursive， it's a recursive program。 But really it's not that
    like it's just looking through a set of directories to do that。 Okay。 Question。
    Yeah。 A regular file is not a link。 It's basically a file that has data inside
    it。 A link， it's a file， that refers to another file。 So the data inside of it
    refers to the other file。
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 它必须递归调用列表匹配，因为它需要遍历这个列表。所以这是一个递归程序。但实际上它并不复杂，它只是在查找一组目录。好的。问题。是的，一个常规文件不是一个链接。它基本上是一个包含数据的文件。一个链接是一个文件，它指向另一个文件。所以它里面的数据指向另一个文件。
- en: And the operating， system needs to know whether or not it's an alias or a link
    or a regular file so they can。 travel down those or not。 Yeah。 What are the questions
    you have on this one， on this program？ Yeah。 What do we use？ Yeah。 What do we
    say the difference was？ It was just a matter of like， like。 what do we expect
    that to be？ You might have links。 Yeah。 You can certainly have links。 In fact。
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统需要知道它是别名、链接还是常规文件，这样它们才能正确地处理或不处理这些文件。是的。关于这个程序，你有什么问题吗？是的。我们用什么？对，我们说的区别是什么？这只是一个问题，比如说。我们期望它是什么？你可能会有链接。是的，你当然可以有链接。事实上，
- en: your assignment has links in it。
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 你的作业中有链接。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_199.png)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_199.png)'
- en: Let me show you a link in your assignment。 If you go to， let's see， let's go
    to assignment。
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 让我给你展示一个作业中的链接。如果你去，看看，去作业。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_201.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_201.png)'
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_202.png)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_202.png)'
- en: assignment one， let's see， I think， I think， you start or maybe？ There we go。
    Okay。
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 作业一，看看，我觉得，应该是你开始的地方，或者是？好了。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_204.png)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_204.png)'
- en: If we go into here and if you look at dash L， okay， take a look at samples down
    here。 What's that？
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们进入这里，查看一下 dash L，好的，看看下面的 samples。那是什么？
- en: What's going on there？ It says samples has this little weird arrow that points
    to slash。 AFS slash IRS slash class CS110 samples assignment one。 And by the way，
    if we go into samples。
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 那里发生了什么？它说 samples 有一个小小的奇怪箭头指向斜杠。AFS slash IRS slash class CS110 samples assignment
    one。顺便说一句，如果我们进入 samples。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_206.png)'
  id: totrans-329
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_206.png)'
- en: let's take a look。 Now we're actually in that file。 If we look at it， we've
    got an actor data。
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一下。现在我们实际进入了那个文件。如果我们看它，我们得到了一个 actor 数据。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_208.png)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_208.png)'
- en: file and a movie data file。 And those two files are ginormous。 And what it means
    is if you put a。 link in your assignment file to this regular file， none of you
    are going to change these files。 You're not even allowed to， as it turns out。
    Like you can't change them because they're redonely for。 you。 But it means that
    everybody in the class can get access to this one gigantic file through。
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 文件和一个电影数据文件。这两个文件非常大。它的意思是，如果你在作业文件中链接到这个常规文件，没人会更改这些文件。结果是你甚至不能更改它们。因为它们是只读的，专门供你使用。但这意味着班上所有人都可以通过这个文件访问这个巨大的文件。
- en: a link so that it doesn't have， so that you don't have to make copies of them
    for everybody。 You would quickly run out of space if we tried to make a gigabyte
    file or 80 megabyte files for。 everybody or whatever。 Yeah。 Eight hundred megabytes
    files， whatever。 Other questions on that？
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 链接，这样你就不必为每个人复制它们。如果我们尝试为每个人创建一个千兆字节文件或 80 兆字节文件，空间很快就会用完。是的，八百兆字节的文件，什么的。其他问题吗？
- en: Good question。 Did that answer？ All right。 So that's how the stat and L stat
    works。 Again。
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 好问题。那个回答了吗？好的。那么这就是 stat 和 L stat 的工作原理。再说一遍。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_210.png)'
  id: totrans-335
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_210.png)'
- en: the reason we did this example was to show you that you can use L stat to get
    whether it's something。 to file or a directory。 Okay。 You can error stats do that。
    You can also do that with other。 there's other things that you might care about。
    Like for next assignment， you will care about some。 other pieces of that structure。
    All right。 We relied on Opender， which basically says。
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 我们做这个示例是为了展示你可以使用 L stat 来判断它是否是文件还是目录。好吧，你可以使用 error stats 来做到这一点。你也可以用其他方法。有些事情可能对你很重要。比如下一个作业，你会关心结构中的其他部分。好的。我们依赖
    Opender，它基本上意味着
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_212.png)'
  id: totrans-337
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_212.png)'
- en: oh， it's a directory。 We had to do an assertion in there and says， don't try
    to open a directory。 that's a file。 You have to figure that out。 Okay。 You have
    to make sure you do that。 And then you get， all of these different directory entries
    by walking through that read/read/der call。 Okay。 And again， you probably did
    this in 107。 You probably did an assignment about that。
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，是一个目录。我们在这里做了一个断言，表示不要尝试打开目录。那是一个文件。你必须弄清楚。好的，你必须确保这样做。然后你可以通过 walk 这个 read/read/der
    调用来获取所有这些不同的目录条目。好的。再说一次，你可能在 107 课中做过这个。你可能做过相关作业。
- en: But it's not too bad。 It's just recall that function again and again and again
    and it gives you the next directory。 the next file， the next sort of， or the next
    directory。 Okay。 Let's see。 What else？ Here it is。 Here's your answer to your
    question。 We used L stat instead of stat so we know whether it's really。 a link
    and we're going to ignore links in this case。 You can have links that are recursive
    like。
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 但其实并不算太难。只需一次次回忆那个函数，它会给你下一个目录，下一个文件，或者下一个，或者下一个目录。好。我们看看。还有什么呢？这就是。这里是你问题的答案。我们使用L
    stat而不是stat，这样我们就知道它是否真的是一个链接，而且我们在这种情况下会忽略链接。你可以有递归的链接，例如。
- en: that refer back to something earlier in the file system。 And so if you did that，
    you might have a。 problem because you traversed on a link and then it might come
    back where you were and then you。 didn't end up in this recursive loop forever。
    And that would be probably bad。 Okay。 And I want。 over the other details about
    about all this。 You do should as always remember to close your directories。
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能指向文件系统中的某个早期位置。所以，如果你这么做，你可能会遇到问题，因为你通过一个链接遍历，可能会返回到你之前的位置，然后你就会陷入这个递归循环，永远也走不出去。这可能是个坏情况。好。我想。关于这些所有细节，我不再赘述。你应该像往常一样记得关闭你的目录。
- en: Any else on those？ All right。 There's another function that we'll briefly look
    at called list。
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他的吗？好的。我们将简要查看另一个名为list的函数。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_214.png)'
  id: totrans-342
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_214.png)'
- en: which is basically LS。 Right。 And LS does what？ LS actually lists all the stuff
    in your directory。 Well guess what？ It has to do basically the same sort of thing。
    It needs to read through all of。 the directory entries and get the information
    out about it。 It needs to get the permissions by the way。 Needs to get whether
    or not this is directory and it needs to populate these parts of it right here。
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上就是LS。对吧。LS做什么？LS实际上列出你目录中的所有内容。猜猜看？它基本上需要做类似的事情。它需要读取所有目录条目并提取相关信息。它需要获取权限，顺便提一下。它需要判断这是否是一个目录，并需要填充这些部分。
- en: Okay。 It also needs to tell how big or how many other what we call hard links
    refer to a file。 That's another topic we'll get to I guess on Friday or next week。
    But basically you can have one file， which lots of things point to in two different
    ways and the list will actually tell you how many of。 those exist。 Okay。 It needs
    to get the name and it needs to get the date it's created and so forth。
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 好。它还需要告诉你文件的大小或有多少个我们称之为硬链接的引用指向一个文件。那是我们下周或者星期五会讨论的另一个话题。基本上你可以有一个文件，很多东西指向它，有两种方式，而列表实际上会告诉你这些引用有多少个。好的。它需要获取文件名，获取创建日期等等。
- en: Okay。 Those details are a little bit like down in the weeds but you can you
    can do that。 Okay。 If。 you want to look at the entire list。c function you can
    do that。 On the key one I will show you。 right here。 This is the permissions one。
    How do you get the permissions for a particular file？
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 好。那些细节稍微有点复杂，但你可以做得到。好。如果你想查看整个列表，你可以这么做。关于这个权限的，我会在这里给你展示。如何获取特定文件的权限？
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_216.png)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_216.png)'
- en: Okay。 Well let's see。 Okay。 What we need to do is we need to。 There's a lot
    of code in this one。
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 好。我们来看一下。好的。我们需要做的是。这个代码里有很多内容。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_218.png)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_218.png)'
- en: right。 We basically need to。 Here's the list permissions right down here。 Okay。
    It needs to， find。 And there's details about this that you don't really need to
    know but it basically says。 "Set all the permissions to dash。" Okay。 And then
    go ahead and look through each directory， right。 And check the permissions of
    each directory and if it's a directory you put D in it and。
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 对。我们基本上需要做这个。这里是权限列表，就在这里。好。它需要，找到。而且有些细节你其实不需要知道，但它基本上说的是：“将所有权限设置为破折号。”好。然后继续检查每个目录，对吧。检查每个目录的权限，如果是目录，你就在里面加一个D。
- en: otherwise you go through the all the permissions for each one of the various。
    permissions that you might have。 So you have to go through each one of those and
    go look can the user。 can the owner read can the owner write can the owner execute
    set that up。 Can the other do the。 same thing can the group do the same thing，
    right。 Details。
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 否则，你需要检查每一个可能的权限。你必须逐一检查这些权限，看用户是否可以，所有者是否可以读取，所有者是否可以写入，所有者是否可以执行，设置这些权限。其他用户能做同样的事情吗？组用户能做同样的事情吗？对吧。细节。
- en: You have to kind of go through all these， details when you're writing this low
    level code。 That's kind of the way it goes in this case。 Okay。 And let's see。
    Is there anything else important here？ Here are some flags that you can use。 for
    all of the different files， right。 S-I-R user。 That's a macro that basically says。
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写这种低级代码时，你必须处理所有这些细节。这种情况就是这样。好的。让我们看看这里还有什么重要的内容吗？这里有一些标志，你可以用在所有不同的文件上，对吧。S-I-R
    用户。那是一个宏，基本上是说。
- en: check and see if the user can write or the user can read or the user can write。
    nine different things to check for because there's three for each owner group
    and user。 Lot to do if you're trying to do all this one by one。 Okay。 It's kind
    of amazing what， LS can do。 It has to go through all these details if you're doing
    systems type stuff。 Okay。
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 检查并查看用户是否能写，或者用户是否能读，或者用户是否能写。需要检查九个不同的条件，因为每个拥有者、组和用户都有三个。逐一检查这些会做很多事情。好的。如果你在做系统类型的工作，LS可以做的事情真是令人惊讶。它必须处理所有这些细节。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_220.png)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_220.png)'
- en: The list permissions function itself prints out those permissions and this is。
    hang on I think the neck。 Oh no that's that's uh yeah here we go。
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 列表权限函数本身会打印出这些权限，这是。等一下，我想那一块。哦不，那是嗯，是的，来看看这里。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_222.png)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_222.png)'
- en: Oh no that's a great that was all that right there。 It's got that's the list
    permissions and the。 stuff up here is kind of all of the setup for it。 Okay。 Anyway
    go look at the code for this if you。 want to see how how all these macros and
    things work。 We won't necessarily make you code all this。 kind of low level things。
    You should just know how these things work so that you understand how。
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 哦不，这非常好，那些内容就是全部了。它包含了权限列表和相关内容。这里的东西基本上是它的设置部分。好的，反正去看看这个代码吧，如果你想了解这些宏和其它东西是如何工作的。我们不一定会要求你编写所有这些低级的代码。你应该知道这些是如何工作的，这样你才能理解。
- en: permissions work and that there are macros and there is this struct that you
    have to use and so。 forth。 Okay。 All right。 What questions do you have at this
    point about any of that that we've covered？
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 权限是如何工作的，以及有宏，和你必须使用这个结构体，等等。好的，没问题。你对我们已经讲过的内容有什么问题吗？
- en: The assignment is due next Wednesday。 It is due absolutely on Wednesday。 There's
    no late days for。 this assignment just because we want you to get going on the
    next assignment and we want to grade。 the first assignment as quickly as we can。
    Officer I have officers tomorrow morning 10 to 12 I believe。 stop by if you want
    and then we will get the I will send a message out to the CAs。 They're going to。
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 任务下周三到期。任务必须在周三提交。这个任务没有延期，因为我们希望你尽早开始下一个任务，并且我们想尽可能快地给第一个任务打分。明天早上10点到12点我有办公时间。如果你想来，可以过来，然后我会把消息发给CAs。他们会。
- en: start some office hours probably tomorrow or Friday。 They will go through on
    Saturday or sorry Friday， and Sunday at least and then next week as well。 All
    right I'll stick around for a few more minutes， and we'll see you on Friday。 There
    is class this Friday。 No labs。 Class Friday。
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 可能从明天或周五开始一些办公时间。它们会安排在周五，抱歉，是周五，然后至少是周日，接下来的一周也会安排。好吧，我会再等几分钟，我们周五见。周五有课。没有实验课。周五有课。
- en: '![](img/cbc9d80603f5807b8374eb9f12191323_224.png)'
  id: totrans-360
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cbc9d80603f5807b8374eb9f12191323_224.png)'
