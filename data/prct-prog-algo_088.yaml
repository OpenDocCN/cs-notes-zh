- en: '1.5   Case Study: Union-Find'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.5   案例研究：并查集
- en: 原文：[https://algs4.cs.princeton.edu/15uf](https://algs4.cs.princeton.edu/15uf)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://algs4.cs.princeton.edu/15uf](https://algs4.cs.princeton.edu/15uf)
- en: '![Dynamic connectivity example](../Images/9d0f8a98d7c01cbf4802921df320f413.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![动态连通性示例](../Images/9d0f8a98d7c01cbf4802921df320f413.png)'
- en: Dynamic connectivity.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态连通性。
- en: 'The input is a sequence of pairs of integers, where each integer represents
    an object of some type and we are to interpret the pair `p q` as meaning `p` is
    connected to `q`. We assume that "is connected to" is an *equivalence relation*:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 输入是一系列整数对，其中每个整数表示某种类型的对象，我们将解释对`p q`为`p`连接到`q`。我们假设“连接到”是一个*等价关系*：
- en: '*symmetric*: If `p` is connected to `q`, then `q` is connected to `p`.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*对称性*：如果`p`连接到`q`，那么`q`连接到`p`。'
- en: '*transitive*: If `p` is connected to `q` and `q` is connected to `r`, then
    `p` is connected to `r`.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*传递性*：如果`p`连接到`q`且`q`连接到`r`，那么`p`连接到`r`。'
- en: '*reflexive*: `p` is connected to `p`.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自反性*：`p`连接到`p`。'
- en: An equivalence relation partitions the objects into *equivalence classes* or
    *connected components*.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 等价关系将对象划分为*等价类*或*连通分量*。
- en: 'Our goal is to write a program to filter out extraneous pairs from the sequence:
    When the program reads a pair `p q` from the input, it should write the pair to
    the output only if the pairs it has seen to that point do not imply that `p` is
    connected to `q`. If the previous pairs do imply that `p` is connected to `q`,
    then the program should ignore the pair `p q` and proceed to read in the next
    pair.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是编写一个程序来过滤序列中的多余对：当程序从输入中读取一对`p q`时，只有当它到目前为止看到的对不意味着`p`连接到`q`时，它才将这对写入输出。如果之前的对确实意味着`p`连接到`q`，那么程序应忽略这对`p
    q`并继续读取下一对。
- en: Union-Find API.
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并查集API。
- en: The following API encapsulates the basic operations that we need.![Union-find
    API](../Images/9d4ccf644520f57e2530ed69d1507b76.png)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 以下API封装了我们需要的基本操作。![并查集API](../Images/9d4ccf644520f57e2530ed69d1507b76.png)
- en: 'To test the utility of the API, the `main()` in [UF.java](UF.java.html) solves
    the dynamic connectivity problem. We also prepare test data: the file [tinyUF.txt](tinyUF.txt)
    contains the 11 connections used in our small example, the file [mediumUF.txt](mediumUF.txt)
    contains 900 connections, and the file [largeUF.txt](largeUF.txt) is an example
    with millions of connections.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试API的实用性，[UF.java](UF.java.html)中的`main()`解决了动态连通性问题。我们还准备了测试数据：文件[tinyUF.txt](tinyUF.txt)包含我们小例子中使用的11个连接，文件[mediumUF.txt](mediumUF.txt)包含900个连接，文件[largeUF.txt](largeUF.txt)是一个包含数百万连接的示例。
- en: Implementations.
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现。
- en: We now consider several different implementations, all based on using a site-indexed
    array `id[]` to determine whether two sites are in the same component.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在考虑几种不同的实现方式，都基于使用一个站点索引数组`id[]`来确定两个站点是否在同一个组件中。
- en: '*Quick-find.* [QuickFindUF.java](QuickFindUF.java.html) maintains the invariant
    that `p` and `q` are connected if and only if `id[p]` is equal to `id[q]`. In
    other words, all sites in a component must have the same value in `id[]`.![Quick
    find overview](../Images/13d51dde02277e9978185d3bd6033064.png)'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*快速查找.* [QuickFindUF.java](QuickFindUF.java.html)维护了这样一个不变量：当且仅当`id[p]`等于`id[q]`时，`p`和`q`连接。换句话说，组件中的所有站点在`id[]`中必须具有相同的值。![快速查找概述](../Images/13d51dde02277e9978185d3bd6033064.png)'
- en: '*Quick-union.* [QuickUnionUF.java](QuickUnionUF.java.html) is based on the
    same data structure—the site-indexed `id[]` array—but it uses a different interpretation
    of the values that leads to more complicated structures. Specifically, the `id[]`
    entry for each site will be the name of another site in the same component (possibly
    itself). To implement `find()` we start at the given site, follow its link to
    another site, follow that sites link to yet another site, and so forth, following
    links until reaching a root, a site that has a link to itself. Two sites are in
    the same component if and only if this process leads them to the same root. To
    validate this process, we need `union()` to maintain this invariant, which is
    easily arranged: we follow links to find the roots associated with each of the
    given sites, then rename one of the components by linking one of these roots to
    the other.![Quick union overview](../Images/cec0967b1fbb85882e408060ae060f34.png)'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*快速联合.* [QuickUnionUF.java](QuickUnionUF.java.html)基于相同的数据结构——站点索引`id[]`数组，但它使用了不同的值解释，导致更复杂的结构。具体来说，每个站点的`id[]`条目将是同一组件中另一个站点的名称（可能是它自己）。为了实现`find()`，我们从给定站点开始，沿着它的链接到另一个站点，再沿着那个站点的链接到另一个站点，依此类推，一直沿着链接直到到达一个根节点，一个有链接指向自身的站点。只有当这个过程将它们导向相同的根节点时，两个站点才在同一个组件中。为了验证这个过程，我们需要`union()`来维护这个不变量，这很容易安排：我们沿着链接找到与每个给定站点相关联的根节点，然后通过将其中一个根节点链接到另一个根节点来重命名一个组件。![快速联合概述](../Images/cec0967b1fbb85882e408060ae060f34.png)'
- en: '*Weighted quick-union.* Rather than arbitrarily connecting the second tree
    to the first for `union()` in the quick-union algorithm, we keep track of the
    size of each tree and always connect the smaller tree to the larger. Program [WeightedQuickUnionUF.java](WeightedQuickUnionUF.java.html)
    implements this approach.![Weighted quick union overview](../Images/bf7bb30e3008f9ca9cc7051bbfe2ad56.png)'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*加权快速联合.* 在快速联合算法中，为了`union()`将第二棵树任意连接到第一棵树，我们跟踪每棵树的大小，并始终将较小的树连接到较大的树。程序[WeightedQuickUnionUF.java](WeightedQuickUnionUF.java.html)实现了这种方法。![加权快速联合概述](../Images/bf7bb30e3008f9ca9cc7051bbfe2ad56.png)'
- en: '*Weighted quick-union with path compression.* There are a number of easy ways
    to improve the weighted quick-union algorithm further. Ideally, we would like
    every node to link directly to the root of its tree, but we do not want to pay
    the price of changing a large number of links. We can approach the ideal simply
    by making all the nodes that we do examine directly link to the root.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*带路径压缩的加权快速联合.* 有许多简单的方法可以进一步改进加权快速联合算法。理想情况下，我们希望每个节点直接链接到其树的根节点，但我们不想付出改变大量链接的代价。我们可以通过使我们直接检查的所有节点直接链接到根节点来接近理想状态。'
- en: Union-find cost model.
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 并查集成本模型。
- en: When studying algorithms for union-find, we count the number of *array accesses*
    (number of times an array entry is accessed, for read or write).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在研究并查集算法时，我们计算*数组访问次数*（访问数组条目的次数，用于读取或写入）。
- en: Definitions.
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 定义。
- en: The *size* of a tree is its number of nodes. The *depth* of a node in a tree
    is the number of links on the path from it to the root. The *height* of a tree
    is the maximum depth among its nodes.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 树的*大小*是其节点数。树中节点的*深度*是从节点到根的路径上的链接数。树的*高度*是其节点中的最大深度。
- en: Proposition.
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。
- en: The quick-find algorithm uses one array access for each call to `find()` and
    between *n* + 3 and 2*n* + 1 array accesses for each call to `union()` that combines
    two components.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 快速查找算法对每次`find()`调用使用一个数组访问，并且对于每次将两个组件合并的`union()`调用，数组访问次数在*n* + 3和2*n* +
    1之间。
- en: Proposition.
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。
- en: The number of array accesses used by `find()` in quick-union is 1 plus twice
    the depth of the node corresponding to the given site. The number of array accesses
    used by `union()` and `connected()` is the cost of the two `find()` operations
    (plus 1 for `union()` if the given sites are in different trees).
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在快速联合中，`find()`所使用的数组访问次数为1加上节点深度的两倍，该节点对应给定站点。`union()`和`connected()`所使用的数组访问次数为两个`find()`操作的成本（如果给定站点在不同树中，则`union()`还需加1）。
- en: Proposition.
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。
- en: The depth of any node in a forest built by weighted quick-union for *n* sites
    is at most lg *n*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由加权快速联合构建的森林中任何节点的深度最多为lg *n*。
- en: Corollary.
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 推论。
- en: For weighted quick-union with *n* sites, the worst-case order of growth of the
    cost of `find()`, `connected()`, and `union()` is log *n*.![performance of union-find
    algorithms](../Images/75d0aa40de96d8e5e5fb942ea899aa99.png)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 对于具有*n*个站点的加权快速联合，`find()`、`connected()`和`union()`的最坏情况成本增长顺序为log *n*。![union-find算法的性能](../Images/75d0aa40de96d8e5e5fb942ea899aa99.png)
- en: Q + A
  id: totrans-31
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 问与答
- en: '**Q.** Is there an efficient data structure that supports both insertion and
    deletion of edges?'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 是否有一种有效的数据结构，支持边的插入和删除？'
- en: '**A.** Yes. However, the best-known *fully dynamic* data structure for graph
    connectivity is substantially more complicated than the *incremental* version
    we consider. Moreover, it''s not as efficient. See [Near-optimal fully-dynamic
    graph connectivity](http://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf)
    by Mikkel Thorup.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 是的。然而，用于图连接性的已知最佳*完全动态*数据结构比我们考虑的*增量*版本复杂得多。此外，它的效率也不如增量版本。参见Mikkel
    Thorup的[Near-optimal fully-dynamic graph connectivity](http://www.cs.princeton.edu/courses/archive/spr10/cos423/handouts/NearOpt.pdf)。'
- en: Exercises
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Develop classes [QuickUnionUF.java](QuickUnionUF.java.html) and [QuickFindUF.java](QuickFindUF.java.html)
    that implement quick-union and quick-find, respectively.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 开发类[QuickUnionUF.java](QuickUnionUF.java.html)和[QuickFindUF.java](QuickFindUF.java.html)，分别实现快速联合和快速查找。
- en: 'Give a counterexample that shows why this intuitive implementation of `union()`
    for quick-find is not correct:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出一个反例，说明快速查找的`union()`的这种直观实现是不正确的：
- en: '[PRE0]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '*Answer.* The value of `id[p]` changes to `id[q]` in the for loop. Thus, any
    object `r` > `p` with `id[r]` equal to `id[p]` will not be updated to equal `id[q]`.'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案.* 在for循环中，`id[p]`的值会改变为`id[q]`。因此，任何`r` > `p`且`id[r]`等于`id[p]`的对象都不会被更新为等于`id[q]`。'
- en: In the weighted quick-union implementation, suppose we set `id[root(p)]` to
    `q` instead of `id[root(q)]`. Would the resulting algorithm be correct?
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在加权快速联合实现中，假设我们将`id[root(p)]`设置为`q`而不是`id[root(q)]`。得到的算法是否正确？
- en: '*Answer.* Yes. However, it would be increase the tree height, so the performance
    guarantee would be invalid.'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案.* 是的。然而，这会增加树的高度，因此性能保证将无效。'
- en: Creative Problems
  id: totrans-41
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意问题
- en: '**Quick-union with path compression.** Modify [QuickUnionUF.java](QuickUnionUF.java.html)
    to include *path compression*, by adding a loop to `find()` that links every sie
    on the path from p to the root. Give a sequence of input pairs that causes this
    method to produce a path of length 4\. *Note*: the amortized cost per operation
    for this algorithm is known to be logarithmic.'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**带路径压缩的快速联合。** 修改[QuickUnionUF.java](QuickUnionUF.java.html)以包括*路径压缩*，通过在`find()`中添加一个循环，将从p到根的路径上的每个站点连接起来。给出一系列输入对，使得该方法产生长度为4的路径。*注意*：该算法的摊销成本每次操作已知为对数级别。'
- en: '*Solution.* [QuickUnionPathCompressionUF.java](QuickUnionPathCompressionUF.java.html).'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* [QuickUnionPathCompressionUF.java](QuickUnionPathCompressionUF.java.html)。'
- en: '**Weighted quick-union with path compression.** Modify [WeightedQuickUnionUF.java](WeightedQuickUnionUF.java.html)
    to implement path compression, as described in Exercise 1.5.12. Give a sequence
    of input pairs that causes this method to produce a tree of height 4.'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**带路径压缩的加权快速联合。** 修改[WeightedQuickUnionUF.java](WeightedQuickUnionUF.java.html)以实现路径压缩，如练习1.5.12所述。给出一系列输入对，使得该方法产生高度为4的树。'
- en: '*Note*: The amortized cost per operation for this algorithm is known to be
    bounded by a function known as the *inverse Ackermann function* and is less than
    5 for any conceivable value of *n* that arises in practice.'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*注意*：该算法的摊销成本每次操作已知受到称为*反阿克曼函数*的函数的限制，对于实践中出现的任何可想象的*n*值，该函数均小于5。'
- en: '*Solution.* [WeightedQuickUnionPathCompressionUF.java](WeightedQuickUnionPathCompressionUF.java.html).'
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* [WeightedQuickUnionPathCompressionUF.java](WeightedQuickUnionPathCompressionUF.java.html)。'
- en: '**Weighted quick-union by height.** Develop a implementation [WeightedQuickUnionByHeightUF.java](WeightedQuickUnionByHeightUF.java.html)
    that uses the same basic strategy as weighted quick-union but keeps track of tree
    height and always links the shorter tree to the taller one. Prove a logarithmic
    upper bound on the height of the trees for *n* sites with your algorithm.'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**按高度加权快速联合。** 开发一个实现[WeightedQuickUnionByHeightUF.java](WeightedQuickUnionByHeightUF.java.html)的算法，该算法使用与加权快速联合相同的基本策略，但跟踪树高度并始终将较短的树链接到较高的树。证明对于*n*个站点，您的算法对树的高度有对数上界。'
- en: '*Solution.* A union operation between elements in different trees either leaves
    the height unchanged (if the two tree have different heights) or increase the
    height by one (if the two tree are the same height). You can prove by induction
    that that the size of the tree is at least 2^height. Therefore, the height can
    increase at most lg *n* times.'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* 不同树中元素之间的联合操作要么保持高度不变（如果两棵树的高度不同），要么增加一次高度（如果两棵树的高度相同）。你可以通过归纳证明树的大小至少为2^高度。因此，高度最多可以增加lg
    *n*次。'
- en: '**Random connections.** Develop a `UF` client [ErdosRenyi.java](ErdosRenyi.java.html)
    that takes an integer command-line argument *n*, generates random pairs of integers
    between 0 and *n*, calling `connected()` to determine if they are connected and
    then `union()` if not (as in our development client), looping until all sites
    are connected, and printing the number of connections generated. Package your
    program as a static method `count()` that takes *n* as argument and returns the
    number of connections and a `main()` that takes *n* from the command line, calls
    `count()`, and prints the returned value.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**随机连接**。开发一个`UF`客户端[ErdosRenyi.java](ErdosRenyi.java.html)，接受一个整数命令行参数*n*���在0到*n*之间生成随机整数对，调用`connected()`确定它们是否连接，如果没有连接则调用`union()`（与我们的开发客户端相同），循环直到所有站点连接，并打印生成的连接数。将程序打包为一个以*n*为参数的静态方法`count()`，返回连接数和一个从命令行获取*n*的`main()`，调用`count()`，并打印返回的值。'
- en: Web Exercises
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网页练习
- en: True or false. In the quick union implementation, suppose we set `parent[p]`
    to `parent[root(q)]` instead of setting `parent[root(p)]` to `parent[root(q)]`.
    Would the resulting algorithm be correct?
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 真或假。在快速联合实现中，假设我们将`parent[p]`设置为`parent[root(q)]`而不是将`parent[root(p)]`设置为`parent[root(q)]`，得到的算法是否正确？
- en: '*Answer.* No.'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*答案*。不。'
- en: 'Which of the following arrays could not possibly occur during the execution
    of weighted quick union with path compression:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在执行带路径压缩的加权快速联合时，以下哪个数组不可能出现：
- en: 0 1 2 3 4 5 6 7 8 9
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 0 1 2 3 4 5 6 7 8 9
- en: 7 3 8 3 4 5 6 8 8 1
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 7 3 8 3 4 5 6 8 8 1
- en: 6 3 8 0 4 5 6 9 8 1
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 6 3 8 0 4 5 6 9 8 1
- en: 0 0 0 0 0 0 0 0 0 0
  id: totrans-57
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 0 0 0 0 0 0 0 0 0 0
- en: 9 6 2 6 1 4 5 8 8 9
  id: totrans-58
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 9 6 2 6 1 4 5 8 8 9
- en: 9 8 7 6 5 4 3 2 1 0
  id: totrans-59
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 9 8 7 6 5 4 3 2 1 0
- en: '*Solution.* B, C, E, and F.'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*。B、C、E和F。'
- en: '**Recursive path compression.** Implement path compression using recursion.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**递归路径压缩**。使用递归实现路径压缩。'
- en: '*Solution*:'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：'
- en: '[PRE1]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '**Path halving.** Write a data type [QuickUnionPathHalvingUF.java](QuickUnionPathHalvingUF.java.html)
    that implements a simpler strategy known as *path halving*, which makes every
    other node on the find path link to its grandparent. *Remark*: the amortized cost
    per operation for this algorithm is known to be bounded by a function known as
    the *inverse Ackermann function*.'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**路径减半**。编写一个数据类型[QuickUnionPathHalvingUF.java](QuickUnionPathHalvingUF.java.html)，实现一种更简单的策略，称为*路径减半*，使得查找路径上的每个其他节点都链接到其祖父节点。*备注*：该算法每次操作的摊销成本被限制在一个称为*反阿克曼函数*的函数中。'
- en: '**Path splitting.** Write a data type [WeightedQuickUnionPathSplittingUF.java](QuickUnionPathSplittingUF.java.html)
    that implement an alternative strategy known as *path splitting*, which makes
    every node on the find path link to its grandparent. *Remark*: the amortized cost
    per operation for this algorithm is known to be bounded by a function known as
    the *inverse Ackermann function*.'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**路径分裂**。编写一个数据类型[WeightedQuickUnionPathSplittingUF.java](QuickUnionPathSplittingUF.java.html)，实现一种称为*路径分裂*的替代策略，使得查找路径上的每个节点都链接到其祖父节点。*备注*：该算法每次操作的摊销成本被限制在一个称为*反阿克曼函数*的函数中。'
- en: '**Random quick union.** Implement the following version of quick union: Assign
    the integers 0 through n-1 uniformly at random to the n elements. When linking
    two roots, always link the root with the smaller label into the root with the
    larger label. Add in path compression. *Remark*: the expected cost per operation
    for the version without path compression is logarithmic; the expected amortized
    cost per operation for the version with path compression is bounded by a function
    known as the *inverse Ackermann function*.'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**随机快速联合**。实现以下版本的快速联合：将整数0到n-1均匀随机分配给n个元素。在链接两个根时，始终将具有较小标签的根链接到具有较大标签的根。添加路径压缩。*备注*：没有路径压缩版本的每次操作的期望成本是对数级的；具有路径压缩版本的每次操作的期望摊销成本被限制在一个称为*反阿克曼函数*的函数中。'
- en: '**3D site percolation.** Repeat for 3D lattice. Threshold around 0.3117.'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**3D位置渗透**。对3D晶格重复。阈值约为0.3117。'
- en: '**Bond percolation.** Same as site percolation, but choose edges at random
    instead of sites. True threshold is exactly 0.5.'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**键合渗透**。与位置渗透相同，但是随机选择边而不是位置。真实阈值恰好为0.5。'
- en: Given a set of N elements, create a sequence of N union operations so that weighted
    quick union has height Theta(log N). Repeat for weighted quick union with path
    compression.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定一组N个元素，创建一个N个联合操作的序列，使得带权重的快速联合的高度为Theta(log N)。对带路径压缩的带权重快速联合重复。
- en: '**Hex.** The game of Hex is played on a trapezoidal grid of hexagons.... Describe
    how to detect when white or black has won the game. Use the union-find data structure.'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**六角形**。六角形游戏在一个梯形六边形网格上进行...描述如何检测白色或黑色何时赢得游戏。使用并查集数据结构。'
- en: '**Hex.** Prove that the game cannot end in a tie. *Hint*: consider the set
    of cells reachable from the left side of the board.'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**六角形**。证明游戏不可能以平局结束。*提示*：考虑从棋盘左侧可达的单元格集合。'
- en: '**Hex.** Prove that the first player can guarantee a win with perfect play.
    *Hint*: if the second player had a winning strategy, you could choose a random
    cell initially, and then just copy the second player''s winning strategy. This
    is called *strategy stealing*.'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**六角形**。证明第一个玩家可以通过完美的游戏获胜。*提示*：如果第二个玩家有一个获胜策略，你可以最初选择一个随机单元格，然后只需复制第二个玩家的获胜策略。这被称为*策略窃取*。'
- en: '**Labeling clusters on a grid.** Physicists refer to it as the [Hoshen–Kopelman
    algorithm](https://en.wikipedia.org/wiki/Hoshen–Kopelman_algorithm) although it
    is simply union–find on a grid graph with raster-scan order. Applications include
    modeling percolation and electrical conductance. Plot site occupancy probability
    vs. number of clusters (say 100-by-100, with p between 0 and 1, number of clusters
    between 0 and 1500) or distribution of clusters. (seems like DFS would suffice
    here) Matlab has a function `bwlabel` in the image processing toolbox that performs
    cluster labeling.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在网格上标记聚类。** 物理学家将其称为[Hoshen–Kopelman算法](https://en.wikipedia.org/wiki/Hoshen–Kopelman_algorithm)，尽管它只是在栅格图上进行的并查集算法，按照栅格扫描顺序进行。
    应用包括模拟渗透和电导。 绘制站点占用概率与聚类数量的关系（比如100x100，p在0到1之间，聚类数量在0到1500之间）或聚类分布。（似乎DFS在这里就足够了）Matlab在图像处理工具箱中有一个名为`bwlabel`的函数，用于执行聚类标记。'
