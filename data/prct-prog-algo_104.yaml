- en: 4.3   Minimum Spanning Trees
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 4.3   最小生成树
- en: 原文：[https://algs4.cs.princeton.edu/43mst](https://algs4.cs.princeton.edu/43mst)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://algs4.cs.princeton.edu/43mst](https://algs4.cs.princeton.edu/43mst)
- en: Minimum spanning tree.
  id: totrans-2
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 最小生成树。
- en: An *edge-weighted graph* is a graph where we associate *weights* or *costs*
    with each edge. A *minimum spanning tree (MST)* of an edge-weighted graph is a
    spanning tree whose weight (the sum of the weights of its edges) is no larger
    than the weight of any other spanning tree.![Minimum spanning tree](../Images/e803ae7d159a8b1570bf101ab218099e.png)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '*带权重的图* 是一种我们为每条边关联*权重*或*成本*的图。带权重图的*最小生成树（MST）*是其边权重之和不大于任何其他生成树的生成树。![最小生成树](../Images/e803ae7d159a8b1570bf101ab218099e.png)'
- en: Assumptions.
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 假设。
- en: 'To streamline the presentation, we adopt the following conventions:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简化演示，我们采用以下约定：
- en: '*The graph is connected.* The spanning-tree condition in our definition implies
    that the graph must be connected for an MST to exist. If a graph is not connected,
    we can adapt our algorithms to compute the MSTs of each of its connected components,
    collectively known as a *minimum spanning forest*.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*图是连通的。* 我们定义的生成树条件意味着图必须是连通的才能存在MST。如果图不连通，我们可以调整算法以计算其每个连通分量的MST，统称为*最小生成森林*。'
- en: '*The edge weights are not necessarily distances.* Geometric intuition is sometimes
    beneficial, but the edge weights can be arbitrary.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*边的权重不一定是距离。* 几何直觉有时是有益的，但边的权重可以是任意的。'
- en: '*The edge weights may be zero or negative.* If the edge weights are all positive,
    it suffices to define the MST as the subgraph with minimal total weight that connects
    all the vertices.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*边的权重可能为零或负数。* 如果边的权重都是正数，则定义最小生成树为连接所有顶点的总权重最小的子图即可。'
- en: '*The edge weights are all different.* If edges can have equal weights, the
    minimum spanning tree may not be unique. Making this assumption simplifies some
    of our proofs, but all of our our algorithms work properly even in the presence
    of equal weights.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*边的权重都不同。* 如果边可以具有相同的权重，则最小生成树可能不唯一。做出这种假设简化了我们一些证明，但我们的所有算法即使在存在相同权重的情况下也能正常工作。'
- en: Underlying principles.
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 基本原理。
- en: 'We recall two of the defining properties of a tree:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们回顾树的两个定义性质：
- en: Adding an edge that connects two vertices in a tree creates a unique cycle.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加连接树中两个顶点的边会创建一个唯一的循环。
- en: Removing an edge from a tree breaks it into two separate subtrees.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从树中移除一条边会将其分成两个独立的子树。
- en: '![Adding an edge to a spanning tree](../Images/e28a411d136c8e9933d7c6b214f87819.png)
           ![Removing an edge from a spanning tree](../Images/cba24026fa9c11c4ba4582a14315067d.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![向生成树添加边](../Images/e28a411d136c8e9933d7c6b214f87819.png)        ![从生成树中移除边](../Images/cba24026fa9c11c4ba4582a14315067d.png)'
- en: A *cut* of a graph is a partition of its vertices into two disjoint sets. A
    *crossing edge* is an edge that connects a vertex in one set with a vertex in
    the other. We recall For simplicity, we assume all edge weights are distinct.
    Under this assumption, the MST is unique. Define cut and cycle. The following
    properties lead to a number of MST algorithms.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 图的*切割*是将其顶点划分为两个不相交集合。*跨越边*是连接一个集合中的顶点与另一个集合中的顶点的边。我们假设为简单起见，所有边的权重都是不同的。在此假设下，MST是唯一的。定义切割和循环。以下性质导致多种MST算法。
- en: Proposition. (Cut property)
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。（切割性质）
- en: Given any cut in an edge-weighted graph (with all edge weights distinct), the
    crossing edge of minimum weight is in the MST of the graph.![Cut property](../Images/cf586d2b64af869809ebdc411ac62015.png)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在带权重图中的任何切割中（所有边权重不同），最小权重的跨越边在图的MST中。![切割性质](../Images/cf586d2b64af869809ebdc411ac62015.png)
- en: The cut property is the basis for the algorithms that we consider for the MST
    problem. Specifically, they are special cases of the *greedy algorithm*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 切割性质是��们考虑MST问题的算法的基础。具体来说，它们是*贪心算法*的特例。
- en: Proposition. (Greedy MST algorithm)
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。（贪心MST算法）
- en: 'The following method colors black all edges in the the MST of any connected
    edge-weighted graph with V vertices: Starting with all edges colored gray, find
    a cut with no black edges, color its minimum-weight edge black, and continue until
    V-1 edges have been colored black.![Greedy algorithm for the'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法将所有连接的带权重图的MST中的所有边涂黑：从所有边都涂灰色开始，找到没有黑色边的切割，将其最小权重的边涂黑，继续直到涂黑V-1条边。![贪心算法](../Images/4893c0934eaf3c54ee97158ff3f89077.png)
- en: minimum spanning tree problem](../Images/fce4a44e5b52cd8391fb6ea99f7fa182.png)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 最小生成树问题](../Images/fce4a44e5b52cd8391fb6ea99f7fa182.png)
- en: Edge-weighted graph data type.
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 带权重图数据类型。
- en: We represent the weighted edges using the following API:![API for a weighted
    edge](../Images/d15f3b38bb66b1db1e0a704f920d0b1b.png)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下API表示带权重的边：![加权边的API](../Images/d15f3b38bb66b1db1e0a704f920d0b1b.png)
- en: The `either()` and `other()` methods are useful for accessing the edge's vertices;
    the `compareTo()` method compares edges by weight. [Edge.java](Edge.java.html)
    is a straightforward implementation.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`either()` 和 `other()` 方法用于访问边的顶点；`compareTo()` 方法通过权重比较边。[Edge.java](Edge.java.html)
    是一个直接的实现。'
- en: 'We represent edge-weighted graphs using the following API:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下API表示带权重的图：
- en: '![API for an'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![API for an'
- en: edge-weighted graph](../Images/9debc73e2ebb749f1820423a19107d53.png)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 带权重的图](../Images/9debc73e2ebb749f1820423a19107d53.png)
- en: We allow parallel edges and self-loops. [EdgeWeightedGraph.java](EdgeWeightedGraph.java.html)
    implements the API using the adjacency-lists representation.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们允许平行边和自环。[EdgeWeightedGraph.java](EdgeWeightedGraph.java.html) 使用邻接表表示法实现API。
- en: '![edge-weighted graph representation](../Images/4893c0934eaf3c54ee97158ff3f89077.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![带权重图表示](../Images/4893c0934eaf3c54ee97158ff3f89077.png)'
- en: MST API.
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MST API.
- en: We use the following API for computing an MST of an edge-weighted graph:![API
    for MST implementations](../Images/e434693a8e79435637575fec4a4da3b5.png)
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用以下API计算带权重图的最小生成树：![MST实现的API](../Images/e434693a8e79435637575fec4a4da3b5.png)
- en: 'We prepare some test data:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们准备了一些测试数据：
- en: '[tinyEWG.txt](tinyEWG.txt) contains 8 vertices and 16 edges'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[tinyEWG.txt](tinyEWG.txt) 包含8个顶点和16条边'
- en: '[mediumEWG.txt](mediumEWG.txt) contains 250 vertices and 1,273 edges'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[mediumEWG.txt](mediumEWG.txt) 包含250个顶点和1,273条边'
- en: '[1000EWG.txt](1000EWG.txt) contains 1,000 vertices and 8,433 edges'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[1000EWG.txt](1000EWG.txt) 包含1,000个顶点和8,433条边'
- en: '[10000EWG.txt](10000EWG.txt) contains 10,000 vertices and 61,731 edges'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[10000EWG.txt](10000EWG.txt) 包含10,000个顶点和61,731条边'
- en: '[largeEWG.txt](largeEWG.txt) contains one million vertices and 7,586,063 edges'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[largeEWG.txt](largeEWG.txt) 包含一百万个顶点和7,586,063条边'
- en: Prim's algorithm.
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Prim算法。
- en: 'Prim''s algorithm works by attaching a new edge to a single growing tree at
    each step: Start with any vertex as a single-vertex tree; then add V-1 edges to
    it, always taking next (coloring black) the minimum-weight edge that connects
    a vertex on the tree to a vertex not yet on the tree (a crossing edge for the
    cut defined by tree vertices).![Prim''s MST algorithm](../Images/72cc7838c404c3808a92447c2916af51.png)'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Prim算法通过在每一步将新边附加到单个增长树上来工作：从任何顶点开始作为单个顶点树；然后向其添加V-1条边，始终取下一个（着色为黑色）连接树上顶点与尚未在树上的顶点的最小权重边（对于由树顶点定义的切割的跨越边）。![Prim的MST算法](../Images/72cc7838c404c3808a92447c2916af51.png)
- en: 'The one-sentence description of Prim''s algorithm leaves unanswered a key question:
    How do we (efficiently) find the crossing edge of minimal weight?'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Prim算法的一句描述留下了一个关键问题：我们如何（高效地）找到最小权重的跨越边？
- en: '*Lazy implementation.* We use a priority queue to hold the crossing edges and
    find one of minimal weight. Each time that we add an edge to the tree, we also
    add a vertex to the tree. To maintain the set of crossing edges, we need to add
    to the priority queue all edges from that vertex to any non-tree vertex. But we
    must do more: any edge connecting the vertex just added to a tree vertex that
    is already on the priority queue now becomes *ineligible* (it is no longer a crossing
    edge because it connects two tree vertices). The lazy implementation leaves such
    edges on the priority queue, deferring the ineligibility test to when we remove
    them.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*懒惰实现.* 我们使用优先队列来保存跨越边并找到最小权重的边。每次我们将一条边添加到树中时，我们也将一个顶点添加到树中。为了维护跨越边的集合，我们需要将从该顶点到任何非树顶点的所有边添加到优先队列中。但我们必须做更多的事情：连接刚刚添加的顶点到已经在优先队列中的树顶点的任何边现在变得*不合格*（它不再是跨越边，因为它连接了两个树顶点）。懒惰实现将这样的边留在优先队列中，推迟不合格测试到我们删除它们时。'
- en: '[LazyPrimMST.java](LazyPrimMST.java.html) is an implementation of this lazy
    approach. It relies on the [MinPQ.java](MinPQ.java.html) priority queue.'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[LazyPrimMST.java](LazyPrimMST.java.html) 是这种懒惰方法的实现。它依赖于[MinPQ.java](MinPQ.java.html)
    优先队列。'
- en: '![Prim''s algorithm (lazy implementation)'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![Prim算法（懒惰实现）'
- en: for the minimum spanning tree problem](../Images/52b70117cc26715cb19ff61513a2293a.png)
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[最小生成树问题](../Images/52b70117cc26715cb19ff61513a2293a.png)'
- en: '*Eager implementation.* To improve the lazy implementation of Prim''s algorithm,
    we might try to delete ineligible edges from the priority queue, so that the priority
    queue contains only the crossing edges. But we can eliminate even more edges.
    The key is to note that our only interest is in the *minimal* edge from each non-tree
    vertex to a tree vertex. When we add a vertex v to the tree, the only possible
    change with respect to each non-tree vertex w is that adding v brings w closer
    than before to the tree. In short, we do not need to keep on the priority queue
    all of the edges from w to vertices tree—we just need to keep track of the minimum-weight
    edge and check whether the addition of v to the tree necessitates that we update
    that minimum (because of an edge v-w that has lower weight), which we can do as
    we process each edge in s adjacency list. In other words, we maintain on the priority
    queue just one edge for each non-tree vertex: the shortest edge that connects
    it to the tree.![Prim''s algorithm (eager implementation)'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*急切实现.* 为了改进Prim算法的懒惰实现，我们可以尝试从优先队列中删除不合格的边，以便优先队列只包含跨越边。但我们可以消除更多的边。关键在于注意到我们唯一感兴趣的是从每个非树顶点到树顶点的*最小*边。当我们将顶点v添加到树中时，与每个非树顶点w相关的唯一可能变化是，添加v使w比以前更接近树。简而言之，我们不需要在优先队列中保留所有从w到树顶点的边
    - 我们只需要跟踪最小权重的边，并检查是否添加v到树中需要我们更新该最小值（因为边v-w的权重更低），我们可以在处理s邻接列表中的每条边时做到这一点。换句话说，我们只保留优先队列中的一条边用于每个非树顶点：连接它与树的最短边。![Prim算法（急切实现）'
- en: for the minimum spanning tree problem](../Images/f5291e9fd80dfb90996bba4a72dd9292.png)
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[最小生成树问题](../Images/f5291e9fd80dfb90996bba4a72dd9292.png)'
- en: '[PrimMST.java](PrimMST.java.html) is an implementation of this eager approach.
    It relies on the [IndexMinPQ.java](IndexMinPQ.java.html) indexed priority queue
    to perform the *decrease-key* operation.'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '[PrimMST.java](PrimMST.java.html) 是这种急切方法的实现。它依赖于[IndexMinPQ.java](IndexMinPQ.java.html)
    索引优先队列来执行*减少键*操作。'
- en: Proposition.
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。
- en: Prim's algorithm computes the MST of any connected edge-weighted graph. The
    lazy version of Prim's algorithm uses space proportional to E and time proportional
    to E log E (in the worst case) to compute the MST of a connected edge-weighted
    graph with E edges and V vertices; the eager version uses space proportional to
    V and time proportional to E log V (in the worst case).
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: Prim算法计算任何连通的边权重图的最小生成树。Prim算法的懒惰版本使用空间与E成比例，时间与E log E成比例（在最坏情况下）来计算具有E条边和V个顶点的连通边权重图的最小生成树；急切版本使用空间与V成比例，时间与E
    log V成比例（在最坏情况下）。
- en: Kruskal's algorithm.
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Kruskal算法。
- en: Kruskal's algorithm processes the edges in order of their weight values (smallest
    to largest), taking for the MST (coloring black) each edge that does not form
    a cycle with edges previously added, stopping after adding V-1 edges. The black
    edges form a forest of trees that evolves gradually into a single tree, the MST.![Kruskal's
    algorithm for the minimum spanning tree problem](../Images/b418deb794229949903cb8242f58b73f.png)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Kruskal算法按照它们的权重值（从小到大）的顺序处理边，每次添加不与先前添加的边形成循环的边作为MST（着色为黑色），在添加V-1条边后停止。黑色边形成逐渐演变为单一树MST的树林。![Kruskal算法最小生成树问题](../Images/b418deb794229949903cb8242f58b73f.png)
- en: To implement Kruskal's algorithm, we use a priority queue to consider the edges
    in order by weight, a union-find data structure to identify those that cause cycles,
    and a queue to collect the MST edges. Program [KruskalMST.java](KruskalMST.java.html)
    implements Kruskal's algorithm along these lines. It uses the helper [MinPQ.java](MinPQ.java.html),
    [UF.java](UF.java.html), and [Queue.java](Queue.java.html) data types.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 要实现 Kruskal 算法，我们使用优先队列按权重顺序考虑边，使用并查集数据结构标识导致循环的边，使用队列收集最小生成树边。程序 [KruskalMST.java](KruskalMST.java.html)
    按照这些方式实现了 Kruskal 算法。它使用了辅助的 [MinPQ.java](MinPQ.java.html)、[UF.java](UF.java.html)
    和 [Queue.java](Queue.java.html) 数据类型。
- en: Proposition.
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命题。
- en: Kruskal's algorithm computes the MST of any connected edge-weighted graph with
    E edges and V vertices using extra space proportional to E and time proportional
    to E log E (in the worst case).
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Kruskal 算法使用额外空间与 E 成正比，时间与 E log E 成正比（在最坏情况下）来计算具有 E 条边和 V 个顶点的任何连通边权图的最小生成树。
- en: Exercises
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Prove that you can rescale the weights by adding a positive constant to all
    of them or by multiplying them all by a positive constant without affecting the
    MST.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 证明，通过给所有权重加上一个正常数或将它们全部乘以一个正常数，不会影响最小生成树。
- en: '*Solution.* Kruskal''s algorithm accesses the edge weights only through the
    `compareTo()` method. Adding a positive constant to each weight (or multiplying
    by a positive constant) won''t change the result of the `compareTo()` method.'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* Kruskal 算法只通过 `compareTo()` 方法访问边权重。给每个权重添加一个正常数（或乘以一个正常数）不会改变 `compareTo()`
    方法的结果。'
- en: Show that if a graph's edges all have distinct weights, the MST is unique.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 证明，如果一个图的边都有不同的权重，那么最小生成树是唯一的。
- en: '*Solution.* For the sake of contradiction, suppose there are two different
    MSTs of G, say T1 and T2. Let e = v-w be the min weight edge of G that is in one
    of T1 or T2, but not both. Let''s suppose e is in T1. Adding e to T2 creates a
    cycle C. There is at least one edge, say f, in C that is not in T1 (otherwise
    T1 would be cyclic). By our choice of e, w(e) ≤ w(f). Since all of the edge weights
    are distinct, w(e) < w(f). Now, replacing f with e in T2 yields a new spanning
    tree with weight less than that of T2 (contradicting the minimality of T2).'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* 为了推导矛盾，假设图 G 有两个不同的最小生成树，称为 T1 和 T2。设 e = v-w 是 G 中在 T1 或 T2 中的最小权重边，但不在两者中都存在。假设
    e 在 T1 中。将 e 添加到 T2 中会创建一个循环 C。C 中至少有一条边，假设为 f，不在 T1 中（否则 T1 就是循环的）。根据我们选择的 e，w(e)
    ≤ w(f)。由于所有边的权重都不同，w(e) < w(f)。现在，在 T2 中用 e 替换 f 会得到一棵权重小于 T2 的新生成树（与 T2 的最小性相矛盾）。'
- en: How would you find a maximum spanning tree of an edge-weighted graph?
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何找到边权图的最大生成树？
- en: '*Solution.* Negative the weight of each edge (or reverse the sense of comparison
    in the `compareTo()` method).'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* 反转每条边的权重（或在 `compareTo()` 方法中反转比较的意义）。'
- en: Implement the constructor for [EdgeWeightedGraph.java](EdgeWeightedGraph.java.html)
    that reads an edge-weighted graph from an input stream.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 [EdgeWeightedGraph.java](EdgeWeightedGraph.java.html) 实现从输入流读取边权图的构造函数。
- en: Determine the amount of memory used by [EdgeWeightedGraph.java](EdgeWeightedGraph.java.html)
    to represent a graph with V vertices and E edges, using the memory-cost model
    of Section 1.4.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定 [EdgeWeightedGraph.java](EdgeWeightedGraph.java.html) 用于表示具有 V 个顶点和 E 条边的图所使用的内存量，使用第
    1.4 节的内存成本模型。
- en: '*Solution.* 56 + 40V + 112E. [MemoryOfEdgeWeightedGraph.java](MemoryOfEdgeWeightedGraph.java.html)
    computes it empirically assuming that no `Integer` values are cached—Java typically
    caches the integers -128 to 127.'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* 56 + 40V + 112E。[MemoryOfEdgeWeightedGraph.java](MemoryOfEdgeWeightedGraph.java.html)
    通过假设没有缓存 `Integer` 值来进行经验计算—Java 通常会缓存 -128 到 127 的整数。'
- en: Given an MST for an edge-weighted graph G, suppose that an edge in G that does
    not disconnect G is deleted. Describe how to find an MST of the new graph in time
    proportional to E.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定边权图 G 的最小生成树，假设删除一个不会使 G 断开的边。描述如何在与 E 成正比的时间内找到新图的最小生成树。
- en: '*Solution.* If the edge in not in the MST, then the old MST is an MST of the
    updated graph. Otherwise, deleting the edge from the MST leaves two connected
    components. Add the minimum weight edge with one vertex in each component.'
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* 如果边不在最小生成树中，则旧的最小生成树是更新后图的最小生成树。否则，从最小生成树中删除边会留下两个连通分量。添加一个顶点在每个连通分量中的最小权重边。'
- en: Given an MST for an edge-weighted graph G and a new edge e, describe how to
    find an MST of the new graph in time proportional to V.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给定边权图 G 的最小生成树和一个新边 e，描述如何在与 V 成正比的时间内找到新图的最小生成树。
- en: '*Solution.* Add edge e to the MST creates a unique cycle. Delete the maximum
    weight edge on this cycle.'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* 将边 e 添加到最小生成树会创建一个唯一的循环。删除此循环上的最大权重边。'
- en: Implement `toString()` for [EdgeWeightedGraph.java](EdgeWeightedGraph.java.html).
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 [EdgeWeightedGraph.java](EdgeWeightedGraph.java.html) 实现 `toString()`。
- en: Suppose that you implement an eager version of Prim's algorithm but instead
    of using a priority queue to find the next vertex to add to the tree, you scan
    through all `V` entries in the `distTo[]` array to find the non-tree vertex with
    the smallest value. What would be the order of growth of the worst-case running
    time for the eager version of Prim's algorithm on graphs with V vertices and E
    edges? When would this method be appropriate, if ever? Defend your answer.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设你实现了 Prim 算法的急切版本，但是不使用优先队列来找到下一个要添加到树中的顶点，而是扫描 `distTo[]` 数组中的所有 `V` 个条目，找到具有最小值的非树顶点。在具有
    V 个顶点和 E 条边的图上，Prim 算法的急切版本的最坏情况运行时间的增长顺序是多少？如果有的话，什么时候这种方法是合适的？为什么？请解释你的答案。
- en: '*Solution.* Prim''s algorithm would run in time proportional to V^2, which
    is optimal for dense graphs.'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.* Prim 算法的运行时间将与 V^2 成正比，这对于稠密图是最佳的。'
- en: Provide an implementation of `edges()` for [PrimMST.java](PrimMST.java.html).
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为 [PrimMST.java](PrimMST.java.html) 实现 `edges()`。
- en: Creative Problems
  id: totrans-73
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意问题
- en: '**Minimum spanning forest.** Develop versions of Prim''s and Kruskal''s algorithms
    that compute the minimum spanning *forest* of an edge-weighted graph that is not
    necessarily connected.'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最小生成森林。** 开发 Prim 和 Kruskal 算法的版本，计算不一定连通的边权图的最小生成*森林*。'
- en: '*Solution.* [PrimMST.java](PrimMST.java.html) and [KruskalMST.java](KruskalMST.java.html)
    accomplish this.'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* [PrimMST.java](PrimMST.java.html)和[KruskalMST.java](KruskalMST.java.html)实现了这一点。'
- en: '**Certification.** Write a method `check()` that uses the following *cut optimality
    conditions* to verify that a proposed set of edges is in fact an MST: A set of
    edges is an MST if it is a spanning tree and every edge is a minimum-weight edge
    in the cut defined by removing that edge from the tree. What is the order of growth
    of the running time of your method?'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**认证。** 编写一个名为`check()`的方法，使用以下*割优化条件*来验证提议的边集是否实际上是最小生成树（MST）：如果一组边是一棵生成树，并且每条边都是通过从树中移除该边定义的割的最小权重边，则这组边就是MST。你的方法的运行时间增长率是多少？'
- en: '*Solution.* [KruskalMST.java](KruskalMST.java.html).'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* [KruskalMST.java](KruskalMST.java.html)。'
- en: Experiments
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 实验
- en: '**Boruvka''s algorithm.** Develop an implementation [BoruvkaMST.java](BoruvkaMST.java.html)
    of Boruvka''s algorithm: Build an MST by adding edges to a growing forest of trees,
    as in Kruskal''s algorithm, but in stages. At each stage, find the minimum-weight
    edge that connects each tree to a different one, then add all such edges to the
    MST. Assume that the edge weights are all different, to avoid cycles. *Hint*:
    Maintain in a vertex-indexed array to identify the edge that connects each component
    to its nearest neighbor, and use the union-find data structure.'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**Boruvka算法。** 开发Boruvka算法的实现[BoruvkaMST.java](BoruvkaMST.java.html)：通过将边添加到不断增长的树森林中来构建MST，类似于Kruskal算法，但是分阶段进行。在每个阶段，找到将每棵树连接到另一棵树的最小权重边，然后将所有这样的边添加到MST中。假设边的权重都不同，以避免循环。*提示*：维护一个顶点索引数组，以标识连接每个组件到其最近邻居的边，并使用并查集数据结构。'
- en: '*Remark.* There are a most log V phases since number of trees decreases by
    at least a factor of 2 in each phase. Attractive because it is efficient and can
    be run in parallel.'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*备注。* 由于每个阶段树的数量至少减少一半，所以最多有log V个阶段。这种方法高效且可以并行运行。'
- en: Web Exercises
  id: totrans-81
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网页练习
- en: '**Minimum bottleneck spanning tree.** A minimum bottleneck spanning tree of
    an edge-weighted graph G is a spanning tree of G such that minimizes the maximum
    weight of any edge in the spanning tree. Design an algorithm to find a minimum
    bottleneck spanning tree.'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最小瓶颈生成树。** 图G的最小瓶颈生成树是G的一棵生成树，使得生成树中任意边的最大权重最小化。设计一个算法来找到最小瓶颈生成树。'
- en: '*Solution.* Every MST is a minimum bottleneck spanning tree (but not necessarily
    the converse). This can be proved using the cut property.'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 每个MST都是最小瓶颈生成树（但不一定反之）。这可以通过割性质来证明。'
- en: '**Minimum median spanning tree.** A minimum median spanning tree of an edge-weighted
    graph G is a spanning tree of G such that minimizes the median of its weights.
    Design an efficient algorithm to find a minimum median spanning tree.'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最小中位数生成树。** 图G的最小中位数生成树是G的一棵生成树，使得其权重的中位数最小化。设计一个高效的算法来找到最小中位数生成树。'
- en: '*Solution.* Every MST is a minimum median spanning tree (but not necessarily
    the converse).'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 每个MST都是最小中位数生成树（但不一定反之）。'
- en: '**Maze generation.** [Create a maze](http://en.wikipedia.org/wiki/Maze_generation_algorithm)
    using a randomized version of Kruskal or Prim''s algorithm.'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**迷宫生成。** [使用随机化的Kruskal或Prim算法创建迷宫](http://en.wikipedia.org/wiki/Maze_generation_algorithm)。'
- en: '**Unique MST.** Design an algorithm to determine if the MST is unique for a
    given graph G.'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**唯一MST。** 设计一个算法来确定给定图G的MST是否唯一。'
- en: '**Random spanning tree.** Given a graph G, generate a spanning tree of G, uniformly
    at random. Using the following remarkable theorem of Aldous and Broder: Start
    at an arbitrary vertex s and take a random walk until every vertex has been visited
    (choosing an outgoing edge uniformly at random among all incident edges). If a
    vertex has never been visited before, add the edge to that vertex to the spanning
    tree T. Then T is a uniformly random spanning tree of G. The expected running
    time is bounded by the *cover time* of G, which is at most proportional to EV.'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**随机生成树。** 给定图G，均匀随机生成G的一棵生成树。使用Aldous和Broder的以下显著定理：从任意顶点s开始，并进行随机游走，直到每个顶点都被访问过（在所有相邻边中均匀随机选择一条出边）。如果一个顶点以前从未被访问过，则将边添加到该顶点以形成生成树T。那么T是图G的均匀随机生成树。预期的运行时间受限于G的*覆盖时间*，最多与EV成比例。'
- en: '**Minimum-weight feedback edge set.** A *feedback edge set* of a graph is a
    subset of edges that contains at least one edge from every cycle in the graph.
    If the edges of a feedback edge set are removed, the resulting graph will be acyclic.
    Design an efficient algorithm to find a feedback edge set of minimum weight in
    an edge-weighted graph with positive edge weights.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最小权重反馈边集。** 图的*反馈边集*是包含图中每个循环中至少一条边的子集。如果删除反馈边集的边，则结果图将是无环的。设计一个高效的算法，在具有正边权的加��图中找到最小权重的反馈边集。'
- en: '**Distribution of edge weights in two MSTs.** Suppose than an edge-weighted
    digraph has two MSTs T1 and T2. Prove that if T1 has k edges of weight w, then
    T2 has k edges of weight w.'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**两个MST中边权重的分布。** 假设加权有向图有两个MST T1和T2。证明如果T1有权重为w的k条边，则T2也有权重为w的k条边。'
- en: '**USA Computing Olympiad problem.** In a city there are N houses, each of which
    is in need of a water supply. It costs w[i] dollars to build a well at house i,
    and it costs c[i][j] to build a pipe in between houses i and j. A house can receive
    water if either there is a well built there or there is some path of pipes to
    a house with a well. Design an algorithm to find the minimum amount of money needed
    to supply every house with water. -->'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**美国计算奥林匹克问题。** 在一个城市中有N栋房子，每栋房子都需要供水。在第i栋房子建造井的成本为w[i]美元，在第i和第j栋房子之间建造管道的成本为c[i][j]。如果一栋房子建有井或者有一条管道路径通向有井的房子，那么这栋房子就可以接收水。设计一个算法来找到供应每栋房子所需的最小金额。'
- en: '*Solution.*: Create an edge-weighted graph with N+1 vertices (one for each
    house plus a source vertex x). Include an edge between every pair of vertices
    i and j with cost c[i][j] (to represent the potential pipes). Include an edge
    between the source s and every house i with cost w[i] (to represent the potential
    open wells). Find an MST in this edge-weighted graph.'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案.*: 创建一个带有 N+1 个顶点的边权图（每个房子一个顶点加上一个源顶点 x）。包括每对顶点 i 和 j 之间的成本 c[i][j] 的边（表示潜在的管道）。包括源
    s 和每个房子 i 之间成本为 w[i] 的边（表示潜在的开放井）。在这个边权图中找到一个最小生成树。'
- en: '**Spanning tree with exactly k orange edges.** Given a graph with edges colored
    either orange or black, design a linearithmic algorithm to find a spanning tree
    that contains exactly k orange edges (or report that no such spanning tree exists).'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**恰好有 k 条橙色边的生成树。** 给定一个边缘着色为橙色或黑色的图，设计一个线性对数算法来找到一个包含恰好 k 条橙色边的生成树（或报告不存在这样的生成树）。'
- en: '**Minimum variance spanning tree.** Given a connected edge weighted graph,
    find a minimum spanning tree that minimizes the variance of its edge weights.'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最小方差生成树。** 给定一个连通的边权重图，找到一个最小生成树，使其边权重的方差最小化。'
