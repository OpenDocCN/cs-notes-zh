- en: P21：Lecture 20 Non-blocking I_O - ___main___ - BV1ED4y1R7RJ
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P21：Lecture 20 非阻塞I/O - ___main___ - BV1ED4y1R7RJ
- en: Okay， all right， so we've made it to the last day。 Woohoo！
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，好的，我们已经来到了最后一天。哇哦！
- en: I'll have more comments right at the end of class about what this class， where
    you should。 feel that you are after taking this class and so forth。 Without raising
    your hands。 unless you absolutely want to， how many people in here came in， to
    CS110 and what， man CS110。 I've heard that it's so much work and it's going to，
    be like， yeah， I see a couple people going。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 课程结束时我会对这门课做更多的评论，关于完成这门课后你应该觉得自己处于什么状态等等。不要举手，除非你真的想要，多少人是带着这样的心态进入CS110的，“哇，CS110我听说它工作量超大，一定会很难”，我看到几个人在点头。
- en: I don't mind telling you it's going to be， not work， but it's been okay， right？
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我不介意告诉你，这工作量会很大，但应该没问题吧？
- en: Like you've made it and you did very well overall， I think I'm very happy with
    the way。 students have done and how people have gone through the class。 As I think
    I might have said before。 it's not me speaking up here that's teaching you， all
    this stuff。 As much as I'd love to say， well。 I'm the one teaching you all this
    stuff， it's you doing。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你们已经做到了，而且总体表现非常好，我对学生们的表现和大家在这门课中的进展感到非常满意。正如我之前可能提到过的，今天在这里讲话并不是我在教你们所有的东西。尽管我很想说，是我在教你们所有这些内容，但其实是你们在做。
- en: the assignments really is where you get the learning out of this， right？
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 作业实际上是你从这门课中获得学习成果的地方，对吧？
- en: You don't learn about six-spend from me telling you what six-spend is， you learn
    about it。 from like， wait， how does this work and how do I program？
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 你不是通过我告诉你什么是六花节学到六花节的，你是通过，等等，怎么运作的？我该如何编程来理解它的。
- en: What's this weird race condition and why is my code stalling and why is there
    this deadlock。 and whatever， you learn that from actually doing it and putting
    in the hard work。 So good job there。 I'll have a couple more comments about that
    later。 So how's the assignment going。 MapReduce getting there？ Okay， some people
    are like， I haven't started it yet。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这个奇怪的竞态条件是什么，为什么我的代码会卡住，为什么会发生死锁，等等，你们是通过实际操作并付出努力才学会这些的。所以做得好。稍后我会再对这些做一些评论。那么作业怎么样了？MapReduce做得怎么样了？好吧，有些人说，我还没开始做。
- en: you should probably start it soon if， you haven't yet。 Technically it's due
    today。 I put something on Piazza that said， look， no， or somebody。 else answered
    this on Piazza that said that you won't have any late days until starting， Friday。
    So you still have until tomorrow without any late credit for the assignment if
    you're still。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有开始做作业，应该尽早开始。技术上来说，今天是截止日期。我在Piazza上发布了一条消息，说，哦，不，或者是其他人回答了，Piazza上说你们从周五开始才会有迟交的机会。所以如果你还在做作业，你明天之前可以提交而不影响迟交积分。
- en: working on it。 We'll have office hours both today， right after class。 for about
    an hour and then tomorrow， morning my normal regular office hours。 I'll hold those
    as well。 You are welcome to stop by and chat about the assignment or about the
    final exam and。 so forth。 And the exam is Monday， so it's coming up pretty quickly。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们今天下课后会有办公时间，大约一个小时，然后明天早上我也会有正常的办公时间。我也会照常举行。你们可以随时来聊聊作业或期末考试等问题。考试是周一，所以它很快就到了。
- en: There's not actually that much time before the exam but it's Monday。 If you
    do have extenuating circumstances and need to take the later exam and so forth。
    please let me know before too long。 If you have other accommodations。 I will email
    you in the next day or two about timings and， so forth。 Okay， yes， question。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上离考试没剩下多少时间了，但今天是星期一。如果你有特殊情况，需要参加后面的考试，请尽快告诉我。如果你有其他安排，我将在接下来的一两天内通过邮件告知你相关的时间安排等事宜。好吧，问题来了。
- en: Are there going to be any office hours over the weekend？ Well， that's a good
    question。 The question was， are there going to be any office hours over the weekend？
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 周末有办公时间吗？嗯，这是个好问题。问题是，周末有办公时间吗？
- en: We will definitely have something on Sunday。 I haven't talked to the CAs yet
    about what other plans they do。 We'll have some。 There's also going to be a review
    session that I think the CAs we're talking about Saturday。 at some point or something
    like that but we'll let you know as soon as we can about that。 Yeah。 so that's
    that。 And then let's see what else。 We will have everything graded midweek next
    week as best we can before that。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一定会在周日做些事情。我还没有和助教们谈论他们的其他计划。我们会有一些活动。我记得助教们还在讨论是否在周六进行一个复习环节，什么时间之类的，我们会尽快通知你们的。对，就这样。然后，看看还有什么。我们会尽力在下周中期之前评定好所有成绩。
- en: As far as one of their logistical thing for the end of term evaluations， please
    do that。 if you get the chance。 I will gladly take any constructive feedback and
    constructive feedback is like。 oh， you， know what， there was too much material
    or this material didn't make much sense when。 you covered it。 And I mean， I'm
    not upset about good constructive feedback。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 至于期末评估的后勤工作，请在有机会时完成。如果你有机会，我非常乐意接受任何建设性的反馈，建设性的反馈比如说：哦，你知道吗，内容太多，或者某些内容在你讲解时不太通顺。我是说，我不会对好的建设性反馈感到不高兴。
- en: It's feedback like the question is not going to help me much。 But like feedback
    like， hey。 I wish you Chris would have done this or this was good but， this could
    have been better。 That sort of stuff fine with me。 I'm always trying to make the
    class better。 So I'll appreciate if you did that。 Let's see。 Okay。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这种反馈像“这个问题对我帮助不大”是不行的。但是类似于“嘿，我希望你Chris能做这个，或者这个做得很好，但可以改进”的反馈我很欢迎。我一直在努力让课程变得更好。所以如果你能给我这些反馈，我会很感激。好吧。
- en: so today we're going to talk about a topic that's not on the final。 And in fact。
    I was looking at it。 I was going over it this morning going。 It's way too much
    for one lecture。 There's actually too much stuff。 I'm going to skip some things
    in here and basically give you the kind of the overview。 we have a couple of examples
    of this non-blocking IO。 So so far we have been talking about IO。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我们要讨论一个期末考试不涉及的主题。实际上，我今天早上在回顾时看了一下，发现这内容对一节课来说太多了，内容实在太多，我打算跳过一些内容，基本上给你们一个概览。我们有几个非阻塞IO的例子。到目前为止，我们一直在讨论IO。
- en: In other words， reads and writes that when you send the， when you do the system
    call for。 read or write with a file descriptor， it actually blocks until it gets
    a response or。 and the response is some amount of data。 Now it's not always all
    the data you're either sending or requesting but it's some of the。 data or at
    least it may， it's going to be some data and it waits until that some data。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，当你进行读写操作时，系统调用的文件描述符会被阻塞，直到它收到响应，响应会包含一定量的数据。现在，这并不总是你发送或请求的所有数据，而是部分数据，或者至少是某些数据，直到返回这些数据为止。
- en: is actually processed， be it over the network or reading or writing a file。
    And today。 and the way we get around those limitations is we have just been doing
    multi。 threading or multi processing which generally multi threading where we
    say， oh great， let's， run。 we're going to have this reader write but it's going
    to block。 So we're going to have。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 它实际上是在处理，无论是通过网络传输还是读写文件。今天，解决这些限制的方法是我们使用多线程或多进程，通常是多线程， 我们说，哦，太好了，让我们运行，我们将有一个读取器写入，但它会被阻塞。所以我们将会有……
- en: we're going to have the ability for other threads to accept connections， or
    to be also doing work。 That's how we're getting around it。 It's not the only way。
    There is this idea of having a non-blocking situation where you say I'm going
    to read。 some data and it might come back with zero data but it comes back instantly。
    Here it does。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将让其他线程也能接受连接，或做一些其他工作。这样我们就解决了这个问题。这不是唯一的方法。还有一个非阻塞的概念，你可以说我将要读取一些数据，可能会返回零数据，但它会立刻返回。在这里它确实是这样的。
- en: it comes back with some amount of data and we're going to see why that might。
    be an interesting idea。 And of course you can't do it just on your own program。
    there's going to be some other， things we need to have support from the kernel
    and from the operating system about。 Yeah。 Question。 Yeah， good question。 This
    just came up on Piazza。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它会返回一些数据，我们将看看为什么这可能是一个有趣的想法。当然，你不能只在自己的程序上操作，仍然需要操作系统和内核的一些支持。对，问题？是的，好的问题。这个问题刚在Piazza上提到。
- en: There was a question on a recent final maybe last quarter actually that mentioned
    the term。 I/O bound and we can contrast that with CPU bound。 Okay。 And I made
    a comment in the Piazza post。 You should know what I/O bound means and maybe we
    haven't talked about it explicitly。 But here's what I/O bound actually means。
    It means that your processor is not chugging away doing calculations。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 最近有一个问题，可能是上个季度的期末考试，提到了术语 **I/O bound**，我们可以将其与 **CPU bound** 进行对比。好吧。我在 Piazza
    帖子中做了一个评论。你应该知道什么是 I/O bound，可能我们没有明确讨论过这个概念。但这就是 I/O bound 实际的含义。它意味着你的处理器没有在忙着做计算。
- en: It's just waiting for some input or output to happen。 And that's this idea of
    this weight。 this blocking sort of idea is it takes time for， data to be processed。
    Now I've mentioned on Monday that when you're reading and writing from a hard
    drive it's。 like millions of times slower than reading and writing from memory。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 它只是在等待某些输入或输出的发生。这种等待、阻塞的概念是，数据处理需要时间。现在，我在周一提到过，当你从硬盘读写数据时，速度比从内存读写慢了百万倍。
- en: And so there is some what we call latency that is involved with actually doing
    a read， or write。 So something that's I/O bound means your CPU is sitting there
    twiddling its thumbs going。 and I don't know what to do right now because I can't
    go on until I get some data so that's。 what it means to be I/O bound。 The U bound
    is kind of the exact opposite。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，执行读取或写入时，存在一些我们称之为延迟的时间。因此，I/O bound 意味着你的 CPU 正坐在那里，毫无所事，想着：“我现在不知道该做什么，因为在获取数据之前我不能继续执行。”这就是
    I/O bound 的意思。**U bound** 则是完全相反的。
- en: It means that your computer is chugging away doing something and it can't finish
    some function。 until it finishes all of the calculations it needs to do or something
    that is taking the。 processors time。 If something's I/O bound if you can use that
    processor。 which by the way is really fast， to do some other work let's do that。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你的计算机在做一些事情，不能完成某些功能，直到它完成所有必要的计算，或者其他占用处理器时间的事情。如果某个操作是 I/O bound的，如果你能利用处理器（顺便说一句，它非常快）做些其他的工作，那就去做吧。
- en: And that's where we have multi threading and that's why having this question
    came up the。 other day too about oh what happened when we had one processor how
    did we get this idea。 of multi processing like multi threading how did that actually
    work。 It was because your processor is so fast that it can switch between processes
    faster than。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们为什么有多线程的原因，也是为什么最近有问题提到，哦，当我们只有一个处理器时，怎么得到多处理的概念，像多线程这种方式是怎么工作的。原因是你的处理器非常快，它可以比原来更快地在不同的进程之间切换。
- en: you can notice so that when you move your mouse around the screen guess what
    that's a。 different process taking care of the mouse movement but you don't you
    can't tell because。 it's it happens so fast and it does such a small amount of
    work that it looks like it's。 just happening at the exact same time as something
    else。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以注意到，当你在屏幕上移动鼠标时，猜猜看，那是一个不同的进程在处理鼠标的移动，但是你无法察觉，因为它发生得非常快，且工作量非常小，看起来就像是和其他事情同时发生。
- en: And on a multi process or computer like the ones we have these days it probably
    is but。 on a single processor it was just that your mouse would move around and
    part of the time。 that it was would have been working on your program is now spent
    actually moving the mouse。 and updating the screen and so forth。 And this goes
    back all the way back to the mid 1980s when you bought the original of the。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在像我们现在使用的多处理器电脑上，可能确实如此。但在单处理器上，情况是，当你移动鼠标时，程序本应处理的部分时间，现在被用于移动鼠标、更新屏幕等等。这可以追溯到
    1980 年代中期，当时你购买了第一台 **Macintosh**。
- en: original Macintosh computer it had mouse routines that it would look just like
    you know something。 would be happening in the mouse would take over for a second
    and you couldn't tell that。 it was time from the processor to take the time。 Yeah。
    I mean saying something is I/O blocked is similar yes I mean the term I/O bound
    is well known。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 原始的 Macintosh 电脑有处理鼠标的程序，它看起来就像是，嗯，当鼠标控制器接管时，程序会暂停一会儿，而你不会察觉到。其实是处理器在处理中断，交换了时间片。是的，意思是说
    I/O 被阻塞是相似的，**I/O bound** 这个术语是很常见的。
- en: as oh you've got a processor that's doing some input output and it's bound by
    the fact。 that that's low part is the input output that's really what I/O bound
    generally means。 And if you can if you can make something CPU pound bound that's
    not not necessarily a。 bad thing it's not neither one of these is a bad thing
    but being CPU bound is actually。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 就像是，你有一个处理器正在进行输入输出操作，并且由于输入输出部分的速度较慢，它被限制在 I/O 密集型的状态，这就是 I/O 密集型的真正含义。如果你能够让某些东西变成
    CPU 密集型，那也不一定是坏事，这两者都不是坏事，但 CPU 密集型实际上是。
- en: harder because it's much because your computer is so fast at doing things right
    now if you。 were trying to factor large numbers that that's going to be a CPU
    bound sort of thing because。 you take a lot of processing to do that right and
    you might be that you have to factor some。 large number and then spit it out to
    the processor。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就更难了，因为现在你的计算机在做事情时非常快。如果你试图对大数字进行因数分解，那就会是 CPU 密集型的任务，因为你需要大量的处理来完成这一点，对吧？而且你可能需要分解某个大数字，然后把结果返回给处理器。
- en: So in fact I guess the farm program that we did with multi processing had elements
    of it。 that were CPU bound on the Python side right because it had to do all that
    factoring and。 then it never got back to you with a response until after the CPU
    part was done。 So so you can do that but knowing the difference between these
    two terms is going to be helpful。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所以实际上，我想我们之前做的多进程农场程序就有一些元素是 CPU 密集型的，特别是在 Python 方面，因为它需要处理所有那些因数分解，然后直到 CPU
    部分完成，才会给你返回响应。所以你可以做到这一点，但了解这两个术语的区别会很有帮助。
- en: long term anyway。 So yeah。 Alright， Kathy and then we'll go back here。 What
    if a program always be one of them？ Would a program always be one of them？
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 总体而言。所以是的，好吧，凯西，然后我们再回到这里。如果一个程序总是其中之一呢？程序总是会是其中之一吗？
- en: A program could at certain times be CPU bound and at certain times be I/O bound
    but it's。 going to be it's going to be one of the other generally。 It's all well
    it's generally going to fit into one of those although you could if you。 let's
    say you had you knew you were going to have a whole bunch of I/O bound threads。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一个程序在某些时候可能会是 CPU 密集型的，而在另一些时候可能会是 I/O 密集型的，但它通常会属于这两者之一。一般来说，它会适合这两者之一，尽管如果你…假设你知道你会有一大堆
    I/O 密集型线程，情况就会不同。
- en: just keep doing more threads until it becomes CPU bound or the trade off is
    not you know。 then that's perfect right you've got all these outstanding connections
    and you're you're。 chugging away creating all your processing all these outstanding
    connections and you've。 got so many that it actually is taking your process of
    time until you get something back。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 就是继续增加更多线程，直到它变成 CPU 密集型，或者权衡不再合理，这时就完美了，对吧？你有所有这些未完成的连接，你正在努力处理这些连接，处理所有这些未完成的连接，你的处理器时间都被占用了，直到你得到返回结果。
- en: So yeah I mean the trade off would be or the idea would be yeah keep doing see
    more CPU。 stuff while you can you know so now sometimes you don't want to do that
    because it takes。 more energy and there's other you know things going on your
    fans or come out on your computer。 and whatever but if you really wanted to eke
    out every processor cycle from your computer。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以是的，我的意思是，权衡的意思是，或者说想法是，继续做更多的 CPU 密集型工作，只要你能做到。你知道，有时候你不想这样做，因为它会消耗更多的能量，电脑的风扇也会转起来，其他的事情也会发生，但如果你真的想充分利用你的计算机的每一个处理器周期。
- en: you would keep doing more threads to be able to do that。 I mean I could ask
    you you know I could ask you I could say why is networking going to。 be I/O bound
    and you would probably you would have to say oh it's because it's the slower。
    part of the connection it's got to talk between two computers and it's not you
    and your processor。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你会继续增加线程来实现这一点。我的意思是，我可以问你，我可以问你，我可以说为什么网络会是 I/O 密集型的，你可能会说哦，因为它是连接中的较慢部分，它需要在两台计算机之间通信，而这不是你和你的处理器。
- en: has to wait and we use six to spend and we use you know we use other blocking
    sort of。 reads and writes and so forth so yeah。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 必须等待，我们使用六个进程来执行，我们还使用了其他阻塞的读取和写入操作，等等，所以是的。
- en: '![](img/969edac52273f03a794226a015ab0a12_1.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_1.png)'
- en: Other questions on that good questions。 Okay so let's talk about I/O in general
    and system calls。 We have this idea that we have fast system calls okay those
    are the ones that return。 immediately which means all they need to do is do some
    process that doesn't really involve。 a connection or file reading or writing and
    so forth。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 其他问题吗？好问题。好了，我们来谈谈 I/O 和系统调用。我们有这样的概念，就是快速的系统调用，好的，这些调用是那些立即返回的调用，也就是说，它们需要做的就是进行一些处理，这些处理实际上不涉及到网络连接、文件读取或写入等。
- en: So there are lots of examples of system calls that might do that but let's say
    get host。 name or something like that that system call doesn't need to go outside
    the network it needs。 to just query something that the that the kernel already
    knows about it just returns。 immediately and that's the way it goes。 There's no
    real limit on immediately as long as it needs to do stuff as long as the processor。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 所以有很多系统调用的例子可能会这样做，但我们可以举个例子，比如获取主机名之类的系统调用，这种调用不需要访问外部网络，它只需要查询内核已经知道的某些信息，立即返回，这就是它的运行方式。只要需要做一些处理，只要处理器能支持，就没有真正的“立即”限制。
- en: needs to be doing things or the kernel needs to be actually doing something
    to do that that。 still can be considered fast even if it takes 60 seconds it still
    might be fast because it。 has to do something so you're factoring a whole bunch
    of numbers or you're factoring。 one number it might be still fast in the sense
    that it's not waiting around but the idea。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 需要进行一些处理，或者内核需要实际执行某些操作来完成这个过程。即使它花费了60秒，仍然可以认为它是快速的，因为它需要进行某些处理。所以，你可能在因式分解一堆数字或一个数字，仍然可以认为它是快速的，意思是它没有在等待。但是这个想法是……
- en: of a slow system call is when it actually has to say I can't do anything right
    now until。 something else responds to me or you know gets back with some data
    and so forth okay。 So slow system calls are the ones where we don't know how long
    they're going to wait。 it depends on some other resource right reading from a
    client might depend on some other computer。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一个慢速系统调用的例子是，当它必须说“我现在什么都做不了，直到其他某些东西给我回应，或者返回一些数据等等”。好的，慢速系统调用就是那些我们不知道它们会等待多久的调用，它们依赖于其他资源，比如从客户端读取可能依赖于其他计算机。
- en: getting back to you and the and we want to minimize that kind of behavior if
    we can help， it okay。 So calls to read are fast if they're from a local file because
    it's not that much but。 you still depends on what your definition is you can still
    consider that slow because。 file reading is slower than memory access and so forth
    but in general it's relatively fast。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 回到你和你的，且我们希望尽可能避免这种行为。如果我们能帮忙的话。好的，所以读取调用是快速的，如果它们来自本地文件，因为它不会花费太多时间。但这仍然取决于你如何定义，你也可以认为它是慢的，因为文件读取比内存访问要慢，但总体来说，它是相对快速的。
- en: What calls are slow if it's going to a socket or if there's some internal congestion
    like。 the socket is filled with lots of in going and outgoing connections and
    that can happen。 when you have one port responding to all these connections like
    a web server often has its。 port like it's really on the edge of oh my gosh I'm
    almost gonna not have enough time。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 如果调用是向一个套接字发送的，或者如果有内部的拥塞，比如套接字被大量进出连接填满，这可能会发生。当你有一个端口来响应所有这些连接时，就像一个网络服务器经常会遇到的情况，那个端口就处在“哦天哪，我几乎没有足够的时间处理了”的临界状态。
- en: to respond to these because just the port itself is getting lots and lots of
    requests。 This is what happens when you go online to like Reddit and somebody
    puts a webpage and。 they're not ready for all the connections and it like suddenly
    goes down it's because。 well I just couldn't handle all the connections so we
    want to avoid that if we can。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对这些调用作出响应是快速的，因为端口本身会收到大量的请求。这就是你上网去 Reddit，某人发布一个网页，但他们没准备好处理所有连接，结果网页突然崩溃了，因为他们无法处理所有连接。所以我们想要避免这种情况。
- en: '![](img/969edac52273f03a794226a015ab0a12_3.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_3.png)'
- en: And then slow system calls in general can block indefinitely in other words
    you have。 to wait for them and in that case they're considered slow。 We've done
    some of this before where we've made it so that slow system calls don't matter。
    wait PID is a good one where we have that W know hang。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，慢速系统调用一般会无限期阻塞，换句话说，你必须等待它们。在这种情况下，它们被认为是慢的。我们之前做过一些工作，使得慢速系统调用不再重要，比如等待
    PID 就是一个很好的例子，我们已经做了让它“挂起”。
- en: Remember before when we said oh if we don't if we do wait PID without W know
    hang and the。 negative one or not even the one just the W know hang it will wait
    until the child ends。 and that's a slow system call because it's waiting for the
    child end and it just goes。 on just gonna be off the processor until the child
    finishes。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 记得之前我们说过，如果我们在没有W know hang的情况下做wait PID，并且是负一，甚至不只是负一，只是W know hang，它会等到子进程结束。这是一个慢的系统调用，因为它在等待子进程结束，直到子进程完成，它才会结束，一直占用处理器。
- en: So once we start using W know hang you have some logic you have to use but it
    means that。 you can get control back and just do it call it again at some other
    time after you've done。 some other work and then it won't and then you get the
    benefit of not having to hold。 up until that ends。 So let's see reading right
    with iOSocstream we've generally done it with multi threading。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 所以一旦我们开始使用W know hang，你必须使用一些逻辑，但这意味着你可以重新获得控制权，并且在完成其他工作后再次调用它。这样，你就不需要等到操作结束再继续进行。让我们看看使用iOSocstream的读取，我们通常是通过多线程来完成的。
- en: to say great do the accept call but do it on in another thread so that you can
    go back。 and do another accept immediately。 Now we're gonna do it in a slightly
    different way okay accept and read slow the way we've。 been doing。 So we'll see
    we're gonna have to work up to this by the way about how this how this works。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 可以说，做一个accept调用，但在另一个线程中进行，这样你可以立即回去再做一个accept调用。现在我们将以稍微不同的方式来做，接受和读取就像我们一直在做的那样。所以我们将逐步了解这是如何工作的。
- en: '![](img/969edac52273f03a794226a015ab0a12_5.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_5.png)'
- en: So how do we actually make these slow system calls fast well we can tell the
    we can tell。 the system don't wait on an accept call what does that mean it means
    you call accept and。 then it returns immediately and you're responsible for doing
    it again if you need to actually。 get in a connection we'll see how this works
    it's gonna be a lot of wild true loops with。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们到底如何让这些慢速系统调用变得更快呢？我们可以告诉系统不要在accept调用时等待，这是什么意思呢？这意味着你调用accept，然后它立即返回，你负责在需要实际获得连接时再次调用它。我们将看到这是如何工作的，可能会有很多的循环调用。
- en: some extra help from the operating system okay as we'll see and we've done some
    of this。 before in other forms so it will look very similar in a big picture。
    So generally if you do accept if you set it to non blocking it can return with
    negative。 one which generally means an error and often it sets remember it sets
    error no if you get。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统提供了一些额外的帮助，好吧，正如我们所看到的，我们以前以其他形式做过一些类似的事情，所以从大图来看，它会非常相似。通常情况下，如果你做accept并将其设置为非阻塞，它可能会返回负一，这通常意味着出现错误，通常还会设置错误。如果你完全没有收到请求，它就会立即返回，并且在未来的某个时刻会发送数据。
- en: an error in this case it sets it to E would block which basically says okay
    it's the error。 is that it would block except there's no connection to block on
    so that's the error so。 it's not really an error but that's how you handle it
    we've seen that before as well。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下出现错误时，它将其设置为E would block，这基本上是说：好吧，错误是它会阻塞，但没有连接可以阻塞，所以这是错误。所以它实际上并不是真正的错误，但就是这样处理的，我们之前也见过这种情况。
- en: '![](img/969edac52273f03a794226a015ab0a12_7.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_7.png)'
- en: Same thing with read and write you can set those to be non blocking but then
    it becomes。 your responsibility to call them again when you want to send more
    data okay now you already。 have to do that because all the data might not get
    sent from your buffer anyway but in。 this case it could be zero bytes get sent
    just because you it's not even ready to take。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与读取和写入一样，你可以将它们设置为非阻塞，但之后如果你想发送更多数据，那么你就有责任再次调用它们。好吧，现在你已经需要这样做，因为并非所有数据都能从缓冲区中发送出去，但在这种情况下，即使没有准备好接收，也可能只发送零字节。
- en: your request at all so it just returns immediately and at some time in the future
    it will send。 the data okay so if it does if there's no more if it would block
    and there is data to。 be sent still you'll get this negative one business back
    okay if there's no more data。 you'll still just get zero as always okay so that's
    how it's gonna work let's see a couple。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有更多的数据需要发送，并且它会阻塞，你会得到这个负一的返回值。好吧，如果没有更多的数据，你仍然会像以前一样只得到零。那么它就是这么工作的，我们再看看几个例子。
- en: examples of this let's do talk about this little program called slow alphabet
    server I'm。 not gonna type it up because of the time but here's what it's going
    to do we're going to。 artificially put some delay in here of a 0。1 second delay
    and a tenth of a second delay which。 is noticeable you can actually notice that
    and what we're gonna do is we are basically。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子让我们来讨论一个叫做慢字母服务器的小程序。我不会键入它，因为时间关系，但这就是它将要做的事情，我们会在这里人工添加一些延迟，0.1秒的延迟和十分之一秒的延迟，这种延迟是可以注意到的，你实际上可以察觉到，并且我们将做的事情是，我们基本上。
- en: going to set up a client here to we're gonna have a thread pool like we've done
    before right。 and when we get a connection request all we're gonna do is set up
    a little output sock buffer。 and then feed the alphabet one letter at a time with
    a delay in there after each letter。 okay so what that's gonna mean it's gonna
    be 26 it's gonna take 26 letters it's gonna， take 2。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在这里设置一个客户端，就像我们之前做过的那样对吧？当我们收到连接请求时，我们要做的就是设置一个小的输出`sock`缓冲区，然后在每个字母后面加上一点延迟，逐字母发送字母表。所以这意味着26个字母将需要26次传输，总共需要2秒钟。
- en: 6 seconds to actually push out which is really slow to push 26 letters out but
    we're。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 6秒钟才真正推送出去，推送26个字母非常慢，但我们。
- en: '![](img/969edac52273f03a794226a015ab0a12_9.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_9.png)'
- en: artificially doing this to see why it might be a good idea to use this non-vaught
    index。 okay so here's what it does it waits for a connection it has a thread pool
    to actually。 handle the connection so it can request it can respond to many connections
    the worker is。 slow because we put that artificial delay in there and then it
    closes the connection nothing。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 人工这样做是为了看看为什么使用这种非阻塞的方式可能是个好主意。好吧，它是这样做的：它等待连接，拥有一个线程池来处理连接，这样它就能处理多个连接，工作者很慢，因为我们在里面加了人工延迟，然后它关闭连接，不做任何事情。
- en: here is actually non-blocking but it's definitely slow because we put that delay
    in there okay。 you will see this often servers in general if they're trying to
    serve many many web pages。 will give a little bit of data to you and a little
    bit of data the next one a little bit。 of data the next one so that it doesn't
    block one for too too long okay and you'll notice。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这里实际上是非阻塞的，但由于我们加了延迟，它确实很慢。你会经常看到，服务器通常如果试图提供很多网页，会先给你一点数据，然后给你下一点数据，接着再给你一点数据，这样它就不会让某一部分阻塞太长时间。你会注意到。
- en: this sometimes if you're loading a web page it loads partial data and it loads
    a little。 bit of the image you're trying to download or it loads you know this
    this add and then。 this add and whatever it takes a little bit of time and that's
    you know what happened。 so you've seen this before okay you've seen these you've
    also seen buffering like on YouTube。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这有时就像你加载网页时，加载的是部分数据，可能加载了一点你试图下载的图片，或者加载了某个广告，然后又加载了另一个广告，反正就是需要一些时间，这就是发生了什么，你以前见过这样的情况。你也见过像YouTube那样的缓冲。
- en: which is more or less the same thing where there's just not enough data that's
    gotten。 to you yet to actually give you an image or give you the the video so
    that's what happens。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上是同样的事情，因为还没有足够的数据被传送到你这里，来给你一个图像或视频，这就是发生的情况。
- en: '![](img/969edac52273f03a794226a015ab0a12_11.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_11.png)'
- en: '![](img/969edac52273f03a794226a015ab0a12_12.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_12.png)'
- en: there okay so here's a client that we're gonna actually test okay and the client
    here has。 a while loop and basically it goes and it tries to connect to the server
    which is going。 to be on local host here the same machine here and then it is
    going to read one byte。 at a time and then print out that byte but we have yet
    to do this non-blocking thing so。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以这是我们将要实际测试的客户端。客户端这里有一个`while`循环，基本上它去尝试连接到服务器，服务器将在本地主机上运行，也就是同一台机器上，然后它将一次读取一个字节，然后打印出那个字节，但我们还没有做这个非阻塞的操作。
- en: the read it's going to read it pretty fast print it out pretty fast and then
    go back。 here and read it again the delay though it's going to come from the server
    doing really。 slow pushing out of the data okay and that's all it's doing it's
    printing out this out。 so let's actually see this if we let's see there we go
    okay so we have what was the name。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 读取会很快，它会很快打印出来，然后再返回去重新读取。延迟的来源实际上是服务器慢慢推送数据的过程。好吧，这就是它正在做的，打印出这些数据。所以我们来实际看看这个，如果我们看看这里，好了，我们知道了，名字是什么？
- en: '![](img/969edac52273f03a794226a015ab0a12_14.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_14.png)'
- en: '![](img/969edac52273f03a794226a015ab0a12_15.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_15.png)'
- en: of this file this one was slow alphabet if we do slow alphabet server like this
    in the。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件的字母是慢的，如果我们像这样做慢速字母服务器的话。
- en: '![](img/969edac52273f03a794226a015ab0a12_17.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_17.png)'
- en: '![](img/969edac52273f03a794226a015ab0a12_18.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_18.png)'
- en: background and then we do see this one was this one was blocking alphabet client
    okay。 watch what happens there's your amount of like reading the 26 bytes you
    could tell it。 was slow it's actually time it okay if you time it then it will
    take in this case 2。6。 seconds which makes sense we delayed for 0。1 second for
    letter and it's 26 letters and。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 背景，然后我们确实看到这个是阻塞的字母客户端，好吧。看看发生了什么，当你读取26个字节时，你可以感觉到它很慢，实际上给它计时的话，好的，如果你计时的话，它会花费2.6秒，这很有道理，因为我们为每个字母延迟了0.1秒，共有26个字母。
- en: so forth okay that shouldn't be too strange notice something in here we did
    put a little。 we counted how many times we called the read right we called it
    26 times mainly because。 we asked for one character at a time okay is there a
    question over here oh good question。 yeah good question so I used a little bash
    shortcut if you do time exclamation next or。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，好吧，这不应该太奇怪，注意到这里我们加了一个小的...我们统计了调用`read`的次数，实际上我们调用了26次，主要是因为我们每次只请求一个字符。好的，这里有问题吗？哦，好的问题。是的，好问题，我用了一个小的bash快捷方式，如果你做`time
    !`，下一个命令或者...
- en: do something with two exclamation it does the previous command after like it
    does the。 previous command we've time for instance so it just does the last thing
    this would probably。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 用两个感叹号做某事，它会执行之前的命令，就像是执行了之前的命令，比如`time`，例如它会做最后的事情，应该会...
- en: '![](img/969edac52273f03a794226a015ab0a12_20.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_20.png)'
- en: do it twice time time yeah it does the last thing with it with the current command
    good。 question okay so anyway that's what's happening with the server okay nothing
    is new yet okay。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 做两次，`time time`，对，它会做最后的事情，并执行当前命令。好的，问题。好了，不管怎样，这就是服务器的情况，好的，到目前为止没有什么新东西。
- en: '![](img/969edac52273f03a794226a015ab0a12_22.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_22.png)'
- en: we basically done exactly what we've done before now I could do this up to 128
    times before anyone。 would actually not get 0。2 seconds because I wouldn't even
    I'd be able to keep doing this。 as many times as we wanted to in fact I'm gonna
    cancel the server for right now but that's。 so that's where we kind of are already
    nothing should be new yet everything's blocking in。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们基本上做了和之前一样的事情，现在我可以在不超过128次之前，任何人都不会实际看到0.2秒，因为我甚至不会停下来，我可以继续做这么多次，事实上，我现在要取消服务器，但是。
    所以这就是我们目前的状态，应该没有什么新鲜的东西，一切都是阻塞的。
- en: the kind of the way it is we put this strange delay in there to kind of show
    that it takes。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我们放入这个奇怪延迟的方式，目的是为了展示它需要的时间。
- en: '![](img/969edac52273f03a794226a015ab0a12_24.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_24.png)'
- en: some time and and it could be a network connection that takes some time okay
    question oh good question。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 一些时间，可能是一个需要一些时间的网络连接，好的，有问题吗？哦，好的问题。
- en: '![](img/969edac52273f03a794226a015ab0a12_26.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_26.png)'
- en: why did they use the why look I kind of wanted to show you that you have to
    do it one if you。 want to do it one bite at a time if you wanted to do a stream
    you could but that's all hidden。 from you and in this case and by the way it would
    ask for a big buffer is worth so it。 would still wait 26 or probably 2。6 seconds
    but not it probably wouldn't you wouldn't be able。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么他们使用`why`，看，我想给你展示的是，如果你想一次只做一个字节，你必须这样做。如果你想做一个流，你可以，但所有的这些都被隐藏了。在这种情况下，顺便说一下，它会请求一个大的缓冲区，因此它仍然会等待26秒或者大约2.6秒，但并不一定，你也许无法...
- en: to see each letter it would probably ask for letter and then go okay I asked
    for the whole。 26 at once so in this case you want to go look let's just see it
    one character at a time。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 要看到每个字母，它可能会请求一个字母然后继续处理，所以在这种情况下，你想看看让我们每次一个字符地查看它。
- en: '![](img/969edac52273f03a794226a015ab0a12_28.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_28.png)'
- en: all right so this is what we just ran and we saw that took 2。6 seconds and in
    our case。 we're only reading one character at a time so you can see each character
    and you can kind。 of perceive that it's going to be relatively slow okay so if
    we want to change to a non-blocking。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以这是我们刚刚运行的结果，我们看到它花了2.6秒，而在我们的情况下，我们一次只读取一个字符，因此你可以看到每个字符，并且你可以感知到它会相对较慢，好吧，所以如果我们想要改成非阻塞式。
- en: '![](img/969edac52273f03a794226a015ab0a12_30.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_30.png)'
- en: equivalent of this we're going to use a function that we are going to see in
    a few minutes and。 it's pretty low level but it's just called set as non-blocking
    so after you set up the。 client okay you get you call this function that place
    some magic system calls itself。 and says if you when you're reading from this
    socket don't block on it that's all it's doing。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 相当于这个，我们将使用一个函数，稍后我们会看到。它是非常底层的，但它就是叫做“设置为非阻塞模式”。所以在你设置完客户端后，好吧，你调用这个函数，它会执行一些魔法的系统调用，并告诉你，如果你从这个套接字读取时，不要阻塞，就这么简单。
- en: we'll see that in a little bit okay but you're going to do basically the same
    thing here when。 you read though okay it is going to not block so you could get
    a negative one back okay meaning。 that it would there was some error but the error
    could be that it would just block okay so you。 could do that if you do get zero
    back it means that there you're still getting no or you don't。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会看到这个，好吗？但你基本上会在这里做同样的事情，当你读取时，好吗？它不会阻塞，所以你可能会返回负一，表示发生了某个错误，但这个错误可能只是阻塞了。所以你可以这样做，如果你返回的是零，就表示你仍然没有收到数据，或者你不。
- en: have any data left so that's fine they're just like normal but in this case
    we want to if we had。 greater than zero we would handle it and it should be just
    one byte because we're still only。 asking for one byte and that's it but the other
    option could be what if it's negative one so it's。 not zero it's not zero it's
    not greater than zero so it's negative one check to see that it's not。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有数据剩余，那就没问题，它们只是像平常一样。但在这种情况下，我们想要的是，如果返回值大于零，我们就处理它，而且它应该只有一个字节，因为我们仍然只请求了一个字节，就这些。但是另一个选择是什么，如果它是负一呢？所以它不是零，也不是大于零，而是负一，检查一下它是不是。
- en: the oh it would block because that means there's some other error the connection
    died or there's。 some other error but if it is E would block then you just go
    all right in this case we're going to。 log that we had an unsuccessful read and
    we just go and try again okay this is going to do boom。 boom boom and try to read
    very fast yeah again is a sim I think he again and he would block or。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，它会阻塞，因为这意味着有其他错误，比如连接断开了，或者有其他错误。但如果是“E would block”（会阻塞），那么你只需要好吧，在这种情况下，我们会记录下读取失败，并且我们会尝试重新读取，好吗？这会做的就是砰，砰砰砰，快速地尝试读取。是的，再试一次，我觉得他会再次阻塞，或者。
- en: actually the same thing as it turns out I'm not sure they could be different
    on different systems but。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上是同一件事，结果我不确定它们是否会在不同的系统上有所不同，但。
- en: '![](img/969edac52273f03a794226a015ab0a12_32.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_32.png)'
- en: here's how you would figure that out by the way you would say air no - L and
    that lists them all。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你如何发现问题的，顺便说一下，你可以说 `air no - L`，它会列出所有错误。
- en: '![](img/969edac52273f03a794226a015ab0a12_34.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_34.png)'
- en: let's look at E would block you would block rep E would there it is it's number
    11 and in this case。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看“E would block”，你会被阻塞，重复，“E would”，在那里，它是11号，在这种情况下。
- en: '![](img/969edac52273f03a794226a015ab0a12_36.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_36.png)'
- en: '![](img/969edac52273f03a794226a015ab0a12_37.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_37.png)'
- en: E again also 11 so it's actually redundant in this case although on different
    systems it might not。 be but either one of those could get could be the error
    number if it's going to block E again means。 try again basically in this case
    it happens to be the same number so I guess it's redundant on our。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: E，再次是11，因此在这种情况下它实际上是冗余的，尽管在不同的系统上可能不会是冗余的，但其中任何一个都可能是错误号，如果它要阻塞，“E would block”意味着再次尝试。在这种情况下，它恰好是相同的数字，所以我猜在我们的系统上是冗余的。
- en: '![](img/969edac52273f03a794226a015ab0a12_39.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_39.png)'
- en: system good question yeah good question all right so question this is the client
    right this is now。 the this is now the client they're doing so the client you
    know is setting it unblock now we we。 don't we could set the server to also be
    non-blocking and we'll see a little bit of that later but we。 don't care right
    now the server is blocking because it's still fast we've done it with a thread
    and。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 系统，好问题，是的，好问题。那么问题是，这是客户端对吧？现在这是客户端，他们正在做什么。所以客户端，你知道，它正在设置为非阻塞模式。现在我们没有，我们可以将服务器也设置为非阻塞模式，稍后我们会看到一些，但现在我们不在乎，服务器是阻塞的，因为它仍然很快，我们已经用线程做了它。
- en: whatever but yeah good question yeah yeah we have to get there so this is good
    question good question。 wait is there is there any advantage to this we'll see
    an example later unfortunately because of the。 time I have to skip over some of
    the part that you can go look at the details but we'll see why this。 why we could
    use that we could see we'll see why this is just another way to do a similar thing。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，但这个问题很好，是的，我们必须到达那个点。这个问题很好，等一下，这样做有优势吗？稍后我们会看到一个例子。不幸的是，由于时间原因，我得跳过一些部分，你可以去看细节，但我们将看到为什么我们可以这样做，为什么这只是做类似事情的另一种方式。
- en: we've already done is it better or not threads take a little time to spin up
    and threads take you。 know multi-threading things letting the operant letting
    the operating system handle the waiting is。 sometimes a better like the not the
    waiting but the the alerting us that there's data and so forth。 sometimes it's
    just a little more efficient so new servers generally handle it the way we're。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经做过了，它是更好还是不好？线程需要一点时间来启动，线程需要你。知道多线程的事情，让操作系统处理等待。有时，等待不是问题，而是操作系统通知我们有数据等，这样更好。
    有时这样会更高效，因此新的服务器通常会以我们当前的方式来处理。
- en: going to talk about just because they've decided that it's a little faster than
    doing that multi-threading。 so there's just this is really just another way of
    doing similar things we've already done the way。 we've already done it generally
    fine but if you're going to serve billions of web pages maybe you。 want to get
    a little more efficient this might be better way the way we're going to show you
    a little。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 他们决定这样做，是因为这样比做多线程稍微更快一点。所以这其实只是另一种做类似事情的方式。我们之前做的方式通常也不错，但如果你要服务数十亿个网页，可能你想要更高效一点，这可能是一个更好的方式，我们将会展示这种方式。
- en: more efficient so long answer for why are we doing it it's another way to do
    it why is it important。 okay so anyway now if we run this this is the non-blocking
    equivalent okay if we run this and we do the。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 更高效的原因是什么？答案是，它是另一种方式来做相同的事情。为什么这很重要？好吧，反正如果我们运行这个代码，这就是非阻塞的等价实现。如果我们运行它并进行。
- en: '![](img/969edac52273f03a794226a015ab0a12_41.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_41.png)'
- en: let's see we still need to set up the server there's the server and if we call
    non-blocking alphabet。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看，我们仍然需要设置服务器，这就是服务器，如果我们调用非阻塞的字母。
- en: '![](img/969edac52273f03a794226a015ab0a12_43.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_43.png)'
- en: '![](img/969edac52273f03a794226a015ab0a12_44.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_44.png)'
- en: client okay it looks exactly the same okay but take a look at what just happened
    we now got 26。 bytes back but we did what is that let's see 16 million reads in
    that 2。6 seconds right well。 why is that not why is that a good or a bad thing
    during the time when we weren't doing those reads。 we could have been doing other
    things so let's say our program needed to do something else。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端，好，完全一样，但是看看刚才发生了什么，我们现在收到了26字节的返回值，但我们做了什么？让我们看看在2.6秒内读取了1600万次，对吧？那么，为什么这样不好或者好呢？在我们没有做这些读取操作的时候，我们本可以做别的事情。所以假设我们的程序需要做别的事情。
- en: right we could have done that something else and then gone back and read again
    later so。 otherwise we would have had to block right this is a dumb way to do
    it because we're just chugging。 away and doing all we're doing is reads but you'll
    argue that maybe you want to accept input from。 the user or something during that
    time instead of just blocking so the idea that this frees up time。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 对，我们本可以做其他事情，然后再回去读取。否则，我们就得阻塞了。这样做很愚蠢，因为我们只是不断读取，完全没有做别的事情。但你可能会争辩，在那个时间段，你也许想接受来自用户的输入，而不仅仅是阻塞。所以这个想法是，这种做法释放了时间。
- en: for thread city here this frees up time on the main thread in this case right
    now could you。 have a thread could you have called that read in a thread sure
    so it seems a little odd to do that。 but you might do that and then this is same
    sort of thing you might need a you might need to figure。 out when that thread
    ends and so forth in this case we're just saying you know what we're trying。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 对于线程的情况，这会释放出主线程上的时间。现在，你能不能在一个线程中调用那个读取操作？当然可以。虽然这样做有点奇怪，但你可能会这么做。然后，这种情况和之前一样，你可能需要搞清楚线程何时结束，等等。在这种情况下，我们只是说我们尝试这么做。
- en: to read 26 bytes oh it's going to take a while maybe we want to do something
    else in the meantime。 right i mean what other things could we do non-blocking
    alphabet clients not that one how about non-blocking。 alphabet client dot cc right
    if we do the read this is the non-blocking read okay let's say that。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 需要读取26个字节，哦，这需要一些时间，也许我们想在这期间做点别的事。对吧，我是说我们还能做什么，非阻塞字母客户端，不是那个，怎么样，非阻塞。字母客户端dot
    cc对吧，如果我们执行读取，这就是非阻塞读取，好吧，假设。
- en: '![](img/969edac52273f03a794226a015ab0a12_46.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_46.png)'
- en: let's say that we get to here where it was unsuccessful maybe we did something
    else like。 i'm doing other work right like that and whoops there we go make and
    let's see i don't think i。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们到这里失败了，也许我们做了别的事情，就像我正在做其他工作一样，哎呀，看看吧，我不认为我。
- en: '![](img/969edac52273f03a794226a015ab0a12_48.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_48.png)'
- en: killed the server yet so that's that there we go it's doing other work doing
    other work right。 it's you'll see there are letters in there i don't know if you
    saw but there were some letters。 some fingers perched in there but look at how
    much work you did you know so we could you could have。 your one thread doing more
    work and this is the way to do it so that's the benefit you don't。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 还没有杀掉服务器，所以那就是这样了，继续做其他工作，做其他工作，对吧。你会看到里面有字，我不知道你有没有看到，但里面确实有一些字母。有些手指停在那里，但看看你做了多少工作，你知道，所以我们可以，你可以让你的一个线程做更多的工作，这就是方法，所以这是好处，你不必。
- en: know threads necessary in here no thread pool no threads necessary we got the
    work done we did。 have to re-ask a lot of times but we were able to do more work
    that's probably the bottom one。 yeah other questions on that okay so where does
    that get us now well now we've seen that we can。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这里不需要线程，没有线程池，不需要线程，我们完成了工作，不必重新询问很多次，但我们能够做更多的工作，这大概是底部的那个。对，关于这个问题还有其他问题吗？好，现在我们看到我们可以。
- en: '![](img/969edac52273f03a794226a015ab0a12_50.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_50.png)'
- en: '![](img/969edac52273f03a794226a015ab0a12_51.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_51.png)'
- en: actually do this okay and we see that we get millions and millions of reads
    and we got lots of extra。 time because point one seconds to a computer is super
    duper fast okay how many is anybody in here。 read the book super intelligence
    by nick bostrom one of my favorite books although it scares me to。 death it's
    a book about uh one what happens when we end up creating a super intelligent。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上不需要这样做，好，我们看到我们可以获得数百万次读取，而且我们有很多额外的时间，因为对计算机来说，0.1秒是超级快的，好的，有没有人读过尼克·博斯特伦的《超级智能》这本书，这是我最喜欢的书之一，尽管它让我感到非常害怕。这是一本关于当我们最终创造出超级智能时会发生什么的书。
- en: ai it's actually smarter than humans and uh there's lots of ramifications of
    that and we have to。 maybe be a little careful about that if we want humans to
    actually persist but uh one of the。 interesting things about that they mentioned
    this that computers are so fast that you know if you're。 holding and i think this
    is the example they use in the book if you're holding a glass of water and。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 人工智能，它实际上比人类更聪明，嗯，这带来了许多后果，如果我们希望人类能够持续下去，我们可能需要对这个问题稍微小心一些，但其中一个有趣的事情是，他们提到计算机速度非常快，你知道，如果你。举着一杯水，我想这是他们在书中用的例子，如果你掉下去了。
- en: you drop it right well because your neurons are relatively slow and the processing
    of your you're。 the seeing things is slow you don't get that much time to like
    move your hand down here and pick it up。 because you only see so many different
    data points now the nice thing about your brain is it's very。 good it's very good
    at integrating so if i throw a ball to you your brain actually can see the path。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你掉下来，好吧，因为你的神经元相对较慢，你的视觉处理也很慢，你没有太多时间把手移下去捡起来。因为你只能看到这么多不同的数据点。现在，大脑的好处是它非常擅长整合，所以如果我把球扔给你，你的大脑实际上能看到球的轨迹。
- en: and put your hand in the right place and you're very good at that two billion
    years of evolution has。 you know done a good job of that right but a computer
    your brain sees you know a hundred or。 thousand different data points in the point
    one seconds that it takes for somebody to drop a computer。 will see you know billions
    or millions of data points and so really to a computer dropping a。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 把手放在正确的位置，而且你非常擅长这一点，二十亿年的进化让你在这方面做得很好，对吧，但计算机，你的大脑在0.1秒内看到大约一百个或一千个不同的数据点，而计算机在有人掉下来的那一瞬间会看到数十亿或数百万个数据点，因此对计算机来说，掉下一个。
- en: glass is like the glass is like do do do do do do and the computer's doing like
    oh i can do i can do。 tons of calculations while doing that and i can you know
    it's so it's uh i mean that's the scary part。 is that computers are just super
    duper fast right that that's things but you know but they can't love。 not yet
    anyway not yet um so anyway read the read the book if you want like it's a little
    bit of a。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于玻璃一样，计算机会像“嘀嘀嘀”一样做事，而计算机能够在做这些操作的同时进行大量的计算。所以，计算机是超级快的，这就是可怕的地方。虽然它们这么快，但它们不会“爱”，至少目前不会，不是吗？嗯，总之，如果你想读的话，读这本书，虽然它有点吓人。
- en: it's a little bit of a uh uh scary book to read but but read it it's good because
    it talks about some。 of things and especially if you're doing ai it's a just a
    great book to understand oh we might have。 to face this some on the future but
    my point is during the time when this is reading waiting for。 that slow thing
    to happen the computer gets to do zillions of other things which is the point
    here。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书读起来有点吓人，但是读一下还是很好的，因为它谈到了一些事情，尤其是如果你在做人工智能的工作，它是一本帮助你理解未来可能会面临的一些问题的好书。但是我的观点是，在这本书阅读的过程中，等待那个缓慢的事情发生时，计算机可以做成千上万的其他事情，这就是这里的重点。
- en: okay we could handle that in a thread or we could do something but now it's
    just one thread doing all。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们可以在一个线程中处理这个，或者做点别的，但现在只有一个线程在做所有的事情。
- en: '![](img/969edac52273f03a794226a015ab0a12_53.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_53.png)'
- en: the work okay now here's the part that i'm actually going to skip over a little
    bit um there is this。 class that we are going to that is used in the other example
    that basically is uh going to be used。 to show you how you can take do file reading
    or writing in this case uh piecemeal okay and so it's。 basically a it's just a
    little uh class that has an initialization that takes a uh a file descriptor。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在这是我实际上要跳过的一部分，有一个类，我们将在另一个示例中使用，基本上它会被用来展示如何逐步进行文件读取或写入，在这个情况下，逐步处理文件。它本质上是一个简单的小类，初始化时需要一个文件描述符。
- en: and it takes the uh it takes the actual like data itself in a string format
    and it's going to push。 that data to that file descriptor piecemeal like some
    amount of data at a time it's going to do that。 and it's going to do that through
    this function called send more data and if the send more data。 however comes back
    with false it means you're done sending data but the whole reason for setting。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 它接收实际的数据，以字符串格式传递，并会逐步将数据推送到文件描述符，每次发送一些数据。它会通过一个名为“发送更多数据”的函数来实现这一点。如果“发送更多数据”返回的是假值，表示数据发送完毕。但设置这个机制的整个原因是：
- en: this up and and it's like many slides here showing you the nuances of this uh
    this outbound file class。 but the big the big idea is set it up so that you say
    i need to send this string to this file and send。 some and then it just continually
    can say send more data and it will do that kind of on its own and。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分就像许多幻灯片一样，展示了这个外部文件类的细微差别。但最大的想法是设置它，使得你可以说“我需要将这个字符串发送到这个文件”，然后持续地发送数据，它会自己处理这类操作。
- en: '![](img/969edac52273f03a794226a015ab0a12_55.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_55.png)'
- en: the whole point of this is doing that so there are lots of slides here where
    it talks about uh the。 details here here would be a little test program for that
    which basically um sets up an outbound file。 initializes it with a uh sorry it's
    actually a file name that gets you ready and not not the actual。 string but it's
    the file name it opens that file name up and then in this case it's going to print。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书的核心内容就是在做这个，因此这里有很多幻灯片讲述了细节，接下来是一个小的测试程序，基本上它设置了一个外部文件，并用一个文件名初始化它，准备好文件，而不是实际的字符串，但它是文件名，打开了那个文件，然后在这个情况下，它将会打印出来。
- en: it out to standard out whenever you call uh send more data and in this case
    it's going to do that now。 it does this in a non-blocking way okay so it will
    send some data and then it will send some more。 and send some more but it will
    try to return immediately won't try to send all of it it might send one。 byte
    at a time or it might send a hundred bytes at a time but it's some amount of data
    so this is。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 它会在你调用“发送更多数据”时将数据输出到标准输出，在这种情况下它会这样做。它以非阻塞的方式执行这个操作，因此它会发送一些数据，然后发送更多数据，再发送更多，但它会尽量立即返回，不会试图发送全部数据，可能会一次发送一个字节，或者一次发送一百个字节，但它会发送一定量的数据，这就是它的工作方式。
- en: just kind of abstracting that away so that we can use it to show what happens
    when we do this with。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 只是将这些抽象出来，以便我们能够使用它来展示当我们这样做时会发生什么。
- en: '![](img/969edac52273f03a794226a015ab0a12_57.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_57.png)'
- en: a server so i'm going to skip over all the all the details about this um the
    the basic idea or the。 example here takes a file and shoots it out to standard
    out so i can actually show you what the。 what the uh the end part of it is here
    if we let's see this one is uh it is outbound file test right。 and it just prints
    it out to the file but it did it in piecemeal and you can't tell because there's
    no。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个服务器，所以我将跳过所有关于这个的细节。基本的思路是，这个示例拿一个文件，并将它输出到标准输出，所以我实际上可以给你展示这里的结尾部分，如果我们来看这个，它是一个出站文件测试，对吧？它只是将内容打印到文件中，但它是分批处理的，你看不出来，因为没有。
- en: delays in this one it just looks like cat but in this case it does it you just
    send one bit of it one。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个延迟看起来就像是 `cat` 命令，但在这个案例中，它做的是，只发送其中的一部分。
- en: '![](img/969edac52273f03a794226a015ab0a12_59.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_59.png)'
- en: piece of the data at a time that's all that's about no the details of this you
    can go look at it i don't。 think it's particularly important for getting through
    what we want to cover for the rest of the day here。 so lots of this um again you
    have to deal with accept and so forth as part of this because you're。
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 每次处理一块数据，仅此而已，这就是所有的细节，你可以去查看它。我认为这对今天我们要讨论的内容并不特别重要。所以，大多数的内容，嗯，你需要处理接受等等，作为其中的一部分，因为你。
- en: '![](img/969edac52273f03a794226a015ab0a12_61.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_61.png)'
- en: trying to send to uh that outbound uh server and uh let's see we're gonna just
    skip past this skip。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 试图发送到那个出站服务器，嗯，我们就跳过这些部分吧。
- en: '![](img/969edac52273f03a794226a015ab0a12_63.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_63.png)'
- en: past this here's the by the way here's the set as non-blocking function okay
    i said that it was uh i。 said that it was low level it's another one of these
    system calls that's got lots of stuff in it that。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一句，这里是设置为非阻塞功能，我说过它是，嗯，我说它是低级的，它是这些系统调用之一，里面有很多内容。
- en: '![](img/969edac52273f03a794226a015ab0a12_65.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_65.png)'
- en: '![](img/969edac52273f03a794226a015ab0a12_66.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_66.png)'
- en: you if you want to actually use it then you go do it but the important part
    is here is that you。 call this function called f c n t l it takes in the descriptor
    and some other information and you。 you give it a parameter that says hey don't
    block on that descriptor when you're reading or writing。 from it so that's all
    that's doing uh there is set as blocking which does the exact opposite。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想实际使用它，那就去做，但这里重要的部分是，你调用了一个名为 `fcntl` 的函数，它接收一个描述符和其他一些信息，你给它一个参数，告诉它“嘿，在读取或写入该描述符时，不要阻塞”。
- en: and then you can check to see if something is blocking or unblock or non-blocking
    as well。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以检查是否有东西被阻塞，或者是非阻塞的情况。
- en: '![](img/969edac52273f03a794226a015ab0a12_68.png)'
  id: totrans-151
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_68.png)'
- en: low level functions don't need to worry about those details unless you care
    about creating them。
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 低级功能不需要担心这些细节，除非你关心创建它们。
- en: '![](img/969edac52273f03a794226a015ab0a12_70.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_70.png)'
- en: you know i just use that okay uh so again we're not going to worry about the
    outbound file。 distraction the idea is read a file every time you say send more
    data send a little bit of chunk of。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，我就这样使用它。好吧，嗯，所以我们不打算担心出站文件的干扰。这个思路是，每次你说“发送更多数据”，就读取一个文件，发送一小块数据。
- en: '![](img/969edac52273f03a794226a015ab0a12_72.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_72.png)'
- en: data that's all i care that you really know about this is all blasting through
    that because of the。 time but what i want to spend a little bit of time on is
    uh two servers that are going to utilize this。 outbound file uh class to actually
    enable you to serve data quickly without threads okay so the。 same idea as we
    did before or the same idea now is oh no more threads necessary let's do it okay。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 数据就是我关心的，实际上你真正需要知道的是，这一切都是因为时间问题而快速进行的。但我想花一点时间来讲解两个服务器，它们将使用这个出站文件类，来实际使你能够在没有线程的情况下快速服务数据。好吧，和之前的思路一样，或者说现在的思路是，哦，不需要更多的线程，咱们开始吧。
- en: we're going to use non-blocking IO for a single threaded web server again not
    necessarily the。 best way to do it but probably a little more efficient than using
    threads because we can do that okay。 it's going to be responsive because there's
    nothing blocking here and it's also hopefully not going。 to miss any connections
    okay that's because again it's got it's going to respond quickly but。
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用非阻塞 IO 来处理单线程网页服务器，虽然这不一定是做它的最佳方式，但可能比使用线程更高效，因为我们可以做到这一点。它会是响应迅速的，因为这里没有任何阻塞，希望也不会错过任何连接。因为它响应迅速。
- en: then you're going to check many times to be able to check and make sure that
    you you don't have a。 connection yet and when you do you get it and you handle
    it very quickly okay so let's see some of。
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你将多次检查，以确保你没有连接，直到你连接上了，然后迅速处理它，好吗？我们来看一下这里的一些细节。
- en: '![](img/969edac52273f03a794226a015ab0a12_74.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_74.png)'
- en: the details here of this uh function um we are going to create a list of outbound
    files in other words。 what this server is going to do is you have a web page and
    this is actually one that we can uh。 you can use from a web browser i'll show
    show it to you in action in a few minutes but you're。 gonna have a web page that
    basically is keeping a list of the files that you want to send out。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们将创建一个外发文件的列表，换句话说，这个服务器将会做的是，你有一个网页，这是一个你可以从网页浏览器上使用的页面，我会在几分钟后展示给你看它的实际运行效果，但基本上，你将会有一个网页，它会持续记录你想要发送的文件列表。
- en: so think of it like a web server saying i'm gonna go to google。com or i'm gonna
    go to， www。stanford。com and request a bunch of web pages each web page that gets
    sent back is going to be。 held in one of these outbound files that can get sent
    back piece by piece by piece okay and we're。 gonna keep a list of those uh in
    this uh in this program okay so what's happening here we are。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 所以可以把它想象成一个网页服务器，它会访问 google.com 或者访问 www.stanford.com，并请求一系列网页，每个返回的网页都会被保存在这些外发文件中，逐一发送出去，好吗？我们会在这个程序中保持这些文件的列表。
- en: setting up a circuit okay or a socket rather we are uh then making it non-blocking
    now this is the。 this is now the server is now doing the non-blocking part okay
    it's going to set up this list of files。 that we're going to the connect the connection
    files the ones we want to send back it turns out。 they're all the same file in
    this case but we just because we're always just gonna request the same。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个电路，或者说是一个套接字，我们接下来使它变成非阻塞模式。现在这个服务器在进行非阻塞操作，它将设置一个文件列表，我们将连接这些文件，发送回去。事实证明，在这个例子中，它们都是同一个文件，只是因为我们总是请求同一个文件。
- en: file we didn't say do a certain file specific file um remember in lab a couple
    weeks ago you did a。 file server you remember that example hopefully you covered
    in lab or you've looked it over this is。 the same sort of thing except now the
    file is all just one file basically the same same basic idea。
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 文件我们没有指定某个具体文件，记得几周前在实验中你做了一个文件服务器吗？你还记得那个示例吗？希望你在实验中做过或者看过，这个就是同样的事情，只不过现在文件基本上只是一个文件，基本想法相同。
- en: '![](img/969edac52273f03a794226a015ab0a12_76.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_76.png)'
- en: okay and then we've got a little bit of either logging or some other data capture
    thing okay。
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，然后我们有一些日志记录或其他的数据捕捉功能。
- en: '![](img/969edac52273f03a794226a015ab0a12_78.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_78.png)'
- en: there's a wild true loop in here okay the wild true loop will do an accept which
    will not block。 okay and it will calculate or just do the kind of the logging
    again of how many times it had to go。 through this wild loop okay if you don't
    have a connection it basically just goes it well if you。 don't have a connection
    what we want to do is use the time now to send some data to all those files。
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一个 `while true` 循环，这个 `while true` 循环会进行一次 `accept` 操作，这个操作不会阻塞。然后它会计算或者进行日志记录，记录它需要执行多少次这个
    `while` 循环。如果没有连接，它基本上就跳过了。如果没有连接，我们希望利用当前时间向所有这些文件发送一些数据。
- en: so basically we're gonna go hey is anybody want to talk to me if not i'm gonna
    send a bunch of data。 to the files that have already been set up that's all that's
    going on here okay so we set up the uh。 we we send them out and in here we are
    going to push onto the list of if we do have a connection。 here okay then we are
    going to uh sorry if we don't have a connection here we're going to。
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 所以基本上，我们会先问，是否有人想和我交流？如果没有，我将会把一些数据发送到已经设置好的文件中，这就是这里发生的事情。好的，所以我们设置了，嗯，我们将它们发送出去，如果我们确实有连接，我们会将它们添加到列表中。这里好的，如果我们没有连接的话，我们会。
- en: initial this one that looks like we're actually doing we are doing it when we
    do have that we're。 going to just get a connection set it up push it on your data
    and deal with it if we don't this is。
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，看来我们实际上正在做的事情是，当我们有了连接时，我们会设置它，添加数据并处理。如果我们没有连接，这是。
- en: '![](img/969edac52273f03a794226a015ab0a12_80.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_80.png)'
- en: where we are going to send more data okay so basically uh you go and after you've
    tried to do a connection。 if you set the connection up great you don't set the
    connection up then you push some more data to。 all your files and just a little
    bit at a time and that's all that we're doing yeah um do you have a。
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将发送更多数据。好的，基本上，你在尝试建立连接之后，如果连接设置好了，太好了。如果连接没有建立，那就把更多数据推送到所有文件中，分批进行，这就是我们在做的事情。嗯，你有一个。
- en: '![](img/969edac52273f03a794226a015ab0a12_82.png)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_82.png)'
- en: yeah i'll go back side what is the background between these things except for
    this great client。 this is a server remember this is the server going on here
    right so in this case we're accepting a。 somebody's requesting us so we have to
    do the accept this is basically where in every other。 program we've ever written
    we've said accept and it's just stayed right there until it gets。
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我会回去看看这些东西之间的背景，除了这个很棒的客户端。记住，这就是服务器，服务器正在运行。所以在这种情况下，我们正在接受请求。我们必须执行接受操作，这基本上是在我们编写的每一个程序中，我们都会说**accept**，然后就一直保持在那，直到它获得连接。
- en: until it gets a connection right now it's going oh great i have more time to
    do something because。 nobody wants to talk to me and i'm gonna do what am i gonna
    do if i get a connection i will set it up。
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 直到它获得连接，现在它会说，哦太好了，我有更多时间去做点什么，因为没有人想和我说话，我要做的是什么？如果我获得了连接，我会设置它。
- en: '![](img/969edac52273f03a794226a015ab0a12_84.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_84.png)'
- en: right if i don't get a connection then or if i even if i do the next thing i'm
    going to do it i'm going。 to take some time to push a bit to push out to all those
    files they're requesting this data and this。 is where it's going to now is this
    going to take some time yes now if you have a thousand files here。 that are being
    served it is going to take some time now by the way we're getting into CPU bound
    things。
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 对，如果我没有获得连接，或者即使我获得了连接，接下来的步骤是，我将花些时间将数据推送到所有请求数据的文件中。这是现在的情况，它会花些时间。是的，如果你有一千个文件在服务中，它会花一些时间。顺便说一下，我们现在进入了CPU绑定的情况。
- en: if your list has uh 10 or 100 000 different connections now it's got to go whipping
    through this。 while loop a hundred thousand times that's going to be CPU bound
    because none of those calls are。 blocking it's just i've got all this stuff to
    do i have to do it in this case so this is this is。
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的列表中有10个或10万个不同的连接，现在它必须通过这个**while**循环执行十万次，这会导致CPU绑定，因为这些调用都是非阻塞的。它只是说，我有这么多事情要做，我必须完成它。所以这是。
- en: '![](img/969edac52273f03a794226a015ab0a12_86.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_86.png)'
- en: where it would become CPU bound that's that's what's going on there okay all
    right let's actually run。
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 它将变成CPU绑定的情况，这就是发生的事情。好的，接下来我们实际运行一下。
- en: '![](img/969edac52273f03a794226a015ab0a12_88.png)'
  id: totrans-180
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_88.png)'
- en: this if we run this uh let's do it this way if we run this but this one is called
    oh uh let's see。 hang on four i want to cancel the server before um this one's
    called the expensive server okay。 let me just run it and it's saying static file
    server listening on port 12345 and this is mid 61。
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行这个，嗯，咱们这样做，如果我们运行这个，但是这个叫做，哦，嗯，让我看看。等一下四，我想在之前取消服务器，嗯，这个叫做昂贵的服务器。好的，让我运行它，显示的是静态文件服务器正在监听端口12345，这是61版本。
- en: '![](img/969edac52273f03a794226a015ab0a12_90.png)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_90.png)'
- en: by the way i did restart all the myths today i had to go and like literally
    start half of them and。 they were all just sitting there dead i don't know why
    107 probably not because of you guys um let's do。 this let us go to myth uh what
    did i say it was myth 61 and it is port 12345 and hopefully there。
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，我今天重新启动了所有的 myths，我不得不去重新启动它们中的一半。它们都只是停在那里，我不知道为什么 107 可能和你们没关系，嗯，让我们做这个，让我们去
    myth，呃，我说的是 myth 61，它是端口 12345，希望它在那里。
- en: '![](img/969edac52273f03a794226a015ab0a12_92.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_92.png)'
- en: there is the file so we are serving just this one file a million times and it
    happens to be that。
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 那里是文件，所以我们只是在提供这个文件一百万次，而恰好这个文件。
- en: '![](img/969edac52273f03a794226a015ab0a12_94.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_94.png)'
- en: so if we go there and serve this file we'll do that now what's happening in
    here and by the way that。 was where it was it was doing that if other people also
    wanted to connect that might go up if two。 people are connecting at the same time
    but it's going to go through pretty fast okay what's happening。 right now this
    is myth 61 let's check something uh let's see ssh myth let's see see grab myth
    61。
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果我们去那里并提供这个文件，我们现在来看看这里发生了什么，顺便说一下，那就是它正在做的事情。如果其他人也想连接，可能会因为两个人同时连接而有所增加，但它会很快完成，好的，现在发生的事情是，这是
    myth 61，让我们检查一下，呃，让我们看看 ssh myth，看看抓取 myth 61。
- en: '![](img/969edac52273f03a794226a015ab0a12_96.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_96.png)'
- en: yes whoops yes and htop we should there we go take a look at what expensive
    server is doing right。
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，哎呀，是的，htop 我们应该看一下，看看这个昂贵的服务器现在在做什么。
- en: '![](img/969edac52273f03a794226a015ab0a12_98.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_98.png)'
- en: there that 100% is my expensive server why why is my expensive server expensive。
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 那个 100% 是我的昂贵服务器，为什么我的昂贵服务器这么贵？
- en: '![](img/969edac52273f03a794226a015ab0a12_100.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_100.png)'
- en: okay nobody's really requesting much data and what's it doing it is sitting
    here。
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，没人真正请求什么数据，它在做什么呢？它就停在这里。
- en: '![](img/969edac52273f03a794226a015ab0a12_102.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_102.png)'
- en: oops let's go back one slide there we go it's sitting here in this while loop
    not blocking on。 accept so it's doing this while loop again and again and again
    and there's no data to serve so this。 while loop is just going nuts okay if we
    put a C out in there we can see a whole bunch of C out。
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，让我们回到上一张幻灯片，好了，它现在正处于这个 while 循环中，没有在 accept 上阻塞，所以它一直在重复这个 while 循环，而且没有数据可以提供，所以这个
    while 循环就一直在疯狂运行。好的，如果我们在这里放一个 C 输出，我们可以看到一大堆 C 输出。
- en: '![](img/969edac52273f03a794226a015ab0a12_104.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_104.png)'
- en: statements just like we did before but what it means is that it's that if we
    do eight stop we are。
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们之前做的一样，但是这意味着，如果我们做了停止，我们就会。
- en: '![](img/969edac52273f03a794226a015ab0a12_106.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_106.png)'
- en: getting oh there it is 100% of the work is on one core and some myth machine
    myth 60 whatever this is。 is right now the fans are starting to come on and whatever
    and some poor 107 student doesn't get their。 their heat balicator down or whatever
    um so uh so that's what that's what's happening there so。
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 得到的哦，那里它是 100% 的工作负载都在一个核心上，还有一些 myth 机器，myth 60，随便这个是什么。现在风扇开始转动了，什么的，某个可怜的
    107 学生没把他们的热平衡器调好，或者怎么的，嗯，所以下面发生的就是这样。
- en: '![](img/969edac52273f03a794226a015ab0a12_108.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_108.png)'
- en: what do we want to do we've got this feature what did we do in the past when
    we wanted when we had。 to deal with this what did we do when we want to wait for
    something hell we moved it off the process。 right so we have to have this is the
    same thing there we have to have another operating system。
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做什么？我们有这个功能，过去当我们遇到类似情况时，我们怎么做？当我们需要等待某些事情时，我们怎么做？我们把它移出了进程，对吧？所以我们必须要有另一个操作系统，这是同样的道理。
- en: '![](img/969edac52273f03a794226a015ab0a12_110.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_110.png)'
- en: support for this okay and this is a thing called E-pol and the E-pol family
    of system calls are。 basically waiting for file descriptors okay so it's basically
    saying instead of doing that while。 loop again and again and again and instead
    of blocking on it we are going to be able to。 we're basically going to go and
    call the function we want when something happens so in other words we。
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 支持这个，好的，这个叫做 E-pol，E-pol 系列的系统调用基本上是在等待文件描述符。所以它基本上是在说，不再重复做这个 while 循环，而是当发生某些事情时，我们能够调用我们想要的函数。换句话说，我们。
- en: can we're going to do some sort of waiting if we have no data to send and we
    have nothing else。 going on we are going to shut the processor down or at least
    our process down and we're going to do。 that okay so there's a whole bunch of
    functions here there's a create function that returns a file。 the scriptor and
    it has this e-colo exact thing which we've used before and it sets up a。
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 因为如果我们没有数据发送，且没有其他事情发生时，我们就会关闭处理器，或者至少关闭我们的进程，并执行相关操作。所以这里有一堆函数，其中有一个创建函数，它返回一个文件描述符，并且有一个
    `e-colo` 这样的设置，它设置了相关功能。
- en: file descriptor that we won't that won't that we will get alerted on as it turns
    out it has this。 watching facility which basically says what's happening whenever
    something changes so if you're。 watching a network connection if data comes in
    it will get the waiting will stop okay and you actually。 can call e-pol wait to
    do the waiting around okay and it's waiting until there's some time out。
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 文件描述符是我们会被提醒的对象，结果发现它有一个监视功能，基本上它会在每当某个事情发生变化时提醒你。所以，如果你在监视网络连接，一旦有数据进来，等待就会停止。你实际上可以调用
    `epoll_wait` 来进行等待，直到发生超时。
- en: which the time out you can set so that you can go do more work and whatever
    okay so it's basically。 the same sort of idea you've just now have more control
    over it than you would have from a blocking。 sort of server okay there's a struct
    in here there's this interesting see thing called a union。 anybody know what a
    union is you probably never used unions in c before it's a pretty old concept。
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以设置超时时间，这样你就可以去做更多的工作，反正就这样，基本上就是这种思路，只不过现在你对它的控制比阻塞式的服务器更强了。这里有一个结构体，这里有一个有趣的东西叫做联合体。有没有人知道什么是联合体？你可能以前没在
    C 语言中用过联合体，这是一个比较古老的概念。
- en: and it goes back to when data was scarce like when you had the data was scarce
    here's what this is by。 the way a union says this data structure can hold either
    something avoid star or an int or a u n 32。 t or a u n 64 t and whichever one
    you happen to have in there it will be able to get out that data。 based on which
    which one of these which one of these variables that you use in there so why does
    it do。
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以追溯到数据稀缺的时候，当数据稀缺时，联合体就是为了这个目的：它声明这个数据结构可以存储一个指针、一个整数、一个 `uint32_t` 或一个 `uint64_t`，而且无论你存储的是哪种类型的数据，它都能够根据你使用的变量类型提取出数据。为什么要这样做呢？
- en: that so that you can store different types of data in the same amount of space
    right it's going to。 allocate enough for the entire the biggest thing even though
    you might only be using a four byte。 int right you can have it all have enough
    space for a 64 byte int but it won't but it but it doesn't。 need to have a different
    one for each one so there's an F4 in there it's just got one so look up。
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你就可以在相同的空间内存储不同类型的数据。它会为整个最大的数据类型分配足够的空间，即使你可能只使用一个四字节的整数。它会为一个 64 字节的整数分配足够的空间，但不需要为每种数据类型单独分配空间。所以它有一个
    F4，它只分配了一个空间来存储数据。
- en: unions and why they're used you don't see them too often but when you do you
    have to kind。 understand what they what they do okay we'll hold a single type
    of data out of the data types okay。 what kind of events can we listen for okay
    and this by the way goes but this is now event based。 things and this is we've
    seen events before when we have when we have signal handlers though that's。
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 联合体及其用途，你不常见到它们，但当你看到它们时，你必须理解它们的作用。联合体用于存储不同类型的数据，它能在多个数据类型中存储一个数据。我们可以监听哪些事件呢？顺便说一下，这里是基于事件的模型，我们之前见过事件，比如我们有信号处理程序时就用过。
- en: an event based model but in this case we can say for a file the file is available
    for reading or。 it's available for writing and we can also have it what's called
    edge triggered and if you saw。 say if you took CS 107E you would have heard of
    edge triggered before but that means that you。 actually get like an event on a
    change in the descriptor okay versus what like what type of data。
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 基于事件的模型，在这种情况下我们可以说，对于一个文件，它是可读的，或者它是可写的，我们也可以设置为所谓的边缘触发，如果你学过 CS 107E，你应该听说过边缘触发，这意味着当描述符发生变化时，你会得到一个事件，而不是基于数据类型来触发。
- en: you're looking for this is saying hey I want to do it when I get the data okay
    so what are we going。
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 你要查找的事件是，嘿，我希望在获取到数据时做点什么。那么我们接下来该怎么做呢？
- en: '![](img/969edac52273f03a794226a015ab0a12_112.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_112.png)'
- en: to do we are going to set this up now where we have the the server itself main
    is not really going to。 change okay for this server it's going to set up the the
    socket and with create server。 server socket in this case and then it is going
    to run this server so this is just kind of abstracting。
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我们要做的是，我们将设置这个地方，服务器本身的主函数不会发生变化，好的，对于这个服务器，它将设置套接字，并使用 `create server` 来创建服务器套接字，然后运行这个服务器。这只是某种程度上的抽象。
- en: '![](img/969edac52273f03a794226a015ab0a12_114.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_114.png)'
- en: in a way decomposing it a little bit okay run server is going to set things
    as non-blocking。 okay and then it sets this watch set of what we're blocking it's
    going to build the watch set which。 I will see in a second based on that server
    socket that we have okay what's happening with the build。 initial watch set we
    are setting up some E pole in other words to watch for that thing changing。
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在某种程度上，将其稍微分解一下，好吗？运行服务器将把一些东西设置为非阻塞。好的，然后它设置了这个监视集，即我们所阻塞的内容，它将基于我们拥有的服务器套接字来构建这个监视集。我们稍后将看到，基于这个构建，我们正在设置一些
    E pole，换句话说，就是监视某些事物的变化。
- en: okay and then there's some other it's basically setting up the the union and
    the struct there in。 this case the struct and then it's calling this E pole control
    to set it up think of it in a very。 similar way to six suspend how you have to
    do the six the the set just set up the signals that you。 want to block and so
    forth same idea different topic but basically same exact idea and again。
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，然后这里有一些其他内容，基本上是在设置联合体和结构体，在这种情况下是结构体，然后调用这个 `E pole control` 来设置它。想一想，这和
    `six suspend` 非常类似，你必须设置你想要阻塞的信号，等等。是同样的思路，不同的主题，但基本上是相同的思路，再次强调。
- en: I'm not asking to memorize this stuff right now or know how to use it but just
    know that it's possible。
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在并不是让你记住这些内容或知道如何使用它，但只需要知道这是可能的。
- en: '![](img/969edac52273f03a794226a015ab0a12_116.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_116.png)'
- en: to do this okay all right the next thing we're going to do is we are actually
    going to still do。
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，接下来我们要做的事情是，我们实际上还会继续做。
- en: '![](img/969edac52273f03a794226a015ab0a12_118.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_118.png)'
- en: our wild true we're going to have these events we are going to have the number
    of events get。 triggered by this weight thing here okay we might have a timeout
    on there to say just wait until。 there's a timeout so that we can go do data as
    well you don't want to time it out but it could。 timeout and if it does well it'll
    just go on and do the next next part okay you can actually get。
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的 wild true，我们将有这些事件，我们将会触发事件的数量。由这个等待机制触发，好的，我们可能会有一个超时，表示等待直到超时，这样我们也可以处理数据。你不希望它超时，但它可能会超时，如果超时了，它会继续执行下一个部分。好的，实际上你可以获取。
- en: many events triggered at exactly the same time think of it it's the same thing
    is the child。 process getting a weight PID where it returns multiple things so
    you should have you should。 handle all the events here okay and when you get them
    triggered we handle the events one at a time。
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 许多事件在完全相同的时间触发，想一想，这和子进程获取 `wait PID` 返回多个结果是一样的。所以你应该处理所有这些事件，好的，当它们被触发时，我们一次处理一个事件。
- en: '![](img/969edac52273f03a794226a015ab0a12_120.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_120.png)'
- en: using a for loop so basically the events get triggered we find those events
    and then we go and。 and deal with that okay and if you get an event then you can
    actually in this case like consume。 the data read from the file description you
    say hey what did you want to tell me right and then。 it will do that and then
    you can publish the response if you don't have things to read in if。
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `for` 循环，基本上，事件会被触发，我们找到这些事件，然后处理它。好的，如果你获得了事件，你实际上可以在这种情况下消费从文件描述符读取的数据，你可以说“嘿，你想告诉我什么”，然后它会这样做，然后你可以发布响应。如果你没有东西可读的话。
- en: '![](img/969edac52273f03a794226a015ab0a12_122.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_122.png)'
- en: you're just trying to write it out okay so what else is this and there's a lot
    of code here I know。 this is a lot of code that you have to do but you have to
    see but basically we are setting up the。 except there's a new except call by the
    way called except for which has this non-block。 parameter thing in there yeah
    mark of course oh sorry go ahead。
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 你只是想写入它，好的。那还有什么呢？我知道这里有很多代码。这确实是你必须做的很多代码，但你必须看到，基本上我们正在设置，除了一个新的 `except`
    调用，顺便提一下，叫做 `except for`，它带有一个非阻塞的参数，是的，标记当然，哦，对不起，继续。
- en: yeah well you'll see in a second why this is still non-block it's not waiting
    in the same sense it's。 basically you're you're doing it so that it's allowing
    how should I put it it's it's not it's。 if you it's not going and blocking on
    the except call you're still doing that it's just not going。 to have to call as
    many it's not going to go through this loop as many times you'll see when we get
    a。
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，你很快就会明白为什么这仍然是非阻塞的，它并没有以同样的方式等待。基本上你是在做这件事，让它允许——怎么说呢？它是不会的，如果你……它不会去阻塞在accept调用上，你仍然会做这个，只是它不会进行这么多次调用，不会经过这个循环那么多次。你会看到，等我们走得更远一些，明白了吗？好问题。
- en: little bit farther along good good question on this okay we again we do this
    is all set up and。 setting up the watch list and and setting up the the acceptance
    so forth okay so。
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次进行这些设置，设置监视列表和接受等操作，好吗？
- en: '![](img/969edac52273f03a794226a015ab0a12_124.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_124.png)'
- en: the consumer available data part is where it's going to basically do the get
    the connection。 okay and we're going to set the connection up and we're going
    to set the connection up。 at that point okay and it is going to and then we're
    also going to be able to do that's just setting。 up the connection and getting
    the request and then we are going to let's see do the。
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 消费者可用数据的部分将基本上获取连接。好吧，我们会设置连接，并且在那时设置连接。然后，我们也能够做其他的事情。那只是设置连接并获取请求，然后我们将……让我们看看接下来的步骤。
- en: '![](img/969edac52273f03a794226a015ab0a12_126.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_126.png)'
- en: where's here we're going to yeah still take care of the requests okay and we
    may have a whole。 bunch of active connections okay that we have to do and we kept
    that in a map and and so forth。 okay and then we will actually change the event
    based on whether or not we'd already have connections。 again these details go
    look at the slides I don't want to go into all the details about the。
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们将继续处理请求。好的，我们可能会有一堆活跃连接需要处理，我们将它们保存在一个映射中，等等。好的，然后我们会根据是否已经有连接来更改事件。再次提醒，关于这些细节请查看幻灯片，我不想在这里展开所有细节。
- en: how this this works under the hood but we basically are going to get requests
    or get the events happening。 and the kernel is going to handle this for us okay
    so where do we get here published response this。 is where we're going to actually
    in this case we're going to take do an actual website that we're。 going to respond
    with instead of the instead of that file in this case and the publishing the response。
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 这背后的工作原理是，我们基本上会接收到请求或事件。内核将为我们处理这些内容，好吗？那么我们在哪里获取发布的响应呢？这里是我们实际上会在此情况下，创建一个实际的网站来进行响应，而不是返回那个文件。
- en: is going to for all the different places that we need to send data send a little
    bit of data at a time。 using the right command okay it's only going to send let's
    see I believe it might not let's see。 it's going to try to send I think it actually
    tries to send all of it at once here but but that's that。 and then after it sends
    all the data it needs to close the client okay where does that like what's。
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 它将为我们需要发送数据的所有不同位置逐步发送少量数据，使用正确的命令。好的，它只会发送……让我们看看，应该不会……看它会尝试发送所有数据，但就是这样。然后在发送完所有数据后，它需要关闭客户端。好的，像这样的情况会怎样呢？
- en: the whole point what's the whole point here okay in this case let's see it's
    not blocking in the。 same sense we've let the we've let the kernel handle the
    events for us and in our case we are still。 able to do the extra work that we
    want to while the kernel is waiting around for data to either come in。 or not
    okay so it's not stopping us from handling this but when there isn't any data
    to send or。
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 那么重点是什么呢？好的，在这种情况下，让我们看看，它并没有以同样的方式阻塞。我们已经让内核为我们处理事件，而在我们这边，我们仍然能够做我们想做的额外工作，尽管内核在等待数据的到来与否。好的，它并没有阻止我们处理这些内容，但当没有数据要发送时……
- en: receive we just that we do shut down we don't need to go back to that while
    loop so in some sense it's。 it's blocking in the sense that if there's nothing
    to be done our process turns off right but if we。 have anything to do either sending
    or receiving data it will be triggered by the fact that there。 is the kernel waiting
    telling us going oh you've got more stuff to send go send it you've got more。
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 接收操作，我们只是停下来不再进入 while 循环。所以从某种意义上说，如果没有任何要做的事，我们的进程就会关闭，然而如果我们有任何任务，不论是发送数据还是接收数据，它都会被触发，具体来说是内核在等待并告诉我们：“哦，你有更多的东西要发送，去发送它，你还有更多的……”
- en: stuff to receive you've got a client connection coming in do that so the the
    while loop will not just。 continue spinning like that it will actually block in
    the sense it'll block in more than one thing。 and that's really the big idea is
    that it's kind of blocking on both sending the data to all our。 different things
    if there's no data to send it will just wait around or if there's no accepting。
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 你有客户端连接进来，去做这个操作，因此，while 循环不会像那样一直旋转，它实际上会阻塞，在某种意义上，它会阻塞在多个操作上。这个大概的思想是，它在发送数据到所有不同的东西时会阻塞，如果没有数据发送，它就会等着，或者如果没有接受请求，它也会等待。
- en: connections to accept does that make sense Amy to your to your wise not blocking
    anymore it's kind。 of blocking in the sense that it's it's not blocking but it's
    basically saying now we can wait for two。 things at once whether we have to send
    or receive not just wait and check again and again and again。 to see if we have
    connections so we're setting up these events to say we've got two events well。
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 接受连接，这样理解吗，Amy？你看到的这些不再是阻塞的，某种程度上它是阻塞的，但它基本上是说现在我们可以同时等待两件事，不仅仅是等待并不断检查是否有连接。
- en: we've got at least one event which is accepting clients and depending on how
    many clients request。 the data then we've got many more we've got other things
    to do as well every time we are able to send。 that the the e-pull will actually
    call the right function to do the the work for us so our our main。 function can
    just sit there and the we let the kernel tell us when to send and receive data
    that's。
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们至少有一个事件在接受客户端请求，具体取决于有多少客户端请求数据。然后，我们有更多的任务需要处理，每当我们能够发送时，e-pull 实际上会调用正确的函数来为我们完成工作，因此我们的主函数可以静静地等待，我们让内核告诉我们何时发送和接收数据。
- en: the big difference so that's why it's not not blocking anymore we've leveraged
    the fact that the kernel。 will handle that waiting for us and our main threat
    doesn't need to do anything could we do more work。 yeah sure we can continue to
    do more work and now we're still waiting for two things at once but。 it's just
    abstracting it away a little bit that's all and I know there's a lot a lot going
    on here。
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最大的区别，这就是为什么它不再是阻塞的原因。我们利用了内核会为我们处理等待的事实，主线程不需要做任何事，我们是否能做更多工作？当然，我们可以继续做更多的工作，现在我们还是在等待两件事，但它只是把这部分抽象化了，仅此而已，我知道这里有很多内容。
- en: to see that and the day of the code you can go and read through the code to
    do that here's the bottom。 line okay the bottom line here is there are lots of
    ways to build a server okay we've seen a。 a number of different ways to do this
    okay we can build a threaded server we can build a non-threaded。 server and just
    kind of hope for the best we can build a threaded server that uses threads or
    uses。
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 要看到这一点，您可以阅读代码来实现这一点。底线是，好的，底线是这里有很多种构建服务器的方法。我们已经看到了不同的构建方法。我们可以构建一个线程化的服务器，或者我们可以构建一个非线程化的服务器，然后希望它能正常运行，我们还可以构建一个使用线程的线程化服务器，或者使用其他方式来接收。
- en: thread pool to do that which does we do know that there are going to be some
    blocking calls。 and it's fine to do that again it's just maybe it's a different
    strategy to do that。 but we've now seen another one where you let the kernel tell
    you when data needs to be sent or。 received and then it will that'll work in a
    different way before I go on to more details let me show you。
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 线程池来做这个操作，我们知道有些调用会被阻塞，这是可以接受的，这也许只是另一种策略来实现这一点。但我们现在看到了另一种方式，就是让内核告诉我们何时需要发送或接收数据，然后它会以不同的方式工作。在我继续讲解更多细节之前，让我给您展示一下。
- en: what this actually looks like in this case this is the let's see we've got the。
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上在此情况下是怎样的，让我们看看我们有的是什么。
- en: '![](img/969edac52273f03a794226a015ab0a12_128.png)'
  id: totrans-244
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_128.png)'
- en: efficient server I believe is what it is it's going to listen on port 3333 and
    if we go to what。
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 高效的服务器，我相信这就是它的目标，它将在3333端口监听，如果我们去访问的话。
- en: '![](img/969edac52273f03a794226a015ab0a12_130.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_130.png)'
- en: was it myth 61 again myth Smith there we go 61 333 it's going to serve us this
    website right it。
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 是不是又是神话61，神话史密斯，来吧，61 333，这个网站会为我们服务，对吧。
- en: '![](img/969edac52273f03a794226a015ab0a12_132.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_132.png)'
- en: happened to be a website where I told that it went and pulled the image from
    somewhere and whatever。 but you would be able to do that many times and for every
    browser window that's open it will just。 feed a bit at a time and I think even
    if all of us in here tried to load that one page of the exact。 same time on our
    browsers you probably wouldn't see much of a slowdown because it's just sending
    one。
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 偶然间，网站就会去某个地方拉取图片之类的，反正无论如何你会做到的。而且对于每一个打开的浏览器窗口，它会一小段一小段地传输。我觉得即使我们这里的所有人都试图同时在浏览器中加载同一个页面，可能也不会看到太大的延迟，因为它每次只传输一个小数据包。
- en: or two bytes of time but doing it very fast to all of you so that's how that
    that's that's what's going on。
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 或者每两字节时间，但要非常快速地传输给你们所有人，这就是事情的真相。
- en: '![](img/969edac52273f03a794226a015ab0a12_134.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_134.png)'
- en: there okay so where where does that leave us in the big picture when you're
    building a server or when。
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，那么这就把我们带到了一个更大的框架中，当你在构建服务器的时候，或者说当你在进行类似操作时。
- en: '![](img/969edac52273f03a794226a015ab0a12_136.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/969edac52273f03a794226a015ab0a12_136.png)'
- en: you're doing anything and this is hopefully one of the big takeaways of this
    class it depends on your。 own system setup what operating system are you using
    maybe you're using an operating system。 doesn't support this event driven model
    well too bad all right Linux happens to support it right。 maybe you have a computer
    that has a really fast network card and there's less waiting you're not。
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 你在做任何事情时，这也是这门课程的一个重要收获，希望你们能明白，这一切都取决于你自己的系统设置。你用的是什么操作系统？也许你用的操作系统不支持这种事件驱动模型？那就太糟了，好吧，Linux恰好支持它。也许你的电脑有一张非常快速的网卡，而且等待时间较少，你不会遇到那些问题。
- en: gonna do on that or maybe it's got multiple network cards or whatever what about
    the network itself。 what if you are trying to serve a website through like your
    phone's data plan right you might have a。 totally different idea of the best way
    to do that based on the actual platform so it's all about trade。 offs and it's
    all about how you can do that the big idea with the server except is and respond
    to。
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 那你该怎么做呢？或者说它可能有多个网络接口卡，或者其他什么的，那么网络本身呢？如果你是通过你的手机数据计划来提供网站服务，那又该怎么办？你可能基于实际平台对最佳方式有完全不同的看法。所以这一切都是关于权衡的，都是关于你如何去做的，服务器的核心理念就是接受并响应客户端请求。
- en: as many connections as you can that's the big idea and respond as quickly as
    you can to client requests。 okay don't block the accept and don't serve too slowly
    that's those are the big ideas and that's。 the the basic idea of any server when
    you're setting it up okay you want to respond quickly。 and you want to accept
    and you don't want to block the the user okay um。
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 尽可能多地处理连接，这是大概的思路，并且尽可能快速地响应客户端请求，好吗？不要阻塞接受请求，也不要服务得太慢，这些就是主要的理念，这是任何服务器在设置时的基本思想，好吗？你想要快速响应，也要接受请求，而不希望阻塞用户，明白了吗？
- en: don't write a server that busy waits because we don't like busy waiting because
    it makes the fans on our。 computer turn on right we don't like that we're going
    to just wasted CPU time and energy and so。 forth okay but you have to understand
    some of these low level ideas when you're making this choice。 some of you will
    undoubtedly go to companies that do networking as their core business right。
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 不要写一个忙等待的服务器，因为我们不喜欢忙等待，因为它会让我们电脑上的风扇转起来，对吧？我们不喜欢那样，它会浪费CPU时间和能量等等，好吧，但在做出这个选择时，你必须理解一些低级的概念。你们中的一些人肯定会进入那些把网络作为核心业务的公司。
- en: some of you might end up in Cisco or some other company that has lots of networking
    right that's。 happening at their Amazon web services or something like that and
    you'll have to understand some of。 this low level stuff right why do you avoid
    busy waiting and and so forth and do you need to know。 all the details like all
    that stuff I just flew through well depends but you will if you get into。
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中的一些人可能会进入思科公司，或者其他一些有大量网络需求的公司，对吧？比如发生在他们的亚马逊网络服务（Amazon Web Services）之类的地方，你将不得不理解一些低级的东西，为什么要避免忙等待（busy
    waiting）等等，你是否需要了解所有的细节，就像我刚才说的那些东西一样，嗯，取决于情况，如果你进入了这些领域，你就会知道。
- en: that take CS 144 if you if you want to do that okay and you have to be smart
    about this too by the。 way right this is a great comic I love this comic because
    it it's one of the xkcd comics that basically。 it's this server that says hi I'm
    a server have you ever done this where you go to a web page on。 your web browser
    on your phone and the server basically gives you tries to give you the mobile。
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 你要是想学CS 144，也可以学，如果你有兴趣。对了，这也得很聪明才能做对。这个漫画真好，我喜欢这个漫画，它是xkcd系列之一。它展示了一个服务器，说，“嗨，我是一个服务器。”你有没做过这事？你在手机的浏览器上打开网页，服务器尝试给你提供移动版。
- en: version of the website but it doesn't take you to the right page takes you to
    like it's the main。 website and then you're like well this is exactly what's going
    on here right oh boy can I help let me。 get it oh you're a smartphone browser
    your browser tells the web server what kind of browser it is by。 the way and you
    can spoof it in some cases too you can pretend that you're a regular computer
    browser。
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 网站的版本并没有带你到正确的页面，而是带你到了像主页那样的地方。然后你会觉得，“这到底是怎么回事？” 哦，天啊！让我帮忙看看。哦，你是智能手机浏览器。顺便说一下，你的浏览器会告诉网络服务器自己是什么类型的浏览器，而你在某些情况下也可以伪装成其他类型的浏览器。
- en: even though you're on your phone sometimes that's a good way to do it um I don't
    know if the main。 browsers let you do that now but they might you have to do sometimes
    you have to delete the end but。 it's more than that actually the reason the end
    shows up is because the browser your phone's browser。 says oh I'm a web I'm a
    phone right and the and the client or the server goes oh I better give you。
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '即便你是在手机上，有时这么做是挺好的。我不知道现在主流的浏览器是否允许这么做，但可能允许。你有时得删除最后的结尾，但实际上不止这些。之所以显示这个结尾，是因为手机的浏览器会说，“哦，我是手机。”于是客户端或服务器就会想，“哦，我最好给你……” '
- en: the paired down version even though your phones have regular full browsers on
    them so um anyway in。 this case this server says um hey I've got this new mobile
    version and uh the phone goes wait a。 minute you're giving me the main page and
    then the server just resets because it has no it's kind of。 done like that so
    build your servers smart if you're gonna build servers right don't try to be too。
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 即便你的手机上有普通的完整浏览器，压缩版的浏览器依然存在，所以无论如何，在这种情况下，服务器说，“嘿，我有这个新的移动版，”然后手机会说，“等一下，你给我的是主页。”接着，服务器就会重置，因为它没办法处理这种情况，它就是这样设计的。所以，如果你要搭建服务器，聪明点，做得好一点，不要太过。
- en: fancy with them even though you've got new things like browsers and your watch
    browsers and so forth。 and it's uh it's their trade-offs but be smart about that
    okay all right so we are a little early。 which is great um as I said at the beginning
    of class you guys made it through a difficult class um。 you can argue whether
    this class is more or less difficult than CS 107 or CS 103 or whatever but。
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 即便你有像浏览器、手表浏览器之类的新东西，这一切也只是权衡取舍的问题，但要聪明一点，好吗？好，既然我们提前到达了，这很好。正如我在课堂一开始所说，你们完成了一门难度很大的课程。你可以辩论这门课比CS
    107或CS 103难还是容易，但……
- en: if you weren't challenged by this class you're a smarter person than me because
    this is I think。 a challenging class you should give yourself a pat on the back
    for doing well and making it through。 all these crazy long assignments with 15
    pages of reading and 100 files to look through and so forth。 if you want to take
    more systems classes there are tons of them if this is the last systems class。
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对这门课没有感觉到挑战，那你比我聪明，因为我认为这是一门具有挑战性的课程。你应该为自己取得好成绩、完成了这些复杂的长任务（比如15页阅读和100个文件需要查看）感到自豪。如果你想学更多的系统课程，这里有很多。如果这门课是你最后一门系统类课程的话……
- en: you ever did well you should congratulate yourself on being done with that too。
    and uh and go do your AI stuff and whatever um but uh and did I tell you about
    Chris Peach。 telling me that hey how important systems is to AI these days and
    so Chris Peach who you many of。 you know um does AI research and CS education
    AI research uh and he was talking about with me。
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 你完成了这一部分，应该为自己鼓掌。去做你的AI相关的事或者其他的事情。对了，我跟你们讲过Chris Peach吗？他告诉我，系统在当今AI领域中的重要性。Chris
    Peach，你们中很多人都认识他，他从事AI研究和计算机科学教育。他和我谈到了这些话题。
- en: the other day about the fact that all of the AI that's done now uses GPUs and
    TensorFlow and all。 these kind of systemsy things to do AI and he says I wish
    I paid more attention in 110 in those。 systems classes or maybe I wish I wish
    I'd taken a parallel processing course so I could dig in a。 little bit more to
    figure out what's going on or at least I understood a little bit more about how。
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 前几天我提到过，现在所有的AI都使用GPU和TensorFlow，以及这些类似的系统工具来做AI。他说，我真希望当年在110课程里更专注于那些系统课程，或者至少我希望我学过并行处理课程，这样我就能更深入地了解发生了什么，或者至少能更清楚地知道这些是怎么运作的。
- en: this works so systems is not something that you necessarily you can do a lot
    of stuff without。 knowing much systems at all but you can definitely inform what
    you're doing in almost any field by。 understanding a little bit more about some
    of the decisions that are made and and so forth so uh so。 let's now I'll leave
    you with uh with that thought uh you guys are great thank you for bearing with
    me。
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这个是有效的，所以系统并不是你必须要做很多事情才能做到的，你可以在几乎任何领域通过了解一些关于所做决策的背景，来获得有用的信息。理解这些会对你的工作有所帮助。好了，我就留给你们这个思考，你们都很棒，谢谢你们耐心听我讲完。
- en: during my first quarter teaching this all alone I apologize if there were mistakes
    along the way。 but you guys are great I will see you on Monday at the final or
    during the office hours today and。 tomorrow and thank you very much。
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在我第一次独自授课的那个学期，我很抱歉过程中可能有些错误，但你们都很棒。我会在周一的期末考试时见到你们，或者今天和明天的办公时间也可以见。非常感谢大家。
