- en: Memory Authentication (notes by Marten van Dijk)
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 内存认证（Marten van Dijk的笔记）
- en: '**Read:** R. Elbaz, D. Champagne, C. Gebotys, R.B. Lee, N. Potlapally, and
    L. Torres, "Hardware Mechanisms for Memory Authentication: A Survey of Existing
    Techniques and Engines", Trans. on Comput. Sci., pp. 1-22, 2009.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**阅读：** R. Elbaz, D. Champagne, C. Gebotys, R.B. Lee, N. Potlapally 和 L. Torres,
    "内存认证的硬件机制：现有技术和引擎综述", 计算机科学交易, pp. 1-22, 2009.'
- en: '**Model (assumptions, security requirements, possible attacks):**'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**模型（假设、安全需求、可能的攻击）：**'
- en: What is memory authentication? The ability to verify that the data read from
    memory by the processor at a given address is the data it last wrote at this address.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是内存认证？验证处理器从给定地址读取的数据是否是它最后写入该地址的数据。
- en: 'Why memory authentication? An adversary able to corrupt the memory space can
    affect the computations performed by a trusted computing platform. Assumptions:
    Too costly to provide a tamper evident environment that includes memory. The trusted
    computing platform is a single chip secure processor with limited on-chip storage.
    It is resistant to all physical attacks, including invasive ones. Whenever a sensitive
    computation is finalized, the authenticity of the sequence of off-chip memory
    operations during the computation needs to be verified. Notice that, depending
    on the application, this happens all the time, or sometimes. This leads to different
    authentication strategies (tree based or not tree based).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么需要内存认证？能够破坏内存空间的对手可以影响受信任计算平台执行的计算。假设：提供包括内存在内的防篡改环境成本太高。受信任的计算平台是具有有限片上存储的单芯片安全处理器。它对所有物理攻击具有抵抗力，包括侵入性攻击。每当敏感计算完成时，需要验证计算过程中片外内存操作序列的真实性。请注意，根据应用程序的不同，这可能会经常发生，或者有时发生。这导致不同的认证策略（基于树或非基于树）。
- en: Is it realistic to have a single chip processor which is resistant to all physical
    attacks? It may be acceptable to be only resistant to all physical attacks that
    cost not too much. This excludes attacks performed by the common hacker. We do
    not try to protect against attacks performed by engineers with access to expensive
    laboratories. The required security (and its costs) is part of a business model.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有一个对所有物理攻击具有抵抗力的单芯片处理器是现实的吗？可能只有对成本不太高的所有物理攻击具有抵抗力是可以接受的。这排除了由普通黑客执行的攻击。我们不试图防范由有权访问昂贵实验室的工程师执行的攻击。所需的安全性（及其成本）是业务模型的一部分。
- en: Data integrity refers to the ability to detect any adversarial corruption or
    tampering of data. What is its relation to memory authentication? Memory authentication
    implies data integrity.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 数据完整性指的是检测任何对数据的敌对破坏或篡改的能力。它与内存认证有什么关系？内存认证意味着数据完整性。
- en: 'The objective of memory authentication is to thwart active attacks that tamper
    with off-chip memory contents. What are these active attacks? Spoofing: existing
    memory block is exchanged with an arbitrary fake one. Splicing/Relocation: replace
    a memory block at address A with a block at address B. Replay: a memory block
    located at a given address is recorded and inserted at the same address at a later
    point in time.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 内存认证的目标是防范篡改片外内存内容的主动攻击。这些主动攻击是什么？欺骗：现有内存块被替换为任意伪造的内存块。拼接/重定位：将地址A处的内存块替换为地址B处的内存块。重放：在给定地址处记录的内存块在以后的某个时间点插入到同一地址处。
- en: What is a software attack? A software attack is an active attack performed by
    a compromised OS or malicious application. We cannot trust the OS, even if the
    OS kernel is designed to isolate sensitive applications from malicious software.
    For now, we will not consider software attacks.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是软件攻击？软件攻击是由受损操作系统或恶意应用程序执行的主动攻击。即使操作系统内核被设计为将敏感应用程序与恶意软件隔离，我们也不能信任操作系统。目前，我们不会考虑软件攻击。
- en: What other security requirements are of interest? Access control; applications
    should not be able to access one another's application specific data. Data confidentiality;
    encrypt sensitive data to ensure privacy.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 还有哪些安全需求值得关注？访问控制；应用程序不应能够访问彼此的特定数据。数据保密性；加密敏感数据以确保隐私。
- en: Why are these requirements not sufficient? An attacker may manipulate encrypted
    data. So, we also need memory authentication.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这些需求还不够？攻击者可能操纵加密数据。因此，我们还需要内存认证。
- en: Does encryption of sensitive data really ensure privacy? What about correlating
    memory access patterns? This may leak information about the nature of the application
    and to which other applications, with which it shares memory, it is related.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 加密敏感数据是否真的确保隐私？内存访问模式的相关性如何？这可能泄露有关应用程序性质以及与其共享内存的其他应用程序之间的关系的信息。
- en: '**Solutions (tree based solutions and a non-tree based solution):**'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**解决方案（基于树的解决方案和非基于树的解决方案）：**'
- en: What is a naive solution for memory authentication? Store digest of entire memory
    in on-chip storage. Unacceptable.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 内存认证的一个天真解决方案是什么？在芯片存储器中存储整个内存的摘要。不可接受。
- en: What is a next best solution? Store a digest of every memory block (cache block),
    see Figure 3(a). Reduces memory bandwidth overhead, but needs too much (expensive)
    on-chip memory.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个最佳解决方案是什么？存储每个内存块（缓存块）的摘要，参见图3(a)。减少内存带宽开销，但需要太多（昂贵）的芯片内存。
- en: 'What is a slightly better solution? Using nonces costs less on-chip memory,
    see Figure 3(b). If the nonce generator runs out of range, need to reset key k
    and update all memory (this can be done in idle time). Does the nonce generator
    need to output unique nonces, do nonces for different addresses need to be different?
    No, if we compute each MAC as a function of the key k, nonce N, and address A.
    So, we can use smaller nonces, leading to less on-chip storage. When a smaller
    nonce specific to a certain address runs out of range, this address cannot be
    used until key k is reset. If we use smaller nonces of say 16 bits, can we use
    random nonces? No, with probability 1/ 2^16 this leads to a collision and possibly
    to an attack. We need deterministic nonces: for each update, just increment the
    corresponding nonce by 1.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是稍微更好的解决方案？在芯片内存上使用随机数成本更低，参见图3(b)。如果随机数生成器超出范围，需要重置密钥k并更新所有内存（这可以在空闲时间完成）。随机数生成器需要输出唯一的随机数吗？不同地址的随机数需要不同吗？不需要，如果我们将每个MAC计算为密钥k、随机数N和地址A的函数。因此，我们可以使用较小的随机数，从而减少芯片内存。当特定地址的较小随机数用尽时，该地址在重置密钥k之前无法使用。如果我们使用16位的较小随机数，可以使用随机随机数吗？不可以，以1/2^16的概率会导致冲突，可能会导致攻击。我们需要确定性随机数：对于每次更新，只需将相应的随机数递增1。
- en: How can we add data confidentiality? Replace MAC by an encryption E, see Figure
    3(c).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如何添加数据保密性？将MAC替换为加密E，参见图3(c)。
- en: 'What trick improves the current solutions? Integrity trees with Hash (Merkle
    tree), MAC + nonces, or E + nonces. See Figure 5\. How does it work? Merkle tree
    update procedure is sequential: computation of a new hash node in a branch must
    be completed before the update of the next branch node can start. The PAT read
    and update procedures are parallelizable, how does this work? An intermediate
    node stores the MAC of the nonces stored in its children and these are all known
    beforehand. An intermediate node does not store the MAC of the MACs stored in
    its children (does would be similar to the Merkle tree). The TEC-Tree uses encryption,
    and does not store nonces. How are nonces retrieved during an update? Use decryption.
    Is a mixture of reads and updates parallelizable? No.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 什么技巧可以改进当前的解决方案？具有哈希（Merkle树）、MAC + 随机数或E + 随机数的完整性树。参见图5。它是如何工作的？Merkle树更新过程是顺序的：在更新下一个分支节点之前，必须完成分支中新哈希节点的计算。PAT读取和更新过程是可并行化的，它是如何工作的？一个中间节点存储其子节点中存储的随机数的MAC，这些都是事先已知的。中间节点不存储其子节点中存储的MAC的MAC（这将类似于Merkle树）。TEC-Tree使用加密，不存储随机数。在更新期间如何检索随机数？使用解密。读取和更新的混合是否可并行化？不可以。
- en: How do we find the address of a parent node? Use tree traversal, which leads
    to (eq. 1).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何找到父节点的地址？使用树遍历，导致（公式1）。
- en: How can we make use of the cache to improve performance? Tree read and update
    procedures are terminated as soon as a cached hash or the root is encountered.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如何利用缓存以提高性能？树读取和更新过程在遇到缓存的哈希或根时终止。
- en: What is a Bonsai Merkle Tree? Use many smaller trees using counters/nonces.
    Store their roots. Protect the counters using a special tree and store its intermediate
    nodes and leaves. See Figure 6\. Notice the statement "a full page needs to be
    cryptographically processed every time a local counter rolls over". Don't worry
    about the details of this method. Just notice the similarity to our discussion
    of the solution presented in Figure 3(b).
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 什么是盆景Merkle树？使用许多使用计数器/随机数的较小树。存储它们的根。使用特殊树保护计数器，并存储其中间节点和叶子。参见图6。注意声明“每次本地计数器翻转时都需要对整个页面进行加密处理”。不要担心此方法的细节。只需注意与我们在图3(b)中呈现的解决方案的讨论的相似性。
- en: 'What do we need to do if the OS cannot be trusted? Build an integrity tree
    which covers only pages belonging to the application and which can only be updated
    when the application itself is running. Page table maps a page''s virtual address
    to its physical address. Branch splicing attack corrupts the physical address
    corresponding to the virtual address of a given memory block, see Figure 7\. Therefore,
    we need to build a tree over the virtual address space. The virtual address generated
    by the protected application is used to traverse the tree. What are the shortcomings?
    Not scalable: need a large memory capacity (allocation of physical page frames
    for the 2^64 bytes of leaf nodes that are defined during initialization, as well
    as allocation of memory for the non-leaf tree nodes) and a large initialization
    overhead (takes too much time to initialize such a tree). We also require one
    full-blown tree for each application requiring protection, rather than a single
    tree protecting all software in physical memory. How can we try to partially overcome
    these problems? Introduce a new hardware unit that builds an integrity tree over
    a reduced address space, which contains only those pages needed for the application''s
    execution (it grows dynamically as the application memory footprint increases).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果操作系统不可信，我们需要做什么？构建一个完整性树，仅覆盖属于应用程序的页面，并且只能在应用程序本身运行时更新。页表将页面的虚拟地址映射到其物理地址。分支接种攻击会破坏与给定内存块的虚拟地址对应的物理地址，参见图7。因此，我们需要在虚拟地址空间上构建一棵树。受保护应用程序生成的虚拟地址用于遍历树。存在哪些缺点？不可扩展：需要大量的内存容量（为初始化期间定义的2^64字节叶节点的物理页框分配，以及为非叶树节点分配内存），以及大量的初始化开销（初始化这样的树需要太长时间）。我们还需要为每个需要保护的应用程序引入一个完整的树，而不是一个单独的树来保护物理内存中的所有软件。我们如何尝试部分克服这些问题？引入一个新的硬件单元，在一个缩小的地址空间上构建一个完整性树，该空间仅包含应用程序执行所需的页面（随着应用程序内存占用的增加而动态增长）。
- en: 'Memory authentication without a tree structure: Lhash is designed for applications
    requiring integrity checking after a sequence of memory operations (as opposed
    to checking every memory operation as in tree schemes). It uses a multiset hash
    function to maintain at runtime a write and read log of memory locations, called
    WriteHash and ReadHash. These logs are stored on-chip. At initialization WriteHash
    is computed over the memory chunks belonging to the memory region that needs to
    be authenticated. WriteHash is updated at runtime when an off-chip write is performed
    or when a dirty cache block is evicted from cache. WriteHash reflects the off-chip
    memory state at any time. ReadHash is updated whenever an off-chip read is performed
    or a chunk is brought in cache. To check the integrity of a sequence of operations,
    all the blocks belonging to the memory region that are not present in cache are
    read, after which the ReadHash should equal the WriteHash.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 无树结构的内存认证：Lhash专为需要在一系列内存操作之后进行完整性检查的应用程序设计（与树方案中的每个内存操作进行检查相反）。它使用多重集哈希函数在运行时维护内存位置的写入和读取日志，称为WriteHash和ReadHash。这些日志存储在芯片上。在初始化时，WriteHash计算在需要认证的内存区域中属于内存块的内存块上。当执行芯片外写入或从缓存中驱逐脏缓存块时，WriteHash在运行时更新。WriteHash随时反映芯片外内存状态。当执行芯片外读取或将块带入缓存时，ReadHash会更新。要检查一系列操作的完整性，需要读取属于内存区域的所有块，之后ReadHash应该等于WriteHash。
- en: 'Requirements of multiset hash functions: compression (guarantees that we can
    store hashes in a small bounded amount of memory), comparability (a probabilistic
    algorithm that compares hashes, needed since a multiset not always hashes to the
    same value), incrementality (adding hashes of multisets together results in a
    hash of the union of the multisets), and multiset collision resistance (computationally
    infeasible to find two distinct multisets that hash to comparable hashes).'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 多重集哈希函数的要求：压缩（保证我们可以将哈希存储在有限的内存中）、可比性（一个比较哈希的概率算法，因为多重集不总是哈希到相同的值）、增量性（将多重集的哈希相加得到多重集的并集的哈希）、以及多重集碰撞抗性（计算上不可行找到两个不同的多重集哈希到相似哈希的）。
- en: '**Related topics:**'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '**相关主题：**'
- en: 'Related topics: Data authentication symmetric multi-processors: need to consider
    bus transaction authentication on cache to cache transfers required in cache coherency
    protocols, see Figure 8.'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 相关主题：数据认证对称多处理器：需要考虑在缓存到缓存传输中进行总线事务认证，这在缓存一致性协议中是必需的，参见图8。
- en: 'Related topics: How can we use an untrusted server to provide trusted storage
    for a large number of directories, where the files in each directory may be accessed
    and updated by several different devices that may be offline at different times
    and may not be able to communicate with each other except through an untrusted
    server (over an untrusted network). The multi-user network file system SUNDR offers
    protection against forking attacks, a form of attack where a server uses a replay
    attack to give different users a different view of the current state of the system.
    However, it does not *immediately* detect forking attacks. Instead, it offers
    *fork consistency*, which essentially ensures that the system server either behaves
    correctly, or that its failure or malicious behavior will be detected at a later
    moment when users are able to communicate with each other (for example, once a
    day during night time). If the untrusted server has a time-stamping device that
    can be trusted (for example, by using an embedded Trusted Platform Module), then
    immediate detection of forking and replay attacks is possible.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 相关主题：如何利用不受信任的服务器为大量目录提供可信存储，其中每个目录中的文件可能由几个不同设备访问和更新，这些设备可能在不同时间离线，并且除了通过不受信任的服务器（在不受信任的网络上）之外，它们可能无法相互通信。多用户网络文件系统SUNDR提供了对分叉攻击的保护，这是一种攻击形式，其中服务器使用重放攻击使不同用户对系统的当前状态有不同的视图。然而，它并不会*立即*检测到分叉攻击。相反，它提供*分叉一致性*，这基本上确保系统服务器要么行为正确，要么其故障或恶意行为将在稍后的某个时刻被检测到，当用户能够相互通信时（例如，每天晚上一次）。如果不受信任的服务器具有可以信任的时间戳设备（例如，通过使用嵌入式可信平台模块），则可以立即检测到分叉和重放攻击。
- en: 'Related topics: Cloud storage. A client wants to make sure that a replica of
    their data exists. A proof of retrievability (POF) is a short message generated
    by a server that contains evidence that a correct version of the client''s data
    is stored at the server. This gives the possibility for clients to efficiently
    check that their data is sufficiently backed up (check out the latest news on
    the loss of T-mobile data!).'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 相关主题：云存储。客户端希望确保其数据的副本存在。检索性证明（POF）是服务器生成的包含证据的短消息，证明客户端数据的正确版本存储在服务器上。这使客户能够有效地检查其数据是否得到充分备份（查看有关T-mobile数据丢失的最新消息！）。
- en: 'Related topics: Sparse memory. By using an authenticated search tree, a proof
    of non-existence of a leaf that corresponds to an encrypted address can be generated.
    This protects against denial of existence of stored values (required for sparse
    memory), replay attacks, and unauthorized access.'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 相关主题：稀疏内存。通过使用经过身份验证的搜索树，可以生成一个证明，证明对应于加密地址的叶子不存在。这可以防止存储值的存在性被否认（稀疏内存所需），重放攻击和未经授权的访问。
