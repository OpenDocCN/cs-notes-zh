- en: P1：01-01-introduction - 哈库那玛塔塔i - BV1R4411u7dt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P1：01-01-介绍 - 哈库那玛塔塔i - BV1R4411u7dt
- en: Welcome to the course Introduction to Databases。 I'm Jennifer Whittom from Stanford
    University。 In this course we'll be learning about databases and the use of database
    management systems。 primarily from the viewpoint of the designer， user， and developer
    of database applications。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎来到《数据库导论》课程。我是来自斯坦福大学的Jennifer Whittom。在这门课程中，我们将学习数据库及数据库管理系统的使用，主要从数据库应用的设计者、用户和开发者的角度来探讨。
- en: '![](img/44bec38263764604b922cf12df099770_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44bec38263764604b922cf12df099770_1.png)'
- en: I'm going to start by describing the， in one very long sentence。 what a database
    management system provides for applications。 It provides a means of handling large
    amounts of data primarily。 but let's look at a little more detail。 What it provides
    in a long sentence is efficient， reliable。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我将从一个非常长的句子开始，描述数据库管理系统为应用提供的功能。它主要提供了处理大量数据的方法，但让我们更详细地看看。它提供的功能可以用一个长句子来总结：高效、可靠。
- en: convenient， and safe， multi-user storage of and access to massive amounts of
    persistent data。 So I'm going to go into each one of those adjectives in a little
    bit more detail in a moment。 but I did want to mention that database systems are
    extremely prevalent in the world today。 They sit behind many websites。 They're
    what run your banking systems， your telecommunications。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 方便、安全的多用户存储和访问大量持久性数据。因此，我将在稍后更详细地讲解每一个形容词，但我想先提到的是，数据库系统在今天的世界中非常普及。它们支撑着许多网站，驱动着你的银行系统和电信系统。
- en: deployments of sensors， scientific experiments， and much， much more highly prevalent。
    So let's talk a little bit about why database systems are so popular and so prevalent
    by looking at these seven adjectives。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 传感器的部署、科学实验以及许多其他领域都高度普及。那么让我们通过这七个形容词，来谈一谈为什么数据库系统如此流行和普及。
- en: '![](img/44bec38263764604b922cf12df099770_3.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44bec38263764604b922cf12df099770_3.png)'
- en: The first aspect of database systems is that they handle data at a massive scale。
    So if you think about the amount of data that's being produced today。 database
    systems are handling terabytes of data， sometimes even terabytes of data every
    day。 And one of the critical aspects is that the data that's handled by database
    management systems is much larger than can fit in the memory of a typical computing
    system。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库系统的第一个特点是它们能够处理海量数据。所以如果你考虑今天产生的数据量，数据库系统每天处理的数据量有时甚至达到几TB。而且，数据库管理系统处理的数据量远远大于普通计算机系统内存所能容纳的。
- en: So memories are indeed growing very， very fast， but the amount of data in the
    world and data to be handled by database systems is growing much faster。 So database
    systems are designed to handle data that's residing outside of memory。 Secondly。
    the data that's handled by database management systems is typically persistent。
    And what I mean by that is that the data in the database outlives the programs
    that execute on that data。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 内存的确在快速增长，但全球数据量和需要由数据库系统处理的数据量的增长速度远远超过内存的增长速度。因此，数据库系统被设计用来处理那些超出内存的数据。其次，数据库管理系统处理的数据通常是持久的。我的意思是，数据库中的数据比执行这些数据的程序存活得更久。
- en: So if you have a run a typical computer program， the program will start。 the
    variables will be created。 There will be data that's operated on the program。
    the program will finish and the data will go away。 It's sort of the other way
    with databases。 The data is what sits there， and then the program will start up，
    will operate on the data。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果你运行一个典型的计算机程序，程序将会启动，变量会被创建，程序将操作数据，程序结束后数据就会消失。与此相反，数据库则是数据先存在，程序随后启动并对数据进行操作。
- en: the program will stop， and the data will still be there。 Very often actually
    multiple programs will be operating on the same data。 Next， safety。 So database
    systems， since they run critical applications such as telecommunications and banking
    systems。 have to have guarantees that the data managed by the system will stay
    in a consistent state。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 程序停止时，数据仍然存在。实际上，多个程序往往会同时操作同一数据。接下来是安全性。因此，数据库系统由于运行着像电信和银行系统等关键应用，必须保证由系统管理的数据能够保持一致性。
- en: It won't be lost or overwritten when there are failures。 And there can be hardware
    failures。 There can be software failures。 Even simple power outages。 You don't
    want your bank balance to change because the power went out at your bank branch。
    And of course there are the problem of malicious users that may try to corrupt
    data。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 即使发生故障，数据也不会丢失或被覆盖。故障可能是硬件故障，也可能是软件故障，甚至是简单的停电。你不希望因为银行分行停电而导致你的银行余额发生变化。当然，还有恶意用户可能试图破坏数据的问题。
- en: So database systems have a number of built-in mechanisms that ensure that the
    data remains consistent regardless of what happens。 Next， multi-user。 So I mentioned
    that multiple programs may operate on the same database。 and even with one programming
    operating on a database。 that program may allow many different users or applications
    to act。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，数据库系统有许多内置机制，确保无论发生什么，数据始终保持一致。接下来是多用户。我提到过多个程序可能操作相同的数据库，即使只有一个程序操作数据库，该程序也可能允许多个不同的用户或应用程序进行操作。
- en: So when you have multiple applications working on the same data。 the system
    has to have some mechanisms， again， to ensure that the data stays consistent。
    That you don't have， for example， half of a data-item rover written by one person
    and the other half over written by another。 So there's mechanisms in database
    systems called concurrency control。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当你有多个应用程序操作相同的数据时，系统必须有一些机制来确保数据的一致性。例如，防止出现一种情况：一个人写了数据项的一部分，而另一个人又覆盖了另一部分。因此，数据库系统中有一种叫做并发控制的机制。
- en: And the idea there is that we control the way multiple users access the database。
    Now we don't control it by only having one user have exclusive access to the database
    or the performance would slow down considerably。 So the control actually occurs
    at the level of the data items in the database。 So many users might be operating
    on the same database。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的想法是我们控制多个用户访问数据库的方式。我们不是通过让只有一个用户独占数据库来控制访问，否则性能会大幅下降。因此，控制实际上发生在数据库中的数据项级别。所以，许多用户可能同时操作同一个数据库。
- en: but be operating on different individual data items。 It's a little bit similar
    to say file system concurrency or even variable concurrency in programs。 except
    it's more centered around the data itself。 The next adjective is convenience。
    And convenience is actually one of the critical features of database systems。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 但它们是操作不同的单个数据项。这有点类似于文件系统中的并发性，或者程序中变量的并发性，只不过它更集中在数据本身。下一个形容词是便利性。便利性实际上是数据库系统的关键特性之一。
- en: They really are designed to make it easy to work with large amounts of data
    and to do very powerful and interesting processing on that data。 So there's a
    couple of levels at which that happens。 There's a notion in databases called physical
    data independence。 And what that's kind of a mouthful。 but what that's saying
    is that the way the data is actually stored and laid out in disk on disk is independent
    of the way the programs think about the structure of the data。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 它们的设计真正是为了让处理大量数据变得更加容易，并能够对这些数据进行非常强大和有趣的处理。因此，这个过程发生在几个层次上。数据库中有一个叫做物理数据独立性的概念。虽然这有点拗口，但它的意思是，数据实际上在磁盘上存储和布局的方式，与程序如何看待数据结构是独立的。
- en: So you could have a program that operates on a database and underneath there
    could be a complete change in the way the data is stored。 yet the program itself
    would not have to be changed。 So the operations on the data are independent from
    the way the data is laid out。 And some are related to that as the notion of high
    level query languages。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，你可以有一个操作数据库的程序，而在其底层，数据的存储方式可能发生完全的变化，但程序本身不需要更改。因此，数据操作与数据布局的方式是独立的。与此相关的还有高级查询语言的概念。
- en: So the databases are usually queried by languages that are relatively compact
    and described really at a very high level what information you want from the database。
    Specifically， they have an obey a notion that's called declarative。 And what the
    declarative is saying is that in a query you describe what you want out of the
    database。 but you don't need to describe the algorithm to get the data out。 And
    that's a really nice feature。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，数据库通常通过相对紧凑的语言进行查询，这些语言从一个非常高的层次上描述你希望从数据库中获取的信息。具体来说，它们遵循一种被称为声明式的概念。声明式的意思是，在查询中你描述你想从数据库中得到什么，但你不需要描述获取数据的算法。这是一个非常不错的特性。
- en: It allows you to write queries in a very simple way and then the system itself
    will find the algorithm to get that data out efficiently。 And speaking of efficiency，
    that's number six， but certainly not sixth importance。 There's in real estate
    is a little aside here， a old saying that when you have a piece of property。 the
    most important three aspects of the property are the location of the property。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它允许你以非常简单的方式编写查询，然后系统本身会找到高效获取数据的算法。说到效率，这是第六个方面，但绝对不是第六重要性。在房地产领域，有一句古老的说法，当你拥有一块土地时，最重要的三点是这块土地的位置。
- en: the location and the location。 And people say the same thing about databases
    is a similar parallel joke。 which is that the three most important things in the
    database system is first performance。 second performance， and again performance。
    So database systems have to do really thousands of queries or updates per second。
    And these are not simple queries necessarily。 These may be very complex operations。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 位置，还是位置。人们也常用这个笑话来形容数据库系统：数据库系统中最重要的三点是首先性能，其次是性能，再次是性能。因此，数据库系统必须能够每秒执行成千上万的查询或更新。这些查询不一定是简单的查询，可能是非常复杂的操作。
- en: So constructing a database system that can execute queries。 complex queries
    at that rate over gigantic amounts of data， terabytes of data is no simple task。
    And that is one of the major features also provided by a database management system。
    And lastly。 but again not last in importance， is reliability。 Again。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，构建一个能够在巨大数据量（例如TB级数据）上执行复杂查询的数据库系统绝非易事。这也是数据库管理系统提供的主要特性之一。最后，虽然这不是最不重要的，可靠性同样至关重要。再次强调。
- en: looking back at say your banking system or your telecommunications system。 it's
    critically important that those are up all the time。 So 99。9999% uptime is the
    type of guarantee that database management systems are making for their applications。
    So that gives us an idea of all the terrific things that a database system provides。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下你的银行系统或电信系统，确保这些系统始终在线是至关重要的。因此，数据库管理系统为其应用程序提供的保证是99.9999%的正常运行时间。这让我们对数据库系统所提供的所有卓越功能有了一个大致的了解。
- en: I hope you're already convinced that if you have an application you want to
    build that involves data。 it would be great to have all of these features provided
    for you in a database system。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你已经相信，如果你有一个需要处理数据的应用程序，能够在数据库系统中提供所有这些功能将会是非常棒的。
- en: '![](img/44bec38263764604b922cf12df099770_5.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44bec38263764604b922cf12df099770_5.png)'
- en: Now let me mention a few of the aspects surrounding database systems and scope
    a little bit what we're going to be covering in this course。 When people build
    database applications， sometimes they program them with what's known as a framework。
    Currently as of the time of this video some of the popular frameworks are Django
    or Ruby on Rails。 And these are environments that help you develop your programs
    and help you generate say the calls to the database system。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我提到一些围绕数据库系统的方面，并简单介绍一下我们在本课程中将要涵盖的内容。当人们构建数据库应用程序时，有时他们会使用被称为框架的工具。目前，在本视频录制时，一些流行的框架有Django和Ruby
    on Rails。这些是帮助你开发程序并帮助你生成数据库系统调用的环境。
- en: We're not in this set of videos going to be talking about the frameworks but
    rather we're going to be talking about the database system itself and how it's
    used and what it provides。 Second of all database systems are often used in conjunction
    with what's known as middleware。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一系列视频中，我们不会讨论框架，而是专注于数据库系统本身，探讨它是如何使用的以及它提供了什么功能。其次，数据库系统通常与被称为中间件的工具一起使用。
- en: And again at the time of this video typical middleware might be application
    servers， web servers。 So this middleware helps applications interact with database
    systems in a certain types of ways。 And again that's sort of outside the scope
    of the course。 We won't be talking about middleware in the course。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，在本视频录制时，典型的中间件可能是应用服务器、Web服务器。因此，这些中间件帮助应用程序以特定方式与数据库系统进行交互。而这部分内容超出了本课程的范围，我们在课程中不会讨论中间件。
- en: Finally it's not the case that every application that involves data necessarily
    uses a database system。 So historically a lot of data has been stored in files。
    I think that's a little bit less so these days but still there's a lot of data
    out there that's simply sitting in files。 Excel spreadsheets is another domain
    where there's a lot of data sitting out there and it's useful in certain ways。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，并不是每一个涉及数据的应用都必须使用数据库系统。所以，历史上，很多数据都存储在文件中。我认为现在这种情况略有减少，但仍然有很多数据仅仅存放在文件中。Excel
    表格是另一个领域，其中有很多数据存放在那里，并且在某些方面非常有用。
- en: And the processing of data is not always done through query languages associated
    with database systems。 For example Hadoop is a processing framework for running
    operations on data that's stored in files。 Again in this set of videos we're going
    to focus on the database management system itself and on storing and operating
    on data through a database management system。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 而数据的处理并不总是通过与数据库系统相关联的查询语言来完成。例如，Hadoop 是一个处理框架，用于对存储在文件中的数据执行操作。在这系列视频中，我们将专注于数据库管理系统本身，以及通过数据库管理系统存储和操作数据。
- en: '![](img/44bec38263764604b922cf12df099770_7.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44bec38263764604b922cf12df099770_7.png)'
- en: So there are four key concepts that we're going to cover for now。 The first
    one is the data model。 The data model is a description of in general how the data
    is structured。 So one of the most common data models is the relational data model。
    We'll spend quite a bit of time on that。 In the relational data model the data
    in a database is thought of as a set of records。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，接下来我们将覆盖四个关键概念。第一个是数据模型。数据模型是一般地描述数据如何结构化的方式。最常见的数据模型之一是关系数据模型。我们将在这上面花费不少时间。在关系数据模型中，数据库中的数据被视为一组记录。
- en: Now another popular way to store data is for example an XML document。 So an
    XML document captures data instead of a set of records as a hierarchical structure
    of labeled values。 Another possible data model would be a graph data model or
    all data in the databases in the form of nodes and edges。 So again a data model
    is telling you the general form of data that's going to be stored in the database。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，另一种常见的数据存储方式是例如 XML 文档。所以，XML 文档捕捉的是数据，而不是一组记录，而是一个带标签值的层次结构。另一种可能的数据模型是图数据模型，或者是将数据库中的所有数据表示为节点和边的形式。所以，数据模型就是告诉你将要存储在数据库中的数据的一般形式。
- en: Next is the concept of schema versus data。 So one can think of this kind of
    like types and variables in a programming language。 The schema sets up the structure
    of the database。 And it's just going to tell me the structure of the database
    where the data is the actual data stored within the schema。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是架构与数据的概念。所以可以把它看作是编程语言中的类型与变量。架构设置了数据库的结构，它只是告诉我数据库的结构，而数据则是存储在架构中的实际数据。
- en: So again in a program you set up types and then you have variables of those
    types。 We'll set up a schema and then we'll have a whole bunch of data that adheres
    to that schema。 Typically the schema is set up at the beginning and doesn't change
    very much where the data changes rapidly。 Now to set up the schema what normally
    uses what's known as a data definition language。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，在程序中，你设置类型，然后有这些类型的变量。我们会设置一个架构，然后会有一堆符合该架构的数据。通常，架构是在开始时设置的，并且变化不大，而数据则变化迅速。现在，通常用所谓的数据定义语言来设置架构。
- en: Sometimes people use higher level design tools that help them think about the
    design and then from there go to the data definition language。 But it's used in
    general to set up the schema or structure for a particular database。 Once the
    schema has been set up and data has been loaded then it's possible to start querying
    and modifying the data。 And that's typically done with what's known as the data
    manipulation language。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 有时人们会使用更高级的设计工具来帮助他们思考设计，然后从那里转向数据定义语言。但它通常用于设置特定数据库的架构或结构。一旦架构被设置并且数据被加载，就可以开始查询和修改数据。这通常通过所谓的数据操作语言来完成。
- en: So for querying and modifying the database。 Okay so those are some key concepts。
    Certainly we're going to get into much more detail in later videos about each
    of these concepts。 Now let's talk about the people that are involved in a database
    system。 So the first person we'll mention is the person who implements the database
    system itself。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 用于查询和修改数据库。所以这些是一些关键概念。我们肯定会在后续视频中深入讨论这些概念的细节。现在，让我们谈谈数据库系统中涉及的人员。首先，我们将提到的是负责实现数据库系统的人。
- en: the database implementer。 That's the person who builds the system。 That's not
    going to be the focus of this course。 We're going to be focusing more on the types
    of things that are done by the other three people that I'm going to describe。
    The next one is the database designer。 So the database designer is the person
    who establishes the schema for a database。 So let's suppose we have an application。
    We know there's going to be a lot of data involved in the application and we want
    to figure out how we're going to structure that data before we build the application。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库实现者。那个人负责构建系统。这不会是本课程的重点。我们将更多关注其他三类人员所做的工作。我将描述的下一个角色是数据库设计师。因此，数据库设计师是为数据库建立模式的人。假设我们有一个应用程序。我们知道该应用程序将涉及大量数据，我们希望在构建应用程序之前先搞清楚如何构建这些数据的结构。
- en: That's the job of the database designer。 It's a surprisingly difficult job when
    you have a very complex data involved in an application。 Once you've established
    the structure of the database then it's time to build the applications or programs
    that are going to run on the database often interfacing between the eventual user
    and the data itself。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是数据库设计师的工作。当应用程序涉及到非常复杂的数据时，这是一项出乎意料的困难工作。一旦你建立了数据库的结构，就该开始构建将在数据库上运行的应用程序或程序，通常是作为最终用户与数据之间的接口。
- en: And that's the job of the application developer。 So those are the programs that
    operate on the database。 And again， I've mentioned already that you can't have
    a database with many different programs that operate on。 It would be very common。
    You might， for example， have a sales database where some applications are actually
    inserting the sales as they happen while others are analyzing the sales。 So it's
    not necessary to have a one-to-one coupling between programs and databases。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是应用程序开发者的工作。所以这些程序是操作数据库的程序。我已经提到过，你不可能只有一个数据库与多个程序操作它之间的关系。这是很常见的。例如，你可能有一个销售数据库，某些应用程序会在销售发生时插入销售数据，而其他程序则分析销售数据。所以程序与数据库之间不必是一一对应的关系。
- en: And the last person is the database administrator。 So the database administrator
    is the person who loads the data。 sort of gets the whole thing running and keeps
    it running smoothly。 So this actually turns out to be a very important job for
    large database applications。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个人是数据库管理员。所以，数据库管理员是负责加载数据的人。负责让整个系统启动并保持其平稳运行。因此，对于大型数据库应用程序来说，这实际上是一个非常重要的工作。
- en: For better or worse， database systems do tend to have a number of tuning parameters
    associated with them。 And getting those tuning parameters right can make a significant
    difference in the all-important performance of the database system。 So database
    administrators are actually highly valued， very important。 highly paid as a matter
    of fact， and are for large deployments an important person in the entire process。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 无论好坏，数据库系统确实通常有许多与之相关的调优参数。正确设置这些调优参数可以在数据库系统的关键性能上产生显著的差异。因此，数据库管理员实际上是非常重要且备受重视的，事实上，他们的薪资非常高，对于大规模部署来说，他们在整个过程中扮演着重要角色。
- en: So those are the people that are involved。 Again， in this class we'll be focusing
    mostly on designing and developing applications。 a little bit on administration，
    but in general thinking about databases and the use of database management systems
    from the perspective of the application builder and user。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这些是参与其中的人。再次强调，在本课程中，我们将主要集中在应用程序的设计和开发上，稍微涉及一些管理工作，但总的来说，我们将从应用程序开发者和用户的角度来思考数据库和数据库管理系统的使用。
- en: '![](img/44bec38263764604b922cf12df099770_9.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44bec38263764604b922cf12df099770_9.png)'
- en: To conclude， we're going to be learning about databases and whether you know
    it or not。 you're already using a database every day。 In fact， more likely than
    not。 you're using a database every hour。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 总结一下，我们将学习关于数据库的知识，而无论你是否意识到，你每天都在使用数据库。事实上，你很可能每小时都会使用一次数据库。
- en: '![](img/44bec38263764604b922cf12df099770_11.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/44bec38263764604b922cf12df099770_11.png)'
