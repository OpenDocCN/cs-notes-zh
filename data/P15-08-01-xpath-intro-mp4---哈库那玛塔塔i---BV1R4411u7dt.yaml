- en: P15：08-01-xpath-intro.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P15：08-01-xpath-intro.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
- en: Now let's turn to the subject of querying XML。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们来讨论查询 XML 的话题。
- en: '![](img/0f5de7bb441237afcc827578b43efc02_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f5de7bb441237afcc827578b43efc02_1.png)'
- en: First of all， let me say right up front that querying XML is not nearly as mature
    as querying relational databases。 And there are a couple reasons for that。 First
    of all， it's just much， much newer。 Second of all。 it's not quite as clean。 There's
    no underlying algebra for XML that's similar to the relational algebra for querying
    relational databases。 Let's talk about the sequence of development of query languages
    for XML up until the present time。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我要明确一点，查询 XML 远没有关系型数据库查询那么成熟。这背后有几个原因。首先，XML 实际上要新得多。其次，它的设计不够简洁。XML 没有类似于关系型数据库查询所依赖的关系代数。接下来，我们来谈谈
    XML 查询语言的发展历程，直到今天。
- en: The first language to be developed was X-Path。 X-Path considers consists of
    path expressions and conditions。 And that's what we'll be covering in this video
    once we finish the introductory material。 The next thing to be developed was XSLT。
    XSLT has X-Path as a component。 but it also has transformations， and that's what
    the T stands for。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个被开发的语言是 X-Path。X-Path 由路径表达式和条件构成。我们将在完成介绍材料后，在这个视频中介绍这些内容。接下来开发的语言是 XSLT。XSLT
    包含了 X-Path 作为组件，但它还包括了转换功能，这也是 T 的含义。
- en: And it also has constructs for output formatting。 As I've mentioned before。
    XSLT is often used to translate XML into HTML for rendering。 And finally。 the
    latest language and the most expressive language is X-query。 So that also has
    X-Path as a component， plus what I would call a full-featured query language。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 它还具备输出格式化的构造。如我之前提到的，XSLT 常用于将 XML 转换为 HTML 进行渲染。最后，最新且最具表现力的语言是 X-query。因此，它也包含了
    X-Path 作为组件，此外，它还是一种功能全面的查询语言。
- en: So it's most similar to SQL in a way， as we'll be seeing。 The order that we're
    going to cover them in is first X-Path。 and then actually second X-query and finally
    XSLT。 There are a couple of other languages。 X-Link and X-pointer。 Those languages
    are， for specifying as you can see， links and pointers。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，它在某种程度上与 SQL 最为相似，正如我们将要看到的那样。我们将按以下顺序介绍它们：首先是 X-Path，然后是 X-query，最后是 XSLT。还有一些其他的语言，如
    X-Link 和 X-pointer。这些语言，如你所见，是用于指定链接和指针的。
- en: they also use the X-Path language as a component。 We won't be covering those
    in this video。 Now。 we'll be covering X-Path， X-query and XSLT。 In moderate detail。
    we're not going to cover every single construct of the languages。 but we will
    be covering enough to write a wide variety of queries using those languages。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 它们也使用 X-Path 语言作为组件。我们在这个视频中不会涉及这些内容。现在，我们将详细讨论 X-Path、X-query 和 XSLT。我们不会覆盖每个语言构造，但我们会讲解足够的内容，帮助你使用这些语言编写各种查询。
- en: '![](img/0f5de7bb441237afcc827578b43efc02_3.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f5de7bb441237afcc827578b43efc02_3.png)'
- en: To understand how X-Path works， it's good to think of the XML as a tree。 So
    I'd like you to bear with me for a moment while I write a little bit of a tree
    that would be the tree encoding of the bookstore data that we've been working
    with。 So we would write as our root the bookstore element。 and then we'll have
    sub-elements that would contain the books that are the sub-elements of our bookstore。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 为了理解 X-Path 如何工作，我们可以将 XML 看作一棵树。所以我希望你能稍微耐心等待，我将稍微绘制一下树结构，表示我们正在处理的书店数据的树编码。我们会将书店元素作为根节点，然后会有子元素，包含书店的书籍。
- en: We might have another book。 We might have over here a magazine。 And within the
    books， then we had。 as you might remember， some attributes and some sub-elements。
    We had， for example， the ISBN number。 We had a write as an attribute here。 We
    had a price。 And we also had， of course。 the title of the book。 And we had the
    authors， excuse me， over here。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能还有另一本书。也许这边有一本杂志。而在这些书籍中，你可能还记得我们有一些属性和子元素。例如，我们有 ISBN 号码。我们有作为属性写出的内容。还有价格。当然，还有书名。我们当然还列出了作者信息。
- en: I'm obviously not going to be filling in the sub-element structure here。 We're
    just going to look at one book as an example。 The ISBN number we now are at the
    leaf of the tree。 so we could have a string value here to denote the leaf， maybe
    100 for the price， for the title。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，我不会在这里填充所有的子元素结构。我们这里只看一本书作为示例。ISBN 号码位于树的叶子节点处。所以我们可以在这里放一个字符串值来表示这个叶子节点，也许是价格为
    100，或者是标题。
- en: a first course in database systems。 Then our authors had further sub-elements。
    We had maybe two authors sub-elements here。 I'm abbreviating a bit below here，
    a first name。 and a last name again， abbreviating。 So that might have been Jeff，
    Omen， and so on。 I think you get the idea of how we render our XML as a tree。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 一个数据库系统的初步课程。然后我们的作者有进一步的子元素。也许我们这里有两个作者子元素。我在下面做了一些简化，写了一个名字（first name）和姓氏（last
    name），再做一下简化。所以这里可能是杰夫（Jeff），奥门（Omen），等等。我想你大概明白了我们如何将XML呈现为树形结构。
- en: And the reason we're doing that is so that we can think of the expressions we
    have in X-Path as navigations down the tree。 Specifically， what XML consists of
    is path expressions that describe navigation down and sometimes across and up
    a tree。 And then we also have conditions that we evaluate to pick out the components
    of the XML that we're interested in。 So let me just go through a few of the basic
    constructs that we have in X-Path。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们这么做的原因是为了能够将X-Path中的表达式视为对树形结构的导航。具体来说，XML的组成部分是描述在树形结构中向下导航，有时也涉及横向和向上导航的路径表达式。然后，我们还会有一些条件，用来评估并选择我们感兴趣的XML组件。所以让我简单介绍一下X-Path中的一些基本构造。
- en: Let me just erase a few of these things here that got in my way。 I'm going to
    use this little box and I'm going to put the construct in and then sort of explain
    how it works。 So the first construct is simply a slash。 And the slash is for designating
    the root element。 so we'll put the slash at the beginning of an X-Path query to
    say we want to start at the root。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我擦去这些阻碍我讲解的东西。我将使用这个小框，将构造放进去，然后解释它是如何工作的。第一个构造就是简单的斜杠。斜杠用于指定根元素。所以我们会在X-Path查询的开头加上斜杠，表示我们希望从根元素开始。
- en: A slash is also used as a separator。 So we're going to write paths that are
    going to navigate down the tree and we're going to put a slash between the elements
    of the paths。 All of this will become much clearer in the demo， so I'll try to
    go fairly quickly now so we can move to the demo itself。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 斜杠也可以作为分隔符使用。因此，我们将编写路径，以便在树形结构中进行导航，并且在路径的各个元素之间加上斜杠。所有这些在演示中会变得更加清晰，所以我现在会尽量快点讲解，以便我们能尽快进入演示部分。
- en: The next construct is simply writing the name of an element。 I've put X here，
    but we might。 for example， write book。 When we write book in an X-Path expression。
    we're saying that we want to navigate， say if we're up here at the bookstore。
    down to the book sub element as part of our path expression。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个构造就是简单地写出元素的名称。我在这里写了X，但我们可以写出其他的名称，比如书本（book）。当我们在X-Path表达式中写出书本（book）时，我们的意思是希望导航到书本子元素，作为我们路径表达式的一部分。
- en: We can also write the special element symbol star and star matches anything。
    So if we write slash star， then we'll match any sub element of our current element。
    When we execute X-Path， there's sort of a notion as we're writing the path expressions
    of being at a particular place。 So we might have navigated from book sort of book，
    and then we would navigate， say。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以编写特殊的元素符号星号，星号可以匹配任何内容。所以如果我们写上斜杠星号，那么我们将匹配当前元素的任何子元素。当我们执行X-Path时，在编写路径表达式时，实际上有一种概念是我们处在某个特定的位置。所以我们可能已经从书本类型（book）导航到了这里，然后我们会继续导航，比如说……
- en: further down to title， or if we put a star， then we'd navigate to any sub element。
    If we want to match an attribute， we write at and then the attribute name。 So，
    for example。 if we're at the book and we want to match down to the ISBN number。
    we'll write ISBN in our query or path expression。 We saw the single slash for
    navigating one step down。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 继续向下导航到标题（title），或者如果我们写一个星号（*），那么我们将导航到任何子元素。如果我们想匹配一个属性，我们会写`@`符号，然后是属性名称。例如，如果我们在书本元素下，想要匹配到ISBN号，我们会在查询或路径表达式中写出ISBN。我们看到单斜杠是用于导航一步。
- en: There's also a double slash construct。 The double slash matches any descendant
    of our current element。 So， for example， if we're here at the book and we write
    double slash， we'll match the title。 the authors， the author， the first name，
    and the last name， every descendant。 And actually。 we'll also match ourself。 So
    this symbol here means any descendant。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个双斜杠构造。双斜杠会匹配当前元素的任何后代元素。例如，如果我们在书本元素下，写上双斜杠，我们将匹配标题、作者、作者的名字和姓氏等每一个后代元素。实际上，我们也会匹配到自身。所以这个符号意味着任何后代元素。
- en: including the element where we currently are。 So now I've given them a flavor
    of how we write path expressions。 Again， we'll see lots of them in our demo。 What
    about conditions？
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 包括我们当前所处的元素。所以现在我已经让你们对如何编写路径表达式有了一些了解。再次强调，我们将在演示中看到很多这样的表达式。那么条件又该如何编写呢？
- en: If we want to evaluate a condition at the current point in the path。 we put
    it in a square bracket and we write the condition here。 So， for example。 if we
    wanted our price to be less than 50， that would be a condition we could put in
    square brackets if we were actually better be the attribute。 if we're at this
    point in the navigation。 Now， we shouldn't confuse putting a condition in a square
    bracket between -- with putting a number in a square bracket。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想在路径中的当前位置评估一个条件，我们需要将它放在方括号中，并在其中写下条件。例如，如果我们希望价格小于 50，这就是我们可以放入方括号中的条件，前提是我们实际上是在属性中。如果我们在导航的这一点上，现在我们不应将方括号中的条件与方括号中的数字混淆。
- en: If we put a number in a square bracket， n， for example， if I write 3， that is
    not a condition。 but rather it matches the nth sub element of the current element。
    For example。 if we were here at authors and we put off square bracket 2。 then
    we would match the second off sub element of the authors。 There are many。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在方括号中写入一个数字，例如写 3，这不是一个条件，而是匹配当前元素的第 n 个子元素。例如，如果我们在“authors”节点上，并且我们写方括号
    2，那么我们将匹配“authors”节点下的第二个子元素。还有许多其他的构造。
- en: many other constructs。 This just gives the basic flavor of the constructs for
    creating path expressions and evaluating conditions。 X-Path also has lots of built-in
    functions。 I'll just mention two of them as somewhat random examples。 There's
    a function that you can use in X-Path called "contains"。 If you write "contains"
    and then you write two expressions。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是给出了构造路径表达式和评估条件的基本示例。X-Path 还包含很多内置函数。我将随机举出两个例子。有一个函数叫做“contains”（包含）。如果你写“contains”，然后写两个表达式，
- en: each of which has a string value -- this is actually a predicate --。 will return
    true if the first string contains the second string。 As a second example of a
    function。 there's a function called "name"。 If we write "name" in a path。 that
    returns the tag of the current element in the path。 We'll see the use of functions
    in our demo。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 每个轴都有一个字符串值——这实际上是一个谓词——如果第一个字符串包含第二个字符串，它将返回 true。作为第二个函数的例子，有一个叫做“name”的函数。如果我们在路径中写入“name”，它将返回当前元素的标签名。我们将在演示中看到函数的应用。
- en: The last concept that I want to talk about is what's known as "navigation axes"。
    There's 13 axes in X-Path。 What an axis is is sort of a keyword that allows us
    to navigate around the XML tree。 For example， one axis is called "parent"。 You
    might have noticed that when we talked about the basic constructs。 most of them
    were about going down a tree。 If you want to navigate up the tree。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我想谈的最后一个概念是被称为“导航轴”（navigation axes）的内容。X-Path 中有 13 个轴。轴实际上是一个关键词，允许我们在 XML
    树中进行导航。例如，一个轴被称为“parent”（父元素）。你可能已经注意到，当我们谈到基本构造时，大多数内容是关于向下遍历树的。如果你想向上遍历树，
- en: then you can use the parent axis that tells you to go up to the parent。 There's
    an axis called "following sibling"。 You'll see how that works when we get to the
    demo。 The following sibling says "match" -- all of the following siblings of the
    current element。 If we have a tree and we're sitting at this point in the tree。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 那么你可以使用父元素轴，它会告诉你返回到父元素。有一个叫做“following sibling”（后续兄弟）的轴。你将在我们的演示中看到它是如何工作的。后续兄弟轴的作用是“匹配”——匹配当前元素的所有后续兄弟元素。如果我们有一棵树，并且我们正处于树的某个位置，
- en: then the following sibling axis will match all of the siblings that are after
    the current one in the tree。 There's an axis called "descendants"。 Descendants，
    as you might guess。 matches all of the descendants of the current element。 It's
    not quite the same as "slash/slash" because as a reminder。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，后续兄弟轴会匹配树中当前元素之后的所有兄弟元素。还有一个叫做“descendants”（后代）的轴。后代轴，顾名思义，匹配当前元素的所有后代。这与“slash/slash”不完全相同，因为需要提醒的是，
- en: '"slash/slash" also matches the current element as well as the descendants。
    Actually， as it happens。 there''s a navigation axis called "descendants and self"
    that''s equivalent to "slash/slash"。 By the way， there''s also one called "self"
    that will match the current element。 And that may not seem to be useful， but we''ll
    see uses for that， for example。'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: “slash/slash”（斜杠/斜杠）也会匹配当前元素及其后代。实际上，X-Path 中有一个导航轴叫做“descendants and self”（后代和自身），它等同于“slash/slash”。顺便提一下，还有一个叫做“self”（自身）的轴，会匹配当前元素。这个轴可能看起来没有什么用处，但我们将在示例中看到它的应用场景，
- en: in conjunction with the name function that we talked about up here。 that would
    give us the tag of the current element。 Just a few details to wrap up。 XPath queries
    technically operate on and return a sequence of elements。 That's their formal
    semantics。 There is a specification for our XML documents and XML streams mapped
    to sequences of elements。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 结合我们之前讨论过的 `name` 函数，这将给我们当前元素的标签。最后补充一些细节。技术上，XPath 查询是在元素序列上操作并返回结果。这是它们的正式语义。对于
    XML 文档和 XML 流，有一个规范将它们映射为元素序列。
- en: and you'll see that it's quite natural。 When we run an XPath query。 sometimes
    the result can be expressed as XML， but not always， but as we'll see again。 that's
    fairly natural as well。 So this video has given an introduction to XPath。 We've
    shown how to think of XML data as a tree， and then XPath as expressions that navigate
    around the tree and also evaluate conditions。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现这非常自然。当我们运行 XPath 查询时，有时结果可以表示为 XML，但并不总是如此，不过正如我们接下来会看到的那样，这也是相当自然的。因此，这个视频介绍了
    XPath。我们展示了如何将 XML 数据视为一棵树，然后将 XPath 看作是穿梭在树中的表达式，也可以用来评估条件。
- en: We've seen a few of the constructs for path expressions， for conditions。 We've
    seen a couple of built-in functions， and I've introduced the concept of navigation
    axes。 But the real way to learn and understand XPath is to run some queries。 So
    I urge you to watch the next video， which is a demo of XPath queries over our
    bookstore data。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看过了一些路径表达式的构造方式，以及条件部分。我们也看过了一些内建函数，并且我介绍了导航轴的概念。但是，学习和理解 XPath 的真正方法是运行一些查询。所以我强烈建议你观看下一个视频，它展示了如何在我们的书店数据上运行
    XPath 查询。
- en: and then try some queries yourself。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后自己尝试一些查询。
- en: '![](img/0f5de7bb441237afcc827578b43efc02_5.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/0f5de7bb441237afcc827578b43efc02_5.png)'
