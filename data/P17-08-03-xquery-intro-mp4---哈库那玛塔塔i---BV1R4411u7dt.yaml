- en: P17：08-03-xquery-intro.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P17：08-03-xquery-intro.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
- en: This video gives an introduction to the XQuery query language for XML。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本视频介绍了 XQuery 查询语言在 XML 中的应用。
- en: '![](img/ebfd479f6b6b62d703890d11d2da0056_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebfd479f6b6b62d703890d11d2da0056_1.png)'
- en: As a reminder， querying XML is not nearly as mature as querying relational databases。
    It's much newer， and there's no clean underlying algebra that's equivalent to
    the relational algebra。 The sequence of development of XML query languages started
    with XPath， which we've already covered。 Then XSLT， which we'll be covering later，
    and in this video and the subsequent demo。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 提醒一下，查询 XML 并不像查询关系数据库那样成熟。它要新得多，而且没有像关系代数那样清晰的基础代数。XML 查询语言的发展序列始于 XPath，我们已经讲解过。然后是
    XSLT，我们将在后面讲解，在本视频及随后的演示中。
- en: we'll be covering the XQuery language。 XQuery is an expression language。 also
    known as a compositional language。 We've seen that already with relational algebra。
    What that means is when we run an expression of the language on a type of data。
    the answer to that expression or query is the same type of data。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将介绍 XQuery 语言。XQuery 是一种表达式语言，也被称为组合语言。我们已经在关系代数中看到过这一点。它的意思是，当我们在某种数据类型上运行该语言的表达式时，表达式或查询的答案将是相同类型的数据。
- en: So let me just draw the picture here。 We have some data。 We run an expression
    or a query over that data， and we get a result back。 And that result is also going
    to be in the same type of data。 That means we can run another query or expression
    over the same type of data that was the result of the previous one。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我在这里画一个图。我们有一些数据，我们对这些数据执行一个表达式或查询，然后得到一个结果。而这个结果也将是相同类型的数据。这意味着我们可以对同类型的数据再次执行查询或表达式，而这个数据是上一个查询结果。
- en: And again， we'll again get a result of the same type of data。 Now。 that also
    means that we can sort of put these together， and when we put them together。 that
    will give us additional expressions or queries that are valid in the language。
    When we talked about compositionality in the relational model。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我们将会得到相同类型数据的结果。现在，这也意味着我们可以将这些结果组合在一起，当我们将它们组合时，这将给我们提供在该语言中有效的附加表达式或查询。当我们讨论关系模型中的组合性时。
- en: the types of data we were using were relations。 We would have maybe some relations
    here。 We run a query over those relations。 The result itself is a relation。 And
    we can run further queries over that relation。 That's the answer。 And then when
    we looked at relational algebra， we saw composing the expressions of relational
    algebra into more complicated expressions and everything worked together。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的数据类型是关系。我们可能有一些关系在这里，我们对这些关系执行查询，结果本身也是一个关系。然后我们可以对这个关系执行进一步的查询。这就是答案。当我们查看关系代数时，我们看到将关系代数的表达式组合成更复杂的表达式，一切都能协同工作。
- en: In XML， it's similar， except the expressions operate on and return what are
    known as sequences of elements。 Now， we're not going to go into a great detail
    of this model。 As we mentioned for X-Path。 the sequences of elements can be generated
    from an XML document。 They can also be generated from an XML stream， and the interpretation
    is quite natural。 Now。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在 XML 中，它类似，除了表达式操作和返回的是被称为元素序列的内容。现在，我们不会深入详细讲解这个模型。正如我们之前提到的，对于 X-Path，元素序列可以从
    XML 文档中生成，也可以从 XML 流中生成，其解释非常自然。现在。
- en: let me mention that one of the basic types of expressions in X-Query is X-Path。
    So every X-Path expression is， in fact， an X-Query expression or a valid query
    in X-Query。 Then we can use X-Path and other constructs of X-Query to put together
    into more complicated queries。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我提一下，X-Query 中的一种基本表达式类型是 X-Path。因此，每个 X-Path 表达式实际上都是一个 X-Query 表达式，或者是 X-Query
    中有效的查询。然后，我们可以使用 X-Path 和 X-Query 的其他构造将它们组合成更复杂的查询。
- en: '![](img/ebfd479f6b6b62d703890d11d2da0056_3.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebfd479f6b6b62d703890d11d2da0056_3.png)'
- en: Now， one of the most commonly used expressions in X-Query is what's known as
    the flower expression。 And it looks closest to SQL of any of the constructs in
    X-Query。 Let me explain how it works。 We have up to five clauses in that flower
    expression， and that's where the FLWR comes from。 The first， the FLWR clause sets
    up what are known as iterator variables。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，X-Query 中最常用的表达式之一被称为花式表达式。它看起来是 X-Query 中最接近 SQL 的构造。让我解释一下它是如何工作的。我们在这个花式表达式中最多可以有五个子句，这就是
    FLWR 的来源。第一个，FLWR 子句设置了被称为迭代变量的内容。
- en: So the idea here is that in the FLWR clause， this expression is evaluated。 and
    it will produce potentially a set result。 And then the variable will be bound
    to each element of the set one at a time。 and then the rest of the expression
    will be evaluated for each element。 So in other words。 if this produces a set
    of n results， then we'll effectively evaluate the rest of the query n times。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里的想法是，在 FLWR 子句中，这个表达式会被计算，它可能会产生一个集合结果。然后，变量会一次绑定集合中的每个元素，接着会为每个元素计算其余的表达式。换句话说，如果它产生了一个包含
    n 个结果的集合，那么我们实际上会执行 n 次查询。
- en: We'll see that much more clearly when we do the demonstration。 The LET clause
    is more of a typical assignment， so it's only run once each time the rest of the
    query is run。 and so this expression is evaluated， and even if it's a set， it's
    assigned once to this variable。 so it's not iterating。 Now it's just doing an
    assignment。 Again。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进行演示时，这一点会更加清楚。LET 子句更像是典型的赋值操作，因此每次执行查询时，它只会执行一次。这个表达式会被计算，即使它是一个集合，它也只会被赋值一次给这个变量，所以它不会进行迭代。现在它只是进行一次赋值。再次强调。
- en: it'll become quite clear when we do the demonstration。 The WHERE clause specifies
    a condition。 and it's a filter very similar to the filters that we've seen in
    SQL。 The order by is also sort of similar to SQL。 It sorts the result so that
    you can get the result in a particular order。 And finally， the RETURN clause says
    what we want to actually get in the result of our query。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们进行演示时，这一点会变得非常清晰。WHERE 子句指定一个条件，它是一个类似于 SQL 中筛选器的过滤器。ORDER BY 也有点类似于 SQL，它对结果进行排序，以便你可以按照特定的顺序获取结果。最后，RETURN
    子句说明我们想要在查询结果中获得的内容。
- en: And just as a reminder， when we start the query with the four。 if we're effectively
    executing the query n times， then each one of those n executions may result in
    one of the elements in the result。 The FLOWER expression has up to five clauses，
    but actually all of the clauses except the RETURN clause are optional。 The RETURN
    is the only one that's required to have a well-formed query and to get a result。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 再提醒一下，当我们从四个部分开始查询时，如果我们实际上是执行查询 n 次，那么每次执行可能会返回结果中的一个元素。FLOWER 表达式最多有五个子句，但实际上除了
    RETURN 子句外，所有子句都是可选的。RETURN 是唯一一个必须包含的子句，它确保查询结构正确并返回结果。
- en: I also want to mention that the FOR/IN LET clause can be repeated multiple times
    if we want to set up multiple variables。 or multiple assignments， and they can
    be interleaved with each other。 They don't need to be in a particular order。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我还想提到，FOR/IN LET 子句可以多次重复，如果我们想设置多个变量或进行多次赋值操作，它们可以相互交替使用，顺序并不重要。
- en: '![](img/ebfd479f6b6b62d703890d11d2da0056_5.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebfd479f6b6b62d703890d11d2da0056_5.png)'
- en: In XQuery， it's possible to mix query evaluation with simply writing down the
    XML data that we want in the result。 And here's an example。 In this case， we're
    writing the opening and closing tags that we want to be in the result of our query。
    and then inside curly braces we write the query itself。 And what these curly braces
    effectively say are evaluate me。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在 XQuery 中，可以将查询评估与简单地写下我们希望在结果中得到的 XML 数据相结合。这里有一个例子。在这种情况下，我们编写了我们希望出现在查询结果中的开始和结束标签，然后在大括号内编写查询本身。实际上，这些大括号的意思是“执行我”。
- en: The curly braces are an indicator to the XQuery processor that what's inside
    them needs to be run as a query。 It's replaced with the XML that's the query result。
    and the final output is our opening and closing tags with the XML query result
    inside。 At this point， let's move ahead to the demo。 We'll once again be using
    our bookstore data and we'll do a sequence of XQuery examples over that data。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 大括号是 XQuery 处理器的指示器，表示里面的内容需要作为查询执行。它将被查询结果中的 XML 替换，最终的输出是我们希望的开始和结束标签，里面包含了
    XML 查询结果。在这一点上，我们继续进行演示。我们将再次使用我们的书店数据，并针对这些数据进行一系列 XQuery 示例。
- en: Again， we're not going to be comprehensive XQuery as a big language。 but we'll
    show the flavor of the language and a lot of its most useful constructs。 and we'll
    be able to write some quite powerful queries。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 再次说明，我们不会全面讲解 XQuery 作为一门庞大的语言。但我们会展示语言的风格以及它最有用的构造，我们将能够编写一些非常强大的查询。
- en: '![](img/ebfd479f6b6b62d703890d11d2da0056_7.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ebfd479f6b6b62d703890d11d2da0056_7.png)'
