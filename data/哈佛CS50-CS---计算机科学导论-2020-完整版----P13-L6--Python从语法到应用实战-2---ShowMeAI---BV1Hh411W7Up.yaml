- en: 哈佛CS50-CS ｜ 计算机科学导论(2020·完整版) - P13：L6- Python从语法到应用实战 2 - ShowMeAI - BV1Hh411W7Up
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈佛CS50-CS ｜ 计算机科学导论(2020·完整版) - P13：L6- Python从语法到应用实战 2 - ShowMeAI - BV1Hh411W7Up
- en: right thing instead well let me go ah**d，and open up another program here。also
    from week one this one was called，conditions。c，and this one give me one moment
    to open。this up on the left，this one here was a program whose，purpose in life
    was to get an in from。the user called x，get another called y and then it just，did
    this if。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 说得对，让我继续打开另一个程序。这也是来自第一周，这个程序叫做 conditions.c，给我一会儿时间打开它。在左边，这个程序的目的是从用户那里获取一个名为
    x 的输入，再获取一个名为 y 的输入，然后就这样做了。
- en: x less than y print out as much else if，x greater than y，print out as much and
    so forth let's go。ahead and translate this program into，the corresponding python
    code。using some of the syntax we've seen，already i'm going to go ah**d and save，this
    as conditions。pi。and i think i'm going to go ah**d and，keep using the library
    the cs50 library。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: x 小于 y 时打印出尽量多的内容，如果 x 大于 y，打印出尽量多的内容，以此类推。让我们继续将这个程序翻译成相应的 python 代码。使用我们已经看到的一些语法，我会把它保存为
    conditions.pi。我想我还会继续使用 cs50 库。
- en: so i don't have to worry about，those kinds of errors when casting bad。input
    to another so from cs50 import，getint and let me go ah**d and now get，an in from
    the user。in from the user，calling it y and i won't bother typing，comments this
    time just for time's sake。and now let me ask the question in c i，would have done
    if x less than y。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我不需要担心那些错误，当将坏输入转换到另一个时，从 cs50 导入 getint，让我继续获取用户输入。用户输入，称之为 y，这次我不打注释了，节省时间。现在让我问这个问题，在
    c 中我会这样做，如果 x 小于 y。
- en: python is a little more terse if x less，than y suffices but with a colon。under
    that i'm going to go ah**d and say，print x is less than y，than y，y，out，x is equal
    to y。and i think that's just about it i'm，going to go ah**d down here and run，python
    of conditions，indeed。time with 2，it again with 1，have worked，and let me point
    out one other thing i。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: python 如果 x 小于 y 的话就可以更简洁，但是要加上冒号。在那之后，我会说，打印 x 小于 y，y，x 等于 y。我想这差不多就是了，我会继续运行这个条件的
    python。时间用 2，再用 1，已经工作了，让我再指出一件事。
- en: mentioned earlier that you have this，just say，import the cs50 library if you
    don't，function names。that's totally fine but notice that the，ide is yelling at
    me at lines three and。four that getint is no longer recognized，that's because
    python supports this。feature when using other people's，libraries，is to say，you
    can't refer to getint anymore。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到过你只需说，导入 cs50 库，如果你不使用函数名称，这完全没问题，但注意到 ide 在第三和第四行对我大喊，getint 不再被识别，这因为
    python 支持这个特性，当使用其他人的库时，就是说，你不能再引用 getint。
- en: directly you have to more explicitly say，of，familiar dot，library just like a
    c。struct and call the function called，getint therein，so i can now go ah**d and
    rerun this。python of conditions。pi，is now working，again so which is better it
    depends i。mean if it's sort of more readable to，that's going to save you a lot
    of。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 直接你必须更明确地说，熟悉的点，库就像 c。结构并调用其中的函数，getint，所以我现在可以继续运行这个 python 的条件。pi，现在又可以工作了，所以哪个更好，这要看情况。我是说，如果它更易读，这将为你节省很多时间。
- en: keystrokes because you don't have to，keep typing cs50 dot cs50 dot。if though
    you're writing a pretty big，program and maybe you're using。two different libraries
    that both，implement a function called getint。you want to be able to distinguish
    one，from the other so you might want to just。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 按键操作，因为你不需要不断地输入 cs50.dot.cs50.dot。如果你在写一个比较大的程序，可能会使用两个不同的库，它们都实现了一个名为 getint
    的函数。你想能够区分它们，所以你可能想要这样做。
- en: import the libraries by their name，i've done here，which is known as name spacing
    name。spacing means that you can have two，identically named variables or functions。existing
    in two different name spaces，they don't collide，library。or some other library's
    name instead let，here，let me go ah**d and open up another file。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 按名称导入库，我在这里做了，这被称为命名空间。命名空间意味着你可以在两个不同的命名空间中有两个同名的变量或函数，它们不会冲突，库。或者其他库的名称，接下来，让我继续打开另一个文件。
- en: uh from week one this one was，agree。c and this program，prompted the user uh
    to input whether or。not they agree，and we checked a little curiously that，first
    week。using equals equals uh quote unquote y，or lowercase y，n，well how do we go
    about converting this。one let me go ah**d and give myself a，new file over here，i'll
    call it agree。pi in this case and。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 呃，这个是`同意`。C语言和这个程序提示用户输入他们是否同意，我们有点好奇地检查了第一周。使用`==`符号来检查`y`或小写的`y`、`n`，那么我们该如何转换这个呢？让我给自己一个新的文件，我将它命名为`agree.py`。
- en: it turns out we can solve this one in a，few different ways let me go ah**d and。start
    off by importing from cs50，uh gets int just because it's oh no get。string rather
    because it's convenient，let me go ah**d and get the user's input，via getstring。and
    ask them the same question do you，agree question mark with a space。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 结果我们可以用几种不同的方法来解决这个问题，让我先从导入cs50开始，**获得整型**只是因为它更方便，而不是`获得字符串`。让我继续通过`getstring`获取用户的输入，并问他们同样的问题：你同意吗？
- en: then let me check if s equals equals，quote unquote y，or s equals equals lowercase
    y。then i'm going to go ah**d and print out，agreed，else oh no l if，s equals equals
    uh capital n or。s equals equals lowercase n let me go，ahead and print out here，not
    quote unquote not agreed。and i think that should do it but，something's weird here，there's
    a few differences what strikes。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 那么让我检查一下，如果`s`等于`y`或`s`等于小写的`y`，然后我会继续打印出`同意`，否则如果`s`等于大写的`N`或`s`等于小写的`n`，让我在这里打印出`不同意`。我想这样应该可以，但有些地方有些奇怪，是什么让你觉得不同？
- en: you as，different from c what muscle memory，might you have to break now。when
    using conditions with multiple，boolean expressions，combined in this way and there's
    another。subtlety there's at least，two salient differences between c and，any thoughts
    in the chat or an air。i was going to say for this one instead，of using the symbols
    for the logical，directly。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，和C语言不同，你现在可能需要打破哪些肌肉记忆呢？在使用带有多个布尔表达式的条件时，结合这种方式还有另一个细微之处，C语言和Python之间至少有两个显著的区别，聊天室中有没有想法？我本来想说，对于这个，我们可以直接使用逻辑符号。
- en: yeah we can literally just type the，english word or if we want to express a。logical
    or so in c recall on the left we，would have done this vertical bar thing。which
    is fine you get used to it but，english sense，python took the approach of using
    more。frequently actual，english or english-like words that，actually do read left
    to right and。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我们可以直接输入英语单词，或者如果我们想表达逻辑或，在C语言中，左边我们会使用竖线的方式。虽然这样很好，你会习惯它，但从英语的角度来看，Python采用了使用更频繁的实际英语或类似英语的单词，这些单词确实是从左到右阅读的。
- en: indeed a theme is emerging here when you，read python code，it is closer to english
    than c is。because you don't trip over as much，punctuation each line of python
    code。tends to read a little more like an，english phrase or an english。sentence
    and there's one other subtlety，here on the left back in week one，the y's。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，在你阅读Python代码时，这里出现了一个主题，它比C语言更接近英语。因为你不会像在C语言中那样频繁被标点符号绊倒，每一行的Python代码更像是一个英语短语或句子，这里还有一个细微之处，回到第一周的左边，y的部分。
- en: and the ends this week i'm using double，quotes but to be honest，it actually
    doesn't matter i can。alternatively use single quotes anywhere，everywhere so long
    as i'm consistent。but in python there is no fundamental，difference between double
    quotes and，consistent。the reason being when we looked at the，data types that existed
    between。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本周结束时，我使用双引号，但说实话，其实并没有关系，我可以在任何地方使用单引号，只要保持一致。但在Python中，双引号和单引号之间没有根本性的区别。原因是我们在查看不同数据类型时发现的。
- en: c and now python absent from the list of，python data types，was char in python
    there is no such。thing as an individual char，string，even if it's just one character
    long，everything is a string。downside is we don't have it quite as，fine grain control
    upside is we get a，lot more features。with those string structures，as we've already
    seen with for instance，those。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在C语言中，Python数据类型列表中缺少的是字符，在Python中并没有单独的字符字符串，即使只有一个字符，一切都是字符串。缺点是我们没有那么细致的控制，优点是我们可以获得更多的功能。正如我们在第一周看到的那样。
- en: as well well let me go ah**d and i think，i can simplify this for instance suppose。i
    wanted to tolerate something like，not just y or y in uppercase or，tolerate。yes
    in uppercase or lowercase as well，well you could imagine just starting to，add
    to the code or s。equals equals yes or s，equals equals yes but wait a minute what。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，让我继续，我想我可以简化这一点，比如说我想容忍类似于，不仅是y或y的大写，或者容忍。是的的大写或小写，你可以想象开始逐步。添加代码或s等于等于yes或s等于等于yes，但等一下，这是什么。
- en: if the user is being a little sloppy and，what if i want to actually say like
    well。what if they're yelling or s equals，equals yes in all caps and there's a
    few。other permutations as well like，this is quickly devolving into quite the。mess
    but if at the end of the day you，really just want to detect，why or the word yes
    irrespective of。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户有点马虎，假设我想说，嗯。假如他们在喊，s等于等于yes，全大写，还有其他一些排列，比如说，这很快就变成了一团糟，但如果最终你真的只想检测，为什么或单词yes，无论。
- en: capitalization，i bet we can be pretty clever in python，here what if i，go ah**d
    and say if s is in。quote unquote y or yes，in fact i can borrow an idea from，earlier
    whereby i can use the squ*re。bracket notation to give me a list which，automatically，grow
    or shrink as you need it you don't。have to decide in advance how big it is，this
    preposition here in is a new，keyword in python。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 大小写，我敢打赌我们可以在Python中非常聪明，假如我，继续说如果s在。所谓的y或yes，实际上我可以借用之前的一个想法，我可以使用方括号符号来给我一个列表，它会自动根据需要增长或缩小，你不必提前决定它的大小，这个介词在是Python中的一个新关键字。
- en: that will literally answer that question，for me and we've used it before earlier。when
    i implemented speller，i said if the word is in my set of words。return true so
    if s in this list i'll，get back yeah uh，true or false based on the answer to。that
    question but again it's not，tolerating case but no big deal。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这将字面上回答我的问题，我们之前用过。当我实现拼写检查器时，我说如果单词在我的单词集合中。返回true，所以如果s在这个列表中，我将返回是的，嗯，基于这个问题的答案的真或假，但再说一次，这并不容忍大小写，但没什么大不了的。
- en: dot lower now i can say is the lower，case version of s no matter what the，human
    typed in。in this list of two values that means，now the user can type in，all caps
    in alternating caps in one's。capitalized letter or any other，permutation。![](img/ba5c84256d1c630ab124e64119667f77_1.png)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: dot lower现在我可以说是s的小写版本，无论人类输入了什么。在这个两个值的列表中，这意味着现在用户可以输入。全大写、交替大小写或其他任意排列。![](img/ba5c84256d1c630ab124e64119667f77_1.png)
- en: whatsoever all right so that then is our，conditions let me pause here to see
    if。there's any questions any questions or，confusion that we can clear up with。syntax
    with conditions boolean variables，of boolean values so a question came up。so in
    python we are allowed to use the，equals equal syntax to compare two，strings。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，那就是我们的条件，让我暂停一下，看看是否有。任何问题，任何问题或混淆，我们可以用条件的语法、布尔变量或布尔值来澄清。所以出现了一个问题。在Python中，我们可以使用等于的语法来比较两个字符串。
- en: yes so another really good catch in，python，there are no pointers underneath
    the。hood they're still addresses like your，memory hasn't gone anywhere but。![](img/ba5c84256d1c630ab124e64119667f77_3.png)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，所以在Python中还有一个非常好的捕捉，底层没有指针。它们仍然是地址，就像你的内存没有消失一样，但。![](img/ba5c84256d1c630ab124e64119667f77_3.png)
- en: underneath the hood all of that is now，managed for you，by the language itself
    so if you want to。conceptually compare，one string against another just as i did，here
    now on line seven。python will do the，quote unquote right thing for you you，don't
    need to regress。into using stir comp instead now just，this if，s dot lower in quote
    unquote n。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在底层，所有这些现在都由语言本身为你管理，因此如果你想。概念上比较，一个字符串与另一个字符串，就像我在这里做的，现在在第七行。Python会为你做“正确的事情”，你不需要回退。使用stir
    comp，而是现在只需，这个如果s.dot lower在所谓的n。
- en: or comma no we can achieve the same，result there，by doing the same technique
    other，questions or。all good here no all right well let me，go ah**d and open up
    another example。that you might recall we did a，it，uh good better and then best
    this one。involving just a cat meowing in some，form so let me go ah**d and open
    up。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 或者逗号，不，我们可以通过使用同样的技术实现同样的结果，其他问题或。都好吗？好吧，让我继续，打开另一个例子。你可能还记得我们做过，嗯，更好，然后最好，这个例子。涉及到一只猫在某种形式下叫，所以让我继续打开。
- en: from week one an example that was called，meow zero relatively straightforward，that
    simply did this。it simply meowed three times so suffice。![](img/ba5c84256d1c630ab124e64119667f77_5.png)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 从第一周开始，有一个叫做“meow zero”的例子，相对简单，它只是这样做。它简单地叫了三次，所以足够了。![](img/ba5c84256d1c630ab124e64119667f77_5.png)
- en: it to say now in python，it's pretty trivial to do something，three times like
    this i'm gonna go ah**d。![](img/ba5c84256d1c630ab124e64119667f77_7.png)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说现在在Python中，做三次这样的事情相当简单，我要去**继续**。![](img/ba5c84256d1c630ab124e64119667f77_7.png)
- en: and call this meow，dot pi and of course i can just do，something like print。meow
    and i can just copy paste that but，of course the whole point of this，example back
    in week one。was not to devolve and to just copy，paste surely there's a better
    way。and we've seen a better way this time if，in c，int，i get zero i less than three
    i plus plus。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后称这个文件为`meow.py`，当然我可以做类似`print(meow)`的操作，我可以复制粘贴，但当然这个例子在第一周的重点并不是退化为简单复制粘贴，肯定有更好的方法。我们这次看到了更好的方法，如果在C中是`int
    i=0; i<3; i++`。
- en: then in some curly braces we could have，done printf of meow，new line semicolon
    so that was the next。version of our meow code in c，but in python of course it's
    a little，more succinct i can just do four。i in range three print，quote-unquote
    meow so very similar in，spirit to our hello world of before。but again we don't
    have to include any，a main function，or we don't need any of those curly。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '然后在一些花括号中，我们可以做`printf`输出“meow”，新行分号，所以这是我们的`meow`代码在C中的下一个版本，但在Python中，当然更简洁，我可以只做`for
    i in range(3): print("meow")`，这在精神上与我们之前的“hello world”非常相似。但再次强调，我们不需要包含任何主函数，或者不需要那些花括号。'
- en: braces or semicolons if you like we can，just dive in and focus on，last time。evolved
    the meow program into having our，own helper function，our own function that actually
    uh。allowed us to create an abstraction on，top of meowing and that was in our third，version
    aka meow2。let me go ah**d and open up this version，in a tab and notice that this
    version。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 花括号或分号，如果你喜欢，我们可以直接深入并专注于上次。将`meow`程序演变为拥有自己的辅助函数，实际上允许我们在“meowing”之上创建一个抽象，这就是我们的第三个版本，即`meow2`。让我去**继续**并在标签中打开这个版本，注意这个版本。
- en: started to get a little involved because，one we needed a prototype at the top。because
    i now had a meow function at the，print meow，but to abstract that away as a new。helper
    function，and then i had this code here with a for，loop inside。well in python it's
    going to work out to，be a little simpler here too if i want。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 开始变得有点复杂，因为我们需要在顶部有一个原型。因为我现在有一个`meow`函数，打印“meow”，但为了将其抽象为一个新的辅助函数，然后我在这里有一段包含`for`循环的代码。好吧，在Python中，如果我想这样做，它会变得简单一点。
- en: to do something three times for i，meow，now of course meow doesn't yet exist
    so。i can solve that problem we've seen，earlier albeit quickly in speller that
    i。can define my own functions like meow，there's no more void because if you。don't
    want to have arguments in a，function just don't put them there。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在要做三次`meow`，当然`meow`还不存在。我可以解决这个问题，之前在拼写检查器中我们已经快速看到过，我可以定义自己的函数像`meow`，没有更多的`void`，因为如果你不想在函数中有参数，就不要放在那里。
- en: there's no return values specified in，python they're implicit instead so it's，suffices
    to do this。here now，i have a program that iterates three，times calling meow each
    time and meow is。defined down below，let me go ah**d and run this python of，traceback
    most recent call last there's。a problem on line two，of meow。pie because a name
    error name，meow is not defined。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中没有返回值指定，它们是隐式的，因此这样做就足够了。现在，我有一个程序，迭代三次，每次调用`meow`，而`meow`在下面定义，让我去**继续**并运行这个Python，追踪最近的调用发生错误，问题出现在`meow.py`的第二行，因为名称错误，名称`meow`未定义。
- en: now the language being used there by，python is a little different。from c's it's
    frankly a little more，human friendly but what just happened。what problem has arisen
    that i yet，haven't tripped over，until now，even if you've never programmed in。run
    help，50 yet what might be the uh the issue，there，uh if that function is not found
    when we。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用的语言在Python中与C的有些不同，坦率来说更人性化，但究竟发生了什么？出现了什么问题，我直到现在还没有遇到过，甚至如果你从未编程过，那可能是什么问题呢，如果找不到这个函数的话。
- en: are trying to call it because it's，described below when we are calling it。yeah
    so this is no prototype yeah，there's no prototype and it turns out in。python there
    isn't a notion of prototype，so unfortunately the solution we saw。in week one is
    not to just copy and，paste the first line up above and end it，with a semicolon。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 正在尝试调用它，因为它在下面描述，当我们调用它时。是的，所以这是没有原型的，实际上在Python中并没有原型的概念，所以不幸的是，我们在第一周看到的解决方案不是简单地复制粘贴上面的第一行并以分号结束。
- en: that's just not a thing i could do this，i could just move my meow function to，the
    top of the file。thereby defining the function first and，then using it last and
    that would，actually solve the problem。really help us，long term because you could
    probably，imagine a situation where this function。wants to call this function but
    this，function calls this one，and you just can't really neatly order。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是我可以做的事情，我可以把我的 meow 函数移动到文件顶部，从而首先定义函数，然后最后使用它，这实际上会解决问题。长期来看这会对我们很有帮助，因为你可能能想象一个情况，这个函数想调用那个函数，但那个函数又调用这个函数，而你根本无法整齐地排序。
- en: and it's just not going to be as，maintainable right recall that one of。the values
    of putting main at the top of，rc programs was that，any reasonable person who wants
    to。understand your code is probably going，they're not going to want to have to，looking
    for the。actual main code so it turns out in，python even though you don't need
    a main。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 而且这并不会像，维护起来那么方便。记住，把 main 放在 rc 程序顶部的一个价值在于，任何想理解你代码的合理人，可能他们不想去找实际的 main 代码。因此，事实证明，在
    Python 中，即使你不需要一个 main。
- en: function it's actually common to define，one nonetheless，it's going to be implemented
    with。something like this，and i'm just going to indent my code，below that there。so
    now i've defined main but i haven't，executed any code yet，on line 6 i've now defined
    meow but i。haven't executed any code yet，and i mean that literally if i run，python
    of meow now and hit enter。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，定义一个函数是很常见的，尽管如此，它会用类似这样的方式实现，我只需在下面缩进我的代码。因此，现在我已定义了 main，但我还没有执行任何代码。在第
    6 行，我现在定义了 meow，但我**还没有执行**任何代码，字面意思是如果我现在运行 Python 的 meow 并按下回车。
- en: i would hope to see meow meow meow，weird，but python is doing literally what
    i。told it to do i told it to define a，function called main and i told it to，define
    a function。called meow what i never told it to do，is to call either of those functions
    so，the simplest fix here。it's a little different from c and a，little weird is
    just call main is your，very last thought。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望能看到“喵喵喵”，奇怪，但 Python 正在字面上执行我**告诉**它做的事情。我告诉它定义一个名为 main 的函数，我还告诉它定义一个名为
    meow 的函数，但我从未告诉它去调用这两个函数。因此，这里最简单的解决办法是，最后调用 main，这有点不同于 C，稍微奇怪。
- en: in the file so define main up at the top，it to be，but call it all the way at
    the bottom。and let me go ah**d and now and run my，program and now voila，meow meow
    meow is back because i've。defined main i've defined mao，and now i am calling main
    now as an，aside you will very often see in。various documentation and tutorials，online
    a much，will have，you typing out this this achieves the。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在文件中，所以把 main 定义在顶部，调用它在底部。让我去**继续**现在运行我的程序，现在看，喵喵喵又回来了，因为我已经定义了 main，我已经定义了
    meow，现在我正在调用 main。顺便提一下，你会在各种文档和在线教程中，看到有很多情况需要你输入，这样就能实现。
- en: same goal but it's not strictly，necessary for our purposes this line of。code
    if you see it in any online，references or examples or books or，sections or the
    like。it is necessary only when you're，libraries，like your own cs50 library or
    your own。image blurring library or the like，it's not necessary when we're just。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 同样的目标，但这并不是严格必要的。如果你在任何在线参考、示例、书籍或章节中看到这行代码，它仅在你使用自己的库时是必要的，比如你自己的 cs50 库或你自己的图像模糊库，而在我们仅仅编写自己的单独程序时并不是必要的。
- en: writing individual programs of our own，so i'm going to go ah**d and keep mine。simple
    and literally just call main，and let me just wave my hand at why you。need that
    syntax otherwise，in this context but let me go ah**d and，modify this one last
    time。because recall that in c the last，version of my program，had me running meow
    and passing an input。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我打算去**继续**保持简单，字面上只调用 main，并让我解释一下为什么在这种情况下你需要这个语法，但让我去**继续**修改最后一次。因为回想一下，在
    C 中，我程序的最后版本让我运行 meow 并传递一个输入。
- en: because i defined meow was taking an，input like n，and then doing something like
    for int i。gets 0 i less than，n i plus plus and then inside of my，curly braces
    did i print meow。so that now i have a helper function，that i've invented，that
    takes one input in int called n and。it loops that many times and prints out，real
    nice，abstraction and that now my program is。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我定义的 meow 是接受一个输入，比如 n，然后做一些类似于 for int i。gets 0，i 小于 n，i 加 1，然后在我的大括号内，我打印
    meow。因此，现在我有了一个我发明的助手函数，它接受一个整数类型的输入 n，并循环那么多次，打印出非常好的抽象，这样我的程序就是。
- en: distilled it's just meow three times，and it doesn't matter how i implemented。meow
    i can do the same thing in python，an argument called，n i don't have to bother
    specifying its。type i can now say for i，in range of n and i can print meow that。many
    times and now i can get rid of my，loop in main and just say，meow three times and
    so same。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 精简了，就是喵三次，实施方式无所谓。我可以在python中做同样的事情，一个名为n的参数，我不必烦恼指定它的类型，我现在可以说对于i，范围在n中，我可以打印出喵那么多次，现在我可以去掉main中的循环，只说喵三次，依然如此。
- en: functionality if i run this a final time，meow meow meow，a，more sophisticated
    way by actually。giving myself now，some of my own actual uh helper，functions all
    right any questions then。on this progression，now we're not really seeing new python，syntax
    we're now just seeing a。translation of some actual past，c programs into python
    to show really。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 功能性如果我最终运行这个，喵喵喵，以更复杂的方式，实际上给自己一些实际的助手函数，好的，有任何问题吗？关于这个进程，现在我们并没有看到新的python语法，我们只是看到一些过去的c程序翻译成python，以便真正展示。
- en: anything on your end brian nothing here，all right well let's go ah**d and open，another
    version。from week one of a program called，positive。c，which was an opportunity
    back then not，function。called getpositiveint but it also，introduced us to the
    familiar do while。![](img/ba5c84256d1c630ab124e64119667f77_9.png)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你那边有什么，布莱恩？没有，好的，那我们继续打开另一个版本。来自第一周的一个程序，positive。c，那时这是一个机会，不是叫getpositiveint的函数，但它也让我们熟悉了do
    while。
- en: loop and unfortunately，we're going to take that away from you。now python does
    not have a do while loop。![](img/ba5c84256d1c630ab124e64119667f77_11.png)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 循环，不幸的是，我们将从你那里拿走这个。现在python没有do while循环。
- en: but it's of course a very useful thing，to be able to，do something while a condition
    is true。after all pretty much any time we've，gotten user input in the class。we've
    used do while so that we prompt，them at least once and then optionally。again and
    again and again，until they cooperate so let me go ah**d，and implement this in
    python now。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 但当然，能够在条件为真时做某事是非常有用的。毕竟，我们几乎每次在课堂上获取用户输入时，都使用了do while，这样我们至少提示他们一次，然后选择性地再次提示，直到他们合作。所以让我前进，现在在python中实现这个。
- en: in a file called positive。pi，and go ah**d here in positive。pi and，translate
    this thing。as follows let me go ah**d and uh from，cs50 import，getint let me go
    ah**d and define a。function called main so now i'm just，going to start to get
    into this habit。i'm going to go ah**d and give myself a，variable called i and
    call。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个名为positive。pi的文件中，我要前进，翻译如下：让我前进，从`cs50 import getint`开始，定义一个名为main的函数，现在我只是要开始养成这个习惯。我要前进，给自己一个变量i并调用。
- en: get positive int and then i'm just going，to go ah**d and print out i。keeping
    it nice and simple now i have to，implement，get positive int it doesn't need to
    take。any input so i'm not going to give it，any arguments，and now i have to do
    the do while thing。so the pythonic，way to do this in python is almost，always to
    deliberately induce。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 获取正整数，然后我只是要前进并打印出i，保持简单。现在我必须实现get positive int，它不需要任何输入，所以我不会给它任何参数，现在我必须做do
    while的事情。因此，pythonic的做法几乎总是故意诱发。
- en: an infinite loop and the idea being if，you want to do something again and again。just
    start doing it forever and then，break out of the loop，when you are ready to so
    what do i want。to do forever in this function well i，want to go ah**d and get，positive。integer
    and then i want to go ah**d on，the next line，than，0 thereby making it positive
    break。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 一个无限循环，想法是如果你想一直做某事，就开始永远这样做，然后在准备好时退出循环。那么在这个函数中我想永远做什么呢？我想前进，获取正整数，然后在下一行继续，直到大于0，从而使其为正，退出。
- en: and the last line of code here is going，to be to return，n so notice in c on
    the left。i did this do while thing i had to，declare n outside of the do while
    loop。because it had to be outside the curly，braces to be in scope，here，is actually
    a little bit different。oh yes i did screw up okay if，asked the actual question
    if n greater。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这里最后一行代码将返回n，所以请注意，左侧的c我做了这个do while的事情，我必须在do while循环外声明n，因为它必须在大括号外才能在作用域内，这里实际上有一点不同。哦，是的，我搞砸了。如果询问实际问题，如果n大于。
- en: than zero so what did i do actually，differently here on the right hand side。well
    notice i deliberately induce this，infinite loop on line 10 which just。means do
    the following forever，get int，if so，break out of the loop how do i break out。of
    the loop well notice that the，consistent，puts me back，in line with the original
    indentation。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 小于零，所以我实际上在右侧做了什么不同的呢？注意我故意在第10行引入了这个无限循环，这意味着永远执行以下操作：获取整数，如果满足条件，则跳出循环。我怎么跳出这个循环呢？注意，一致性使我回到了原来的缩进位置。
- en: return，lines up with the while loop which means，it's the first line of code
    that's。outside of that loop，in the past we would have had very，explicit curly
    braces now we rely only。on indentation，that then lets me return n so what are，some
    of the differences here one the do。while loop is completely gone but two，in python，that
    the moment you declare a variable。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 返回，与while循环对齐，这意味着它是该循环外的第一行代码。在过去，我们会有非常明确的花括号，现在我们只依赖缩进，这让我可以返回n。那么这里有什么不同呢？首先，do
    while循环完全消失了；其次，在Python中，当你声明一个变量时。
- en: it exists until the end，of that function you don't have to worry。about the nuance
    of declaring a variable，first like we did in c。up here and then returning it down
    below，the moment we execute this line of code，11 here。n suddenly exists for the
    entirety of，the remainder of that function。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 它存在于那个函数结束之前，你不需要担心像我们在C语言中那样先声明一个变量，然后在下面返回。当我们执行这一行代码11时，n突然在那个函数的剩余部分中存在。
- en: so even though we declared inside of the，loop so to speak as per the indentation，statement。![](img/ba5c84256d1c630ab124e64119667f77_13.png)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，尽管我们在循环内部声明了变量，正如缩进所示。![](img/ba5c84256d1c630ab124e64119667f77_13.png)
- en: here at the end of the program all right，let me pause there，and see if there's
    any questions or。confusion on，getting user input doing the equivalent，logically
    of do while。but doing it now in this more pythonic，way peter，in python are variables
    accessible。across functions or no，good question no so if you declare a，scoped。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序的最后，让我暂停一下，看看是否有任何问题或困惑，关于获取用户输入，做出与do while逻辑等价的操作，但现在以更Pythonic的方式。彼得，在Python中，变量是否可以跨函数访问？好问题，不可以。如果你声明了一个局部变量。
- en: so to speak to that function it is not，return it，and pass it as output to input
    or you。would have to define it for instance as，a a global variable，instead all
    right。well what else then might we translate，well recall from uh，recall from our
    earlier endeavors in。week one we played around with these。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，传递给那个函数并不是返回，而是将其作为输出传递给输入，否则你必须将其定义为全局变量。好吧，那么还有什么我们可以翻译的呢？回想一下，嗯，回想一下我们在第一周的早期工作中玩过这些。
- en: '![](img/ba5c84256d1c630ab124e64119667f77_15.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba5c84256d1c630ab124e64119667f77_15.png)'
- en: examples from mario and for instance we，wanted to print something out，of these。pyramids
    or these uh coins or these，little bricks on the screen。well here let me go ah**d
    and open up a，new file called mario。pi and i'm going。to transition away from always
    showing，the before and after and now just start。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 马里奥的例子，比如我们想从这些金字塔、硬币或小砖块中打印出一些东西。在这里，让我打开一个名为mario的文件，我将不再总是显示之前和之后，而是现在开始。
- en: to focus more on the python code that，you can always look back if you want at。the
    corresponding c versions，how do i go about printing out three，bricks like this
    vertically。well in python i might say something，like for i in，range of three quite
    simply。as we've done a few times already and，just go ah**d and print out a hash。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 更专注于Python代码，你总是可以回头看看相应的C版本。我怎么去打印出三个这样垂直的砖块呢？在Python中，我可能会说像for i in range
    of three一样简单。就像我们已经做过几次的那样，直接打印出一个哈希。
- en: i don't need to worry about the new line，because you get it for free so to speak。but
    i'm going to go ah**d now and run，python of mario。pi，version。of this mario structure
    but what if i。![](img/ba5c84256d1c630ab124e64119667f77_17.png)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我不需要担心换行，因为可以说这是免费获得的。但我现在要去运行这个马里奥的Python版本。那么如果我。![](img/ba5c84256d1c630ab124e64119667f77_17.png)
- en: want to do the coins instead，what if i want to do this horizontal。![](img/ba5c84256d1c630ab124e64119667f77_19.png)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 想要做硬币呢？如果我想做这个水平的。![](img/ba5c84256d1c630ab124e64119667f77_19.png)
- en: coins that appear in these four bricks，and print out an，uh version of that well
    how might i do。that well let me go ah**d and change，this to be，instead in my code
    for i in range of。four so i can print four of these things，let me go ah**d and
    print out a question。mark and then run this，so let me run mario。pie and voila，damn
    like not what i wanted and so。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 出现在这四个砖块中的硬币，并打印出一个，呃，版本的那个我该怎么做呢。那好吧，让我去啊**d**并把这个改成，在我的代码中对`for i in range
    of`四次循环，这样我可以打印出四个这样的东西，让我去啊**d**打印出一个问号，然后运行这个，所以让我运行mario。派对，瞧，天哪，这不是我想要的，所以。
- en: here's that trade-off right you might，have been kind of excited。so far as it's
    possible to be excited，about code uh that like oh my god you。don't need to do
    the stupid new line，characters anymore，but what if you don't want it now we've。kind
    of，found a downside of getting those new，lines automatically，well it turns out
    if we read the。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个权衡，你可能，已经有点兴奋。到目前为止，可能对代码感到兴奋，呃，像是哦，我的天，你。再也不需要做那些愚蠢的新行，字符了，但如果你现在不想要它，我们。算是发现了获取那些新行的一个缺点，事实证明如果我们读取。
- en: python，what's，powerful about python 2 is that it，supports not just positional
    arguments。where you just do a comma，separated list of multiple arguments to，called。named
    arguments whereby if a function，like print，takes multiple inputs like uh this
    one。this other one and this other thing，each of those inputs can have names and。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: python，python 2强大之处在于它，不仅支持位置参数。你只需用逗号分隔多个参数进行调用。命名参数，如果一个函数，比如print，接受多个输入，比如这个，那个和这个其他东西，每个输入都可以有名字。
- en: you the user of that function，that，print in python supports an argument。called
    end and you can explicitly say，what value you want to give to that。parameter by
    mentioning its name，and here i'm going to literally do this。i'm going to tell
    the print function，an argument to it，to be quote unquote the reason for that。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你是那个函数的用户，print在python中支持一个参数。叫做end，你可以明确地说，想给这个。参数什么值，通过提到它的名字，在这里我将字面上这样做。我要告诉print函数，给它一个参数，内容是引号中的内容，原因在于。
- en: is that if i read the documentation，the default is actually this if you read。the
    documentation it will tell you，print default value for its end argument。is backslash
    n this two is a feature，that c did not have，c did not have optional arguments。they're
    either there or they're not，uh rather they either have to be there，or they cannot
    be there。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我阅读文档，默认其实是这个，如果你阅读。文档会告诉你，print的结束参数的默认值。是反斜杠n，这两个是c没有的特性，c没有可选参数。它们要么存在，要么不存在，呃，确切地说要么必须存在，要么不能存在。
- en: python supports optional arguments that，even have default values。and so in this
    case the default value of，this per the documentation is that end，why。every line
    ends with that value if you，want to change that to be nothing the，so-called empty
    string。you change it to quote unquote so let me，go ah**d and run this now and
    voila。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: python支持可选参数，甚至有默认值。所以在这种情况下，文档中的默认值是，这个结束，为什么。每一行都以那个值结束，如果你，想把它改成什么都没有，也就是所谓的空字符串。你把它改成引号里的内容，所以让我去啊**d**现在运行这个，瞧。
- en: closer it's a little stupid looking，because now my cursor ended up my。my prompt
    ended up on the same line so，maybe after this line let me just go。ahead and print
    nothing that is，a new line and now if i run mario。pi，voila。now i get the effect
    i want and if you，want to see what's really going on here。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 更近了一点，有点傻，因为现在我的光标结束了我的。提示符也在同一行，所以，也许在这行之后让我就去。打印没有，即是换行，现在如果我运行mario。派对，瞧。现在我得到了我想要的效果，如果你想看看这里到底发生了什么。
- en: i can do something stupid like hello，and now i can end every print。with hello
    hello hello hello right not，means，that expression，but the correct version of course
    is。just to blank it out。![](img/ba5c84256d1c630ab124e64119667f77_21.png)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以做一些傻事，比如hello，现在我可以在每次打印中结束。用hello hello hello hello，这并不意味着，那表达式，但正确的版本当然是。只需将其清空。![](img/ba5c84256d1c630ab124e64119667f77_21.png)
- en: in this way but here's something that's，kind of cool and this is where if you're，kind
    of a geek like。life starts to get really interesting，fast i can actually change
    my python。![](img/ba5c84256d1c630ab124e64119667f77_23.png)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式，但这里有一些很酷的事情，如果你，像我一样是个极客，生活开始变得非常有趣，我实际上可以改变我的python。![](img/ba5c84256d1c630ab124e64119667f77_23.png)
- en: code to print out these four question，marks in the sky，to be quite simply print
    quote unquote。![](img/ba5c84256d1c630ab124e64119667f77_25.png)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 代码以在天空中打印出这四个问号，简单来说就是打印引号中的内容。![](img/ba5c84256d1c630ab124e64119667f77_25.png)
- en: this program，boom done and here's where again you're，getting a lot of。features
    in the language where you don't，to think about，a lot of syntax if you want to
    take a。question mark and do it four times，you can literally use the star operator，which
    has been overloaded。numbers，but also automatic concatenation if you，will，with
    strings in this way so let me go。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序，完成了，这里再次展示你获得了很多语言特性，你不需要思考很多语法。如果你想把问号做四次，你可以真的使用星号操作符，它被重载了。数字，但也自动连接，如果你愿意的话，用字符串的方式，所以让我去。
- en: ahead and do one final version from，mario recall that the last thing we，something
    like this。let me go ah**d and change my mario code，now to be for i in range of
    three。because this is a three by three grid of。![](img/ba5c84256d1c630ab124e64119667f77_27.png)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 前进，做一个最终版本，记得上次我们做了这样的事情。让我去更改我的马里奥代码，现在是为`i`在三的范围内。因为这是一个三乘三的网格。![](img/ba5c84256d1c630ab124e64119667f77_27.png)
- en: bricks let's say，and let's go ah**d now and inside of，this loop do another。nested
    loop where i do three，columns as well and in here i want to，print out a single
    hash at a time。but i don't want to print out a new line，i only want to print out
    a new line。here so it turns out that essentially，because python gives you the
    backslash，ends for automatically。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 砖块，假设我们现在进入这个循环，做一个嵌套循环，在这里我想要一次打印一个哈希。可是我不想换行，只想在这里换行，结果是，基本上因为Python会自动给你反斜杠结束符。
- en: essentially any logic you wrote in the，past now needs to be reversed if you。ever
    printed a new line now you，don't want to print a new line and if，you ever didn't
    print a。new line now you do in some sense so let，me go ah**d and uh，not make wrong
    language python of mario。dot pi and voila，my three by three grid so this is to
    say，that in python。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 本质上，你过去写的任何逻辑现在需要被反转。如果你曾经打印过换行，现在你不想打印换行；如果你以前没有打印过换行，现在在某种意义上你要打印，所以让我去，不要在马里奥.py中写错Python代码，瞧，我的三乘三网格，这意味着在Python中。
- en: we can nest loops just like we did in c，i can use multiple variable names like
    i。and j being conventional there's no。![](img/ba5c84256d1c630ab124e64119667f77_29.png)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以嵌套循环，就像我们在C中做的那样，我可以使用多个变量名，比如`i`和`j`是常规的，没有。![](img/ba5c84256d1c630ab124e64119667f77_29.png)
- en: again the logic，the ideas are still the same it just，to，for instance uh some
    of the new syntax。all right questions on，mario or on loops or on recreating these，programs
    as well。any questions or confusion that we can，now well let me go ah**d and do，recall
    that in。c we ran into a problem pretty early on，with integers and let me create
    a。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 再次逻辑，想法还是一样，只是例如一些新的语法。关于马里奥或者循环或重建这些程序有什么问题吗？现在有没有问题或者困惑？让我去回忆一下，在C中我们很早就遇到了一个整数问题，让我创建一个。
- en: program here called int dot pi，and let me initialize a variable called，i to
    one。and let me go ah**d and do this forever，let me do this forever inside of a
    while。true block let me print out whatever i，one，to i on each iteration let me
    go ah**d。and run this program，and let me increase the size of my，window for now
    and just run this thing。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的程序叫做int.py，让我初始化一个名为`i`的变量为1。让我继续在一个`while true`块中做这个，让我在每次迭代中打印出`i`的值，从1到`i`。让我继续运行这个程序，让我扩大我的窗口大小，然后运行这个东西。
- en: whoops that was mario，let me run this thing python，counting up。to infinity and
    honestly this is gonna，take a while you know what's faster than，counting by one。maybe
    multiplying by two so let me go，ahead and multiply by two instead。to kill the
    program just like in c i，used control c and that's why i see，keyboard interrupt。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，那是马里奥，让我在Python中运行这个程序，计数到无限，老实说这会花费一段时间。你知道什么比按一计数更快？也许是乘以二，所以让我改为乘以二。像在C中那样结束程序，我使用了控制C，所以我看到了键盘中断。
- en: '![](img/ba5c84256d1c630ab124e64119667f77_31.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba5c84256d1c630ab124e64119667f77_31.png)'
- en: it respected my wanting to cancel the，program let me rerun this now and just，count
    really big。and even though the internet's being a，little slow which is why it's
    a little，shaky。that's a really big number already if i，keep doubling i，what would
    have happened already at this。point if i were using c，to implement this program
    if in c i，declared a variable。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 它尊重我想取消程序的意图，让我现在重新运行这个，只是计数一个非常大的数字。尽管互联网有点慢，这就是为什么它有点不稳定。这个数字已经非常大，如果我继续加倍的话，如果在这一点上我使用C来实现这个程序，会发生什么。如果在C中我声明一个变量。
- en: called i and it was an int and i kept，and again，any thoughts yeah what would
    have。yeah i think it would have crashed，be taking，much memory good thought so
    it wouldn't，crash per se。something would go wrong it wouldn't，crash because it's
    still an ant and in c。at least it would still be taking up on，a typical computer
    32 bits or four bytes。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我称之为i，它是一个int类型，我不断地重复，如果有什么想法，嗯，我想它可能会崩溃，会占用很多内存。好想法，所以它不会真正崩溃。只是会出现问题，但不会崩溃，因为它仍然是一个int，在C语言中，至少在典型的计算机上仍会占用32位或四个字节。
- en: have started printing，zero by now or even negative numbers，c，is that integers
    are a finite size only。32 bits or four bytes which means if you，keep going from
    1，2 4 8 16 a million uh 2 million。4 million 8 million and so forth，billions，and
    as soon as you cross the 2 billion。threshold or maybe the 4 billion，threshold
    if using，assigned or unsigned numbers it's going。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 到现在为止可能已经开始打印零或负数，C语言中的整数是有限大小的，只有32位或四个字节，这意味着如果你不断从1、2、4、8、16、百万、二百万、四百万、八百万等等，一直到十亿，当你越过20亿的阈值，或者如果使用有符号或无符号数字，可能是40亿的阈值，情况就会变得复杂。
- en: to get too big you're going to have，integer overflow，overflow，not a thing anymore
    in the world of。python your numbers will get as big as，you need them to get they
    will，you。unfortunately floating point imprecision，still a thing so i only divided
    one by。two earlier but if i continue to divide，other values and i looked at enough。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 当数字变得过大时，你会遇到整数溢出。在Python的世界里，溢出已经不再是问题，你的数字可以变得和你需要的一样大。然而，不幸的是，浮点不精确仍然存在，所以我早些时候只将一除以二，但如果我继续除以其他值，我会发现足够多的。
- en: decimal points we would still suffer，unfortunately from floating point and。precision
    however in the world of python。![](img/ba5c84256d1c630ab124e64119667f77_33.png)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，在小数点方面，我们仍然会遭遇浮点和精度的问题。然而在Python的世界中，![](img/ba5c84256d1c630ab124e64119667f77_33.png)
- en: like in java and other languages there，are libraries scientific libraries that。allow
    you to use as much precision，as you need or at least as much memory，as your computer
    has。so those problems too have been better，solved in more modern languages than
    in。something out of the box，like c code but just by multiplying that，number again
    and again。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java和其他语言中，有科学库允许你根据需要使用尽可能多的精度，或者至少使用你计算机所拥有的尽可能多的内存。因此，这些问题在现代语言中得到了更好的解决，而不是像C语言那样需要一遍又一遍地乘以那个数字。
- en: larger numbers，than we ever saw in weeks past well let，me go ah**d and do another。program
    here this one called scores。pi，that's going to be an example of really。keeping
    track of scores which was an，the class，and in python i'm going to go ah**d and。give
    myself a list of scores like this，72 73 and 33，again sort of a playful reference
    to our。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 比我们之前几周看到的数字更大。好吧，让我继续进行另一个程序，这个程序叫做scores。pi，这将是一个真正跟踪分数的例子，这在课堂上，而在Python中，我将继续给自己一个这样的分数列表，72，73和33，再次是对我们的一种戏谑式的参考。
- en: ascii numbers but in this context，they're quiz score so two ok quiz scores。and
    one kind of low quiz score，assuming these things are out of like a。hundred but
    notice the syntax i'm using，squ*re brackets in python give me a list。i don't have
    to decide in advance how，big it is it's not an array per se but。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: ASCII数字，但在这个上下文中，它们是测验分数，所以两个测验分数和一个相对较低的测验分数，假设这些分数是从100分中得出的。但注意我使用的语法，方括号在Python中给我一个列表。我不需要提前决定它的大小，它不是数组，但。
- en: it's similar in spirit but it will，automatically grow or shrink。and the syntax
    is even simpler suppose i，want to average these scores in python i。could do something
    like this，i could print out that the average of，these scores is for instance。and
    then i could do something like this，i could do the sum，of scores divided by the
    length of，of new。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在精神上是相似的，但它会自动增长或缩小。而且语法甚至更简单。假设我想在Python中计算这些分数的平均值，我可以这样做，我可以打印出这些分数的平均值，比如说，然后我可以这样做，我可以把分数的和除以新列表的长度。
- en: already it turns out in python that，there is a sum，function that will take a
    list as input。and return to you，the sum of those items and we've seen，already
    there's a length function。l-e-n that tells you the length of a，list so if i add
    up all my scores。and then divide by the total number of，scores that should give
    me by definition。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明在Python中，有一个sum函数，可以接收一个列表作为输入，并返回这些项的和。而且我们已经看到有一个长度函数l-e-n，它告诉你列表的长度，所以如果我把我所有的分数加起来，然后除以总分数，这应该根据定义给我结果。
- en: my average so python of，scores dot pi voila oops uh what did i，do here，ah i
    screwed up so。unintended admittedly but let me try to，well this，error message
    is a little cryptic says。type error can only concatenate，stir not float to stir
    so long story，short python in this case。does not like the fact that i'm trying，to
    take a string，it，a float on the right so there's a couple。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 我的平均值，所以 Python 的分数点 pi 哇，哎，我在这里做了什么，我搞错了，所以显然不是故意的，但让我试试，这个错误信息有点隐晦，说明类型错误只能将字符串与浮点数连接。因此，长话短说，在这种情况下
    Python 不喜欢我试图将一个字符串与右侧的浮点数相结合，所以有几个。
- en: of ways i can solve this and we saw the，fundamental solution earlier if this。expression
    here that i've highlighted，is by definition mathematically a float。but i want
    it to become a string，i can just tell python convert that，float to a string。so
    much like there's the i2a function，that some of you discovered，which is the opposite
    of the a2i。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以用多种方法解决这个问题，我们之前看到了基本解决方案，如果这个我已经突出显示的表达式，按定义在数学上是浮点数。但是我希望它变成字符串，我可以直接告诉
    Python 将这个浮点数转换为字符串。因此，就像你们发现的 i2a 函数一样，它是 a2i 的相反。
- en: function i can take in python，in this case a float and convert it to a。string
    equivalent so now if i run python，of scores。i，voila my average is 59。3333 and
    you。already see a bit of imprecision，there's some rounding error at the end，there
    that is not a perfect。one-third but there's another way i，could do this and it's
    a little uglier。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，我可以接受一个浮点数并将其转换为字符串等价物，所以现在如果我运行分数的 Python，我的平均值是 59.3333，你已经看到了一些不精确，最后有一些舍入误差，实际上这不是一个完美的三分之一，但我还有另一种方法可以做到这一点，虽然有点丑陋。
- en: but i could use one of those，f strings i could say go ah**d and plug，in a value
    here。and just print out the user's average so，it turns out that inside of these
    curly。braces you don't have to print，entire，coding expressions and i would encourage。you
    not to paste crazy long lines of，code because it's going to very quickly，get unreadable。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我可以使用其中一个 f 字符串，我可以说继续并在这里插入一个值。然后直接打印用户的平均值，因此，事实证明在这些大括号内部，你不必打印整个编码表达式，我会鼓励你不要粘贴疯狂长的代码行，因为那样会很快变得难以阅读。
- en: at that point you probably should use a，variable but here i can go ah**d and
    run，python of scores。pi and voila，i screwed up again also not intentional，but
    i can fix this。yeah i'm missing the uh the f at the，string，answer，so again i have
    multiple approaches。there's a third one here i could do，stir，in that context because
    now if it's。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在那时你可能应该使用一个变量，但在这里我可以继续运行分数的 Python。pi，哇，我又搞错了，这也不是故意的，但我可以修复这个。是的，我遗漏了字符串答案中的
    f，所以我又有了多种方法。这里还有第三种我可以在那种情况下做的方式。
- en: inside of a format string，python will presume that i want to，that's nice。or
    i can just factor this out and i can，say something like this give me a。variable
    called average assign it equal，average，so again just like in c so many。different
    ways to solve the problem and，which one is best，depends really on what might be
    most。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在格式字符串内部，Python 会假设我想要这样，这很好。或者我可以把这个提取出来，我可以说类似于这个，给我一个变量叫 average，并将其赋值为 average。因此，就像在
    C 语言中，解决这个问题有很多不同的方法，而哪一个是最好的，实际上取决于什么可能是最。
- en: readable most maintainable，or easiest to do let me go ah**d and add，some scores
    dynamically now。instead of hard coding my three scores，let me ask myself for my
    scores over the，course of a semester。from cs50 let me import get int just so，i
    can get some numbers easily。let me give myself an empty list of，scores the syntax
    for which is just open。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 可读性最强、最易维护或者最简单的方法，让我继续动态添加一些分数。现在不再是硬编码我的三分数，让我问自己在整个学期内的分数。从 CS50 导入 get_int，以便我可以轻松获得一些数字。让我给自己一个空的分数列表，其语法就是打开。
- en: bracket close bracket so，nothing inside of it initially and now。let me go ah**d
    and do this let me get，of the term now，for i in range of three let me go ah**d。and
    append，value，of getint is like this now this too i，could do in a bunch of ways
    let me get。rid of this here，um whoops no we'll leave that there this，what i'm
    doing。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 括号关闭，所以最开始里面什么也没有。现在让我继续这样做，让我获取这个术语，现在，范围在三之内，我可以继续并附加，get_int 的值是这样的，现在我也可以用很多方式做到这一点。让我把这里的这个去掉，嗯，哎，不，我们还是留着这里，我正在做的事情。
- en: i'm getting int and i'm passing the，return value of int，to a new function called
    append it turns。out that lists the squ*re brackets，once you've defined them in
    a variable。like scores they too have functions，append，in order to add a number
    to the list so。now let me go ah**d and run this python，of scores dot pi，let me
    manually type in my 72 my 73 and。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我得到一个整数，并将整数的返回值传递给一个名为`append`的新函数。事实证明，列表使用方括号，一旦你在一个变量中定义了它们，例如`scores`，它们也有`append`函数，以便将数字添加到列表中。现在让我去运行`python
    of scores.dot pi`，手动输入我的72和73。
- en: my 33 and voila。![](img/ba5c84256d1c630ab124e64119667f77_35.png)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 我的33，瞧！. ![](img/ba5c84256d1c630ab124e64119667f77_35.png)
- en: say make the exact answer but think，about how much of a pain this would have，been
    in c。if you had to either decide and advance，the size of the array or not decided
    in。advance and use malloc，and re-alloc to keep growing and，function。which comes
    inside of that list variable，handles all of this automatically for us，of features。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 说到得到确切的答案，但想想如果在C中你必须提前决定数组的大小，或者不提前决定并使用`malloc`和`realloc`来不断增长，这将是多么麻烦。这个列表变量中的函数会自动处理这一切，为我们提供功能。
- en: any questions though that i can answer，um yeah i had a question about um。so
    even a pen even if a pen like，to write，does it underneath the hood just do，like。malloc
    and reallock or something like，that like is that all is that happening。inside
    python yeah that's exactly what，the language，all of that malloc stuff reallock
    stuff。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 不过有任何问题我可以回答吗？嗯，是的，我有一个问题。即使是写作的笔，它的底层是否只是做像`malloc`和`realloc`这样的事情？这一切在Python内部发生吗？是的，语言确实这样，所有的`malloc`和`realloc`的内容。
- en: maybe it's implemented with an，array underneath the hood like in the，linked
    list。like we saw last week but all of that is，happening for you but that again
    is one。of the reasons why the code。![](img/ba5c84256d1c630ab124e64119667f77_37.png)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 也许它的底层实现是一个数组，就像在链表中一样。正如我们上周看到的，但所有这些都是为你发生的，这也是代码的一部分原因。![](img/ba5c84256d1c630ab124e64119667f77_37.png)
- en: ultimately runs a little slower because，you have someone else's code in between。![](img/ba5c84256d1c630ab124e64119667f77_39.png)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 最终运行会慢一些，因为你有别人的代码在中间。![](img/ba5c84256d1c630ab124e64119667f77_39.png)
- en: bit of that work，are there efficiency differences in，between like the ways that
    we print。of like utilizing the f um like，formatting or，don't have to be。if i'm
    understanding correctly it's uh，there are some fancy features of it for。instance
    there is syntax you can use to，specify how many decimal points you want。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这其中有些工作，在我们打印的方式之间是否存在效率差异？比如说使用`f`格式化或不使用。如果我理解正确，确实有一些它的花哨功能。例如，有语法可以指定你想要多少小数位。
- en: to print after a floating point value，i percent，s percent f and so forth there's，fortunately。less
    of it since you don't have to worry，no all right well let me go ah**d and do。one
    other example that might be familiar，from some weeks past，let me go ah**d and
    whip up a quick。![](img/ba5c84256d1c630ab124e64119667f77_41.png)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在浮点值后打印时，我使用`%s %f`等等，幸运的是。由于你不必担心，确实减少了。好吧，让我再做一个可能熟悉的例子，来自几周前，让我快速准备一个。![](img/ba5c84256d1c630ab124e64119667f77_41.png)
- en: example of uppercasing just to tie，together one of our earlier examples。![](img/ba5c84256d1c630ab124e64119667f77_43.png)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 大写的例子只是为了将我们早期的一个例子联系在一起。![](img/ba5c84256d1c630ab124e64119667f77_43.png)
- en: casing，in this case a file called uppercase。pi，let me go ah**d and from the
    cs50。library let me go ah**d and import，getstring，and then once i have this let
    me go。ahead and get a string from the user and，ask them for，ahead and，do the following
    let me go ah**d and。print out after the goal being i want to，uppercase this whole
    string for the user。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，命名一个文件为`uppercase.pi`，让我从`cs50`库导入`getstring`，然后一旦我有了这个，让我去获取用户的字符串，并要求他们做以下事情，目标是我想将整个字符串转为大写。
- en: and i'm going to keep this all on the，that's going to print before。ask the human
    for some input and then，after show the capitalized version of，the whole string。so
    how can i do this well we've seen one，way already i can do literally。for instance
    s dot upper and let me go，ahead and save this and now run python，of uppercase。pi。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我将把所有内容保持在上面，这将在打印之前。询问用户一些输入，然后在之后显示整个字符串的大写版本。那么我该如何做到呢？我们已经看到了一种方法，我可以字面意思地做到。例如`s.dot
    upper`，让我继续保存这个，然后运行`python of uppercase`。
- en: let me type in high and lowercase and，version，but if you want you can actually。manipulate
    individual characters as well，let me go ah**d and a little more，pedantically do
    this。for cns print c，now this isn't quite what i want yet but，it's a stepping
    stone notice now if i。type in high and，case i see h i exclamation point，all still
    lowercase so i haven't done。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 让我输入高低写的版本，但如果你愿意，你实际上也可以操作单个字符，让我去 ah**d 细致一些。对于 cns 打印 c，现在这还不是我想要的，但它是一个跳板。注意现在如果我输入高低写，我看到
    h i 感叹号，所有的仍然是小写，所以我还没有完成。
- en: let me get rid of the，new line just so it all stays on the，same line because
    that was kind of ugly。let me do it again okay a little better，let me actually
    add a new line at the。very end of the program to move my，more，hi okay i'm not
    uppercasing anything。but if i change c to c dot upper，it again hi，and boom now
    i have another working。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 让我去掉换行，这样所有内容保持在同一行，因为那样有点丑。让我再试一次，好点了，实际上让我在程序的最后添加一个换行，让我的更多内容，好吧，我没有大写任何东西，但如果我把
    c 改为 c.upper，那我再次得到 hi，boom，现在我有另一个可工作。
- en: program but the new feature now，is notice this coolness on line five。if you
    want to iterate over a strings，initialize i，to zero and then use squ*re bracket。notation
    like you did，in c you just say for c and s or for，x in y whatever it is four can
    also be。used to iterate over the individual，to do when doing something，like cryptography
    or the like so we。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 程序，但现在的新特性是注意第五行的酷炫。如果你想遍历字符串，将 i 初始化为零，然后像在 c 中一样使用方括号表示法。你只需说 for c in s 或者
    for x in y，无论是什么，四也可以用来遍历个体，这在进行像密码学这样的事情时很有用。
- en: string all at once，we can still gain access to our，individual values。and there's
    other things you can do in，python as well that we could do in c。let me go ah**d
    and create a program，here called argv，was uh，the name of the input to main that。allows
    you to access command line，arguments now today we have seen that，don't need to。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一次性字符串，我们仍然可以访问我们的各个值。在 python 中还有其他你可以做的事情，类似于我们在 c 中能做的。让我去 ah**d 创建一个名为 argv
    的程序，它是输入到 main 的名称，允许你访问命令行参数。今天我们已经看到，这不需要。
- en: but it's conventional it's not required，anymore and so we don't we haven't seen。argc
    or rv yet but that's because，they're elsewhere in python，if you want to access
    command line。arguments in python，it turns out that you can import a，module called
    argv。and this is a little new but it follows，the same pattern as cs50s library。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 但这很传统，并不是必需的，所以我们还没有看到 argc 或 rv，但这是因为它们在 python 的其他地方。如果你想在 python 中访问命令行参数，结果是你可以导入一个名为
    argv 的模块。这有点新，但它遵循 cs50s 库的相同模式。
- en: i'm going to import from the system，library a feature called，with python。but
    to use it you have to import it，explicitly and now i'm going to do this，if the
    length of arg v。equals 2 then i'm going to go ah**d and，print out just like we
    did a few weeks，ago。hello and then argv bracket，1。 somewhat cryptic but i'll come
    back，to this in a moment。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我要从系统库导入一个称为的特性，使用 python。但要使用它，你必须显式导入。现在我会这样做，如果 arg v 的长度等于 2，那么我将去 ah**d
    打印出，就像我们几周前做的一样。hello 然后 argv 括号 1。这有点神秘，但我稍后会回来讲这个。
- en: uh else i'm gonna go ah**d and print out，a default of hello world so we did
    this。some weeks ago in week two，whereby we ran a program that if the。user typed
    their name at the prompt it，would say hello david or hello brian。if they didn't
    it would just say hello，world so to be clear if i run this thing。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，接下来我要 ah**d 打印出默认的 hello world，所以我们几周前在第二周做过这个，我们运行了一个程序，如果用户在提示符下输入他们的名字，它会说
    hello david 或 hello brian。如果他们没有输入，它只会说 hello，world。为了明确，如果我运行这个东西。
- en: and run it without any command line，arguments i just see hello world。if i run
    it again though and type my，name in and hit enter now i see hello。david so how
    is that working，well this first line of code gives me，access to argv，library。if
    you will the sys package so to speak，but it works the same way。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我运行它时没有任何命令行参数，只看到 hello world。如果我再次运行并输入我的名字，然后按回车键，我现在看到 hello。david，那这是怎么工作的呢，这第一行代码让我访问了
    argv 库。如果你愿意，可以这么说，sys 包，但它的工作方式是一样的。
- en: there's no arg c but no problem if v，is a list of command line arguments，which
    it is length len。will tell me the length of that list，which is equivalent to argc
    so i can，reconstruct the same idea。from my version in c，and here then i have a
    format string，that prints out hello。comma and then whatever's in curly，braces
    and rgb is a list，and just like in c which had arrays a。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 没有arg c，但没问题，如果v，是一个命令行参数的列表，长度len。将告诉我这个列表的长度，等同于argc，所以我可以，重建我在C中的相同想法，接下来我有一个格式字符串，打印出你好。逗号，然后是大括号中的内容，rgb是一个列表，和C中的数组一样。
- en: list is just an array that can，dynamically grow and shrink for you you。can still
    use squ*re bracket notation，the human typed，so let me change this just for clarity。to
    be zero and if i rerun this now and，type in david，it says weirdly hello rgb。pi
    so what you。don't see is the word python python is，the interpreter but that's
    not part of。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 列表只是一个数组，可以，动态增长和缩小。你仍然可以使用方括号表示法，人类输入，所以让我为了清晰起见，改变这个为零，如果我现在重新运行它，并，输入大卫，它奇怪地说你好rgb。pi，所以你。没有看到的是单词python，python是，解释器，但这不是部分。
- en: your program's execution per se，argv 0 is going to be the，name of the python
    program you're。running and arg v1 is going to be the，first word thereafter and
    so forth。so we still have access to that feature，but now we can，convert it now
    to python and in fact if。i want to print out all the command line，arguments i
    can just more simply do this。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 你的程序的执行本身，argv 0将是你正在运行的python程序的，名称，而arg v1将是接下来的，第一个单词，依此类推。所以我们仍然可以访问这个特性，但现在我们可以，将其转换为python，事实上，如果。我要打印出所有的命令行，参数，我可以更简单地这样做。
- en: for arg in argv go ah**d and print arg，glance，now let me go ah**d and type in。something
    like david malin two words，enter you now see everything printed，forth so。here
    too notice how neatly we can，iterate over a list in python there's no。i there's
    no squ*re brackets necessarily，you can just say for arg and argv just。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 对于arg in argv去啊**d并打印arg，瞥一眼，现在让我去啊**d并输入。像大卫·马林这样的两个单词，回车后你现在看到所有打印，出来了。所以。这里也注意到我们如何干净地在python中，遍历一个列表，没有。i，没有必要的方括号，你可以直接说for
    arg和argv。
- en: like a moment ago i said for c，in s pretty much the python for loop。is smart
    enough to figure out what it is，you want it to iterate over whether it's。a string
    or a list and my god，it's just so much more fun or pleasant。to program now when
    you don't have to，like，incrementing and plus plus and，semicolons and all of that。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我刚才说的，对于C，几乎就是python的for循环。它足够聪明，可以判断你想要迭代的对象，无论是。字符串还是列表，天哪，编程变得如此有趣或愉快。现在你不必，像，递增和加加，以及所有这些。
- en: here，examples quickly，but they're really just translations，again and for coming
    upcoming problems。more，methodically compare before and after as，well，anything
    at all on your end brian，nothing here。all right so let's look at some of our，final
    past examples and then we'll，look at some。even more powerful things that we can
    do，because now of languages like python。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这里，例子很快，但它们实际上只是翻译，再次为即将到来的问题。更多地，系统地比较前后，任何在你这边的事情，布赖恩，这里没有。好吧，我们来看看一些我们的，最终的过去例子，然后我们会，看看一些。甚至更强大的事情，因为现在有像python这样的语言。
- en: let me go ah**d and create a program，this time called exit。pi，exit。i and this
    program's purpose and。life is just going to demonstrate exit，statuses recall that
    eventually in c。we introduce the notion of returning 0，main，we do have that ability
    now in python 2。that you'll start to see in more，larger programs here too i'm
    going to go，ahead and import cis。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 让我去啊**d并创建一个程序，这次叫exit。pi，exit。我，这个程序的目的和。生命只是为了演示退出，状态。回想一下，最终在C中，我们引入了返回0的概念，主函数，我们现在在python中也有这个能力。你将会在更多，较大的程序中看到，此外，我要去，导入cis。
- en: the whole thing this time just to show a，different way of doing this i'm going
    to。say if the length of sys。org v，does not equal 2 let me go ah**d and，yell at
    the user。missing command line argument and then，after this i'm going to go ah**d
    and do，sys。exit。of 1 otherwise i'm going to go ah**d and，print out，a formatted
    string that says hello comma，r v。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 整个过程这次只是为了展示一个，不同的做法，我要说如果sys。org v的长度，不等于2，让我去啊**d并，喊用户。缺少命令行参数，然后，在这之后我要去啊**d并，做sys。exit。1否则，我将去啊**d并，打印出，格式化字符串，显示你好，逗号，r
    v。
- en: bracket 1 with cisnow in front of it for，reasons i'll explain in a moment。and
    then at the end i'm going to go，ahead and by default print sys。exit。zero all right
    so what is going on here，different things，i decided not to import rv specifically。but
    just to import the whole library，but because i did that i can't just。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面加上cisnow的括号1，理由我稍后会解释。然后在最后，我将默认**打印**`sys.exit(0)`。好的，那么这里发生了什么？不同的事情，我决定不特别导入rv，而是导入整个库，但因为这样做，我不能直接。
- en: write the word argv anywhere，i now have to prefix it with the name of。the package
    or library that it's in，so that's why i started doing sys。rv，sys。rgv，the sis。library
    which gives me access to an exit，function which is the equivalent to。returning
    from main so this is a bit of，a dichotomy in c，you had a return zero or one or
    some。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何地方写下单词`argv`，我现在必须用它所在的包或库的名称进行前缀，这就是为什么我开始做`sys.argv`，`sys`库，这让我可以访问一个退出函数，这等同于从主函数返回。因此在C语言中，这有点二分法，你必须返回零、一个或其他。
- en: other integer from main，in python you instead call sis。exit，with the same kinds
    of numbers so a。little bit different syntactically but，it's the same fundamental
    idea。what's the purpose of this program well，if i run this thing its purpose is
    just，word。after my program's name so notice if i，just run python of exit dot pi。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 从主函数调用其他整数，在Python中，你相应地调用`sys.exit`，用相同类型的数字，语法上稍有不同，但基本思想是一样的。这个程序的目的是什么？如果我运行这个程序，它的目的仅仅是**返回**我的程序名称，所以请注意，如果我只运行`python
    exit.py`。
- en: it's yelling at me missing command line，argument if i run it instead with my，name
    after that。now it says hello david so stupid，program it's only meant to demonstrate。how
    you can now return different values，program，because you're no longer in maine
    you。can't return per se but you can now in，python exit，as needed so that's the
    comparable line，there。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我运行它却缺少命令行参数，它在大吼。现在它说“你好，David”，这个愚蠢的程序只是为了演示如何返回不同的值，因为你不再在主函数中。你不能直接返回，但你可以在Python中根据需要**退出**，所以这是可以比较的地方。
- en: all right any questions then on exit，statuses again we're just kind of。churning
    through the list of features we，saw and see even if they don't come to，you supernaturally。there
    is，uh there are analogs here in the python，world，no all right well recall that
    after that。we started focusing really in the class，on algorithms and that's when
    like the。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那么关于退出状态有没有问题？我们只是不断浏览我们看到的特性，即使它们不会**自然**出现在你面前，Python世界里也有类似的东西。没有问题。那么请记住，在那之后，我们开始真正专注于类和算法，这就是那时候。
- en: size of our data sets and our，the efficiency of our our code started。to really
    matter let me go ah**d and，write a program called numbers。pi。that for instance
    contains an import at，in a moment，and then it gives me uh let me give。myself an
    array of numbers like 4682750，and you might recall that those were the。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们数据集的大小和代码的效率开始变得非常重要，所以让我去**写一个**名为`numbers.py`的程序，里面包含一个导入，在一会儿，然后给我一个数字数组，比如4682750，你可能还记得这些。
- en: numbers behind the doors in week three，and suppose that i want to search for。the
    number zero well in c，to implement linear search you would use，a for loop and
    a variable like i。and check all of the locations python's，way simpler，if zero
    in numbers go ah**d。and print out found and then i'll go，ahead and，else print
    out not found。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 第三周门后面的数字，假设我想要搜索数字零。在C语言中，实施线性搜索时，你会使用一个`for`循环和一个类似于i的变量，检查所有位置。Python的方法简单得多，如果在数字中找到零，就直接去**打印**出“找到”，然后我会去，**否则**打印出“未找到”。
- en: and that's it so let me go ah**d now and，do python of numbers。pi。hopefully i
    will see indeed sheet found，because it's in fact there so that's it，phrase，true。or
    false that you want so there is our。![](img/ba5c84256d1c630ab124e64119667f77_45.png)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，所以让我去**执行**`python numbers.py`。希望我能看到确实找到了，因为它实际上在那里，所以这就是你想要的**真假**。![](img/ba5c84256d1c630ab124e64119667f77_45.png)
- en: linear search what if i want to do it，for names well let me go ah**d and give。myself
    a second file similar in spirit。![](img/ba5c84256d1c630ab124e64119667f77_47.png)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 线性搜索，如果我想对名字做同样的事情，那我就去**给**自己一个第二个类似的文件。![](img/ba5c84256d1c630ab124e64119667f77_47.png)
- en: actually，if i really want to be identical to our，c version let me go ah**d and
    exit。with zero here and let me exit with，one here but strictly speaking that's，what
    i did。when we did this in c instead in names，let me go ah**d and do something
    similar。let me give myself a names，list with a whole bunch of names bill，and charlie。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 其实，如果我真的想与我们的 C 版本完全相同，让我去 ah**d，并以零退出。这里让我以一退出，但严格来说，这就是我做的。当我们在 C 中做这个时，反而在
    names 中让我去 ah**d 并做一些类似的事情。让我给自己一个包含很多名字的 names 列表，比尔和查理。
- en: and fred and george and ginny，and percy and lastly ron，all the way at the end
    and then let me。linear search，if ron in names go ah**d and print out，found else
    go ah**d and print out not。found and i won't bother printing out，or exiting with
    0 or 1 this time but let。me go ah**d and run python of names，whoops python of
    names and voila。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 还有 Fred、George、Ginny、Percy，最后是 Ron，在最后的位置，然后让我线性搜索，如果 Ron 在 names 中，去 ah**d
    并打印出找到，否则去 ah**d 并打印出未找到。这次我不会麻烦地打印出或以 0 或 1 退出，但让我去 ah**d 并运行 Python 的 names，哎呀，Python
    的 names，瞧。
- en: we found ron and notice i'm not cheating，i don't think i've screwed up。uh if
    i go ah**d and say ron old if that，was in fact his formal name。now i search for
    ron not found it's，looking indeed for an exact match。so that's pretty cool that
    we can，readily，but recall that a little bit ago i。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我们找到了 Ron，注意我没有作弊，我认为我没有搞错。如果我去 ah**d 说 Ron old，那确实是他的正式名字。现在我搜索 Ron，未找到，它确实在寻找一个确切的匹配。所以这真的很酷，我们可以轻松做到，但记住，我刚才说过我。
- en: proposed that python has other data，types as well，among which are these things
    called。dictionaries or dicks，d-i-c-t which represent a collection of。![](img/ba5c84256d1c630ab124e64119667f77_49.png)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 提出了 Python 还有其他数据类型，其中包括被称为字典（dictionaries 或 dicks，d-i-c-t）的东西，它们代表一组。![](img/ba5c84256d1c630ab124e64119667f77_49.png)
- en: key value pairs similar in spirit to a，has，spanish keys and english values。converting
    one to the other，this english dictionary has english，words and english。definitions
    but the same idea a，collection of keys and values，using one you can find the other
    well。let's go ah**d and translate this into。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 键值对在精神上类似于，西班牙语的键和英语的值。将一个转换为另一个，这个英语字典包含英语单词和英语定义，但同样的思路是一组键和值，通过一个你可以找到另一个。那么，让我们去
    ah**d，把它翻译成。
- en: '![](img/ba5c84256d1c630ab124e64119667f77_51.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba5c84256d1c630ab124e64119667f77_51.png)'
- en: python in a program called，phonebook。pi and implement something，recall。in pi
    in c we used a couple of arrays，initially then we scratched that and we。used an
    array of structs，is a more，follows，let me go ah**d here and uh from cs50。import
    get string then let me go ah**d，and give myself a dictionary of people，different。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Python 在一个名为 phonebook 的程序中。pi 并实现某个回调。在 C 中，我们最初使用了几个数组，然后我们放弃了这个，转而使用一个结构体数组，这更符合。让我去
    ah**d，并从 cs50 导入 get_string，然后让我去 ah**d，给自己一个不同的人的字典。
- en: but i'm going to go ah**d and，preemptively use curly braces，they are back for
    the purposes of。dictionaries and then here's how you，define key value pairs，is
    gonna be，*****。thousand that's his number，and then i'll be one of the other keys。for
    now we'll keep it a very small phone，book or dictionary，*****，oh and that's it。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 不过，我将去 ah**d 预先使用花括号，它们又回来了，目的是为了字典。然后这是如何定义键值对，将会是，*****。那是他的号码，然后我将是其他键之一。暂时我们会保持一个非常小的电话簿或字典，*****，哦，就这样。
- en: so the curly braces can technically be，on different lines i could move this
    up。here i could get rid of this，but there are certain style conventions。in python
    the point though here is that，a dictionary is defined with curly。braces at the
    beginning and end，the keys and values are separated by，colons。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 所以花括号在技术上可以位于不同的行，我可以将其移到上面，我可以去掉这个，但在 Python 中有某些风格约定。这里的要点是，字典是用开始和结束的花括号定义的，键和值由冒号分隔。
- en: and the key value pairs are separated by，commas so that's why it's conventional。to
    write it the way i did，it's just a little more obvious that。![](img/ba5c84256d1c630ab124e64119667f77_53.png)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 键值对用逗号分隔，这就是为什么按我所做的方式书写是惯例，显得更加明显。![](img/ba5c84256d1c630ab124e64119667f77_53.png)
- en: this is a dictionary with two keys each，of which has，a value it's just associating
    left with。right so to speak，now what does this mean suppose i want，to search for
    someone's name well let me。go ah**d and give myself a name variable，call getstring
    askingthehuman for a name。and let me implement my own virtual，phone book much
    like the contacts app in。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个包含两个键的字典，每个键都有一个值，可以说它将左侧与右侧关联起来。那么这意味着什么呢？假设我想搜索某人的名字，嗯，让我去 ah**d，并给自己一个名为
    getstring 的变量，询问用户姓名。然后让我实现一个自己的虚拟电话簿，类似于。
- en: your phone let me go ah**d and then say，once i have the name if name in people。that's
    great if i found the name in，people let me go ah**d and print out，people。bracket
    name and this is where，dictionaries are gonna get really，explain，python of phonebook。pi
    enter whoops，python of phonebook。pi let me search for，brian's number。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 你的手机让我先去，等我有了名字，如果名字在人员中。这太好了，如果我在人员中找到了名字，让我继续打印出人员。括号名称，这就是字典将要真正解释的地方，Python的电话簿。哎呀，Python的电话簿。让我搜索布莱恩的号码。
- en: boom there's brian's number let me go，ahead and run it with david's name，and
    run it with。phone number，just yet he's unlisted as would be。![](img/ba5c84256d1c630ab124e64119667f77_55.png)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 突然有了布莱恩的号码，让我继续用大卫的名字运行一下，手机号码还没有，他是未列出的。![](img/ba5c84256d1c630ab124e64119667f77_55.png)
- en: anyone else that i type in，so what has gone on here well at the top，people。and
    it's a dictionary a set of key value，pairs left and right。![](img/ba5c84256d1c630ab124e64119667f77_57.png)
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我输入的其他任何东西，那么在这里发生了什么？在顶部是“人员”，这是一个字典，一组左右的键值对。![](img/ba5c84256d1c630ab124e64119667f77_57.png)
- en: then i'm just getting a string from the，user using get string as before。and
    then this is powerful too this is。![](img/ba5c84256d1c630ab124e64119667f77_59.png)
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我像以前一样从用户那里获取字符串。这也很强大！. ![](img/ba5c84256d1c630ab124e64119667f77_59.png)
- en: essentially on line，9 searching the whole dictionary，me，down here the name associated
    with that。sorry the number associated with that，person's name and let me make
    this more。clear by factoring this out，let me give myself a variable called。number
    and then more explicitly print，out that variable's name，here's what's different
    today if name。
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 实质上在第9行搜索整个字典，我在这里找到与那个名字相关的号码。抱歉，与那个人的名字相关的号码，让我更清楚一点，通过将其提取出来，给自己一个变量叫做“号码”，然后更明确地打印出该变量的名称，今天有什么不同的是，如果名字。
- en: '![](img/ba5c84256d1c630ab124e64119667f77_61.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba5c84256d1c630ab124e64119667f77_61.png)'
- en: and people，is written here what this does is it，python searches。all of the keys
    for that name it doesn't，search values when you say。if name in a given dictionary
    like，people is it searches only the keys。if you then found the key i know，definitively
    that david or brian。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 而“人员”在这里是写好的，这样做是让Python搜索所有与那个名字相关的键，而不是值。当你说如果名字在某个字典如“人员”中，它只搜索键。如果你找到键，我可以确定是大卫或布莱恩。
- en: are in the dictionary and notice this，it's just like in c's array syntax。you
    can now use squ*re bracket notation，to index into a dictionary，using a word like
    david or brian。and get back a value like our phone，number in c，and thus far even
    in python whenever。we've seen squ*re bracket notation，it would only be typically
    for numbers。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 字典中的内容注意到这一点，这就像C语言的数组语法。你现在可以使用方括号符号，通过一个单词如大卫或布莱恩来索引字典，并获得一个值，比如我们的手机号码，而在C语言中，迄今为止在Python中每当我们看到方括号符号，它通常只适用于数字。
- en: because arrays or lists have indices，numbers that address the first location。middle
    and last and so forth everything，dictionaries，is that they're otherwise known
    as。associative arrays a dictionary is a，collection of key value pairs and if you，want
    to look up a key。you simply use squ*re bracket notation，just like we used to use
    squ*re brackets，for numbers。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 因为数组或列表有索引，这些数字指向第一个位置、中间和最后一个等，字典的不同之处在于它们也被称为关联数组，字典是键值对的集合，如果你想查找一个键，你只需使用方括号符号，就像我们过去用方括号处理数字一样。
- en: and because python is a pretty fancy，language，it handles the searching for you
    and，search。to give you，constant time by using what we called，last week a hash
    table。dictionaries are typically implemented，a hash table，and recall that even
    though it was，really a a。goal of achieving constant time if you，choose a really
    good hash function，hash into。
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 并且因为Python是一种相当高级的语言，它为你处理搜索，并提供常数时间的搜索，使用我们上周所说的哈希表。字典通常是通过哈希表实现的，回想一下，即使这确实是实现常数时间的目标，如果你选择一个非常好的哈希函数。
- en: you can come close to constant time so，again among the features，gives you。very
    high performance it's not linear，search and in fact，set recall that when we began
    playing。speller，using what like 10 or 20 lines of code，max instead of the many
    more that you。might have written for pset five，speller used a set and a set is
    just a，collection of values。
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以接近常数时间，因此，再次强调其特性，给你非常高的性能，这不是线性搜索，实际上，回想一下当我们开始玩拼写器时，使用大约10或20行代码，而不是你可能为第5个编程作业写的那么多，拼写器使用了一个集合，而集合只是一个值的集合。
- en: long story short it's similar in spirit，to a dictionary in that it too。underneath
    the hood uses a hash table to，get you answers quickly，so if you think back to
    what that。speller example was，of code，line of code，was implementing pretty much
    the，entirety of。your spell checker all of those pointers，linked lists，you get
    that。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 长话短说，从精神上讲，这与字典相似，因为它在底层使用哈希表来快速获得答案。所以如果你回想一下那个拼写检查器的代码实例，实际上实现了你整个拼写检查器的所有指针和链表，你就会明白。
- en: with the language itself all right any，questions then，on dictionaries they will
    recur and they。structures，because this ability to just associate，something with
    something else，organize。your data any questions，here yeah sophia，is there only
    a set hash function that，dictionaries。or can we change that hash function in，any
    way good question um。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 关于语言本身没问题，任何问题都会回到字典和它们的结构上，因为这种将某物与其他事物关联、组织数据的能力会不断出现。任何问题，嗨，索非亚，字典是否只有一种哈希函数？还是我们可以以任何方式改变这个哈希函数？好问题，嗯。
- en: the it comes with a hash function for，for you，so you that's the kind of detail
    that。you should leave to the library，because someone else has spent all of，the
    time thinking about how to。dynamically adapt the data structure，move things around
    as needed。so that you no longer need to stress to，implementing，speller yourself
    and turns out other。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 它带有一个哈希函数，所以你，应该把这种细节留给库，因为其他人花了很多时间考虑如何动态调整数据结构，根据需要移动事物。因此你不再需要为自己实现拼写检查器而感到压力，结果是其他。
- en: things get easy too this is not a，commonly needed feature necessarily but。it
    is something we can do let me go，ahead and write a quick program called，swap。pi，ago
    we gave，of 2。and then i printed out something like x，is x，y is y but this week
    i'm using format。strings just to print that out，then i did something like swap
    x y and i。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 事情也会变得简单，这并不是一项必需的常见功能，但这是我们可以做到的。让我写一个叫做交换的快速程序。我们之前给出了 2，然后我打印出像 x 是 x，y 是
    y，但这一周我使用格式字符串来打印出来，然后我做了类似交换 x y 的操作。
- en: just kind of hoped for the best，and then i printed out those values。again well
    it turns out in python，because you don't have pointers and you。don't have addresses
    per se，that you have access to you can't resort。to the solution like last week
    and pass，these variables around by reference so。
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是希望能有好的结果，然后我再次打印出那些值。结果是，在 Python 中，由于你没有指针，也没有可以访问的地址，你不能像上周那样通过引用传递这些变量。
- en: to speak by their address，that's just not possible why is that a。thing well
    it would seem to be taking a，feature away from you but honestly if。this past week
    was any indication，including the week prior，pointers are hard and like segmentation。of
    that stuff right，is difficult and at worst your programs，can be compromised because
    someone can。
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 按照它们的地址进行操作，这显然是不可能的。为什么会这样呢？看起来这是一项功能被剥夺了，但老实说，如果这一周有什么启示，包括之前的一周，指针是很难的，像分段这样的东西是困难的，最糟糕的情况下，你的程序可能会被妥协，因为有人可以。
- en: access memory that they shouldn't，so python takes that feature away java。also
    takes that feature away from，programmers to sort of protect you，against yourself。from
    screwing up like you may have and，past week，but it turns out in python there are，want
    to swap。x and y that's fine swap x and y，and so now if i run python of swap on，this
    program。
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 访问不该访问的内存，因此 Python 除去了这一特性，Java 也将这项特性从程序员那里去掉，以保护你自己，避免像上周那样出错。但事实是，如果你想交换
    x 和 y，那也没问题，交换 x 和 y，现在如果我在这个程序中运行 Python 的交换功能。
- en: voila boom it's distilled into one other，line so even though they take something。away
    from us that you can do a lot of，with，we can nonetheless hand you back a more，powerful
    feature。with this one liner for swap and notice，that it's x comma y on the left。but
    y comma x on the right and that has，the effect of doing what brian did with。
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 瞧，嘭，它浓缩成另一行，所以尽管他们从我们这里拿走了一些东西，但你仍然可以做很多事情，我们可以把一个更强大的特性交还给你。注意，这个单行代码用于交换，左边是
    x，y，而右边是 y，x，这样就实现了布赖恩所做的效果。
- en: the glasses of liquid，of doing the switcheroo even without a，temporary variable，happening。![](img/ba5c84256d1c630ab124e64119667f77_63.png)
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这些液体的杯子，进行交换，即使没有临时变量的出现。![](img/ba5c84256d1c630ab124e64119667f77_63.png)
- en: underneath the hood well let's go ah**d，from week。![](img/ba5c84256d1c630ab124e64119667f77_65.png)
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在底层，好的，让我们回顾一下这一周。![](img/ba5c84256d1c630ab124e64119667f77_65.png)
- en: four and then introduce a few of our own，here in week six，let me go ah**d and
    implement another。persistent。![](img/ba5c84256d1c630ab124e64119667f77_67.png)
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 四，并且在第六周引入我们自己的几个。让我继续实现另一个持久的。![](img/ba5c84256d1c630ab124e64119667f77_67.png)
- en: let me go ah**d here and open create a，file here called。![](img/ba5c84256d1c630ab124e64119667f77_69.png)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我继续，创建一个名为的文件。![](img/ba5c84256d1c630ab124e64119667f77_69.png)
- en: name this，name comma number so csv file recall is。![](img/ba5c84256d1c630ab124e64119667f77_71.png)
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 将此命名为，名称、逗号、数字，所以`csv`文件的回忆是。![](img/ba5c84256d1c630ab124e64119667f77_71.png)
- en: like a very simple spreadsheet，i'm going to go ah**d and just create。that so
    i have it nearby and then i'm，going to create a new file called。![](img/ba5c84256d1c630ab124e64119667f77_73.png)
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 像一个非常简单的电子表格，我将继续创建这个文件，以便我可以随时使用，然后我将创建一个名为的文件。![](img/ba5c84256d1c630ab124e64119667f77_73.png)
- en: phonebook。pi，going to do this，i'm going to import from cs50 the，getstring function
    as before。but i'm also going to import a library，called the csv library it turns
    out。python comes with a whole lot of，functionality，related to csv files to make
    your life。easier and make it easier to do things，with csvs，among the things i
    might want to do is。
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 电话簿。`pi`，我要做的是，从`cs50`导入`getstring`函数，就像以前一样。但我还将导入一个名为`csv`的库，事实证明，Python自带了很多与`csv`文件相关的功能，可以让你的生活更轻松，使处理`csv`文件变得更简单。我可能想要做的事情之一是。
- en: this let me go ah**d and open up that，file phonebook。csv，in append mode similar
    to f open two。weeks ago，and let me go ah**d and assign that to a，variable called
    file。then let me go ah**d and just get a name，from the user so let me use getstring
    to，get someone's name。name here then let me go ah**d and get，number here，so using
    number and then lastly and this。
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 让我继续打开那个文件`phonebook.csv`，以追加模式打开，类似于两周前的`f open`，然后让我继续将其赋值给一个名为`file`的变量。然后让我继续从用户那里获取一个名字，所以让我使用`getstring`来获取某人的名字。然后让我继续获取号码，所以使用`number`，最后这个。
- en: is the new code，let me save that name and number to a，file and recall from pset
    4。that saving files and writing bytes out，to files is pretty involved like it，recover。or
    blur any of those filters that，involved creating new files，turns out the csv library
    makes this。pretty easy let me go ah**d and give，myself what's called a writer。
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 这是新的代码，让我将名称和数字保存到一个文件中，并回忆起第4个编程作业。保存文件和将字节写入文件的过程相当复杂，就像恢复或模糊处理任何涉及创建新文件的过滤器一样，结果证明`csv`库让这变得相当简单，让我继续给自己一个所谓的`writer`。
- en: and i'm going to give myself the return，value of calling csv。writer a file。so
    what is this doing file again，represents the file i'm trying to open。csv writer
    is some function that comes，input，a file that you've already opened and it。kind
    of wraps that file，with some fancier functionality that's，programmer。
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我将给自己返回一个调用`csv.writer`的文件值。那么这个文件再次代表我试图打开的文件。`csv.writer`是一个函数，它接受一个你已经打开的文件，并且以某种方式包装该文件，提供一些更高级的功能，这是程序员需要的。
- en: to write to that file what am i going to，do i'm going to use that writer variable。to
    write a row that specifically，contains a name and a number，and i'm using a list
    because if you。rows，a list is kind of the right idea each of，the cells from left
    to right is kind of。like a list a row is like a list so i'm，going to deliberately
    use a list here。
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 要写入该文件，我要做的是使用`writer`变量写入一行，专门包含一个名称和一个号码，并且我使用列表，因为如果你考虑行，列表是一个合适的概念，左到右的每个单元格就像一个列表，一行就像一个列表，所以我将故意在这里使用列表。
- en: and then lastly i'm going to close the，file just as i've done in the past。so
    it's a little cryptic here but again，getstring getstring isn't uh is。is is old
    now this is old now so，the only things that are new are。importing the csv i'm
    opening this file，in append mode，similar to what i did in c and then。
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我将关闭文件，就像我过去所做的一样。所以这里有点晦涩，但再说一次，`getstring`现在已经过时了，唯一的新内容是导入`csv`，我以追加模式打开这个文件，类似于我在`C`中所做的，然后。
- en: these lines here involve，wrapping the file with the csv，functionality。writing
    a row to this file with right，row and then closing it。so let me go ah**d and try
    this now let，me open up phonebook。csv，which for now only contains these。moment
    ago，and let me go ah**d and run this python，of phonebook。pi。
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这些行涉及使用`csv`功能包装文件。写入一行到这个文件中并关闭它。所以让我现在试试这个，打开`phonebook.csv`，目前只包含这些内容。稍早之前的内容，然后让我继续运行这个Python程序，来自`phonebook.pi`。
- en: let me go ah**d and add brian and brian，will be plus one，*****，thousand enter。and
    now let me go to my csv file over，here，ah damn it i screwed up uh pretend i。didn't
    hit enter there now it works，let me go ah**d now and do this again by。inputting
    i should have hit enter when i，created the file manually but i screwed。
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 让我**加上布莱恩**，布莱恩将是加一，*****，千，回车。现在让我去我的 CSV 文件这里，啊，该死，我搞砸了，呃，假装我没有按回车，现在它有效，让我现在再次输入，创建文件时我应该按回车，但我搞砸了。
- en: up when creating it so let me wave my，hand at that and convince you。that i did
    this correctly in code by，adding myself david，uh，2750 enter let me go back to
    my csv file。and voila now it's formatting correctly，line for me。![](img/ba5c84256d1c630ab124e64119667f77_75.png)
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 创建时我就这样做，所以让我挥挥手，证明我在代码中正确做到了，通过添加我自己，大卫，呃，2750 回车，让我回到我的 CSV 文件，瞧，现在格式正确，给我。![](img/ba5c84256d1c630ab124e64119667f77_75.png)
- en: and notice too if i download this file，let me download phonebook。csv。like i
    did in a past week let me，download this to my own mac，let me open this csv file
    and whether。you have apple numbers installed or，microsoft excel，you'll open something
    that looks like。this and voila i've dynamically created，using python code now。
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 还注意到，如果我下载这个文件，让我下载 phonebook.csv，像我在上周那样，让我下载到我的 Mac，打开这个 CSV 文件，无论你是否安装了 Apple
    Numbers 或 Microsoft Excel，你会打开看起来像这样的东西，瞧，我现在已经动态创建了，使用 Python 代码。
- en: my own sort of csv file and it turns out。![](img/ba5c84256d1c630ab124e64119667f77_77.png)
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我自己的 CSV 文件，结果是。![](img/ba5c84256d1c630ab124e64119667f77_77.png)
- en: there's a way to tighten this up just a，way i did，but it turns out that you
    can also open。and close files a little differently，you can do this with file with
    rather，with open as file。then i can indent all of this here and i，can get rid
    of my close。line so not a big deal to do it the way，i did with open and close。
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 有一种方法可以更紧凑地处理这个，我做过，但实际上你也可以以稍微不同的方式打开和关闭文件，你可以用 `with open as file` 来做到这一点。这样我可以在这里缩进所有这些，并且可以去掉我的关闭行，所以以我之前的方式打开和关闭并没有什么大不了的。
- en: but the way i've done this here is a，little more pythonic，this with keyword
    which is not something。analogous to anything we've seen in c，the with keyword
    when you open a file it。will automatically close it for you，eventually so you
    might see that in some。online references or other materials，but again it just
    does that for you，automatically。
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 但我在这里的做法有点更 Pythonic，`with` 关键字并不是我们在 C 中见过的任何东西，当你打开文件时，它会自动为你关闭，最终你可能会在一些在线参考资料或其他材料中看到这个，但它会自动为你完成。
- en: well let's go ah**d and do this i like。![](img/ba5c84256d1c630ab124e64119667f77_79.png)
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，让我们继续，我喜欢。![](img/ba5c84256d1c630ab124e64119667f77_79.png)
- en: the fact that we can now manipulate csvs，and it turns out that if you've ever。used
    google forms that's a very popular。![](img/ba5c84256d1c630ab124e64119667f77_81.png)
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以处理 CSV 文件，事实证明如果你曾经使用过 Google 表单，那是一个非常流行的。![](img/ba5c84256d1c630ab124e64119667f77_81.png)
- en: way of like collecting data from users，in fact let me go ah**d and go to a url，cs
    cs50。ly hogwarts。which is going to show you a form like，this here if brian you
    wouldn't mind。typing that into the chat，go to that url cs50。ly，hogwarts and if
    everyone wouldn't mind，your。what house you wish you were assigned to，by the sorting
    hat，would you be in。
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样收集用户数据的方式，实际上让我去一个 URL，cs50.ly/hogwarts。如果布莱恩不介意，打这个进聊天，去那个 URL cs50.ly/hogwarts，如果大家不介意，告诉我你希望被分配到哪个房屋，*分院帽*会把你放在哪。
- en: now if you've used google forms before，results，certainly in the google form
    itself and。already 122 of you have buzzed in，and we can see a distribution in
    a graph。and so forth but what i want，is not the distribution pictorially。there
    i'm going to go ah**d and open up，a spreadsheet and so if you've never。
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你以前使用过 Google 表单，结果当然会在 Google 表单本身中，已经有 122 人参与进来，我们可以看到图表中的分布。然而我想要的，不是分布的图示。我要去**打开一个电子表格**，如果你从未使用过。
- en: used google forms before，you can click a button and then you can。get a list
    of all of the responses that，are coming in live right now。and by default google
    keeps track of the，time st*mp when the form was submitted。and what house was actually
    used so i'm，going to go ah**d now and do this。
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 之前使用过 Google 表单的，你可以点击一个按钮，然后你可以获得所有当前实时响应的列表。默认情况下，Google 会跟踪表单提交时的时间戳和实际使用的房屋，所以我现在要去**做这个**。
- en: let me go ah**d and download that in，another tab give me just a moment to。do
    it on this screen here i'm going to，go ah**d and，download that csv file。onto my
    mac locally by going to，file download csv，that's going to put it into my downloads。![](img/ba5c84256d1c630ab124e64119667f77_83.png)
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我**继续**在另一个标签页下载它，给我一点时间在这个屏幕上，我要**继续**下载这个 CSV 文件到我的 Mac 本地，通过选择文件下载 CSV，这会将其放入我的下载文件夹。![](img/ba5c84256d1c630ab124e64119667f77_83.png)
- en: and upload this，into my ide by just dragging and，browser，i'm going to do this
    by dragging and。dropping the file，all right now i have that file there and，let
    me go ah**d now。and make sure the file's there i have，this file called sorting
    hat responses。form responses one and so forth，well let me go ah**d and write a
    program。
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 将其上传到我的 IDE，只需拖动和浏览器，我将通过拖动和放置文件来完成，好的，现在我有了那个文件，让我**继续**检查文件是否在那里，我有这个名为“Sorting
    Hat Responses”的文件，表单回应 1 等等，好的，让我**继续**写一个程序。
- en: now that manipulates this data much like，you might if running a student group。that's
    collecting data in a google form，or you're just collecting information in。general
    and have it in csv format，how might you now tally up all of the。![](img/ba5c84256d1c630ab124e64119667f77_85.png)
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 现在如果你像运行一个学生小组一样操控这些数据，这就像是在收集谷歌表单中的数据，或者你只是在一般情况下收集信息并以 CSV 格式保存，那么你现在如何汇总所有的数据呢？![](img/ba5c84256d1c630ab124e64119667f77_85.png)
- en: results especially if google weren't，results were，well let me go ah**d and write
    a program。![](img/ba5c84256d1c630ab124e64119667f77_87.png)
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是如果谷歌没有结果，结果就是，嗯，让我去**写一个程序**。![](img/ba5c84256d1c630ab124e64119667f77_87.png)
- en: called hogwarts which is not something，that we've seen ever before in c let
    me。go ah**d and import this csv library，let me give myself initially a。dictionary
    called houses that contains a，whole bunch of keys，like gryffindor with initial
    count of。zero，huffle puff with an initial count of，zero，raven claw with an initial
    count of zero。
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 名为霍格沃茨，这不是我们在 C 中见过的东西，让我**继续**导入这个 CSV 库，最初给自己一个字典，称为 houses，包含一堆键，比如格兰芬多，初始计数为零，赫奇帕奇，初始计数为零，拉文克劳，初始计数为零。
- en: and also also slither in with an initial，count of zero so notice in a dictionary，or
    dict in python。![](img/ba5c84256d1c630ab124e64119667f77_89.png)
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 还要带一个初始计数为零，所以注意在 Python 中的字典，或称为 dict。![](img/ba5c84256d1c630ab124e64119667f77_89.png)
- en: the keys and values don't need to be，strings and strings it can certainly be。strings
    and numbers because i'm going to，count of，all of the votes for one house or。another
    so let me go ah**d and do this，let me go ah**d and open up，with open the sorting
    hat file。inform responses 1 dot csv，long file name but that's the default，from
    google as。
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 键和值不需要都是字符串，它当然可以是字符串和数字，因为我要统计某个房子的所有投票或另一个房子的投票，所以让我**继续**这样做，让我**继续**打开“Sorting
    Hat”文件，回应 1 dot csv，文件名很长，但这是谷歌的默认设置。
- en: '![](img/ba5c84256d1c630ab124e64119667f77_91.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba5c84256d1c630ab124e64119667f77_91.png)'
- en: file so i'm going to use my one liner，instead of having to open and close。i'm
    going to give myself this time a，reader which we did not see before。a csv library
    has a reader function，that allows me to read a csv file，automatically。i'm going
    to go ah**d and skip the first，the first row，timest*mp。
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 文件，所以我将使用我的单行代码，而不是打开和关闭。我将给自己一个之前没有见过的读取器，CSV 库有一个读取器函数，可以让我自动读取 CSV 文件。我将**继续**跳过第一行，时间戳。
- en: and house which i do want to ignore i，want the real data from you all。and here's
    what's cool about csvs and，python i can if i want to iterate over，all of the rows。that
    are in that spreadsheet i can do，for row in reader，and now let me go ah**d and
    get at for。instance，the uh house in question so the house in，a given row，is going
    to be the rows first。
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 而我确实想要忽略的房子，我想要你们提供的真实数据。这就是 CSV 和 Python 的酷炫之处，我可以选择遍历那个电子表格中的所有行，我可以这样做：`for
    row in reader`，现在让我**继续**获取，比如说，问题中的房子，所以给定行中的房子将是行的第一个元素。
- en: '![](img/ba5c84256d1c630ab124e64119667f77_93.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba5c84256d1c630ab124e64119667f77_93.png)'
- en: entry zero indexed so what is going on，here well let me go back to the google。spreadsheet
    a moment ago and in the，google spreadsheet，there's two columns and the way the
    csv。reader works，is it returns to one row at a time and，that's conceptually pretty。straightforward
    it maps perfectly to the，idea of a spreadsheet，but each row is returned to you
    as a。
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 条目是零索引的，那么这里发生了什么呢？让我回到刚才的谷歌电子表格，在谷歌电子表格中，有两列，而 CSV 读取器的工作方式是，它一次返回一行，这在概念上是相当简单的，它完美地映射到电子表格的概念，但每一行都会以一个。
- en: list a list，in this case of size 2 so row bracket 0，would give me a given time
    st*mp。![](img/ba5c84256d1c630ab124e64119667f77_95.png)
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 列表，实际上是大小为 2 的列表，所以行括号 0 会给我一个给定的时间戳。![](img/ba5c84256d1c630ab124e64119667f77_95.png)
- en: row bracket 1 would give me a given，house name。![](img/ba5c84256d1c630ab124e64119667f77_97.png)
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 行括号 1 会给我一个给定的房子名称。![](img/ba5c84256d1c630ab124e64119667f77_97.png)
- en: so that's why here in the ide i'm going，ahead and declaring a variable called，bracket
    one。because i don't care about the time，st*mp we all just did this roughly at，the
    same time，index。into the dictionary just like in c you，could index into an，i can
    use。strings so i'm going to go ah**d and say，go into the houses dictionary which
    i，defined up above。
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是为什么在 IDE 中我继续声明一个叫做括号一的变量。因为我不在乎时间戳，我们大致在同一时间做了这个，像在 C 语言中一样索引字典，我可以使用字符串，所以我将继续进入我在上面定义的
    houses 字典。
- en: increment，it by one and that's it，at this point i have opened the csv file。and
    read it using the library in this，loop i'm iterating over every row in the。spreadsheet
    that you all，created by filling out that form again。and again i'm just using a
    variable to，get at whatever is in。
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 将其增加一，至此我已打开 csv 文件，并使用这个库读取它。在这个循环中，我在每一行中迭代你们通过填写那个表单所创建的电子表格。我再次使用一个变量来获取第二列中的内容，也就是行，括号一，因为行记录零将是时间戳。
- en: the second column otherwise known as row，bracket one because row record zero，would
    be the time st*mp。and then i'm going into the dictionary，called houses which we
    defined up here。i'm indexing into it just like an array，but it's a list in this
    case。using its house name which looks up the，appropriate key，of，incrementing its
    value so it's a nice。
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我进入字典，叫做 houses，我们在这里定义过。我像访问数组一样索引它，但在这种情况下它是一个列表。使用它的房子名称来查找相应的键，增加其值，所以这很好。
- en: '![](img/ba5c84256d1c630ab124e64119667f77_99.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba5c84256d1c630ab124e64119667f77_99.png)'
- en: way of going into the dictionary，and incrementing go in and increment so。now
    let's go ah**d at the very end here，and just print out the result。for house in
    houses is the fancy way to，iterate over all of the keys。in a dictionary go ah**d
    and print out a，formatted string as follows。
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 进入字典并增加，进入并增加。所以现在我们就到这里的最后，打印出结果。对于 houses 来说，是迭代字典中所有键的华丽方式。继续打印出一个格式化的字符串，如下所示。
- en: let me print out the house name followed，by a colon，followed by a the house's
    uh dictionary。indexing into it with house so again，second，python of hogwarts let
    me cross my。fingers that i didn't screw，this up and i did，the ide knew before
    i did all right now，and。damn it all right the file is called，something slightly
    different，versus when i。
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 让我打印出房子名称，后面跟着冒号，然后是房子的字典。我用房子索引它，所以再次，霍格沃茨的第二个，交叉我的手指，希望我没有搞砸，这确实如此，IDE 在我之前就知道了，好的，现在，真该死。好吧，文件的名称与我之前的稍微不同。
- en: practiced uh let me copy this，so close sorting hat responses ah。it has parentheses
    which i forgot all，the program，damn it okay no such file or direct oh i。forgot
    the csv，dot csv okay now cross fingers and，oh thank god okay so gryffindor，uh，oh。![](img/ba5c84256d1c630ab124e64119667f77_101.png)
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 练习一下，让我复制这个，关闭排序帽的响应。啊，它有括号，我忘记了，所有程序，真该死。好吧，没有这样的文件或目录，哦，我忘了 csv，点 csv 现在交叉手指，哦，感谢上帝，好吧，狮子座，呃，哦。
- en: beat out hufflepuff very interesting for，whatever sociological reason。but here
    we have a program now that，with silly，harry potter data but again imagine。collecting
    any data you want from users，downloading it as a csv to your mac or，pc or your
    ide。then writing code that analyzes that，data however you want i did a very，simple
    summation。
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 击败赫夫帕夫非常有趣，出于某种社会学原因。但现在我们有一个程序，使用傻乎乎的哈利·波特数据，但想象一下。从用户那里收集任何你想要的数据，将其下载为 csv
    到你的 Mac 或 PC，或你的 IDE。然后编写代码以你想要的方式分析这些数据，我做了一个非常简单的求和。
- en: but you could certainly imagine doing，something fancier than that，like doing
    summations or averages。standard deviations all of that，functionality could we
    get，as well are any questions on，dictionaries。powerful，features we've yet seen
    in a programming，anything at all on your end brian。no hands raised here all right
    well let，me go ah**d now，and i'm going to transition actually to。
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 但你当然可以想象做一些更复杂的事情，比如进行求和或平均值。标准差等所有这些功能，我们也能获取，有关字典的问题。在编程中，我们尚未看到的强大功能，布莱恩，你那边有什么问题吗？没有人举手，好吧，那我就去吧，**现在我要转换到。**
- en: my mac where i have in advance，pre-installed python，just so that i can do things
    locally。it'll make things a little faster i，don't have to worry about internet。speeds
    and the like and this is indeed，pc，interpreter，run it on your own mac and pc however
    i。would recommend you continue using this，ide certainly for problem sets sake。
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 我的 Mac 上预先安装了 Python，这样我就可以在本地进行操作。这会让事情稍微快一点，我不必担心互联网速度等问题，而这确实是一个 PC 解释器，可以在自己的
    Mac 和 PC 上运行，但我建议你继续使用这个 IDE，特别是为了问题集的原因。
- en: until the end of the semester maybe，transitioning to your mac or pc。for final
    projects only only because，what i did this weekend was spent waste。a huge amount
    of time just getting，stupid libraries to work on my own mac。which is often easier
    said than done，just because when programmers are。
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 直到学期结束，也许过渡到你的 Mac 或 PC，仅仅用于最终项目，因为我这个周末花了大量时间让愚蠢的库在我的 Mac 上工作，这通常说起来容易做起来难。
- en: writing code that's supposed to work on，every possible mac and pc in the world。you
    and i and everyone else have，slightly different version numbers。different software
    installed different，incompatibilities，so those kinds of headaches very quickly。arise
    when you're doing things locally，um so let me encourage you to wait until。
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 编写的代码应该能够在世界上每一个可能的 Mac 和 PC 上运行。你我以及其他每个人的版本号略有不同，安装的软件也不同，存在不同的不兼容性，所以在本地操作时很快就会出现这些麻烦。因此，让我鼓励你等到学期末的最终项目，或许可以考虑脱离这个
    IDE，做我现在要做的事情，因为你能够在这里更清楚地看到这些演示。
- en: terms end with final projects perhaps to，sort of move off of the ide。and do
    what i'm about to now do just，because you'll be able to，see these demos more clearly
    here i'm。going to go ah**d and on my own mac i'm，called，a library，that supports
    speech synthesis and if i。want access to that functionality it，suffices to import，pi
    ttsx3 which is the name of that。
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在在自己的 Mac 上调用一个支持语音合成的库，如果我想访问该功能，只需导入 `pyttsx3`，这就是它的名称。
- en: person's open source free library，that i downloaded and installed on my，i。literally
    never used this before this，past week and i，found that i can declare a variable。called
    engine for instance，i can then call pyttsx3 dot，init to initialize the library
    why。that's just because of how the，programmer designed it you have to，initialize
    it first。
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我下载并安装的一个开源免费的库，我在过去一周才开始使用它。我发现我可以声明一个变量叫 engine，例如，我可以调用 `pyttsx3.init`
    来初始化这个库。这是因为程序员的设计方式，你必须先初始化它。
- en: i then can use that engine to say things，like say，should run，the engine and
    wait for it to finish。before my own program quits，all right let me go ah**d now
    and close，that and run python，of speech。pi on my own mac，here hello world，and
    indeed，i can probably make this even more。interesting let me go ah**d and say，something
    like this let me open up，speech。pi again。
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我可以使用这个引擎说话，比如说，应该运行引擎并等待它完成，然后我的程序再退出。好的，让我继续，现在关闭它并在我的 Mac 上运行 `speech.py`，这里是
    hello world，确实，我可以让这个更有趣，让我继续说一些像这样的内容，让我再次打开 `speech.py`。
- en: and add some functionality i won't use，the cs50 library but i will use maybe，the
    input function。let me go ah**d and say name gets input，what's your name question
    mark and then。let me go ah**d and say not hello world，but let me use an f，string
    which doesn't have to be used in。print you can use it in，any function that takes
    a string let me，go ah**d and say hello。
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一些功能，我不会使用 CS50 库，但我可能会使用输入函数。让我继续说，name = input("你叫什么名字？")，然后让我继续说，不是 hello
    world，而是使用 f 字符串，这可以在任何接受字符串的函数中使用。让我继续说 hello。
- en: to that name all right let me go ah**d，and run python speech。pi again。whoops
    let me go ah**d and run python of，speech。pi，again what's my name david hello。david
    we're in choice of inflection but，indeed it synthesized it let's try brian，hello
    brian。okay so we could probably tinker with，the settings to make the voice sound
    a，little more natural。
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，继续，再次运行 `python speech.py`。哎呀，让我继续并运行 `python speech.py`，我的名字是什么，David？你好，David，我们在选择语调上，但确实它合成了。让我们试试
    Brian，你好，Brian。好的，我们可以调整设置，让声音听起来更自然一些。
- en: but that's pretty cool well let me go，into some code i wrote in advance this。time
    using a different library this one，related to，faces and facial detection certainly
    uh。very much invoked when it comes to，and other，websites automatically tagging
    you very，governments。federal governments and law enforcement，a crowd，and let me
    go ah**d and open up a file。
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 但这真的很酷，让我进入一些我提前写好的代码，这次使用一个不同的库，这个库与面部和面部检测相关，当然在很多网站自动标记你时，联邦政府和执法机构都非常常用，让我打开一个文件。
- en: here for instance a little more benignly。![](img/ba5c84256d1c630ab124e64119667f77_103.png)
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 这里例如更温和一点。![](img/ba5c84256d1c630ab124e64119667f77_103.png)
- en: office，so here's a photograph of some people in，an office and there's a lot
    of faces。there but there's a lot of boxes of，those faces，but let me go ah**d and
    look at quickly。a program called the tech dot pi，most of this file is comments
    just so。that if you want at home you can follow，along and see what it does。
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 办公室，所以这是一些人在办公室的照片，那里有很多脸。那里有很多盒子，但让我先快速看看一个叫做tech dot pi的程序，这个文件大部分是注释，以便于你在家可以跟随并了解它的功能。
- en: but let me just highlight a few salient，lines here's that pillow library again。where
    i'm accessing image related，functionality from a pre-installed，python function。and
    this one's just kind of amazing if，technology，just import face recognition that
    is a，you access。to that kind of power down here now i，only knew how to figure
    this out by，reading some documentation。
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我突出一些显著的行，这里又是那个pillow库。我正在访问从预安装的python函数中获取与图像相关的功能。这一项相当惊人，只需导入面部识别，你就可以访问这样的强大功能，现在我只知道通过阅读一些文档来弄明白这一点。
- en: but you access the library called face，recognition dot load image file which
    is。a function that does what it means i'm，opening up office。jpg，and then scrolling
    down here to the。of the，blue is comments recall this line of，code here，is all
    that's required in python to use。the face recognition library find all of，the
    face locations in a given image and。
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 你调用了一个名为face recognition dot load image file的库，这是一个功能，做它所说的事情，我正在打开office.jpg，然后向下滚动到蓝色的注释部分，回想一下这行代码，是使用面部识别库查找给定图像中所有面部位置所需的全部内容。
- en: store them in a list，called face locations this line of code。here is just a
    python loop that iterates，over every face。![](img/ba5c84256d1c630ab124e64119667f77_105.png)
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 将它们存储在名为face locations的列表中，这行代码只是一个python循环，遍历每个面孔。![](img/ba5c84256d1c630ab124e64119667f77_105.png)
- en: in the faces that were detected and then，these several lines of code here。long
    story short just crop out，individual faces and create a new image，with the found
    faces。![](img/ba5c84256d1c630ab124e64119667f77_107.png)
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在检测到的面孔中，然后这些几行代码，长话短说，就是裁剪出独立的面孔，并创建一个包含找到的面孔的新图像。![](img/ba5c84256d1c630ab124e64119667f77_107.png)
- en: so without getting too much in the，details of the library which are not。that
    intellectually interesting the。![](img/ba5c84256d1c630ab124e64119667f77_109.png)
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在不深入图书馆细节的情况下，这些内容并不是特别有趣的。![](img/ba5c84256d1c630ab124e64119667f77_109.png)
- en: features are interesting to us for now，let me run python of detect。pi let me。![](img/ba5c84256d1c630ab124e64119667f77_111.png)
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们对这些功能很感兴趣，让我运行python来检测。pi让我。![](img/ba5c84256d1c630ab124e64119667f77_111.png)
- en: thing，and voila if i zoom in here we see，every other，photograph。cropped out
    as indeed an individual face。![](img/ba5c84256d1c630ab124e64119667f77_113.png)
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，看看这里，如果我放大，我们看到其他所有照片。被裁剪成了独立的面孔。![](img/ba5c84256d1c630ab124e64119667f77_113.png)
- en: so if you've ever noticed a little，squ*re on yourself and facebook when，uploading
    a photo。this is exactly the kind of code that，facebook and others，execute that。well
    you know what how about this in the，same office photo，um you know there's one
    person that。always seems to stand out no one really，likes him and that's toby。
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你曾经注意到在自己和facebook上传照片时的小方块。这正是facebook和其他人执行的代码。好吧，你知道在同一张办公室照片中，有一个人总是显得与众不同，没人真的喜欢他，那就是toby。
- en: '![](img/ba5c84256d1c630ab124e64119667f77_115.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba5c84256d1c630ab124e64119667f77_115.png)'
- en: what if we had sort of a mug shot of，toby in a separate file like this。![](img/ba5c84256d1c630ab124e64119667f77_117.png)
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们有toby的单独照片，比如这样。![](img/ba5c84256d1c630ab124e64119667f77_117.png)
- en: can we find toby in a crowd among these，people in the office well we can let
    me。go ah**d now and run a program called，recognize。pie，which you're welcome to
    look at online。it's similar lines of code it's not，terribly many。![](img/ba5c84256d1c630ab124e64119667f77_119.png)
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能在这些办公室的人群中找到Toby吗？当然可以，让我现在运行一个叫**recognize.py**的程序，你可以在线查看。它的代码行类似，没多少。![](img/ba5c84256d1c630ab124e64119667f77_119.png)
- en: that is going to do some thinking，it's opening up both the office jpeg and。this
    one and notice what just happened，if i zoom in，great big，green box around his
    face have indeed。been recognized，so again i'll just glance at the code，this time
    if i open up recognize。pi。it's a few more lines of code but again，other things。
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这将进行一些思考，它正在打开办公室的jpeg和这个文件，注意刚刚发生了什么，如果我放大，可以看到他脸部周围确实有一个大大的绿色框被识别出来了。所以，回顾一下代码，这次如果我打开**recognize.py**，它多了几行代码，但仍然是其他内容。
- en: '![](img/ba5c84256d1c630ab124e64119667f77_121.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba5c84256d1c630ab124e64119667f77_121.png)'
- en: i'm loading toby。jpg and i'm loading，office。jpg，and then there's some more code
    here。that's looking for toby looking for toby，and then drawing a big green box
    around。the face that is ultimately found，so again at the end of the day it's just。loops
    it's just functions it's just，variables but now the functions are。
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 我正在加载**toby.jpg**和**office.jpg**，然后这里还有一些代码在寻找Toby，寻找Toby，然后在他找到的脸周围画一个大大的绿色框。所以说，归根结底，它只是循环，函数和变量，但现在这些函数是。
- en: pretty darn fancy and powerful，because again they're taking advantage，of all
    of these other features。that we ourselves have implemented in a，language like
    c，uh or have um now seen glimpses of。within the world of python，well let's do
    another one let me go，ahead and open up real quickly。one of these，2d barcodes
    a so-called qr code let me，go ah**d and create a file called，qr。
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 相当华丽且强大，因为它们充分利用了我们自己在像C语言这样的语言中实现的所有其他特性，或者现在在Python世界中窥见的一些特性。好吧，让我们再做一个，我来快速打开其中一个2D条形码，也就是所谓的二维码，让我创建一个名为**qr.py**的文件。
- en: pi and in this file let me go ah**d，and do this，import the operating system
    library for。reasons we'll soon see，and let me import the qr code library，which
    will do。all of the hard work for me let me go，ahead and create an image called，making。and
    let me paste in this url of one of，the course's lecture videos for instance。
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个文件中，让我导入操作系统库，原因很快就会明了，然后让我导入二维码库，这将为我完成所有的艰苦工作。接下来，让我创建一个名为**making**的图像，并粘贴课程讲座视频的URL，比如说。
- en: and then let me go ah**d and save this，image as qr。png，portable network graphic
    as indeed a png。other things，and then let me actually open this thing，up open
    up system。actually nope that's fine let me keep it，simple we don't need the os
    library。no we do let's go ah**d and open it up，with openqr。png，so three lines
    of code make a qr code。
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 然后让我将这个图像保存为**qr.png**，可移植网络图形，确实是一个png文件。其他东西，然后让我实际上打开这个，打开系统。其实不，这样也好，让我保持简单，我们不需要操作系统库。不，我们确实需要，让我打开它，使用**open
    qr.png**，所以三行代码就可以生成二维码。
- en: with that url。![](img/ba5c84256d1c630ab124e64119667f77_123.png)
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 带着这个URL。![](img/ba5c84256d1c630ab124e64119667f77_123.png)
- en: save it as qr。ping and open the file，three lines of code let me go ah**d and，run
    python of qr dot pi。![](img/ba5c84256d1c630ab124e64119667f77_125.png)
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 保存为**qr.ping**并打开文件，三行代码让我运行**python qr.py**。![](img/ba5c84256d1c630ab124e64119667f77_125.png)
- en: voila it was pretty fast if you would，like to take out your own，iphone or android
    phone turn on the。camera if your phone supports this，and scan this 3d barcode
    by awkwardly，just pointing your phone。![](img/ba5c84256d1c630ab124e64119667f77_127.png)
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 瞧，速度相当快，如果你想拿出自己的iPhone或Android手机，打开相机，如果你的手机支持这一功能，就可以通过尴尬地指向这个3D条形码来扫描它。![](img/ba5c84256d1c630ab124e64119667f77_127.png)
- en: at the lecture as we speak it should，open up youtube for you，hopefully and with
    such ease。i apologize for to those yes thank you，for showing me what you're now
    seeing i。apologize for doing that yet again，never gets old but all we've done
    is，embed in a two-dimensional。format details of which we won't go into，in class
    a url，which suggests that you can store。
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在讲座进行时，它应该轻松地为你打开YouTube。我为此向你们道歉，是的，感谢你们告诉我你们现在看到的东西。我再次为此道歉，这真是再正常不过了，但我们所做的只是以二维格式嵌入了一些细节，这些细节我们将在课堂上不深入讨论，其中包含一个URL，暗示着你可以存储。
- en: anything inside of these 2d barcodes and，your camera，can the software running
    on your phones。these days decode these things，for you well let me do something
    else，this time involving。another sense this one listening let me，go into a file
    called，listen。pi and let me go ah**d and do。and get，by using，then，let me just
    send it all to lowercase，just to keep things simple。
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这些2D条形码中的任何内容，以及你的相机，这些天手机上运行的软件都可以为你解码这些东西。让我做点别的，这次涉及到另一个感官，这个是听觉。让我进入一个名为`listen.py`的文件，接下来让我去做，使用，然后让我把所有内容转换为小写，以保持简单。
- en: and now let me do this once i get the，user's words let me go ah**d and say if，the
    word hello。is in their words go ah**d and，print out hello to you too so if they。say
    hello i want to say hello back，l if how are you in words，something like。i am well
    thanks as the computer uh，l if goodbye in words，then let me go ah**d and say something。
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我做这件事，一旦我获取到用户的词语，接下来让我说，如果"hello"在他们的词中，就继续打印"hello to you too"。所以如果他们说"hello"，我想说回去，如果在词中是"how
    are you"，类似于"我很好，谢谢"。如果在词中是"goodbye"，那么让我继续说点什么。
- en: reasonable like，goodbye to you two，and then lastly else let me go ah**d and。print
    out just something like huh，unrecognized so if you will here's the。![](img/ba5c84256d1c630ab124e64119667f77_129.png)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 合理的像"再见你也好"，然后最后，如果没有匹配的，就让我继续打印出像"嗯，无法识别"之类的东西。![](img/ba5c84256d1c630ab124e64119667f77_129.png)
- en: an ai，right a program that's gonna somehow，interact with me the human。typing
    in phrases to this thing so if i，did it correctly let me go ah**d and run，python
    of listen。pi。![](img/ba5c84256d1c630ab124e64119667f77_131.png)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 一个AI，对吧，一个将以某种方式与我这个人互动的程序。我输入短语给这个东西，所以如果我做对了，接下来让我去运行`listen.py`。![](img/ba5c84256d1c630ab124e64119667f77_131.png)
- en: i did not do something correctly uh，oh not is in okay sorry，let me go ah**d
    and run python of，listen。pi say something i'll say hello，oh hello to you too what
    a nice friendly。program uh let me ask it how it is，how are you question mark it
    just seems，to detect that。let me go ah**d and say okay goodbye for，now and it
    detects that too。
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有正确地做某件事，哦，不在，好的抱歉，让我继续运行`listen.py`。说点什么，我会说你好，哦，你也好，真是个友好的程序。让我问它怎么样，"你好吗？"
    它似乎能检测到。让我继续说，"好的，再见"，它也能检测到。
- en: because goodbye is in the phrase that，the user typed in but if i say something，like
    hey there。it's not recognized so pretty cool we，can use very simple，string comparisons
    using the in。preposition to detect things，but i bet you know i bet if we use the。right
    library we can really make this，more powerful too let me go ah**d and，just like
    i imported。
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 因为"goodbye"在用户输入的短语中，但如果我说点像"hey there"，就无法识别。所以很酷，我们可以使用非常简单的字符串比较，使用`in`介词来检测内容，但我敢打赌，如果我们使用正确的库，我们可以让这个变得更强大。让我继续，就像我导入的那样。
- en: facial recognition let me import speech，recognition in python which is yet。another
    library that i pre-installed，let me go ah**d and now do this，recognizer equals
    speech。recognition dot recognizer，and this is just creating a variable，literally。the
    documentation for using this library，then let me go ah**d and do this。
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 面部识别让我在Python中导入语音识别，这又是一个我预先安装的库。让我继续，现在做这个，`recognizer`等于`speech.recognition.recognizer`，这只是创建一个变量。使用这个库的文档，然后让我继续。
- en: also from the documentation with speech，recognition，dot mic micro phone。as source
    so this is opening up my，microphone in some sense，again just following the documentation。let
    me go ah**d and say，say something to the user and then after，that let me go ah**d
    and。equal to the，recognizers listen function，passing in my microphone as the source，and
    now down here。
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 还要从文档中导入`speech.recognition.microphone`作为源，这样实际上是在某种意义上打开我的麦克风，再次遵循文档。让我继续说，给用户说点什么，然后在那之后，让我继续，等于`recognizer.listen`函数，将我的麦克风作为源传入，然后在这里。
- en: let me go ah**d and say print out you，said，and below that i will print out，recognizer。dot
    recognize that's the hardest part，today so far for some reason google。audio all
    right so what's going on，this line of code these lines of code。here are opening
    up a connection to my，microphone on my mac，it's then using the speech recognition。
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 让我继续说，打印出你说了什么，然后我将在下面打印出`recognizer.recognize`，这是今天为止最难的部分，出于某种原因，谷歌音频，好的，那么这些代码行在做什么？这里是打开与我在Mac上的麦克风的连接，然后使用语音识别。
- en: library to listen to my microphone，and storing the audio from my microphone，in
    a variable called。![](img/ba5c84256d1c630ab124e64119667f77_133.png)
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 用于监听我的麦克风，并将音频存储在一个名为的变量中。![](img/ba5c84256d1c630ab124e64119667f77_133.png)
- en: audio these lines of code down here are，literally printing you said，and then
    it's passing to google。thegoogle。com。![](img/ba5c84256d1c630ab124e64119667f77_135.png)
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的代码行字面上在打印你所说的内容，然后它传递给google。thegoogle。com。![](img/ba5c84256d1c630ab124e64119667f77_135.png)
- en: the file of audio that i just recorded，on my microphone，and it's printing out
    whatever comes。back from google so let's see what comes，out again crossing my
    fingers that i，didn't mess up。it's pretty good speech recognition it's，up to google，but
    now let's make things a little。fancier and actually respond to the，add back，some
    of the previous logic and say。
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 我刚刚在麦克风上录制的音频文件，它打印出从google返回的任何内容，所以让我们看看又会出现什么，交叉我的手指希望我没有搞砸。这是相当不错的语音识别，交给google，但现在让我们把事情做得更花哨，实际上回应，添加一些之前的逻辑并说。
- en: something like this if hello，in words then go ah**d and print out，like before。uh
    hello to you too l if，uh how are you in the words that have，out，i am well thanks
    and down here。if i said goodbye in words then go ah**d，goodbye to you too，recognize，this
    right。let's now go ah**d and do python of，listen。pie，hello there oh damn it，okay
    stand by uh oh。
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 如果hello在words中，那么就继续打印，像之前那样。呃，你好，我很好，谢谢。如果我在words中说再见，那么就继续，再见你也是，识别到这一点了吗。现在让我们继续进行python的listen。pie，hello
    there，哦，该死，好的，稍等。
- en: sorry uh let me do a find and replace，i called the variable words instead of。audio
    and i just executed a fancy，command to replace it everywhere so。audio is what
    i meant to say this time，now let's go ah**d and run this python，of listen。pi。hello
    world damn it，audio data is not interval this is a bug，notes，her，first time。
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 抱歉，让我找一找并替换一下，我把变量命名为words而不是audio，我刚刚执行了一个复杂的命令到处替换，所以这次我想说的是audio，现在让我们去运行这个python，listen。pi。hello
    world，该死，音频数据不是间隔，这是一个bug，记录在案，这是我第一次。
- en: but the wrong way let me change my，variable back to words，okay what i forgot
    to do was call one。line of code here that's literally，sitting in front of me，i
    need to convert the recognizer's。return value，recognize google audio i need to
    store，the return value。of passing the audio to google and，storing the resulting
    text here。
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 但我以错误的方式来做，让我把变量改回words，好的，我忘了调用一行代码，这实际上就在我面前，我需要转换识别器的返回值，识别google音频，我需要存储将音频传递给google的返回值，并在这里存储结果文本。
- en: and so i have restored using the words，variable here，all right now let me go
    ah**d and run，python。very nice how are you today。![](img/ba5c84256d1c630ab124e64119667f77_137.png)
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我在这里恢复了使用words变量，好吧，现在让我继续运行python。非常好，你今天怎么样。![](img/ba5c84256d1c630ab124e64119667f77_137.png)
- en: all right so there we have an even more，compelling artificial intelligence。granted
    it's not that intelligent it's，just looking for pre-ordained strings。but i bet
    we can do something even more，and in fact let me go ah**d and step，can't help。do
    something in real time on a big fancy，pc here in the theater。
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，所以我们有了一个更引人注目的人工智能。诚然，它并不是那么智能，它只是在寻找预先设定的字符串。但我敢打赌我们能做得更好，实际上让我继续进行，无法自拔。在这个剧院的大型高级PC上做一些实时的事情。
- en: we are running some other python program。![](img/ba5c84256d1c630ab124e64119667f77_139.png)
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在运行其他的python程序。![](img/ba5c84256d1c630ab124e64119667f77_139.png)
- en: on a cpu that's fast enough to do this，in real time and we've connected one
    of。our cameras to that pc，so that what you're about to see is the，result of one
    of our cameras。being wired into this pc running that，camera's input into python
    software，running on that pc。and we have trained the pc using this，python software，to
    recognize certain images in the past。
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个足够快的cpu上能够实时处理，我们已将我们的一个摄像头连接到那台pc，所以你即将看到的是我们的一台摄像头的结果，它被连接到这台运行着python软件的pc，并且我们已经使用这个python软件训练了这台pc，识别过去的某些图像。
- en: and let's see if we can't do this，me on，go ah**d and，all right i think we are
    live。so again you see my mouth moving in，lockstep with，uh einstein here his lips
    are matching。mine his head movements are moving，matching mind we can even be inquisitive，if
    my eyebrows go up。my mouth go through this way this way，and you can see that the
    python program，in real time。
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看能不能做到这一点，继续，我想我们是在线的。所以你再次看到我嘴巴的动作与，呃，爱因斯坦在同步，他的嘴唇与我的相匹配，他的头部动作也在匹配，我们甚至可以表现得好奇，如果我的眉毛抬起，我的嘴巴就会这样那样移动，你可以看到这个python程序实时运行。
- en: is mapping my facial movements onto，known as a，deep fake rung wrong could we
    try out。who similarly is matching a big smile，gets a little fake at some point
    but。again if we pre-rendered all of this，instead of doing it live the pc could。probably
    do an even better job，uh how about could we uh invite harvard，president larry
    bakau。
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这是将我的面部动作映射到深度伪造技术上，错误的环节，我们能试一下吗？类似于配合一个大微笑的人，某些时候会有些失真。但是，如果我们预先渲染所有这些，而不是现场进行，计算机可能会做得更好，能否邀请哈佛校长Larry
    Bakau加入呢？
- en: this is cs50 harvard university's，introduction to the intellectual，enterprises
    of computer science。and the art of programming how about，this is cs50 yale university's，introduction
    to the intellectual。enterprises of computer science，and the art of programming
    now at this。point the real world implications of，this should be getting increasingly，this
    on。
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这是哈佛大学的CS50课程，介绍计算机科学的知识体系和编程艺术。这是耶鲁大学的CS50课程，介绍计算机科学的知识体系和编程艺术。此时，现实世界的影响应该越来越明显。
- en: instagram and tick tock and the like，days，which are essentially doing the same。thing
    and you can see the image doesn't，quite keep up with me if i start moving。a little
    too quickly right now，this has very real world implications in。the world of politics
    government，business and really just the real world。
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Instagram、TikTok等平台，实际上在做同样的事情。你可以看到图像并没有完全跟上我，如果我现在开始稍微快速移动，这在政治、政府、商业和现实世界中都有非常真实的影响。
- en: more generally because i'm essentially，putting in someone else's mouth。my own
    words and while it's clear that，these examples thus far。aren't really that compelling
    if i start，to move too much you see that things。start to get out of sync，just
    imagine that if we wait one year。
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 更一般来说，因为我本质上是在用别人的嘴说我的话，尽管迄今为止这些例子并不那么引人注目，但如果我开始移动太多，你会看到事情开始失去同步，想象一下如果我们再等一年。
- en: our computers are going to be twice as。![](img/ba5c84256d1c630ab124e64119667f77_141.png)
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的计算机将会变得双倍强大。![](img/ba5c84256d1c630ab124e64119667f77_141.png)
- en: fast with even more memory and the like，software is only getting better and
    more。powerful the libraries and the，trained，and so among the themes for the coming。weeks
    of the class is not just，how to do some things with technology，and how to write
    code。but frankly asking the much bigger more，important picture question of。
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 软件的速度和内存等都在不断提升，库和训练也在改进，接下来几周课程的主题不仅是如何使用技术和编写代码，而是直面更大、更重要的问题。
- en: should you do certain things with，technology and should you，actually write such
    code we did ask。for their permission，in advance to spoof them in this way but，we
    thought we would more playfully end。with just a couple of other examples，uh that
    you perhaps see on instagram，tick tock and the like。wrong shin could we invite
    pam to join，today。
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 我们是否应该用技术做某些事情，是否真的应该写这样的代码？我们提前征得了他们的同意，以这种方式调侃他们，但我们想更玩味地结束，给出几个你可能在Instagram、TikTok等上看到的例子。可以邀请Pam加入今天的讨论吗？
- en: '![](img/ba5c84256d1c630ab124e64119667f77_143.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba5c84256d1c630ab124e64119667f77_143.png)'
