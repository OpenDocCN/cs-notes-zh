- en: 哈佛 CS50-WEB ｜ 基于Python ／ JavaScript的Web编程(2020·完整版) - P6：L1- github操作 2 (github冲突处理与分支)
    - ShowMeAI - BV1gL411x7NY
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈佛 CS50-WEB ｜ 基于Python ／ JavaScript的Web编程(2020·完整版) - P6：L1- github操作 2 (github冲突处理与分支)
    - ShowMeAI - BV1gL411x7NY
- en: to the code what happens if we both make，changes to the same part of the code
    and。then try to sync up our work together，what's going to happen well we're gonna。run
    into some sort of conflict because，I've made changes to the same line that。my
    colleague has been making changes to。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们都对代码的同一部分进行了更改，然后尝试同步我们的工作，会发生什么呢？我们将会遇到某种冲突，因为我对同一行进行了更改，而我的同事也对其进行了更改。
- en: '![](img/2a88354eae8a6e05db15c15713ce6e45_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a88354eae8a6e05db15c15713ce6e45_1.png)'
- en: and that type of conflict is called a，merge conflict that when trying to merge。my
    changes with the changes that someone。![](img/2a88354eae8a6e05db15c15713ce6e45_3.png)
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这种类型的冲突称为合并冲突，当试图将我的更改与其他人的更改合并时。![](img/2a88354eae8a6e05db15c15713ce6e45_3.png)
- en: else has made we run into a situation，where suddenly git doesn't know what to。do
    there are two different sets of，changes and we need to figure out how to。resolve
    them and what to do when we run，into this sort of conflict so here's。what's gonna
    happen if ever we run into，this sort of merge conflict it just。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 其他情况让我遇到了一个情形，突然之间 git 不知道该怎么做，因为有两个不同的更改集，我们需要弄清楚如何解决这些冲突，以及在遇到这种冲突时该怎么做，所以如果我们真的遇到这种合并冲突，会发生什么。
- en: generally gonna happen if I try and hole，in or merge in some changes from。elsewhere
    so let's say I run git PO but，there's some conflicting commits。![](img/2a88354eae8a6e05db15c15713ce6e45_5.png)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我试图从其他地方合并或拉取一些更改时，通常会发生这样的情况。假设我运行 git PO，但有一些冲突的提交。![](img/2a88354eae8a6e05db15c15713ce6e45_5.png)
- en: something that is online that conflicts，with my current version of the。repository
    what I'll get is a message，like this some conflict saying merge。conflicts in some
    file have failed you，need to fix the conflicts and then。commit the results so
    what might those，conflicts look like well generally the，like this。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些在线内容与我当前版本的仓库冲突，我会收到一条消息，像这样，有一些冲突，表示某些文件的合并冲突失败，你需要解决这些冲突，然后提交结果。那么这些冲突可能是什么样的呢？通常是这样的。
- en: git is automatically going to add some，metadata to the file to describe the。things
    that it can't quite figure out，and it's a lot of cryptic looking。information but
    we can distill it down，into a couple of key parts everything in。![](img/2a88354eae8a6e05db15c15713ce6e45_7.png)
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: git 会自动在文件中添加一些元数据，以描述它无法完全理解的内容，虽然信息看起来非常晦涩，但我们可以将其提炼为几个关键部分。所有内容在。![](img/2a88354eae8a6e05db15c15713ce6e45_7.png)
- en: between these arrows at the top and the，equal signs here are your changes the。![](img/2a88354eae8a6e05db15c15713ce6e45_9.png)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些箭头顶部和这里的等号之间是你的更改。![](img/2a88354eae8a6e05db15c15713ce6e45_9.png)
- en: changes I have made on my version of the，repository that are somehow conflicting。with
    some other changes everything，between these equal signs and these。arrows down
    here are the remote changes，the changes from github that I'm trying。to pull in
    that somehow are conflicting。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我在仓库的版本中所做的更改与其他一些更改发生了冲突，这些等号和下面的箭头之间的内容是远程更改，即我试图拉取的来自 github 的更改，这些更改以某种方式发生了冲突。
- en: '![](img/2a88354eae8a6e05db15c15713ce6e45_11.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a88354eae8a6e05db15c15713ce6e45_11.png)'
- en: with what I've currently been working on，and then this sequence of numbers and。![](img/2a88354eae8a6e05db15c15713ce6e45_13.png)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我目前正在处理的内容，以及这一串数字和。![](img/2a88354eae8a6e05db15c15713ce6e45_13.png)
- en: characters here is the hash of the，conflicting commits so every commit gets。a
    hash just some sequence of numbers and，characters that is likely to be unique。that
    helps to identify any particular，commit and yet will automatically。generate a
    hash every time you make a。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的字符是冲突提交的哈希值，因此每个提交都有一个哈希值，它是一串数字和字符，可能是唯一的，有助于识别任何特定的提交，并且每次你进行提交时，git 会自动生成一个哈希。
- en: '![](img/2a88354eae8a6e05db15c15713ce6e45_15.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a88354eae8a6e05db15c15713ce6e45_15.png)'
- en: commit and we'll see in a moment how you，can look at all of those possible。commits
    but here get is just helpfully，telling us this is the commit that is。causing the
    conflict just for our own，reference in order to address this merge。conflict the
    way we do it is we first，need to remove all of these merge，file。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 提交，稍后我们将看到你如何查看所有可能的提交，但这里 git 只是很有帮助地告诉我们，这是导致冲突的提交，仅供我们参考。为了解决这个合并冲突，我们首先需要删除所有这些合并文件。
- en: and decide what we want what we want as，the resolution of the conflict so maybe。I
    want to keep my version of the changes，maybe I want to keep the remote version。of
    the changes the changes that were，already on github for example or maybe I。want
    to combine them in some intelligent，way I the programmer get to make that。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 并决定我们想要的冲突解决方案，因此也许我想保留我的版本的更改，或者我想保留远程版本的更改，已经在GitHub上的更改，或者我想以某种智能的方式将它们结合起来。我作为程序员可以做出这样的决定。
- en: decision I get to look at my version and，the conflicting version and decide
    how I。![](img/2a88354eae8a6e05db15c15713ce6e45_17.png)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定查看我的版本和冲突版本，并决定如何处理我。![](img/2a88354eae8a6e05db15c15713ce6e45_17.png)
- en: want to resolve that conflict I'll，remove any of the blank lines and then。commit
    the changes to say this is what I。![](img/2a88354eae8a6e05db15c15713ce6e45_19.png)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这个冲突，我将删除任何空白行，然后提交更改，说明这是我。![](img/2a88354eae8a6e05db15c15713ce6e45_19.png)
- en: want the merged version of this program，to look like so let's now take a look
    at。an example of a merged conflict in，action to see how one might arise and。how
    we might actually go on going about，dealing with a merge conflict should it。happen
    so I on my computer now I'm going，to make a change to this page I'm going。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这个程序的合并版本看起来是这样的，现在让我们看一个合并冲突的例子，看看它是如何产生的，以及我们如何处理合并冲突。现在我在我的电脑上，打算对这个页面进行更改。
- en: to say add a second exclamation point，one exclamation point wasn't enough I'll。![](img/2a88354eae8a6e05db15c15713ce6e45_21.png)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 说到添加第二个感叹号，一个感叹号不够，我会。![](img/2a88354eae8a6e05db15c15713ce6e45_21.png)
- en: add in a second exclamation point to，this h1 and I'll go ahead and commit。those
    changes I'll say git commit - am，add exclamation point and I'll go ahead。and commit
    those changes I saved this，new version of the program but I'm not。![](img/2a88354eae8a6e05db15c15713ce6e45_23.png)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个h1中添加第二个感叹号，我将继续提交这些更改，我会说`git commit -am "add exclamation point"`，然后继续提交这些更改，我保存了这个程序的新版本，但我并没有。![](img/2a88354eae8a6e05db15c15713ce6e45_23.png)
- en: going to push the code yet instead what，I'm going to do is simulating someone。else
    working on the same file maybe，someone else on github has decided you。know what
    for this h1 what we'd really，like to do is add some style to it with。some inline
    style by saying let's give，it a color of blue for example so。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我还不会推送代码，而是要模拟其他人在同一个文件上工作，也许GitHub上的其他人决定，你知道吗，对于这个h1，我们真的想做的是通过添加一些内联样式来给它添加样式，例如，将它的颜色设置为蓝色。
- en: they've added some CSS we'll go ahead，and write a commit message what do they。do
    they've added some style and we'll，commit those changes and now what we've。created
    is what is going to be a merge，conflict that someone else on github has。![](img/2a88354eae8a6e05db15c15713ce6e45_25.png)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 他们添加了一些CSS，我们将继续写一个提交消息，他们做了什么，他们添加了一些样式，我们将提交这些更改，现在我们创建的将是一个合并冲突，其他人在GitHub上已经。![](img/2a88354eae8a6e05db15c15713ce6e45_25.png)
- en: made a change to this line changing the，color to blue of this particular h1
    tag。for example and I meanwhile have also，made a change to this same line adding。an
    exclamation point and get entirely，operates in terms of like adding lines。and
    removing lines given that we both。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行进行了更改，将这个特定的h1标签的颜色更改为蓝色。例如，我同时也在同一行进行了更改，添加了一个感叹号，并且在添加行和删除行方面完全操作，因为我们都。
- en: '![](img/2a88354eae8a6e05db15c15713ce6e45_27.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a88354eae8a6e05db15c15713ce6e45_27.png)'
- en: made changes to the same line get is，gonna have a very hard time figuring out。what
    to do in this scenario so here in，my terminal I'll go ahead and run git。pull because
    I want to pull in those way，to change this and when I do I'll see。that all right
    I get this message，conflict there was a merge conflict in，hello dot HTML。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一行上进行更改的情况下，git会很难确定该如何处理。因此在我的终端中，我将运行`git pull`，因为我想获取这些更改。当我这样做时，我会看到，好的，我收到这个消息，冲突，在hello.html中发生了合并冲突。
- en: the automatic merge failed because，normally get will try to merge files。automatically
    if it can but sometimes it。![](img/2a88354eae8a6e05db15c15713ce6e45_29.png)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 自动合并失败，因为通常情况下，git会尝试自动合并文件，但有时会。![](img/2a88354eae8a6e05db15c15713ce6e45_29.png)
- en: can't so now I need to fix the conflicts，and then commit the results so let's
    go。ahead and look at what's inside of hello，dot HTML and what you'll notice is
    a。whole bunch of these markers and my text，editor just so happens to highlight
    them。for me so that I can see them a little，more clearly but this is just。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我需要修复冲突，然后提交结果，所以让我们继续查看hello.html里面的内容，你会注意到里面有很多这些标记，而我的文本编辑器正好为我高亮显示它们，以便我能更清晰地看到，但这只是。
- en: highlighting provided by the text editor，it's not actually part of the text。itself
    but you'll notice all of these，arrows and then all of these equal signs。and in
    between here's my version of this，line of code the line of code with the。extra
    exclamation point at the end of it，down below here is the remote。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 文本编辑器提供的高亮显示实际上并不是文本本身的一部分，但你会注意到所有这些箭头和等号。在这里是我的这行代码，代码行末尾带有额外的感叹号，下面是远程的。
- en: conflicting version of the same code the，version that was modified on github
    that。I am now trying to pull in this is the，version that says we want style color。blue
    inside of the inline style，for this particular h1 element and now。what I need
    to do is somehow figure out，how to merge these two together how do I。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 相同代码的冲突版本，修改后的版本在GitHub上，而我现在正试图拉入的版本是，这个版本表明我们希望在这个特定h1元素的内联样式中使用蓝色。现在我需要做的是以某种方式弄清楚，如何将这两个合并在一起，我该怎么做。
- en: want to resolve this conflict well in，this particular case I might like to。resolve
    this conflict by just taking the，best of both worlds if the person on。github wanted
    to add a style attribute，to this h1 element and I wanted the，extra exclamation
    point。I can do both I can go ahead and just，add an extra exclamation point and
    then。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 想要解决这个冲突，在这个特定案例中，我可能会喜欢通过同时采纳两者的优点来解决这个冲突。如果在GitHub上，有人想要为这个h1元素添加一个样式属性，而我想要额外的感叹号，我可以做到两者，我可以继续添加一个额外的感叹号，然后。
- en: get rid of my version and then also get，rid of these commit markers so go ahead。and
    remove those I basically modify the，file until I'm satisfied with it until I。think
    that all right this is the way I，wanted to resolve the conflict one。person added
    color one person added，punctuation the way to resolve it in。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 摆脱我的版本，然后也去掉这些提交标记，所以继续。去掉它们，我基本上修改这个文件，直到我对它满意，直到我觉得好的，这就是我想要的解决冲突的方式。一个人添加了颜色，一个人添加了标点符号，解决它的方法是。
- en: this case is just use both of them but，here is where some human intuition comes。in
    the human programmer doesn't mean to，look at this file and figure out how。exactly
    do we want to resolve this，conflict how do we want to figure out。how to take these
    different changes and，merge them all together but once we're。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这个案例是同时使用它们，但这里就需要一些人类直觉。程序员并不是要查看这个文件并弄清楚，究竟我们想如何解决这个冲突，如何弄清楚如何将这些不同的更改合并在一起，但一旦我们。
- en: '![](img/2a88354eae8a6e05db15c15713ce6e45_31.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a88354eae8a6e05db15c15713ce6e45_31.png)'
- en: satisfied with it we can go ahead and，commit the results I can say git commit。dash
    and fix merge conflict and all，right we fixed the merge conflict and。now if I
    push those results back up to。![](img/2a88354eae8a6e05db15c15713ce6e45_33.png)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 满意之后，我们可以继续提交结果，我可以说git commit -m "fix merge conflict"，好的，我们修复了合并冲突，现在如果我将这些结果推送回去。![](img/2a88354eae8a6e05db15c15713ce6e45_33.png)
- en: github when that is done，refresh the page I now see the updated。line of code
    on github with the h1 that，has both the inline styling and the。![](img/2a88354eae8a6e05db15c15713ce6e45_35.png)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当在GitHub上完成时，刷新页面，我现在在GitHub上看到的更新代码行带有内联样式的h1，和。![](img/2a88354eae8a6e05db15c15713ce6e45_35.png)
- en: extra punctuation because I've resolved，the merge conflict and then I've pushed。that
    information back up to github as，well there are a couple of other git。commands
    that are just useful to know，about I mean there are many but we'll。talk about
    a couple right now the first，of which is get log get log is useful if。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的标点符号因为我已经解决了合并冲突，然后我把这些信息也推送回了GitHub，还有其他一些git命令是非常有用的，我的意思是有很多，但我们现在会谈论几个，第一个是git
    log，如果。
- en: you ever need to keep track of all of，the changes that you've made to your。code
    you want to keep track of all of，the commits that have been made in this。particular
    repository all you need to do。![](img/2a88354eae8a6e05db15c15713ce6e45_37.png)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要跟踪你对代码所做的所有更改，想要跟踪在这个特定库中所有的提交，你只需。![](img/2a88354eae8a6e05db15c15713ce6e45_37.png)
- en: is run the command git log and get will，spit out a bunch of messages that look。![](img/2a88354eae8a6e05db15c15713ce6e45_39.png)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 运行命令 `git log`，它会输出一堆看起来像这样的信息。![](img/2a88354eae8a6e05db15c15713ce6e45_39.png)
- en: like this describing each of your，commits for each commit it'll tell you。what
    the commit hash is such that you，can reference it more easily it'll tell。you who
    made the commit it will tell you，the date on which that commit was made。and it
    will also tell you the commit，message so if you need to very quickly。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 就像这样，描述每一个提交，对于每个提交，它会告诉你提交哈希，以便你可以更轻松地引用，它会告诉你是谁进行了提交，也会告诉你该提交的日期，并且还会告诉你提交信息，这样如果你需要快速查看。
- en: look back and see you know on what day，was this feature added or who added this。part
    to the webpage you can just look，through the git log，find the commit in question
    and then。you'll know which commit it happened to，be also helpful is if you realize
    that。you've made a change that you didn't，mean to and you want to go back to a。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 回顾一下，看看这个功能是在什么日期添加的，或者谁将这一部分添加到网页上，你可以通过查看 `git log`，找到相关的提交，然后你就会知道是哪次提交。此外，如果你意识到自己进行了不想要的更改，并想回到之前的状态，这也会很有帮助。
- en: previous commit then in that case you，can use a command called git reset which。has
    a number of different possible ways，to use it but get reset in effect we'll。![](img/2a88354eae8a6e05db15c15713ce6e45_41.png)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于上一个提交，如果是这种情况，你可以使用一个名为 `git reset` 的命令，它有许多不同的用法，但 `git reset` 实际上会。![](img/2a88354eae8a6e05db15c15713ce6e45_41.png)
- en: take the current state of the repository，and revert it back to an older state
    of。![](img/2a88354eae8a6e05db15c15713ce6e45_43.png)
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 获取当前状态的代码库，并将其恢复到一个较早的状态。![](img/2a88354eae8a6e05db15c15713ce6e45_43.png)
- en: the repository for example so a couple，of ways you can use it or like this you。can
    do git reset - - hard meaning hard，reset reset everything back - and then。you
    can plug in a commit hash so get log，as you might recall from before gave you。the
    commit hashes for each of the，various different commits if I want to。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 比如这个代码库，有几种方法可以使用它，像这样，你可以执行 `git reset --hard`，这意味着硬重置，将一切重置回去，然后你可以插入一个提交哈希，所以
    `git log`，如你之前可能记得的那样，为你提供了每个不同提交的提交哈希，如果我想。
- en: go back to one particular commit I can，say git reset - - hard and then the。commit
    message I want - or the commit，hash that I want to go back to and I'll。go back
    to that commit alternatively I，could say something like git reset - -。hard Origin
    slash master and recall that，origin slash master is the version of my。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我想回到某个特定的提交，我可以说 `git reset --hard`，然后是我想要的提交信息或提交哈希，之后我将返回到该提交。或者，我可以说类似
    `git reset --hard origin/master`，并回想一下，`origin/master` 是我的代码库的版本。
- en: repository that's currently on github so，if I want to take my current version
    of。the repository and reset it back to，whatever is on github then I can use a。command
    like this in order to do so so，you run git reset followed by a commit。hash and
    that will reset the current，state of your repository，back to whatever state it
    was in。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这是目前在 GitHub 上的代码库，因此如果我想将当前版本的代码库重置回 GitHub 上的版本，我可以使用类似这样的命令来实现，所以你运行 `git
    reset`，后面跟一个提交哈希，这将把你代码库的当前状态重置回它之前的状态。
- en: previously and there are a number of，other git commands as well that can be。quite
    helpful as you begin working with，larger and larger project projects but。these
    are some of the most helpful and，some of the ones you'll use the most。often are
    just adding files that you，want to keep track of get commit to say。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 还有许多其他的 Git 命令也非常有用，特别是当你开始处理更大项目时，但这些是一些最有帮助的，也是你最常使用的命令，比如添加你想跟踪的文件并使用 `git
    commit`。
- en: I would like to make a save I would like，to save the current state of all of。these
    files push and pull to be able to，upload changes and download changes that。have
    made you've been made to your，repository and then some helpful。commands like reset
    and log and status，just to give you information about your。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我想保存当前所有文件的状态，推送和拉取以便能够上传和下载已更改的内容，以及一些有用的命令，如 `reset`、`log` 和 `status`，只是为了给你关于你的信息。
- en: repository and get you back to an older，State of the repository if you need
    to。but as we begin to work on more and more，projects and especially as we begin
    work。on more sophisticated projects you may，find the just keeping track of one。change
    after another is it nearly as，powerful as you might like it to be and。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 如果需要的话，可以让你回到一个较早的状态，但随着我们开始处理越来越多的项目，尤其是更复杂的项目时，你可能会发现，仅仅追踪一次次更改并没有你想象的那么强大。
- en: so we can explore what might happen in a，hypothetical situation where you begin。making
    some changes to we get repository，for example so let's imagine you make。your first
    commit you make some changes，you make some additional changes and。maybe you realize
    you want to start，working on a new feature to this web。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们可以探讨在一个假设的情况下可能发生的事情，比如你开始对我们的代码库进行一些更改。比如说，让我们想象你进行了第一次提交，做了一些更改，做了一些额外的更改，可能你意识到你想开始工作一个新特性。
- en: application that you've been working on，so you start working on a new feature。then
    you continue working on that new，feature but then you realize suddenly。you know
    what there was a bug in the，original code that I made way back here。and you want
    to go back and fix that bug，but now we're sort of in a tricky spot。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你一直在工作的应用程序，所以你开始工作一个新特性。然后你继续在那个新特性上工作，但突然你意识到，原始代码中有一个错误，你想返回去修复那个错误，但现在我们处于一个棘手的境地。
- en: that we want to fix the bug but we're in，the middle of working on a new feature。so
    what do we do we could go back to，this and try and fix the bug but then。what happens
    to the new feature the，problem is that this structure just。changed after change
    after change is，very linear it only goes one after。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想修复这个错误，但我们正在工作一个新特性。那么我们该怎么办？我们可以返回去尝试修复这个错误，但新特性又会发生什么？问题是，这个结构只是简单地变化，变化之后又变化，非常线性，只能一个接一个地进行。
- en: another after another and oftentimes，when you're working on a project it's。not
    going to operate in a very linear，fashion you're not always working on one。thing
    that immediately follows the thing，before it you might be fixing multiple。bugs
    while working on multiple new，features and you want some way of being。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一次又一次，通常在你工作一个项目时，它不会以非常线性的方式进行，你并不总是工作在一个紧接着前面的事情上，你可能在修复多个错误的同时工作在多个新特性上，你希望有某种方式来处理这些事情。
- en: able to work on all of those things。![](img/2a88354eae8a6e05db15c15713ce6e45_45.png)
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 能够同时处理所有这些事情。![](img/2a88354eae8a6e05db15c15713ce6e45_45.png)
- en: simultaneously and to easily be able to，switch between them and so that is where。branching
    comes into handy branches are，gets way of working on different parts。of the repository
    at the same time and。![](img/2a88354eae8a6e05db15c15713ce6e45_47.png)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 同时能够轻松地在它们之间切换，这就是分支派上用场的地方。分支是同时处理代码库不同部分的好方法。![](img/2a88354eae8a6e05db15c15713ce6e45_47.png)
- en: so you might imagine a situation，unfolding more along these lines you。![](img/2a88354eae8a6e05db15c15713ce6e45_49.png)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可能想象一个这样的情况，逐渐展开。![](img/2a88354eae8a6e05db15c15713ce6e45_49.png)
- en: make your first commit you start to make，changes you make more changes and when。you
    decide that you'd like to start。![](img/2a88354eae8a6e05db15c15713ce6e45_51.png)
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 你进行第一次提交，开始做一些更改，做更多的更改，当你决定想要开始。![](img/2a88354eae8a6e05db15c15713ce6e45_51.png)
- en: working on a new feature for example，rather than keep making changes in one。after
    another after another on this same，branch so to speak I can create a new。![](img/2a88354eae8a6e05db15c15713ce6e45_53.png)
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，针对一个新特性，而不是在同一个分支上一个接一个地进行更改，我可以创建一个新的。![](img/2a88354eae8a6e05db15c15713ce6e45_53.png)
- en: branch I can branch off and say you know，what let's create a new branch and
    start。working on our new feature there and。![](img/2a88354eae8a6e05db15c15713ce6e45_55.png)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 分支，我可以分支出去，说“你知道吗，我们来创建一个新分支，开始在那里工作我们的新特性。”![](img/2a88354eae8a6e05db15c15713ce6e45_55.png)
- en: then keep working on that new feature，there and if I realize later on down the。![](img/2a88354eae8a6e05db15c15713ce6e45_57.png)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后继续在那个新特性上工作，如果我稍后意识到。![](img/2a88354eae8a6e05db15c15713ce6e45_57.png)
- en: road that you know what there was a bug，way back at this commit then I can go。back
    to this commit and create a new，branch where I go ahead and fix that bug。and now
    I have two different branches。![](img/2a88354eae8a6e05db15c15713ce6e45_59.png)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道吗，那里有一个错误，回到这个提交，我可以返回这个提交并创建一个新分支，在那里修复那个错误。现在我有两个不同的分支。![](img/2a88354eae8a6e05db15c15713ce6e45_59.png)
- en: each of which might have different code，on it one of which I've been fixing
    a。bug one of which I've been working on a。![](img/2a88354eae8a6e05db15c15713ce6e45_61.png)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个可能有不同的代码，其中一个我在修复一个错误，另一个我在工作一个新特性。![](img/2a88354eae8a6e05db15c15713ce6e45_61.png)
- en: new feature on for example generally，each of those branches is going to have。a
    name so the master branch is your，default branch which is generally going。to contain
    the up-to-date stable version，of your code and as you're working on。newer things
    newer additional features，you might have some feature branch where。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 新功能例如，通常每个分支都会有一个名字，所以主分支是你的默认分支，通常会包含最新稳定版本的代码，而当你在工作新的事情时，可能会有一些功能分支。
- en: you're working on some other feature for，example and at any given time though。your
    focus is only on one of these two，branches and where your focus is what。the current
    state of your repository is。![](img/2a88354eae8a6e05db15c15713ce6e45_63.png)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你在处理其他功能，例如，在任何时候，你的关注点只在这两个分支中的一个，关注点是你仓库的当前状态。![](img/2a88354eae8a6e05db15c15713ce6e45_63.png)
- en: is designated by something we call the，head so if head is pointing to master。that
    means your repository right now is，working on this branch where you fix the。bug
    but you can change the head you can。![](img/2a88354eae8a6e05db15c15713ce6e45_65.png)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 由我们称之为head的东西来指定，所以如果head指向master，那意味着你的仓库现在在这个修复bug的分支上，但你可以更改head，你可以。![](img/2a88354eae8a6e05db15c15713ce6e45_65.png)
- en: switch what branch you want to look at，and you can check out the feature branch。and
    say let's look at that branch and，begin working on that as well and you。can begin
    working on these different，branches by switching where your head is。switching
    from one branch to another and，then back again and only when you're。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 切换你想查看的分支，你可以查看功能分支。说让我们看看那个分支，并开始在上面工作，你可以通过切换你的思维，开始在这些不同的分支上工作。切换从一个分支到另一个分支，然后再回来，只有当你。
- en: '![](img/2a88354eae8a6e05db15c15713ce6e45_67.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a88354eae8a6e05db15c15713ce6e45_67.png)'
- en: satisfied that you know what this bug is，fixed and this feature is in a。satisfactory
    place then after all of。![](img/2a88354eae8a6e05db15c15713ce6e45_69.png)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你知道这个bug已被修复，并且这个功能处于令人满意的状态。![](img/2a88354eae8a6e05db15c15713ce6e45_69.png)
- en: that we can merge those changes back，together so that everything comes back。![](img/2a88354eae8a6e05db15c15713ce6e45_71.png)
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们可以把这些变化合并回来，确保一切恢复正常。![](img/2a88354eae8a6e05db15c15713ce6e45_71.png)
- en: on to this unified master branch that，now has all of the latest code and。that's
    the real power of git branching，this ability to say that I would like to。be working
    on multiple things，simultaneously and be working on a。feature without disrupting
    the master。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 合并到这个统一的主分支，这个主分支现在包含所有最新的代码。这就是git分支的真正力量，能够同时处理多个事情，并在不干扰主分支的情况下工作于某个功能。
- en: '![](img/2a88354eae8a6e05db15c15713ce6e45_73.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a88354eae8a6e05db15c15713ce6e45_73.png)'
- en: version of the code so let's now take a，look at an example of how we might go。about
    doing that so here in my hello dot，HTML file，I've been adding some style to this
    h1 I。added a color of blue and let's say that，I would like to make some changes
    I，would like to。move the styling outside of inline，styling and I did instead like
    to move，webpage。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 代码的版本，所以现在让我们来看一个如何做到这一点的例子。在我的hello.html文件中，我在这个h1上添加了一些样式，添加了蓝色的颜色。假设我想做一些更改，我想。
- en: because we decided earlier that was，slightly better design for a webpage。like
    this I could make this changes，immediately but I can instead it if I。expect I
    might be working on multiple，changes I could move on to a different。branch and
    branch off into something。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们之前决定，这对于这样的网页来说是稍微更好的设计，我可以立即进行这些更改，但如果我预期我可能会在多个更改上工作，我可以切换到另一个分支，分支出去做一些。
- en: '![](img/2a88354eae8a6e05db15c15713ce6e45_75.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a88354eae8a6e05db15c15713ce6e45_75.png)'
- en: else in order to work on these new，changes and so here are some of the key。commands
    to know about this if I type，git branch that will tell me what branch。I'm currently
    on and what branch has，exist in my repository so here for。example I type git branch
    and I see that，I just have a single branch called。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 为了处理这些新变化，这里有一些关键命令需要了解，如果我输入`git branch`，这将告诉我当前所在的分支以及在我的仓库中存在哪些分支。所以这里例如我输入`git
    branch`，我看到我只有一个叫。
- en: master and the star on the left hand，side tells me that this is the branch。that
    I am currently on the only branch，that there is if I want to check out a。new branch
    I can type git checkout and，if it's a new branch I'll type git。checkout dash B
    and then the name of the，new branch and I'll call the new branch。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 主分支和左侧的星号告诉我这是我当前所在的分支，如果我想查看新分支，我可以输入 git checkout，如果是新分支，我会输入 git checkout
    -b，然后是新分支的名称，我会称这个新分支为。
- en: style because I'm gonna be making some，style changes to the web page for。example
    so I typed get check out - B，style and get gives me a message I have。switched
    to a new branch called style，and now if I type git branch again and。you'll see
    that now I have two branches，I have the master branch which is the。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 样式，因为我要对网页进行一些样式更改。例如，我输入 git checkout -b style，git 给我发了个消息，我已经切换到名为 style 的新分支，现在如果我再输入
    git branch，你会看到我现在有两个分支，我有主分支，这是我最初所在的分支，现在我有样式分支，这是我现在所在的新分支，左侧的星号指示了这一点。
- en: branch I was originally on and now I，have the style branch which is this new。branch
    which I am on now as indicated by，the star on the left hand side so now。that I'm
    on this new branch I can feel，free to make any changes that I want and。nothing
    I do is going to mess up what is。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '现在我在这个新分支上，我可以自由地进行任何我想要的更改，我所做的任何事情都不会搞砸什么。 '
- en: '![](img/2a88354eae8a6e05db15c15713ce6e45_77.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a88354eae8a6e05db15c15713ce6e45_77.png)'
- en: on the master branch so long as I stay，on this branch so I can say alright。let's
    experiment with removing this，style and let's add a style tag at the。top where
    I can say that I would like my，h1 to have a color of blue for example。so I've
    made a whole bunch of changes。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在主分支上，只要我待在这个分支上，我就可以说好吧。让我们尝试删除这个样式，并在顶部添加一个样式标签，我可以说我希望我的 h1 颜色为蓝色。例如，我做了很多更改。
- en: '![](img/2a88354eae8a6e05db15c15713ce6e45_79.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a88354eae8a6e05db15c15713ce6e45_79.png)'
- en: and I would like to now commit those，changes I'll say git commit move style。properties
    that's the change that I've，made but I've only made those changes to。the style
    branch again if I run git。![](img/2a88354eae8a6e05db15c15713ce6e45_81.png)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在想提交这些更改，我会说 git commit move style.properties，这是我所做的更改，但我只对样式分支进行了这些更改。如果我运行
    git。![](img/2a88354eae8a6e05db15c15713ce6e45_81.png)
- en: branch you'll see that I'm currently on，the style branch where I've moved the。![](img/2a88354eae8a6e05db15c15713ce6e45_83.png)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到我当前所在的分支是样式分支，在这里我已移动。![](img/2a88354eae8a6e05db15c15713ce6e45_83.png)
- en: style information up here to the top of，my page but I can switch branches by，using
    git checkout。get checkout allows me to switch between，branches we used get checkout
    - be to。create a new branch but if you're，switching to a branch that already。exists
    I can just say get checkout，master for example to switch my current。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 将样式信息放到我页面的顶部，但我可以通过使用 git checkout 切换分支。git checkout 允许我在分支之间切换，我们用 git checkout
    -b 创建一个新分支，但如果你要切换到已存在的分支，我可以说 git checkout master，例如，来切换我的当前分支。
- en: branch from the style branch to the。![](img/2a88354eae8a6e05db15c15713ce6e45_85.png)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 从样式分支到。![](img/2a88354eae8a6e05db15c15713ce6e45_85.png)
- en: master branch so I run git checkout，master now I'm on the master branch and。now
    you'll see if I go back to the file，now I'm back to the inline styling。![](img/2a88354eae8a6e05db15c15713ce6e45_87.png)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 主分支，所以我运行 git checkout master，现在我在主分支上。如果我回到文件，你会看到我现在回到了内联样式。![](img/2a88354eae8a6e05db15c15713ce6e45_87.png)
- en: without the styling up here in the head，section of the page if I check out the。![](img/2a88354eae8a6e05db15c15713ce6e45_89.png)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我查看页面的头部样式部分，那里没有样式。![](img/2a88354eae8a6e05db15c15713ce6e45_89.png)
- en: Style branch again then the file，immediately goes back now I have the。style
    code up here in the Style section，of the page and not in line so these。changes
    have only been made to one part。![](img/2a88354eae8a6e05db15c15713ce6e45_91.png)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 样式分支再次，文件立即回到，现在我在页面的样式部分有了样式代码，而不是内联样式，所以这些更改只在一个部分进行了。![](img/2a88354eae8a6e05db15c15713ce6e45_91.png)
- en: of the page so now I'll check out master。![](img/2a88354eae8a6e05db15c15713ce6e45_93.png)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 页面，所以现在我会检查主分支。![](img/2a88354eae8a6e05db15c15713ce6e45_93.png)
- en: again and maybe I want to make some，other changes on my master branch maybe。I
    realized that I want to remove this。![](img/2a88354eae8a6e05db15c15713ce6e45_95.png)
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，或许我想在主分支上做一些其他更改，也许我意识到我想删除这个。![](img/2a88354eae8a6e05db15c15713ce6e45_95.png)
- en: extra punctuation you know what two，exclamation points was too many will。remove
    now we just have one and now I'll，commit these changes I'll say git commit。and
    remove punctuation and now I've。![](img/2a88354eae8a6e05db15c15713ce6e45_97.png)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的标点符号，你知道吗，两个感叹号太多了。我们现在只保留一个，我将提交这些更改，我会说git commit并去掉标点符号，现在我已经。![](img/2a88354eae8a6e05db15c15713ce6e45_97.png)
- en: removed the punctuation only from the，master branch so this master branch now。has
    just a single exclamation point here，but it still does have the inline。styling
    so now what I'd like to do is，merge in those changes that I made from。the other
    branch I'd like to take what I，was working on in the style branch and。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 只从主分支移除了标点符号，因此这个主分支现在只有一个感叹号，但仍然保留了内联样式。因此，我现在想做的是合并我在另一个分支上所做的更改，我想取回我在样式分支上工作的内容。
- en: merge it into this current version of。![](img/2a88354eae8a6e05db15c15713ce6e45_99.png)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将其合并到当前版本中。![](img/2a88354eae8a6e05db15c15713ce6e45_99.png)
- en: the repository on my master branch and，in order to do that the command we'll。use
    is called git merge so git merge，notice that I'm currently on the master。branch
    but if I run git merge and then，style that is going to take whatever's。on the
    style branch and attempt to merge，it into my current branch and what we'll。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的主分支上的仓库中，为此我们将使用的命令叫做git merge，因此git merge，注意我当前在主分支上，但如果我运行git merge，然后是样式，这将把样式分支上的内容合并到我当前的分支中，我们将。
- en: find is we're able to get most of the，way there but there's a merge conflict。now
    this won't happen all the time when，you merge sometimes get will be smart。enough
    to know that if one change has，been made to one part of a file and one。change
    has been made to another part of，a file when you merge those changes back。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们发现几乎完成了，但现在出现了合并冲突。这并不总是会发生，在合并时，有时git会足够聪明，知道如果文件的一个部分有一个更改，而另一个部分有另一个更改，合并这些更改时就不会出现冲突。
- en: together git will resolve those merge，conflicts automatically but in this case。that
    wasn't the case because both my，style branch and my master branch made。![](img/2a88354eae8a6e05db15c15713ce6e45_101.png)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: git会自动解决这些合并冲突，但在这个案例中并非如此，因为我的样式分支和主分支都有更改。![](img/2a88354eae8a6e05db15c15713ce6e45_101.png)
- en: changes to the same line of code，and we'll see why if I go back here。you'll
    notice that in the merged version，we do see this style tag at the head of。the
    page no problems no conflict there，because that was just lines that have。been
    added to this page so there was no，conflict the conflict comes up here。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 对同一行代码的更改，我们稍后会看到原因。如果我在这里回溯，你会注意到在合并后的版本中，页面头部确实有这个样式标签，没有问题，没有冲突，因为只是添加了新行，所以没有冲突，冲突出现在这里。
- en: which is where in my version on the，master branch I removed this punctuation。mark
    whereas in the version on the style，branch we could we can see here by the，word
    style。we removed the inline styling so we need，to resolve the somehow and what
    I。ultimately do is just get rid of these，style markers or the conflict markers。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的主分支版本中，我移除了这个标点符号，而在样式分支的版本中，我们可以通过“样式”这个词看到这一点。我们移除了内联样式，因此需要以某种方式解决这个问题。我最终的做法是去掉这些样式标记或冲突标记。
- en: and say you know what I would like for，the updated version not to have either。![](img/2a88354eae8a6e05db15c15713ce6e45_103.png)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 并且说，我希望更新版本中也没有。![](img/2a88354eae8a6e05db15c15713ce6e45_103.png)
- en: not to have the inline styling and not，to have the additional punctuation so
    I。have now made those changes I have，resolved the merge conflict and now I。![](img/2a88354eae8a6e05db15c15713ce6e45_105.png)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 不要有内联样式，也不要有额外的标点符号。因此，我现在已经做了这些更改，解决了合并冲突，现在我。![](img/2a88354eae8a6e05db15c15713ce6e45_105.png)
- en: can commit I fix the merge conflicts and，that's the general workflow now of
    how。branching in git ultimately works when，you're working on something new。you
    might branch off in order to say you，would like to work on a different part。of
    this web application you'll make，changes make commits add changes to that。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 可以提交，我修复了合并冲突，这就是现在git分支的整体工作流程。当你在处理新事物时，可能会分支，以便说你想在这个网页应用程序的不同部分上工作，你会进行更改，进行提交，将更改添加到其中。
- en: new branch and when you're satisfied，with those changes when they're in the。state
    that you want them to be you can，then say merge them back in to the。original version
    of the repository，sometimes you'll have to deal with merge。conflicts so certainly
    not always and if，you're careful about where you make。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新分支，当你对这些更改感到满意并且它们处于你想要的状态时，你可以将它们合并回原始版本的仓库，有时你需要处理合并冲突，因此并不是总会发生，如果你在进行更改时小心翼翼，。
- en: changes and trying to be careful not to，make modifications to the same line
    of。code in two different places you can，reduce the likelihood of actually。getting
    a merge conflict because get，ultimately is quite smart about how it。tries to deal
    with these sorts of issues，and finally we'll take a look at a。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行更改时，尽量避免在两个不同地方对同一行代码进行修改，你可以降低实际发生合并冲突的可能性，因为 Git 最终在处理这些问题时相当智能，最后我们将查看一个。
- en: couple of features of github，specifically that can be quite helpful。if you begin
    to work on larger projects，that have many different moving pieces。the first of
    which is forking a github，repository so let's go to a github。repository and look
    at the github，repository for bootstrap for example so。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub 的几个功能在你开始进行更大项目时非常有用，这些项目往往涉及许多不同的部分。第一个功能是分叉（fork）一个 GitHub 仓库，所以让我们去一个
    GitHub 仓库，例如查看 Bootstrap 的 GitHub 仓库。
- en: bootstrap which is the CSS library that，we took a look at last time is a library。that
    gives us the easy access to a whole，bunch of different CSS features and the。![](img/2a88354eae8a6e05db15c15713ce6e45_107.png)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Bootstrap 是我们上次查看的 CSS 库，它是一个让我们轻松访问各种不同 CSS 特性的库。![](img/2a88354eae8a6e05db15c15713ce6e45_107.png)
- en: entire thing is open source meaning all，of the code for bootstrap is publicly。available
    for anyone to look up and，more importantly for anyone to。contribute to that it's
    not just one，person that's been working on all of。bootstrap but it's a community
    driven，repository that many people can be。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 整个项目是开源的，这意味着 Bootstrap 的所有代码都是公开的，任何人都可以查阅，更重要的是，任何人都可以为其做出贡献。并不是只有一个人一直在维护
    Bootstrap，而是一个社区驱动的仓库，许多人可以参与。
- en: working on adding new features and，making fixes to bootstraps code and。collaborating
    on them by taking，advantage of the features of git and so。if you find a git repository
    that you，would like to contribute to or if you。want other people to be able to，contribute
    to your repository one thing。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 进行新功能的添加和对 Bootstrap 代码的修复，并利用 Git 的功能进行协作。因此，如果你发现一个希望贡献的 Git 仓库，或者如果你希望其他人能够为你的仓库做出贡献，有一件事情是。
- en: you can do is fork that repository and，by forking we mean making your own copy。of
    the original repository and so up，here in the upper right hand corner of。github
    page is a button called fork and，we can see that right now about 68，000。people
    have already forked bootstraps，repository made a copy of the repository。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以对该仓库进行分叉，分叉的意思是制作原始仓库的副本，所以在 GitHub 页面右上角有一个叫做“fork”的按钮，我们可以看到，目前大约有 68,000
    人已经分叉了 Bootstrap 的仓库，制作了该仓库的副本。
- en: into their own github account and so we，could fork it ourselves just by clicking。on
    this button called fork and then，getting our own version of the，repository。![](img/2a88354eae8a6e05db15c15713ce6e45_109.png)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 登录自己的 GitHub 账户后，我们可以通过点击一个叫做“fork”的按钮，自己进行复制，从而获得该仓库的一个版本。![](img/2a88354eae8a6e05db15c15713ce6e45_109.png)
- en: that we can then clone and push and pull，from as well the reason we might do
    that。is that bootstraps repository while it，is public doesn't allow anyone to
    just。push to it that would be probably unsafe，if anyone in the world could just
    update。bootstraps master code but what you can，do is copy the code make a fork
    of it。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就可以克隆、推送和拉取，原因是 Bootstrap 的仓库虽然是公开的，但并不允许任何人直接推送，这可能不安全，因为如果世界上任何人都可以更新
    Bootstrap 的主代码，那将是非常危险的。不过你可以复制代码并进行分叉。
- en: make changes to it on your own push and，pull to it and then when you feel like。you've
    made a contribution that you，would like to send back to bootstrap you。can open
    what's called a pull request，that you are requesting that your code。be pulled
    in to bootstraps code and we，can look for example at bootstraps pull。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在自己的副本上进行更改，推送和拉取，当你觉得自己做出了可以贡献给 Bootstrap 的更改时，你可以打开一个叫做拉取请求（pull request），请求将你的代码合并到
    Bootstrap 的代码中，我们可以看看 Bootstrap 的拉取请求示例。
- en: '![](img/2a88354eae8a6e05db15c15713ce6e45_111.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a88354eae8a6e05db15c15713ce6e45_111.png)'
- en: request tab it looks like right now，there are 71 open pull requests there。are
    71 people that have made some fixes，or made some changes to bootstraps code。and
    you can submit a pull request to say，that you would like to take those。changes
    and merge them back in with，bootstraps actual code and the people。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 请求选项卡现在看起来有 71 个打开的拉取请求。有 71 个人对 Bootstrap 的代码进行了修复或更改，你可以提交一个拉取请求，表示你希望将这些更改合并到
    Bootstrap 的实际代码中。
- en: that maintain bootstraps code in this，particular repository can review those。pull
    requests provide feedback ask for，additional changes and then when。everyone's
    satisfied they can merge，those changes into bootstraps actual。code and this is
    one of the key benefits，of open source software the ability for。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个特定的代码库中维护 Bootstrap 代码的人可以审核这些拉取请求，提供反馈，要求进行额外的更改，然后当每个人满意时，他们可以将这些更改合并到
    Bootstrap 的实际代码中。这是开源软件的一个关键优势，即有能力。
- en: multiple people to be working on the，same piece of code and for a community。to
    be able to collaborate on finding，bugs on figuring out what changes to。make on
    figuring out how to improve，upon an existing repository and make it。better moving
    forward and one final，thing worth noting about github is an。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 多个人可以在同一段代码上工作，社区能够合作寻找错误，搞清楚需要做出哪些更改，探讨如何改进现有代码库并使其在未来更好。值得注意的关于 GitHub 的最后一件事是一个。
- en: additional feature known as github pages，github pages is a free way the github。provides
    to be able to quickly take a，website with HTML and CSS and maybe even。a little
    bit of JavaScript and deploy it，to the internet for anyone to look at in。![](img/2a88354eae8a6e05db15c15713ce6e45_113.png)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 被称为 GitHub Pages 的额外功能，GitHub Pages 是 GitHub 提供的一种免费方式，能够快速创建一个带有 HTML 和 CSS，甚至可能还有一些
    JavaScript 的网站，并将其部署到互联网上供任何人查看。![](img/2a88354eae8a6e05db15c15713ce6e45_113.png)
- en: anyone with a github account is allowed，to create a github pages website for。free
    and in order to do so we can，demonstrate it now all you need to do in。github is
    let's create a new repository，that will call it should generally be。your user
    name dot github dot，is the conventional name for your github。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 任何拥有 GitHub 账户的人都可以免费创建 GitHub Pages 网站，为了演示这一点，我们现在来做。你在 GitHub 中需要做的就是创建一个新的代码库，通常我们称之为你的用户名.github，.是
    GitHub 的约定名称。
- en: pages site though it can have other，names you'll just have to manually turn。on
    github pages and we'll go ahead and，create this repository now if you create。a
    github repository called your username，github io it will automatically be。supporting
    github pages and what that。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 页面网站尽管可以有其他名称，你只需手动启用。GitHub Pages，我们现在就来创建这个代码库。如果你创建一个名为你的用户名，github io的 GitHub
    代码库，它将自动支持 GitHub Pages。
- en: '![](img/2a88354eae8a6e05db15c15713ce6e45_115.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a88354eae8a6e05db15c15713ce6e45_115.png)'
- en: means is that I can take this URL and I，can clone it so I can say git clone。followed
    by this URL I've cloned an。![](img/2a88354eae8a6e05db15c15713ce6e45_117.png)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我可以拿这个网址并克隆它，我可以说 git clone，后面跟这个网址。我已克隆一个。![](img/2a88354eae8a6e05db15c15713ce6e45_117.png)
- en: empty repository but I can go into this，repository and add some files to it
    I。can say let's add by default it's called，an index。html file and I'll create
    an。HTML file that is my site and the body，that will just say this is my github。pages
    website so something like this。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个空的代码库，但我可以进入这个代码库并添加一些文件。我可以说，默认添加一个名为 index.html 的文件，我将创建一个 HTML 文件作为我的网站，正文将说这是我的
    GitHub Pages 网站，像这样。
- en: '![](img/2a88354eae8a6e05db15c15713ce6e45_119.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a88354eae8a6e05db15c15713ce6e45_119.png)'
- en: something simple but it can certainly be，more complex if you want it to be inside。my
    terminal I will get add this index，study HTML file and I'll make a commit。and
    off in a first commit you'll just in，the commit message right first commit so。but
    we know it was the first commit and，then I'll push those changes to github。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的东西，但如果你想让它更复杂，它当然可以。在我的终端中，我将添加这个 index study HTML 文件，然后我会进行一次提交，并在第一次提交中，你只需在提交信息中写上第一次提交即可。但我们知道这是第一次提交，然后我将把这些更改推送到
    GitHub。
- en: '![](img/2a88354eae8a6e05db15c15713ce6e45_121.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a88354eae8a6e05db15c15713ce6e45_121.png)'
- en: now so if you put，your changes to repository called your，username github do
    and then if you take。a look at the settings and scroll down，you'll see that github
    pages is by。default ready to be published and now if，i click on this URL，my username
    github do you'll see。![](img/2a88354eae8a6e05db15c15713ce6e45_123.png)
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你将更改提交到名为你的用户名的代码库，并且如果你查看设置并向下滚动，你会看到 GitHub Pages 默认是准备发布的。如果我点击这个网址，我的用户名
    github do，你会看到。![](img/2a88354eae8a6e05db15c15713ce6e45_123.png)
- en: deployed to the internet such that，anyone can go to this URL and see it。they'll
    see a big heading that says this，is my github pages website because this。is the
    way the browser is rendering the，HTML that i pushed to my github pages。repository
    and the advantage of doing，this is that it's very easy now to be。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 部署到互联网，使任何人都可以访问这个URL并查看它。他们会看到一个大标题，上面写着“这是我的GitHub页面网站”，因为这是浏览器渲染我推送到GitHub页面仓库的HTML的方式，做这件事的好处是，现在非常容易。
- en: able to quickly update my website all i，need to do is if i make a new change
    i。can commit that change push that change，to github and when github detects that。i've
    made a push to my github pages，repository then it will update my。website that
    anyone in the world can，access by going to my username github。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 能够快速更新我的网站，我只需在做出新更改时，可以提交该更改并将其推送到GitHub，当GitHub检测到我已推送到我的GitHub页面仓库时，它会更新我的网站，任何人都可以通过访问我的用户名GitHub来访问。
- en: dot and this allows you to leverage all，of these features of get the ability
    to。branch the ability to work on different，features of your webpage at different。times
    and revert back to different，versions of the code as well so all in。all git has
    given us a number of very，powerful tools it's given us the ability。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 点和这让你能够利用所有这些功能，获得能力去分支，在不同时间处理网页的不同功能，并且能恢复代码的不同版本。所以，总的来说，Git给我们提供了许多强大的工具，赋予了我们能力。
- en: now to be able to very quickly and very，easily keep track of any changes we
    make。to code keep track of when a piece of，code is updated and to quickly revert。back
    and look at old versions of that，code if need be and in particular it's。given
    us the ability to take our code，and work together with other people on。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在能够非常快速且轻松地跟踪我们对代码所做的任何更改，跟踪代码何时更新，并迅速恢复并查看旧版本的代码（如有需要），尤其是它赋予了我们与其他人合作处理代码的能力。
- en: it such that we can be working on，multiple parts of the same project and。someone
    else working on the same project，can also be working on multiple parts of。the
    same project on different branches，and it's very easy then to synched up。our changes
    in order to work together，and so get is a very popular tool used。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们可以在同一个项目的多个部分上工作，而其他人也可以在不同分支上在同一个项目上处理多个部分，并且很容易将我们的更改同步以便一起协作，因此Git是一个非常受欢迎的工具。
- en: not only in the world of web programming，but especially whenever dealing with
    any。kind of larger project where multiple，people might be working on the same。thing
    simultaneously git will enable us。![](img/2a88354eae8a6e05db15c15713ce6e45_125.png)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 不仅在网页编程的世界中，特别是当处理任何较大项目时，多个可能同时在同一事物上工作的人，Git将使我们能够。![](img/2a88354eae8a6e05db15c15713ce6e45_125.png)
- en: to more easily develop our web，applications over the course of this。term next
    time we'll take a look at，python which is one of the first。programming languages
    that we'll use as，we continue on our journey towards。building more sophisticated
    web。![](img/2a88354eae8a6e05db15c15713ce6e45_127.png)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更轻松地开发我们的Web应用程序，在这个学期的下一次我们将看看Python，它是我们继续迈向构建更复杂Web的第一个编程语言之一。![](img/2a88354eae8a6e05db15c15713ce6e45_127.png)
