- en: '2.4   Case Study: Percolation'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.4   案例研究：渗流
- en: 原文：[https://introcs.cs.princeton.edu/java/24percolation](https://introcs.cs.princeton.edu/java/24percolation)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/java/24percolation](https://introcs.cs.princeton.edu/java/24percolation)
- en: We conclude our study of functions and modules by considering a case study of
    developing a program to solve an interesting scientific problem. as *Monte Carlo*
    simulation to study a natural model known as *percolation*.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过考虑开发一个解决有趣科学问题的程序的案例研究来结束我们对函数和模块的研究。作为研究一种称为*渗流*的自然模型的*蒙特卡罗*模拟。
- en: Percolation.
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渗流。
- en: We model the system as an *n*-by-*n* grid of sites. Each site is either *blocked*
    or *open*; open sites are initially *empty*. A *full* site is an open site that
    can be connected to an open site in the top row via a chain of neighboring (left,
    right, up, down) open sites. If there is a full site in the bottom row, then we
    say that the system *percolates*.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将系统建模为一个*n*×*n*的网格，每个站点要么是*阻塞*的，要么是*开放*的；开放的站点最初是*空的*。一个*满*站点是一个可以通过一系列相邻的（左、右、上、下）开放站点连接到顶行开放站点的开放站点。如果底行有一个满站点，那么我们说系统*渗流*了。
- en: '![percolates](../Images/e17956748601060a8bf9f91e96e1266b.png)           ![does
    not percolate](../Images/73ba2a5b775339f96789f6764521706a.png)'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![渗流](../Images/e17956748601060a8bf9f91e96e1266b.png)           ![不渗流](../Images/73ba2a5b775339f96789f6764521706a.png)'
- en: If sites are independently set to be open with *vacancy probability* *p*, what
    is the probability that the system percolates? No mathematical solution to this
    problem has yet been derived. Our task is to write computer programs to help study
    the problem.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 如果站点独立设置为以*空缺概率* *p*开放，那么系统渗流的概率是多少？目前尚未推导出这个问题的数学解。我们的任务是编写计算机程序来帮助研究这个问题。
- en: Data representation.
  id: totrans-7
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据表示。
- en: Our first step is to pick a representation of the data. We use one *boolean
    matrix* `isOpen[][]` to represent which sites are open and another boolean matrix
    `isFull[][]` that to represent which sites are full.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是选择数据的表示。我们使用一个*布尔矩阵* `isOpen[][]` 表示哪些站点是开放的，另一个布尔矩阵 `isFull[][]` 表示哪些站点是满的。
- en: Vertical percolation.
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 垂直渗流。
- en: Given a boolean matrix that represents the open sites, how do we figure out
    whether it represents a system that percolates? For the moment, we will consider
    a much simpler version of the problem that we call *vertical percolation*. The
    simplification is to restrict attention to vertical connection paths.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 给定表示开放站点的布尔矩阵，我们如何确定它是否代表一个渗流的系统？目前，我们将考虑一个我们称之为*垂直渗流*的问题的简化版本。简化是将注意力限制在垂直连接路径上。
- en: '![vertically percolates](../Images/e0bccc65f6f60330a21d0355a9d67d69.png)  
            ![does not vertically percolate](../Images/e3c73f401dd15daaae2483f2d47a902e.png)'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![垂直渗流](../Images/e0bccc65f6f60330a21d0355a9d67d69.png)           ![不垂直渗流](../Images/e3c73f401dd15daaae2483f2d47a902e.png)'
- en: '[VerticalPercolation.java](VerticalPercolation.java.html) determines the sites
    that are filled by some path that is connected vertically to the top using a simple
    calculation.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[VerticalPercolation.java](VerticalPercolation.java.html) 确定通过一些与顶部垂直连接的路径填充的站点，使用简单的计算。'
- en: '![vertical percolation](../Images/eea921f291099608a38fb8ec214f69a4.png)'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![垂直渗流](../Images/eea921f291099608a38fb8ec214f69a4.png)'
- en: Data visualization.
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据可视化。
- en: '[PercolationVisualizer.java](PercolationVisualizer.java.html) is a test client
    that generates random boolean matrices and plots them using standard drawing.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '[PercolationVisualizer.java](PercolationVisualizer.java.html) 是一个测试客户端，生成随机布尔矩阵并使用标准绘图绘制它们。'
- en: '![percolation visualization](../Images/bb90702c6e57cb053f5c38538af2e95b.png)'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![渗流可视化](../Images/bb90702c6e57cb053f5c38538af2e95b.png)'
- en: Estimating probabilities.
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 估计概率。
- en: '[PercolationProbability.java](PercolationProbability.java.html) estimates the
    probability that a random *n*-by-*n* system with site vacancy probability *p*
    percolates. We refer to this quantity as the *percolation probability*. To estimate
    its value, we simply run a number of experiments.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '[PercolationProbability.java](PercolationProbability.java.html) 估计了具有站点空缺概率*p*的随机*n*×*n*系统渗流的概率。我们将这个数量称为*渗流概率*。为了估计它的值，我们只需运行一些实验。'
- en: Recursive solution for percolation.
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渗流的递归解决方案。
- en: How do we test whether a system percolates in the general case when *any* path
    starting at the top and ending at the bottom (not just a vertical one) will do
    the job? Remarkably, we can solve this problem with a compact program, based on
    a classic recursive scheme known as *depth-first search*. [Percolation.java](Percolation.java.html)
    takes this approach. See the textbook for details.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当*任何*从顶部开始并以底部结束的路径（不仅仅是垂直路径）都能完成任务时，我们如何测试系统是否渗流？令人惊讶的是，我们可以用一个基于经典递归方案的紧凑程序来解决这个问题，这个方案被称为*深度优先搜索*。[Percolation.java](Percolation.java.html)
    采用这种方法。有关详细信息，请参阅教科书。
- en: Adaptive plot.
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自适应绘图。
- en: '[PercolationPlot.java](PercolationPlot.java.html) plots the percolation probability
    as a function of the site vacancy probability *p* for an *n*-by-*n* system. It
    uses a recursive approach that produces a good-looking curve at relatively low
    cost.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '[PercolationPlot.java](PercolationPlot.java.html) 将渗流概率作为站点空缺概率*p*的函数绘制为一个*n*×*n*系统。它使用一种递归方法，以相对较低的成本产生一个外观良好的曲线。'
- en: '![adaptive plot for 20-by-20 percolation system](../Images/5acd85e3e12daf0a4fa23dd077a97f4b.png)
              ![adaptive plot for 100-by-100 percolation system](../Images/e46d4c28d8bc80261d4cc7061b9ec3a8.png)'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![20×20渗流系统的自适应绘图](../Images/5acd85e3e12daf0a4fa23dd077a97f4b.png)        
      ![100×100渗流系统的自适应绘图](../Images/e46d4c28d8bc80261d4cc7061b9ec3a8.png)'
- en: 'The curves support the hypothesis that there is a *threshold* value (about
    0.593): if *p* is greater than the threshold, then the system almost certainly
    percolates; if *p* is less than the threshold, then the system almost certainly
    does not percolate. As *n* increases, the curve approaches a step function that
    changes value from 0 to 1 at the threshold. This phenomenon, known as a *phase
    transition*, is found in many physical systems.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 曲线支持这样一个假设：存在一个*阈值*值（约为0.593）：如果*p*大于阈值，则系统几乎肯定渗透；如果*p*小于阈值，则系统几乎肯定不会渗透。随着*n*的增加，曲线逼近一个在阈值处从0变为1的阶跃函数。这种现象，被称为*相变*，在许多物理系统中都能找到。
- en: Exercises
  id: totrans-25
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Create a program [PercolationDirected.java](PercolationDirected.java.html) that
    tests for *directed* percolation (by leaving off the last recursive call in the
    recursive `flow()` method in [Percolation.java](Percolation.java.html), as described
    in the text), then use [PercolationPlot.java](PercolationPlot.java.html) to draw
    a plot of the directed percolation probability as a function of the site vacancy
    probability *p*.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个程序[PercolationDirected.java](PercolationDirected.java.html)，用于测试*有向*渗透（通过在递归`flow()`方法中省略最后一个递归调用，如文本中所述），然后使用[PercolationPlot.java](PercolationPlot.java.html)绘制有向渗透概率作为站点空缺概率*p*的函数的图表。
- en: Creative Exercises
  id: totrans-27
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
- en: '**Nonrecursive directed percolation.** Write a nonrecursive program [PercolationDirectedNonrecursive.java](PercolationDirectedNonrecursive.java.html)
    that tests for directed percolation by moving from top to bottom as in our vertical
    percolation code. Base your solution on the following computation: if any site
    in a contiguous subrow of open sites in the current row is connected to some full
    site on the previous row, then all of the sites in the subrow become full.'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**非递归有向渗透。** 编写一个非递归程序[PercolationDirectedNonrecursive.java](PercolationDirectedNonrecursive.java.html)，通过像我们的垂直渗透代码中从顶部到底部移动来测试有向渗透。基于以下计算构建您的解决方案：如果当前行中一组连续的开放站点中的任何站点与上一行的某个满站点相连，则该子行中的所有站点都变为满。'
- en: '![directed percolation](../Images/5bffeebc94971d8b76c30a78ccb4d724.png)'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![有向渗透](../Images/5bffeebc94971d8b76c30a78ccb4d724.png)'
- en: Web Exercises
  id: totrans-30
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网络练习
- en: '**2-by-2 percolation.** Verify that the probability that a 2-by-2 system percolates
    is p^2 (2 - p^2), where p is the probability that a site is open.'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**2x2渗透。** 验证2x2系统渗透的概率是p^2(2 - p^2)，其中p是一个站点开放的概率。'
- en: '**Cubic curves.** Use recursive subdivision algorithm to plot [cubic curves](http://www.ccs.neu.edu/jpt/fhs/).'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**立方曲线。** 使用递归细分算法绘制[立方曲线](http://www.ccs.neu.edu/jpt/fhs/)。'
- en: '**Random walk.** Term coined by Hungarian mathematician George Polya in a 1921
    paper. Start at 0, go left with probability 1/2, go right with probability 1/2.
    Reflecting barrier at 0 - if particle hits 0, it must switch direction at next
    step and return to 1. Absorbing barrier at *n* - particle stops when it hits state
    *n*. Estimate number of steps as a function of n until the particle is absorbed.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**随机漫步。** 术语由匈牙利数学家乔治·波利亚在1921年的一篇论文中创造。从0开始，以1/2的概率向左走，以1/2的概率向右走。在0处有反射屏障
    - 如果粒子碰到0，它必须在下一步改变方向并返回1。在*n*处有吸收屏障 - 当粒子碰到状态*n*时停止。估计作为n的函数的步数，直到粒子被吸收。'
- en: '*Analytic solution*: *n*².'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解析解*：*n*²。'
- en: '**3d random walk.** Take a random walk on a 3d lattice, starting from (0, 0,
    0). Write a program [Polya.java](Polya.java.html) to estimate the chance that
    you return to the origin after at most some number of steps, say 1,000\. (In 1d
    and 2d, you will surely return; in 3d, there is a less than 50% chance.) Repeat
    the exercise on a 4d lattice. *Solution*: the actual probability (without the
    artificial restriction on the number of steps) is known as [Polya''s random walk
    constant](http://mathworld.wolfram.com/PolyasRandomWalkConstants.html). It is
    slightly more than 1/3 for 3d and slightly less than 1/5 for 4d.'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**三维随机漫步。** 在三维晶格上进行随机漫步，从(0, 0, 0)开始。编写一个程序[Polya.java](Polya.java.html)来估计在最多一定数量的步骤（比如1,000步）之后返回原点的机会。
    （在一维和二维中，你肯定会返回；在三维中，概率小于50%。）在四维晶格上重复练习。 *解决方案*：实际概率（没有对步数的人为限制）被称为[波利亚的随机漫步常数](http://mathworld.wolfram.com/PolyasRandomWalkConstants.html)。对于三维，它略高于1/3，对于四维，它略低于1/5。'
- en: '**Self-avoiding random walk.** Simulate random walk on lattice until it intersects.
    Among all self-avoiding walks (SAW) of length *n*, what is average distance from
    origin? To save time in the simulation, exclude SAWs that ever take a step backwards.
    How long until at least one SAW of length *n* = 40, *n* = 80? What is half-life
    of a SAW? To save more time in the simulation, allow a SAW only to take a step
    into an unoccupied cell (and repeat until it gets trapped). Practically nothing
    is known rigorously about these questions, so simulation is the best recourse.
    Here''s an [article](../../papers/self-avoiding-walk.pdf) from the New Scientist.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**避免自交随机漫步。** 模拟在晶格上的随机漫步，直到相交。在所有长度为*n*的避免自交步行（SAW）中，到原点的平均距离是多少？为了节省模拟时间，排除那些曾经向后迈出一步的SAW。直到至少有一个长度为*n*
    = 40，*n* = 80的SAW需要多长时间？SAW的半衰期是多少？为了在模拟中节省更多时间，只允许SAW向一个未占用的单元格迈出一步（并重复直到被困住）。关于这些问题几乎没有严格的已知结果，因此模拟是最好的方法。这里有一篇来自《新科学家》的[文章](../../papers/self-avoiding-walk.pdf)。'
- en: 'Famous 1949 problem of Nobel prize winning chemist, Flory. Conjecture: exponent
    of root mean square displacement is 3/4 in 2D and 3/5 in 3D.'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 著名的1949年诺贝尔化学奖得主弗洛里的问题。猜想：在二维中，均方位移的指数为3/4，在三维中为3/5。
- en: '**Self-avoiding random walk.** Write a program [SelfAvoidingWalk.java](SelfAvoidingWalk.java.html)
    to simulate and animate a 2D self-avoiding random walk. Self-avoiding random walks
    arise in modeling physical processes like the folding of polymer molecules. Such
    walks are difficult to model using classical mathematics. so they are best studied
    by direct numerical simulation. See what fraction of such random walks end up
    more than R^2 (say 30) from the starting point.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自避随机漫步。** 编写一个程序[SelfAvoidingWalk.java](SelfAvoidingWalk.java.html)来模拟和展示二维自避随机漫步。自避随机漫步在建模聚合物分子折叠等物理过程中出现。这样的漫步难以用经典数学建模，因此最好通过直接数值模拟来研究。看看多少比例的这种随机漫步最终距离起点超过R^2（比如30）。'
- en: Or keep a trail of length *n*.
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 或者保持长度为*n*的路径。
