- en: 6\.   Trees
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 6\.   树
- en: 原文：[https://aofa.cs.princeton.edu/60trees](https://aofa.cs.princeton.edu/60trees)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://aofa.cs.princeton.edu/60trees](https://aofa.cs.princeton.edu/60trees)
- en: This chapter investigates properties of many different types of *trees*, fundamental
    structures that arise implicitly and explicitly in many practical algorithms.
    Our goal is to provide access to results from an extensive literature on the combinatorial
    analysis of trees, while at the same time providing the groundwork for a host
    of algorithmic applications.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章研究了许多不同类型的*树*的性质，这些树是许多实际算法中隐式和显式出现的基本结构。我们的目标是提供对树的组合分析广泛文献中的结果的访问，同时为大量算法应用奠定基础。
- en: 6.1 Binary Trees
  id: totrans-3
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.1 二叉树
- en: '**Definition.** A *binary tree* is either an external node or an internal node
    attached to an ordered pair of binary trees called the left subtree and the right
    subtree of that node.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义。** 一棵*二叉树*要么是一个外部节点，要么是连接到称为该节点的左子树和右子树的有序二叉树对的内部节点。'
- en: '**Theorem.** (Enumeration of binary trees) The number of binary trees with
    $N$ internal nodes and $N+1$ external nodes is given by the Catalan numbers: $$T_{N}={1\over
    N+1}{2N\choose N} = {4^N\over\sqrt{\pi N^3}}\Bigl(1+O({1\over N})\Bigr).$$ Proof.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: '**定理。**（二叉树的枚举）具有$N$个内部节点和$N+1$个外部节点的二叉树的数量由卡特兰数给出：$$T_{N}={1\over N+1}{2N\choose
    N} = {4^N\over\sqrt{\pi N^3}}\Bigl(1+O({1\over N})\Bigr)。$$ 证明。'
- en: 6.2 Forests and Trees
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.2 森林和树
- en: 'In a binary tree, no node has more than two children. This characteristic makes
    it obvious how to represent and manipulate such trees in computer implementations,
    and it relates naturally to “divide-and-conquer” algorithms that divide a problem
    into two subproblems. However, in many applications (and in more traditional mathematical
    usage), we need to consider *general* trees:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 在二叉树中，没有节点有超过两个子节点。这个特征使得如何在计算机实现中表示和操作这样的树变得明显，并且与“分而治之”算法自然相关，将问题分解为两个子问题。然而，在许多应用中（以及在更传统的数学用法中），我们需要考虑*一般*树：
- en: '**Definition.** A *tree* (also called a *general tree*) is a node (called the
    root) connected to a sequence of disjoint trees. Such a sequence is called a *forest*.'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义。** 一棵*树*（也称为*一般树*）是一个节点（称为根）连接到一系列不相交树的序列。这样的序列称为*森林*。'
- en: 'We use the same nomenclature as for binary trees: the subtrees of a node are
    its children, a root node has no parents, and so forth. Trees are more appropriate
    models than binary trees for certain computations.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用与二叉树相同的命名法：节点的子树是其子节点，根节点没有父节点，等等。对于某些计算，树比二叉树更适合作为模型。
- en: '**Theorem.** (Enumeration of general trees) Let $G_N$ be the number of general
    trees with $N$ nodes. Then $G_N$ is exactly equal to the number of binary trees
    with $N-1$ internal nodes and is given by the Catalan numbers: $$G_N=T_{N-1}={1\over
    N}{2N-2\choose N-1}.$$ *Proof.* (via the symbolic method) A forest is either empty
    or a sequence of trees: $$\cal F = \epsilon + \cal G + (\cal G\times\cal G) +
    (\cal G\times\cal G\times\cal G) + (\cal G\times\cal G\times\cal G\times\cal G)
    + \ldots$$ which translates directly to $$F(z) = 1 + G(z) + G(z)^2 + G(z)^3 +
    G(z)^4 + \ldots = {1\over 1-G(z)}.$$ The obvious one-to-one correspondence between
    forests and trees (cut off the root) means that $zF(z) = G(z)$, so $$G(z)={z\over
    1-G(z)}.$$ Thus $G(z)-G(z)^2=z$ and therefore $G(z)=zT(z)$, since both functions
    satisfy the same functional equation. That is, the number of trees with $N$ nodes
    is equal to the number of binary trees with $N$ external nodes.'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**定理。**（一般树的枚举）设$G_N$是具有$N$个节点的一般树的数量。那么$G_N$恰好等于具有$N-1$个内部节点的二叉树的数量，并由卡特兰数给出：$$G_N=T_{N-1}={1\over
    N}{2N-2\choose N-1}。$$ *证明。*（通过符号方法）森林要么为空，要么是一系列树：$$\cal F = \epsilon + \cal
    G + (\cal G\times\cal G) + (\cal G\times\cal G\times\cal G) + (\cal G\times\cal
    G\times\cal G\times\cal G) + \ldots$$ 这直接转化为 $$F(z) = 1 + G(z) + G(z)^2 + G(z)^3
    + G(z)^4 + \ldots = {1\over 1-G(z)}。$$ 森林和树之间明显的一一对应关系（去掉根）意味着$zF(z) = G(z)$，因此
    $$G(z)={z\over 1-G(z)}。$$ 因此$G(z)-G(z)^2=z$，因此$G(z)=zT(z)$，因为两个函数满足相同的函数方程。也就是说，具有$N$个节点的树的数量等于具有$N$个外部节点的二叉树的数量。'
- en: 6.3 Combinatorial Equivalences to Trees and Binary Trees
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.3 与树和二叉树的组合等价
- en: The following combinatorial objects are all in 1-1 correspondence and are therefore
    counted by the Catalan numbers.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下组合对象都是一一对应的，因此由卡特兰数计数。
- en: Binary trees with $N$ external nodes.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 具有$N$个外部节点的二叉树。
- en: Trees with $N$ nodes.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有$N$个节点的树。
- en: Legal sequences of $N$ pairs of parentheses.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合法的$N$对括号的序列。
- en: Triangulated $N$-gons.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 三角形$N$-边形。
- en: Gambler's ruin sequences.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 赌徒的破产序列。
- en: 'Here are examples of these objects for small $N$:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是这些对象在小$N$时的例子：
- en: '![](../Images/446ab38e9f0503b14320b34537c9d5aa.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/446ab38e9f0503b14320b34537c9d5aa.png)'
- en: 6.4 Properties of Trees
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.4 树的性质
- en: '**Definition.** In a tree $t$:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义。** 在一棵树$t$中：'
- en: the *size* $|t|$ is its number of nodes
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*大小* $|t|$ 是其节点数'
- en: the *level* of a node is its distance from the root (which is at level 0)
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点的*级别*是其与根的距离（根在级别0）
- en: the *path length* $\pi(t)$ is the sum of the levels of each of the nodes in
    $t$
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*路径长度* $\pi(t)$ 是$t$中每个节点的级别之和'
- en: the *height* $\eta(t)$ is the maximum level among all the nodes
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*高度* $\eta(t)$ 是所有节点中的最大级别'
- en: the *leaves* are the nodes with no children
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*叶子*是没有子节点的节点'
- en: '**Definition.** In a binary tree $t$:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义。** 在二叉树$t$中：'
- en: the *size* $|t|$ is its number of internal nodes
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*大小* $|t|$ 是其内部节点数'
- en: the *level* of a node is its distance from the root (which is at level 0)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 节点的*级别*是其与根的距离（根在级别0）
- en: the *internal path length* $\pi(t)$ is the sum of the levels of each of the
    internal nodes in $t$
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*内部路径长度* $\pi(t)$ 是$t$中每个内部节点的级别之和'
- en: the *external path length* $\xi(t)$ is the sum of the levels of each of the
    external nodes in $t$
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*外部路径长度* $\xi(t)$ 是$t$中每个外部节点的级别之和'
- en: the *height* $\eta(t)$ is the maximum level among all the external nodes
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*高度* $\eta(t)$ 是所有外部节点中的最大级别'
- en: the *leaves* are the (internal) nodes with both children external
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*叶子*是（内部）节点，两个子节点都是外部节点'
- en: '*Recursive definitions.* It is often convenient to work with recursive definitions
    for tree parameters. In a binary tree $t$, the parameters we have defined are
    all $0$ if $t$ is an external node; otherwise if the root of $t$ is an internal
    node and the left and right subtrees, respectively, are denoted by $t_l$ and $t_r$,
    we have following recursive formulae: $$\eqalign{ |t|&=|t_l|+|t_r|+1\cr \pi(t)&=\pi(t_l)+\pi(t_r)+|t|-1\cr
    \xi(t)&=\xi(t_l)+\xi(t_r)+|t|+1\cr \eta(t)&=1+\max(\eta(t_l), \eta(t_r)).\cr}$$
    These are easily seen to be equivalent to the definitions above. These forms serve
    as the basis for deriving functional equations on associated generating functions
    when we analyze tree parameters. They also facilitate inductive proofs about relationships
    among the parameters.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '*递归定义。* 通常方便使用递归定义来处理树参数。在二叉树$t$中，如果$t$是外部节点，则我们定义的参数都为$0$；否则，如果$t$的根是内部节点，左右子树分别用$t_l$和$t_r$表示，则我们有以下递归公式：$$\eqalign{
    |t|&=|t_l|+|t_r|+1\cr \pi(t)&=\pi(t_l)+\pi(t_r)+|t|-1\cr \xi(t)&=\xi(t_l)+\xi(t_r)+|t|+1\cr
    \eta(t)&=1+\max(\eta(t_l), \eta(t_r)).\cr}$$ 很容易看出这些与上面的定义是等价的。这些形式为我们在分析树参数时推导相关生成函数的函数方程提供了基础。它们还有助于关于参数之间关系的归纳证明。'
- en: '*Example.* Path lengths in any binary tree $t$ satisfy $\xi({t})=\pi({t})+2|t|$.
    Subtracting the equation $\pi(t)=\pi(t_l)+\pi(t_r)+|t|-1$ from the equation $\xi(t)=\xi(t_l)+\xi(t_r)+|t|+1$
    immediately provides the basis for a proof by induction.'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*示例。* 任何二叉树$t$中的路径长度满足$\xi({t})=\pi({t})+2|t|$。从方程$\pi(t)=\pi(t_l)+\pi(t_r)+|t|-1$减去方程$\xi(t)=\xi(t_l)+\xi(t_r)+|t|+1$立即提供了归纳证明的基础。'
- en: In the analysis of algorithms, we are particularly interested in knowing the
    *average* values of these parameters, for various types of “random” trees. One
    of our primary topics of discussion for this chapter is how these quantities relate
    to fundamental algorithms and how we can determine their expected values. A random
    binary tree has larger values for both path length and height than a random forest.
    One of the prime objectives of this chapter is to quantify these and similar observations,
    precisely.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在算法分析中，我们特别关注这些参数的*平均*值，对于各种类型的“随机”树。本章的主要讨论话题之一是这些数量如何与基本算法相关，以及我们如何确定它们的期望值。随机二叉树的路径长度和高度都比随机森林大。本章的主要目标之一是准确量化这些以及类似的观察结果。
- en: 6.5 Examples of Tree Algorithms
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.5 树算法示例
- en: Trees are relevant to the study of analysis of algorithms not only because they
    implicitly model the behavior of recursive programs but also because they are
    involved explicitly in many basic algorithms that are widely used. For typical
    applications, we are interested in the path length and height of trees. To consider
    the average value of such parameters, of course, we need to specify a model defining
    what is meant by a *random* tree. For applications such as tree traversal and
    expression evaluation (or, more generally, recursive program execution, the model
    where trees are taken equally likely is worth considering. For these applications,
    we study so-called *Catalan models*, where each of the $T_N$ binary trees of size
    $N$ or general trees of size $N+1$ are taken with equal probability. This is not
    the only possibility---in many situations, the trees are induced by external data,
    and other models of randomness are appropriate. Next, we consider a particularly
    important example.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 树对算法分析的研究不仅因为它们隐含地模拟了递归程序的行为，而且因为它们明确地涉及到许多广泛使用的基本算法。对于典型应用，我们关注树的路径长度和高度。当然，为了考虑这些参数的平均值，我们需要指定一个定义“随机”树的模型。对于树遍历和表达式求值（或者更一般地说，递归程序执行）等应用，值得考虑的是所有树等可能出现的模型。对于这些应用，我们研究所谓的*卡特兰模型*，其中每个大小为$N$的二叉树$T_N$或大小为$N+1$的一般树都以相等概率出现。这不是唯一的可能性---在许多情况下，树是由外部数据引起的，其他随机模型更合适。接下来，我们考��一个特别重要的例子。
- en: 6.6 Binary Search Trees
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.6 二叉搜索树
- en: One of the most important applications of binary trees is the *binary tree search*
    algorithm, a method that uses binary trees explicitly to provide an efficient
    solution to a fundamental problem in computer science. For full details, see Section
    3.2 in Algorithms, 4th edition. The analysis of binary tree search illustrates
    the distinction between models where all trees are equally likely to occur and
    models where the underlying distribution is nonuniform. The juxtaposition of these
    two is one of the essential concepts of this chapter.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 二叉树最重要的应用之一是*二叉树搜索*算法，这是一种明确使用二叉树来提供计算机科学中基本问题高效解决方案的方法。有关详细信息，请参阅《算法，第4版》中的第3.2节。二叉树搜索的分析说明了在所有树等可能出现和基础分布不均匀的模型之间的区别。这两者的并置是本章的基本概念之一。
- en: '**Definition.** A *binary search tree* is a binary tree with keys associated
    with the internal nodes, satisfying the constraint that the key in every node
    is greater than or equal to all the keys in its left subtree and less than or
    equal to all the keys in its right subtree.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**定义。** *二叉搜索树*是一棵与内部节点关联键的二叉树，满足每个节点中的键都大于或等于其左子树中的所有键，且小于或等于其右子树中的所有键的约束。'
- en: We study binary search trees under the *random permutation* model, where we
    assume that each permutation of the keys in the tree (all distinct) is equally
    likely as input. This model has been validated in many practical situations. Many
    different permutations may map to the same tree. It is not true that each tree
    is equally likely to occur if keys are inserted in random order into an initially
    empty tree.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*随机排列*模型下研究二叉搜索树，假设树中每个键的排列（都不同）都是等可能的输入。这个模型在许多实际情况下得到验证。许多不同的排列可能映射到同一棵树。如果键以随机顺序插入到最初为空的树中，则并非每棵树都是等可能出现的。
- en: The cost of constructing a particular tree is directly proportional to its internal
    path length, since nodes are not moved once inserted, and the level of a node
    is exactly the number of nodes required to insert it. Thus, the cost of constructing
    a tree is the same for each of the permutations that could lead to its construction.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 构建特定树的成本与其内部路径长度成正比，因为节点一旦插入就不会移动，而节点的级别恰好是插入所需节点的数量。因此，构建树的成本对于可能导致其构建的每个排列都是相同的。
- en: We could obtain the average construction cost by adding, for all $N!$ permutations,
    the internal path length of the resulting tree (the cumulated cost) and then dividing
    by $N!$. The cumulated cost also could be computed by adding, for all trees, the
    product of the internal path length and the number of permutations that lead to
    the tree being constructed. This is the average internal path length that we expect
    after $N$ random insertions into an initially empty tree, but it is *not* the
    same as the average internal path length of a random binary tree, under the Catalan
    model where all trees are equally likely. It requires a separate analysis. We
    will consider the Catalan tree case in the next section and the binary search
    tree case in Section 6.8. Indeed, it is fortunately the case that the more balanced
    tree structures, for which search and construction costs are low, are more likely
    to occur than tree structures for which the costs are high. In the analysis, we
    will quantify this.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过为所有$N!$排列添加导致构建的树的内部路径长度（累积成本），然后除以$N!$来获得平均构建成本。累积成本也可以通过为所有树添加导致构建的排列数和内部路径长度的乘积来计算。这是我们在最初为空的树中进行$N$次随机插入后预期的平均内部路径长度，但它*不*与随机二叉树的平均内部路径长度相同，在卡特兰模型下所有树等可能的情况下。这需要单独的分析。我们将在下一节考虑卡特兰树的情况，以及在第6.8节考虑二叉搜索树的情况。事实上，更平衡的树结构，搜索和构建成本较低，比搜索和构建成本较高的树结构更有可能发生。在分析中，我们将量化这一点。
- en: 6.7 Average Path Length in Catalan Trees
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.7 卡特兰树中的平均路径长度
- en: 'What is the *average* path length of a tree with $N$ internal nodes, if each
    $N$-node tree is considered to be equally likely? Our analysis of this important
    question is prototypical of the general approach to analyzing parameters of combinatorial
    structures that we introduced in Chapter 3:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 如果每个$N$个内部节点的树被认为是等可能的，那么树的*平均*路径长度是多少？我们对这个重要问题的分析是我们在第3章介绍的分析组合结构参数的一般方法的典型代表：
- en: Define a bivariate generating function (BGF), with one variable marking the
    size of the tree and the other marking the internal path length.
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义一个双变量生成函数（BGF），其中一个变量标记树的大小，另一个变标记内部路径长度。
- en: Derive a functional equation satisfied by the BGF, or its associated cumulative
    generating function (CGF).
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 推导BGF满足的函数方程，或其相关的累积生成函数（CGF）。
- en: Extract coefficients to derive the result.
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提取系数以得出结果。
- en: In a random binary Catalan tree with $N$ nodes, the probability that the left
    subtree has $k$ nodes (and the right subtree has $N-k-1$ nodes) is $T_{k}T_{N-k-1}/T_N$
    (where $T_N={2N\choose N}\bigm / (N+1)$ is the $N$th Catalan number). The denominator
    is the number of possible $N$-node trees and the numerator counts the number of
    ways to make an $N$-node tree by using any tree with $k$ nodes on the left and
    any tree with $N-k-1$ nodes on the right. We refer to this probability distribution
    as the *Catalan distribution*, illustrated in this figure.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 在具有$N$个节点的随机二叉卡特兰树中，左子树有$k$个节点（右子树有$N-k-1$个节点）的概率是$T_{k}T_{N-k-1}/T_N$（其中$T_N={2N\choose
    N}\bigm / (N+1)$是第$N$个卡特兰数）。分母是可能的$N$个节点树的数量，分子计算了通过在左侧使用具有$k$个节点的任何树和在右侧使用具有$N-k-1$个节点的任何树来制作$N$个节点树的方法数。我们将这种概率分布称为*卡特兰分布*，如图所示。
- en: '![Catalan distribution](../Images/53b1e0b97bf391de9fa1ff66028dce17.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![卡特兰分布](../Images/53b1e0b97bf391de9fa1ff66028dce17.png)'
- en: 'One of the striking facts about the distribution is that the probability that
    one of the subtrees is empty tends to a constant as $N$ grows: it is $2T_{N-1}/T_N\sim
    1/2$. Indeed, about half the nodes in a random binary tree are likely to have
    an empty subtree, so such trees are not particularly well balanced. Using the
    Catalan distribution, we can analyze path length in a manner similar to our Quicksort
    analysis. The average internal path length in a random binary Catalan tree is
    described by the recurrence $$Q_N=N-1+\sum_{1\le k\le N}{T_{k-1}T_{N-k}\over T_N}(Q_{k-1}+Q_{N-k})
    \qquad\hbox{for $N>0$} $$ with $Q_0=0$. The argument underlying this recurrence
    is general, and can be used to analyze random binary tree structures under other
    models of randomness, by substituting other distributions for the Catalan distribution.
    For example, as discussed below, the analysis of binary search trees leads to
    the uniform distribution (each subtree size occurs with probability $1/N$) and
    the recurrence matches the Quicksort recurrence. Continuing along the lines of
    the Quicksort analysis is possible but leads to intricate calculations, easily
    avoided with CGFs.'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 关于分布的一个引人注目的事实之一是，随着$N$的增长，其中一个子树为空的概率趋于一个常数：它是$2T_{N-1}/T_N\sim 1/2$。事实上，随机二叉树中大约一半的节点可能有一个空子树，因此这样的树并不特别平衡。使用卡特兰分布，我们可以类似于我们对快速排序分析的方式分析路径长度。随机二叉卡��兰树中的平均内部路径长度由递归$$Q_N=N-1+\sum_{1\le
    k\le N}{T_{k-1}T_{N-k}\over T_N}(Q_{k-1}+Q_{N-k}) \qquad\hbox{for $N>0$} $$描述，其中$Q_0=0$。这个递归背后的论点是一般的，并且可以通过用其他分布替换卡特兰分布来分析其他随机二叉树结构，例如，如下所讨论的，二叉搜索树的分析导致均匀分布（每个子树大小以$1/N$的概率发生）并且递归与快速排序递归匹配。继续沿着快速排序分析的方向是可能的，但会导致复杂的计算，可以通过CGF轻松避免。
- en: '**Theorem.** (Path length in binary trees) The average internal path length
    in a random binary tree with $N$ internal nodes is $${(N+1)4^N\over{2N\choose
    N}}-3N-1 = N\sqrt{\pi N}-3N+O(\sqrt{N}).$$ *Proof.* Define the CGF $$C_T(z) \equiv
    P_u(1,z) = \sum_{t\in \cal T}\pi(t)z^{|t|}.$$ The average path length is $[z^n]C_T(z)/[z^n]T(z)$.
    The recursive definition of binary trees leads immediately to $$\eqalign{C_T(z)
    &= \sum_{t_l\in \cal T}\sum_{t_r\in\cal T} (\pi(t_l ) + \pi(t_r ) + |t_l | + |
    t_r|) z^{|t_l| + |t_r| + 1}\cr &= 2zC_T(z)T(z)+2z^2T(z)T^\prime(z),\cr} $$ which
    yields the solution $$C_T(z) = {2z^2T(z)T^\prime(z)\over 1-2zT(z)}.$$ Now, $T(z)=(1-\sqrt{1-4z})/(2z)$,
    so $1-2zT(z)=\sqrt{1-4z}$ and $zT^\prime(z)=-T(z)+1/\sqrt{1-4z}$. Substituting
    these gives the explicit expression $$zC_T(z) = {z \over 1-4z} - {1 -z\over \sqrt
    {1-4z}} + 1,$$ which expands to give the stated result.'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**定理。**（二叉树中的路径长度）具有$N$个内部节点的随机二叉树的平均内部路径长度为$${(N+1)4^N\over{2N\choose N}}-3N-1
    = N\sqrt{\pi N}-3N+O(\sqrt{N})。*证明。*定义CGF$$C_T(z) \equiv P_u(1,z) = \sum_{t\in
    \cal T}\pi(t)z^{|t|}。$$平均路径长度为$[z^n]C_T(z)/[z^n]T(z)。$二叉树的递归定义立即导致$$\eqalign{C_T(z)
    &= \sum_{t_l\in \cal T}\sum_{t_r\in\cal T} (\pi(t_l ) + \pi(t_r ) + |t_l | + |
    t_r|) z^{|t_l| + |t_r| + 1}\cr &= 2zC_T(z)T(z)+2z^2T(z)T^\prime(z),\cr} $$ 这导致解$$C_T(z)
    = {2z^2T(z)T^\prime(z)\over 1-2zT(z)。$$现在，$T(z)=(1-\sqrt{1-4z})/(2z)$，所以$1-2zT(z)=\sqrt{1-4z}$，$zT^\prime(z)=-T(z)+1/\sqrt{1-4z}。$代入这些给出显式表达式$$zC_T(z)
    = {z \over 1-4z} - {1 -z\over \sqrt {1-4z}} + 1，$$展开得到所述结果。'
- en: 'This result is illustrated by the large random binary tree shown below: asymptotically,
    a large tree roughly fits into a $\sqrt{N}$-by-$\sqrt{N}$ square.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结果由下面显示的大型随机二叉树所说明：渐近地，一个大树大致适合于一个$\sqrt{N}$乘以$\sqrt{N}$的正方形。
- en: '![](../Images/a26e181f82c4916c48b5daa91a478ea4.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/a26e181f82c4916c48b5daa91a478ea4.png)'
- en: '**Theorem.** (Path length in general trees) The average path length in a random
    general tree with $N$ internal nodes is $${N\over 2}\biggl({4^{N-1}\over{2N-2\choose
    N-1}}-1\biggr) = {N\over2}\bigl(\sqrt{\pi N}-1\bigr)+O({\sqrt{N}}).$$ *Proof.*
    Proceed as above: $$\eqalign{ C_G(z)&\equiv\sum_{t\in\cal G}{\pi(t)}z^{|t|}\cr
    &=\sum_{k\ge0}\sum_{t_1\in\cal G}\dots\sum_{t_k\in\cal G} (\pi(t_1)+\cdots+\pi(t_k)+|t_1|+\ldots+|t_k|)
    z^{|t_1|+\ldots+|t_k|+1}\cr }$$ This (eventually) leads to the equation $$C_G(z)
    = {zC_G(z)+z^2G^\prime(z)\over(1-G(z))^2}.$$ which simplifies to give $$C_G(z)={1\over2}{z\over1-4z}-{1\over2}{z\over\sqrt{1-4z}}.$$
    where $G(z)=zT(z)=(1-\sqrt{1-4z})/2$ is the Catalan generating function, which
    enumerates general trees. Expanding $[z^N]C_G(z)/[z^N]G(z)$ leads to the stated
    result.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**定理。**（一般树中的路径长度）具有$N$个内部节点的随机一般树的平均路径长度为$${N\over 2}\biggl({4^{N-1}\over{2N-2\choose
    N-1}}-1\biggr) = {N\over2}\bigl(\sqrt{\pi N}-1\bigr)+O({\sqrt{N}})。*证明。*按照上述步骤进行：$$\eqalign{
    C_G(z)&\equiv\sum_{t\in\cal G}{\pi(t)}z^{|t|}\cr &=\sum_{k\ge0}\sum_{t_1\in\cal
    G}\dots\sum_{t_k\in\cal G} (\pi(t_1)+\cdots+\pi(t_k)+|t_1|+\ldots+|t_k|) z^{|t_1|+\ldots+|t_k|+1}\cr
    }$$ 这（最终）导致方程$$C_G(z) = {zC_G(z)+z^2G^\prime(z)\over(1-G(z))^2}。$$简化后得到$$C_G(z)={1\over2}{z\over1-4z}-{1\over2}{z\over\sqrt{1-4z}}。$$其中$G(z)=zT(z)=(1-\sqrt{1-4z})/2$是生成一般树的卡特兰生成函数。展开$[z^N]C_G(z)/[z^N]G(z)$得到所述结果。'
- en: 6.8 Path Length in Binary Search Trees
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.8 二叉搜索树中的路径长度
- en: The analysis of path length in binary search trees is actually the study of
    a property of *permutations*, not trees, since we start with a random permutation.
    In Chapter 7, we discuss properties of permutations as combinatorial objects in
    some detail. We mention the analysis of path length in BSTs here not only because
    it is interesting to compare it with the analysis just given for random trees.
    It is virtually identical to our Quicksort analysis.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在二叉搜索树中路径长度的分析实际上是对*排列*的性质的研究，而不是对树的研究，因为我们从一个随机排列开始。在第7章中，我们将详细讨论排列作为组合对象的性质。我们在这里提到BST的路径长度分析不仅是因为将其与刚刚给出的随机树的分析进行比较很有趣，而且它几乎与我们的快速排序分析完全相同。
- en: '**Theorem.** (Construction cost of BSTs.) The average number of comparisons
    involved in the process of constructing a binary search tree by inserting $N$
    distinct keys in random order into an initially empty tree (the average internal
    path length of a random binary search tree) is $$2(N+1)(H_{N+1}-1)-2N\approx 1.386
    N\lg N - 2.846 N$$ with variance asymptotic to $(7-2\pi^2/3)N^2$.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**定理。**（BST的构造成本）通过将$N$个不同键以随机顺序插入到初始空树中构造二叉搜索树的过程中涉及的平均比较次数（随机二叉搜索树的平均内部路径长度）为$$2(N+1)(H_{N+1}-1)-2N\approx
    1.386 N\lg N - 2.846 N$$，方差渐近为$(7-2\pi^2/3)N^2$。'
- en: Asymptotically, a large BST roughly fits into a $\log{N}$-by-$N/\log{N}$ rectangle.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 渐近地，一个大的BST大致适合于一个$\log{N}$乘以$N/\log{N}$的矩形。
- en: '![](../Images/1ac5be2a76afc2feecfeda3b603e45f8.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/1ac5be2a76afc2feecfeda3b603e45f8.png)'
- en: 6.9 Additive Parameters of Random Trees.
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.9 随机树的可加参数。
- en: 'Our analyses for path length generalize in a straightforward manner to cover
    any *additive parameter* that can be aligned with the tree recursion as follows:
    the value of the parameter for a tree is the sum of the values of the parameter
    for the subtrees plus an additional term for the root. Examples of additive parameters
    include size, path length, and number of leaves.'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对路径长度的分析以一种直接的方式推广，以涵盖任何可以与树递归对齐的*可加参数*，如下所示：树的参数值是子树的参数值之和再加上根的额外项。可加参数的示例包括大小、路径长度和叶子节点数。
- en: 6.10 Height
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.10 高度
- en: Generating functions can also be used to study tree height, but the analysis
    is much more intricate than for additive parameters.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 生成函数也可以用于研究树的高度，但与可加参数相比，分析要复杂得多。
- en: 6.11 Summary of Average-Case Results on Properties of Trees
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.11 关于树属性的平均情况结果总结
- en: '| type | path length | height | leaves |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 路径长度 | 高度 | 叶子节点 |'
- en: '| tree | $${N\over 2}\sqrt{\pi N} -{N\over 2}+ O(\sqrt{N})$$ | $$\sqrt{\pi
    N} +O(1)$$ | $$N\over2$$ |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 树 | $${N\over 2}\sqrt{\pi N} -{N\over 2}+ O(\sqrt{N})$$ | $$\sqrt{\pi N}
    +O(1)$$ | $$N\over2$$ |'
- en: '| binary tree | $$N\sqrt{\pi N}-3N+O(\sqrt{N})$$ | $$2\sqrt{\pi N} +O(N^{1/4
    + \epsilon})$$ | $$\sim{N\over4}$$ |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 二叉树 | $$N\sqrt{\pi N}-3N+O(\sqrt{N})$$ | $$2\sqrt{\pi N} +O(N^{1/4 + \epsilon})$$
    | $$\sim{N\over4}$$ |'
- en: '| BST | $$2N\ln N+(2\gamma-4)N+O(\log N)$$ | $$\sim 4.31107...\ln N$$ | $$\qquad
    {N+1\over3}\qquad$$ |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| BST | $$2N\ln N+(2\gamma-4)N+O(\log N)$$ | $$\sim 4.31107...\ln N$$ | $$\qquad
    {N+1\over3}\qquad$$ |'
- en: 6.12 Lagrange Inversion
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.12 拉格朗日反演
- en: 6.13 Rooted Unordered Trees
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.13 有根无序树
- en: 'The following are four major types of trees that arise in the analysis of algorithms,
    which form a hierarchy:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在算法分析中出现的四种主要类型的树形成了一个层次结构：
- en: The *free tree*, an acyclic connected graph.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自由树*，一种无环连通图。'
- en: The *rooted tree*, a free tree with a distinguished root node.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*根树*，具有一个明确根节点的自由树。'
- en: The *ordered tree*, a rooted tree where the order of the subtrees of a node
    is significant.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*有序树*，根节点的子树顺序很重要的根树。'
- en: The *binary tree* is an ordered tree where every node has degree 0 or 2.
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*二叉树*是一种每个节点具有度为0或2的有序树。'
- en: To this point, we have been studying ordered and binary trees.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在研究有序树和二叉树。
- en: In the nomenclature that we use, the adjective describes the characteristic
    that separates each type of tree from the one above it in the hierarchy. It is
    also common to use nomenclature that separates each type from the one *below*
    it in the hierarchy. Thus, we sometimes refer to free trees as unrooted trees,
    rooted trees as unordered trees, and ordered trees as general Catalan trees.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们使用的命名法中，形容词描述了将每种类型的树与层次结构中上面的树区分开的特征。通常也使用将每种类型与层次结构中下面的树分开的命名法。因此，我们有时将自由树称为未根树，根树称为无序树，有序树称为一般的卡特兰树。
- en: Here is an illustration of the hierarchy for trees with five nodes. The 14 different
    five-node ordered trees are depicted in the figure, and they are further organized
    into equivalence classes using small shaded and larger open rectangles. There
    are 9 different five-node rooted trees (those in shaded rectangles are identical
    as rooted trees) and 3 different five-node free trees (those enclosed in large
    rectangles are identical as free trees).
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是具有五个节点的树的层次结构示例。图中展示了14种不同的五节点有序树，并且它们进一步被组织成使用小阴影和较大开放矩形的等价类。有9种不同的五节点根树（阴影矩形中的树是相同的根树），以及3种不同的五节点自由树（大矩形中的树是相同的自由树）。
- en: '![](../Images/6e7fbabca5b5a92878446072cc43538b.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/6e7fbabca5b5a92878446072cc43538b.png)'
- en: A few more words on nomenclature are appropriate because of the variety of terms
    found in the literature. Ordered trees are often called *plane* trees and unordered
    trees are referred to as *nonplane* trees. The term *plane* is used because the
    structures can be transformed to one another with continuous operations in the
    plane. Though this terminology is widely used, we prefer *ordered* because of
    its natural implications with regard to computer representations. The term *oriented*
    is often used to refer to the fact that the root is distinguished, so there is
    an orientation of the edges towards the root; we prefer to use the term *rooted*
    if it is not obvious from the context that there is a root involved.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于文献中发现的术语种类繁多，有必要再多说几句关于命名。有序树通常被称为*平面*树，无序树则被称为*非平面*树。术语*平面*之所以被使用，是因为这些结构可以通过平面上的连续操作相互转换。尽管这种术语广泛使用，但我们更喜欢*有序*，因为它对于计算机表示具有自然的含义。术语*定向*通常用来指出根节点是有区别的，因此边缘朝向根节点；如果从上下文中不明显涉及到根节点，我们更倾向于使用术语*根*。
- en: As the definitions get more restrictive, the number of trees that are regarded
    as different gets larger, so, for a given size, there are more rooted trees than
    free trees, more ordered trees than rooted trees, and more binary trees than ordered
    trees. It turns out that the ratio between the number of rooted trees and the
    number of free trees is proportional to $N$; the corresponding ratio of ordered
    trees to rooted trees grows exponentially with $N$; and the ratio of binary trees
    to ordered trees is a constant. These enumerations results are classical, available
    through analysis along the lines we have been considering (we considered the analysis
    for ordered and binary trees earlier in this chapter) and summarized in the table
    below. The constants in the table are approximate and $\alpha\approx 2.9558$.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 随着定义变得更加严格，被视为不同的树的数量变得更多，因此，对于给定大小，根树比自由树更多，有序树比根树更多，二叉树比有序树更多。事实证明，根树数量与自由树数量之间的比例与$N$成正比；有序树与根树之间的相应比例随$N$呈指数增长；而二叉树与有序树之间的比例是一个常数。这些枚举结果是经典的，可以通过我们一直在考虑的分析方法得到（我们在本章前面考虑了有序树和二叉树的分析），并总结在下表中。表中的常数是近似值，$\alpha\approx
    2.9558$。
- en: '| type | number of trees with N nodes |'
  id: totrans-84
  prefs: []
  type: TYPE_TB
  zh: '| 类型 | 具有N个节点的树的数量 |'
- en: '| free | $$\sim .5350\cdot\alpha^N / N^{5/2}$$ |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 自由 | $$\sim .5350\cdot\alpha^N / N^{5/2}$$ |'
- en: '| rooted | $$\sim .4399\cdot\alpha^N / N^{3/2}$$ |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| 根 | $$\sim .4399\cdot\alpha^N / N^{3/2}$$ |'
- en: '| ordered | $$\sim .1410\cdot 4^N / N^{3/2}$$ |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| 有序 | $$\sim .1410\cdot 4^N / N^{3/2}$$ |'
- en: '| binary | $$\sim .5640\cdot 4^N N^{3/2}$$ |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| 二叉 | $$\sim .5640\cdot 4^N N^{3/2}$$ |'
- en: 6.14 Labelled Trees
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.14 标记树
- en: 6.15 Other Types of Trees
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 6.15 其他类型的树
- en: It is often convenient to place various local and global restrictions on trees,
    for example, to suit requirements of a particular application or to try rule out
    degenerate cases. From a combinatorial standpoint, any restriction corresponds
    to a new class of tree, and a new set of problems need to be solved to enumerate
    the trees and to learn their statistical properties.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 通常方便地对树施加各种局部和全局限制，例如，以适应特定应用的要求或尝试排除退化情况。从组合学的角度来看，任何限制都对应于一类新的树，需要解决一组新的问题来枚举这些树并了解它们的统计特性。
- en: 'This table shows examples of eight different types of trees: 3-ary and 4-ary,
    3-restricted and 4-restricted, 2-3 and 2-3-4, and red-black and AVL.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 该表显示了八种不同类型的树的示例：3元和4元，3受限和4受限，2-3和2-3-4，以及红黑树和AVL树。
- en: '![](../Images/01c8c00e25abd91a1f31a63a30568b6a.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](../Images/01c8c00e25abd91a1f31a63a30568b6a.png)'
- en: Selected Exercises
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 选定练习
- en: '6.2'
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '6.2'
- en: What proportion of the binary trees with $N$ internal nodes have both subtrees
    of the root nonempty? For $N=4$, the answer is $4/14$.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 具有$N$个内部节点的二叉树中，根节点的两个子树都非空的比例是多少？对于$N=4$，答案是$4/14$。
- en: '6.6'
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '6.6'
- en: What proportion of the forests with $N$ nodes have no trees consisting of a
    single node? For $N=1,2,3,$ and $4$, the answers are $0, 1/2, 2/5,$ and $3/7$,
    respectively
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 具有$N$个节点的森林中没有由单个节点组成的树的比例是多少？对于$N=1,2,3,$和$4$，答案分别为$0, 1/2, 2/5,$和$3/7$。
- en: '6.18'
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '6.18'
- en: '[Kraft equality] Let $k_j$ be the number of external nodes at level $j$ in
    a binary tree. The sequence $\{ k_0, k_1, \ldots, k_h \}$ (where $h$ is the height
    of the tree) describes the *profile* of the tree. Show that a vector of integers
    describes the profile of a binary tree if and only if $\sum_j2^{-k_j} = 1$.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '[克拉夫特等式] 设$k_j$是二叉树中第$j$级的外部节点数。序列$\{ k_0, k_1, \ldots, k_h \}$（其中$h$是树的高度）描述了树的*轮廓*。证明只有当$\sum_j2^{-k_j}
    = 1$时，整数向量才描述了二叉树的轮廓。'
- en: '6.19'
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '6.19'
- en: Give tight upper and lower bounds on the path length of a general tree with
    $N$ nodes.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 给出具有$N$个节点的一般树的路径长度的紧密上下界。
- en: '6.20'
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '6.20'
- en: Give tight upper and lower bounds on the internal and external path lengths
    of a binary tree with $N$ internal nodes.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 给出具有$N$个内部节点的二叉树的内部和外部路径长度的紧密上下界。
- en: '6.27'
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '6.27'
- en: For $N=2^n-1$, what is the probability that a perfectly balanced tree structure
    (all $2^n$ external nodes on level $n$) will be built, if all $N!$ key insertion
    sequences are equally likely?
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于$N=2^n-1$，如果所有$N!$个键插入序列等可能，那么构建完全平衡树结构（所有$2^n$个外部节点在第$n$级）的概率是多少？
- en: '6.42'
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '6.42'
- en: 'Internal nodes in binary trees fall into one of three classes: they have either
    two, one, or zero external children. What fraction of the nodes are of each type,
    in a random binary Catalan tree of $N$ nodes?'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 二叉树中的内部节点分为三类：它们有两个、一个或零个外部子节点。在具有$N$个节点的随机二叉卡特兰树中，每种类型的节点占比是多少？
- en: '6.43'
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: '6.43'
- en: 'Internal nodes in binary trees fall into one of three classes: they have either
    two, one, or zero external children. What fraction of the nodes are of each type,
    in a random binary search tree of $N$ nodes?'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 二叉树中的内部节点分为三类：它们有两个、一个或零个外部子节点。在具有$N$个节点的随机二叉搜索树中，每种类型的节点占比是多少？
- en: Review Questions
  id: totrans-111
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 复习问题
- en: Q6.1
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q6.1
- en: Give an asymptotic approximation (leading term) for the number of unary-binary
    trees with $n$ nodes.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 给出具有$n$个节点的一元二元树数量的渐近近似（主导项）。
- en: Q6.2
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q6.2
- en: 'Rank these trees in order of their likely height for large $n$: (*a*) random
    $n$_node Catalan tree (*b*) random $n$_node BST (*c*) random $n$_node AVL tree'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 按照它们在$n$较大时可能的高度的顺序排列这些树：（*a*）随机$n$_节点卡特兰树（*b*）随机$n$_节点二叉搜索树（*c*）随机$n$_节点AVL树
- en: Q6.3
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q6.3
- en: A binary trie structure is a binary tree with two types of external nodes (void
    and nonvoid) with the restriction that void external nodes do not appear in leaves.
    The number of different binary trie structures with n external nodes is 1, 4,
    and 17 when n is 2, 3, and 4, respectively. Starting with the construction $$T
    = Z_V+(Z_I\times T\times T)+2(Z_N\times Z_I\times (T - Z_V)) $$ derive an asymptotic
    approximation to the number of binary trie structures of with n external nodes.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 二进制trie结构是一种具有两种外部节点（空和非空）的二叉树，限制条件是空外部节点不出现在叶子中。当$n$为2、3和4时，具有$n$个外部节点的不同二进制trie结构的数量分别为1、4和17。从构造$$T
    = Z_V+(Z_I\times T\times T)+2(Z_N\times Z_I\times (T - Z_V)) $$开始，推导出具有$n$个外部节点的二进制trie结构数量的渐近近似。
- en: '*Hint*: $$\sqrt{12z^2-8z+1} = {\sqrt{1-2z}\over(1-6z)^{-1/2}}$$.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '*提示*：$$\sqrt{12z^2-8z+1} = {\sqrt{1-2z}\over(1-6z)^{-1/2}}$$。'
- en: Q6.4
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q6.4
- en: Give an OGF equation for trees whose nodes all have even degree.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 给出所有节点度数均为偶数的树的OGF方程。
- en: Q6.5
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Q6.5
- en: (N. Lindenstrauss) Show that the average length of the right branch in a Catalan
    tree is ~3.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: （N. 林登斯特劳斯）证明卡特兰树右分支的平均长度约为3。
