- en: 8.3 Operating Systems
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 8.3 操作系统
- en: 原文：[https://introcs.cs.princeton.edu/java/83os](https://introcs.cs.princeton.edu/java/83os)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/java/83os](https://introcs.cs.princeton.edu/java/83os)
- en: This section under major construction.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节正在进行重大改造。
- en: '**Memory management.** In many languages, including C and C++, the programmer
    is responsible to manage memory consumption and explicitly free it when it is
    no longer in use. "Micro-managed" memory can be more efficient if done properly,
    but it is tedious and error-prone. Automatic memory collection can be almost as
    efficient in common applications, and requires less development time.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '**内存管理。** 在许多语言中，包括C和C ++，程序员负责管理内存消耗，并在不再使用时显式释放它。如果正确执行，"微管理"内存可能更有效，但这很繁琐且容易出错。自动内存收集在常见应用程序中几乎可以与之一样有效，并且需要更少的开发时间。'
- en: '**Garbage collection.** Invented by John McCarthy in 1958 as part of LISP.
    Idea = determine which objects are reachable via references by other reachable
    objects; free up unreachable objects (garbage). Here are some common [garbage
    collection techniques](http://www.osnews.com/story.php?news_id=6864).'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**垃圾收集。** 由约翰·麦卡锡于1958年作为LISP的一部分发明。思路 = 通过其他可达对象的引用确定哪些对象是可达的；释放不可达对象（垃圾）。这里有一些常见的[垃圾收集技术](http://www.osnews.com/story.php?news_id=6864)。'
- en: '*Reference counting.* Count number of references to each object. When it hits
    zero, can free the object. Drawback - does not work for cyclic linked structures,
    requires frequent updating of count fields.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*引用计数.* 计算对每个对象的引用次数。当引用次数为零时，可以释放对象。缺点 - 不适用于循环链接结构，需要频繁更新计数字段。'
- en: '*Mark-sweep algorithm.* Mark all objects as garbage. Scan through all reachable
    objects and mark as reachable. After scan, anything still marked as garbage can
    be eliminated. Drawback - active memory becomes fragmented, must scan every object
    in memory.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*标记-清除算法.* 将所有对象标记为垃圾。扫描所有可达对象并标记为可达。扫描后，仍标记为垃圾的任何内容都可以被清除。缺点 - 活动内存变得分散，必须扫描内存中的每个对象。'
- en: '*Copying.* Do mark-sweep, but copy all non-garbage objects to a contiguous
    block of memory. Eliminates fragmention. Drawback - persistent objects get copied
    back-and-forth, requires twice as much memory.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*复制.* 进行标记-清除，但将所有非垃圾对象复制到连续的内存块中。消除碎片。缺点 - 持久对象来回复制，需要两倍的内存。'
- en: '*Mark compact.* Copy objects to the same part of memory. Persistent objects
    are infrequently copied.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*标记整理.* 将对象复制到内存的同一部分。持久对象很少被复制。'
- en: '*Generational.* Divide objects into several "generations" depending on how
    long they have been active. Initially objects are placed in the "youngest" generation,
    as they persist, they move to "older" generations.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*分代.* 根据对象活跃时间将对象划分为几个"代"。最初，对象被放置在"最年轻"的代中，随着持久性，它们移动到"更老"的代中。'
- en: By default [Java](http://developers.sun.com/techtopics/mobility/midp/articles/garbagecollection2/#2)
    uses a three generation garbage collector.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，[Java](http://developers.sun.com/techtopics/mobility/midp/articles/garbagecollection2/#2)
    使用三代垃圾收集器。
- en: Creative Exercises
  id: totrans-11
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
