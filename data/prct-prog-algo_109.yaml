- en: 5.3   Substring Search
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 5.3 �� 子字符串搜索
- en: 原文：[https://algs4.cs.princeton.edu/53substring](https://algs4.cs.princeton.edu/53substring)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://algs4.cs.princeton.edu/53substring](https://algs4.cs.princeton.edu/53substring)
- en: This section under major construction. Searching in long strings - online.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本节正在大规模施工中。在长字符串中搜索 - 在线。
- en: '[This website](http://www-igm.univ-mlv.fr/~lecroq/string/) is a great resource
    for exact string searching algorithms.'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '[这个网站](http://www-igm.univ-mlv.fr/~lecroq/string/)是一个关于精确字符串搜索算法的重要资源。'
- en: '[High-performance pattern matching in Java](http://johannburkard.de/software/stringsearch/)
    for general string searching, searching with wildcards, and searching with character
    classes.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '[Java中的高性能模式匹配](http://johannburkard.de/software/stringsearch/)用于一般字符串搜索，带通配符的搜索和带字符类的搜索。'
- en: Program [Brute.java](Brute.java.html) is brute force string search. Essentially
    equivalent to [SystemSearch.java](SystemSearch.java.html).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[Brute.java](Brute.java.html)是暴力字符串搜索。基本上等同于[SystemSearch.java](SystemSearch.java.html)。
- en: Rabin-Karp.
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 拉宾卡普。
- en: Program [RabinKarp.java](RabinKarp.java.html) implements the Rabin-Karp randomized
    fingerprint algorithm.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[RabinKarp.java](RabinKarp.java.html)实现了拉宾卡普随机指纹算法。
- en: Knuth-Morris-Pratt.
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Knuth-Morris-Pratt。
- en: Program [KMP.java](KMP.java.html) is Knuth-Morris-Pratt algorithm. [KMPplus.java](KMPplus.java.html)
    is an improved version that takes time and space proportional to M + N (independent
    of the alphabet size R).
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[KMP.java](KMP.java.html)是Knuth-Morris-Pratt算法。[KMPplus.java](KMPplus.java.html)是一个改进版本，时间和空间复杂度与M
    + N成正比（与字母表大小R无关）。
- en: Boyer-Moore.
  id: totrans-10
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Boyer-Moore。
- en: Program [BoyerMoore.java](BoyerMoore.java.html) implements the bad-character
    rule part of the Boyer-Moore algorithm. It does not implement the strong good
    suffix rule.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[BoyerMoore.java](BoyerMoore.java.html)实现了Boyer-Moore算法的坏字符规则部分。它不实现强好后缀规则。
- en: Intrusion detection systems.
  id: totrans-12
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 入侵检测系统。
- en: Need very fast string searching since these are deployed at choke points of
    networks. Application
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 需要非常快速的字符串搜索，因为这些部署在网络的瓶颈处。应用
- en: Q+A
  id: totrans-14
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 问答
- en: Exercises
  id: totrans-15
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Design a brute-force substring search algorithm that scans the pattern from
    right to left.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设计一个从右到左扫描模式的暴力子字符串搜索算法。
- en: Show the trace of the brute-force algorithm in the style of figure XYZ for the
    following pattern and text strings.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 展示Brute-Force算法的跟踪，样式类似于图XYZ，用于以下模式和文本字符串。
- en: AAAAAAAB; AAAAAAAAAAAAAAAAAAAAAAAAB
  id: totrans-18
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: AAAAAAAB; AAAAAAAAAAAAAAAAAAAAAAAAB
- en: ABABABAB; ABABABABAABABABABAAAAAAAA
  id: totrans-19
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ABABABAB; ABABABABAABABABABAAAAAAAA
- en: Determine the KMP DFA for the following pattern strings.
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确定以下模式字符串的KMP DFA。
- en: AAAAAAAB
  id: totrans-21
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: AAAAAAAB
- en: AACAAAB
  id: totrans-22
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: AACAAAB
- en: ABABABAB
  id: totrans-23
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ABABABAB
- en: ABAABAAABAAAB
  id: totrans-24
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ABAABAAABAAAB
- en: ABAABCABAABCB
  id: totrans-25
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: ABAABCABAABCB
- en: Suppose that the pattern and text are random strings over an alphabet of size
    R >= 2\. Show that the expected number of character compares is (N - M + 1) (1
    - R^-M) / (1 - R^-1) <= 2 (N - M + 1).
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设模式和文本是在大小为R >= 2的字母表上的随机字符串。证明字符比较的期望次数为(N - M + 1) (1 - R^-M) / (1 - R^-1)
    <= 2 (N - M + 1)。
- en: Construct an example where the Boyer-Moore algorithm (with only the bad character
    rule) performls poorly.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 构造一个例子，其中Boyer-Moore算法（仅使用坏字符规则）性能较差。
- en: How would you modify Rabin-Karp to search for a given pattern with the additional
    proviso that the middle character is a "wildcard" (any text character at all can
    match it).
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何修改拉宾卡普算法以搜索给定模式，并附加条件中间字符是一个“通配符”（任何文本字符都可以匹配它）。
- en: How would you modify Rabin-Karp to determine whether any of a subset of k patterns
    (say, all of the same length) is in the text?
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何修改拉宾卡普算法以确定文本中是否存在k个模式子集中的任何一个（比如，所有长度相同）？
- en: '*Solution.* Compute the hashes of the k patterns and store the hashes in a
    SET.'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 计算k个模式的哈希值，并将哈希值存储在一个集合中。'
- en: How would you modify Rabin-Karp to search for an M-by-M pattern in an N-by-N
    text? Or some other irregularly-shaped pattern in an N-by-N text?
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如何修改拉宾卡普算法以在N×N文本中搜索M×M模式？或者在N×N文本中搜索其他不规则形状的模式？
- en: Monte Carlo vs. Las Vegas Rabin Karp.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 蒙特卡洛与拉斯维加斯拉宾卡普。
- en: '**Online palindrome detection.** Read in characters one at a time. Report at
    each instant if the current string is a palindrome. *Hint*: use Karp-Rabin hashing
    idea.'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**在线回文检测。** 逐个读入字符。报告每个瞬间当前字符串是否是回文。*提示*：使用Karp-Rabin哈希思想。'
- en: '**Tandem repeats.** A tandem repeat of a base string b within a string s is
    a substring of s consisting of at least one consecutive copy of the base string
    b. Given b and s, design an algorithm to find a tandem repeat of b within s of
    maximum length. The running time should be proportional to M + N, where M is the
    length of b and N is the length of s.'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**串联重复。** 在字符串s中，基本字符串b的串联重复是由至少一个连续的基本字符串b的副本组成的子字符串。给定b和s，设计一个算法，在s中找到b的最大长度的串联重复。运行时间应与M
    + N成正比，其中M是b的长度，N是s的长度。'
- en: '*Solution.* This problem is a generalization of substring search (is there
    at least one consecutive copy of b within s?) so we need an algorithm that generalize
    substring search. Create the Knuth-Morris-Pratt DFA for k concatenated copies
    of b, where k = n/m. Now, simulate DFA on input s and record the largest state
    that it reaches. From this, we can identify the longest tandem repeat.'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 这个问题是子字符串搜索的一般化（s中是否至少有一个连续的b的副本？），所以我们需要一个泛化的子字符串搜索算法。创建k个b的连接副本的Knuth-Morris-Pratt
    DFA，其中k = n/m。现在，在输入s上模拟DFA并记录它达到的最大状态。从中，我们可以识别最长的串联重复。'
- en: '**Suffix-prefix match.** Design a linear-time algorithm to find the longest
    suffix of one string *a* that exactly matches a prefix of another string *b*.'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**后缀前缀匹配。** 设计一个线性时间算法，找到一个字符串*a*的最长后缀，恰好匹配另一个字符串*b*的前缀。'
- en: '**Cyclic rotation.** Design a linear-time algorithm to determine whether one
    string is a cyclic rotation of another. A string *a* is a cyclic rotation of a
    string *b* if *a* and *b* have the same length and *a* consists of a suffix of
    *b* followed by a prefix of *b*.'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**循环旋转。** 设计一个线性时间算法来确定一个字符串是否是另一个字符串的循环旋转。如果字符串*a*是字符串*b*的循环旋转，那么*a*和*b*具有相同的长度，*a*由*b*的后缀和前缀组成。'
- en: '**Substring of a circular string.** Design a linear-time algorithm to determine
    whether one string *a* is a substring of a cirular string *b*.'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**循环字符串的子串。** 设计一个线性时间算法来确定一个字符串 *a* 是否是循环字符串 *b* 的子串。'
- en: '**Longest palindromic substring.** Given a string s, find the longest substring
    that is a palindrome (or a Watson-crick palindrome). *Solution*: can be solved
    in linear time using suffix trees or [Manacher''s algorithm](http://www.leetcode.com/2011/11/longest-palindromic-substring-part-ii.html).
    Here''s a simpler solution that typically runs in linearthmic time. First, we
    describe how to find all palindromic substrings of length exactly L in linear
    time: use Karp-Rabin to iteratively form the hashes of each substring of length
    L (and its reverse), and compare. Since you don''t know L, repeatedly double your
    guess of L until you know the optimal length is between L and 2L. Then use binary
    search to find the exactly length.'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最长回文子串。** 给定一个字符串 s，找到最长的回文子串（或 Watson-crick 回文串）。*解决方案*：可以使用后缀树或[Manacher''s
    algorithm](http://www.leetcode.com/2011/11/longest-palindromic-substring-part-ii.html)在线性时��内解决。这里有一个通常在线性对数时间内运行的更简单的解决方案。首先，我们描述如何在线性时间内找到长度恰好为
    L 的所有回文子串：使用 Karp-Rabin 迭代地形成每个长度为 L 的子串（及其反转）的哈希值，并进行比较。由于你不知道 L，重复将你对 L 的猜测加倍，直到你知道最佳长度在
    L 和 2L 之间。然后使用二分查找找到确切的长度。'
- en: '*Solution.* [Manacher.java](Manacher.java.html) is an implementation of Manacher''s
    algorithm.'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* [Manacher.java](Manacher.java.html) 是 Manacher 算法的实现。'
- en: '**Repeated substring.** [ [Mihai Patrascu](http://web.mit.edu/~mip/www/probs.html)]
    Given an integer K and a string of length N, find the longest substring which
    appears at least K times.'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**重复子串。** [ [Mihai Patrascu](http://web.mit.edu/~mip/www/probs.html)] 给定一个整数
    K 和长度为 N 的字符串，找到至少出现 K 次的最长子串。'
- en: '*One solution.* Assume you know the length L of the repeated string. Hash each
    substring of length L, and check if any hash occurs K or more times. If so, check
    to make sure you didn''t get unlucky. Since you don''t know L, repeatedly double
    your guess of L until you know the optimal length is between L and 2L. Then use
    binary search to find the right value.'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*一个解决方案。* 假设你知道重复字符串的长度 L。对长度为 L 的每个子串进行哈希处理，并检查任何哈希是否出现 K 次或更多。如果是，检查以确保你没有运气不佳。由于你不知道
    L，重复将你对 L 的猜测加倍，直到你知道最佳长度在 L 和 2L 之间。然后使用二分查找找到正确的值。'
- en: '**Longest common substring.** Given two (or three strings), find the longest
    substring that appears in all three. *Hint*: assume you know the length L of the
    longest common substring. Hash each substring of length L and check if any hash
    bucket contains (at least) one entry from each string.'
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**最长公共子串。** 给定两个（或三个）字符串，找到在所有三个字符串中都出现的最长子串。*提示*：假设你知道最长公共子串的长度 L。对长度为 L 的每个子串进行哈希处理，并检查任何哈希桶是否包含每个字符串的（至少）一个条目。'
- en: '**All matches.** Modify KMP to find all matches in linear time (instead of
    leftmost match).'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**所有匹配。** 修改 KMP 以在线性时间内找到所有匹配（而不是最左匹配）。'
- en: '**Fibonacci string.** Interesting case for KMP. F(1) = B, F(2) = A, F(3) =
    AB, F(4) = ABA, F(5) = ABAAB, F(N) = F(N-1) F(N-2).'
  id: totrans-45
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**斐波那契字符串。** KMP 的有趣案例。F(1) = B, F(2) = A, F(3) = AB, F(4) = ABA, F(5) = ABAAB,
    F(N) = F(N-1) F(N-2)。'
- en: Suppose that x and y are two strings. Design a linear-time algorithm to determine
    whether x^m = y^n for some integers m and n (where x^m means the concatenation
    of m copies of x).
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设 x 和 y 是两个字符串。设计一个线性时间算法来确定是否存在整数 m 和 n 使得 x^m = y^n（其中 x^m 表示 x 的 m 个副本的连接）。
- en: '*Solution.* Suffices to check where xy = yx (this fact is nontrivial - it follows
    from the Lyndon-Schutzenberger theorem).'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案。* 只需检查 xy = yx 的位置（这个事实并不平凡 - 它来自于 Lyndon-Schutzenberger 定理）。'
- en: '**Period of a string.** Let s be a nonempty string. An integer p such that
    s[i] = s[i+p] for all i = 0, 1, ..., N-p-1. is called a *period* of s The period
    of string s is the smallest integer p that is a period of s (can be N). For example,
    the period of ABCABCABCABCAB is 3. Design a linear-time algorithm to compute the
    period of a string.'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**字符串的周期。** 让 s 为一个非空字符串。如果对于所有 i = 0, 1, ..., N-p-1 都有 s[i] = s[i+p]，则整数 p
    被称为 s 的*周期*。字符串 s 的周期是是 s 的周期中最小的整数 p（可以是 N）。例如，ABCABCABCABCAB 的周期是 3。设计一个线性时间算法来计算字符串的周期。'
- en: '**Border of a string.** Given a nonempty string s, we define string w to be
    a *border* of s if s = yw = wz for some strings y, z, and w with |y| = |z| = p,
    i.e., w is a proper substring of s that is both a prefix and a suffix of s. The
    border of a string is the longest proper border of s (can be empty). For example,
    the boder of ABCABCABCABCAB is w = ABCABCAB (with y = ABC, z = CAB, and p = 3).
    Design a linear-time algorithm to compute the border of a string.'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**字符串的边界。** 给定一个非空字符串 s，如果 s = yw = wz 对于一些字符串 y、z 和 w 且 |y| = |z| = p，则我们将字符串
    w 定义为 s 的*边界*，即 w 是 s 的既是前缀又是后缀的一个合适子串。字符串的边界是 s 的最长合适边界（可以为空）。例如，ABCABCABCABCAB
    的边界是 w = ABCABCAB（其中 y = ABC，z = CAB，p = 3）。设计一个线性时间算法来计算字符串的边界。'
- en: '**Anagram substring search.** Given a text string txt[] of length N and a pattern
    string pat[] of length M, determine whether pat[] or any of its anagrams (any
    of its M! permutations) appears in the text.'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**变位词子串搜索。** 给定长度为 N 的文本字符串 txt[] 和长度为 M 的模式字符串 pat[]，确定 pat[] 或其任何变位词（其 M!
    种排列之一）是否出现在文本中。'
- en: '*Hint*: maintain a histogram of the letter frequencies for a given substring
    of length M in the text.'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*提示*：在文本中维护长度为 M 的给定子串的字母频率直方图。'
