- en: '2.4 Case Study: Percolation'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 2.4 案例研究：渗流
- en: 原文：[https://introcs.cs.princeton.edu/python/24percolation](https://introcs.cs.princeton.edu/python/24percolation)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 译文：[https://introcs.cs.princeton.edu/python/24percolation](https://introcs.cs.princeton.edu/python/24percolation)
- en: 'We conclude our study of functions and modules by considering a case study
    of developing a program to solve an interesting scientific problem: a *Monte Carlo*
    simulation to study a natural model known as *percolation*.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过考虑一个有趣的科学问题的案例研究来结束我们对函数和模块的研究：一个用于研究一种名为*渗流*的自然模型的*蒙特卡罗*模拟。
- en: '* * *'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Percolation
  id: totrans-4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渗流
- en: We model the system as an *n*-by-*n* grid of sites. Each site is either *blocked*
    or *open*; open sites are initially *empty*. A *full* site is an open site that
    can be connected to an open site in the top row via a chain of neighboring (left,
    right, up, down) open sites. If there is a full site in the bottom row, then we
    say that the system *percolates*. If sites are independently set to be open with
    *vacancy probability* *p*, what is the probability that the system percolates?
    No mathematical solution to this problem has yet been derived. Our task is to
    compose computer programs to help study the problem.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将系统建模为一个*n*×*n*站点网格。每个站点都是*阻塞*或*开放*的；开放站点最初是*空的*。一个*满*站点是一个可以通过一系列相邻（左、右、上、下）开放站点连接到顶行开放站点的开放站点。如果底行有一个满站点，那么我们说系统*渗流*。如果站点独立设置为以*空缺概率**p*开放，那么系统渗流的概率是多少？对于这个问题还没有数学解决方案。我们的任务是编写计算机程序来帮助研究这个问题。
- en: '![percolates](../Images/972f66f20c9409007beb4df204dc14c6.png) ![does not percolate](../Images/d0f19a8f025e3048e28ec49f7184e9ef.png)'
  id: totrans-6
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![渗流](../Images/972f66f20c9409007beb4df204dc14c6.png) ![不渗流](../Images/d0f19a8f025e3048e28ec49f7184e9ef.png)'
- en: '* * *'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Scaffolding
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 脚手架
- en: Our first step is to pick a representation of the data. We use one boolean matrix
    to represent which sites are open and another boolean matrix to represent which
    sites are full. We will design a `flow()` function that takes as an argument a
    two-dimensional boolean array `isOpen` that specifies which sites are open and
    returns another two-dimensional boolean array `isFull` that specifies which sites
    are full. We will also include a `percolates()` function that checks whether the
    array returned by `flow()` has any full sites on the bottom.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一步是选择数据的表示。我们使用一个布尔矩阵表示哪些站点是开放的，另一个布尔矩阵表示哪些站点是满的。我们将设计一个`flow()`函数，该函数以二维布尔数组`isOpen`作为参数，该数组指定哪些站点是开放的，并返回另一个二维布尔数组`isFull`，指定哪些站点是满的。我们还将包括一个`percolates()`函数，检查`flow()`返回的数组是否在底部有任何满的站点。
- en: '* * *'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Vertical Percolation
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 垂直渗流
- en: Given a boolean matrix that represents the open sites, how do we figure out
    whether it represents a system that percolates? For the moment, we will consider
    a much simpler version of the problem that we call *vertical percolation*. The
    simplification is to restrict attention to vertical connection paths.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 给定表示开放站点的布尔矩阵，我们如何确定它是否代表一个渗流系统？目前，我们将考虑问题的一个简化版本，我们称之为*垂直渗流*。简化是将注意力限制在垂直连接路径上。
- en: '![vertically percolates](../Images/1e6a5d02ce0c8c705f280535b83cb651.png) ![does
    not vertically percolate](../Images/c7560aef43031aad5345c1752c75a2c8.png)'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![垂直渗流](../Images/1e6a5d02ce0c8c705f280535b83cb651.png) ![不垂直渗流](../Images/c7560aef43031aad5345c1752c75a2c8.png)'
- en: Determining the sites that are filled by some path that is connected vertically
    to the top is a simple calculation.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 确定通过某些与顶部垂直连接的路径填充的站点是一个简单的计算。
- en: '![vertical percolation](../Images/33068849ccfccce60fcf98935cb96d6e.png)'
  id: totrans-15
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![垂直渗流](../Images/33068849ccfccce60fcf98935cb96d6e.png)'
- en: The program [percolationv.py](percolationv.py.html) is a solution to the vertical-only
    percolation problem. Try running it with its standard input redirected to [test5.txt](test5.txt)
    or [text8.txt](text8.txt)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[percolationv.py](percolationv.py.html)是解决仅垂直渗流问题的解决方案。尝试将其标准输入重定向到[test5.txt](test5.txt)或[text8.txt](text8.txt)
- en: '* * *'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Monte Carlo Simulation
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 蒙特卡罗模拟
- en: We want our code to work properly for any boolean matrix. Moreover, the scientific
    question of interest involves random boolean matrices. To this end, we compose
    a function `random()` that takes two arguments `n` and `p` and generates a random
    `n`-by-`n` boolean array in which the probability that each element is `True`
    is `p`. That function is defined in [percolationio.py](percolationio.py.html).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望我们的代码对任何布尔矩阵都能正常工作。此外，感兴趣的科学问题涉及随机布尔矩阵。为此，我们编写一个函数`random()`，它接受两个参数`n`和`p`，并生成一个随机的`n`×`n`布尔数组，其中每个元素为`True`的概率为`p`。该函数在[percolationio.py](percolationio.py.html)中定义。
- en: '* * *'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Data Visualization
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据可视化
- en: We can work with bigger problem instances if we use `stddraw` for output. Accordingly
    we develop a function `draw()` to visualize the contsnts of a boolean matrix.
    That function, along with the aforementioned `random()` function and a test `main()`
    function, is defined in [percolationio.py](percolationio.py.html).
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们使用`stddraw`进行输出，我们可以处理更大的问题实例。因此，我们开发一个`draw()`函数来可视化布尔矩阵的内容。该函数，连同前述的`random()`函数和一个测试`main()`函数，在[percolationio.py](percolationio.py.html)中定义。
- en: '| `% python percolationio.py 10 0.8` |'
  id: totrans-23
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| `% python percolationio.py 10 0.8` |'
- en: '| ![percolation visualization](../Images/6190756cbc89441cb3499344fe9d51ac.png)
    |'
  id: totrans-24
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ![渗流可视化](../Images/6190756cbc89441cb3499344fe9d51ac.png) |'
- en: 'Program [visualizev.py](visualizev.py.html) is a test client of [percolationv.py](percolationv.py.html)
    that generates random boolean matrices by calling `percolationio.random()` and
    plots them to standard draw by calling `percolationio.draw()`. It generates output
    such as this:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[visualizev.py](visualizev.py.html)是[percolationv.py](percolationv.py.html)的测试客户端，通过调用`percolationio.random()`生成随机布尔矩阵，并通过调用`percolationio.draw()`将其绘制到标准绘图中。它生成如下输出：
- en: '| `% python visualizev.py 20 0.95 1` | `% python visualizev.py 20 0.95 1` |'
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| `% python visualizev.py 20 0.95 1` | `% python visualizev.py 20 0.95 1` |'
- en: '| ![percolation visualization](../Images/e29be2c2469a62599619c241e7bbd014.png)
    | ![percolation visualization](../Images/9f369c03c89860991f27d5b9d948ed02.png)
    |'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ![渗流可视化](../Images/e29be2c2469a62599619c241e7bbd014.png) | ![渗流可视化](../Images/9f369c03c89860991f27d5b9d948ed02.png)
    |'
- en: '* * *'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Estimating Probabilities
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 估计概率
- en: The next step in our program development process is to compose code to estimate
    the probability that a random system (of size *n* with site vacancy probability
    *p*) percolates. We refer to this quantity as the *percolation probability*. To
    estimate its value, we simply run a number of experiments. Program [estimatev.py](estimatev.py.html)
    encapsulates this computation in a function `evaluate()`.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们程序开发过程中的下一步是编写代码来估计随机系统（大小为*n*，站点空缺概率为*p*）渗透的概率。我们将这个数量称为*渗透概率*。为了估计其值，我们只需运行一些实验。程序[estimatev.py](estimatev.py.html)将这个计算封装在一个`evaluate()`函数中。
- en: '* * *'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Recursive Solution for Percolation
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 渗透的递归解决方案
- en: How do we test whether a system percolates in the general case when any path
    starting at the top and ending at the bottom (not just a vertical one) will do
    the job? Remarkably, we can solve this problem with a compact program, based on
    a classic recursive scheme known as *depth-first search*. Program [percolation.py](percolation.py.html)
    contains an implementation of `flow()` that computes the flow array. Try running
    it with its standard input redirected to [test5.txt](test5.txt) and then [text8.txt](text8.txt)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在一般情况下，我们如何测试系统是否渗透，即从顶部开始并以底部结束的任何路径（不仅仅是垂直路径）都可以完成任务？令人惊讶的是，我们可以通过一个基于经典递归方案的紧凑程序来解决这个问题，该方案被称为*深度优先搜索*。程序[percolation.py](percolation.py.html)包含一个计算流数组的`flow()`实现。尝试将其标准输入重定向到[test5.txt](test5.txt)然后再到[text8.txt](text8.txt)运行它
- en: 'The programs [visualize.py](visualize.py.html) and [estimate.py](estimate.py.html)
    are identical to [visualizev.py](visualizev.py.html) and [estimatev.py](estimatev.py.html)
    respectively, except that they are clients of [percolation.py](percolation.py.html)
    instead of [percolationv.py](percolationv.py.html). The [visualize.py](visualize.py.html)
    program generates output such as this:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 程序[visualize.py](visualize.py.html)和[estimate.py](estimate.py.html)与[visualizev.py](visualizev.py.html)和[estimatev.py](estimatev.py.html)完全相同，只是它们是[percolation.py](percolation.py.html)的客户端，而不是[percolationv.py](percolationv.py.html)。[visualize.py](visualize.py.html)程序生成如下输出：
- en: '![Percolation is less probable at the site vacancy probability decreases](../Images/4be4e88f264568eadf781b0c69017152.png)'
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![随着站点空缺概率的降低，渗透的概率降低](../Images/4be4e88f264568eadf781b0c69017152.png)'
- en: '* * *'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Adaptive Plot
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自适应绘图
- en: To gain more insight into percolation, the next step in program development
    is to compose a program that plots the percolation probability as a function of
    the site vacancy probability *p* for a given value of *n*. Immediately, we are
    faced with numerous decisions. For how many values of *p* should we compute an
    estimate of the percolation probability? Which values of *p* should we choose?
    Program [percplot.py](percplot.py.html) implements a recursive appraoch that produces
    a good-looking curve at relatively low cost.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更深入地了解渗透，程序开发的下一步是编写一个程序，根据给定的*n*值，绘制渗透概率作为站点空缺概率*p*的函数。立即，我们面临着许多决策。我们应该为多少个*p*值计算渗透概率的估计？我们应该选择哪些*p*值？程序[percplot.py](percplot.py.html)实现了一种递归方法，以相对较低的成本产生一个外观良好的曲线。
- en: '| `% python percplot.py 20` | `% python percplot.py 100` |'
  id: totrans-39
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| `% python percplot.py 20` | `% python percplot.py 100` |'
- en: '| ![percolation visualization](../Images/106a874afecbec9dd6b98f49a823d688.png)
    | ![percolation visualization](../Images/7bc93cb8b02baf5a96258409b0111a53.png)
    |'
  id: totrans-40
  prefs:
  - PREF_BQ
  type: TYPE_TB
  zh: '| ![渗透可视化](../Images/106a874afecbec9dd6b98f49a823d688.png) | ![渗透可视化](../Images/7bc93cb8b02baf5a96258409b0111a53.png)
    |'
- en: 'The curves support the hypothesis that there is a *threshold* value (about
    .593): if *p* is greater than the threshold, then the system almost certainly
    percolates; if *p* is less than the threshold, then the system almost certainly
    does not percolate. As *n* increases, the curve approaches a step function that
    changes value from 0 to 1 at the threshold. This phenomenon, known as a *phase
    transition*, is found in many physical systems.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 曲线支持这样的假设，即存在一个*阈值*值（约为0.593）：如果*p*大于阈值，则系统几乎肯定会渗透；如果*p*小于阈值，则系统几乎肯定不会渗透。随着*n*的增加，曲线逐渐接近一个在阈值处从0变为1的阶跃函数。这种现象被称为*相变*，在许多物理系统中都存在。
- en: '* * *'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Lessons
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 教训
- en: '*Expect bugs.* Every interesting piece of code that you compose is going to
    have at least one or two bugs, if not many more. By running small pieces of code
    on small test cases that you understand, you can more easily isolate any bugs
    and then more easily fix them when you find them.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*期望出现错误。* 您编写的每个有趣的代码片段都将至少有一个或两个错误，如果不是更多。通过在您理解的小测试案例上运行小代码片段，您可以更容易地隔离任何错误，然后在找到错误时更容易地修复它们。'
- en: '*Keep modules small.* You can focus attention on at most a few dozen lines
    of code at a time, so you may as well break your code into small modules as you
    compose it.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*保持模块小。* 您一次最多只能关注几十行代码，因此最好在编写代码时将其分解为小模块。'
- en: '![Dependency graph for percolation](../Images/20ed378000e5c09f166fbf271dbbc296.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![渗透的依赖图](../Images/20ed378000e5c09f166fbf271dbbc296.png)'
- en: '*Limit interactions.* In a well-designed modular program, most modules should
    depend on just a few others. In particular, a module that calls a large number
    of other modules needs to be divided into smaller pieces. Modules that are called
    by a large number of other modules (you should have only a few) need special attention,
    because if you do need to make changes in a module''s API, you have to reflect
    those changes in all its clients.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*限制交互。* 在设计良好的模块化程序中，大多数模块应该只依赖于少数其他模块。特别是，调用大量其他模块的模块需要分成更小的部分。被大量其他模块调用的模块（您应该只有少数）需要特别注意，因为如果您需要更改模块的API，您必须在所有客户端中反映这些更改。'
- en: '*Develop code incrementally.* You should run and debug each small module as
    you implement it. That way, you are never working with more than a few dozen lines
    of unreliable code at any given time.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*逐步开发代码。* 在实现每个小模块时，您应该运行和调试它。这样，您永远不会一次处理超过几十行不可靠代码。'
- en: '*Solve an easier problem.* It is typical to begin by putting together the simplest
    code that you can craft that solves a given problem, as we did with vertical-only
    percolation.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*解决一个更简单的问题。* 通常开始时，你会尽可能简单地组合解决给定问题的代码，就像我们在仅垂直渗透的情况下所做的那样。'
- en: '*Consider a recursive solution.* Recursion is an indispensable tool in modern
    programming that you should learn to trust. If you are not already convinced of
    this fact by the simplicity and elegance of the `flow()` method in [percolation.py](percolation.py.html),
    you might wish to try to develop a nonrecursive version.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*考虑一个递归解决方案。* 递归是现代编程中不可或缺的工具，你应该学会信任它。如果你还没有被[percolation.py](percolation.py.html)中`flow()`方法的简单和优雅所说服，你可能希望尝试开发一个非递归版本。'
- en: '*Build tools when appropriate.* Our visualization function `draw()` and random
    boolean matrix generation function `random()` are certainly useful for many other
    applications, as is the adaptive plotting function of [percplot.py](percplot.py.html).
    Incorporating these functions into appropriate modules would be simple.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在适当的时候构建工具。* 我们的可视化函数`draw()`和随机布尔矩阵生成函数`random()`对许多其他应用程序都很有用，就像[percplot.py](percplot.py.html)中的自适应绘图函数一样。将这些函数合并到适当的模块中将会很简单。'
- en: '*Reuse software when possible.* Our `stdio`, `stdrandom`, and `stddraw` modules
    all simplified the process of developing the code in this section.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在可能的情况下重用软件。* 我们的`stdio`、`stdrandom`和`stddraw`模块都简化了本节中代码的开发过程。'
- en: '* * *'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Q & A
  id: totrans-54
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 问答
- en: '**Q.** Editing [visualize.py](visualize.py.html) and [estimate.py](estimate.py.html)
    to rename every occurrence of `percolation` to `percolationv` (or whatever module
    we want to study) seems to be a bother. Is there a way to avoid doing so?'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 编辑[visualize.py](visualize.py.html)和[estimate.py](estimate.py.html)以将每个`percolation`重命名为`percolationv`（或者我们想要研究的任何模块）似乎很麻烦。有没有办法避免这样做？'
- en: '**A.** Yes. The most straightforward approach is to keep multiple files named
    `percolation.py` in separate subdirectories. Then copy the desired `percolation.py`
    file from one of the subdirectories to your working directory, thereby selecting
    one particular implementation. An alternative approach is to use Python''s `import
    as` statement to define an identifier to refer to the module:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 是的。最直接的方法是在不同的子目录中保留多个名为`percolation.py`的文件。然后从一个子目录中复制所需的`percolation.py`文件到你的工作目录，从而选择一个特定的实现。另一种方法是使用Python的`import
    as`语句来定义一个标识符来引用模块：'
- en: '[PRE0]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Now, any call to `percolation.percolates()` uses the function defined in [percolationv.py](percolationv.py.html)
    instead of the one defined in [percolation.py](percolation.py.html). In this situation,
    changing implementations involves editing only one line of source code.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，任何对`percolation.percolates()`的调用都使用[percolationv.py](percolationv.py.html)中定义的函数，而不是[percolation.py](percolation.py.html)中定义的函数。在这种情况下，更改实现只涉及编辑源代码的一行。
- en: '**Q.** That recursive `flow()` function makes me nervous. How can I better
    understand what it''s doing?'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 那个递归的`flow()`函数让我感到紧张。我如何更好地理解它在做什么？'
- en: '**A.** Run it for small examples of your own making, instrumented with instructions
    to write a function-call trace. After a few runs, you will gain confidence that
    it always fills the sites connected to the start point.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 运行自己制作的小例子，附带写一个函数调用跟踪的指令。几次运行后，你会对它总是填充与起始点连接的站点感到自信。'
- en: '**Q.** Is there a simple nonrecursive approach?'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 有没有一个简单的非递归方法？'
- en: '**A.** There are several known approaches that perform the same basic computation.
    We will revisit the problem at the end of the book, in Section 4.5\. In the meantime,
    working on developing a nonrecursive implementation of `flow()` is certain to
    be an instructive exercise, if you are interested.'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 有几种已知的方法执行相同的基本计算。我们将在本书末尾的第4.5节重新讨论这个问题。同时，如果你感兴趣，致力于开发`flow()`的非递归实现肯定是一个有益的练习。'
- en: '**Q.** The [percplot.py](percplot.py.html) program seems to involve a huge
    amount of calculation to get a simple function graph. Is there some better way?'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** [percplot.py](percplot.py.html)程序似乎需要大量计算才能得到一个简单的函数图。有没有更好的方法？'
- en: '**A.** The best strategy would be a mathematical proof of the threshold value,
    but that derivation has eluded scientists.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 最好的策略是对阈值进行数学证明，但这个推导一直困扰着科学家。'
- en: '**Q.** What is the percolation threshold for different lattices?'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 不同晶格的渗透阈值是多少？'
- en: '**A.** [percolation threshold](http://mathworld.wolfram.com/PercolationThreshold.html)
    probability p* such that if p < p* then no spanning cluster exists, and if p >=
    p* then one spanning cluster exists.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** [渗透阈值](http://mathworld.wolfram.com/PercolationThreshold.html)概率p*，如果p
    < p*，则不存在跨越的集群，如果p >= p*，则存在一个跨越的集群。'
- en: '**Q.** Any relevant papers?'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '**Q.** 有相关的论文吗？'
- en: '**A.** See [A Fast Monte Carlo Algorithm for Site or Bond Percolation](http://www.santafe.edu/media/workingpapers/01-02-010.pdf)
    by Newman and Ziff.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '**A.** 参见Newman和Ziff的[A Fast Monte Carlo Algorithm for Site or Bond Percolation](http://www.santafe.edu/media/workingpapers/01-02-010.pdf)。'
- en: '* * *'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Exercises
  id: totrans-70
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Compose a program that takes a command-line argument *n* and creates an *n*-by-*n*
    matrix with the entry in row *i* and column *j* set to `True` if `i` and `j` are
    relatively prime, then shows the n-by-n boolean array on the standard drawing
    (see the "relatively prime" exercise in Section 1.4.). Then, compose a similar
    program to draw the Hadamard matrix of order *n* (see the "Hadamard matrix" creative
    exercise in Section 1.4) and another program to draw the matrix with the element
    in row *i* and column *j* set to `True` if the coefficient of *x^j* in (1+*x*)^(*i*)
    (binomial coefficient) is odd (see the "random walkers" creative exercies in Section
    1.4). You may be surprised at the pattern formed by the latter.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，接受一个命令行参数*n*，并创建一个*n*乘以*n*的矩阵，其中第*i*行和第*j*列的条目设置为`True`，如果`i`和`j`是互质的，则在标准绘图上显示n乘以n的布尔数组（参见第1.4节中的“互质”练习）。然后，编写一个类似的程序来绘制阶为*n*的Hadamard矩阵（参见第1.4节中的“Hadamard矩阵”创意练习），以及另一个程序来绘制矩阵，其中第*i*行和第*j*列的元素设置为`True`，如果(1+*x*)^(*i*)（二项式系数）中*x^j*的系数是奇数（参见第1.4节中的“随机漫步者”创意练习）。您可能会对后者形成的模式感到惊讶。
- en: Compose a `write()` function for [percolationio.py](percolationio.py.html) that
    writes 1 for blocked sites, 0 for open sites, and * for full sites.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为[percolationio.py](percolationio.py.html)编写一个`write()`函数，将阻塞站点写为1，开放站点写为0，满站点写为*。
- en: 'Give the recursive calls for [percolation.py](percolation.py.html) given the
    following input:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 给出以下输入时[percolation.py](percolation.py.html)的递归调用：
- en: '[PRE1]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Compose a client of [percolation.py](percolation.py.html) like [visualize.py](visualize.py.html)
    that does a series of experiments for command-line argument *n* where the site
    vacancy probability *p* increases from 0 to 1 by a given increment (also taken
    from the command line).
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个类似于[visualize.py](visualize.py.html)的[percolation.py](percolation.py.html)的客户端程序，对命令行参数*n*进行一系列实验，其中站点空缺概率*p*从0逐渐增加到1，增量也从命令行中获取。
- en: Compose a program `percolationd.py` that tests for *directed* percolation (by
    leaving off the last recursive call in the recursive `_flow()` function in the
    [percolation.py](percolation.py.html) program. Then use [percplot.py](percplot.py.html)
    (suitably modified) to draw a plot of the directed percolation probability as
    a function of the site vacancy probability.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序`percolationd.py`，测试*有向*渗透（通过在递归的`_flow()`函数中省略最后一个递归调用）。然后使用[percplot.py](percplot.py.html)（适当修改）绘制有向渗透概率作为站点空缺概率的函数的图。
- en: Compose a client of [percolation.py](percolation.py.html) and `percolationd.py`
    that takes a site vacancy probability *p* from the command line and writes an
    estimate of the probability that a system percolates but does not percolate down.
    Use enough experiments to get an estimate that is accurate to three decimal places.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个客户端程序，使用[percolation.py](percolation.py.html)和`percolationd.py`，从命令行获取站点空缺概率*p*，并写入一个系统渗透但不向下渗透的概率估计。进行足够的实验以获得精确到三位小数的估计。
- en: Describe the order in which the sites are marked when [percolation.py](percolation.py.html)
    is used on a system with no blocked sites. Which is the last site marked? What
    is the depth of the recursion?
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 描述在没有阻塞站点的系统上使用[percolation.py](percolation.py.html)时标记站点的顺序。最后一个标记的站点是哪个？递归的深度是多少？
- en: Modify [percolation.py](percolation.py.html) to animate the flow computation,
    showing the sites filling one by one. Check your answer to the previous exercise.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改[percolation.py](percolation.py.html)以动画显示流计算，逐个显示填充站点。检查您对上一个练习的答案。
- en: Experiment with using [percplot.py](percplot.py.html) to plot various mathematical
    functions (just by replacing the call of `estimate.evaluate()` with an expression
    that evaluates the function). Try the function `sin(x) + cos(10*x)` to see how
    the plot adapts to an oscillating curve, and come up with interesting plots for
    three or four functions of your own choosing.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试使用[percplot.py](percplot.py.html)绘制各种数学函数的图形（只需将`estimate.evaluate()`的调用替换为评估函数的表达式）。尝试函数`sin(x)
    + cos(10*x)`，看看图形如何适应振荡曲线，并为您自己选择的三四个函数想出有趣的图形。
- en: Modify [percolation.py](percolation.py.html) to animate the flow computation,
    showing the sites filling one by one. Check your answer to the previous exercise.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改[percolation.py](percolation.py.html)以动画显示��计算，逐个显示填充站点。检查您对上一个练习的答案。
- en: Modify [percolation.py](percolation.py.html) to compute that maximum depth of
    the recursion used in the flow calculation. Plot the expected value of that quantity
    as a function of the site vacancy probability *p*. How does your answer change
    if the order of the recursive calls is reversed?
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改[percolation.py](percolation.py.html)以计算流计算中使用的递归的最大深度。绘制该数量的期望值作为站点空缺概率*p*的函数。如果递归调用的顺序被颠倒，您的答案会如何改变？
- en: 'Modify [estimate.py](estimate.py.html) to produce output like that produced
    by [bernoulli.py](../22module/bernoulli.py.html) (from Section 2.2). *Extra credit*:
    Use your program to validate the hypothesis that the data obeys the Gaussian (normal)
    distribution.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改[estimate.py](estimate.py.html)以产生类似于[bernoulli.py](../22module/bernoulli.py.html)（来自第2.2节）产生的输出。*额外加分*：使用您的程序验证数据是否符合高斯（正态）分布的假设。
- en: Modify percolationio.py, estimate.py, percolation.py, and visualize.py to handle
    *m*-by-*n* grids and *m*-by-*n* boolean matrices. Use an optional argument so
    that *m* defaults to *n* if only one of the two dimensions is specified.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改percolationio.py、estimate.py、percolation.py和visualize.py以处理*m*乘以*n*的网格和*m*乘以*n*的布尔矩阵。使用可选参数，如果只指定两个维度中的一个，则*m*默认为*n*。
- en: '* * *'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '* * *'
- en: Creative Exercises
  id: totrans-86
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
- en: '**Vertical percolation.** Show that an *n*-by-*n* percolation system with site
    vacancy probability *p* vertically percolates with probability 1 - (1 - *p*^(*n*))^(*n*),
    and use [estimate.py](estimate.py.html) to validate your analysis for various
    values of *n*.'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**垂直渗透。**证明具有站点空缺概率*p*的*n*乘以*n*渗透系统在垂直方向上渗透的概率为1 - (1 - *p*^(*n*))^(*n*)，并使用[estimate.py](estimate.py.html)验证您对各种*n*值的分析。'
- en: '**Rectangular percolation systems.** Modify the code in this section to allow
    you to study percolation in rectangular systems. Compare the percolation probability
    plots of systems whose ratio of width to height is 2:1 with those whose ratio
    is 1:2.'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**矩形渗透系统。** 修改本节中的代码，以便你可以研究矩形系统中的渗透。比较宽高比为2:1和1:2的系统的渗透概率图。'
- en: '**Adaptive plotting.** Modify [percplot.py](percplot.py.html) to take its control
    parameters (gap tolerance, error tolerance, and number of trials) from the command
    line. Experiment with various values of the parameters to learn their effect on
    the quality of the curve and the cost of computing it. Briefly describe your findings.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**自适应绘图。** 修改[percplot.py](percplot.py.html)，从命令行获取其控制参数（间隙容差、误差容差和试验次数）。尝试不同参数值，了解它们对曲线质量和计算成本的影响。简要描述你的发现。'
- en: '**Percolation threshold.** Compose a [percolation.py](percolation.py.html)
    client that uses binary search to estimate the threshold value (see the "Binary
    search" creative exercise in Section 2.1).'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**渗透阈值。** 编写一个[percolation.py](percolation.py.html)客户端，使用二分查找来估计阈值（参见第2.1节中的“二分查找”创意练习）。'
- en: '![directed percolation](../Images/468a8969d83db3966cd9541e3a27278a.png)'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_IMG
  zh: '![定向渗透](../Images/468a8969d83db3966cd9541e3a27278a.png)'
- en: '**Nonrecursive directed percolation.** Compose a nonrecursive program that
    tests for directed percolation by moving from top to bottom as in our vertical
    percolation code. Base your solution on the following computation: if any site
    in a contiguous subrow of open sites in the current row is connected to some full
    site on the previous row, then all of the sites in the subrow become full.'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**非递归定向渗透。** 编写一个非递归程序，通过从顶部到底部移动来测试定向渗透，就像我们的垂直渗透代码一样。基于以下计算来构建你的解决方案：如果当前行中一组连续的开放站点中的任何站点与前一行中的某个满站点相连，则该子行中的所有站点都变为满的。'
- en: '**Fast percolation test.** Modify the recursive `_flow()` function in [percolation.py](percolation.py.html)
    so that it returns as soon as it finds a site on the bottom row (and fills no
    more sites). *Hint*: Use an argument `done` that is `True` if the bottom has been
    hit, `False` otherwise. Give a rough estimate of the performance improvement factor
    for this change when running [percplot.py](percplot.py.html) Use values of *n*
    for which the programs run at least a few seconds but not more than a few minutes.
    Note that the improvement is ineffective unless the first recursive call in `_flow()`
    is for the site below the current site.'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**快速渗透测试。** 修改[percolation.py](percolation.py.html)中递归的`_flow()`函数，使其在找到底部一行的站点后立即返回（不再填充更多站点）。*提示*：使用一个参数`done`，如果到达底部则为`True`，否则为`False`。当运行[percplot.py](percplot.py.html)时，给出这种改变的性能改进因子的粗略估计。使用*n*的值，使得程序运行至少几秒钟但不超过几分钟。请注意，除非`_flow()`中的第一个递归调用是当前站点下方的站点，否则改进是无效的。'
- en: '![Bond percolation](../Images/7daee93362def010bfc4fd5b7e49be7e.png)'
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_IMG
  zh: '![键合渗透](../Images/7daee93362def010bfc4fd5b7e49be7e.png)'
- en: '**Bond percolation.** Compose a modular program for studying percolation under
    the assumption that the edges of the grid provide connectivity. That is, an edge
    can be either empty or full, and a system percolates if there is a path consisting
    of full edges that goes from top to bottom. *Note*: This problem has been solved
    analytically, so your simulations should validate the hypothesis that the percolation
    threshold approaches 1/2 as *n* gets large.'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**键合渗透。** 编写一个用于研究在网格的边提供连接性的情况下的渗透的模块化程序。也就是说，一条边可以是空的或者是满的，如果存在一条由满边组成的路径从顶部到底部，则系统渗透。*注意*：这个问题已经被解析，因此你的模拟应该验证这样一个假设，即随着*n*的增大，渗透阈值趋近于1/2。'
- en: '![Bond percolation on a triangular grid](../Images/c14bf6f1192d58a5f287e273d6d8701f.png)'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_IMG
  zh: '![三角形格点上的键合渗透](../Images/c14bf6f1192d58a5f287e273d6d8701f.png)'
- en: '**Bond percolation on a triangular grid.** Compose a modular program for studying
    bond percolation on a triangular grid, where the system is composed of 2*n*² equilateral
    triangles packed together in an *n*-by-*n* grid of rhombus shapes and, as in the
    previous exercise, the edges of the grid provide the connectivity. Each interior
    point has six bonds; each point on the edge has four; and each corner point has
    two.'
  id: totrans-97
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '**三角形格点上的键合渗透。** 编写一个用于研究三角形格点上键合渗透的模块化程序，其中系统由2*n*²个等边三角形组成，这些三角形在一个*n*×*n*的菱形网格中紧密排列，如前一个练习中所述，网格的边提供了连接性。每个内部点有六个键合；每个边上的点有四个；每个角点有两个。'
- en: '**Percolation in three dimensions.** Implement modules `percolation3d.py` and
    percolation3dio.py (for I/O and random generation) to study percolation in three-dimensional
    cubes, generalizing the two-dimensional case studied in this chapter. A percolation
    system is an *n*-by-*n*-by-*n* cube of sites that are unit cubes, each open with
    probability *p* and blocked with probability 1-*p*. Paths can connect an open
    cube with any open cube that shares a common face (one of six neighbors, except
    on the boundary). The system percolates if there exists a path connecting any
    open site on the bottom plane to any open site on the top plane. Use a recursive
    version of `_flow()` like the one in [percolation.py](percolation.py.html), but
    with six recursive calls instead of four. Plot percolation probability versus
    site vacancy probability for as large a value of *n* as you can. Be sure to develop
    your solution incrementally, as emphasized throughout this section.'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**三维渗透。** 实现模块`percolation3d.py`和`percolation3dio.py`（用于I/O和随机生成），以研究三维立方体中的渗透，将本章中研究的二维情况进行泛化。一个渗透系统是一个*n*×*n*×*n*的立方体，其中每个单元立方体以概率*p*开放，以概率1-*p*阻塞。路径可以连接一个开放的立方体与任何共享公共面的开放立方体（六个邻居之一，除了边界）。如果存在一条路径连接底部平面上的任何开放站点和顶部平面上的任何开放站点，则系统渗透。使用类似于[percolation.py](percolation.py.html)中的递归版本的`_flow()`，但是有六个递归调用而不是四个。绘制渗透概率与站点空缺概率的图，尽可能使用大的*n*值。确保逐步开发你的解决方案，正如本节中所强调的那样。'
- en: '**Game of life.** Implement a module `life.py` that simulates *Conway''s game
    of life*. Consider a boolean matrix corresponding to a system of cells that we
    refer to as being either live or dead. The game consists of checking and perhaps
    updating the value of each cell, depending on the values of its neighbors (the
    adjacent cells in every direction, including diagonals). Live cells remain live
    and dead cells remain dead, with the following exceptions:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**生命游戏。** 实现一个模块 `life.py` 来模拟*康威的生命游戏*。考虑一个对应于细胞系统的布尔矩阵，我们称之为活着或死亡。游戏包括检查并可能更新每个细胞的值，取决于其邻居的值（每个方向的相邻细胞，包括对角线）。活细胞保持活着，死细胞保持死亡，但有以下例外：'
- en: A dead cell with exactly three live neighbors becomes live.
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有三个活着的邻居的死细胞会变成活细胞。
- en: A live cell with exactly one live neighbor becomes dead.
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有一个活着的邻居的活细胞会变成死细胞。
- en: A live cell with more than three live neighbors becomes dead.
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个有超过三个活着的邻居的活细胞会变成死细胞。
- en: Test your program with a *glider*, a famous pattern that moves down and to the
    right every four generations, as shown in the diagram below. Then try two gliders
    that collide. Then try a random boolean matrix. This game has been heavily studied,
    and relates to foundations of computer science.
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 用一个*滑翔机*测试你的程序，这是一个著名的图案，每四代向下和向右移动一次，如下图所示。然后尝试两个相撞的滑翔机。然后尝试一个随机的布尔矩阵。这个游戏已经被广泛研究，与计算机科学的基础有关。
- en: '![Glider](../Images/3cb5164ba368921d8daf06fd49335e70.png)'
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![滑翔机](../Images/3cb5164ba368921d8daf06fd49335e70.png)'
