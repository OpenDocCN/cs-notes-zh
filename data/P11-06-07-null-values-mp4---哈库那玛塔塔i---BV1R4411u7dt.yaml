- en: P11：06-07-null-values.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P11：06-07-null-values.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
- en: In this video， we'll be learning about null values in SQL。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段视频中，我们将学习 SQL 中的空值。
- en: '![](img/5e50f96d0199e8a9a2d0dbbbc2ad71bf_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e50f96d0199e8a9a2d0dbbbc2ad71bf_1.png)'
- en: As usual， we'll be considering a simple college admissions database。 and we'll
    be exploring the select from where query expressions。 Now。 instead of extending
    what we can write in queries， in this video。 we'll be looking at extending what's
    in the data。 Specifically， in relational databases。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，我们将考虑一个简单的大学招生数据库，并探索 select from where 查询表达式。现在，在这个视频中，我们将不再扩展查询中的书写内容，而是扩展数据中的内容。特别是在关系数据库中，
- en: unless specified otherwise， any value in an attribute can take on the special
    value null。 Null is usually used to mean that the value is undefined or unknown。
    For example。 we might have a student whose GPA is unknown or who doesn't have
    a GPA。 and we would represent that in our data with null。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 除非另有说明，属性中的任何值都可以取特殊值 null。Null 通常表示该值未定义或未知。例如，我们可能有一个 GPA 未知或没有 GPA 的学生，我们会用
    null 来表示这一点。
- en: Or we might create our apply relation with the decisions not yet decided。 and
    those decision values would also be null。 So what we're going to look at in our
    demo queries is what happens when we have no values。 and we run queries over the
    database。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 或者我们可能会创建一个应用关系，其中的决策尚未确定，而这些决策值也会是 null。所以在我们的演示查询中，我们将查看当我们有空值时发生了什么，并在数据库上运行查询。
- en: '![](img/5e50f96d0199e8a9a2d0dbbbc2ad71bf_3.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e50f96d0199e8a9a2d0dbbbc2ad71bf_3.png)'
- en: Here is the set of students in our database。 In order to explore what happens。
    when we have null values， let's insert two new students， Kevin and Lori。 each
    of which have a null GPA。 We go back and we look at our student table。 and now
    we see Kevin and Lori。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们数据库中的学生集合。为了探索当我们有空值时会发生什么，让我们插入两个新学生，Kevin 和 Lori，他们的 GPA 都是空值。我们返回并查看我们的学生表，现在我们看到了
    Kevin 和 Lori。
- en: '![](img/5e50f96d0199e8a9a2d0dbbbc2ad71bf_5.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e50f96d0199e8a9a2d0dbbbc2ad71bf_5.png)'
- en: as part of that table， and in this particular interface， null values are depicted
    as blanks。 Now let's run some queries。 Our first query finds students whose GPA
    is greater than 3。5。 It's a simple query to write。 We run the query and we find
    a number of students， in our result。 We don't have Kevin and Lori because their
    GPA is our null。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 作为该表的一部分，在这个特定的界面中，空值被表示为空白。现在让我们运行一些查询。我们的第一个查询是查找 GPA 大于 3.5 的学生。这个查询很简单。我们运行查询并发现了一些学生，在结果中我们没有找到
    Kevin 和 Lori，因为他们的 GPA 是 null。
- en: so we can't determine that they're greater than 3。5。 Let's run another query
    that says GPA less than or equal to 3。5。 We'll get a different set of students
    as we see， but we still don't get Kevin and Lori。 Now let's run a query where
    we ask for the GPA to be greater than 3。5， or less than or equal to 3。5。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们不能确定他们的 GPA 大于 3.5。我们再运行一个查询，要求 GPA 小于或等于 3.5。我们会得到一组不同的学生，正如我们所看到的，但我们仍然得不到
    Kevin 和 Lori。现在让我们运行一个查询，要求 GPA 大于 3.5 或小于或等于 3.5。
- en: This is the one that's a little bit funny。 Actually we talked about this very
    same query back when we were talking about。 the relational model。 When you look
    at the query， you would think that you would。 get every student in the database
    because everybody's GPA， obviously， is either， greater than 3。5 or less than or
    equal to 3。5 or from a more logical point of view。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这个有点好笑。实际上，我们在讲解关系模型时就讨论过这个查询。当你看这个查询时，你会认为你会得到数据库中所有的学生，因为每个学生的 GPA 显然要么大于
    3.5，要么小于或等于 3.5，或者从更逻辑的角度来看，
- en: This is an expression that's always true。 But you might not be surprised when
    we run the query。 we still don't get Kevin or Lori， because we can't determine
    that their GPA satisfies either of these conditions。 So even when we have a query
    that looks like the where clause is a tautology。 meaning a logical expression
    that's always true， we still don't get all the data in the result。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个始终为真的表达式。但你可能不会感到惊讶，当我们运行查询时，我们仍然得不到 Kevin 或 Lori，因为我们无法确定他们的 GPA 是否满足这两个条件中的任何一个。所以即使我们有一个看起来像是“where”子句的永真式（逻辑表达式总是为真），我们仍然得不到所有数据。
- en: If we want this query to return all students in the database， we can do that。
    by adding one more clause to the where， which is or GPA is null。 Now this is truly
    a condition that will be matched by every tuple because either the。 GPA is greater
    than 3。5， less than or equal to 3。5， or it's a null value。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们希望这个查询返回数据库中的所有学生，我们可以通过在`where`语句中添加一个额外的条件来实现，那就是`or GPA is null`。现在，这的确是一个会被每个元组匹配的条件，因为无论是GPA大于3.5，小于或等于3.5，还是GPA为null，它都会匹配。
- en: Is null is a keyword phrase and sequel that matches values that are null。 Now
    when we run the query。 we finally get all of the students in the database， including
    Kevin and Lori。 Just to drive the point home a bit further， let's continue looking
    at queries where we have null values involved in where clauses。 In this query，
    we're looking for students where their GPA is greater than 3。5 or their。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '`is null`是SQL中的一个关键字短语，用于匹配null值。当我们运行查询时，最终我们得到了数据库中的所有学生，包括Kevin和Lori。为了进一步阐明这个问题，让我们继续查看涉及null值的`where`子句的查询。在这个查询中，我们正在查找GPA大于3.5或某些其他条件的学生。'
- en: size high school is less than 1600。 So let's run the query and see who we get。
    We get all of these students， including Kevin。 So although his GPA is null and
    therefore we can't。 determine that it satisfies this part of the condition， because
    his high school size is 1500。 he does satisfy the second part of the condition
    and he does come out in our result。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 高中规模小于1600。因此，让我们运行查询，看看结果如何。我们得到了所有这些学生，包括Kevin。所以，尽管他的GPA为null，因此我们无法确定它是否满足条件的这一部分，但由于他的高中规模是1500，他确实满足条件的第二部分，并且出现在我们的结果中。
- en: Now let's add one more condition， which is or size high school is greater than
    or equal to 1600。 So now we have again something in the condition that looks like
    a topology。 It looks like it should always be true。 Everyone's high school is
    either smaller or larger than 1600。 Furthermore， in this case we have no null
    values for the high school size。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们添加一个条件，那就是`or size high school is greater than or equal to 1600`。所以现在，我们又有了一个看起来像拓扑的条件。它看起来应该总是为真。每个人的高中规模要么小于1600，要么大于或等于1600。而且在这种情况下，我们没有高中规模为null的值。
- en: So when we run this query， we should get back everybody。 And indeed when we
    run the query。 we do get back all of the students。 Now I'm not going to go into
    details here。 but you can certainly read about it。 The way the where clause is
    evaluated when null values are involved is using a 3-valued logic。 where every
    expression is either true or false or unknown。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当我们运行这个查询时，我们应该得到所有的学生。确实，当我们运行查询时，我们得到了所有学生。现在我不会详细讲解，但你当然可以阅读相关内容。涉及null值时，`where`子句的评估方式使用的是三值逻辑，其中每个表达式要么为真，要么为假，要么为未知。
- en: These logical values are combined to finally yield a value for the where expression
    that determines whether a tuple is in the result。 Our last series of queries explores
    the interaction between null values and aggregate functions。 specifically in this
    case the count function。 There are actually quite a few subtleties about null
    values and aggregation。 and also null values and subqueries。 We're not going to
    do an exhaustive exploration of these subtleties here。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这些逻辑值被组合在一起，最终生成一个`where`表达式的值，用于确定一个元组是否在结果中。我们的最后一组查询探讨了null值与聚合函数之间的相互作用，具体来说是在这种情况下的`count`函数。实际上，null值与聚合以及null值与子查询之间有许多细微的差别。我们这里不会对这些细微差别进行详尽的探讨。
- en: but just give one example。 And we encourage you if you are using a database
    with null values to be very careful when you write your queries。 to make sure
    you understand how the null values are going to influence the result。 Okay。 so
    our query here is counting the number of students whose GPA is not null for starters。
    So we run the query and we see that there are 12 students who have a non-null
    GPA。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们会给出一个示例。如果你正在使用带有null值的数据库，我们鼓励你在编写查询时非常小心，确保你理解null值如何影响结果。好吧，我们这里的查询是先统计那些GPA非null的学生人数。所以我们运行查询，发现有12个学生的GPA是非null的。
- en: Those are the 12 students we had originally in the database before we added
    Kevin and Lori with their null GPA。 Now instead of just counting the students，
    let's count the distinct GPAs。 So among these 12 students， how many different
    GPAs are represented？
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是我们最初在数据库中的12个学生，之后我们添加了GPA为null的Kevin和Lori。现在，我们不只是在计数学生，而是要统计不同的GPA数目。那么，在这12个学生中，有多少种不同的GPA呢？
- en: It turns out there are seven distinct GPAs among those that are not null。 Let's
    further drop the not null condition and just count the distinct GPAs among the
    students。 That will tell us whether count distinct includes nulls or not in its
    count。 We'll run the query and we get the same answer。 So we still have seven
    distinct GPAs and we are not counting the null values。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，在那些非空的记录中，有七个不同的 GPA。现在我们进一步去掉非空条件，只计算所有学生的不同 GPA。这将告诉我们 `count distinct`
    是否包括空值。我们执行查询后，得到相同的答案。所以我们仍然有七个不同的 GPA，且没有计算空值。
- en: Now let's do one last query which is to take away the count and just look at
    the distinct GPAs themselves。 So we had seven when we did the count。 We run the
    query now and we get eight。 What happened？
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们做最后一个查询，去掉计数，仅查看不同的 GPA。我们在做计数时得到的是七个。现在我们运行查询，结果是八个。发生了什么？
- en: Well this first couple， it's a little hard here with the visualization。 This
    first answer is empty and that's actually the null value。 So when we right select
    distinct GPA。 we do include the null value in our result if there is a null GPA。
    However。 when we count the distinct values， we don't include the null。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，前面这几个例子，使用可视化时有些难度。第一个答案是空的，这实际上是空值（null）。所以，当我们使用 `select distinct GPA`
    时，如果存在空的 GPA，我们会将空值包含在结果中。然而，当我们计算不同的值时，我们不会将空值包括在内。
- en: And that's really just one example of the type of subtleties and possibly unexpected
    behavior we might get when we have null values。 So again， I encourage you to be
    very careful when writing queries over databases that include nulls that you know
    exactly what you're going to get in your result。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上只是当我们处理空值时可能遇到的微妙差异和意外行为的一个例子。因此，再次提醒你，在写涉及空值的数据库查询时，务必小心，确保清楚你将得到什么样的结果。
- en: '![](img/5e50f96d0199e8a9a2d0dbbbc2ad71bf_7.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/5e50f96d0199e8a9a2d0dbbbc2ad71bf_7.png)'
