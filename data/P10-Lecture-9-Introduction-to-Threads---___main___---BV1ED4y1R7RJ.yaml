- en: P10：Lecture 9 Introduction to Threads - ___main___ - BV1ED4y1R7RJ
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P10：讲座9 线程简介 - ___main___ - BV1ED4y1R7RJ
- en: Well， it must be sunny in 92 degrees outside because it looks like half of the
    people are here。 Welcome。 Thank you for coming on this nice beautiful sunny day。
    You get air conditioning if you're in this building， so that's good。 So。 a couple
    of quick announcements。 Hopefully， hopefully assignment three is going well。 I
    will stay。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，外面肯定是阳光明媚，气温92度，因为看起来一半的人都来了。欢迎大家，谢谢你们在这个美丽的阳光明媚的日子里前来。只要你在这个建筑里，就有空调，所以很舒服。好了，几个简短的通知。希望第三次作业进展顺利。我会留下来。
- en: I will kind of have many officers right after lecture today in 219 in gates
    for about an hour。 hour and 15 minutes or so。 So， if you want to come by and ask
    some questions about the assignment。 feel free。 Remember， the assignments do on
    Sunday。 There won't be any office hours Friday， Saturday。 So， you'll be a Catholic
    Lion， Piazza， or Sunday office hours。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 今天讲座结束后，我会在219号教室待大约一个小时，最多一个小时15分钟。所以，如果你有任何关于作业的问题，随时可以来找我。记住，作业的截止时间是周日。周五和周六没有办公时间。所以你可以在Catholic
    Lion，Piazza，或者周日的办公时间找我。
- en: which may be jammed because lots of you will go。 So。 just keep plugging away
    before the weekend if you can on the assignment。 Second quick announcement is
    that the midterm is next Thursday。 Yeah， next or week from Thursday。 and it's
    going to be in the evening。 If you do have an OAE accommodation。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有很多人排队，所以这可能会很拥挤。如果可以的话，请在周末之前继续努力做作业。第二个简短的通知是期中考试将安排在下周四。是的，就是下个星期四，下午的考试。如果你有OAE的住宿安排。
- en: haven't sent me something about that yet， please do。 Otherwise。 or if you have
    to take an exam during a different time because you've got some conflict。 also
    please email me sooner than later。 I will put up some practice exam exam exam
    exam。 I told somebody on Piazza today， I may do it tomorrow， but it will be in
    the next day or two。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有发邮件告诉我这方面的事，请尽快发给我。否则，如果你因为时间冲突需要在其他时间参加考试，也请尽早通过邮件通知我。我会发布一些模拟考试题。我今天在Piazza上告诉某个人，我可能会在明天发布，但应该是在明后天。
- en: some practice exams。 And we're going to go over a couple more practice problems
    today that are from previous exams and the kind of things you might see that it's
    good to get your answers out now。 You have those。 Alright， so let's go back。 Let's
    actually do a quick review on this problem because right after class。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些模拟考试题。今天我们会再讲几个之前考试中的问题，这些问题的类型可能会出现在你的考试中。现在就做出你的答案是很有帮助的。好了，回到正题。我们再快速回顾一下这个问题，因为讲座结束后。
- en: about 20 of you had lots of good questions still about this problem。 So。 let's
    talk about a particular answer， which is this one。 I think this is the answer
    that most people said， "Wait。 I don't understand why this answer couldn't happen。"，
    So。 let's quickly just go back over this program again。 Here's what it is。 We've
    got the main function has a signal handler in it。 And the signal handler is going
    to be for SIG user one。 That is not any particular type of signal。 It's for the
    user or your program to use to send to a different process。 So。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 大约20个同学对这个问题还有很多疑问。所以，让我们来讨论一个特定的答案，就是这个答案。我认为这是大多数同学会说：“等一下，我不明白为什么这个答案不可能出现。”好了，我们快速回顾一下这个程序。它是这样的。我们的`main`函数中有一个信号处理程序。这个信号处理程序是针对SIG
    user one的。这不是某个特定类型的信号。它是供用户或你的程序使用，发送给其他进程的信号。所以。
- en: you don't need to send some specific signal。 That's the signal。 It's kind of
    a generic one to send。 And what this says is set up whenever a SIG user one comes
    in， call the bat function。 which is up here。 The bat function simply prints pirate
    and then does an exit zero。 And exit zero means that it never makes it back to
    the main program。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要发送某个特定的信号。这个信号是一个通用信号，用来发送。这里所说的是，每当收到SIG user one信号时，就会调用bat函数。bat函数就在这里。bat函数简单地打印“pirate”然后退出，返回零。退出零意味着程序永远不会返回到主程序。
- en: which got interrupted when the signal handler comes in。 Okay。 It does， there's
    a fork in here。 And then the fork， if you're the child， you're going to print
    ghost and then return zero。 That doesn't immediately exit the program， but it
    does close the program because you're returning from main。 So that's that's that。
    And then if you are not the child in this case。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 当信号处理程序介入时，程序会被中断。好了，它确实有一个分叉。如果你是子进程，你将打印“ghost”，然后返回零。这并不会立即退出程序，但它会关闭程序，因为你从`main`函数返回。所以就这样。如果你不是子进程的话，情况是这样的。
- en: we are going to send the SIG user one signal to the PID。 which in this case
    is the return value from fork means it's the child that we're actually sending
    this to。 And then after that， it will print ninja。 So that's how it works。 We
    are assuming a couple things about this program that I might not have been quite
    clear about。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将发送 SIG_USER1 信号到 PID，在这种情况下，就是 fork 的返回值，意味着我们实际上是发送给子进程的。然后之后，它会打印 ninja。就是这样运作的。我们假设这个程序有几个可能我没完全说清楚的地方。
- en: Print apps are atomic in this case。 That means that if you are in the middle
    of a print app statement。 you will the print app statement will happen。 Okay。
    And to completion。 So first of all。 you won't get things like G H and then it'll
    go into the signal handler。 You will get the print of the whole print app or not。
    So this is true for all operating systems。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 打印语句在这种情况下是原子的。这意味着，如果你正在执行一个打印语句，打印语句会被完全执行。所以首先，你不会得到类似 G H 然后进入信号处理程序的情况。你会得到完整的打印语句，或者什么都不打印。所以这一点对于所有操作系统都是适用的。
- en: We don't know， but we're assuming that for here。 The second thing we're assuming
    is that if a signal handler comes into the child process。 let's say， it will，
    unless you are like finished with the program， like it's already completed。 then
    it will actually get called。 So even if you print ghost and then the signal handler
    happens in the middle of that。 it will before this return zero go and call this
    function here。 Okay。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不知道，但我们假设这里是这样的。第二件事是我们假设，如果一个信号处理程序进入子进程，假设它会，除非你已经完成了程序，比如程序已经结束，否则它将被调用。所以即使你打印了
    ghost，然后信号处理程序在其中发生，它也会在返回零之前调用这个函数。好的。
- en: So that's the basic ideas here。 Now， the question is。 can you get ninja ghost
    to print out using our assumptions here？ Okay。 And we say that that's no。 And
    you might have some questions about what's what could happen。 Let's just look
    at what that would entail doing printing ninja and then ghost。 Well。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这里的基本思路。那么，问题是，使用我们这里的假设，是否可以让 ninja ghost 打印出来？好的。我们说不行。你可能有一些问题，想知道会发生什么。让我们看看这会涉及到什么。打印
    ninja 然后打印 ghost。那么，嗯。
- en: it would mean in Maine， we would fork。 Okay。 And then before ghost got printed。
    the parent process would call the kill or call a signal， the child， and then print
    ninja。 Okay。 Now。 the parent could signal the child and print ninja before the
    child does anything。 That absolutely could happen。 So you certainly could get
    ninja to print first。 Okay。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着在缅因州，我们会进行分叉。好的。然后，在 ghost 被打印之前，父进程会调用 kill 或发送信号给子进程，然后打印 ninja。好的。现在，父进程可以在子进程做任何事情之前发送信号并打印
    ninja。这绝对是有可能发生的。所以你完全可以先看到 ninja 打印。好的。
- en: That could be a thing。 But let's see if you could get it so that it prints ghost
    after you print ninja。 but before pirate would ever get printed。 And that's actually
    not really possible in this program。 And let's see why。 Let's see what would have
    to happen for that to be the case。 Okay。 So let's say that you fork， we're not
    going to be inside print F yet by the time print F ninja happens。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 那可能是个问题。但让我们看看你是否能够让它在打印 ninja 之后、在 pirate 被打印之前打印 ghost。事实上，在这个程序中，这其实是不可能的。让我们看看为什么。让我们看看为了实现这种情况，必须发生什么。好的。所以假设你进行
    fork，在 print F ninja 发生之前，我们还没有进入 print F。
- en: Okay。 Or even if we were that even if that even if we were， that's okay。 But
    the point is that print F ghost， if it's happening。 then the signal has not reached
    the child yet。 Okay。 So that's the， that's going to happen。 Now。 you'll agree，
    hopefully that if you print print F ghost before you even send this signal。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。或者即使我们是那样，即使我们是那样，那也没关系。但是关键是，如果 ghost 正在打印，那么信号还没有到达子进程。好的。所以这就是会发生的事情。现在，你应该同意，如果你在发送信号之前先打印
    ghost。
- en: obviously ghost is going to get printed before ninja and then you could not
    print ninja first。 So that's the first thing。 Okay。 Let's assume then that maybe
    you're in the mid。 maybe the child is about to print ghost。 And this signal comes
    in。 Well。 if it's about to print ghost， then the signal could happen。 Okay。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，ghost 会在 ninja 之前被打印出来，然后你就不能先打印 ninja。所以这是第一点。好的。那么假设也许你正好处在子进程要打印 ghost
    的时候，这时信号到达了。嗯。如果它正准备打印 ghost，那么信号就会到达。好的。
- en: If the signal happens then pirate would get printed and then the program would
    exit。 So that's not going to happen。 That's not the case here。 Let's say that
    even in the like most generous case。 let's say we were just about to print ghost
    or maybe we were just in the middle of print， just。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果信号发生，那么“pirate”将被打印，程序会退出。所以这种情况不会发生，这里不是这种情况。假设即使是在最宽容的情况下，假设我们正准备打印“ghost”，或者也许我们刚好在打印的过程中，就在打印时。
- en: you know， one line away in the assembly code for printing ghost。 The signal
    happens and then the。 and then it's， it stops right before it prints ghost and
    let's even assume。 we can even assume that the signal handler won't get called。
    Let's just even assume that。 And then ninja gets printed。 So we do get ninja and
    then we get ghost printed， let's say。 Okay。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在打印“ghost”的汇编代码中，信号发生，然后……然后它在打印“ghost”之前停止。我们甚至可以假设，假设信号处理器不会被调用，就假设它不会被调用。然后“ninja”被打印出来。假设我们确实得到了“ninja”，然后再打印“ghost”。好的。
- en: If we get ghost printed， the signal has already been sent to the child。 It will
    because there's still the return here before that the signal handler will happen。
    And therefore you would end up going into the signal handler and printing pirate。
    So there's really no way to have print ups be atomic print ninja first somehow
    call the signal handler or have the signal handler not actually trigger the signal
    in the child。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们打印了“ghost”，信号已经发送给子进程了。因为在这之前仍然有返回值，所以信号处理器会发生。所以你最终会进入信号处理器并打印“pirate”。因此，实际上不可能让`print
    ups`是原子操作，`print ninja`先执行，再调用信号处理器，或者让信号处理器不在子进程中触发信号。
- en: Print ghost and then have this program or the child go to completion， not really
    possible。 Okay。 Question。 You could。 I mean， if you， so I guess your question
    is why， why right before print F。 Let's say that the signal came in before print
    F。 Well。 we would assume that it would get it would get signal。 Here's what happens
    in a program。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 打印“ghost”，然后让这个程序或子进程完成，实际上是不可行的。好的，问题来了。你可以。我的意思是，如果你……所以我猜你问的是为什么，为什么在`print
    F`之前呢？假设信号在`print F`之前到达。那么，我们假设它会接收到信号。这是程序中发生的事情。
- en: The when you when it's program gets a signal， it immediately happens for that
    process。 When a process gets a signal。 So it will happen if it's have， if it comes
    in before the print F。 then the signal will happen before the print F comes in
    during the print F。 It'll happen right after the print F。 Okay。 And then that's。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序接收到信号时，它会立即对该进程进行处理。每当进程收到信号时，它就会发生。如果信号在`print F`之前到达，那么信号会在`print F`之前发生，甚至在`print
    F`执行期间也会发生。它会在`print F`之后发生。好的，然后就是这样。
- en: and then it would still happen in that case。 It wouldn't be the case that you
    get two statements happening before the signal handler if the signal has already
    been come into the program。 but it wouldn't happen necessarily in the middle of
    the print F。 Yeah。 Awesome。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在这种情况下，信号仍然会发生。如果信号已经进入程序，那么不会出现信号处理器之前发生两个语句的情况，但它不一定会发生在`print F`的中间。是的，太棒了。
- en: Is it safe here in the child when you return zero or you can then turn the signal
    with a parent？
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在子进程中返回零时，或者你可以将信号传递给父进程，这样安全么？
- en: Yeah。 Good question。 You return zero before you send the signal to parent。 Yeah。
    Is there the only way in which pirate would get printed out？ Now， there's。 I was
    talking to somebody after class， but this is definitely a little nuanced。 When
    you do return zero， well， there's， there's still another function which called
    main。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，好的问题。在你将零返回给父进程之前发送信号，是否只有这种方式“pirate”才会被打印出来？不，实际上不是。我在课后和某人聊过这个问题，这个确实有点微妙。当你返回零时，实际上还有另一个叫做`main`的函数。
- en: It's begin with in not in your program， but it still might be the case that
    your signal handler is still set up。 So it still might get called even right after
    the return zero。 But at some point later。 the signal handler will be destroyed
    while the program is being destroyed。 Okay。 Any other questions on that one？ I
    think that was a tricky one because you have to kind of be really nuanced about
    when the signal is happening in relation to all the print F's and so forth。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 它是在你的程序之外的，但仍然可能是这种情况：你的信号处理器仍然设置好，所以即使在返回零后，它仍然可能会被调用。但在程序销毁时，信号处理器会在之后某个时间被销毁。好的，还有其他问题吗？我觉得这是个难题，因为你必须非常精细地考虑信号发生的时机，尤其是与所有`print
    F`的执行关系。
- en: Pretty good on that one。 Okay。 Let's look at another one here。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 对那个问题挺好的。好的，让我们看看另一个问题。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_1.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_1.png)'
- en: I will zoom in a little for this one。 So this is another program。 Same sort
    of thing。 This was a problem on a midterm exam in the past。 You should assume
    that print F's are atomic processes run to completion。 et cetera。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我会稍微放大一点。所以这是另一个程序。跟之前差不多。这是过去期中考试中的一道题。你应该假设 printf 是原子操作，执行完才会结束，等等。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_3.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_3.png)'
- en: And then everything succeeds。 And I want you to list all the possible outputs
    for this program。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 然后所有的操作都成功了。我希望你列出这个程序所有可能的输出。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_5.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_5.png)'
- en: Okay。 Why don't you do this？ Take about a minute， two minutes or so。 look through
    the program and just start thinking about it。 Talk to your neighbor about that。
    I'll walk around and you can do that。 Start thinking about it。 Then we'll go through
    how I would think about it。 Okay。 Don't be too scared of like， "Oh。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，为什么不这样做呢？花大约一分钟，或者两分钟左右，看看这个程序，开始思考它。和你旁边的同学讨论一下。我会在旁边走来走去，你们可以这样做。开始思考一下。然后我们会讨论我怎么思考的。好吧，别害怕，“哦。”
- en: how am I going to analyze this whole thing？" But you do need to kind of dig
    in and go， "Okay。 I've got to think about all the different parts here。"。 So go
    ahead and do that for a couple minutes， two or three minutes， let's say。 And we'll
    talk about it。 I'll feed that。 [silence]， [silence]， [silence]， [silence]， [silence]。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我要怎么分析这一切呢？”但你确实需要深入思考，“好吧，我得考虑所有不同的部分。”所以去做一会儿，假设两三分钟，我们再讨论。我会提供帮助。[沉默]，[沉默]，[沉默]，[沉默]，[沉默]。
- en: '[silence]， [silence]， [silence]， [silence]， [silence]， [silence]， [silence]，
    [silence]， [silence]。 [silence]， Let''s take one more minute。 One more minute。
    [silence]， [silence]， All right。 First of all， you probably should not be able
    to do this problem in the five minutes that I gave you。 So don''t think， "Oh，
    no， he''s assuming we can do this so quickly。"。'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '[沉默]，[沉默]，[沉默]，[沉默]，[沉默]，[沉默]，[沉默]，[沉默]，[沉默]。[沉默]，再给我们一分钟。再给一分钟。[沉默]，[沉默]，好了，首先，你可能不应该在我给你的五分钟内做完这个问题。所以别想，“哦，不，他以为我们能这么快做完。”'
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_7.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_7.png)'
- en: That's okay。 At least， hopefully you thought about it for a second。 I guess
    my first question about this， what's going to absolutely get printed out first？
    One。 What's absolutely going to get printed out last？ Five。 Yeah。 it's the middle
    stuff that we have to actually think about a little bit almost。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 没关系。至少，希望你思考了一下。关于这个问题，我的第一个问题是，什么内容一定会最先打印出来？是 1。什么内容一定会最后打印出来？是 5。是的，真正需要我们思考的是那部分中间的内容。
- en: What's going to get printed second to last always？ Six， actually。 It's that
    middle stuff that we have to think about。 Here's how I would do that。 Now， if
    that。 if you're like， "I know that，" let's go through how I would have figured
    that out。 Okay？
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，倒数第二个总是打印什么？实际上是 6。是那部分中间的内容需要我们仔细思考。这样做我会怎么做呢？如果你觉得，“我知道这个，”那我们就通过我如何理解它来看看。好吧？
- en: So the program's going along。 Okay， there's a counter。 Here's what I would generally
    do。 If I was looking at this program， I would say， "Fine。 I have a parent here。"
    Okay？
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 所以程序在执行。好吧，那里有一个计数器。一般来说，我会怎么做呢？如果我在看这个程序，我会说，“好吧，我这里有一个父进程。”明白了吗？
- en: And the parent has a counter that starts out at zero。 Okay？ And I would go down
    and say， "Okay。 fine。 This while loop， the counter is definitely less than two，
    and then we immediately fork。" Well。 when we fork， I'm going to say， "Okay， fine。
    Now there's a child，" child。 There we go。 with a counter that's also zero。 You
    get why that's the case， it gets copied。 Okay？
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 父进程有一个计数器，初始值为零。明白了吗？然后我会下去说，“好吧，没问题。这个 while 循环中，计数器的值肯定小于 2，然后我们立刻分叉。”好吧。当我们分叉时，我会说，“好吧，现在有一个子进程，”子进程。就是这样，计数器也是零。你明白为什么会这样吗？它被复制了。明白了吗？
- en: The counter gets copied。 Then I would just keep going here and I'd go， "Alright，
    well。 let's look at the next line。"， And remember， there's two processes doing
    this now。 If the PID return value for fork is greater than zero， well， it means
    we're the parent。 We immediately break out of this while loop， and we never go
    back to the while loop。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 计数器被复制。然后我就继续往下看，“好了，我们来看下一行。”记住，现在有两个进程在执行这个操作。如果 fork 的 PID 返回值大于零，那么就意味着我们是父进程。我们会立刻跳出这个
    while 循环，并且不会再回到 while 循环中。
- en: So the parent comes down， and well， the parent is down now down here。 If the
    counter is greater than zero， well， the parent's counter is not greater than zero。
    It doesn't do that。 If the PID is greater than zero， sure。 the parent's return
    value for PID is greater than zero because it's the child's PID。 Therefore。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以父进程下来了，现在父进程就在这里。如果计数器大于零，那么父进程的计数器就不大于零。它不会那样做。如果PID大于零，当然。父进程的PID返回值大于零，因为它是子进程的PID。因此。
- en: we have to wait for the child。 Wait for child。 And in fact。 I'll put child one
    because there's going to be another child in here in a minute。 Okay？
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须等待子进程。等待子进程。实际上，我会写子进程一，因为一会儿这里会有另一个子进程。好吧？
- en: Wait for child one， and then after that happens， well， then we add five to the
    counter。 Meaning the counter is not going to be five。 Counter equals five for
    the parent。 and then we print five。 But that has to happen after the child won't
    end。 So it's certainly not going to happen first if anything else happens in the
    middle。 So far so good。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 等待子进程一，然后当这个事件发生后，我们将计数器加五。也就是说，计数器的值不会是五。对于父进程，计数器等于五。然后我们打印五。但这必须发生在子进程结束之后。所以如果中间发生了任何其他事情，显然不会首先发生这件事。到目前为止，一切顺利。
- en: Okay。 Then let's start looking at what the child's doing。 We're done with the
    parent for now。 We'll get back to when that happens in a minute。 The child won。
    Well， all right。 So we say if PID is greater than zero， break， we don't break。
    So child won。 Well。 its counter becomes one， and then it immediately prints one。
    Print one。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。那么我们开始看看子进程做什么。现在先放下父进程。稍后会回到父进程的部分。子进程一。那么，好的。我们说如果PID大于零，跳出，我们不跳出。所以子进程一。嗯，它的计数器变成了一，接着立即打印一。打印一。
- en: So we're definitely going to get one printed。 Before anything else happens。
    there's no other way that could logically， anything else could logically happen。
    Okay。 All right。 And we've updated counter。 Now we go back in the while loop。
    This is the child now。 Goes back into the while loop。 Counter is still less than
    two。 Looks like it there。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们肯定会先打印一。没有其他逻辑上可能发生的情况。好的。然后，我们更新了计数器。现在我们回到`while`循环。这是子进程。它回到`while`循环中。计数器仍然小于二。看起来就是这样。
- en: And we fork again。 So you go， oh boy。 Okay。 Well， now we've got child two。 And
    child two has a counter that starts out with what's value。 One because it's being
    produced from the child。 Okay。 And then you kind of consider this now the new，
    like， parents。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们再次`fork`。哦天啊。好的。那么现在我们有了子进程二。子进程二的计数器初始值是多少？一，因为它是从子进程中产生的。好的。然后你可以认为它现在是新的父进程。
- en: It gets a new value of PID because it's changed it。 It actually reset its value
    of PID to the turn value of fork。 It's no longer zero。 So PID is greater than
    zero for this child。 What does this child do？ Well， it breaks。 And so then it
    goes down here and counter is greater than zero。 Okay。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 它获取了一个新的PID值，因为它已经改变了PID的值。它实际上将PID重置为`fork`调用的返回值。它不再是零。所以对于这个子进程来说，PID大于零。这个子进程做什么呢？嗯，它跳出。然后它下来了，计数器大于零。好的。
- en: So then we definitely print one。 Now， we don't necessarily do this immediately。
    We've got some other things that are happening here。 We didn't do any waiting
    in here。 We definitely know we're going to print the one down here somewhere。
    So that's going to happen at some point。 We just don't know exactly when yet。
    Okay。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们肯定会打印一。现在，我们不一定会立刻这样做。这里有些其他的事情在发生。我们没有在这里做任何等待。我们肯定知道我们会在某个地方打印一。所以那将在某个时刻发生。我们只是不知道确切时间。好的。
- en: Then what is it going to do？ Well， PID is still greater than zero because it's
    the return value for the child ones fork call。 which means it's the PID of child
    two。 Therefore， we're going to wait for child two。 And then we're going to print
    what？ Counter plus five。 So counter is going to be equal to six。 And then we're
    going to print six。 Okay。 And that's going to happen at some point。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 那么它接下来会做什么呢？嗯，PID仍然大于零，因为它是子进程一的`fork`调用的返回值。这意味着它是子进程二的PID。因此，我们将等待子进程二。然后我们要打印什么呢？计数器加五。所以计数器将等于六。然后我们打印六。好的。那将在某个时刻发生。
- en: It's definitely true that the six is going to happen after the one because there's
    no other way in this logic。 It could happen。 But you don't know when in the relationship
    to the rest of the program is going to happen yet。 So then you go over to the
    child two and you go， okay， fine。 What's happening here？ Well。 child two is not。
    It's PID that return value from fork is not greater than zero。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这绝对是对的，六会在一之后发生，因为在这个逻辑中没有其他方式可以发生。它可能发生，但你还不知道它相对于程序其他部分的关系是怎样的。然后你去到子进程二，想，好的，发生了什么？好吧。子进程二不是。它的
    PID 返回值不是大于零。
- en: It's zero because it's the child of the fork call。 Therefore， we update its
    counter to two。 And then we print it out。 Print two。 Okay。 But we don't really
    know when that happens。 That doesn't necessarily happen before this one。 It could。
    But it might not happen。 We don't know yet。 Okay。 And that's a race condition
    in that case。 All right。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 它是零，因为它是 `fork` 调用的子进程。因此，我们将它的计数器更新为二。然后我们打印出来。打印二。好的。但我们并不确切知道那时会发生什么。那并不一定会在这个一之前发生。它可能会发生，但也可能不会。我们还不知道。好的。在这种情况下，这就是一个竞态条件。明白了吗？
- en: But then what does it do？ It goes back to the top of the while loop counter
    is not less than two anymore。 Therefore， it exits the while loop。 And then if
    counter is greater than zero。 it's going to print the counter。 Well， guess what？
    It's got to print two again。 We don't know exactly when we know this two is going
    to happen after this two。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 那么它到底做了什么呢？它回到循环顶部，计数器不再小于二了。因此，它退出了这个 `while` 循环。然后如果计数器大于零，它将打印计数器。猜猜看？它得再打印一次二。我们不确切知道何时知道这个二会在这个二之后发生。
- en: But it's not really easy to tell in that case。 Like it doesn't really matter
    in that case because the first。 one goes to and it doesn't really matter。 But
    that's going to happen there。 And then it goes here and PID is greater than zero。
    Well， it's not。 It's the final child。 And so it's PID value。 It's return value
    from fork was zero。 So it's just going to end。 Okay。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在这种情况下其实并不容易判断。就像在这种情况下并不重要，因为第一个。一个去，没什么关系。但那时它会发生。然后它到这里，PID 大于零。好吧，不是的。它是最后的子进程。所以它的
    PID 值。`fork` 的返回值是零。所以它就结束了。好的。
- en: So logically， let's see what happens。 We definitely print this one first。 That
    has to happen。 Okay。 Then we have a couple different things could happen。 We could
    print this one or this two or this two in any or this one。 So we could print one，
    two。 two or we could print one and then one two or sorry two one two。 That's a
    one in there two。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 从逻辑上看，我们先肯定会打印这个一。那必须发生。好的。然后我们有几个不同的情况。我们可能会打印这个一，或者这个二，或者这个二，在任何顺序下或者这个一。所以我们可能打印一，二，二，或者打印一然后是二一，或者抱歉，二一二。那是一个在里面的二。
- en: one two or we could do one and then two， two， one。 Because any of those things
    could happen anywhere。 Nobody's waiting for anybody between this one and these
    two twos。 Okay。 They could have two。 Okay。 They could happen in kind of anywhere。
    Then by the time this two does finally print， right。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 一二，或者我们可以做一，然后是二，二，一。因为这些事情中的任何一个都可能在任何地方发生。在这个一和这两个二之间没有人在等待任何人。好的。它们可能有两个。好的。它们可能在任何地方发生。然后当这个二最终打印出来时，对吧。
- en: well then we definitely go back into the waiting here。 And what happens there？
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们肯定会回到这里等待。那时会发生什么？
- en: We have to print the six because this one's waiting for a child to end。 Okay。
    And the only time that can happen is after that other two there。 Okay。 And it
    has to end。 The six has to happen after this one because there's no other way
    for that to do that in child number one。 Okay。 And so then the six happens in
    all of them。 And then this child ends。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须打印六，因为这个一在等待一个子进程结束。好的。只有在那个二之后才能发生。好的。而且它必须结束。六必须在这个一之后发生，因为在子进程一中没有其他方式做到这一点。好的。然后六在所有情况下都会发生。然后这个子进程就结束了。
- en: Therefore we're waiting for that child。 We definitely then definitely print
    five。 So those are the three possible outputs。 Okay。 I think that would be hard
    to do in your head。 Right。 So I think you should like catalog this stuff and write
    it down as you go and you should be able to like get there eventually。 What questions
    you have about that？ Everybody good on that one？ Good。 That one's not。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们正在等待那个子进程。我们肯定会打印五。所以这些就是三种可能的输出。好的。我想这在脑海中做起来会很难。对吧？所以我认为你应该像记录这些内容一样，写下来，随着进程进行，你应该最终能搞清楚。对此你有什么问题吗？大家都清楚了吗？好。这个不难。
- en: That one takes a little bit of thinking but hopefully isn't too too bad。 And
    five minutes is probably not quite enough time to go from the beginning there。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 那个问题需要稍微思考一下，但希望不会太难。而且五分钟可能不足以从头开始完成这部分。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_9.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_9.png)'
- en: Now what would happen if we now change the counters greater than zero to the
    counter greater than or equal to zero？
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 那么如果我们现在将大于零的计数器改为大于或等于零的计数器，会发生什么呢？
- en: Right here。 Well now you've got all sorts of other things that could happen。
    Now the both the parent of the basically the original parent now is going to print
    its own counter which at that point is what？
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 就在这里。好吧，现在你有了其他可能发生的情况。现在，原来的父进程会打印它自己的计数器，那个时候是什么呢？
- en: Zero still。 Well that could happen before the one。 If it happened before the
    one that would give you three more different outputs。 It could happen after the
    first one。 That's going to be three more。 It could happen after the second one
    because nobody's waiting for anybody in this case。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 仍然是零。嗯，这个情况可能会在第一个之前发生。如果它发生在第一个之前，那会给你三个不同的输出。它也可能发生在第一个之后，那会是三个更多的输出。它也可能发生在第二个之后，因为在这种情况下没有任何人在等待。
- en: It could happen after the next one。 Three more。 Could happen after the next
    one。 Three more。 Could it even happen after the six？ Probably。 Right。 Because
    you could actually get the six happens after the or is it this would take a lot
    of like weirdness kind of in the schedule but it could nothing stopping it from
    saying the other two process are going to go and go to completion。 before we even
    get to here in the original parent。 So it could happen there。 That's another three。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 它可能发生在下一个之后。三个更多。可能发生在下一个之后。三个更多。它甚至可能发生在六之后？可能吧。对吧？因为六实际上可能发生在之后，或者说，这会在调度中引发一些奇怪的情况，但它是可能的，没什么阻止它的东西，其他两个进程可以继续执行并完成，甚至在原始父进程之前。所以它可能会发生在那时。那是另外三个。
- en: Three six nine twelve fifteen eighteen eighteen new total cases now that you
    could do and you wouldn't want to write all those out of guess but you wouldn't
    ask it necessarily。 Right。 Question。 No question。 You're good。 Yeah。 That's definitely
    a like that's a more I think that's kind of the more challenging one at the moment
    because you have to go oh now it's happening and you don't really want to write
    all eighteen out although probably students did。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在有三、六、九、十二、十五、十八种新的情况，你可以处理这些，但你可能不想把它们全部写出来，或者说你不一定会这么做，对吧？问题。没有问题。你很好。是的。这绝对是一个更有挑战性的问题，因为你得意识到现在发生了什么，你其实不太想写出所有十八种情况，尽管学生们可能写了。
- en: Okay。 Other questions on this question before we go on to the next one。 All
    right。 Good。 Okay。 Let's see。 There we go。 Eight more。 Okay。 Here's another one。
    Consider the following program。 That's a pattern here。 Right。 Assume that each
    call flushes to output to the console and full that basically means that it's
    atomic and further assume that none of the system calls fail same sort thing before
    fork doesn't fail wait PID only returns negative one because there are no child
    processes at the moment that it。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。在继续下一个问题之前，有没有其他问题？好，好的。好的。我们来看。来了。再来一个。考虑以下程序。这里有个模式，对吧？假设每次调用都会刷新输出到控制台，而且这基本上意味着它是原子的，进一步假设系统调用都不会失败，类似于fork不会失败，wait
    PID只会返回负一，因为此时没有子进程。
- en: decides to return its return value。 Okay。 And the first question is what's the
    output of this program。 And notice that what is the output of the program。 You'll
    probably want to look through this and go oh that means no。 That means there's
    probably only one output。 Let's see if I can figure it out。 So go ahead。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 决定返回它的返回值。好的。第一个问题是这个程序的输出是什么？请注意这个程序的输出是什么。你可能会想查看它，然后说“哦，那意味着不”。那意味着可能只有一个输出。我们来看看我能不能弄明白。所以继续吧。
- en: Take a few more minutes and do that。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。
    Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 All right。 30 more seconds。
    Okay。 Okay。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 再花几分钟做这个。好的。好的。好的。好的。好的。好的。好的。好的。好的。好的。好的。好的。好的。好的。好的。好的。好的。好的。好的。好的。再30秒。好的。好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_11.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_11.png)'
- en: Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。
    Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。
    Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。
    Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。
    Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。
    好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。
    好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。
- en: Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。
    Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。
    好的。 好的。 好的。 好的。 好的。 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_13.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_13.png)'
- en: Okay。 Okay。 Okay。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。 好的。 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_15.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_15.png)'
- en: Okay。 Okay。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_17.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_17.png)'
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_18.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_18.png)'
- en: Okay。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_20.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_20.png)'
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_21.png)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_21.png)'
- en: Okay。 Okay。 Okay。 Okay。 Okay。 Okay。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。 好的。 好的。 好的。 好的。 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_23.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_23.png)'
- en: Okay。 Okay。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_25.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_25.png)'
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_26.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_26.png)'
- en: Okay。 Okay。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_28.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_28.png)'
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_29.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_29.png)'
- en: Okay。 Okay。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_31.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_31.png)'
- en: Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。 Okay。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_33.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_33.png)'
- en: Okay。 Okay。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_35.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_35.png)'
- en: Okay。 Okay。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_37.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_37.png)'
- en: Okay。 Okay。 Okay。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。 好的。 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_39.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_39.png)'
- en: Okay。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_41.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_41.png)'
- en: Okay。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_43.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_43.png)'
- en: Okay。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_45.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_45.png)'
- en: Okay。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_47.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_47.png)'
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_48.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_48.png)'
- en: Okay。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_50.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_50.png)'
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_51.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_51.png)'
- en: Okay。 Okay。 Okay。 Okay。 Okay。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。 好的。 好的。 好的。 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_53.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_53.png)'
- en: Okay。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_55.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_55.png)'
- en: Okay。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_57.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_57.png)'
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_58.png)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_58.png)'
- en: Okay。 Okay。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_60.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_60.png)'
- en: Okay。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_62.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_62.png)'
- en: Okay。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_64.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_64.png)'
- en: Okay。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_66.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_66.png)'
- en: Okay。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_68.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_68.png)'
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_69.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_69.png)'
- en: Okay。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_71.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_71.png)'
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_72.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_72.png)'
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_73.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_73.png)'
- en: Okay。 Okay。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。 好的。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_75.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_75.png)'
- en: to all ours。 See you in lab or next week。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 给我们所有人。下次实验室见或下周见。
- en: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_77.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c4d04a56eb3fdffe753f10d82be4ef4b_77.png)'
