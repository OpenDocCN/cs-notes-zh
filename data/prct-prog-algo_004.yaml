- en: 1.2   Built-in Types of Data
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 1.2   数据的内置类型
- en: 原文：[https://introcs.cs.princeton.edu/java/12types](https://introcs.cs.princeton.edu/java/12types)
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 原文：[https://introcs.cs.princeton.edu/java/12types](https://introcs.cs.princeton.edu/java/12types)
- en: A *data type* is a set of values and a set of operations defined on them. For
    example, we are familiar with numbers and with operations defined on them such
    as addition and multiplication. There are eight different built-in types of data
    in Java, mostly different kinds of numbers. We use the system type for strings
    of characters so frequently that we also consider it here.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '*数据类型*是一组值和在其上定义的一组操作。例如，我们熟悉数字及其上定义的操作，如加法和乘法。在Java中有八种不同的内置数据类型，主要是不同类型的数字。我们经常使用系统类型来表示字符字符串，因此我们在这里也考虑它。'
- en: '![built-in data types](../Images/9a0cdd93e50c2ec18c98b19e959e5520.png)'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![built-in data types](../Images/9a0cdd93e50c2ec18c98b19e959e5520.png)'
- en: '**Terminology.** We use the following code fragment to introduce some terminology:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**术语。** 我们使用以下代码片段来介绍一些术语：'
- en: '[PRE0]'
  id: totrans-5
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first line is a *declaration statement* that declares the names of three
    *variables* using the *identifiers* `a`, `b`, and c and their type to be `int`.
    The next three lines are *assignment statements* that change the values of the
    variables, using the *literals* `1234` and `99`, and the *expression* `a + b`,
    with the end result that `c` has the value `1333`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 第一行是一个*声明语句*，声明了三个*变量*的名称为`a`、`b`和`c`，它们的类型为`int`。接下来的三行是*赋值语句*，改变了变量的值，使用了*字面量*`1234`和`99`，以及*表达式*`a
    + b`，最终`c`的值为`1333`。
- en: '**Characters and strings.** A `char` is an alphanumeric character or symbol,
    like the ones that you type. We usually do not perform any operations on characters
    other than assigning values to variables. A `String` is a sequence of characters.
    The most common operation that we perform on strings is known as *concatenation*:
    given two strings, chain them together to make a new string. For example, consider
    the following Java program fragment:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**字符和字符串。** `char`是字母数字字符或符号，就像您键入的那些。我们通常不对字符执行任何操作，只是将值赋给变量。`String`是一系列字符。我们对字符串执行的最常见操作称为*连接*：给定两个字符串，将它们连接在一起以生成新的字符串。例如，考虑以下Java程序片段：'
- en: '[PRE1]'
  id: totrans-8
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The first statement declares three variables to be of type `String`. The next
    three statements assign values to them, with the end result that `c` has the value
    `"Hello, Bob"`. Using string concatenation, [Ruler.java](Ruler.java.html) prints
    the relative lengths of the subdivisions on a ruler.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第一条语句声明了三个变量的类型为`String`。接下来的三条语句为它们赋值，最终`c`的值为`"Hello, Bob"`。使用字符串连接，[Ruler.java](Ruler.java.html)打印了标尺上各个刻度的相对长度。
- en: '**Integers.** An `int` is an integer (whole number) between −2^(31) and 2^(31)
    − 1   (−2,147,483,648 to 2,147,483,647). We use `int`s frequently not just because
    they occur frequently in the real world, but also they naturally arise when expressing
    algorithms. Standard arithmetic operators for addition, multiplication, and division,
    for integers are built into Java, as illustrated in [IntOps.java](IntOps.java.html)
    and the following table:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**整数。** `int` 是介于−2^(31)和2^(31) − 1（−2,147,483,648到2,147,483,647）之间的整数。我们经常使用`int`，不仅因为它们在现实世界中经常出现，而且在表达算法时自然产生。Java内置了用于整数加法、乘法和除法的标准算术运算符，如[IntOps.java](IntOps.java.html)和下表所示：'
- en: '![int expressions](../Images/20da605b3abe08614c09d0f6a7def893.png)'
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![int expressions](../Images/20da605b3abe08614c09d0f6a7def893.png)'
- en: '**Floating-point numbers.** The `double` type is for representing *floating-point*
    numbers, e.g., for use in scientific applications. The internal representation
    is like scientific notation, so that we can compute with real numbers in a huge
    range. We can specify a floating point number using either a string of digits
    with a decimal point, e.g., `3.14159` for a six-digit approximation to the mathematical
    constant pi, or with a notation like scientific notation, e.g., `6.022E23` for
    Avogadro''s constant 6.022 × 10^(23). Standard arithmetic operators for addition,
    multiplication, and division, for doubles are built in to Java, as illustrated
    in [DoubleOps.java](DoubleOps.java.html) and the following table:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '**浮点数。** `double` 类型用于表示*浮点数*，例如，在科学应用中使用。内部表示类似于科学计数法，因此我们可以在一个巨大的范围内计算实数。我们可以使用带有小数点的数字字符串来指定浮点数，例如，`3.14159`用于数学常数π的六位近似值，或者使用科学计数法表示，例如，`6.022E23`用于阿伏伽德罗常数6.022
    × 10^(23)。Java内置了用于双精度加法、乘法和除法的标准算术运算符，如[DoubleOps.java](DoubleOps.java.html)和下表所示：'
- en: '![double expressions](../Images/21851d84bd07fa7b30e095dc58d8a49e.png)'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![double expressions](../Images/21851d84bd07fa7b30e095dc58d8a49e.png)'
- en: '[Quadratic.java](Quadratic.java.html) shows the use of doubles in computing
    the two roots of a quadratic equation using the quadratic formula.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '[Quadratic.java](Quadratic.java.html) 展示了在计算二次方程的两个根时使用双精度的情况，使用了二次公式。'
- en: '**Booleans.** The `boolean` type has just two values: `true` or `false`. The
    apparent simplicity is deceiving—booleans lie at the foundation of computer science.
    The most important operators defined for the `boolean` are for *and*, *or*, and
    *not*.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: '**布尔值。** `boolean` 类型只有两个值：`true`或`false`。这种明显的简单性是具有欺骗性的——布尔值是计算机科学的基础。为`boolean`定义的最重要的运算符是*and*、*or*和*not*。'
- en: '*and*:  `a && b` is true if both `a` and `b` are true, and false otherwise.'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*and*:  `a && b` 如果`a`和`b`都为真，则为真，否则为假。'
- en: '*or*:  `a || b` is true if either `a` or `b` is true (or both are true), and
    false otherwise'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*or*:  `a || b` 如果`a`或`b`为真（或两者都为真），则为真，否则为假。'
- en: '*not*:  `!a` is true if `a` is false, and false otherwise.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*not*:  `!a` 如果`a`为假，则为真，否则为假。'
- en: Although these definitions are intuitive and easy to understand, it is worthwhile
    to fully specify each possibility for each operation in a *truth table*.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这些定义直观且易于理解，但完全指定每个操作的每种可能性在*真值表*中是值得的。
- en: '![boolean operations](../Images/57f7a58a1275878f9f270266beca8669.png)'
  id: totrans-20
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![boolean operations](../Images/57f7a58a1275878f9f270266beca8669.png)'
- en: '**Comparisons.** The *comparison* operators are *mixed-type* operations that
    take operands of one type (e.g., `int` or `double`) and produce a result of type
    `boolean`. These operations play a critical role in the process of developing
    more sophisticated programs.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**比较。** *比较*运算符是*混合类型*操作，它们接受一个类型（例如，`int`或`double`）的操作数，并产生类型为`boolean`的结果。这些操作在开发更复杂程序的过程中起着至关重要的作用。'
- en: '![comparison operations](../Images/bf43b39fae1ccf51a93cbf4a1d3b541e.png)'
  id: totrans-22
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![比较操作](../Images/bf43b39fae1ccf51a93cbf4a1d3b541e.png)'
- en: '[LeapYear.java](LeapYear.java.html) tests whether an integer corresponds to
    a leap year in the Gregorian calendar.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '[闰年.java](LeapYear.java.html) 测试一个整数是否对应于公历中的闰年。'
- en: Library methods and APIs.
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 库方法和API。
- en: Many programming tasks involve using Java library methods in addition to the
    built-in operators. An *application programming interface* is a table summarizing
    the methods in a library.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 许多编程任务涉及使用Java库方法以及内置运算符。*应用程序编程接口*是总结库中方法的表格。
- en: '*Printing strings to the terminal window.*'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将字符串打印到终端窗口。*'
- en: '![printing to standard output](../Images/a157a4446e549f0eea018f67baf629df.png)'
  id: totrans-27
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![打印到标准输出](../Images/a157a4446e549f0eea018f67baf629df.png)'
- en: '*Converting strings to primitive types.*'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将字符串转换为原始类型。*'
- en: '![parsing command-line arguments](../Images/b682c180b76c01dc323d2b352765c5cd.png)'
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![解析命令行参数](../Images/b682c180b76c01dc323d2b352765c5cd.png)'
- en: '*Mathematical functions.*'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*数学函数。*'
- en: '![math library](../Images/17b82002dfc1a3813fc6b2aaf93a2c3c.png)'
  id: totrans-31
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_IMG
  zh: '![数学库](../Images/17b82002dfc1a3813fc6b2aaf93a2c3c.png)'
- en: 'You can call a method by typing its name followed by *arguments*, enclosed
    in parentheses and separated by commas. Here are some examples:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过键入方法名称，后跟*参数*，用括号括起并用逗号分隔来调用方法。以下是一些示例：
- en: '![library calls](../Images/313b31f8778d8e73360ef25a715d6e1a.png)'
  id: totrans-33
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![库调用](../Images/313b31f8778d8e73360ef25a715d6e1a.png)'
- en: We often find ourselves converting data from one type to another using one of
    the following approaches.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常发现自己使用以下方法之一将数据从一种类型转换为另一种类型。
- en: Type conversion.
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 类型转换。
- en: We often find ourselves converting data from one type to another using one of
    the following approaches.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们经常发现自己使用以下方法之一将数据从一种类型转换为另一种类型。
- en: '*Explicit type conversion*. Call methods such as `Math.round()`, `Integer.parseInt()`,
    and `Double.parseDouble()`.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*显式类型转换。* 调用诸如`Math.round()`、`Integer.parseInt()`和`Double.parseDouble()`之类的方法。'
- en: '*Automatic type conversion.* For primitive numeric types, the system automatically
    performs type conversion when we use a value whose type has a larger range of
    values than expected.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自动类型转换。* 对于原始数值类型，当我们使用具有比预期更大值范围的类型的值时，系统会自动执行类型转换。'
- en: '*Explicit casts.* Java also has some built-in type conversion methods for primitive
    types that you can use when you are aware that you might lose information, but
    you have to make your intention using something called a *cast*. [RandomInt.java](RandomInt.java.html)
    reads an integer command-line argument *n* and prints a "random" integer between
    0 and *n*−1.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*显式转换。* Java还具有一些用于原始类型的内置类型转换方法，当您意识到可能会丢失信息时，可以使用这些方法，但必须使用称为*转换*的东西表明您的意图。[随机整数.java](RandomInt.java.html)读取一个整数命令行参数*n*，并打印介于0和*n*−1之间的“随机”整数。'
- en: '*Automatic conversions for strings.* The built-in type `String` obeys special
    rules. One of these special rules is that you can easily convert any type of data
    to a `String` by using the `+` operator.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*字符串的自动转换。* 内置类型`String`遵守特殊规则。其中一个特殊规则是，您可以通过使用`+`运算符轻松地将任何类型的数据转换为`String`。'
- en: '![type conversion](../Images/ba95aaec3b4e04f69fb7f903a5a19ce1.png)'
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_IMG
  zh: '![类型转换](../Images/ba95aaec3b4e04f69fb7f903a5a19ce1.png)'
- en: Exercises
  id: totrans-42
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习
- en: Suppose that `a` and `b` are `int` values. What does the following sequence
    of statements do?
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设`a`和`b`是`int`值。以下语句序列做什么？
- en: '[PRE2]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '*Solution*: sets `a`, `b`, and `t` equal to the original value of `a`.'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*: 将`a`、`b`和`t`设置为`a`的原始值。'
- en: 'Suppose that `a` and `b` are `int` values. Simplify the following expression:
    `(!(a < b) && !(a > b))`'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 假设`a`和`b`是`int`值。简化以下表达式：`(!(a < b) && !(a > b))`
- en: '*Solution*: `(a == b)`'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*: `(a == b)`'
- en: The *exclusive or* operator `^` for `boolean` operands is defined to be `true`
    if they are different, `false` if they are the same. Give a truth table for this
    function.
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '*异或*运算符`^`用于`boolean`操作数，如果它们不同则定义为`true`，如果它们相同则定义为`false`。给出此函数的真值表。'
- en: Why does `10/3` give `3` and not `3.33333333`?
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么`10/3`会得到`3`而不是`3.33333333`？
- en: '*Solution*: Since both 10 and 3 are integer literals, Java sees no need for
    type conversion and uses integer division. You should write `10.0/3.0` if you
    mean the numbers to be `double` literals. If you write `10/3.0` or `10.0/3`, Java
    does implicit conversion to get the same result.'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*: 由于10和3都是整数字面量，Java认为不需要类型转换并使用整数除法。如果您希望数字为`double`字面量，则应编写`10.0/3.0`。如果您写`10/3.0`或`10.0/3`，Java会进行隐式转换以获得相同的结果。'
- en: What do each of the following print?
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下每个打印出什么？
- en: '`System.out.println(2 + "bc");` prints: 2bc'
  id: totrans-52
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`System.out.println(2 + "bc");` 输出: 2bc'
- en: '`System.out.println(2 + 3 + "bc");` prints: 5bc'
  id: totrans-53
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`System.out.println(2 + 3 + "bc");` 输出: 5bc'
- en: '`System.out.println((2+3) + "bc");` prints: 5bc'
  id: totrans-54
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`System.out.println((2+3) + "bc");` 输出: 5bc'
- en: '`System.out.println("bc" + (2+3));` prints: bc5'
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`System.out.println("bc" + (2+3));` 输出: bc5'
- en: '`System.out.println("bc" + 2 + 3);` prints: bc23'
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`System.out.println("bc" + 2 + 3);` 输出: bc23'
- en: Explain each outcome.
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 解释每个结果。
- en: Explain how to use [Quadratic.java](Quadratic.java.html) to find the square
    root of a number.
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 解释如何使用[二次方程.java](Quadratic.java.html)找到一个数字的平方根。
- en: '*Solution*: to find the square root of c, find the roots of x^2 + 0x - c.'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*: 要找到c的平方根，找到x^2 + 0x - c的根。'
- en: A physics student gets unexpected results when using the code
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个物理学生在使用代码时得到了意外的结果
- en: '[PRE3]'
  id: totrans-61
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE3]'
- en: to compute values according to the formula *F* = *G**m*[1]*m*[2] / *r*². Explain
    the problem and correct the code.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 根据公式*F* = *G**m*[1]*m*[2] / *r*²计算值。解释问题并更正代码。
- en: '*Solution*: It divides by `r`, then multiplies by `r` (instead of dividing
    by `r *r`). Use parentheses:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*: 它除以`r`，然后乘以`r`（而不是除以`r *r`）。使用括号：'
- en: '[PRE4]'
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Write a program [Distance.java](Distance.java.html) that takes two integer command-line
    arguments *x* and *y* and prints the Euclidean distance from the point (*x*, *y*)
    to the origin (0, 0).
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[Distance.java](Distance.java.html)，接受两个整数命令行参数 *x* 和 *y*，并打印从点(*x*, *y*)到原点(0,
    0)的欧几里德距离。
- en: Write a program [SumOfTwoDice.java](SumOfTwoDice.java.html) that prints the
    sum of two random integers between 1 and 6 (such as you might get when rolling
    dice).
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[SumOfTwoDice.java](SumOfTwoDice.java.html)，打印两个介于1和6之间的随机整数的和（例如，掷骰子时可能得到的值）。
- en: Write a program [SumOfSines.java](SumOfSines.java.html) that takes a double
    command-line argument t (in degrees) and prints the value of sin(2t) + sin(3t).
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[SumOfSines.java](SumOfSines.java.html)，接受一个双精度命令行参数 t（以度为单位），并打印 sin(2t)
    + sin(3t) 的值。
- en: Write a program [SpringSeason.java](SpringSeason.java.html) that takes two `int`
    values `m` and `d` from the command line and prints `true` if day `d` of month
    `m` is between March 20 (m = 3, d =20) and June 20 (m = 6, d = 20), `false` otherwise.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[SpringSeason.java](SpringSeason.java.html)，从命令行接受两个`int`值`m`和`d`，如果月份`m`的第`d`天在3月20日（m
    = 3, d = 20）和6月20日（m = 6, d = 20）之间，则打印`true`，否则打印`false`。
- en: Creative Exercises
  id: totrans-69
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 创意练习
- en: '**Wind chill.** Given the temperature `t` (in Fahrenheit) and the wind speed
    `v` (in miles per hour), the National Weather Service defines the [wind chill](https://www.weather.gov/safety/cold-wind-chill-chart)
    to be:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**风寒温度。** 给定温度`t`（华氏度）和风速`v`（英里/小时），国家气象局定义[风寒温度](https://www.weather.gov/safety/cold-wind-chill-chart)为：'
- en: w = 35.74 + 0.6215 t + (0.4275 t - 35.75) v^(0.16)
  id: totrans-71
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: w = 35.74 + 0.6215 t + (0.4275 t - 35.75) v^(0.16)
- en: 'Write a program [WindChill.java](WindChill.java.html) that takes two `double`
    command-line arguments `t` and `v` and prints the wind chill. Use `Math.pow(a,
    b)` to compute a^b. Note: the formula is not valid if t is larger than 50 in absolute
    value or if v is larger than 120 or less than 3 (you may assume that the values
    you get are in that range).'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 编写一个程序[WindChill.java](WindChill.java.html)，接受两个`double`命令行参数`t`和`v`，并打印风寒温度。使用`Math.pow(a,
    b)`计算a^b。注意：如果t的绝对值大于50或者v大于120或小于3，则该公式无效（您可以假设您得到的值在该范围内）。
- en: '**Polar coordinates.** Write a program [CartesianToPolar.java](CartesianToPolar.java.html)
    that converts from Cartesian to [polar coordinates](http://mathworld.wolfram.com/PolarCoordinates.html).
    Your program should take two real numbers x and y on the command line and print
    the polar coordinates r and θ. Use the Java method `Math.atan2(y, x)`, which computes
    the arctangent value of y/x that is in the range from -π to π.'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**极坐标。** 编写一个程序[CartesianToPolar.java](CartesianToPolar.java.html)，将笛卡尔坐标转换为[极坐标](http://mathworld.wolfram.com/PolarCoordinates.html)。您的程序应该在命令行上接受两个实数
    x 和 y，并打印极坐标 r 和 θ。使用Java方法`Math.atan2(y, x)`，计算 y/x 的反正切值，范围为 -π 到 π。'
- en: '**Day of the week.** Write a program [DayOfWeek.java](DayOfWeek.java.html)
    that takes a date as input and prints the day of the week that date falls on.
    Your program should take three command-line arguments: `m` (month), `d` (day),
    and `y` (year). For `m` use 1 for January, 2 for February, and so forth. For output
    print 0 for Sunday, 1 for Monday, 2 for Tuesday, and so forth. Use the following
    formulas, for the Gregorian calendar (where / denotes integer division):'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**星期几。** 编写一个程序[DayOfWeek.java](DayOfWeek.java.html)，接受一个日期作为输入，并打印该日期所在的星期几。您的程序应该接受三个命令行参数：`m`（月份）、`d`（日期）和`y`（年份）。对于`m`，使用1表示一月，2表示二月，依此类推。对于输出，星期日打印为0，星期一打印为1，星期二打印为2，依此类推。使用以下公式，适用于公历（其中/表示整数除法）：'
- en: '*y*[0] = *y* − (14 − *m*) / 12'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*y*[0] = *y* − (14 − *m*) / 12'
- en: '*x* = *y*[0] + *y*[0] / 4 − *y*[0] / 100 + *y*[0] / 400'
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*x* = *y*[0] + *y*[0] / 4 − *y*[0] / 100 + *y*[0] / 400'
- en: '*m*[0] = *m* + 12 × ((14 − *m*) / 12) − 2'
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*m*[0] = *m* + 12 × ((14 − *m*) / 12) − 2'
- en: '*d*[0] = (*d* + *x* + 31*m*[0] / 12) mod 7'
  id: totrans-78
  prefs:
  - PREF_IND
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '*d*[0] = (*d* + *x* + 31*m*[0] / 12) mod 7'
- en: For example, on which day of the week did February 14, 2000 fall?
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 例如，2000年2月14日是星期几？
- en: '[PRE5]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '**Uniform random numbers.** Write a program [Stats5.java](Stats5.java.html)
    that prints five uniform random values between 0 and 1, their average value, and
    their minimum and maximum value. Use `Math.random()`, `Math.min()`, and `Math.max()`.'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**均匀随机数。** 编写一个程序[Stats5.java](Stats5.java.html)，打印5个介于0和1之间的均匀随机值，它们的平均值，以及它们的最小值和最大值��使用`Math.random()`，`Math.min()`和`Math.max()`。'
- en: '**Three-sort.** Write a program [ThreeSort.java](ThreeSort.java.html) that
    takes three <t>int values from the command line and prints them in ascending order.
    Use `Math.min()` and `Math.max()`.</t>'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**三数排序。** 编写一个程序[ThreeSort.java](ThreeSort.java.html)，从命令行接受三个整数值，并按升序打印它们。使用`Math.min()`和`Math.max()`。'
- en: '**Dragon curves.** ![Dragon curves](../Images/fbb38f1e25e2d63c915d7d701754e02f.png)
    Write a program [Dragon.java](Dragon.java.html) to print the instructions for
    drawing the [dragon curves](https://en.wikipedia.org/wiki/Dragon_curve) of order
    0 through 5\. The instructions are strings of the characters `F`, `L`, and `R`,
    where `F` means "draw line while moving 1 unit forward", `L` means "turn left",
    and `R` means turn right. A dragon curve of order *n* is formed when you fold
    a strip of paper in half *n* times, then unfold to right angles. The key to solving
    this problem is to note that a curve of order *n* is a curve of order *n*−1 followed
    by an `L` followed by a curve of order *n*−1 traversed in reverse order, and then
    to figure out a similar description of the reverse curve.'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**龙曲线。** ![龙曲线](../Images/fbb38f1e25e2d63c915d7d701754e02f.png) 编写一个程序[Dragon.java](Dragon.java.html)
    来打印绘制[龙曲线](https://en.wikipedia.org/wiki/Dragon_curve)的指令，从0到5阶。指令是由字符`F`、`L`和`R`组成的字符串，其中`F`表示“向前移动1个单位时画线”，`L`表示“向左转”，`R`表示“向右转”。当您将一条纸折叠n次，然后展开成直角时，就形成了n阶龙曲线。解决这个问题的关键是注意到n阶曲线是n-1阶曲线后跟一个`L`，后跟以相反顺序遍历的n-1阶曲线，然后找出反向曲线的类似描述。'
- en: Web Exercises
  id: totrans-84
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 网页练习
- en: Write a program [Swap.java](Swap.java.html) that takes two integer command-line
    arguments *a* and *b* and swaps their values using the swapping idiom described
    on p. 17. After each assignment statement, use `System.out.println()` to print
    a trace of the variables.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序 [Swap.java](Swap.java.html)，接受两个整数型命令行参数 *a* 和 *b*，并使用第 17 页描述的交换惯用法交换它们的值。在每个赋值语句之后，使用
    `System.out.println()` 打印变量的跟踪。
- en: What does the following statement do where `grade` is a variable of type `int`?
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当 `grade` 是一个 `int` 类型的变量时，以下语句会做什么？
- en: '[PRE6]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '*Solution*: Syntax error since `<=` is a binary operator. You can rewrite the
    expression as `(90 <= grade && grade <= 100)`.'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：语法错误，因为 `<=` 是一个二元运算符。你可以将表达式重写为 `(90 <= grade && grade <= 100)`。'
- en: '**RGB to YIQ color converter.** Write a program `RGBtoYIQ.java`that takes an
    RGB color (three integers between 0 and 255) and transforms it to a [YIQ color](http://en.wikipedia.org/wiki/YIQ)
    (three different real numbers *Y*, *I*, and *Q*, with 0 ≤ *Y* ≤ 1, –0.5957 ≤ *I*
    ≤ 0.5957, and –0.5226 ≤ *Q* ≤ 0.5226). Write a program `YIQtoRGB.java` that applies
    the inverse transformation.'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**RGB 到 YIQ 颜色转换器。** 编写一个程序 `RGBtoYIQ.java`，接受一个 RGB 颜色（三个介于 0 和 255 之间的整数）并将其转换为
    [YIQ 颜色](http://en.wikipedia.org/wiki/YIQ)（三个不同的实数 *Y*、*I* 和 *Q*，其中 0 ≤ *Y* ≤
    1，–0.5957 ≤ *I* ≤ 0.5957，–0.5226 ≤ *Q* ≤ 0.5226）。编写一个程序 `YIQtoRGB.java`，应用逆转换。'
- en: '**CMYK to RGB color matching.** Write a program `CMYKtoRGB` that reads in four
    command line inputs C, M, Y, and K between 0 and 1, and prints the corresponding
    RGB parameters. Devise the appropriate formula by "inverting" the RGB to CMYK
    conversion formula.'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**CMYK 到 RGB 颜色匹配。** 编写一个程序 `CMYKtoRGB`，读取四个介于 0 和 1 之间的命令行输入 C、M、Y 和 K，并打印相应的
    RGB 参数。通过"反转" RGB 到 CMYK 转换公式来设计适当的公式。'
- en: What does the following code fragment print?
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段会打印什么？
- en: '[PRE7]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '*Solution*: It prints `0.0` since the integer division is done before the cast.'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：它会打印 `0.0`，因为整数除法在转换之前进行。'
- en: Why doesn't the following program print 4294967296 = 2^32?
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么以下程序不会打印 4294967296 = 2^32？
- en: '[PRE8]'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '*Solution*: The product of the two `int` values is computed as an `int`, and
    then automatically converted to a `long`. But 65536 * 65536 = 2^32 overflows a
    32 bit `int` before it gets converted.'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：两个 `int` 值的乘积被计算为一个 `int`，然后自动转换为一个 `long`。但是 65536 * 65536 = 2^32 在转换之前会导致
    32 位 `int` 溢出。'
- en: What is the value of `(Math.sqrt(2) * Math.sqrt(2) == 2)`?
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`(Math.sqrt(2) * Math.sqrt(2) == 2)` 的值是多少？'
- en: Write a program [DivideByZero.java](DivideByZero.java.html) to see what happens
    when you divide an `int` or `double` by zero.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序 [DivideByZero.java](DivideByZero.java.html) 来查看当你将一个 `int` 或 `double`
    ���以零时会发生什么。
- en: '*Solution*:'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：'
- en: '`(17 / 0)` and `(17 % 0)` result in a division by zero exception;'
  id: totrans-100
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(17 / 0)` 和 `(17 % 0)` 会导致除以零异常；'
- en: '`(17.0 / 0.0)` results in a value `Infinity`;'
  id: totrans-101
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(17.0 / 0.0)` 的结果是一个值 `Infinity`；'
- en: '`(17.0 % 0.0)` results in a value `NaN` that stands for "not a number."'
  id: totrans-102
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(17.0 % 0.0)` 的结果是一个值 `NaN`，代表着"不是一个数字"。'
- en: '**Guess the biggest number.** Consider the following game. Alice writes down
    two integers between 0 and 100 on two cards. Bob gets to select one of the two
    cards and see its value. After looking at the value, Bob commits to one of the
    two cards. If he chooses a card with the largest value, he wins; otherwise he
    loses. Devise a strategy (and corresponding computer program) for Bob so that
    he guarantees to win strictly more than half the time.'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**猜最大数。** 考虑以下游戏。爱丽丝在两张卡上写下 0 到 100 之间的两个整数。鲍勃可以选择其中一张卡并查看其值。查看值后，鲍勃会选择其中一张卡。如果他选择的卡上有最大的值，他就赢了；否则他就输了。为鲍勃设计一种策略（以及相应的计算机程序），以确保他能赢得超过一半的时间。'
- en: '**Fibonacci word.** Write a program `FibonacciWord.java` that prints the Fibonacci
    word of order 0 through 10. f(0) = "a", f(1) = "b", f(2) = "ba", f(3) = "bab",
    f(4) = "babba", and in general f(n) = f(n-1) followed by f(n-2). Use string concatenation.'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**斐波那契词。** 编写一个程序 `FibonacciWord.java`，打印出 0 到 10 阶的斐波那契词。f(0) = "a"，f(1) =
    "b"，f(2) = "ba"，f(3) = "bab"，f(4) = "babba"，一般情况下 f(n) = f(n-1) 后跟 f(n-2)。使用字符串连接。'
- en: '**Standard deviation.** Modify Exercise 1.2.30 so that it prints the sample
    standard deviation in addition to the average.'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**标准差。** 修改练习 1.2.30，使其在打印平均值的同时打印样本标准差。'
- en: Write a program that reads in three parameters and prints `true` if all three
    are equal, and `false` otherwise.
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，读取三个参数并打印出如果它们都相等则为 `true`，否则为 `false`。
- en: What happens if you compile LeapYear.java and execute it with
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你编译 LeapYear.java 并执行它，会发生什么？
- en: java LeapYear
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: java LeapYear
- en: java LeapYear 1975.5
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: java LeapYear 1975.5
- en: java LeapYear -1975
  id: totrans-110
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: java LeapYear -1975
- en: java LeapYear 1975 1976 1977
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: java LeapYear 1975 1976 1977
- en: 'What does the compiler do if you try to write the following expression:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你尝试写下以下表达式，编译器会做什么：
- en: '[PRE9]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'What does the compiler do if you try to write the following expression:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你尝试写下以下表达式，编译器会做什么：
- en: '[PRE10]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '*Solution*: The compiler complains that the variable x might not have been
    initialized. Variables within `main` are not automatically initialized.'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：编译器会抱怨变量 x 可能尚未初始化。`main` 中的变量不会自动初始化。'
- en: What does the following code fragment print.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段会打印什么。
- en: '[PRE11]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Write a program that takes four real-valued command line parameters x1, y1,
    x2, and y2 and prints the Euclidean distance between the points (x1, y1) and (x2,
    y2). Use `Math.sqrt()`.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序，接受四个实数型命令行参数 x1、y1、x2 和 y2，并打印出点 (x1, y1) 和点 (x2, y2) 之间的欧几里得距离。使用 `Math.sqrt()`。
- en: Write a program `Ordered.java` that reads in three integer command line arguments,
    `x`, `y`, and `z`. Create a boolean variable `b` that is `true` if the three values
    are either in ascending or in descending order, and `false` otherwise. Print the
    variable `b`.
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序 `Ordered.java`，读取三个整数型命令行参数 `x`、`y` 和 `z`。创建一个布尔变量 `b`，如果这三个值是升序或降序排列，则为
    `true`，否则为 `false`。打印变量 `b`。
- en: Write a program [Divisibility.java](Divisibility.java.html) that reads in two
    command line inputs and prints `true` if both are divisible by 7, and `false`
    otherwise.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序 [Divisibility.java](Divisibility.java.html)，读取两个命令行输入，并在两者都能被 7 整除时打印
    `true`，否则打印 `false`。
- en: '**Area of a triangle.** Write a program `TriangleArea.java` that takes three
    command line inputs a, b, and c, representing the side lengths of a triangle,
    and prints the area of the triangle using Heron''s formula: area = sqrt(s(s-a)(s-b)(s-c)),
    where s = (a + b + c) / 2.'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**三角形的面积。** 编写一个名为`TriangleArea.java`的程序，接受三个命令行输入a、b和c，表示三角形的边长，并使用海伦公式打印三角形的面积：area
    = sqrt(s(s-a)(s-b)(s-c))，其中s = (a + b + c) / 2。'
- en: '**Equatorial to horizontal coordinates.** The *equatorial coordinate system*
    is widely used by astronomers to indicate the position of a star on the celestial
    sphere. The position is specified by its declination δ, its hour angle H, and
    its latitude φ. The *horizontal coordinate system* (a.k.a. Alt/Az coordinate system)
    is useful for determining the setting/rising time of celestial objects. The position
    is specified by its altitude (vertical angle from the horizon) and and its azimuth
    (horizontal angle). Given a star''s position using equatorial coordinates, find
    its position in horizontal coordinates using the formulas below.'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**赤道坐标转换为水平坐标。** *赤道坐标系统*被天文学家广泛用于指示星球在天球上的位置。位置由其赤纬δ、时角H和纬度φ指定。*水平坐标系统*（也称为Alt/Az坐标系统）对于确定天体的落下/升起时间很有用。位置由其高度（与地平线的垂直角）和方位角（水平角）指定。给定一个星星的位置使用赤道坐标，使用下面的公式找到其在水平坐标中的位置。'
- en: '[PRE12]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '**Body mass index.** The [body mass index](http://en.wikipedia.org/wiki/Body_mass_index)
    (BMI) is the ratio of the weight of a person (in kilograms) to the square of the
    height (in meters). Write a program `BMI.java` that takes two command-line arguments,
    `weight` and `height`, and prints the BMI.'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**身体质量指数。** [身体质量指数](http://en.wikipedia.org/wiki/Body_mass_index)（BMI）是一个人体重（以千克为单位）与身高（以米为单位）的平方比率。编写一个名为`BMI.java`的程序，接受两个命令行参数，`weight`和`height`，并打印BMI。'
- en: '**Temperature conversion.** What is wrong with the following code fragment
    to convert from Fahrenheit (F) to Celsius (C)?'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**温度转换。** 下面的代码片段将从华氏度（F）转换为摄氏度（C）有什么问题？'
- en: '[PRE13]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '**Exponentiation.** What is wrong with the following code fragment to compute
    a², where `a` is of type `double`?'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**指数。** 下面的代码片段计算`a²`有什么问题，其中`a`是`double`类型？'
- en: '[PRE14]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '*Solution*: In Java, `^` does not mean exponentiation (it''s the exclusive
    or function from logic). Use `a*a` instead. To compute a^x, use `Math.pow(a, x)`.
    Note that `Math.pow()` returns a `double` so that you would need an explicit cast
    if `a` and `b` in the above example were integers.'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：在Java中，`^`不表示指数（它是逻辑中的异或函数）。使用`a*a`代替。要计算a^x，使用`Math.pow(a, x)`。请注意，`Math.pow()`返回一个`double`，因此如果上面的示例中的`a`和`b`是整数，则需要显式转换。'
- en: What of the following statements is legal?
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下哪个陈述是合法的？
- en: '[PRE15]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '*Solution*: Only the second one.'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：只有第二个。'
- en: Barring overflow, give a code fragment to compute the maximum of two integers
    `a` and `b` without using `Math.max()` or `if`.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 除溢出外，给出一个计算两个整数`a`和`b`的最大值的代码片段，不使用`Math.max()`或`if`。
- en: '[PRE16]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '**Discriminant of cubic polynomial.** Given the coefficients b, c, and d of
    the cubic polynomial x^3 + bx^2 + cx + d, write an expression to compute the *discriminant*
    b^2c^2 - 4c^3 - 4b^3d - 27d^2 + 18bcd.'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**三次多项式的判别式。** 给定三次多项式x^3 + bx^2 + cx + d的系数b、c和d，编写一个表达式来计算判别式b^2c^2 - 4c^3
    - 4b^3d - 27d^2 + 18bcd。'
- en: '**Barycenter.** In a two-body system, the [barycenter](http://en.wikipedia.org/wiki/Barycenter)
    is the center of gravity about which the two celestial bodies orbit each other.
    Given the masses *m*[1] and *m*[2] of two bodies, and the shortest distance *a*
    between the two bodies, write a program to compute the distance from the center
    of the first (more massive) body to the barycenter: *r*[1] = *a* *m*[2] / (*m*[1]
    + *m*[2]).'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**重心。** 在一个双体系统中，[重心](http://en.wikipedia.org/wiki/Barycenter)是两个天体围绕其相互轨道的重心。给定两个天体的质量*m*[1]和*m*[2]，以及两个天体之间的最短距离*a*，编写一个程序来计算从第一个（质量更大）天体的中心到重心的距离：*r*[1]
    = *a* *m*[2] / (*m*[1] + *m*[2])。'
- en: Here are a few examples. Masses are in earth-mass units, distances are in kilometers.
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下是一些示例。质量以地球质量单位表示，距离以千米表示。
- en: 'Earth-moon: *m*[1] = 1, *m*[2] = .0123, *a* = 384,000, *r*[1] = 4,670, *R*[1]
    = 6,380.'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 地球-月球：*m*[1] = 1，*m*[2] = .0123，*a* = 384,000，*r*[1] = 4,670，*R*[1] = 6,380。
- en: 'Pluto-Charon: *m*[1] = .0021, *m*[2] = .000254, *a* = 19,600, *r*[1] = 2,110,
    *R*[1] = 1,150.'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 冥王星-卡戎：*m*[1] = .0021，*m*[2] = .000254，*a* = 19,600，*r*[1] = 2,110，*R*[1] =
    1,150。
- en: 'Sun-Earth: *m*[1] = 333,000, *m*[2] = 1, *a* = 150,000,000, *r*[1] = 449, *R*[1]
    = 696,000.'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 太阳-地球：*m*[1] = 333,000，*m*[2] = 1，*a* = 150,000,000，*r*[1] = 449，*R*[1] = 696,000。
- en: Note that if *r*[1] is less than the radius of the first body *R*[1], then the
    barycenter lies within the first body.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 请注意，如果*r*[1]小于第一个天体的半径*R*[1]，则重心位于第一个天体内部。
- en: '**Poison parentheses.** Find a legal Java expression that leads to a compile-time
    error when you add parentheses around a subexpression to to document the order
    of evaluation that would take place in their absence.'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**毒括号。** 找到一个合法的Java表达式，当您在子表达式周围添加括号以记录在没有括号的情况下将发生的评估顺序时，会导致编译时错误。'
- en: '*Solution*: The literal value 2147483648 (2^31) is permitted only as an operand
    of the unary minus operator, i.e., -2147483648\. Enclosing it in parentheses,
    i.e., -(2147483648), leads to a compile-time error. Similar ideas with the literal
    value 9223372036854775808L (2^63).'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*解决方案*：字面值2147483648（2^31）只允许作为一元减号运算符的操作数，即，-2147483648。将其括在括号中，即，-(2147483648)，会导致编译时错误。类似的想法适用于字面值9223372036854775808L（2^63）。'
- en: '**Car loan payments.** Write a program [CarLoan.java](CarLoan.java.html) that
    reads in three command-line arguments P, Y, and R and calculates the monthly payments
    you would have to make over Y years to pay off a P dollar loan at R per cent interest
    compounded monthly. The formula is The formula is'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '**汽车贷款付款。** 编写一个程序[CarLoan.java](CarLoan.java.html)，读取三个命令行参数P、Y和R，并计算在Y年内支付P美元贷款的每月付款额，利率为R，按月复利。公式是'
- en: '[PRE17]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '*Caveat*: in Chapter 9, we will consider more accurate ways to compute this
    quantity, so before you go off to run an online bank, be sure to learn about roundoff
    error.'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '*注意*：在第9章中，我们将考虑更准确计算这个数量的方法，所以在你开始运行在线银行之前，请务必了解舍入误差。'
- en: Write a program [Trig.java](Trig.java.html) to illustrate various trigonometric
    functions in the `Math` library, such as `Math.sin()`, `Math.cos()`, and `Math.toRadians()`.
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编写一个程序[Trig.java](Trig.java.html)来展示`Math`库中的各种三角函数，比如`Math.sin()`，`Math.cos()`和`Math.toRadians()`。
