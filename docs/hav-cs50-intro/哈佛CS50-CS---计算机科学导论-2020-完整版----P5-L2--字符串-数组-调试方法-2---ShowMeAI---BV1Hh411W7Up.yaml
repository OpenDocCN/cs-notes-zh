- en: 哈佛CS50-CS ｜ 计算机科学导论(2020·完整版) - P5：L2- 字符串、数组、调试方法 2 - ShowMeAI - BV1Hh411W7Up
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: wasn't the best practice，and so let me propose that we clean this，up。by way
    of another topic another feature，languages，known as arrays and if you happen to
    use。something called a list in scratch，very similar in spirit to scratches，lists
    but we didn't see，array。in c as in other languages is，a sequence of values stored
    in memory。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: back to back to back a sequence of，contiguous values so to speak。back to back
    to back so in that sense，right，if we use the metaphor of the picture。we've been
    drawing so how might this be，germaine here well it turns out that if。you want
    to store a whole bunch of，values but they're all kind of。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: interrelated like they're all scores，you don't have to resort to this sort of。lazy
    score one score two score three，score four score five，at the score 99 depending
    on how many。scores there are why don't you just call，all of those numbers scores
    but use a，syntax。gives you access to what are called，arrays so the syntax here
    on the screen。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: is an example of declaring space for，three integers all at once and。collectively
    referring to all of them，as the word scores so there's no more，scores one two
    and three。all three of those scores are in a，here，is a number，that literally connotes
    how many。integers do you want to store，under the name scores so what does this，allow
    me to do，integers。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: in that array so this array is going to，back，that i can put values in and the
    way i。put those values is going to look，syntactically like this，i still use numbers
    but now i'm using a。new notation，and it's similar to what i resorted to，before
    but it's a little more。generalized now on dynamic，now if i want to update the
    very first，score in that array。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: i literally write the name of the，variable scores bracket 0，close bracket and
    then assign it the。value if i want to get at the second，score i do scores bracket
    one。if i want the third score it scores，bracket two and the only thing that's
    a。little weird and a little，uh takes some getting used to is the。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/110ed059845cb3216569ef9efb94f426_1.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
- en: fact that we are zero，indexing our arrays so in past examples，of said。it's a
    convention in programming to，start counting from zero，when it comes to arrays
    which are。contiguous sequences of values in a，computer's memory，they have to start
    at zero otherwise if。you don't start counting at zero you're，literally going to
    be wasting space。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: by overlooking one value so now if we，were to rename things on the screen。instead
    of calling these four these，three rectangles，score one score two score three they're。all
    called scores but if you want to，refer specifically to the first one。you use this
    fancy bracket notation and，the third one，this bracket notation but notice the。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: dichotomy when，array saying，give me three ins you use bracket three。where bracket
    three is the total number，of values，when you index into the array that is。when
    you go to a specific location，use numbers，but now those are referring to their。relative
    positions position，zero position one position two this is，the total number，first。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 二分法当，数组说，给我三个整数，你使用的就是[3]。其中[3]是总值的数量，当你索引数组时。你去特定的位置，使用数字，但现在那些是相对位置，位置零，位置一，位置二，这就是，数量总和，第一。
- en: second and third all right so，pictorially nothing has changed just our，nomenclature
    really has。so let me go ah**d and start to improve，this program taking in the
    advice。um that was offered too on how we can，sort of，the smelliness of it let
    me take the，first let me take。the easiest easiest of these approaches，first by
    just getting rid of these three。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 第二和第三，好的，所以，图示上没有变化，只有我们的，命名发生了变化。所以让我去**d，开始改善这个程序，听取建议。嗯，之前提到过如何，我们可以， sort
    of，去除它的味道，让我先来。先处理这些最简单的方法，首先去掉这三个。
- en: separate variables and instead giving me，one variable called scores，then，two
    again that's all。going away that's all going away that's，all going away now if
    i want to。initialize that array with these three，values i say scores bracket zero。and
    down here i say scores bracket one，and down here i say scores bracket two。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 单独的变量，而不是给我，一个名为 scores 的变量，然后，再来两个，就这样。全都消失，就这样全都消失，现在如果我想要。用这三个值初始化那个数组，我说
    scores[0]。然后在这里我说 scores[1]，再在这里我说 scores[2]。
- en: so i've added one line of code but，have a fourth one，i can just allocate here
    and then put in。the value with another line of code or，five or six or seven or
    eight i don't。have to start copying and pasting all，convention，but i think if
    we take some of the。advice that was offered a moment ago we，can also clean this
    up by way of a loop。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我增加了一行代码，但，第四行，我可以在这里分配，然后用另一行代码放入。或五、六、七、八，我不。需要开始复制和粘贴所有，约定，但我认为如果我们采纳一些。之前提供的建议，我们也可以通过循环清理这个。
- en: or such as well so let's do that let me，go ah**d and give myself，actually first
    the cs50 library。so that i can use getint and let's take，this first piece of advice
    which is。let's start asking for a score，using get int and i'm going to do this，three
    times。and i don't yeah i'm getting a little，lazy i'm getting a little bored already。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 或者类似的，让我们这样做，让我去**d，首先给我，cs50 库。这样我可以使用 getint，让我们接受第一个建议。让我们开始请求分数，使用 get_int，我将这样做，三次。是的，我有点，懒惰，已经有点无聊了。
- en: so i'm going to copy paste and again，that does not bode well in general when。copying
    and pasting we can probably do，better still，but now i think i need to change just。one
    more thing here when doing the math，i want score zero plus scores one，problem
    here。the logic is still the same but i'm now，taking in dynamically three integers。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我要复制粘贴，这在一般情况下并不乐观，当。复制粘贴时我们可能可以，做得更好，但现在我想我需要再改动一点。这里在进行数学时，我想 scores[0]
    + scores[1]，这里的问题是。逻辑仍然是一样的，但我现在，是动态地接受三个整数。
- en: there's still a smell to it as well it's，to，make clear what could i do be doing，better
    now。how could i clean up this code and make，but，better designed what remains here
    nina。um the code is like specific for only，three scores so you could like ask
    an，input toward like。how many scores it wants at the very，beginning，and then so
    like having score bracket，for loop。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这里仍然有一种味道，明确一点，我现在可以做些什么更好。如何清理这段代码，让它，设计得更好，这里还剩下什么，nina。嗯，这段代码是仅针对，三个分数，所以你可以在一开始，询问输入想要多少分，然后就像有
    scores[for] 循环。
- en: that goes through from zero to，um n minus one or like less than n。that will
    like ask and it should be like，one line of code instead。yeah really good it's
    the fact that we，have get in get in get in that's like，doing something sub。optimally
    it might be correct but it's，probably not well designed because i did。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个过程从零到，嗯，n 减一或者说少于 n。它应该像是，替代成一行代码。是的，真的很好，事实上我们，要反复提到，这样做是，次优的，可能是正确的，但可能设计不够好，因为我做了。
- en: literally resort to copy paste，there's sort of a pattern here that i，like a
    loop so。let me do that let me actually get rid，of two of these lines of code let
    me go。up here and do something like for，int i get zero i less than three for now。i
    plus plus let me open up this for loop，code，and instead of scores bracket zero
    this。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 字面上 resort 到复制粘贴，这里有种模式我，像一个循环。所以让我这样做，实际上去掉这两行代码，去上面做些，像 for int i = 0; i <
    3; 现在。i++ 让我打开这个 for 循环，代码，而不是 scores[0]。
- en: is where arrays get really powerful，array，that is to go to a specific location。what
    do i want to use for my variable，well i would think i here so now i've。whittled
    my lines of code down from all，three triplicate three nearly identical。lines into
    just one really inside of a，loop that's gonna do the same thing for，too。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是数组变得真正强大的地方，数组，可以去特定位置。我想用什么作为我的变量，嗯我会认为我在这里，所以现在我把代码行从三行几乎相同的三份减少到一行，里面有一个循环，它将为两个做同样的事情。
- en: i don't have to hard code these threes，all over the place maybe i could do，something
    like this，get。scores，and i could literally ask the human from，there，variable。total
    in multiple places so that now i'm，though，going to be，a little more i need to
    exert a little。more effort here on line 14 because now，i can't hard code，score
    0 1 and 2 because if the number，that。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我不需要到处硬编码这些三，也许我可以做一些像这样获取分数的事情，我可以从那里直接询问人类，变量。在多个地方使用总数，因此现在我需要在第14行稍微努力一下，因为现在我不能硬编码分数0、1和2，因为如果数字。
- en: i need to do more addition if it's fewer，than that i need to do less addition。so
    i think we've introduced a bug but we，can fix that but let me propose for just。a
    moment let's not make it dynamic，harder，let's at least introduce one other，features
    here first。i'm going to go ah**d up here and define，a new feature of c today。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果少于这个我需要做更多的加法，如果超过这个我需要做更少的加法。所以我想我们引入了一个错误，但我们可以修复它。不过让我先提议一下，不要让它变得动态，先引入另一个功能。我要在这里定义今天C语言的新特性。
- en: which is known as a constant if i know，in advance that i want to declare。a number
    that i want to use again and，again and again，without copying and pasting literally，constant。int
    via const int。![](img/110ed059845cb3216569ef9efb94f426_3.png)
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我事先知道我想声明一个数字，而我想多次使用，而不是逐字复制粘贴，这就是常量。通过`const int`声明。![](img/110ed059845cb3216569ef9efb94f426_3.png)
- en: total equals three this declares what's，called a constant in programming。![](img/110ed059845cb3216569ef9efb94f426_5.png)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 总数等于三，这声明了在编程中所谓的常量。![](img/110ed059845cb3216569ef9efb94f426_5.png)
- en: which is a feature of many languages，whereby you declare a variable of sorts。whose
    value can never change once you，set it you cannot change it and that's a。good
    thing because one，it shouldn't change in the context of，this program and two just
    in case you。the human are fallible，you don't want to accidentally change it，when
    you don't intend so this is a。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这是许多语言的一个特性，通过它你可以声明某种变量，一旦设置值就永远不会改变。你不能改变它，这很好，因为首先，它在这个程序的上下文中不应该改变，其次，以防你这个人犯错，你不想在没有意图的情况下意外改变它。
- en: feature of a programming language that，sort of protects you，from yourself so
    now i can sort of take。an amalgam of my instincts and neenas，and use this variable
    total and actually。another convention when declaring，constants is to capitalize
    them。just to make visually clear that there's，this variable，i'm going to use total
    here and here。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言的一个特性，可以在某种程度上保护你免受自身的影响，因此现在我可以将我的直觉和妮娜的想法结合起来，使用这个变量总数，实际上，在声明常量时还有另一个约定是将它们大写，以清晰地表明这个变量。我将在这里和这里使用总数。
- en: and here you didn't see that，turns out it's a convention when you。want to draw
    attention to a constant，to capitalize it in all caps so i'm。going to change this
    to total and i'm，going to use that value，here and here and also down here。but
    i'm afraid both nina and i have a，little bit of cleanup here to do in that，scores
    one。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里你没看到，这其实是一种约定，当你想引起对常量的注意时，使用全大写字母，所以我将把这个改为总数，我会在这里、这里以及这里使用这个值。但我担心妮娜和我在那一部分的分数上还有一点清理工作要做。
- en: and scores two and i want to add a，changing number of values together so。you
    know what i've got an idea，let me go ah**d and create a function。that's going
    to compute an average，for me so if i want to create my own。function that computes
    an average i want，it to return a floating point value just。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 这是两个分数，我想把一系列变化的数值相加。所以你知道我有一个主意，让我去创建一个函数，来计算一个平均值。如果我想创建自己的计算平均值的函数，我希望它返回一个浮点值。
- en: so that we don't re a truncate，any math i'm going to call this average，and the
    input。to this function is going to be the，length of an array，and the actual array
    and this is the。last piece of funky syntax for now，it turns out that when you
    want to pass，an array。as input to a custom function，you literally use those squ*re
    brackets。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 为了避免截断任何数学运算，我将这个函数命名为 average，输入参数将是数组的长度和实际数组，而这就是目前最后一段有趣的语法，结果表明，当你想将数组作为输入传递给自定义函数时，你确实使用那些方括号。
- en: again but you don't specify the size and，the upside of this，is that your function
    then can support。an array that's got，one space in it two spaces three a，hundred
    it's more dynamic this way。so how do i compute an average here i，think，what was
    suggested earlier makes sense，let me do。int sum equals 0 because how do you，compute
    the average of a bunch of。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，你不指定大小，而这种做法的好处是你的函数可以支持一个空间、两个空间、三个空间，甚至一百个空间，以这种方式更具动态性。那么我如何在这里计算平均值呢？我认为，之前建议的方法是合理的，让我做
    int sum 等于 0，因为你如何计算一堆的平均值。
- en: numbers well you add them all together，and you divide by the total。well let's
    see how i might do that let，me do for int i get 0，i'm。being passed as this custom
    function the，length of the array，iterate from i。up to length and then i plus plus
    on，each iteration，and then on each iteration i think i。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 数字嘛，你把它们加在一起，然后除以总数。好吧，让我们看看我可能怎么做，让我从 int i 等于 0 开始，我被作为这个自定义函数传递数组的长度，从 i
    迭代到长度，然后每次迭代后 i 加一。
- en: want to do sum，plus whatever is in the arrays，ith location so to speak so again
    this。is shorthand notation per last week，for this sum equals whatever sum is。plus
    whatever is in location i，of the array and once i've done all of。that i think
    what i can do is return，the total sum divided by the length of，the array。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 想要计算总和，加上数组中第 i 位置的内容，可以说这是简写符号，上周提到的，这个总和等于总和加上数组中第 i 位置的内容，一旦我完成了所有这些，我认为我可以返回总和除以数组的长度。
- en: and what i like about this whole，approach assuming my code is correct and。i
    don't think it is just yet，notice what i can do back up in main now。i can abstract
    away the notion of，calculating an average。![](img/110ed059845cb3216569ef9efb94f426_7.png)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢这种方法，假设我的代码是正确的，尽管我认为现在还不完全正确，注意我现在可以在主函数中抽象出计算平均值的概念。![](img/110ed059845cb3216569ef9efb94f426_7.png)
- en: with this line of code here so what did，i just do a lot's going on but let's。focus
    for a moment on line 14，here on line 14 i'm still just printing，the average of
    some floating。point placeholder but what i'm passing，as input now，is this function
    average whose inputs。![](img/110ed059845cb3216569ef9efb94f426_9.png)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这行代码。那么我刚刚做了什么？发生了很多事情，但让我们暂时关注第 14 行，在第 14 行，我仍然只是在打印某个浮点占位符的平均值，但我现在作为输入传递的是这个名为
    average 的函数，其输入。![](img/110ed059845cb3216569ef9efb94f426_9.png)
- en: are going to be total，which again is just this constant at the。very top oh sorry
    i goofed i should have，capitalized it，which is just that constant at the very。again，is
    just this array of all of those，scores，meanwhile in the custom function in the。context
    of the，custom function notice that the names of，the inputs to a function。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: total 将会是，这个常量在最上面，哦抱歉，我搞错了，我应该把它大写，这就是在最上面的那个常量，再次强调，这只是所有这些分数的数组，同时在自定义函数中，在自定义函数的上下文中，注意函数的输入名称。
- en: do not need to match the names of the，variables being passed into that。function
    so even though in main，they're called total and scores in the。context of my custom
    function average i，can call them x and y，array。i don't know what the array is
    but it's，an array of ints and i don't know how。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 变量的名称不需要与传递到那个函数中的变量名称匹配，所以即使在主函数中它们被称为 total 和 scores，在我的自定义函数 average 的上下文中，我可以将它们称为
    x 和 y，array。我不知道这个数组是什么，但它是一个整数数组，我不知道如何处理。
- en: long it is but that value，that answer is going to be in length but，there's still
    a bug here。there's still a bug and if we ignore，maine for a moment this is a subtle
    one。does anyone see a mistake that i've made，past，two weeks what mistake subtle
    have i。made here with my code，this one's a little more subtle but the，goal is
    to compute the average of a。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 它的长度是多少，但那个值，答案将会是长度，但这里仍然有一个 bug。这里仍然有一个 bug，如果我们暂时忽略主函数，这个 bug 是微妙的。有没有人看到我过去两周在代码中犯的错误？这个错误有点微妙，但目标是计算一个。
- en: whole bunch of integers，and return the answer nicholas，within the。function i've
    declared the variable，within the，function that's okay because i've，you mean，function。and
    i'm using some inside of the，outermost curly braces that it that was。defined and
    so that's okay that's okay，let's take another thought here uh，olivia。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一堆整数，并返回答案尼古拉斯，在函数中我声明了变量，函数内部声明变量是可以的，因为我，指的是函数。我在外部大括号内使用了一些内容，那是定义的，所以没问题，没问题，让我们再想想这里，奥利维亚。
- en: uh the return types of flow but you're，returning an n divided by an end。perfect
    so i again made that same stupid，mistake that's just going to get more。obvious
    as time goes on，that if i want to do floating point，arithmetic just like the aryan
    rocket。discussion the patriot missile like，these kinds of details matter in a。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 返回类型是浮动，但你正在返回n除以n。完美，所以我再次犯了同样的愚蠢错误，随着时间的推移，这只会变得更加明显，如果我想进行浮点运算，就像亚利安火箭的讨论，爱国者导弹，这些细节在这里很重要。
- en: program now it's correct because i'm，actually going to ensure，is much less。important
    than those real world contexts，just computing some average of scores。i'm not going
    to accidentally truncate，any of my values，so again in the context here of this。function
    average is just applying some，variable，i've got a loop and i'm doing some。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 程序现在是正确的，因为我，实际上会确保，重要性远低于这些真实世界的上下文，只是在计算一些分数的平均值。我不会意外截断任何我的值，所以在这个上下文中，函数平均值只是应用了一些变量，我有一个循环，并且正在进行一些操作。
- en: floating point arithmetic ultimately，takes two，inputs one is length and one
    is the。length one is the array itself，float，so that my output is also well defined。but
    what's nice about this，again you can think of these functions，as abstractions
    now。i don't need to worry about how i，calculate an average because i now have，this
    helper function。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点运算最终需要两个输入，一个是长度，另一个是数组本身，float，所以我的输出也会被很好地定义。但有趣的是，你可以把这些函数视为抽象。我不需要担心如何计算平均值，因为我现在有这个辅助函数。
- en: a custom function i wrote that can help，me answer that question。and here notice
    that the output of this，average function，will become an input into printf。and
    the only other feature i've added to，the mix here now are not only arrays。which
    allow us to create，multiple variables a variable number of，variables if you will。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我写了一个自定义函数，可以帮助我回答这个问题。在这里注意，这个平均函数的输出将作为printf的输入。还有我添加到这里的唯一其他特性就是数组，这使我们能够创建多个变量，任意数量的变量。
- en: but also this notion of a constant if i，find myself using the same number again，and
    again and again。this constant can help me keep my code，clean and notice this if
    next year maybe，four tests，boom。i'm done a well-designed program does，not require
    that you go reading through，and numbers there。changing it in one place can allow
    me to，improve this program make it support，four tests next year。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个常量的概念，如果我发现自己一次又一次地使用相同的数字，这个常量可以帮助我保持代码整洁，注意这一点，如果明年可能有四次测试，轰，我就完成了。一个设计良好的程序不需要你逐行阅读并修改数字。在一个地方进行更改可以让我改进这个程序，使其明年支持四次测试。
- en: uh instead of just the three but better，still would be，uh to take i think nina's
    advice before。which was to maybe just use get int and，ask the human，for how many
    tests they actually have，that too。would work well let me pause here to see，if
    there's any questions then。about arrays or about constants，outputs，in this way
    uh yeah，i had a question about um the use of a。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是仅仅三个，但更好的是，嗯，考虑一下妮娜之前的建议。那就是可能使用get int，询问用户他们实际有多少次测试，这样也能很好地工作。让我在这里暂停一下，看看是否有关于数组或常量输出的问题，嗯，是的，我有一个关于使用的疑问。
- en: float and why，like the use of one flow um causes like，the whole output to be
    afloat。why does that yeah really good question，there is，one or more floating point
    values。involved in a mathematical formula，it is going to use that data type。which
    is the more powerful one if you，will rather than risk，truncating anything so you
    just need one。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动和原因，比如使用一个流量使得整个输出变得浮动。为什么会这样，是个很好的问题，这涉及到一个或多个浮点值。参与了一个数学公式，它会使用这种数据类型。这个数据类型更强大，如果你愿意，而不是冒着截断的风险，所以你只需要一个。
- en: float to be participating in the，the formula in question good question，other
    questions on arrays or。constants or this passing around，i had a question about
    the declaring of，the。the array scores when you declared it in，main，uh you said
    int scores and。in the brackets you have total can you，declare it without，the total。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 浮动参与其中，所涉及的公式是个好问题，关于数组或常量或传递这个，我有一个关于声明的问题，关于。在主函数中声明的数组分数，你说int scores，而在括号中你有总数，可以在没有总数的情况下声明吗？
- en: really good question brackets short，answer no so the way i did it is the way。you
    do have to do it and in fact if i，highlight what i did here。now it currently says
    total if i get rid，version，where i said something like three and。three and three，uh
    three over here uh you cannot do this，proposing。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 真的很好问题，括号的短答案是否定的，我所做的方式是你必须这样做，事实上，如果我突出显示我在这里做的事情。现在它目前显示为总数，如果我去掉版本，假设我说类似三和三，呃这里的三，你不能这样做，建议。
- en: the computer needs to know how big the，array is when you are creating it。the
    exception to that is that when，you're passing an array from one，function to another。you
    do not need to tell that custom，function how big the array is because。again you
    don't know in advance you're，function，whose purpose in life is to take any uh，length，that。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建数组时，计算机需要知道数组的大小。例外情况是，当你从一个函数传递数组到另一个函数时。你不需要告诉那个自定义函数数组有多大，因为。再说一次，你不能提前知道你的函数，存在的目的是接收任何长度。
- en: matches the size of that thing and those，of you as an aside who have programmed。before
    especially in java，unlike in java and certain other，languages the length of an
    array is not。built into the array，itself if you do not pass in the length，of an
    array to another function。there is no way to determine how big the，array is this
    is different。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 与该东西的大小相匹配，作为旁注，对于那些以前编程的人，尤其是在Java中，不同于Java和某些其他语言，数组的长度不是内置在数组本身中。如果你不将数组的长度传递给另一个函数，就无法确定数组的大小，这点不同。
- en: from java and other languages where you。![](img/110ed059845cb3216569ef9efb94f426_11.png)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 来自Java和其他语言的！[](img/110ed059845cb3216569ef9efb94f426_11.png)
- en: can ask the array in some sense，what is its length in c you have to pass，both
    the array itself。![](img/110ed059845cb3216569ef9efb94f426_13.png)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在某种意义上询问数组，它的长度，在C语言中你必须分别传递数组本身和它的长度！[](img/110ed059845cb3216569ef9efb94f426_13.png)
- en: '![](img/110ed059845cb3216569ef9efb94f426_14.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/110ed059845cb3216569ef9efb94f426_14.png)'
- en: and its length around separately cena，oh uh hello i just i'm still a little，bit
    confused about。when does it go，when is it when does it void in the，parentheses
    and。when do we uh define the ends because，like as i remember when we did the get
    a。negative number or get a positive number，an input，i'm just not completely sold
    on that。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，呃你好，我还是有点困惑。什么时候括号里是void，我们什么时候定义结尾，因为，像我记得我们做获取负数或获取正数输入时，我对这一点并不是完全信服。
- en: sure good question let me go ah**d and，open up that previous example which was。a
    little buggy but it has the right，in function，from before and as cena you know
    it was。void as input，so there was one comment you made where，it still took input
    that was not so so。get negative in did not take any input，and case in point if
    we scroll。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，很好的问题，让我去啊**d并打开那个之前的示例，它有点错误，但它包含之前的正确功能，正如你所知，它的输入是void，所以你提到的一个评论是，它仍然接受不必要的输入，因此get
    negative没有接受任何输入，正如案例所示，如果我们滚动。
- en: up to main notice that when i called it，on line 10，i said get a negative in
    open。parenthesis close parenthesis with no，inputs inside of those parentheses
    so。this keyword void which we've seen a few，times now last week and this week。is
    just an explicit keyword in c that，says do not put anything here。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意当我在第10行调用它时，我说get a negative in，打开括号关闭括号，括号内没有输入。因此，这个关键字void，之前我们看到过几次，上周和这周，只是在C语言中一个明确的关键字，表示这里不要放任何东西。
- en: which is to say it would be incorrect，for me up here，to do something like this
    like to pass。in a number or to pass in a prompt or，anything inside of those parentheses
    the。fact that this function get negative，in takes void as its input means it does。not
    take any inputs whatsoever，that's fine forget negative in the name。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我在这里做这样的事情是错误的，比如传入一个数字或传入一个提示，或者任何在那些括号内的东西。这个函数get negative中输入void意味着它根本不接受任何输入，这没问题，忘记负数这个名字吧。
- en: of the function says it all like there's，no need to parameterize，or customize
    the behavior of get。negative into itself you just want to，get a negative int，just
    wrote，average this function does make。you can't just say，give me the average like
    average of what，like it needs to take input so it's to。answer that question for
    you and the，of numbers，and the length of that array so you can。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 函数的说明一切都在这里，没有必要对`get`的行为进行参数化或自定义。你只想获取一个负整数，刚刚写的`average`这个函数确实有用。你不能仅仅说，给我平均值，平均什么呢？它需要输入，以便回答你的问题，和数字的长度，这样你就可以。
- en: do the arithmetic，and so cena hopefully that helps make，the distinction you
    use void when you。don't want to take，input and you actually specify a comma，separated
    list。of arguments when you do want to take，input，all right so we focused up until
    now on。integers really but let's let's simplify，a little bit because it turns
    out。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 做一些算术，希望这有助于区分，当你不想接受输入时使用void，而当你确实想接受输入时，你需要明确指定一个以逗号分隔的参数列表。好吧，所以到目前为止我们主要关注整数，但让我们稍微简化一下，因为结果显示。
- en: that arrays and memory actually，intersect to create some very familiar，namely，suppose
    we。we simplify further no more integers no，for a moment，with a single character
    and write a。program that just creates，like a single brick from like that mario，game
    let me go ah**d and create a。program here。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 数组和内存实际上相交，创造出一些非常熟悉的东西，假设我们。我们进一步简化，不再使用整数，暂时只用一个字符，编写一个程序，只创建一个像马里奥游戏中的单砖，让我去啊**d并创建一个程序。
- en: '![](img/110ed059845cb3216569ef9efb94f426_16.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/110ed059845cb3216569ef9efb94f426_16.png)'
- en: called brick dot c and in brick dot c，i'm just going to include standard io。h。int
    main void and more on this void a，little later today，char c gets quote unquote
    hash。and then down here let me just go ah**d，and print very simply，a placeholder
    percent c backslash n。and then output c so this is a pretty，stupid program its
    sole purpose in life。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 叫做brick.c，在brick.c中，我只会包含标准io.h。int main void，稍后会详细说明这个void，char c获取“#”。然后在这里，让我去啊**d，简单地打印一个占位符%
    c，换行。然后输出c，这个程序相当简单，它的唯一目的是。
- en: is to print a single hash as you might，have in a mario pyramid。of height one
    so very simple let me go，ahead and make brick，it seems to compile okay let me
    run it。with dot slash brick and voila we get a，a moment，exactly what just happened
    here。and what actually was going on，underneath the hood well you know what。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 打印一个单独的哈希，就像你在马里奥金字塔中可能会有的那样，高度为1，非常简单，让我去创建brick，似乎编译没问题，让我用./brick运行它，瞧，我们得到了一个，瞬间，究竟发生了什么，这背后实际上发生了什么。
- en: i'm kind of curious i remember from last，week we could cast values from one
    thing，to another。what if i got a little curious and i，didn't print out c，which
    is this hash character as percent。c which is a placeholder for，a character what
    if i got a little crazy，and said percent i。i think i could probably coerce this，char，decimal，equivalent
    i could see its actual ascii。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，我有点好奇，我记得上周我们可以将值从一种转换为另一种。如果我稍微好奇一点，没有打印出c，也就是这个哈希字符，作为% c占位符。如果我稍微疯狂一点，说%
    i。我想我可能可以强制这个char的十进制等价，我可以看到它的实际ASCII。
- en: code so let me rebuild this，brick，and what number might we see last week，we
    saw 72 a lot。73 and 33 for high this week，you can see 35。it turns out is the code。for
    an uh an ascii hash and you can see。![](img/110ed059845cb3216569ef9efb94f426_18.png)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 代码，所以让我重建这个brick，上周我们看到的数字是72和73，还有33。这周你可以看到35。事实证明，这是ASCII哈希的代码，你可以看到。![](img/110ed059845cb3216569ef9efb94f426_18.png)
- en: this for instance，if i go to a website like let's go to，ascii，chart。com and
    sure enough if i go to the。![](img/110ed059845cb3216569ef9efb94f426_20.png)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，如果我去一个网站，比如ascii chart.com，果然如果我去这个。![](img/110ed059845cb3216569ef9efb94f426_20.png)
- en: same chart from last week，and i look for the hash symbol here its，ascii code
    is 35。and it turns out in c，if it's pretty straightforward to the。computer that
    yes if this is a character，i know i can convert it to an，you can instead。implicitly
    cast one data type to another，just from context here so printf and c。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 上周的相同图表，我在这里寻找哈希符号，它的ASCII码是35。结果在C语言中，如果这是一个字符，计算机很清楚，我知道我可以将其转换为，你可以替代性地。隐式转换一种数据类型为另一种，仅仅通过上下文，所以printf和C。
- en: are smart enough here to know okay，you you're giving me a character in the，form
    of variable c。percent i。![](img/110ed059845cb3216569ef9efb94f426_22.png)
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这里足够聪明，知道好的，你给我的是变量c形式的字符。% i。![](img/110ed059845cb3216569ef9efb94f426_22.png)
- en: an integer that's going to be okay and，indeed i still see the number 35。so。that's
    just simple casting，but let's now put this into the context。![](img/110ed059845cb3216569ef9efb94f426_24.png)
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: laid out，well quite simply if this is my memory，numbers，storing。uh is just being
    stored in one of these，because again，a char is a single byte。but equivalently
    35 is the number that's，actually being stored there。but i wonder i wonder last
    week we spent，quite a bit of time storing not just，hi。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: and other expressions and so what if i，were to do something like this let me
    go，back to my code。and let me not quite yet practice what i，just preached and
    let me give myself。three variables this time，c1 c2 and c3 and let me deliberately，store
    in those three variables。h i in all caps followed by an，exclamation point and
    per，last week when you're dealing with。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: individual characters，you're dealing with，multiple characters otherwise known
    last，week as strings。use double quotes but that's why i'm，using single quotes
    because we're only，playing at the moment。with single characters now let me go，ahead
    and print these，percent c，percent c and output c1 c2 c3。so this is perhaps the
    stupidest way you，could print out a full word，storing。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: every single character in its own，variable but so be it，i'm just using these
    first primitive。percent c，as my placeholder i'm printing out these，characters
    so let me do make brick now。compile is okay and if i do dot slash，you know i really
    should have renamed。this file but we'll rename it in a。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/110ed059845cb3216569ef9efb94f426_26.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: moment dot slash brick hi，and let me go ah**d and do this let me，go ah**d now
    and actually。close the file and recall from last week，if i want to rename my file
    from brick，brick。c。let's say to high。c i can use the move，command mv。![](img/110ed059845cb3216569ef9efb94f426_28.png)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: and now if i open up this file sure，enough there's high。c，and i've fixed my
    renaming mistake。all right so again if i now do make high，and i do dot slash high。voila
    i see the high but again this is，kind of a stupid way of，implementing a string
    but let's still。look underneath the hood let me go ah**d，and get curious let me
    print out。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: percent i percent i and percent i and，let me include spaces this time just so，i
    can see。uh separation between the numbers let me，make high again，dot slash high
    okay there's that 72。there's that 73。![](img/110ed059845cb3216569ef9efb94f426_30.png)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: and there's that 33 from last week so，that's interesting too so what's going。![](img/110ed059845cb3216569ef9efb94f426_32.png)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: memory，well when i'm storing these three，characters now i'm just storing them。in
    three different boxes so c1 c2 c3，and when you look at it collectively it。kind
    of looks like a whole word，even though it's of course just these。individual characters
    so what's，underneath the hood of course though is。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 72 73 33 or equivalently in binary，just this so the story is the same even。though
    we're now talking about chars，instead of integers but what happens，when i do this。what
    happens when i do string s gets。![](img/110ed059845cb3216569ef9efb94f426_34.png)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`72 73 33`或者在二进制中相同，仅此而已，因此这个故事是相同的，即使我们现在在谈论字符，而不是整数，但当我这样做时会发生什么？当我执行`string
    s`时会发生什么？`![](img/110ed059845cb3216569ef9efb94f426_34.png)`'
- en: quote unquote high，using double quotes well let's change，this program accordingly。let
    me go ah**d and do what we would，have done last week string i'll call it。s just
    for s for string high in all caps，i can simplify this next line let me use。percent
    s as a placeholder，for a string s let me go ah**d and，recompile this，this make。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**高**，用双引号表示，好吧，让我们相应地更改这个程序。让我去**做**我们上周会做的，字符串我将其称为`s`，只是为了`S`代表字符串，全部大写，我可以简化下一行，让我使用`%s`作为字符串`s`的占位符，接下来让我去**重新编译**，这使得。'
- en: hi and huh five errors my god like eight，lines of code and five errors that's
    not，week。always scroll up to the very first error，because it might just be some
    annoying。cascading effect where，the compiler got confused use of。![](img/110ed059845cb3216569ef9efb94f426_36.png)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`hi`和`huh`有五个错误，我的天哪，像八行代码和五个错误，这不是**好事**。总是向上滚动到第一个错误，因为这可能是一些恼人的**级联效应**，导致编译器感到困惑。使用`![](img/110ed059845cb3216569ef9efb94f426_36.png)`。'
- en: standard，in i didn't but this is because string，it turns out does not technically
    exist。it turns out that this word string that，one，doesn't actually exist in c
    it's a bit。of a white lie or a bit of a feature if，you will of cs50s library。and
    we'll take this training wheel off，next week but let's for now reveal what。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 标准，我没有，但这是因为字符串，结果显示在技术上并不存在。结果是，这个字符串一词，实际上在C中并不存在，这是一点**白色谎言**，或是cs50的库的一个特性。如果你愿意，我们下周将去掉这个训练轮，但现在让我们揭示什么。
- en: a string really is because string is a，term of art every programming language，has
    strings。even if it doesn't technically have a，data type called string，called string。we
    have added this type to c by way of，cs50s library but now if i do make high。notice
    that my code compiles okay and if，i do dot slash hi，enter voila i still see hi
    which is what。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串实际上是因为字符串是每种编程语言都有的**艺术术语**，即使它在技术上并没有一个叫做字符串的**数据类型**。我们通过**cs50的库**将这个类型添加到C中，但现在如果我创建一个高。注意我的代码可以正常编译，如果我输入`./hi`，然后按回车，哇，我仍然看到高，这就是。
- en: i would have seen last week as well，and if we depict this in the computer's，memory
    because。hi is three letters it's kind of like，saying well give me three boxes。and
    let me call this string s so this，feels like a reasonable，artist rendition of
    what s is if it's。storing a three-letter word like hi，but any time we have sequences
    of，characters like this。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我在上周也见过，如果我们在计算机的**内存**中描述这个，因为`hi`是三个字母，这就有点像说，给我三个盒子。让我称这个字符串为`s`，所以这感觉像是一个合理的艺术表现，如果它存储一个像`hi`这样的三字母单词，但每当我们有这样的字符序列时。
- en: i feel like we're now seeing the，capability of a proper programming。language
    we introduced a little bit ago，the notion of a string。so maybe could someone redefine
    string，of today's，nomenclature like what is a string。there's an example of one，high
    taking up three boxes，but how did we cs50 maybe implement。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我觉得我们现在看到了一个合适的编程语言的**能力**。我们稍早前引入了字符串的概念。所以，也许可以有人重新定义今天的**命名法**中的字符串，比如什么是字符串。这里有一个例子，`high`占用了三个盒子，但我们是如何实现的。
- en: string underneath the hood，uh well it's an array of characters and。integers
    well if integers are used in，basically，single characters perfect if we now have。the
    ability to express，very nicely done tucker if we now have，the ability to represent。sequences
    of things integers for，instance like scores，well it stands to reason that we can。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串的本质，呃，它是一个字符的数组和整数。好吧，如果整数用于基本的单字符，那么这就是完美的。如果我们现在有能力表达，做得很好，塔克。如果我们现在有能力表示，事物的序列，例如分数，那么可以推理出我们可以。
- en: take another primitive a very basic，data type like a char and if we want to，english
    words。well let's just think of a string really，as an array，of characters an array
    of chars and。indeed that's exactly what，a string actually is so this thing here，high
    exclamation point。technically speaking is an array called，s and this is s bracket
    zero this is s。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 取另一个基本的**数据类型**，例如`char`，如果我们想要英语单词。那么我们不妨将字符串视为字符的**数组**，即字符的数组。实际上，这正是字符串的本质，所以这里的东西，`high!`
    从技术上讲是一个叫做`s`的数组，而这是`s`的第一个元素，这就是`s`。
- en: bracket one this is s bracket，two it's just an array called s now we。didn't
    use the word array last week，because it's not as familiar as the，instance。but
    a string is apparently just an array，and if it's an array that means we can，access
    if we want。array，from today，but it turns out there's something a，little special。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 括号一，这就是 s 括号二，这只是一个名为 s 的数组。我们上周没有使用“数组”这个词，因为它没有“实例”那么熟悉。但字符串显然只是一个数组，如果它是数组，那么我们可以访问，如果我们想的话。从今天开始，结果是有一些特殊的东西。
- en: about strings as they're implemented，recall in our example，involving scores
    the only way we knew。how long that array was was because i，had a second variable
    called，total。number of integers in that array，that is to say in our scores example
    not，also kept，array。with two variables however up until now，every time you and
    i have used the，printf function。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 关于字符串的实现，回想一下我们涉及分数的例子，我们知道那个数组的长度是因为我有第二个变量叫做总数。也就是说，在我们的分数示例中，并没有同时保存数组。虽然直到现在，每当你和我使用
    printf 函数时。
- en: and we have passed to that printf，function a string like，s we have only provided
    printf。with the string itself or logically we，have only provided printf with，somehow。printf
    is magically figuring out，how long the string is after all when。printf prints
    the value of s it is，printing h i，exclamation point and that's it it's not。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经传递给 printf 函数一个像 s 的字符串，我们只提供了 printf 字符串本身，或者从逻辑上讲，我们仅仅提供了 printf 某种方式。printf
    神奇地找出字符串的长度，毕竟，当 printf 打印 s 的值时，它打印的是 h i，感叹号，仅此而已。
- en: going and printing four characters or，five or twenty right it stands to reason。that
    there's other stuff in your，computer's memory if you've got other。variables or
    other programs running，yet printf seems to be smart enough to，know given an array。how
    long the array is because quite，simply it only prints，out that single word so
    how then。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你打印四个字符、五个或二十个，那么很明显，在你的计算机内存中还有其他东西，如果你有其他变量或其他程序在运行，然而 printf 似乎足够聪明，知道给定一个数组，数组的长度。因为很简单，它只打印那个单一的单词，那么，如何呢？
- en: in memory if，all a string is as a sequence of，characters well it turns out，is
    this one h。i exclamation point technically a string，implemented underneath the
    hood uses。four bytes it uses four bytes it uses a，fourth byte，to be initialized
    to what we would。describe as backslash zero which is a，weird way of describing
    it，but this just represents a special。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在内存中，如果一个字符串仅仅是字符的序列，事实证明，只有一个 h i 感叹号。从技术上讲，一个字符串在内部实现使用四个字节，它使用四个字节，并使用第四个字节来初始化我们所称的反斜杠零，这是一种奇怪的描述方式，但这仅仅表示一个特殊的。
- en: character otherwise known as the null，that，represents the end of a string so
    that。is to say when you still create a string，quote unquote with double quotes
    h i，exclamation point。yes the string is length three but，you're wasting or spending。four
    total bytes on it why because this，is a clue to the computer，string。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 字符通常被称为 null，表示字符串的结束。也就是说，当你仍然创建一个字符串，用双引号引起来，比如 h i，感叹号。是的，这个字符串的长度是三，但你实际上浪费或使用了四个字节，为什么呢？因为这是给计算机的提示，字符串。
- en: maybe begins it is not sufficient to，just start printing characters。inside of
    printf one at a time left to，right there needs to be the sort of。equivalent of
    a stop sign at the end of，the string saying，that's it for this string well what
    are。back to decimal，72 73 33 that fancy backslash zero was，just the way of saying
    in。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 也许开始的时候，仅仅逐个打印字符是不够的。在 printf 中，从左到右需要有类似的停止标志在字符串的末尾，表示这就是这个字符串的结束。那么，回到十进制，72
    73 33，那奇妙的反斜杠零仅仅是表示。
- en: character form it's zero more，specifically，squ*re，so to store a string the computer，extra
    byte。all zero bits otherwise written as，literally，the value zero so this thing
    otherwise。colloquially known as，null is just a special character and we，to，in
    just a moment if i go back to my。ascii chart。com from before notice，number zero
    is known as null n-u-l in，all caps。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 字符形式是零，更具体地说，*平方*，所以为了存储一个字符串，计算机需要额外的字节。所有的零位可以写成字面上的值零，因此这个东西通常被称为 null 只是一个特殊字符，我们将在片刻后，如果我回到我的
    ASCII 表。
- en: all right so with that said what is，powerful then about strings once we have，this
    capability well。let me go ah**d and do this let me go，back into my code from a
    moment ago。and let me go ah**d and enhance this，little，curious as to what's going
    on you know。what i can do i bet what i can do here，in this version here is this
    you know。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 所以说，字符串的强大之处在哪里，一旦我们有了，这种能力。让我继续，回到刚才的代码。并让我继续，增强一下，我对发生的事情很，感兴趣。你知道，我可以在这里做的事情，我敢打赌。
- en: what if i want to print out all of these，characters of s，i can get a little
    curious again and。print out percent c，array，per today's syntax i can technically
    do，s bracket 0。s bracket 1 s bracket 2，and then if i save this recompile my，code
    with make hi。okay dot slash high i still see high，but you know what let me get
    a little。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我想打印出所有这些，字符的s，我可以再好奇一点，打印出百分c，数组，按照今天的语法，我技术上可以做，s括号0。s括号1 s括号2，然后如果我保存这个，重新编译我的，代码make
    hi。好的，dot slash high我仍然看到高，但你知道，让我再稍微。
- en: more curious let me use percent i，so i can actually see those ascii codes，high。dot
    slash high there's the 7273，33 now let me get even more curious let，me print a
    fourth value。like this here s bracket 3，which is the fourth location mind you
    so，if i now do make hi。and dot slash hi voila now you see zero，and what this hints
    at is actually a。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 更好奇了，让我用百分号i，实际上可以看到那些ascii代码，高。dot slash high，那里有7273，33，现在让我再好奇一下，打印出第四个值。像这样，s括号3，也就是第四个位置，记住。所以如果我现在做make
    hi。和dot slash hi，瞧，现在你看到零，这暗示了实际上一个。
- en: very dangerous feature of，c you know suppose i'm curious at seeing，what's beyond
    that。![](img/110ed059845cb3216569ef9efb94f426_38.png)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 非常危险的特性，假设我好奇想看看，那里有什么。![](img/110ed059845cb3216569ef9efb94f426_38.png)
- en: i could technically do s bracket four，to my picture。![](img/110ed059845cb3216569ef9efb94f426_40.png)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我技术上可以做s括号四，给我的图。![](img/110ed059845cb3216569ef9efb94f426_40.png)
- en: there really shouldn't be anything at，the fifth location at least not that i，know
    about just yet。but i can do it in c nothing's stopping，me so let me do make high。dot
    slash high and that's interesting，apparently there's the number 37 what is。![](img/110ed059845cb3216569ef9efb94f426_42.png)
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在第五个位置应该没有任何东西，至少我，暂时不知道。不过我可以用c来做，没什么能阻止我，所以让我来做高。dot slash high，这很有趣，显然有数字37，是什么呢。![](img/110ed059845cb3216569ef9efb94f426_42.png)
- en: the number 37 well let me go back to my，ascii chart。![](img/110ed059845cb3216569ef9efb94f426_44.png)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 数字37，让我回到我的，ascii图表。![](img/110ed059845cb3216569ef9efb94f426_44.png)
- en: and let me conclude that number 37 is a，percent sign so that's kind of weird，percent。now
    i'm kind of poking around the，computer's memory in places i shouldn't，be looking
    in some sense。in fact if i get really curious let's，look not at location 4 how
    about，location 40 like。way off into that picture make high，look at location，400
    recompile my code make，hi dot slash hi。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 让我总结一下，数字37是一个，百分号，这有点奇怪，百分。现在我有点在，计算机的内存里乱翻，某种意义上我不应该，查看的地方。事实上，如果我真的好奇，看看不是位置4，如何呢，位置40。像是深入那幅图，make
    high，看看位置，400，重新编译我的代码，make hi dot slash hi。
- en: '![](img/110ed059845cb3216569ef9efb94f426_46.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/110ed059845cb3216569ef9efb94f426_46.png)'
- en: and now it's zero again so this is，about c，you want，you're essentially just
    on the honor。system not to touch memory that doesn't，next week，are we going to
    start accidentally，you。and you'll see that it actually can，including，programs
    on your own mac and pc yet，another source。of common bugs but now that we have
    this，ability to store，strings as。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 现在又是零了，所以这和c有关，你想，你实际上只是在遵循，诚信系统，不去触碰不该碰的内存。下周，我们会不会开始不小心，触碰到。你会看到，这实际上可以，包括，自己mac和pc上的程序，又是另一个，常见bug的来源。但是现在我们有了，存储字符串的能力，作为。
- en: arrays well let's go ah**d and consider，how you might have multiple strings
    in a，store。two strings in a program let's call them，s and t respectively，another
    programmer convention if you。need two strings call the first one s，then the second
    one t，maybe i'm storing high then buy well。look like，well let's go let's do some
    digging high，as before is going to be stored here so。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 数组，所以让我们继续考虑，如何在一个程序中存储多个字符串。我们称它们为，s和t，分别。另一个程序员的惯例，如果你需要两个字符串，叫第一个为s，然后第二个为t，也许我存储高然后低。好吧，去吧，让我们再挖掘一下，高，像以前那样将存储在这里。
- en: this whole thing refers to s and it's，taking four bytes because the last one，is
    that special null。character that just is the stop sign，that demarcates the end
    of the string，b y e。exclamation point five bytes because i，need a fifth byte，to
    represent another null character and。this one deliberately wraps around，though
    again this is just an artist，rendition。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 整个事情都指向`s`，它占用了四个字节，因为最后一个是那个特殊的空字符，它是结束字符串`b y e`的停顿标志。感叹号五个字节，因为我需要第五个字节来表示另一个空字符，而这个字符故意回绕，尽管这只是一个艺术表现。
- en: there's not necessarily a grid in，reality bye exclamation point，backslash zero
    now represents t。so this is to say if i had a program，like this，started，poking
    around the computer's memory just。using the squ*re bracket notation，of b，or y
    or e just by looking a little past，the string s。so again as complicated as our
    programs，get all that's going on underneath the。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 现实中不一定有网格，感叹号`\0`现在表示`t`。所以这是说如果我有一个程序像这样，开始在计算机的内存中探测，只是使用方括号符号`b`、`y`或`e`，只是通过查看稍微超出字符串`s`。所以，尽管我们的程序多么复杂，底层发生的一切。
- en: hood is to just plop things down in，memory，in locations like these and so。now
    that we have this ability or maybe，this mental model for what's going on。inside
    of a computer we can consider，some of the features that you might want。to now
    use in programs that you write，so let me go ah**d here and whip up a。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 理论上，只需将东西放入内存中的这些位置。因此，现在我们有了这种能力，或者说对计算机内部发生的事情的心理模型，我们可以考虑一些特性，你可能想要在你编写的程序中使用，所以让我继续在这里快速写一个。
- en: quick program for instance，that goes ahead and let's say，prints out the total
    length of a string。let me go ah**d and do this i'm going to，go ah**d and create
    a new program here。![](img/110ed059845cb3216569ef9efb94f426_48.png)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 举个简单的程序，比如说，它会打印出字符串的总长度。让我继续做这个，我将继续创建一个新程序。![](img/110ed059845cb3216569ef9efb94f426_48.png)
- en: in cs50s ide and i'm going to call this，one string，dot c and i'm going to very
    quickly at。the top include as usual，cs50。h and i'm going to go ah**d and，include
    standardio。h。and i'm going to give myself int main，void and then in here i'm going
    to get，myself a string so。string s equals getstring and let me，just ask the human
    for some input，whatever it is。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在CS50的IDE中，我将把这个文件命名为`one_string.c`，然后我将快速在顶部包含像往常一样的`cs50.h`，并且我将继续包含`stdio.h`。然后我将给自己一个`int
    main(void)`，然后在这里我将得到一个字符串。所以`string s`等于`getstring`，让我问人类输入一些内容，不管是什么。
- en: then let me go ah**d and print out，literally the word output。![](img/110ed059845cb3216569ef9efb94f426_50.png)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 然后让我继续打印出字面上的单词输出。![](img/110ed059845cb3216569ef9efb94f426_50.png)
- en: just so that i can actually see the，result and then down here whoops。![](img/110ed059845cb3216569ef9efb94f426_52.png)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 只是为了我能实际看到结果，然后在这里，哎呀。![](img/110ed059845cb3216569ef9efb94f426_52.png)
- en: whoops sorry。![](img/110ed059845cb3216569ef9efb94f426_54.png)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀，抱歉。![](img/110ed059845cb3216569ef9efb94f426_54.png)
- en: down here let me go ah**d and print out，that string for，int i gets 0 i is less
    than。huh i don't know what the length of the，string is yet so let me just put
    a。question mark there which is not valid，code but we'll come back to this。i plus
    plus and then inside of the loop，i'm going to go ah**d and print out，every character。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里让我继续打印出这个字符串，对于`int i`，从0开始，`i`小于……哎，我还不知道字符串的长度，所以我就放一个问号在这里，这不是有效的代码，但我们会回来处理这个。`i++`，然后在循环内部，我将继续打印出每个字符。
- en: one at a time by using my new array，notation and then at the very end of，line。just
    to make sure the cursor is on its，own line so this is a complete program。that
    is now as of this week going to，treat a string as an array。ergo my syntax in line
    10 that's using，my new fancy squ*re bracket notation。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 一次一个地使用我的新数组符号，最后在行的末尾。只是为了确保光标在它自己的行上，所以这是一个完整的程序。现在从本周开始，这个程序将把字符串视为数组。因此我在第10行的语法使用了我新的花哨的方括号符号。
- en: but the only question i haven't answered，yet is this，string，how do i know when
    to stop well it turns。out thus far when we're using for loops，we've typically
    done something like just，count from。zero on up to some number this condition，though
    is any boolean expression i just。need to have a yes no，or a true false answer
    so you know what，i could do keep looping。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 但我还没有回答的唯一问题是这个字符串，我怎么知道何时停止呢？事实证明，迄今为止，当我们使用`for`循环时，我们通常做的事情就是从零开始数到某个数字，这个条件其实是任何布尔表达式，我只需要一个“是”或“否”或者“真”或“假”的答案。所以你知道，我可以继续循环。
- en: so long as character at location i。![](img/110ed059845cb3216569ef9efb94f426_56.png)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 只要位置`i`的字符。![](img/110ed059845cb3216569ef9efb94f426_56.png)
- en: and s does not equal backslash zero，so this is now definitely some new，syntax
    let me zoom in here。![](img/110ed059845cb3216569ef9efb94f426_58.png)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: s 不等于反斜杠零，所以这肯定是新的语法，让我在这里放大一下。![](img/110ed059845cb3216569ef9efb94f426_58.png)
- en: character in s，position i，in s bang equals so bang is how a，programmer pronounces
    exclamation point。because it's a little faster bang，equals means does not equal
    so this is。how you would do an equal sign with a，slash through it in math it's
    in code。uh exclamation point equal sign and then，notice this funkiness，character。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在 s 中的字符，位置 i，s 不等于，所以不等于是程序员发音感叹号的方式，因为稍微快一点，bang equals 表示不等于，所以这是你在数学中如何用斜杠表示等号，代码中是。呃，感叹号等于号，然后注意这种奇怪的字符。
- en: but it's in single quotes because again，it is by definition a character。and
    for reasons we'll get into another，time backslash zero，is how you express it just
    like。backslash n is kind of a weird escape，character for the new line，all zeros。so
    this is kind of a different for loop，i'm still starting at zero oh for i。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 但是它用单引号表示，因为它定义上是一个字符。出于我们以后会讨论的原因，反斜杠零是你表达它的方式，就像反斜杠 n 是一种奇怪的换行符，所有零。因此，这是一种不同的
    for 循环，我仍然从零开始。
- en: i'm still incrementing i as always but。![](img/110ed059845cb3216569ef9efb94f426_60.png)
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然像往常一样递增 i，但。![](img/110ed059845cb3216569ef9efb94f426_60.png)
- en: i'm now not checking for some，computer。![](img/110ed059845cb3216569ef9efb94f426_62.png)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在不检查某些计算机。![](img/110ed059845cb3216569ef9efb94f426_62.png)
- en: strings end，i only know that they end once i see，backslash zero。so when i now
    go down here and do make，string，it compiles okay dot slash string let me。type
    in something like，hello again，let me do it again buy in all caps and。the output
    is by so it's kind of a，useless program in that it's just。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串结束，我只知道它们在我看到反斜杠零时结束。因此，当我现在下去做 `make string` 时，它编译正常，点斜杠字符串让我输入像 hello again
    的内容，让我再试一次，买在全部大写时。输出是 by，所以这在某种程度上是个无用的程序，因为它只是。
- en: printing the same thing that i typed in，but i'm conditionally using this boolean。expression
    to decide whether or not to，keep printing characters now thankfully，this for me。it
    turns out there is a function called，stur lang，so i can literally just say well
    figure。out what the length of the string is，the function is called stir lang for。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 打印出我输入的相同内容，但我有条件地使用这个布尔表达式来决定是否继续打印字符。现在，感谢这个，对我来说，事实证明有一个叫做 `strlen` 的函数，所以我可以简单地说，算出字符串的长度，函数叫
    `strlen`。
- en: string length and it exists in a file，called not surprisingly perhaps string。h，string。h
    so now let me go ah**d down，here and do make，string compiles okay dot slash string，function。sterling
    that does exist in a library，via the header file string。h。already exists someone
    else wrote it but，how did they write it odds are they。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串长度存在于一个文件中，显然是字符串 h，字符串 h，所以现在让我下去做 `make string` 编译正常，点斜杠字符串，函数 `strlen`
    确实存在于通过头文件字符串 h 的库中。已经存在，其他人写的，但他们是怎么写的，可能他们。
- en: wrote the first version that i did，let me ask，a subtle question here this program
    is。correct it iterates over the whole，length of the string and it prints out，every
    character they're in。can anyone observe a poor，design decision in this function
    this，one's subtle。but there's something i don't like about，my for loop in particular
    and i'll，isolate it to line nine。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我写了我做的第一个版本，让我在这里问一个微妙的问题，这个程序是。它遍历整个字符串的长度，并打印出每个字符。有没有人观察到这个函数中的设计决策有问题，这一点很微妙。但我对我的
    for 循环特别不喜欢，我会将其隔离到第九行。
- en: i've not done something optimally on，line nine there's an opportunity，for better
    design any thoughts。any thoughts here on what i might do，better，uh yeah jonathan
    yeah，yeah to create basically another。variable for the stream length and to，sort
    of remember it，um，if you want to use like a different。value for the stream length
    or if it，might fluctuate or change，you want to just have a different。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我在第九行没有做到最优设计，有一个更好设计的机会，有什么想法吗？关于我可能做得更好的任何想法，呃，是的，乔纳森，是的，基本上创建另一个变量来存储流长度，并记住它，嗯，如果你想为流长度使用不同的值，或者如果它可能波动或改变，你想要只拥有一个不同的。
- en: variable as like a sort of placeholder，value for it，okay potentially but i will
    claim in。this case that because the human has，typed in the word，once you type
    in the word it's not going。to change but i think you're on the，right direction
    you're going down the，right direction because。in this boolean expression here
    i less，than the string length of s。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 变量作为某种占位符值，好的，可能可以，但我在这种情况下声称，因为人类已经输入了这个词，一旦输入这个词，它不会改变，但我认为你走在正确的方向上。因为在这个布尔表达式中，我小于s的字符串长度。
- en: '![](img/110ed059845cb3216569ef9efb94f426_64.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/110ed059845cb3216569ef9efb94f426_64.png)'
- en: recall that this expression gets，evaluated again and again and again。every time
    through a for loop recall，condition，the condition in this case it does i is。i
    less than the length of s，the problem is that sterling in this，case is a function。![](img/110ed059845cb3216569ef9efb94f426_66.png)
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 回想一下这个表达式每次通过for循环时都会被评估。回忆条件，在这种情况下i小于s的长度，问题是斯特林在这种情况下是一个函数。![](img/110ed059845cb3216569ef9efb94f426_66.png)
- en: which means there's some piece of code，someone wrote probably similar to what
    i。wrote a few minutes ago，that you're constantly asking what's the，of the string。and
    recall from our picture the way you，figure out the length of a string is you。start
    at the beginning of the string and，you keep checking am i at backslash zero。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着有一些代码，可能是有人写的，类似于我几分钟前写的，你不断地问字符串的究竟是什么。而且从我们的图像回忆，你找出字符串长度的方法是从字符串的开头开始，你不断检查我是否在反斜杠零。
- en: okay am i at backslash zero okay，so to figure out the length of high it's。going
    to take me like one two three，four steps right because i have to start。at the
    beginning and i iterate，out the length of bi，it's going to take me like five steps。because
    that's how long it's going to，take me from left to right。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我是否在反斜杠零，所以要找出高的长度大约需要我一、二、三、四个步骤，对吧，因为我必须从开始处开始。我迭代bi的长度，这大约需要我五个步骤，因为这就是我从左到右所需的时间。
- en: to find that backslash zero so what i，don't like about this line of code is。why
    are you asking for the string length，of s again and again，and again and again
    it's not going to。change in this context，so jonathan's point is taken if we keep，asking
    the user for more input but in。this case we've only asked the human，once so you
    know what，let's take jonathan's advice and do like。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 找到那个反斜杠零。所以我不喜欢这行代码的原因是，为什么你要一次又一次地询问s的字符串长度，在这种情况下它不会改变。因此，乔纳森的观点是正确的，如果我们不断要求用户提供更多输入，但在这种情况下，我们只问了人一次，所以你知道吗，听从乔纳森的建议去做。
- en: int n equals，this let's take jonathan's advice and do，int n equals the string
    length of，do。put n in this condition instead，so now i'm asking the same question
    but。![](img/110ed059845cb3216569ef9efb94f426_68.png)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: int n等于这个，让我们听从乔纳森的建议，做int n等于字符串长度。把n放在这个条件里，所以现在我在问同样的问题，但。![](img/110ed059845cb3216569ef9efb94f426_68.png)
- en: i'm not foolishly inefficiently asking，the same question。![](img/110ed059845cb3216569ef9efb94f426_70.png)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我并不是愚蠢地低效地问同样的问题。![](img/110ed059845cb3216569ef9efb94f426_70.png)
- en: again and again whereby the same，question requires，a good amount of work to
    find the。backslash zero again，and again and again now there's some，cleanly cleaning
    up we can do here too。it turns out there's this other subtle，feature of for loops
    if you want to。initialize another variable，to a value you can actually do this
    all，at once and you can do so。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 一次又一次地，同样的问题需要花费相当多的工作来找到反斜杠零，一次又一次。现在我们这里也可以做一些清理。事实证明，如果你想将另一个变量初始化为一个值，对于for循环还有另一个微妙的特性，你实际上可以一次性做到这一点。
- en: before the semicolon you can do comma，n equals sterling of s，and then you can
    use n just as i have。here so it's not，all that much better but it's a little，cleaner
    in that now i've taken two lines。of code and collapsed them，into one they both
    have to be of the，same data types but that's okay here。because both i，and n are
    so again the inefficiency here，is that it was foolish before that i。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在分号之前你可以做逗号，n等于斯特林的s，然后你可以像我在这里一样使用n。所以这并没有好太多，但稍微干净一些，因为现在我把两行代码合并成了一行。它们都必须是相同的数据类型，但这在这里是可以的，因为i和n都是。因此，之前的低效是愚蠢的，我。
- en: '![](img/110ed059845cb3216569ef9efb94f426_72.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/110ed059845cb3216569ef9efb94f426_72.png)'
- en: kept asking the same question，again and again and again but now i'm，asking the
    question once。remembering it in a variable called n，and only comparing i，against
    that integer which does not。actually change，all right i know that too was a lot，let's
    go ah**d here and take a three，whatnot。in three minutes we'll come back and，start
    to see applications now。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 不断重复同样的问题，但现在我只问了一次。记住在一个叫n的变量中保存它，并仅将i与那个不实际改变的整数进行比较。好吧，我知道这也是很多内容，让我们去做一个三分钟的任务，然后再回来开始应用。
- en: of all of these features ultimately so，some problems that are going to。lie ahead
    this week on the readability，of language and also on cryptography so。![](img/110ed059845cb3216569ef9efb94f426_74.png)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些特性最终都将面临一些问题，这周关于语言的可读性以及密码学的内容。![图片](img/110ed059845cb3216569ef9efb94f426_74.png)
- en: alright so we are back and this has been，a whole bunch of，low-level details
    admittedly and where。we're going with this ultimately this，week and beyond is
    applications of some。of these building blocks and one of，the next problem set，is
    going to be that of cryptography the。information，and if you're trying to encrypt，information
    like messages well those。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以我们回来了，这些无疑是一些低级细节，而我们最终要去的地方是应用这些构建块，接下来的一个问题集将是密码学的问题。如果你试图加密信息，比如消息，那些。
- en: messages might very well be written in，english or in ascii if you will。and you
    might want to convert some of，another，so that if your message is intercepted。by
    some third party，they can't actually decipher or figure，out what it is that you've
    sent。so i feel like we're almost toward we're，almost at the ability we're in code
    we，can start to convert。
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 消息可能用英语或ASCII编写，你可能想转换一些内容，以便如果你的消息被某个第三方截获，他们无法真正解码或弄清楚你发送的内容。因此，我感觉我们几乎要接近了，我们能开始转换。
- en: one word to another or to scramble our，text but we do need a couple of more，building
    blocks。so recall that we left off with this，picture here where we had two words
    in。the computer's memory high and bi，both with exclamation points but also。both
    with these backslash zeros that you，and i do not put there explicitly。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个单词到另一个单词或者混淆我们的文本，但我们需要几个更多的构建块。所以回忆一下我们停留在这里的画面，计算机的内存中有两个单词，高和bi，两个都有感叹号，但也都有这些反斜杠零，这些是你我并没有显式放入的。
- en: they just happen for you anytime you use，the double quotes and anytime you use，the
    getstring。function so once we have those in memory，you can think of them as s
    and t，respectively but a string。s or t is just an array so again you can，also
    refer to all of these individual。characters or chars via the new squ*re，bracket
    notation of today s bracket 0。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 这些在你使用双引号和`getstring`函数时就会自动发生，所以一旦我们将它们放入内存，你可以分别把它们想象成s和t，但字符串s或t只是一种数组，所以你也可以通过今天的新方括号表示法来引用所有这些单独的字符或字符。
- en: s1 s2 s3 and then t bracket 0 t，bracket 1 2 3 and 4 and then whatever。else is
    in the computer's memory，but you know what you can even do is，this suppose that
    instead。we wanted to have an array of words so，before we had an array of scores
    an，array of integers。but now suppose we it in the context of，some other program
    to have an array of。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`s1 s2 s3`，然后`t bracket 0 t bracket 1 2 3 4`，以及计算机内存中其他的内容，但你知道你甚至可以这样做，假设我们想要一个单词数组，所以之前我们有一个分数数组，一个整数数组。但现在假设我们在某个其他程序的上下文中有一个数组。'
- en: words you can totally do that there's，nothing stopping you from having an，array
    of words。and the syntax is going to be identical，notice if i want an array，strings，bracket
    two。this means hey computer give me an array，of size two each of whose members
    is，that array。same as before with the scores words，bracket zero gets quote-unquote
    high。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 你完全可以这样做，没有什么阻止你拥有一个单词数组，语法是相同的，注意如果我想要一个字符串数组，`bracket 2`。这意味着嘿计算机，给我一个大小为2的数组，每个成员都是那个数组。和之前的分数一样，`words
    bracket 0`得到的是“高”。
- en: words bracket one gets quote-unquote by，so that is to say with this code。could
    we create a picture similar to the，one previously，but i'm not calling these strings
    s and。t now i'm calling them both，words at two different locations zero，and one
    respectively。so we could redraw that same picture，like this now，bracket zero，and
    this one is referred to by words。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`words bracket 1`得到的是“拜”，也就是说，通过这段代码，我们能否创建一个类似于之前的图片，但我现在不再称这些字符串为s和t，而是称它们为两个不同位置的单词0和1。因此我们可以像这样重新绘制那幅图，现在`bracket
    0`，这个由单词引用。'
- en: bracket one but again，what is a string a string is an array，and yet here we
    have an array of strings。arrays，so we've got an array of words but a，word is just
    a string and a string。is an array of characters so what i，really have on the board，is
    an array of arrays。and so here and this will be the last，weird syntax for today，you
    can actually have multiple squ*re。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 括号一个，但再说一次，什么是字符串？字符串是一个数组，而这里我们有一个字符串数组。数组，所以我们有一个单词数组，但单词只是一个字符串，而字符串又是字符数组。因此我在板子上真正有的是一个数组的数组。所以这里，这将是今天最后一个奇怪的语法，你实际上可以有多个方括号。
- en: brackets back to back，so if your variable is called words and，that is an array。if
    you want to get the first word in the，array you do words bracket zero。once you're
    at that word hi and you want，to get the first character in that word。you can similarly
    do bracket zero so the，first bracket refers to what。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 括号背对背，所以如果你的变量叫做 words，而那是一个数组。如果你想获取数组中的第一个单词，你可以用 `words[0]`。一旦你到达那个单词 hi，并且你想获取那个单词中的第一个字符。你可以同样用
    `bracket[0]`，所以第一个括号指的是什么。
- en: word do you want in the array the second，bracket refers to what character，the
    i。is at words bracket zero bracket one the，zero，bracket two and the null characters
    at。words bracket zero bracket three，meanwhile the b is at words bracket，one bracket
    zero one one one。two one three one four so it's almost，kind of like a coordinate
    system if you。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 你想在数组中放入哪个单词，第二个括号指的是 i 当前在的字符。是 `words[0][1]`，零括号二和空字符在 `words[0][3]`，与此同时
    b 在 `words[1][0]`、`[1][1]`、`[1][2]`、`[1][3]`，所以这几乎有点像一个坐标系统，如果你。
- en: will it's a two dimensional，only to say，that if we wanted to think of arrays。of
    strings as individual，characters we can we have that，expressiveness now too。in
    code so what more can i do now that i，can manipulate things at this level。let
    me do a program that'll be pretty，applicable i think with some of our。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这是二维的，仅仅是说，如果我们想将字符串数组视为单独的字符，我们可以，我们现在也有这种表达能力。在代码中，那么我现在可以做些什么，既然我可以在这个层次上操纵事物。让我做一个程序，我认为这将非常适用，结合我们的。
- en: upcoming programs as well let me call。![](img/110ed059845cb3216569ef9efb94f426_76.png)
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 即将到来的程序。让我称之为。![](img/110ed059845cb3216569ef9efb94f426_76.png)
- en: this one uppercase，let me quickly write a program whose，purpose in life is just
    to convert an。![](img/110ed059845cb3216569ef9efb94f426_78.png)
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这一个大写，让我快速写一个程序，其目的只是转换一个。![](img/110ed059845cb3216569ef9efb94f426_78.png)
- en: input word to uppercase and let's see，and，include cs50。h let me go ah**d and，include，standardio。h
    let me also include this，string dot h which is going to give us，functions like
    string length。and then let me do int main void and，then let me go ah**d here and
    get a。string from the user like before so i'm，just going to ask the user for。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 输入单词转换为大写，让我们看看，并且包含 `cs50.h`。让我继续并且包含 `stdio.h`，我还要包含 `string.h`，这将给我们像字符串长度这样的函数。然后让我做
    `int main(void)`，然后让我继续在这里从用户那里获取一个字符串，就像之前那样，我只是会问用户。
- en: a string and i want them to give me，whatever the string should be before，literally，after。i
    capitalize everything in the string，and now let me go ah**d and do this，4 int
    i gets 0 i less than。string length of s i plus plus wait a，minute i made that
    mistake before。let's not repeat this question let's，give myself a second variable。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字符串，我希望他们给我，不管字符串在字面上应该是什么，在之前，之后。我将字符串中的所有内容都大写，现在让我继续，`for int i = 0; i
    < string length of s; i++`，等一下，我之前犯过这个错误。我们不要重复这个问题，让我给自己一个第二个变量。
- en: n gets string length of s i less than，n i plus plus so again this is now。becoming
    boilerplate anytime you want to，the string，this probably is a reasonable place
    to。start and then let me ask the question i，want to iterate over every character
    in。the string that the human has typed in，and i want to ask myself a question
    just。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`n = string length of s; for (i = 0; i < n; i++)`，所以这又变成了样板代码，任何时候你想要字符串，这可能是一个合理的开始地方。然后让我问这个问题，我想要遍历人类输入的字符串中的每一个字符，我想问自己一个问题。'
- en: as we've done with any algorithm，specifically i want to ask if the，current letter
    is lowercase。let me somehow convert it to uppercase，else let me just print it
    out unchanged。so how can i express that using last，week and this week's building
    blocks。well let me say something like this if，the character at a location i。
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们用任何算法所做的，具体来说，我想问当前字母是否是小写。让我以某种方式将其转换为大写，否则让我直接输出，不做更改。那么我如何用上周和这周的构建块来表达这一点呢？让我说类似这样的话：如果位置
    i 处的字符。
- en: in s or if the ith character in s。![](img/110ed059845cb3216569ef9efb94f426_80.png)
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在 s 或者如果 s 中的第 i 个字符。![](img/110ed059845cb3216569ef9efb94f426_80.png)
- en: is greater than or equal to a lowercase，a，and the ith character，in s is less
    than or equal to a。lowercase z，what do i want to do let me go ah**d and，print
    out，what，here yet。but let me come back to that else let me，go ah**d and just print
    out that，character。unchanged s bracket i so minus，the placeholder the question
    marks i've。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 大于或等于小写字母a，并且s中的第i个字符小于或等于小写字母z，我想做什么呢？让我继续打印出，什么，这里还没决定。但是让我回到else，继续打印出那个字符，保持不变的s括号i，减去占位符的问号。
- en: put i'm kind of all the way there，line 10 initializes i to 0 it's going to，count
    all the way up to n。where n is the length of the string and，it's going to keep
    incrementing i so，going to become。muscle memory before long line 12 is a，from，last
    week in this this week we have the。new squ*re bracket notation to get the i，character
    in the string s greater than。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我几乎已经全都做完了，第10行将i初始化为0，它将计数一直到n，其中n是字符串的长度，并且它将不断递增i，所以很快就会成为肌肉记忆。第12行来自上周，这周我们有新的方括号符号来获取字符串s中的第i个字符。
- en: or equal to less than or equal to we saw，at least one of those last week。that
    just means greater than or equal to，less than or equal to，i mentioned ampersand
    ampersand last。week which is the logical，and operator which means you can check，one
    condition and another。and the whole thing is true if both of，those are true，want
    to express。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 或者小于或等于，我们上周至少看到了其中一个。这仅仅意味着大于或等于，小于或等于，我提到了上周的&符号，它是逻辑与运算符，意味着你可以检查一个条件和另一个条件。只有当这两个条件都为真时，整个条件才为真。
- en: is the current character between，lowercase a and capital and lowercase z。totally
    fine to implicitly treat，a and z as numbers which they really are。because again
    if we come back to our，favorite ascii chart，and go to ascii chart。com here you'll。see
    again，with it，with it，pedantic，i could go back into my code and do。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 当前字符在小写字母a和大写字母及小写字母z之间，是完全可以隐式地将a和z视为数字，因为它们确实是。因为如果我们回到我们最喜欢的ASCII表，访问ascii
    chart.com，你会再次看到这一点。
- en: something like well if this is greater，than or equal to 97，and it's less than
    or equal to 122 but。like bad design，like i'm never going to remember that，lowercase
    z is 122。like no one's gonna。know that it makes the code less obvious，go ah**d
    and write it in a way that's a。little more friendly to humans。
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样，我想表达，如果这个值大于或等于97，并且小于或等于122，但这像是糟糕的设计，我永远不会记得小写字母z是122，像是没有人会知道，这让代码不那么明显，所以我决定以一种更友好的方式写出来。
- en: '![](img/110ed059845cb3216569ef9efb94f426_82.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/110ed059845cb3216569ef9efb94f426_82.png)'
- en: like this but notice this question mark，how do i fill in this blank。well let
    me go back to the ascii chart，this is subtle，but this is kind of cool and humans
    were。definitely thinking ahead，notice that capital lowercase a is 97，capital a
    is 65。lowercase b。is 98 capital b is，and notice these two numbers 67 to 90 65，to
    97 66 to 98。
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样，但注意这个问号，我该如何填充这个空白。好吧，让我回到ASCII表，这个问题很微妙，但这很酷，人类显然是在前瞻性思考，注意小写字母a是97，大写字母A是65。小写字母b是98，大写字母B是，注意这两个数字，67到90，65到97，66到98。
- en: '![](img/110ed059845cb3216569ef9efb94f426_84.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/110ed059845cb3216569ef9efb94f426_84.png)'
- en: 67 to 99 it would seem that，no matter what letters we compare，lowercase and
    uppercase。they're always 32 apart and that's，consistent we could do it all for
    all 26。english letters so if they're always 32，apart you know what i could do。if
    i want to take a lowercase letter，14，case，it's not the cleanest because again
    i'm，some point。
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 看起来，从67到99，无论我们比较什么字母，小写字母和大写字母之间总是相差32，这一点是一致的，我们可以对所有26个英语字母进行这种处理。所以如果它们总是相差32，你知道我可以做什么。如果我想取一个小写字母，14，大小写，这并不是最干净的做法，因为我在某个时刻。
- en: but at least mathematically i think that，will do the trick because 97。will become
    65 98 will become 66 which，is forcing those characters to lower，numbers。i'm still
    using percent c to coerce it，to be a char，so if i didn't mess any syntax up here。let
    me make uppercase，ok dot slash uppercase and let me go，ahead and type in for instance
    uh。
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 至少在数学上，我认为这会奏效，因为97将变成65，98将变成66，这就迫使那些字符变成更低的数字。我仍然在使用percent c将其强制转换为字符，所以如果我没有搞错任何语法，让我将其改为大写，好的，点斜杠大写，让我继续输入，例如。
- en: my name in all lowercase and voila，uppercase now it's a little ugly i。forgot
    my backslash n so let me go ah**d，and add one of those real quick。just to fix
    the cursor let me recompile，the code with make uppercase let me。rerun the program
    with dot slash，uppercase and now type in my name david。
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我的名字全部小写，瞧，变成大写了，现在有点丑，我忘记了`\n`，所以让我继续，快速添加一个。只是为了修复光标，让我用`make uppercase`重新编译代码。让我用`dot
    slash`重新运行程序，并输入我的名字**大卫**。
- en: let me do it again with brian and notice，that it's capitalizing everything。character
    by character using，only today's building blocks this is。correct it's pretty well
    styled because，everything's nicely indented it's very。readable even though it
    might look a，little cryptic at first glance。
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 让我再用**布莱恩**做一次，注意它是逐个字符地大写的。仅使用今天的构建模块，这是正确的，样式也很好，因为一切都很好缩进，非常可读，尽管乍一看可能有点神秘。
- en: but i think i can do better and i can do，better by using yet another library
    and。here's where c and really programming in，general gets powerful，the whole point
    of using popular。languages is because so many other，people before you have solved
    problems。that you don't need to solve again and，i'm sure over the past like 50
    years。
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 但是我认为我可以做得更好，我可以通过使用另一个库来做到这一点。这里是C语言和编程的一般强大之处，使用流行语言的整个意义在于，许多其他人在你之前已经解决了问题，而你不需要再次解决它们。我相信在过去的50年里。
- en: someone has probably written a function，that capitalizes letters for me i don't。have
    to do this myself，and indeed there is another library，that i'm going to include
    by way of its。header file in ctype。h which is the，things，function，called there's
    a couple of functions。specifically，let me get rid of all of this code and，let
    me call a function called。
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 可能有人为我写了一个函数来大写字母，我不必自己去做，实际上有另一个库，我打算通过它的头文件`ctype.h`包含。这个库有一些函数，具体来说，让我去掉所有这些代码，调用一个叫做的函数。
- en: is lower and past is lower s bracket i，and is lower as you might guess its。purpose
    in life is to return essentially，a boolean value true or false if that，character
    is lower。and if so well let me go ah**d and print，out a placeholder，followed by
    the capitalization of that。letter now before i had to do that，annoying math with
    minus 32 and figure，it out，to upper bracket of。
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`is lower`和`past is lower`，如你所猜，它的目的是基本上返回一个布尔值，`true`或`false`，如果那个字符是小写的话。那么，让我继续打印出一个占位符，后面跟着那个字母的大小写。现在在我之前必须做那烦人的数学计算，减去32并弄清楚，`to
    upper`的。'
- en: parenthesis s bracket i and now，i can otherwise just print out that。character
    unchanged just as before，s bracket i but now notice my program。honestly it's definitely
    a little，shorter it's a little simpler in that。there's just less code and hopefully
    if，the person that wrote is lower and two，upper did a good job。
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 括号和方括号，现在我可以只打印出那个字符，保持不变，就像之前一样，方括号。但现在请注意，我的程序。老实说，它确实短了一点，简单了一点，因为代码少了，希望如果写`is
    lower`和`two upper`的人做得好。
- en: i know it's correct i'm just standing on，their shoulders and frankly my code's。more
    readable because i understand what，is lower means，whereas that crazy ampersand
    ampersand。syntax and all of the additional code，that was just a lot harder to
    wrap your，mind around arguably。so now if i go ah**d and compile this，make uppercase，okay
    that seemed to work well and now。
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这是正确的，我只是在借助他们的成果，坦白说，我的代码更可读，因为我理解`is lower`的意思，而那个疯狂的`&`语法和所有额外的代码，确实让人很难理解。因此现在如果我继续编译这个，`make
    uppercase`，好的，似乎工作得很好，现在。
- en: i'm going to go ah**d and do dot slash，uppercase and type in my name and all，lowercase
    again。david seems to work brian seems to work，and i could do this all day long。it
    seems to still work but you know what，explicit，you know what i bet if the human
    who。wrote two upper was smart，i bet i can just blindly pass in，any character to
    two upper and it's only。
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 我打算继续做`dot slash`，大写并输入我的名字，然后再小写。**大卫**似乎可以，**布莱恩**似乎也可以，我可以整天这么做。这似乎仍然有效，但你知道，明确地说，如果写`two
    upper`的人聪明，我敢打赌我可以盲目传入任何字符给`two upper`，它只是。
- en: going to uppercase it，if it can be converted to uppercase，otherwise it'll pass
    it through。unchanged so you know what，let me get rid of all of this stuff and，out。a
    placeholder for c and then two upper，of s bracket i and sure enough if you。read
    the documentation for this function，it will handle the case where it's，either
    lowercase。
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '`going to uppercase`，如果可以转换为大写，否则将保持不变。所以你知道，让我去掉所有这些东西，并为C输出一个占位符，然后`two upper`的方括号，果然，如果你阅读这个函数的文档，它将处理小写和大写的情况。'
- en: right thing，so now if i recompile my code make，uppercase，so far so good dot
    slash uppercase david。again voila it still works and notice。![](img/110ed059845cb3216569ef9efb94f426_86.png)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在如果我重新编译我的代码，运行`make uppercase`，到目前为止一切正常，执行`./uppercase david`。又一次，看看，它仍然可以工作并且注意到。![](img/110ed059845cb3216569ef9efb94f426_86.png)
- en: truly just how much tighter how much，cleaner how much shorter my code is。and
    it's more readable in the sense that，this function is pretty well named。to upper
    is what it's indeed called but，there is an important detail here。two upper expects
    as input a character，you cannot pass a whole word to it。
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 真正清楚的是，我的代码到底变得有多紧凑，有多干净，以及有多简短。而且它的可读性也更强，从这个函数的命名来看，它的确命名得很好。“to upper”就是它的确切名称，但这里有一个重要的细节。“two
    upper”期望输入一个字符，你不能传入整个单词。
- en: it is still necessary at this point for，me to be using this loop。and doing it
    character by character now，multiple。![](img/110ed059845cb3216569ef9efb94f426_88.png)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 此时我仍然需要使用这个循环，并逐个字符地处理，现在是多个字符。![](img/110ed059845cb3216569ef9efb94f426_88.png)
- en: examples of this over the weeks to come，but if i go to，what's called the manual
    pages for the。language c we have our own web-based，version of them and we'll link
    this。for you in the courses labs and problem，sets as needed you can see a list
    of all。of the available functions in c at least，that are frequently used in cs50。
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来几周的例子，但如果我去查找所谓的C语言手册页面，我们有自己基于网页的版本，我们会在课程实验和问题集中链接给你。你可以看到C语言中至少常用函数的所有可用列表，在CS50中。
- en: and if we uncheck a box at the top we，can see even more functions there's。dozens
    maybe hundreds of functions，most of which we will not need or use in，language。you
    sort of pick up the building blocks，that you need over time，function in here。it's
    going to look a little cryptic at，first glance these manual pages are。
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在顶部取消勾选一个框，我们可以看到更多的函数，可能有几十个甚至几百个函数，其中大多数我们在语言中不需要或使用。你会随着时间的推移逐渐掌握所需的构建块，这里的函数乍一看可能有点晦涩，这些手册页面就是。
- en: written really for experienced，programmers but will help you understand。them
    over time so that they're useful to，you and indeed if i scroll down to the。description
    here's the beginning of some，documentation these，functions convert lowercase letters
    to。uppercase and vice versa。
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 这些内容确实是为经验丰富的程序员编写的，但会帮助你随着时间的推移理解它们，以便它们对你有用。事实上，如果我向下滚动到描述部分，这里有一些文档的开头，这些函数将小写字母转换为大写字母，反之亦然。
- en: '![](img/110ed059845cb3216569ef9efb94f426_90.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/110ed059845cb3216569ef9efb94f426_90.png)'
- en: and so forth so we'll refer you to these，kinds of resources so that you don't，lecture。but
    you have at your disposal these，other functions，and toolkits as well and we'll
    do the。same with python in sql，and other languages as well and so those，are what
    we call，feature。before we even think about cryptography，and scrambling information
    as for。
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 等等，所以我们会推荐这些资源给你，以便你不需要上课。但你可以利用这些其他函数和工具包，我们在Python、SQL和其他语言中也会这样做，这些都是我们所称的功能。在我们考虑加密和混淆信息之前。
- en: problem set two so a command line，argument i mentioned by name before it's，like
    a word you can type。after a program's name in order to，provide an input at the
    command line so，make hello。hello is a command line argument to the，program hello，r
    m space a dot out a dot。out was an argument a command line，argument to the program
    rm when i wanted。
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 问题集二，所以我之前提到的命令行参数，像一个你可以在程序名后输入的单词，以在命令行提供输入，所以`make hello`。`hello`是程序`hello`的命令行参数，而`rm
    a.out`则是程序`rm`的命令行参数，当我想要的时候。
- en: to remove it so we've already，seen command line arguments in action。but we haven't
    actually written any，programs，that allow you to accept words or。other inputs from
    the so-called command，line up until now，all of the input you and i have gotten。in
    our programs comes from getstring，getint and so forth，we have never been able
    to look at words。
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 为了去掉它，我们已经在实际操作中看到了命令行参数。但到目前为止，我们实际上还没有编写任何允许你从所谓的命令行接收单词或其他输入的程序。到现在为止，你和我在程序中获得的所有输入都来自`getstring`、`getint`等，我们从未能查看单词。
- en: that the human might very well have，typed at the prompt，when running your program
    but that's all。about to change now，let me go ah**d and create a program，called
    argv dot c and this。i'm going to go ah**d and，include shall we say uh standard
    io dot。h and then i'm going to give myself int，main void，and then i'm just going
    to very simply，go back。
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 人类在运行你的程序时可能非常好地在提示符下输入的，但这一切即将改变。让我去创建一个名为`argv.c`的程序，我将要包括标准的`stdio.h`，然后我将给自己一个`int
    main(void)`，然后我将非常简单地返回。
- en: and change the void so just as our own，custom functions can take inputs and
    we。saw that with get negative int，main，potentially take inputs up till now，though
    we've been saying。void and we told you to say void last，week and we told you to
    say void，that c。does allow you to put other inputs into，main you can either say
    nope main does。
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 并改变 void，正如我们自己的自定义函数可以接受输入，我们已经看到 get negative int，main 可能接受输入。到现在为止，我们一直在说
    void，我们告诉你上周说 void，告诉你说 void，C 语言确实允许你将其他输入放入 main，你可以说 nope main does。
- en: not take any command line arguments but，if it does，you can say literally int
    arg c。and string argv with squ*re brackets，so it's a little cryptic and technically。you
    don't have to type it precisely this，way but human convention would you have。you
    do it at least for now in this way，this says that main your function main。
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 不接受任何命令行参数，但如果它接受，你可以字面上说 int arg c 和 string argv 带方括号，所以这有点神秘，技术上你不必准确地这样输入，但人类的惯例会要求你至少现在这样做。这表示主函数
    main。
- en: takes an integer as one input，and not a string but an array of strings。as input
    and arg c is shorthand notation，for argument count，argument count is an integer
    that's。![](img/110ed059845cb3216569ef9efb94f426_92.png)
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 接受一个整数作为输入，而不是一个字符串，而是一个字符串数组。arg c 是 argument count 的简写，argument count 是一个整数。![](img/110ed059845cb3216569ef9efb94f426_92.png)
- en: going to represent the number of words，that your users type at the prompt。after
    your program's name arg v is short，for argument vector，vector is a fancy way of
    saying list it。is a variable that's going to store，human types，name，so we can
    use this for instance as。follows suppose that i want to let the，user type their
    own name at the command。
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 将表示用户在提示符处输入的单词数量。程序名称 arg v 是 argument vector 的缩写，vector 是一个花哨的说法，指的是列表。它是一个变量，将存储人类输入的名称，所以我们可以这样使用。例如，假设我想让用户在命令行输入他们自己的名字。
- en: prompt i don't wanna use getstring i，don't wanna have to prompt the human，later
    for their name。i want them to be able to run my program，and give me their name
    all at once just，like make just like。rm and clang and other programs we've，seen
    so i'm gonna do this。if argc equals equals 2 so if the number，of arguments to
    my program is 2。
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: prompt 我不想使用 getstring，我不想稍后再提示人类输入他们的名字。我希望他们能够运行我的程序，并一次性给我他们的名字，就像 make，rm
    和我们见过的其他程序一样。所以我将这样做。如果 argc 等于 2，所以如果传递给我的程序的参数数量是 2。
- en: go ah**d and print out hello percent s，and plug in whatever is at arg v1。so
    more on this in just a moment else if，argc is not equal to two let's just go。with
    last week's default，hello world so what is this program's，purpose in life。![](img/110ed059845cb3216569ef9efb94f426_94.png)
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: go ah**d 并打印 hello percent s，并插入 arg v1 中的内容。所以稍后会有更多关于这个的内容，else if，argc 不等于二，让我们就用上周的默认值
    hello world。那么这个程序的生命目的是什么呢？![](img/110ed059845cb3216569ef9efb94f426_94.png)
- en: if the human types two words at the，brian，hello so and so otherwise if they
    don't。type two words at the prompt，they're i'm just going to say the，default hello
    world so let me compile。this make arg v。![](img/110ed059845cb3216569ef9efb94f426_96.png)
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 如果人类在提示符处输入两个单词，比如 brian，hello so and so，否则如果他们没有在提示符输入两个单词，我将只是说默认的 hello world。让我编译一下这个
    make arg v。![](img/110ed059845cb3216569ef9efb94f426_96.png)
- en: type，string unknown type string all right i，goofed if i'm using string。recall
    that now i need to start using，the cs50 library and again we'll see all。the more
    why in the coming weeks as we，take those training wheels off。but now i'm going
    to do this again make，argv there we go now it works。
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 类型，string unknown 类型 string 好吧，我搞错了，如果我使用 string。请记住，现在我需要开始使用 cs50 库，我们会看到更多的原因，在接下来的几周里，当我们去掉那些辅助工具时。但现在我要再做一次，make
    argv，来了，现在它有效。
- en: dot slash arg v enter hello world，that's pretty much equivalent to what we，did
    last week but notice。if i type in for instance rv1 david，rv，brian it says that
    if i type in brian u。it says hello world so what's going，on well the way you write
    programs in c。![](img/110ed059845cb3216569ef9efb94f426_98.png)
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: dot slash arg v enter hello world，这基本上等同于我们上周所做的，但请注意。如果我输入，比如说 rv1 david，rv，brian，它会说如果我输入
    brian u。它会说 hello world，那么发生了什么呢？好吧，你在 C 语言中写程序的方式。![](img/110ed059845cb3216569ef9efb94f426_98.png)
- en: arguments that is，words at the prompt after your program's，name is you change
    what we have been。doing all this time，from void to be this into argc，string argv
    with squ*re brackets and。what the computer is going to do for you，automatically
    is going to store in。c a number of the total number of words，that the human typed
    in not just the。
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 参数也就是，在你的程序名字之后提示的单词，你改变我们一直在做的事情，从 void 变成这变成 argc，字符串 argv，带有方*括号，计算机会自动为你做的事情，是会存储人类输入的单词总数，而不仅仅是。
- en: arguments technically all of the words，including your own program's name。it's
    then going to fill this array of，strings aka，argv with all of the words the human。typed
    at the prompt，so not just the arguments like brian or，david but also。the name
    of your program so if the human，typed in two total words which they did，print
    out。
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 参数技术上来说，所有的单词，包括你自己程序的名字。然后它将填充这个字符串数组，也就是，argv，包含人类在提示符下输入的所有单词，所以不仅仅是像布莱恩或，大卫这样的参数，还有。你的程序名称，所以如果人类，输入了两个单词，那么就打印出来。
- en: hello followed by a placeholder and then。![](img/110ed059845cb3216569ef9efb94f426_100.png)
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 你好，后面是一个占位符，然后。![](img/110ed059845cb3216569ef9efb94f426_100.png)
- en: whatever value is at r v one and i'm，deliberately not doing zero，if i did zero
    based on the verbal。this program，i don't wanna see this hello argv，so the program's
    own name is。automatically always stored for you，if you want the first，useful piece
    of information you actually。would after recompiling the code here，way，do we see
    an arg v that we can actually，too。
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 无论 r v 一个的值是什么，我故意不做零，如果我做了零，根据口头，这个程序，我不想看到这个 hello argv，所以程序自己的名字是。自动存储给你，如果你想要第一个，真正有用的信息，你实际上会在重新编译代码后，这里，方式，我们能看到一个
    arg v，我们实际上，也能。
- en: suppose i want to print out all of the，individual characters。in someone's input
    you know what i bet i，could even do this，let me go ah**d and do this instead of。just
    printing out hello let me do for，length，of r v whoops arg v one。and then over
    here i'm going to do i is，less than n i plus plus。
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我想打印出所有的，单个字符。在某人的输入中，你知道吗，我敢打赌我，甚至可以这样做，让我去啊**d，做这个，而不是。仅仅打印出 hello，让我做 r
    v 的长度，哎 arg v 一个，然后在这里，我将做 i 小于 n，i 加一。
- en: all right so i'm going to iterate over，all of the characters，in the first real
    word in argv。and what am i going to do well let me go，ahead and print out，a character
    that's at argv 1。but at location i so i said a moment ago，with our picture。![](img/110ed059845cb3216569ef9efb94f426_102.png)
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我将遍历所有的字符，在 argv 中第一个真实的单词。我要做什么呢，让我去，打印出，位于 argv 1 的一个字符，但在位置 i，所以我刚才说过，结合我们的图。![](img/110ed059845cb3216569ef9efb94f426_102.png)
- en: that we could think of an array of。![](img/110ed059845cb3216569ef9efb94f426_104.png)
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其视为一个数组。![](img/110ed059845cb3216569ef9efb94f426_104.png)
- en: arrays，and so i can employ that syntax here，by going into argv one to get me
    the。word like david or brian or so forth，and then further index into it with more。squ*re
    brackets that get me the d，the a the v the i the d and so forth and。just to be
    super clear let me put a new，line character there，just so we can see explicitly
    what's。
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 数组，因此我可以在这里使用这种语法，通过访问 argv 一来获取单词，如大卫或布莱恩等，然后进一步索引，使用更多的方*括号来获取 d，a，v，i，d 等等。为了更加清晰，我在这里放一个新行字符，这样我们可以明确看到是什么。
- en: going on and let me go ah**d now and，just delete this hello world because i。don't
    want to see any hellos i just want，to see the word the human typed in，make argv
    whoops。uh what did i do wrong oh i use sterling，when i shouldn't have because
    i haven't，included。string dot h at the top okay，now if i recompile this code and，recompile
    make our v there we go dot。
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 继续让我去啊**d，现在就删除这个 hello world，因为我。并不想看到任何 hello，我只想看到人类输入的单词，制造 argv，哎，我做错了什么，哦，我用了
    sterling，实际上不应该，因为我没有，包含。string dot h 在顶部，好吧，现在如果我重新编译这段代码并，重新编译我们的 v，太好了，点。
- en: slash argv，david you'll see one character per line，and if i do the same with
    brian's name。or anyone's name，and change it to brian i'm printing one，character
    at a time so again i'm not。sure why you would want to do that but，in this case
    my goal simply。![](img/110ed059845cb3216569ef9efb94f426_106.png)
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 斜杠 argv，大卫，你会看到每行一个字符，如果我对布莱恩的名字做同样的事情，或者任何人的名字，并把它改成布莱恩，我是逐个字符打印出来的，所以我还是不确定你为什么想这样做，但，在这种情况下我的目标仅仅是。![](img/110ed059845cb3216569ef9efb94f426_106.png)
- en: was to not only iterate over the，characters in，that first word but print them
    out so。again just by applying。![](img/110ed059845cb3216569ef9efb94f426_108.png)
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 目的是不仅迭代，字符在，第一个单词中，而且打印它们，所以。再次仅通过应用。![](img/110ed059845cb3216569ef9efb94f426_108.png)
- en: we actually，see that a program has access to the，individual characters in each
    of these，strings。all right and one last explanation，before we introduce the crypto
    and，application thereof。this thing here this thing here does，anyone have any idea
    as to why。![](img/110ed059845cb3216569ef9efb94f426_110.png)
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上看到程序可以访问这些字符串中的每个单独字符。好吧，在我们引入加密和应用之前，最后一个解释是，这个东西，这个东西，谁知道为什么。![](img/110ed059845cb3216569ef9efb94f426_110.png)
- en: return an，int even though it's not an average，function it's not a get positive
    in。function it's not get negative in，somehow for some reason main keeps，never，mean。this
    is the one last piece that we，promised last week we would eventually。what might
    this mean and this one's a，tough one，brian who do we have how about。
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个 int，尽管它不是一个普通的函数，它不是一个获取正数的函数，它不是获取负数的，出于某种原因，主函数总是保持不变。这是我们上周承诺的最后一部分，最终会说明这可能意味着什么，这个有点棘手，布赖恩，我们有谁，怎么样。
- en: yes so usually the functions，in the end uh have returned zero and，that means
    that the function stops。and that zeros is like is the integer，that pops out of
    the main function yeah，that。if you had programmed before odds are，and i'm guessing
    you have grad you've，seen this in use before。we humans though in the real world
    of，like using macs and pcs。
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，通常函数最终返回零，这意味着函数停止。而且这个零就像是从主函数中弹出的整数。如果你之前编程过，几率是，我猜你曾经见过这个。我们人类在像使用 Mac
    和 PC 的现实世界中。
- en: you've actually seen numbers integers in，weird places frankly。almost any time
    your computer freezes or，you see an error message。odds are you see in english
    or some，spoken language in the error message。but you very often see a numeric
    code，for instance if you're having zoom。
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 你实际上在奇怪的地方看到了数字整数。坦白说，几乎每次你的计算机卡住或看到错误信息时，你都能看到它。很可能你在错误信息中看到的是英文或其他某种语言，但你常常会看到一个数字代码，例如如果你在使用
    Zoom。
- en: trouble you'll often see the number five，in the error window in zooms program
    and，issues so。programmers often associate integers，with things that can go wrong
    in a，program and it's great。grid notes they use zero to connote that，so let me
    write，one final program here just called。![](img/110ed059845cb3216569ef9efb94f426_112.png)
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你遇到麻烦，你通常会在 Zoom 程序的错误窗口中看到数字五，因此程序员经常将整数与程序中可能出现的问题关联在一起，这很不错。他们用零来表示这一点，所以让我在这里写一个最终的程序，名为。![](img/110ed059845cb3216569ef9efb94f426_112.png)
- en: exit。c that puts this to the test，file called。![](img/110ed059845cb3216569ef9efb94f426_114.png)
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: exit.c，这将进行测试，文件名叫做。![](img/110ed059845cb3216569ef9efb94f426_114.png)
- en: exit dot c that's going to introduce，what we're going to call。![](img/110ed059845cb3216569ef9efb94f426_116.png)
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: exit.c，这将介绍我们要称之为的内容。![](img/110ed059845cb3216569ef9efb94f426_116.png)
- en: exit codes these are a subtlety uh，an exit status this is a subtlety that。will
    be useful as our programs get a，here and do，and include，standardio。h and i'm going
    to give。myself the longer version of main so，int argc string argv，with the squ*re
    brackets and in here i'm。going to say if，argc does not equal to，the human is not
    doing what i want them。
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 退出代码，这是一种微妙的东西，退出状态，这是一种微妙之处，随着我们的程序的深入，它会很有用。这里包括 standardio.h，我将给自己一个更长的主函数版本，因此
    int argc string argv，带方括号。在这里，我要说如果 argc 不等于，人类并没有按照我的要求去做。
- en: to and i'm going to yell at them in some，line，argument so any kind of error
    message，screen。i'm just going to tell them with that，message but i'm going to
    very subtly。return the number one i'm going to，return an error code and the human
    is。not necessarily going to see this code，but if we were to have a graphical user，program。
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我将对他们在某个行参数中大喊大叫，所以任何类型的错误消息屏幕。我只是会告诉他们这个消息，但我将非常微妙地返回数字一，我将返回一个错误代码，人类不一定会看到这个代码，但如果我们有一个图形用户程序。
- en: that would be the number they see in the，error window that pops up just like
    zoom，something has gone。wrong similarly if you've ever visited a，web page frankly，and
    you the web page doesn't exist you。see the integer 404，that's not technically
    the exact same，incarnation of this but it is。representative of programmers using，numbers
    to represent，errors so that one you probably have。
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是他们在错误窗口中看到的数字，就像 Zoom 一样，某种东西出了问题。类似地，如果你曾经访问过一个网页，坦白说，当你发现网页不存在时，你会看到整数
    404，这在技术上并不是这个确切的表现形式，但它代表程序员使用数字来表示错误，因此你可能见过这个。
- en: seen here i'm going to go ah**d though，and by default say，hello percent s just
    like before passing。as before，but i'm not going to do any of this lame，type，in
    their name as i expect instead。i am going to check did the human give，me two words
    at the command line。if not i'm going to print missing，this，exit code otherwise
    if all is well i'm。
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 如这里所示，我将继续默认说“你好 %s”，就像之前一样，但我不会输入任何无聊的内容，而是检查人类是否在命令行给了我两个单词。如果没有，我将打印缺少，退出代码，否则如果一切正常，我会。
- en: gonna go ah**d and return，explicitly zero this is another number，see。but we
    could have access to it and，frankly for course purposes。uh check 50 can have access
    to this and，those，great notes，is just all as well but one would mean。ahead and
    make，exit which is kind of appropriate as，we're wrapping up here and let me go。
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续并明确返回 0，这又是另一个数字。但我们可以访问它，并且坦率地说，为了课程目的，检查 50 可以访问这些，伟大的笔记也都很好，但一个将意味着继续并进行退出，这在我们结束时是适当的。
- en: ahead and do dot slash，exit missing command line argument is，what's displayed。if
    i go ah**d and say exit david now i，see hello david or，exits brian i'll see exit
    brian。now this is not a technique you'll need，to use often but you can，want。if
    i run exit and i see this error，message i can very weirdly say echo。
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 继续执行 `dot slash`，退出缺少命令行参数，即显示的内容是什么。如果我继续说“退出大卫”，我会看到“你好，大卫”，或者退出“布莱恩”，我会看到“退出布莱恩”。这不是你需要经常使用的技巧，但你可以想要。
- en: dollar sign question mark which is a，very admittedly cryptic way of saying。what
    was my exit status and if you hit，enter you'll see one，by contrast if i run exit
    of david and i。actually see hello david，now i。![](img/110ed059845cb3216569ef9efb94f426_118.png)
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 美元符号问号，这是一个非常晦涩的方式来表示我的退出状态。如果你按回车，你会看到一个；相比之下，如果我运行“退出大卫”，我实际上看到“你好，大卫”。
- en: will see zero so again this is not a，technique you and i will use very。frequently
    but it's a capability of a，program and it's a capability of c。that you do now
    have access to and so in，writing programs moving forward。what we will often do
    in labs and in，problem sets and the like，is ask you to return from maine。
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我运行退出并看到这个错误信息，我可以很奇怪地说“echo”。所以这不是你我会非常频繁使用的技巧，但这是一个程序的能力，而这是你现在可以访问的 C 语言能力。因此，在编写程序时，我们在实验室和作业中经常会要求你从主函数返回。
- en: either 0 or 1 or maybe 2 or 3 or 4，based on the problems that might have。gone
    wrong in your program that you have，detected，and responded to appropriately so
    it's a。very effective way of handling errors，in a standard way so that you know
    that。you are being proactive about detecting，mistakes，so what kinds of mistakes
    might we。
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 错误代码可以是 0、1、2、3 或 4，基于你在程序中检测到并适当地响应的问题。所以这是以标准方式处理错误的非常有效的方法，这样你就知道自己在主动检测错误。那么我们可能会遇到什么样的错误呢？
- en: handle this week and what kinds of，problems might we solve well today was，entirely
    about。deconstructing what a string is last，week it was just a sequence of text。a
    chunk of text today it's now an array，c，for accessing those characters we also。today
    have access to more libraries more，header files the documentation therefore。
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这周我们可能解决的问题，今天完全是关于拆解字符串是什么，上周只是文本的序列，今天是一个数组 C，用于访问那些字符。我们今天还可以访问更多库和头文件的文档。
- en: so that we can actually solve problems，without writing as much code ourselves。we
    can use other people's code，in the form of these libraries so one。problem we will
    solve this coming week，readability，like when you're reading a book or an。essay
    or a paper or anything，what is it that makes it like a third。
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就可以在不自己写那么多代码的情况下解决问题。我们可以以这些库的形式使用其他人的代码。因此，这周我们要解决的一个问题是可读性，像是你在阅读一本书、论文或任何东西时，是什么让它看起来像是一个第三类。
- en: grade reading level or a 12th grade，reading level or university reading。level
    well all of us probably have an，intuitive sense right like if it's big。font and
    short words it's probably，young for younger kids and if it's。really complicated
    words with big，vocabulary and things we don't know。
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 评估阅读水平，比如 12 年级的阅读水平或大学阅读水平。我们可能都有一种直观的感觉，对吧？比如如果字体大且单词短，可能是给年轻孩子的；如果是非常复杂的单词和我们不知道的内容。
- en: maybe it's meant but for university，little，more formulaically not necessarily
    the。only way but we'll give you a few，famous sentence，mr and mrs dursley of number
    four privet。drive we're proud to say that they were，perfectly normal thank you
    very much。and so forth well what is it about this，text that puts harry potter
    at grade。
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 也许这意味着大学，稍微更公式化，但不一定是唯一的方法，我们会给你几个著名的句子：德尔斯利先生和夫人住在四号普莱维特大道，我们很自豪地说，他们是完全正常的，谢谢。然后还有其他内容，这段文本有什么让《哈利·波特》成为年级。
- en: '![](img/110ed059845cb3216569ef9efb94f426_120.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/110ed059845cb3216569ef9efb94f426_120.png)'
- en: 7 reading level well it probably has to，do with the vocabulary words but it。probably
    has to do with the lengths of，the sentences，the amount of punctuation perhaps
    the，total。number of characters that you might，count up you can imagine quantifying
    it，just based generically。on the look and the aesthetics of the，text what about
    this in computational。
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 7的阅读水平可能与词汇有关，但也可能与句子的长度、标点符号的数量，以及你可能计算的字符总数有关。你可以想象只基于文本的外观和美感来量化它，那么在计算机科学中这又如何呢？
- en: linguistics authorship attribution is，the task of predicting the author of。document
    of unknown authorship this task，is generally performed by the analysis。of stylometric
    features particular，this is brian's senior thesis so this is。not a seventh grade
    reading level this，was actually rated at grade。
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 语言学中的作者归属是预测未知作者文档作者的任务，这个任务通常通过分析风格特征来完成。特别是，这是布赖恩的毕业论文，所以这并不是七年级的阅读水平，而是实际评级在年级。
- en: 16 so o'brien's pretty sophisticated，there too，you could perhaps glean from
    the。sophistication of the sentences the，length thereof and the words they're in。there's
    something we could perhaps，indeed that's，one way you could assess the readability。of
    a text even if you don't have access，to a dictionary，with which to figure out
    which are the。
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 16，因此O'Brien也相当复杂，你或许可以从句子的复杂程度、长度和所用词汇中得到一些启示。我们或许可以评估文本的可读性，即使你没有字典来确定哪些是。
- en: actual big or small words，and what about cryptography so it's，incredibly。common
    these days and so important these，days for you and i to use cryptography。not necessarily
    uh using algorithms we，ourselves come up with but rather using。software like whatsapp
    and signal and，telegram and messenger and others。
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，大或小的词汇，以及密码学，那是非常常见和重要的，现在你我都需要使用密码学。并不一定是使用我们自己想出的算法，而是使用像WhatsApp、Signal、Telegram和Messenger等软件。
- en: that support encryption between you and，the third party your friend or family。or
    at least minimally the website with，which you're interacting so cryptography，hiding。information
    and if that information is，text well frankly as of this third week。of cs50 we
    already have the requisite，building blocks for not only。
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 支持在你和第三方之间进行加密，比如你的朋友或家人。或者至少与之互动的网站，利用密码学来隐藏信息。如果这些信息是文本，那么坦率地说，在CS50的第三周，我们已经拥有了不仅仅是基础的必要构建块。
- en: representing text but we saw today，manipulating it even just uppercasing，text。well
    what does it mean to encrypt，from last week，you have some input you want some
    output，plain text。the message you want to send from，yourself to someone else，ciphertext
    is the output that you want。and so in between there there's going to，be what we're
    going to call a cipher，or，output。
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 表示文本，但我们今天看到，即使只是将文本大写，也在操纵它。那么，从上周开始，加密意味着什么？你有一些输入，你想要输出，明文。你想从自己发送给其他人的消息，密文是你想要的输出。所以在这之间会有我们称之为密码的东西，或输出。
- en: that a third party can't understand and，hopefully that cipher that algorithm。is
    a reversible process so that when you，figure out，what it was that the the person
    sent to，you。intended，is to also have a secret key so if you，think back to grade
    school maybe you。were flirting with someone in class，and you sent them a note
    on a piece of。
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 第三方无法理解的信息，且希望这个密码和算法是一个可逆的过程，这样当你弄清楚那个人想要发送给你的内容时，你也会有一个秘密密钥。如果你回想一下小学，也许你在课堂上和某人调情，并在一张纸上给他们写了便条。
- en: paper well hopefully you didn't just say，like i love you on the piece of paper。and
    then pass it through all of your，friends or let alone the teacher to。to the ultimate
    recipient maybe you did，something like an，becomes a d。like you kind of apply an
    algorithm to，like add one to all of the letters so，and look。
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在纸上只是写了“我爱你”，然后通过所有朋友或老师传递给最终收件人，希望你没这样做。也许你做了一些像是应用算法，将所有字母加一，这样看。
- en: at it they probably don't have enough，care in the world to figure out what，nonsense。but
    if your friend knows that you，changed a to b b，to c by adding one to every letter
    they。could reverse that process，and decrypt it so the key for instance。might be
    literally the number one the，message literally might be i love you。
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在这方面，他们可能没有足够的耐心去搞清楚这些胡言乱语。但如果你的朋友知道你将a变为b，b变为c，通过给每个字母加一，他们就可以逆转这个过程，从而解密。因此，密钥可能字面上就是数字一，消息字面上可能就是我爱你。
- en: but what would the ciphertext be or the，output well let's consider。i love you
    is a string which as of today，is an array of characters。so what useful what use
    is that well，let's consider exactly that phrase as，though it's an array。it's an
    array of characters we know from，last week characters，are just integers decimal
    integers。
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 但密文或输出会是什么呢？让我们考虑一下。我爱你是一个字符串，截至今天，是一个字符数组。那么这有什么用呢？让我们具体考虑这个短语，就像它是一个数组一样。它是一个字符数组，我们知道上周，字符实际上就是整数，十进制整数。
- en: thanks to ascii and in turn unicode，so it turns out i we already know is 73，chart，l
    is *****。easily and see，you might have to check your notes and，check my sample
    code and so forth but。relatively easily in c，convert i love you to the corresponding，integers
    by just casting so to speak。chars to integers，i could very easily mathematically
    using，the plus operator in c。
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 多亏了ascii，进而是unicode，因此结果是我们已经知道i是73，图表，l是*****。很容易看出，你可能需要检查你的笔记和我的示例代码等等，但在c语言中相对容易地将我爱你转换为相应的整数，实际上可以通过将字符转为整数来实现，我可以非常轻松地使用c语言中的加法运算符。
- en: start to add one to every one of these，characters thereby encrypting。my message
    but i could send my friend，these numbers but i might as well make。it a little
    more user friendly，so now，it would seem that the ciphertext for i。love you if
    using a key，of one and one just means change a to b，not a to c。
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 开始为这些字符每个加一，从而对我的消息进行加密。但我可以将这些数字发送给我的朋友，也不妨让它更加用户友好。因此，现在看起来，对于我爱你，使用密钥为一时，实际上只是意味着将a变为b，而不是变为c。
- en: just move it by one place this is the，ciphertext for an encrypted。message of
    i love you and so the whole，process becomes one is the input is the，text。and the
    output ultimately is this，teacher，or some friend intercepts they probably。don't
    know what's going on，and indeed this is the essence of，cryptography the algorithms
    that you。
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 只是将其移动一个位置，这是我爱你的加密消息的密文，因此整个过程变得简单，输入是文本，输出最终是这个。如果某个老师或朋友截取了这条消息，他们可能不知道发生了什么，实际上这就是密码学的本质。
- en: protect are emails and texts and，financial information and health，sophisticated。than
    that particular algorithm and it is，but it reduces to the same process，by some。output
    the so-called cipher text and，some form，sometimes even mechanical form back in。the
    day you could actually get，these little circular devices that have。
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 保护我们的电子邮件、短信、财务信息和健康信息比那个特定算法更复杂，但它归结为相同的过程，通过一些输出，所谓的密文，有时甚至是机械形式。在过去，你实际上可以得到这些小的圆形设备。
- en: letters on the alphabet on one side，other letters on the alphabet on the，other。a
    might line up with b b might line up，with c so you can have even a physical。incarnation
    of cryptography，just as was popular in a movie that，seems to play endlessly。on
    tv at least here in the us around，christmas time，and you might recognize if you've
    seen a。
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 字母表的一侧是字母，另一侧也是字母。a可能对应b，b可能对应c，所以你甚至可以有一种物理形式的密码学，就像在美国圣诞节期间电视上不断播放的电影一样，你可能会认出，如果你看过的话。
- en: christmas story，one such look so we'll use just a couple，of minutes of our final
    moments together。to take a look at this real world，incarnation of cryptography
    that。undoubtedly you can probably see on tv，be it known to all on sunday that
    ralph。parker is hereby appointed a member of，the little orphanage，secret circle
    and is entitled to all the。
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 圣诞故事，就是这样。我们将利用最后的几分钟，来看看这个密码学的真实世界体现，你无疑可能在电视上看到过。众所周知，在周日，拉尔夫·帕克被任命为小孤儿院秘密圈子的成员，享有所有的权利。
- en: honors and benefits occurring there too。![](img/110ed059845cb3216569ef9efb94f426_122.png)
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 荣誉和利益也会在这里发生。![](img/110ed059845cb3216569ef9efb94f426_122.png)
- en: signed，pierre andre in inc honors and benefits，come on let's get on with it
    i don't。need all that jazz about smugglers and，listen tomorrow night for the concluding。adventure
    of the black，message，for you members of the secret circle，circle。can decode any
    secret message remember，annie is depending on you，set your pins to be too here。
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 签名，皮埃尔·安德烈，荣誉与利益，来吧，继续，我不需要那些关于走私者的所有花哨，听明天晚上的黑色信息结局，为你们秘密圈子的成员，圈子。可以解码任何秘密信息，记住，安妮在依靠你们，把你的针设置为**太**这里。
- en: is the message 12 11。i am in my first secret meeting，voice tonight。i could tell
    that tonight's message was，really important。![](img/110ed059845cb3216569ef9efb94f426_124.png)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 信息是12 11。我在我的第一次秘密会议上，今晚的声音。我能感受到今晚的信息真的很重要。![](img/110ed059845cb3216569ef9efb94f426_124.png)
- en: 3 25 that's a message from annie herself，remember don't tell anyone，[Music]。90
    seconds later i'm in the only room in，the house where a boy of nine could sit。in
    privacy and decode，aha b i went to the next，e the first word is b，s it was coming
    easier now。oh be sure to be sure to what，what was little orphanage trying to say，be
    sure to watch。
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 3 25，这是安妮亲自发来的信息，记住不要告诉任何人，[音乐]。90秒后，我在房子里唯一一个九岁男孩可以独自坐着的房间。可以私下解码，啊哈，b，我接着读，第一词是b，现在变得更容易了。哦，确保，确保，**小孤儿院**想说什么，确保观看。
- en: randy have got to go will you please，come out all right ma，now。the tension was
    terrible what was it the。![](img/110ed059845cb3216569ef9efb94f426_126.png)
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 兰迪，必须走了，请你出来，妈，没问题。紧张得可怕，是什么呢。![](img/110ed059845cb3216569ef9efb94f426_126.png)
- en: balance，[Music]。![](img/110ed059845cb3216569ef9efb94f426_128.png)
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 平衡，[音乐]。![](img/110ed059845cb3216569ef9efb94f426_128.png)
- en: sheet almost there my fingers flew my，mind was a steel trap。![](img/110ed059845cb3216569ef9efb94f426_130.png)
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 准备好了，我的手指飞快，我的思维如钢铁般敏锐。![](img/110ed059845cb3216569ef9efb94f426_130.png)
- en: every pore vibrated it was almost clear，yes yes yes yes be sure，to drink your
    ovalt。a crummy commercial，[Music]，son of a [ __ ] all right。
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 每个毛孔都在震动，几乎可以肯定，是的，是的，是的，确保喝你的**Ovalt**。一个糟糕的广告，[音乐]，该死的家伙，没问题。
