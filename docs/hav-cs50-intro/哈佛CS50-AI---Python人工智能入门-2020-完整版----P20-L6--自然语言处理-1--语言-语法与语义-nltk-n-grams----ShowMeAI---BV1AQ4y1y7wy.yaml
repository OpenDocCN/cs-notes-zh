- en: 哈佛CS50-AI ｜ Python人工智能入门(2020·完整版) - P20：L6- 自然语言处理 1 (语言，语法与语义，nltk，n-grams)
    - ShowMeAI - BV1AQ4y1y7wy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈佛CS50-AI ｜ Python人工智能入门(2020·完整版) - P20：L6- 自然语言处理 1 (语言，语法与语义，nltk，n-grams)
    - ShowMeAI - BV1AQ4y1y7wy
- en: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_0.png)'
- en: '[Music]。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_2.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[音乐]。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_2.png)'
- en: okay welcome back everyone to our final，topic in an introduction to artificial。intelligence
    with Python and today the，topic is language so thus far in the。class we've seen
    a number of different，ways of interacting with AI artificial。intelligence but
    it's mostly been，happening in the way of us formulating。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，欢迎大家回来，进入我们关于人工智能与Python的最终主题，今天的主题是语言。在课程中，我们已经看到与AI交互的多种方式，但大部分是我们构建的方式。
- en: problems in ways that AI can understand，learning to speak the language of AI
    so。to speak by trying to take a problem and，formulate it as a search problem or
    by。trying to take a problem and make it a，constraint satisfaction problem。something
    that our AI is able to，understand today we're going to try and。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以AI能够理解的方式解决问题，学习用AI的语言来表达，尝试将一个问题转化为搜索问题，或将其转化为约束满足问题，这是我们今天的目标。
- en: come up with algorithms and ideas that，allow our AI to meet us halfway so to。speak
    to be able to allow AI to be able，to understand and interpret and get some。sort
    of meaning out of human language。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_4.png)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 想出算法和理念，允许我们的AI与我们达成某种共识，能够理解、解释并获取人类语言中的某种含义。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_4.png)
- en: the type of language in the spoken，language like English or some other。language
    that we naturally speak and，this turns out to be a really。challenging task for
    AI and it really，encompasses a number of different types。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_6.png)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 口语中的语言类型，如英语或其他我们自然使用的语言，这对AI来说是一个非常具有挑战性的任务，确实涵盖了多种类型。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_6.png)
- en: of tasks all under the broad heading of，natural language processing the idea
    of。coming up with algorithms that allow our，AI to be able to process and understand，natural
    language。so these tasks vary in terms of the，types of tasks we might want in AI
    to。perform and therefore the types of，algorithms that we might use them but。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 所有任务都在自然语言处理的广泛范畴下，提出算法使我们的AI能够处理和理解自然语言。这些任务在我们希望AI执行的任务类型和我们可能使用的算法类型上各不相同。
- en: some common tasks that you might see are，things like automatic summarization
    you。give an AI a long document and you would，like for the AI to be able to summarize。that
    come up with a shorter，representation of the same idea but。still in some kind
    of natural language，like English something like information。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一些常见任务包括自动摘要，你给AI一个长文档，希望AI能够总结出来，形成同一思想的简短表达，但仍然使用某种自然语言，如英语。
- en: extraction given a whole corpus of，information in some body of documents or。on
    the internet for example we'd like，for our AI to be able to extract some。sort
    of meaningful semantic information，out of all that content that is able to。look
    at and read language identification，the task of given a page can you figure。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在给定大量信息的文档或互联网内容时，我们希望我们的AI能够提取一些有意义的语义信息，能够阅读并进行语言识别，任务是识别某一页面所用的语言。
- en: out what language that document is，written in this is the type of thing you。might
    see if you use a web browser where，if you open up a page in another。language that
    web browser might ask you，oh I think it's in this language would。you like me to
    translate it into English，for you for example and that language。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 确定文档所写的语言类型，这种情况在你使用网页浏览器时可能会出现，比如当你打开一个其他语言的页面时，浏览器可能会询问你，哦，我认为它是这种语言，你要我帮你翻译成英语吗。
- en: identification process is a task that，RAI needs to be able to do which is then。related
    then to machine translation the，process of taking text in one language。and translating
    it into another language，which there's been a lot of research and。development
    on really over the course of，the last several years and it keeps。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 识别过程是RAI需要能够完成的任务，这与机器翻译相关，即将一种语言的文本翻译成另一种语言，这方面在过去几年里有很多研究和发展，依然在持续进行。
- en: getting better in terms of how it is，that AI，able to take text in one language
    and。transform that text into another，language as well in addition to that we。have
    topics like named entity，recognition given some sequence of text。can you pick
    out what the named entities，are these are like names of companies or。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在人工智能领域，改善如何将一种语言的文本转换为另一种语言是一个重要话题。此外，我们还有命名实体识别的主题，给定一段文本，你能识别出命名实体吗？这些实体通常是公司名称或。
- en: names of people or names of locations，for example which are often relevant or。important
    parts of a particular document，speech recognition as a related task not。to do
    with the text that is written but，text that is spoken being able to。process audio
    and figure out what are，the actual words that are spoken there。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 人名或地点名，例如，它们常常是特定文档中的相关或重要部分。语音识别作为一个相关任务，不是处理书面文本，而是处理口语文本，能够处理音频并确定所说的实际单词。
- en: and if you think about smart home，devices like Siri or Alexa for example。these
    are all devices that are now able，to listen to when we are able to speak。figure
    out what words we are saying and，draw some sort of meaning out of that as。well
    we've talked about how you could，formulate something for instance as a。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想想像Siri或Alexa这样的智能家居设备，这些设备现在能够在我们说话时倾听，弄清楚我们说了什么，并从中提取某种意义。我们讨论过如何将一些东西构想成。
- en: hidden Markov model to be able to draw，those sorts of conclusions and text。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_8.png)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 隐马尔可夫模型能够得出这些结论和文本。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_8.png)
- en: classification more generally is a broad，category of types of ideas whenever
    we。want to take some kind of text and put，it into some sort of category and we've。seen
    these classification type problems，and how we can use statistical machine。learning
    approaches to be able to solve，them we'll be able to do something very。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 分类通常是一个广泛的类别，每当我们想将某种文本放入某种类别时，我们就会看到这些分类问题，以及如何利用统计机器学习方法来解决它们。
- en: similar with natural language that we，may need to make a couple of adjustments。that
    we'll see soon and then something，like word sense disambiguation the idea。that
    unlike in the language of numbers，where AI is has very precise。representations
    of everything words are，a little bit fuzzy in terms of their。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在自然语言中，我们可能需要做一些调整，我们将很快看到，像词义消歧这样的概念，与数字语言不同，AI在所有事物的表示上是非常精确的，而单词在意义上则有些模糊。
- en: meaning and words can have multiple，different meanings that natural language。is
    inherently ambiguous and we'll take a，look at some of those ambiguities in due。time
    today but one challenging task if，you want an AI to be able to understand。natural
    language is being able to，disambiguate or differentiate between。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 意义和单词可以有多重不同的含义，自然语言本质上是模糊的，今天我们将探讨一些这些模糊之处，但如果你希望AI理解自然语言，一个具有挑战性的任务是能够消歧或区分。
- en: different possible meanings of words if，I say a sentence like I went to the
    bank。you need to figure out do I mean like，the bank where I deposit and withdraw。money
    or do I mean the bank like the，river bank and different words can have。different
    meanings that we might want to，figure out and based on the context in。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我说“我去银行”，你需要弄清楚我指的是存取款的银行，还是河岸。不同的词可以有不同的含义，我们可能想要基于上下文来弄清楚这些。
- en: which a word appears the wider sentence，or paragraph or paper in which a。particular
    word appears that might help，to inform how it is that we disambiguate。between
    different meanings or different，senses that a word might have and there。are many
    other topics within natural，language processing many other。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 一个词出现的范围，包括句子、段落或论文，可能有助于我们了解如何在不同的含义之间进行消歧。
- en: algorithms that have been devised in，order to deal with and address these。sorts
    of problems and and today we're，really just going to scratch the surface。looking
    at some of the fundamental ideas，and that are，find many of these ideas with a
    natural。language processing within this idea of，trying to come up with AI algorithms。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 为了解决这些问题而设计的算法，今天我们将仅仅触及表面，看看一些基本概念，这些概念在自然语言处理和试图提出AI算法时会发现许多。
- en: that are able to do something meaningful，with the languages that we speak every。day
    and so to introduce this idea when，we think about language we can often。think
    about it in a couple of different，parts the first part refers to the。syntax of
    language this is more to do，with just the structure of language and。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我们能够用我们每天说的语言做一些有意义的事情。因此，当我们考虑语言时，通常可以从几个不同的部分进行思考。第一部分涉及语言的句法，这更多的是与语言的结构有关。
- en: how it is that that structure works and。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_10.png)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这个结构是如何工作的。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_10.png)
- en: if you think about natural language，syntax is one of those things that if。you're
    a native speaker of a language it，comes pretty readily to you you don't。have to
    think too much about it if I，give you a sentence from Sir Arthur。Conan Doyle's
    Sherlock Holmes for，example a sentence like this just before。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你考虑自然语言，句法就是这样一种东西。如果你是某种语言的母语者，它会很自然地浮现出来，你不需要过多思考。如果我给你一个来自阿瑟·柯南·道尔的福尔摩斯的句子，比如在这之前的句子。
- en: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_12.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_12.png)'
- en: nine o'clock Sherlock Holmes stepped，briskly into the room I think we could。probably
    all agree that this is a，well-formed grammatical sentence。syntactically it makes
    sense in terms of，the way that this particular sentence is。structured and syntax
    applies not just a，natural language but to programming。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 九点钟，福尔摩斯快步走进房间。我想我们都可以同意这是一个结构良好的语法句子。从句法上讲，它在这个特定句子的结构方面是有意义的，句法不仅适用于自然语言，也适用于编程语言。
- en: languages as well if you've ever seen，like a syntax error in a program that。you've
    written it's likely because you，wrote some sort of program that was not。syntactically
    well-formed the structure，of it was not a valid program in the。same way we can
    look at English。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你见过自己编写程序中的语法错误，那很可能是因为你写了一种不符合句法规则的程序。它的结构并不是一个有效的程序。以同样的方式，我们也可以看待英语。
- en: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_14.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_14.png)'
- en: sentences or sentences in any natural，language and make the same kinds of。judgments
    I can say that this sentence，is syntactically well-formed when all。the parts that
    put together all these，words are in this order it constructs a。grammatical sentence
    or a sentence that，most people would agree is grammatical。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在任何自然语言中句子或句子可以进行相同类型的判断。我可以说这个句子在句法上是结构良好的，当所有组成这些词的部分按照这个顺序组合时，它构造了一个语法正确的句子，或者说大多数人会同意这是一个语法正确的句子。
- en: but there are also grammatically，ill-formed sentences the sentence like。just
    before Sherlock Holmes nine o'clock。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_16.png)
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 但也有语法上不良构造的句子，比如“九点钟福尔摩斯”。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_16.png)
- en: stepped briskly the room well I think we，would all agree that this is not a。well-formed
    sentence and tactically it，doesn't make sense and this is the type。of thing that
    if we want our AI for，example to be able to generate natural。language to be able
    to speak to us the，way like a chatbot would speak to us for。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 快步走进房间。我想我们都会同意这不是一个结构良好的句子，从句法上讲它没有意义。这正是如果我们希望我们的 AI 生成自然语言，例如像聊天机器人那样与我们交流时，所需要解决的问题。
- en: example well then our AI is going to，need to be able to know this distinction。somehow
    it's going to be able to know，what kinds of sentences our grammatical。what kinds
    of sentences are not and we，might come up with rules or ways to。statistically
    learn these ideas and，we'll talk about some of those methods。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们的 AI 将需要能够识别这种区别。它需要能够知道哪些句子是语法正确的，哪些句子不是，我们可能会提出规则或方法来统计学习这些概念，我们将讨论一些这些方法。
- en: as well syntax can also be ambiguous，like there are some sentences that are。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_18.png)
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 句法也可能是模棱两可的，有些句子是这样的。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_18.png)
- en: well-formed and not well-formed that but，certain way there are certain ways
    that。you could take a sentence and，potentially construct multiple different，structures
    for that sentence。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_20.png)
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 结构良好与结构不良之间存在某种方式，你可以对一个句子进行不同结构的多种构造。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_20.png)
- en: like I saw the man on the mountain with，the telescope well this is grammatically。well
    formed syntactically it makes sense。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_22.png)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，我在山上用望远镜看到了那个人。这是一个语法结构良好的句子，从句法上讲是有意义的。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_22.png)
- en: but what is the structure of this，sentence is it the man on the mountain。who
    has the telescope or am i seeing the，man on the mountain and I am using the。telescope
    in order to see the men on the，mountain there's some interesting。ambiguity here
    where it could have，potentially two different types of。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这个句子的结构是什么？是“在山上的男人有望远镜”，还是“我看到山上的男人，我正在使用望远镜来观察山上的男人”？这里有一些有趣的模棱两可的地方，可能有两种不同的理解。
- en: structures and this is one of the ideas，that we'll come back to also in terms
    of。how to think about dealing with AI when，natural language is inherently ambiguous。so
    that then is syntax the structure of，language and getting an understanding。for
    how it is that depending on the，order and placement of words we can come。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 结构，这也是我们将在处理自然语言时，思考如何与AI打交道时会回到的一个概念，因为自然语言本质上是模棱两可的。因此，语法是语言的结构，理解单词的顺序和位置如何影响我们的理解。
- en: up with different structures for，language but in addition to language。having
    structure language also has，meaning and now we get into the world of。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_24.png)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 提出了不同的语言结构，但除了语言有结构之外，语言还有意义，现在我们进入了。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_24.png)
- en: semantics the idea of what is it that a，word or a sequence of words or a。sentence
    or an entire essay actually，means and so you know a sentence like。just before
    nine o'clock Sherlock Holmes，stepped briskly into the room is a。different sentence
    from a sentence like，Sherlock Holmes stepped briskly into the。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 语义是指一个单词、一组单词、一个句子或整篇文章实际上意味着什么，所以像“在九点钟前，福尔摩斯精神抖擞地走进了房间”这样的句子，与“福尔摩斯精神抖擞地走进了房间”是不同的句子。
- en: room just before 9 o'clock and yet they，have effectively the same meaning。they're
    different sentences so when AI，reading them would recognize them as。different
    but we as humans can look at，both of those sentences and say yeah。they mean basically
    the same thing and，maybe in this case who was dressed。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在九点钟前的房间，然而它们实际上有相同的意义。它们是不同的句子，因此当AI读取它们时会将其识别为不同，但我们人类可以看这两个句子并说，是的，它们基本上是相同的意思，也许在这个情况下谁穿着。
- en: because I moved the order of the words，around originally 9 o'clock was near
    the。beginning of the sentence now 9 o'clock，is near the end of the sentence you。might
    imagine that I could come up with，in different sentence entirely a。sentence like
    a few minutes before 9，Sherlock Holmes walked quickly into the。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我改变了单词的顺序，原本“九点钟”在句子的开头，现在“九点钟”在句子的末尾。你可能会想，我可以想出一个完全不同的句子，比如“在九点钟前几分钟，福尔摩斯快速走进了房间”。
- en: room and okay that also has a very，similar meaning but I'm using different。words
    in order to express that idea and，ideally AI would be able to recognize。that these
    two sentences these different，sets of words that are similar to each。other have
    similar meanings and to be，able to get at that idea as well and。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 房间，这也有一个非常相似的意思，但我使用不同的词来表达这个想法，理想情况下，AI应该能够识别这两个句子，这些不同的词组合相似的意思，并能够理解这个想法。
- en: there are also ways that a syntactically，well-formed sentence might not mean。anything
    at all a famous example from。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_26.png)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 语法上正确的句子也可能根本没有任何意义，一个著名的例子来自于。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_26.png)
- en: linguist Noam Chomsky is this sentence，here colorless green ideas sleep。furiously
    syntactically that sentence is，perfectly fine colorless and green are。adjectives
    that modify the noun ideas，sleep is a verb variously as an adverb。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_28.png)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 语言学家诺姆·乔姆斯基的这句话是“无色的绿色思想疯狂地睡觉”，从语法上看，这个句子完全没问题，“无色”和“绿色”是修饰名词“思想”的形容词，“睡觉”是一个动词，某种程度上作为副词。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_28.png)
- en: of the old，of words but it turns out this sentence，is sort of meaningless if
    you tried to。ascribe meaning to the sentence what，does it mean and it's not easy
    to be。able to determine what it is that it，might mean semantics itself can also
    be。ambiguous given that different，structures can have different types of。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 旧词的句子，但事实证明这个句子在某种程度上是没有意义的，如果你试图给这个句子赋予意义，那它意味着什么并不容易确定。语义本身也可能是模棱两可的，因为不同的结构可以有不同类型的。
- en: meanings different words can have，different kinds of meanings so the same。sentence
    with the same structure might，end up meaning different types of things。my favorite
    example from the LA Times is，a headline that was in the Los Angeles。Times a little
    while back it is the。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 不同单词可以具有不同类型的含义，所以相同结构的句子可能最终意味着不同类型的东西。我最喜欢的例子来自洛杉矶时报，标题曾经出现在《洛杉矶时报》上。
- en: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_30.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_30.png)'
- en: headline says big rig carrying fruit，crashes on 210 freeway，creates Jam so depending
    on how it is。you look at the sentence how you，interpret the sentence it can have。multiple
    different meanings and so here，two are challenges in this world of。natural language
    processing being able，to understand both the syntax of。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 标题说“大卡车运送水果，在210号高速公路上发生碰撞，造成堵塞”，所以根据你如何看待这个句子，以及如何解释它，它可能有多种不同的含义，因此在自然语言处理领域，有两个挑战：能够理解句法。
- en: language and the semantics of language，and today we'll take a look at both of。those
    ideas we're gonna start by talking，about syntax and getting a sense for how。it
    is at that language is structured and，how we can start by coming up with some。rules
    some ways that we can tell our，computer tell our AI what types of。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 语言和语言的语义，今天我们将一起探讨这两个概念，我们将首先谈论句法，了解语言是如何构造的，我们可以通过制定一些规则来告诉我们的计算机，告诉我们的人工智能什么类型的。
- en: things are valid sentences what types of，things are not valid sentence ism and。ultimately
    we'd like to use that，information to be able to allow our AI。to draw meaningful
    conclusions to be，able to do something with language and。so to do so we're gonna
    start by，introducing the notion of formal grammar。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 有效句子是什么，哪些类型的东西不是有效句子，最终我们希望利用这些信息，让我们的人工智能得出有意义的结论，能够对语言进行操作。因此，我们将通过引入形式语法的概念来开始。
- en: and what formal grammar is all about is，formal grammar is a system of rules
    that。generate sentences in a language I would，like to know what are the valid
    English。sentences not in terms of what they mean，just in terms of their structure。there's
    syntactic structure what，structures of English are valid correct。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 形式语法的全部内容是，形式语法是一种生成语言中句子的规则系统，我想知道有效的英语句子是什么，不是从它们的含义上，而是从它们的结构上来看。英语的句法结构中，哪些结构是有效且正确的。
- en: sentences what structures of English are，not valid and it's going to apply in
    a。very similar way to other natural，languages as well where language follows。certain
    types of structures and we，intuitively know what these structures。mean but it's
    going to be helpful to try，and really formally define what those。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 英语的句子结构是什么，并不有效，它将以非常类似的方式应用于其他自然语言，因为语言遵循某些类型的结构，我们直观地知道这些结构的含义，但尝试正式定义这些结构的含义将是有帮助的。
- en: structures mean as well there are a，number of different types of formal。grammar
    all across what's known as the，Chomsky hierarchy of grammars and you。may have
    seen some of these before if，you've ever worked with regular。expressions before
    him those belong to a，class of regular languages they。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 结构的定义有许多不同类型的形式语法，这些语法被称为乔姆斯基语法层次结构，如果你曾经使用过正则表达式，可能会见过其中一些，它们属于正则语言的类别。
- en: correspond to regular languages which is，a particular type of the language but。also
    on this hierarchy is a type of，grammar known as a context-free grammar，the most
    time。taking a look at today and what a，context-free grammar is is it is a way。of
    taking generating sentences in a，language via what are known as rewriting。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 正则语言对应于一种特定类型的语言，但在这个层次上还有一种被称为上下文无关语法的语法，今天我们将主要关注它，上下文无关语法是通过所谓的重写规则生成语言中的句子的一种方法。
- en: rules replacing one symbol with other，symbols and we'll take a look in a。moment
    at just what that means so let's，imagine for example a simple sentence in。English
    a sentence like she saw the city。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_32.png)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 替换一个符号与其他符号的规则，我们稍后将看看这是什么意思，假设一个简单的英语句子，比如“她看到了城市”。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_32.png)
- en: a valid syntactically well-formed，English sentence but we'd like for some。way
    for our AI to be able to look at，this sentence and figure out what is the。structure
    of the sentence because in，order to answer a question if you。imagine AI in a question
    answering，format if you want to ask the AI a。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有效的语法上良好的英语句子，但我们希望AI能够以某种方式查看这个句子，并弄清楚句子的结构，因为为了回答一个问题，如果想象AI处于问答模式，想问AI一个。
- en: question like what did she see well then，the AI wants to be able to look at
    this。sentence and recognize that what she saw，is the city to be able to figure
    that。out and it requires some understanding，of what it is that the structure of
    this。sentence really looks like so where do，we begin each of these words she saw
    the。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是她看到了什么，那么AI希望能够查看这个句子并识别她所看到的是城市，能够弄清楚这一点，这需要一些理解，即这个句子的结构实际上是什么样子的。
- en: city we are going to call terminal，symbols there are symbols in our。language
    where each of these words is，just a symbol where this is ultimately。what we care
    about generating we care。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_34.png)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要称之为终结符的城市，语言中有这些单词，每个单词都是一个符号，这最终是我们关心生成的内容。
- en: about generating these words but each of，these words we're also going to。associate
    with what we're gonna call a。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_36.png)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 关于生成这些单词，但每个单词我们也会关联一个我们称之为的。
- en: non-terminal symbol and these，non-terminal symbols initially are gonna。look
    kind of like parts of speech if you，remember back to like English grammar。where
    she is a noun saw is a V for verb，the is a D D stands for determiner these。are
    words like the and a and an for。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 非终结符号最初看起来像词类，如果你回忆一下英语语法，“she”是一个名词，“saw”是V动词，“the”是D，D代表限定词，这些词如“the”、“a”和“an”。
- en: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_38.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_38.png)'
- en: example and then city well city is also，a noun so an n it goes there so each
    of。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_40.png)
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 例子是city，city也是一个名词，所以n在这里，所以每个。
- en: these NV and D these are what we might，call non-terminal symbols they're not。actually
    words in the language she saw，the city those are the words in the。language but
    we use these non-terminal，symbols to generate the terminal symbols。the terminal
    symbols which are like she，saw the city the words that are actually。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这些NV和D是我们可能称之为非终结符号，它们实际上不是语言中的单词，“she saw the city”才是语言中的单词，但我们使用这些非终结符号来生成终结符号，终结符号如“she
    saw the city”这些实际的单词。
- en: in a language like English and so in，order to translate these non-terminal。symbols
    into terminal symbols we have，what are known as rewriting rules and。these rules
    look something like this we，have a n on the left side of an arrow。and the arrow
    says if I have an N，non-terminal symbol then I can turn it。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在像英语这样的语言中，为了将这些非终结符号翻译成终结符号，我们有称为重写规则的东西，这些规则看起来像这样，左边有一个n的箭头，箭头表示如果我有一个N的非终结符号，我就可以将其转换。
- en: into any of these various different，possible。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_42.png)
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 进入这些不同的可能性中。
- en: that are separated with a vertical line，so a noun，could translate into the word
    she a noun。could translate into the word city or，car or Harry or any number of
    other。things these are all examples of nouns，for example meanwhile a determiner
    D。could translate into the or a or an，v4 verb could translate into any of。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是用垂直线分隔开的，因此一个名词可以翻译成单词she，名词也可以翻译成单词city、car或Harry等许多其他东西，这些都是名词的例子，另一方面，限定词D可以翻译成the、a或an，动词v4可以翻译成任何的。
- en: these verbs P for preposition could，translate into any of those prepositions。to
    on over and so forth and then a DJ，for adjective couldn't translate into。any of
    these possible adjectives as well，so these then are rules in our。context-free
    grammar when we are，defining what it is that our grammar is。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这些动词P作为介词可以翻译成任何这些介词，比如to、on、over等，而形容词DJ则无法翻译成任何可能的形容词，因此这些在我们的上下文无关文法中就是规则。
- en: what is the structure of the English，language or any other language and we。give
    it these types of rules saying that，a noun could be any of these。possibilities
    a verb could be any of，those possibilities but it turns out we。can then begin
    to construct other rules，where it's not just one non-terminal。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: translating into one terminal symbol，we're always going to have one non。terminal
    on the left-hand side of the，arrow but on the right-hand side of the。arrow we
    could have other things we，could even have other non-terminal。symbols so what
    do I mean by this well，we have the idea of nouns like she city。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: car Harry for example but there are also，noun phrases like phrases that could。work
    as nouns that are not just a single，word but that are multiple words right。like
    the city is two words that together，operate as what we might call a noun。phrase
    it's multiple words but they're，together operating as a noun or if you。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: think about a more complex expression，like the big city three words all。operating
    as a single noun or the car on，the street multiple words now but that。entire set
    of words and operates kind of，like a noun it substitutes as a noun。phrase and
    so to do this we'll introduce，the notion of a new non terminal symbol。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_44.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
- en: called NP which will stand for noun，phrase and this rewriting rule says that。a
    noun phrase it could be a noun so，something like she is a noun and。therefore it
    can also be a noun phrase，but a noun phrase could also be a。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_46.png)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: determiner D followed by a noun so two，ways we can have a noun phrase in this。very
    simple grammar of course English。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_48.png)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: language is more complex than just this，but a noun phrase is I，the renowned
    or it is a determiner。followed by a noun so for the first，example a noun phrase
    that is just a。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_50.png)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: noun that would allow us to generate，noun phrases like she because a noun。phrase
    is just a noun and a noun，could be the word she for example。meanwhile if we wanted
    to look at one of，the examples of bees where a noun phrase。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_52.png)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: becomes a determiner and a noun then we，get a structure like this and now we're。starting
    to see the structure of，language emerge from these rules in a。syntax tree as we'll
    call this tree like，structure that represents the syntax of。our natural language
    here we have a noun，phrase and this noun phrase is composed。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: of a determiner and a noun where the，determiner is the word the' according to。that
    rule and noun is the word city so，here then is a noun phrase that consists。of
    multiple words inside of the，structure and using this idea of taking。one symbol
    and rewriting it using other，symbols that might be terminal symbols。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: like the and city but might also be，non-terminal symbols like D for。determiner
    or n for noun then we can。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_54.png)
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: begin to construct more and more complex，structures in addition to noun phrases。we
    can also think about verb phrases so。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_56.png)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 开始构建越来越复杂的结构，除了名词短语外。我们也可以考虑动词短语。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_56.png)
- en: what might a verb phrase look like well，a verb phrase might just be a single。verb
    in a sentence like I walked walked，is a verb and that is acting as the verb。phrase
    in that sentence but there are，also more complex verb phrases that。aren't just
    a single word but there are，multiple words if you think of the。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 动词短语可能是什么样子呢，动词短语可能只是一个句子中的单个动词，比如我走了，走是动词，在这个句子中充当动词短语，但也有更复杂的动词短语，不仅仅是一个单词，而是多个单词。
- en: sentence like she saw the city for，example saw the city is really that。entire
    verb phrase it's taking up like，what it is that she is doing for example。and so
    our verb phrase might have a rule。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_58.png)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 句子像她看到了城市，例如看到了城市实际上是这样的。整个动词短语占据了类似于她在做什么的内容，例如。我们的动词短语可能有一个规则。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_58.png)
- en: like this a verb phrase is either just a，plain verb or it is a verb followed
    by a。noun phrase and we saw before that a。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_60.png)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样的动词短语要么只是一个简单的动词，要么是一个动词后面跟着一个名词短语，我们之前看到过。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_60.png)
- en: noun phrase is either a noun or it is a，determiner followed by a noun and so
    a。verb phrase might be something simple，like verb phrase is just a verb and that。verb
    could be the word walked for，example but it could also be something。more sophisticated
    something like this，now where we begin to see a larger。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 名词短语可以是一个名词，或者是一个限定词后跟一个名词，因此动词短语可能是简单的，比如动词短语只是一个动词，那个动词可能是“走”这个词，但它也可以是更复杂的东西，例如，现在我们开始看到更大的。
- en: syntax tree where the way to read this，syntax tree is that a verb phrasing is
    a，verb and。phrasing where that verb could be，something like psalm and this is
    a noun。phrase we've seen before this noun，phrase that is the city a noun phrase。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_62.png)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 语法树，阅读这个语法树的方法是，动词短语是一个动词和一个短语，其中那个动词可以是像“诗篇”这样的东西，而这是我们之前见过的名词短语，“城市”是一个名词短语。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_62.png)
- en: composed of the determiner the and the，noun city all put together to construct。this
    larger verb phrase and then just to，give one more example of a rule we could。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_64.png)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由限定词“the”和名词“city”组成，所有这些结合在一起构成这个更大的动词短语。然后再给一个规则的示例，我们可以。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_64.png)
- en: also have a rule like this sentence s，goes to noun phrase and a verb phrase。the
    basic structure of a sentence is。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_66.png)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 也有这样的规则，句子s由名词短语和动词短语组成。句子的基本结构是。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_66.png)
- en: that it is a noun phrase followed by a，verb phrase and this is a formal grammar。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_68.png)
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个名词短语后面跟着一个动词短语，这是一个形式语法。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_68.png)
- en: way of expressing the idea that you，might have learned when you learned。English
    grammar when you read that a sub，a sentence is like a subject and a verb。subject
    in action something that's，happening to a particular noun phrase。and so using
    the structure we could，construct a sentence that looks like。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 表达你可能在学习英语语法时学到的概念的方式，当你阅读到一个子句时，句子就像一个主语和动词。主语在行动，某件事发生在特定的名词短语上。因此，利用这个结构，我们可以构造一个看起来像这样的句子。
- en: this a sentence consists of a noun，phrase and a verb phrase a noun phrase。could
    just be a noun like the word she，the verb phrase could be a verb and a。noun phrase
    where this is something，we've seen before the verb is saw and。the noun phrase
    is the city and so now，look what we've done here what we've。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个句子由名词短语和动词短语组成，名词短语可以只是一个名词，比如单词“她”，动词短语可以是一个动词和一个名词短语，这是我们之前见过的，动词是“看”，名词短语是“城市”。现在看看我们在这里做了什么。
- en: done is by defining a set of rules there，are algorithms that we can run that
    take。these words and thus Eyk algorithm for，example is one example of this if
    you。want to look into that where you start，with a set of terminal symbols like
    she。saw the city and then using these rules，you're able to figure out how is it
    that。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 完成的方法是定义一组规则，有一些算法可以运行，处理这些单词。因此，Eyk算法是一个示例，如果你想了解它，你可以从一组终端符号开始，比如她看到了城市，然后使用这些规则，你能够弄清楚如何。
- en: you go from a sentence to she saw the，city and then all through these。rewriting
    rules so the sentence is a，noun phrase and a verb phrase a verb。phrase could be
    a verb and a noun phrase，of so on and so forth where you can。imagine taking the
    structure and，figuring out how it is that you could。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从一个句子“她看到了城市”开始，然后通过这些重写规则，句子由名词短语和动词短语构成，动词短语可以是一个动词和一个名词短语，依此类推，你可以想象取这个结构，并找出如何。
- en: generate a parse tree a syntax tree for，that set of terminal symbol of that
    set。of words and if you tried to do this for，a sentence that was not grammatical。something
    like saw the city she well，that wouldn't work there'd be no way to。take a sentence
    and use these rules to，be able to generate that sentence that。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个解析树，一个语法树，为那组终结符和那组单词。如果你试图为一个不合语法的句子这样做，比如“看到了城市她好”，那就行不通，因为没有办法使用这些规则来生成那个句子。
- en: is not inside of that language so this，sort of model can be very helpful if
    the。rules are expressive enough to express，all the ideas that you might want to。express
    inside of natural language of，course using just the simple rules we。have here
    there are many sentences that，we won't be able to generate sentences。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这不在那个语言中，因此这种模型在规则足够表达所有自然语言中你想表达的想法时，可以非常有帮助。当然，使用我们这里的简单规则，有许多句子是我们无法生成的。
- en: that we might agree are grammatically，and syntactically well-formed but that。we're
    not going to be able to construct，using these rules and then in that case。we might
    just need to have some more，complex rules in order to deal with。those sorts of
    cases and so this type of，approach can be powerful if you're。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有些句子我们可能认为是语法和句法上良好的，但我们无法用这些规则构造。在这种情况下，我们可能需要更复杂的规则来处理这些情况，因此这种方法在你需要时是强大的。
- en: dealing with sort of a limited set of，rules and words that you really care。about
    dealing with and one way we can，actually interact with this in Python is。by using
    a Python library called NLT Kay，short for natural language toolkit which。we'll
    see a couple of times today which。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 处理一个有限的规则和单词集，这些是你真正关心的。我们可以通过使用一个名为NLTK的Python库来与之交互，今天我们会看到几次。
- en: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_70.png)'
  id: totrans-97
  prefs: []
  type: TYPE_IMG
  zh: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_70.png)'
- en: has a wide variety of different，functions and classes that we can take。advantage
    of it that are all meant to，deal with natural language and one such。algorithm
    that it has is the ability to，parse a context-free grammar to be able。to take
    some words and figure out，according to some context-free grammar。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 它有多种不同的功能和类，我们可以利用它，都是为了处理自然语言。其中一个算法是解析上下文无关文法，能够取一些单词并根据某个上下文无关文法来分析。
- en: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_72.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_72.png)'
- en: how would you construct the syntax tree，for it so let's go ahead and take a
    look。at NLT kay now by examining how we might，construct some context-free grammars。with
    it so here inside of CFG zero CFG，short for context-free grammar I have a。sample
    context-free grammar which has，rules that we've seen before so sentence。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 那么你如何构建这个语法树呢？让我们来看看NLTK。现在通过研究如何构建一些上下文无关文法，来实现这一点。在CFG零CFG中，我有一个示例上下文无关文法，包含我们之前见过的规则。
- en: goes to noun phrase followed by a verb，phrasing noun phrase is either a。determiner
    and a noun or a noun verb，phrase is either a verb or a verb and a。noun phrase
    the order of these things，doesn't really matter，determiners could be the word
    though or。the word a a noun could be the word she，city or car and a verb could
    be the word。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 它会转向名词短语后跟动词短语，名词短语可以是一个限定词和一个名词，或名词动词短语，动词短语可以是一个动词或动词和名词短语，这些的顺序并不重要，限定词可以是“那个”或“一个”，名词可以是“她”、“城市”或“车”，动词可以是某个词。
- en: saw or it could be the word walked now，using n ltk which i've imported here
    at。the top I'm going to go ahead and parse，this grammar and save it inside of
    this。variable called parser next my program，is going to ask the user for input
    just。like type in a sentence and dot split，will just split it on all of the spaces。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: “看”或者“走”这个词，现在使用我在顶部导入的NLTK，我将解析这个语法并将其保存在一个名为parser的变量中。接下来，我的程序将要求用户输入，像是输入一个句子，然后用split将其按空格分开。
- en: so I end up getting each of the，individual words we're gonna save that。inside
    of this list called sentence ISM，and then we'll go ahead and try to parse。the
    sentence and for each sentence we，parse we're going to pretty print it to。the
    screen just so it displays in my，terminal and we're also going to draw it。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我最终获得了每个单独的词，我们将把它们保存在一个叫做句子ISM的列表中，然后我们将尝试解析这个句子，对于我们解析的每个句子，我们将以漂亮的格式输出到屏幕上，以便在我的终端中显示，同时我们还会绘制它。
- en: it turns out that NLT Kay has some，graphics capacity so we can really。visually
    see what that tree looks like，as well and there are multiple different。ways the
    sentence might be parsed which，is why we're putting it inside of this。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_74.png)
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 结果显示NLTK有一些图形能力，因此我们可以真正可视化这个树的样子，并且句子可能被解析的方式有多种，这就是为什么我们将其放入这个。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_74.png)
- en: for loop and we'll see why that can be，helpful in a moment too so alright now，it。I'll
    CD into CFG and we'll go ahead and，run CFG 0，so it then is going to prompt me
    to type。in a sentence and let me type in a very，simple sentence something like
    she。walked for example press return so what，I get is on the left hand side you
    can。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 循环，我们稍后也会看到这有多么有用。所以好吧，现在我会进入CFG目录，我们将运行CFG 0，然后它会提示我输入一个句子，让我输入一个非常简单的句子，比如“她走了”，按回车，我得到的是在左侧你可以。
- en: see a text-based representation of the，syntax tree and on the right side here。let
    me go ahead and make it bigger we，see a visual representation of that same。syntax
    tree this is how it is that my，computer has Mia parsed the sentence she。walked
    is the sentence that consists of，a noun phrase and a verb phrase where。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下基于文本的语法树表示，右侧这里让我放大一些，我们看到同一语法树的视觉表示，这就是我的计算机如何解析句子“她走了”的，句子由名词短语和动词短语组成。
- en: each phrase is just a single noun or，verb she and then walked the same type。of
    structure we've seen before but this，now is our computer able to understand。the
    structure of the sentence to be able，to get some sort of structural。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_76.png)
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 每个短语只是一个单独的名词或动词“她”，然后是“走了”，结构与我们之前见过的相同，但这现在是我们的计算机能够理解句子的结构，以便能够获得某种结构。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_76.png)
- en: understanding of how it is the parts of，the sentence relate to each other let
    me。now give it another sentence I could try，something like she saw the city for。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_78.png)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 理解句子的部分是如何相互关联的。让我再给它另一个句子，我可以尝试“她看到了城市”这样。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_78.png)
- en: example the words we were dealing with a，moment ago and then we end up getting。this
    syntax tree out of it again a，sentence that has a noun phrase and a。verb phrase
    the noun phrase is fairly，simple it's just she but the verb phrase。is more complex
    it doesn't now saw the。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 示例我们刚才处理的词，然后我们最终得到这个语法树，它是一个包含名词短语和动词短语的句子，名词短语相对简单，就是“她”，但动词短语则更复杂，它并没有“看到”。
- en: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_80.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_80.png)'
- en: city for example and let's do one more。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_82.png)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 比如城市，让我们再做一个。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_82.png)
- en: with this grammar let's do something，like she saw a car and that is going to。look
    very similar that we also get she，but our verb phrase is now different it。saw
    a car because there are multiple，possible determiners in our language and。multiple
    possible nouns I haven't given，this grammar all that many words but if。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这个语法，让我们做一些像“她看到了一辆车”的句子，这看起来会很相似，我们得到的是“她”，但我们的动词短语现在不同，它是“看到了一辆车”，因为在我们的语言中有多个可能的限定词和名词。我没有给这个语法太多词汇，但如果有的话。
- en: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_84.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_84.png)'
- en: I gave it a larger vocabulary it would，then be able to understand more and more。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_86.png)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我给它提供了更大的词汇量，它就能理解越来越多的内容。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_86.png)
- en: different types of sentences and just to，give you a sense of some added。complexity
    we could add here the more，complex our grammar the more rules we。Adam the more
    different types of，sentences will then have the ability to。generate so let's take
    a look at CFG one，for example where I've added a whole。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 不同类型的句子，给你增加一些复杂度的感觉，我们可以在这里添加更多的复杂性，我们的语法越复杂，规则越多，我们将能够生成更多不同类型的句子。所以让我们看一下CFG一个例子，我添加了一个完整的。
- en: number of other different types of rules，I've added adjective phrases where
    we。could have multiple adjectives，inside of a noun phrase as well so a。noun phrase
    could be like an adjective，phrase followed by a noun phrase if I。wanted to say
    something like the big，city that's an adjective phrase followed。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我添加了一些其他不同类型的规则，比如形容词短语，我们可以在名词短语中有多个形容词，因此名词短语可以像形容词短语后面跟着名词短语，如果我想说像“大城市”，那是一个形容词短语，后面跟着。
- en: by a noun phrase or we could also have a，noun and a prepositional phrase so
    the。car on the street for example on the，street is a prepositional phrase and
    we。might want to combine those two two，ideas together，because the car on the street
    can still。operate as something kind of like a noun，phrase as well so no need to
    understand。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 可以是一个名词短语，或者我们也可以有一个名词和一个介词短语，例如“街上的车”，其中“在街上”是一个介词短语，我们可能想将这两个想法结合在一起，因为“街上的车”仍然可以作为一种名词短语，因此无需理解。
- en: all of these rules in too much detail it，starts to get into the nature of English。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_88.png)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 如果详细讲解所有这些规则，它就开始涉及到英语的本质。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_88.png)
- en: grammar but now we have a more complex，way of understanding these types of。sentences
    so if I run Python CFG one and，I can try typing something like she saw。the wide
    street for example a more。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_90.png)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 语法，但现在我们有了一种更复杂的方式来理解这些类型的句子，因此如果我运行Python CFG 1，我可以尝试输入一些像“她看到了宽街”的句子，例如一个更。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_90.png)
- en: complex sentence and if we make that，larger you can see what this sentence。looks
    like I'll go ahead and shrink it a，little bit so now we have a sentence。like this
    she saw the wide street the，wide street is one entire noun phrase。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_92.png)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 复杂的句子，如果我们让它变大，你可以看到这个句子是什么样的。我会把它缩小一点，所以现在我们有了这样一个句子：她看到了宽街，宽街是一个完整的名词短语。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_92.png)
- en: saw the wide street is an entire verb，phrase and she saw the wide street ends。up
    forming that entire sentence so let's，take a look at one more example to。introduce
    this notion of ambiguity so I，can run Python CFG one let me type a。sentence like
    she saw a dog with，binoculars so there's our sentence and。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: “看到了宽街”是一个完整的动词短语，而“她看到了宽街”最终形成整个句子。让我们再看一个例子，介绍这种模糊性的概念，所以我可以运行Python CFG 1，让我输入一个像“她看到了带望远镜的狗”的句子，所以这是我们的句子。
- en: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_94.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_94.png)'
- en: here now is one possible syntax tree to，represent this idea she saw the noun。phrase
    a dog and then the prepositional，phrase with binoculars and the way to。interpret
    the sentence is that what it，is that she saw was a dog and how did。she do the
    seeing she did the seeing，with binoculars and so this is one。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个可能的语法树，表示这个想法：她看到了名词短语“狗”，然后是带有望远镜的介词短语，句子的解释是她看到的是一只狗，而她是如何看到的，她是用望远镜看到的，因此这是一个。
- en: possible way to interpret this she was，using monocular ISM using those。binoculars
    she saw a dog but another。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_96.png)
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 解释她是如何使用单目望远镜的，使用那些望远镜她看到了狗，但另一个。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_96.png)
- en: possible way to parse that sentence，would be with this tree over here where。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_98.png)
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 解析该句子的一个可能方式是这里的树。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_98.png)
- en: you have something like she saw a dog，with binoculars where a dog with。binoculars
    forms an entire noun phrase，of its own same words in the same order。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_100.png)
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以说她看到了一只带望远镜的狗，其中“带望远镜的狗”形成了一个完整的名词短语，使用相同的词，顺序也相同。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_100.png)
- en: but a different grammatical structure，where now we have a dog with binoculars。all
    inside of this noun phrase meaning，what did she see what she saw was a dog。and
    that dog happened to have binoculars，with the dog so different ways to parse。the
    sentence structures for the sentence，even given the same possible sequence of。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 但不同的语法结构，现在我们有一个带着望远镜的狗。所有这些名词短语意味着她看到了什么，她看到的是一只狗，而那只狗恰好有望远镜，因此解析这个句子的不同方式，即便给定相同的可能顺序。
- en: words and NLT Kay's algorithm in this，particular algorithm has the ability to。find
    all of these to be able to，understand the different ways that you。might be able
    to parse the sentence，and be able to extract some sort of。useful meaning out of
    that sentence as，well so that then is a brief look at。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 单词和NLTK的算法在这个特定的算法中具有能力，能够找到所有这些，以理解不同的解析句子的方式，并能够提取出一些有用的含义。因此，这就是对的简要概述。
- en: what we can do using getting that the，structure of language of using these。context-free
    grammar rules to be able to，describe the structure of language but。what we might
    also care about is，understanding how it is that these。sequences of words are likely
    to relate，to each other in terms of the actual。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用这些上下文无关的语法规则来获取语言的结构，以描述语言的结构。但我们可能还关心的是理解这些单词序列在实际中是如何相互关联的。
- en: words of themselves the grammar that we，saw before，could allow us to generate
    a sentence。like I ate a banana for example where I，is the noun phrase and ate
    a banana is a。verb phrase but it would also allow for，sentences like I ate a blue
    car for。example which is also syntactically，well-formed according to the rules
    but。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 单词本身的语法使我们之前看到的，能够生成一个句子，比如“我吃了一个香蕉”，其中“我”是名词短语，而“吃了一个香蕉”是动词短语，但它也允许生成像“我吃了一辆蓝色的车”这样的句子，这在语法上也是符合规则的。
- en: it's probably a less likely sentence，that a person is likely to speak and we。might
    want for our AI to be able to，encapsulate the idea that certain。sequences of words
    are more or less，likely than others so to deal with that。we'll introduce the notion
    of an Engram。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能是一个人不太可能说的句子，我们可能希望我们的AI能够封装某些单词序列比其他序列更可能或更不可能的概念。因此，为了处理这一点，我们将引入Engram的概念。
- en: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_102.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/559ba0d11d051ef75d0b13fef6ef5ac7_102.png)'
- en: and an Engram more generally just refers，to some sequence of n items inside
    of。our text and those items might take，various different forms we can have a。character
    engrams which are just a，contiguous sequence of n characters so。three characters
    in a row for example of，four characters in a row we can also。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 更普遍地说，Engram指的是我们文本中的某些n个项目的序列，这些项目可能采取不同的形式。我们可以有字符Engrams，它只是n个字符的连续序列，例如，三个连续的字符或四个连续的字符。
- en: have word engrams which are a contiguous。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_104.png)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 有单词Engrams，它们是连续的。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_104.png)
- en: sequence of n words in a row from a，particular sample of text and these end。up
    proving quite useful and you can，choose our n to decide like how many our。sequence
    going to be so when n is 1，we're just looking at like a single word。or a single
    character and that is what，we might call a unigram just one item if，words。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 从特定文本样本中提取的n个连续单词序列，这证明非常有用，你可以选择n来决定我们的序列会有多少。当n为1时，我们只是在查看一个单词或一个字符，这就是我们可能称之为单元组（unigram）的东西，仅一个项目。
- en: that's generally called a bigram so an，Engram where n is equal to two looking。at
    two words that are consecutive and，then if there are three items you might。imagine
    will often call those trigrams，so three characters in a row or three。words that
    happen to be in a contiguous，sequence and so if we took a sentence。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常被称为二元组，所以一个Engram当n等于二时，查看两个连续的单词。如果有三个项目，你可能想象称之为三元组，所以是三个连续的字符或三个恰好在一个连续序列中的单词。如果我们取一个句子。
- en: for example here's a sentence from again，Sherlock Holmes how often have I said
    to。you that when you have eliminated the，impossible whatever remains no matter。however
    improbable must be the truth，what are the trigrams that we can。extract from the
    sentence if we're，looking at sequences of three words well。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，这里有一句来自《福尔摩斯探案集》的句子：“我多久说过你，当你排除了不可能的事情，剩下的无论多么不可能的都必须是真相。”如果我们查看三个单词的序列，可以提取出哪些三元组。
- en: the first trigram would be how often，have just the sequence of three words。and
    then we can look at the next trigram，often have I the next trigram is have I。said
    then I said to said to you to you，that for example those are all trigrams。of words
    sequences of three contiguous，words that show up in the text and。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个三元组将是这三个单词的序列出现的频率，然后我们可以查看下一个三元组，通常是“我”，下一个三元组是“我说”，接着是“我说了”，这都是三元组，显示在文本中的三个连续单词序列。
- en: extracting those diagrams and trigrams，or engrams more generally turns out to。be
    quite helpful because often when，we're dealing with analyzing a lot of。text it's
    not going to be particularly，meaningful to it for us to try and。analyze the entire
    text at one time but，instead we'll want to segment that text。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 提取这些图表和三元组或更一般的n-gram，结果证明是非常有帮助的，因为当我们分析大量文本时，一次性分析整个文本并不特别有意义，而是我们希望对文本进行分段。
- en: into pieces that we can begin to do some，analysis of that our AI might never
    have。seen this entire sentence before but，it's probably seen the trigram to you。that
    before because to you that is，something that might have come up in。other documents
    that Rai has seen before，and therefore it knows a little bit。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 将其拆分成我们可以开始进行一些分析的片段，尽管我们的AI可能从未见过这整个句子，但它可能见过“对你来说”这个三元组，因为“对你来说”是可能在Rai之前见过的其他文档中出现的，因此它知道一些。
- en: about that particular sequence of three，words in a row or something like have
    I。said another example of another sequence，of three words that's probably quite。popular
    in terms of where you see it，inside the English language so we'd like。some way
    to be able to extract these，sorts of engrams and how do we do that。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 关于那个特定的三个单词的序列，或者像我提到的另一个三个单词的序列，这在英语中是相当常见的，因此我们希望能够提取这些类型的n-gram，我们该如何做到这一点？
- en: how do we extract like sequences of，three words well we need to take our。input
    and somehow separate it into all，of the individual words and this is the。process
    generally known as tokenization。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_106.png)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们如何提取三个单词的序列？我们需要将输入以某种方式拆分为所有单独的单词，这个过程通常被称为标记化。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_106.png)
- en: the task of splitting up some sequence，into distinct pieces where we call those。pieces
    tokens most commonly this refers，to something like word tokenization I。have some
    sequence of text and I want to，split it up into all of the words that。show up
    in that text but it might also，come up in the context of something like。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 将某个序列拆分成独特的片段，我们称这些片段为标记，最常见的是指单词标记化。我有一些文本序列，我想将其拆分为该文本中出现的所有单词，但这也可能出现在诸如句子标记化的上下文中。
- en: sentence tokenization I have a long，sequence of texts and I'd like to split。it
    up into sentences for example and so，how might word tokenization work the。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_108.png)
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我有一长串文本，我想将其拆分为句子。例如，单词标记化如何运作？ ![](img/559ba0d11d051ef75d0b13fef6ef5ac7_108.png)
- en: task of splitting up our sequence of，characters into words，well we've also already
    seen this idea。we've seen that in word tokenization，just a moment to go，I took
    an input sequence and I just。called pythons split method on it or the，split method
    took that sequence of words。and just separated it based on where the，spaces show，in
    that word and so if I had a sentence。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的字符序列拆分成单词的任务，我们已经看到了这个想法。在单词标记化中，刚才我对输入序列调用了Python的拆分方法，或者说拆分方法根据空格的出现将那个单词序列分开。如果我有一句话。
- en: like whatever remains however improbable。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_110.png)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 像“无论剩下什么，尽管不太可能”。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_110.png)
- en: must be the truth how would I tokenize，this well the naive approach is just
    to。say anytime you see a space go ahead and，split it up we're gonna split up this。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_112.png)
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: “必定是真理”，我该如何标记化这个？简单的方法是说，每当你看到一个空格，就去拆分它。我们将拆分这个。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_112.png)
- en: particular string just by looking for，spaces and what we get when we do that。is
    a sentence like this whatever remains，however improbable must be the truth but。what
    you'll notice here is that if we，just split things up in terms of where。the spaces
    are we end up like keeping，the punctuation around there's a comma。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 仅通过查找特定字符串和空格，我们得到的结果是一句话，诸如“无论剩下什么，尽管不太可能，必定是真理”。但你会注意到，如果我们仅仅根据空格的位置来拆分，我们会保留标点符号，比如有一个逗号。
- en: after the word remains there's a comma，after improbable a period after truth。and
    this poses a a little bit of a，challenge when we think about trying to。tokenize
    things into individual words，because if you're comparing words to。each other this
    word truth with a period，after it if you just string compare it。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在“剩下的”之后有一个逗号，在“不太可能”之后有一个句号，在“真理”之后有一个句号。当我们考虑将内容标记化为单独的单词时，这会带来一些挑战，因为如果你将单词彼此进行比较，这个带句号的“真理”如果仅进行字符串比较。
- en: it's going to be different from the word，truth without a period after it and
    so。this punctuation can sometimes pose a，problem for us and so we might want some。way
    of dealing with it either treating，punctuation as a separate token。altogether
    or maybe removing that，punctuation entirely from our sequence。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 这将与没有句号的“truth”一词有所不同，因此这个标点有时会给我们带来问题，所以我们可能希望以某种方式处理它，要么将标点视为一个完全独立的标记，要么也许完全从我们的序列中移除该标点。
- en: as well so that might be something we，want to do but there are other cases。where
    it becomes a little bit less clear，o'clock，Sherlock Holmes stepped briskly into
    the。room well this apostrophe after 9，o'clock all right after the O in 9。o'clock
    is that something we should，remove should we split based on that as。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 还有，这可能是我们想要做的事情，但在其他情况下，它变得有些不清晰，点钟，福尔摩斯先生迅速走进房间，嗯，这个在9点钟后的撇号，好的，在9点钟的O后面，这是否是我们应该去掉的？我们应该基于这个来分开吗？
- en: well in - oh and clock there are some，interesting questions there too and it。gets
    even trickier if you begin to think，about like hyphenated words something。like
    this where we have a whole bunch of，words that that are hyphenated and then。you
    need to make a judgment call is that，a place where you're going to split。
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，哦，时钟那里也有一些有趣的问题，如果你开始考虑像连字符单词这样的东西，那就更棘手了，像这样，我们有一堆连字符的词，然后你需要做出判断，这是一个分开的地方吗。
- en: things apart into individual words or，are you going to consider frock-coat and。well-cut
    and pearl-grey to be individual，words of their own and so those tend to。post challenges
    that we need to somehow，deal with and something we need to。decide as we go about
    trying to perform，this kind of analysis similar challenges。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 将内容拆分为独立单词，还是要把frock-coat、well-cut和pearl-grey视为独立的词，所以这些往往会带来我们需要处理的挑战，这也是我们在尝试执行这种分析时需要做出的决定，类似的挑战。
- en: arise when it comes to the world of，sentence tokenization imagine this。sequence
    of sentences for example if you，take a look at this particular sequence。of sentences
    and you could probably，imagine you could extract the sentences。pretty readily
    here is one sentence and，here is a second sentence so we have two。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在句子标记化的世界中会出现，当涉及到这段句子的序列时，想象一下这个句子序列，例如，如果你看看这个特定的句子序列，你可能会想象你可以相当容易地提取句子，这里是一个句子，这里是第二个句子，所以我们有两个。
- en: different sentences inside of this，particular passage，and the distinguishing
    feature seems to。be like the period that a period，separates one sentence from
    another and。maybe there are other types of，punctuation you might include here
    as。well an exclamation point for example or，a question mark but those are the
    types。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定段落中的不同句子，其区分特征似乎是句号，句号将一个句子与另一个句子分开，也许还有其他类型的标点符号，比如感叹号或问号，但这就是这些类型。
- en: of punctuation that we know tend to come，at the end of sentences but it gets。trickier
    again if you look at a sentence，like this not just sure talking to。Sherlock but
    instead of talking to，Sherlock talking to mr。Holmes well now。we have a period
    at the end of mr。 and，so if you were just separating on。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道的标点符号通常出现在句子的末尾，但如果你看看像这样的句子，那就更棘手了，不仅仅是与福尔摩斯对话，而是与霍尔姆斯先生对话，现在，我们在霍尔姆斯先生后面有一个句号，所以如果你只是基于。
- en: periods you might imagine this would be，a sentence and then just Holmes would
    be。a sentence and then we'd have a third，sentence down below things do get a。little
    bit trickier as you start to，imagine these sorts of situations and。dialogue to
    notes to make this trickier，as well that if you have a these sorts。
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 句号你可能会想象这将是一个句子，然后霍尔姆斯会是一个句子，接着我们会有第三个句子，事情确实变得有些棘手，当你开始想象这些情况时，以及对话会使这变得更加复杂，如果你有这些。
- en: of lines that are inside of something，that he said for example that he said。this
    particular sequence of words and，this particular sequence of words。they're interesting
    challenges that，arrives there too in terms of how it is。that we take the sentence
    and split it，up into individual sentences as well and。
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 里面的行分开，比如说他所说的，这个特定的词序列，以及这个特定的词序列。它们提出了有趣的挑战，涉及到我们如何将句子分开成独立的句子。
- en: these are just things that our algorithm，needs to decide in practice they're。usually
    some heuristics that we can use，and we know there are certain。occurrences of periods
    like the period，after mr。when other examples where we。know that is not the beginning
    of a new，sentence and so we can encode those。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这些都是我们的算法在实际中需要决定的内容，通常我们可以使用一些启发式方法，我们知道某些句点的出现，例如Mr.之后的句点，作为其他例子，我们知道这不是新句子的开始，因此我们可以对其进行编码。
- en: rules into our AI to allow it to be able，to do this tokenization the way that
    we。wanted to so once we have these two，ability to tokenize a particular passage。take
    the passage split it up in，individual words from there we can begin。to extract
    what the engrams actually are，so we can actually take a look at this。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 将规则融入我们的AI，以使其能够以我们想要的方式进行标记化，因此一旦我们具备了标记特定段落的能力，就可以将段落拆分成单个单词，从而开始提取实际的ngrams，我们可以真正看看这些内容。
- en: by going into a Python program that will，serve the purpose of extracting these。engrams
    and again we can use n ltk the，natural language toolkit in order to。help us here
    so we'll go ahead and go，into engrams and we'll take a look at。Engram spy and
    what we have here is we，are going to take some corpus of text or。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 通过进入一个Python程序来提取这些ngrams，我们可以使用NLTK，自然语言工具包来帮助我们，因此我们将进入ngrams，查看Engram spy，我们将使用一些文本语料库。
- en: some sequence of documents and use all，those documents and extract what the。most
    popular engrams happen to be so in，order to do so we're going to head it go。ahead
    and load data from a directory，that we specify as a command that。argument will
    also take in a number n as，a command-line argument as well in terms。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 一些文档的序列，使用所有这些文档，并提取最流行的ngrams，因此为了实现这一点，我们将加载从一个我们指定的目录的数据，这个命令行参数还将接受一个数字n。
- en: of what our number should be in terms of，how many sequences words we're going
    to。look at in sequence then we're going to，go ahead and just count up all of the。NLT
    K dot Engram so we're gonna look at，all of the engrams across this entire。corpus
    and save it inside this variable，engrams and then we're gonna look at the。
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 关于我们应该在多少序列单词中查看，那么我们就会计算所有的NLTK点ngrams，因此我们将查看整个语料库中的所有ngrams，并将其保存在变量ngrams中，然后我们将查看这些内容。
- en: most common ones and go ahead and print，them out and so in order to do so I'm。not
    only using NLT Kay and I'm also，using counter which is built into Python。as well
    where I can just count up how，many times do these various different，engrams。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_114.png)
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 最常见的那些，并打印出来，因此为了做到这一点，我不仅在使用NLTK，还在使用内置于Python中的Counter，我可以计算这些不同ngrams出现的次数。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_114.png)
- en: appear so we'll go ahead and show that，will go into engrams and I'll say。something
    like python engrams and let's，just first look for the unigram。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_116.png)
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 因此我们将进入ngrams，我会说一些类似于python ngrams的内容，我们先来看unigram。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_116.png)
- en: sequences of one word inside of a corpus，and the corpus that I've prepared is
    I。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_118.png)
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个语料库中，单个词的序列，而我准备的语料库是I。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_118.png)
- en: have all of the or some of these stories，from Sherlock Holmes all here where
    each。one is just you know one of the Sherlock，Holmes stories and so I have a whole。bunch
    of text here inside of this corpus，and I'll go ahead and provide that。corpus as
    a command-line argument and，now what my program is going to do is。
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我有所有这些故事，来自福尔摩斯的故事，每一个都是福尔摩斯故事中的一部分，所以我在这个语料库中有很多文本，我将作为命令行参数提供这个语料库。
- en: it's going to load all of the Sherlock，Holmes stories into memory or all the。ones
    that I've provided in this corpus，at least and it's just going to look for。the
    most popular unigram and those，popular sequences of one word and it。seems the
    most popular one is just the，word though used 97 hundred times and。
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 它将把所有福尔摩斯的故事加载到内存中，或者至少加载我在这个语料库中提供的那些内容，它将查找最流行的unigram，这些流行的单词序列，似乎最流行的就是那个词，使用了9700次。
- en: followed by I used five thousand times，and used about five thousand times the。kinds
    of words you might expect so now，let's go ahead and check for buy grams。for example
    and grams to Holmes and all，right again sequences of two words now。that appear
    multiple times of the in the，it was to the it is I have some one and。
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来我用了五千次，使用了大约五千次你可能预期的单词。那么现在，让我们检查一下买grams，例如**福尔摩斯**的二元组，现在再次出现的两个单词序列。
- en: so forth these are the types of bye，Gramps that happen to come up quite。often
    inside this corpus of an inside of，the Sherlock Holmes stories and it。probably
    is true across other corpuses，as well but we could only find out if we。actually
    test in it and now just for，good measure let's try one more maybe。
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是出现频率较高的**bye，Gramps**类型，通常出现在**福尔摩斯**故事的语料库中，这在其他语料库中也可能是真的，但我们只有在实际测试后才能确认。为了保险起见，我们再试一次。
- en: try three looking out for trigrams that，happen to show up and now we get like
    it。was one of the I think that out of these。![](img/559ba0d11d051ef75d0b13fef6ef5ac7_120.png)
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试寻找三元组，这些三元组可能会出现，现在我们看到它们像是出现了其中之一，我认为在这些中！[](img/559ba0d11d051ef75d0b13fef6ef5ac7_120.png)
- en: are sequences of three words now that，happen to come up multiple times across。
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 是由三个单词组成的序列，现在它们在多个地方出现。
