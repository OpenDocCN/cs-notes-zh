- en: 哈佛 CS50-WEB ｜ 基于Python ／ JavaScript的Web编程(2020·完整版) - P26：L8- 拓展性与安全 3 (数据库，JS)
    - ShowMeAI - BV1gL411x7NY
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈佛 CS50-WEB ｜ 基于Python ／ JavaScript的Web编程(2020·完整版) - P26：L8- 拓展性与安全 3 (数据库，JS)
    - ShowMeAI - BV1gL411x7NY
- en: in with a username and a password for，example and so how might we represent。that
    information about users and their，passwords well one way would be just a。stored
    inside of a table like this，here's a table of user isn't every user。has an ID
    they have a username and they，have a password but this turns out to be。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，用户和密码的相关信息可以用一个这样的表来表示：每个用户都有一个ID，一个用户名和一个密码，但这被证明是非常不安全的存储方式。
- en: an incredibly insecure way to store，passwords to be storing passwords in。what
    might be called plain text just to，literally store the passwords inside of。a database
    and we should never do this，in practice because of the security。vulnerabilities
    associated with it if，ever someone were to unauthorised get。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 将密码存储为所谓的明文，字面上就是将密码存储在数据库中，这种做法在实践中应当避免，因为存在安全漏洞，如果有人未经授权获取。
- en: access to this database they would be，able to see all of the passwords for all。of
    the users so if this database ever，leaked for whatever reason suddenly all。of
    these passwords are now known and，this kind of thing does happen that if。companies
    are not careful about how they，represent usernames and passwords inside。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果他们访问这个数据库，就能够看到所有用户的密码，所以如果这个数据库因为某种原因泄露，所有这些密码将会被公开，这种情况确实会发生，如果公司不小心处理用户名和密码。
- en: of their databases 'm and if ever，there's sort of some sort of database。leak
    suddenly a whole bunch of passwords，and could potentially be compromised and。it's
    for that reason that the，recommended approach rather than store。an actual password
    is to store a hashed，version of the same password using a。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在他们的数据库中，如果发生某种数据库泄露，突然会有一大堆密码可能会被泄露。因此，推荐的方法是存储密码的哈希版本，而不是实际的密码。
- en: hash function where a hash function in，this context is some function that takes。a
    password as input and outputs some，hash some sequence of characters and。numbers
    in this case that represents，that particular password a hashed。version of the
    password but the，important thing about this hash function。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 哈希函数在这个上下文中是一个将密码作为输入并输出某个哈希、一系列字符和数字的函数，这个哈希代表特定的密码。
- en: is that it's a one-way hash function，from the password you can get to the。sequence
    of letters and numbers but it，is very very difficult to go the other，way around。to
    use this information to figure out，what the original password actually was。and
    so what this means is that the，companies won't actually know what any。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 是因为它是一个单向哈希函数，从密码可以得到一系列字母和数字，但要反向推导原密码是非常非常困难的。因此，这意味着公司实际上不会知道任何密码的真实内容。
- en: particular user's password is when a，user tries to log in what we'll do is。take
    their password if they're trying to，login with will hash it and compare that。hash
    against the hash that we've stored，in the database if the hash is match up。that
    means the user probably typed in，their password correctly and therefore。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于特定用户的密码，当用户尝试登录时，我们会取他们的密码并进行哈希处理，然后将这个哈希与我们在数据库中存储的哈希进行比较，如果哈希匹配，那么这意味着用户可能正确输入了他们的密码。
- en: we can sign the user in and otherwise，that's a sign that the user did not type。their
    password in correctly，so this then is the reason why companies。if they're obeying
    these best practices，usually can't tell you what your。password actually is if
    you forget your，password if you forget your password the。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以让用户登录，反之则意味着用户没有正确输入密码，因此这就是为什么公司如果遵循这些最佳实践，通常无法告诉你你的密码是什么。如果你忘记了密码。
- en: company will let you reset your password，they can update the data inside of
    the。table but the company won't be able to，tell you what your password actually
    is。because the company doesn't know your，password the company only knows some。hashed
    version of the password some，result of passing that password through。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 公司会让你重置密码，他们可以更新表中的数据，但公司无法告诉你你的密码实际上是什么，因为公司并不知道你的密码，只知道某个哈希版本。
- en: a hash function and as a result they're，able to know whether you logged in。successfully
    or not with the correct，credentials without actually knowing。what your password
    actually is and so，this is another area where you might。imagine that if you're
    not careful about，how you're storing this data it could be。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个哈希函数的存在使得他们能够知道你是否成功登录，使用的是正确的凭证，而实际上并不知道你的密码是什么。因此，如果不小心存储这些数据，这将是另一个需要注意的领域。
- en: a security vulnerability inside of your，program wherever that data is leaked，passwords。suddenly
    become known and there are，other more subtle ways that web。applications could
    potentially leak，information that you as the web。developer need to decide if you're
    ok，with or not imagine a website for。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的程序内部存在安全漏洞，无论数据在哪里泄露，密码都会突然变得可知，并且还有其他更微妙的方式，网络应用可能会泄露信息，而你作为网页开发者需要决定是否能接受。
- en: example where you do have a place where，you can say if you forgot your password。you
    can be sent a place where you can，reset your password for example you。might imagine
    that if you type in your，email address click reset password you。![](img/612830d9e0c6e8e6e092a38f9678a7fb_1.png)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，如果你有一个可以让你重置密码的地方，你可以想象如果你输入你的电子邮件地址并点击重置密码，可能会发送给你一个链接。![](img/612830d9e0c6e8e6e092a38f9678a7fb_1.png)
- en: might get a message like all right，password reset email has been sent but。you
    might imagine typing in an email，address and getting something like error。there
    is no user with that email address，and here again is a potential security。vulnerability
    in terms of leaked，information this page that just seems to。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会收到一条消息，比如“好的，密码重置邮件已发送”，但你也可能想象输入一个电子邮件地址后收到“没有该电子邮件地址的用户”之类的错误消息，这同样是一个潜在的安全漏洞，泄露了信息。
- en: send you an email if you forgot your，password is now leaking information。about
    which users happen to have，accounts on your website in which users。do not because
    all someone needs to do，is type in an email address and find out。whether it results
    in an error or not in，order to know whether a user happens to。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你忘记密码，发送给你一封电子邮件现在泄露了关于哪些用户在你的网站上拥有账户的信息，以及哪些用户没有，因为任何人只需输入一个电子邮件地址，看看是否会导致错误，以了解某用户是否存在。
- en: have an account on the website or not，and maybe that's not a big deal if。that's
    not something you care about，securing but if it's a website where you。do care
    about making sure that if，someone has an account or doesn't have。an account that
    information is kept，private and secure only to the user。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 不论你是否在网站上拥有账户，如果你不在意保护这些信息，那么这可能不是大问题，但如果你在乎确保某人是否有账户，或者没有账户，这些信息应该保持私密和安全，只对用户开放。
- en: unless they want to share it well then，this type of page this type of interface。with
    the database could potentially be，leaking that kind of information an。information
    can be leaked in all sorts，of different ways you can even leak。information just
    based on the time it，takes for the database to be able to，respond。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 除非他们想分享，否则这种类型的页面和数据库接口可能会泄露这类信息，信息可以通过各种不同的方式泄露，甚至仅仅基于数据库响应所需的时间。
- en: to a particular request that you might，imagine if you make a request about a。user
    and it takes longer to respond that，might tell you something about the。number
    of database queries it needs to，run or the amount of information that's。stored
    about that user as opposed to if，a request takes less time so even。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你发出一个特定请求，你可能会想象，如果你针对一个用户发出请求并且响应时间较长，这可能会告诉你需要运行的数据库查询数量或关于该用户存储的信息量，而如果请求时间较短则不会如此。
- en: something like how many milliseconds it，takes for a web server to respond to
    a。request can reveal or leak information，about the data that is stored inside
    of。the database and there have been，examples of researchers who actually try。and
    see what information they can get，just from looking at these kinds of。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于一个网络服务器响应请求所需的毫秒数，可以揭示或泄露关于存储在数据库中的数据的信息，已经有研究者尝试仅通过观察这些信息获取相关数据的例子。
- en: information that it doesn't seem like，would leak information but might。actually
    reveal information as well now，another concern when dealing with sequel。and databases
    we've talked about is the，context of sequel injection this threat。where if you're
    not careful but how it，is that you run your sequel code you。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 信息看似不会泄露，但实际上可能会揭示信息。处理 SQL 和数据库时，另一个关注点是 SQL 注入的背景，这种威胁在于如果你不小心运行 SQL 代码。
- en: could inadvertently end up executing，code that you don't mean to be executed。situations
    like here we're in a username，and password field we've seen this。example before
    or if a user tries to log，in you might imagine a query like this。is run selecting
    from the users table，where username equals whatever was typed。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 可能不小心执行你不希望执行的代码。就像在用户名和密码字段的情况一样，我们以前见过这个例子，或者如果用户尝试登录，你可以想象这样的查询正在运行，从用户表中选择，用户名等于用户输入的内容。
- en: in as the user name and password equals，whatever was typed in as the password。and
    we saw how for a normal user someone，who types in like Harry and one two。three
    four five as their username and，password and that this type of query。works just
    fine but if a hacker tries to，log into a website and maybe includes a。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户名和密码等于用户输入的密码时，我们看到，对于普通用户，输入如 Harry 和一二三四五作为用户名和密码的查询可以正常工作。但如果黑客尝试登录网站，可能会包含一个。
- en: double quotation mark and two hyphens，for example where two hyphens mean a。comment
    in sequel and we were to，literally substitute these values into。our sequel queries
    well then you might，end up substituting hacker - - - -。creating a comment that
    ignores the rest，of this query effectively ignoring any。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，双引号和两个连字符，其中两个连字符表示 SQL 中的注释。如果我们将这些值字面替换到 SQL 查询中，你可能会不小心替换成黑客————，创建一个注释，从而有效忽略查询的其余部分。
- en: kind of password checking that we might，want our web application to be doing
    so。this - another vulnerability that comes，about whenever we're dealing with。executing
    sequel code inside of a，database and in order to deal with this。we want to make
    sure that we're escaping，any of these potentially dangerous。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能希望我们的 Web 应用程序进行的密码检查类型。因此，这是一种在处理数据库中执行 SQL 代码时可能出现的另一种脆弱性。为了解决这个问题，我们要确保对这些潜在危险的内容进行转义。
- en: characters that might show up inside of，our sequel queries and Django's models。do
    this for us that when we do these，kinds of queries using Django saying。like dot
    objects dot filter to be able，to filter out for only certain versions。of a particular
    model it is going to，take care of the process of making sure。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的 SQL 查询和 Django 的模型中，可能会出现这些字符。当我们使用 Django 进行这些查询时，比如使用 `dot objects dot
    filter` 来过滤特定版本的模型时，它将处理确保的过程。
- en: that it's not subject to，these kinds of sequel injection attacks，but if ever
    you're writing a web。application that is directly executing，sequel code which
    you might imagine。doing you do want to be careful about，making sure that you're
    not exposing the。application to be vulnerable to these，kinds of threats as well
    so that then。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会受到这类 SQL 注入攻击的影响，但如果你正在编写一个直接执行 SQL 代码的 Web 应用程序，你可能会想象到这一点。在这方面，你需要小心，以确保你的应用程序不易受到这些威胁的影响。
- en: our potential threats to come about when，we're just talking about what's。happening
    on the server but we also can，think about what might happen when we're。interacting
    with other servers when，we're interacting with api's for example。and so we talked
    about JavaScript and，using javascript to be able to make。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论服务器上发生的事情时，潜在威胁就会出现。但我们也可以考虑与其他服务器交互时可能发生的情况，比如与 API 的交互。因此，我们讨论了 JavaScript，以及如何使用
    JavaScript。
- en: additional requests to api's or to other，services that are able to return back。with
    certain types of information and，with API is there are a number of。![](img/612830d9e0c6e8e6e092a38f9678a7fb_3.png)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 API 或其他能够返回特定类型信息的服务的额外请求，存在一些潜在的威胁。![](img/612830d9e0c6e8e6e092a38f9678a7fb_3.png)
- en: techniques that we can use in api's to，allow them to be more scalable to allow。them
    to be more secure one is this，notion of rate limiting where we might。want to make
    sure that no user is able，to make more than a certain number of。requests to an
    API in any Pernik，particular amount of time this is in。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 API 中使用的一些技术可以使它们更具可扩展性和安全性。其中一种是速率限制的概念，我们可能希望确保没有用户能够在特定时间内向 API 发送超过一定数量的请求。
- en: response to a security threat that has，to do with the scalability of a system。which
    is known as or denial of，service attack where effectively if you。just make a whole
    bunch of requests to a，single server over and over and over。again you could potentially
    shut down，that system because you're making so。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 响应与系统的可扩展性相关的安全威胁。这被称为拒绝服务攻击，如果您。多次向单个服务器发出大量请求，您可能会潜在地关闭。该系统，因为您发出如此多的请求。
- en: many requests that it's not able to，handle that many requests all at the。same
    time and for that reason because，it's so easy to make an API request you。can do
    so using just a single line of，like Python or JavaScript for example。the api's
    will often Institute some kind，of rate limiting to limit the number of。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 许多请求，它无法同时处理这么多请求，出于这个原因，因为。发出API请求是如此简单，您可以仅使用一行。像Python或JavaScript等语言。例如，api通常会实施某种速率限制，以限制数量。
- en: requests you can make so that you're not，going to overwhelm the server or。overwhelm
    the database that needs to be，queried in order to respond to those。requests and
    so this kind of limiting，might work as well api's might also want。to add some
    kind of route authentication，you might not want everybody to access。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 要求您可以提出，以便您不会压倒服务器或。压倒需要被查询的数据库，以回应这些。请求，因此这种限制可能有效，api也可能希望。添加某种路由身份验证，您可能不希望每个人都能访问。
- en: the same data by an API maybe there's，some sort of permission model where only。certain
    users are able to access certain，pieces of data from the API so you might。imagine
    that a user needs to have an API，key for example some effectively like a。password
    that they need to pass around，anytime they're making an API request to。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 通过API访问相同的数据，也许有某种权限模型，只有。特定用户能够访问API中的特定。数据，因此您可能想象用户需要一个API。密钥，例如有效地像一个。密码，他们需要在每次发出API请求时传递。
- en: your API and that allows you to then be，able to look at that key and verify
    that。they are who they say they are now with，those API keys comes other potential。security
    vulnerabilities to be mindful，of one is that just as you should never。be putting
    like passwords inside of your，source code inside of your git。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您的API，这样您就可以查看该密钥并验证。它们是否如其所称。现在，随着API密钥的存在，还有其他潜在的。安全漏洞需要注意，其一是您绝对不应该。将密码放入您的源代码中，包括您的git。
- en: repository for example you likewise，generally shouldn't be putting your API。keys
    inside of your web applications as，well inside of the source code of those。web
    applications because then anyone who，has access to the source code for the。web
    application can see what your API，key is could then use the API key to。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，您通常也不应将API。密钥放入您的Web应用程序中，作为。那些Web应用程序的源代码，因为这样任何拥有。Web应用程序源代码访问权限的人都可以看到您的API。密钥，可能会使用API密钥来。
- en: pretend to be you and therefore get，access to potential API routes that they。should
    not be able to access one common，solution to this is to use what are。known as
    environment variables where，effectively you and your program say。that your API
    key is not going to be，some predetermined string that is in the。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 假装是您，因此访问潜在的API路由，这些路由您。无法访问。一个常见的解决方案是使用所谓的环境变量，实际上您和您的程序声明。您的API密钥不会是某个预定义的字符串，而是。
- en: text of your program but instead is，going to be drawn from the environment。in
    which the program is being run and，then on the server when you're running。the
    web application you'll first make，sure the server has all of those。environment
    variables set correctly so，that rather than have the API key。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 您程序中的文本，而是从环境中提取。在程序运行的环境中，您在服务器上运行。Web应用程序时，首先确保服务器已正确设置所有。环境变量，以便而不是拥有API密钥。
- en: actually in the source code of the，program the API key is simply in the。environment
    on the server where the web，application is running and the server。can just draw
    that information from the，environment so that it knows what the。API should key
    should be without the API，key actually having to be inside of the。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上在程序的源代码中，API密钥只是存储在。运行Web应用程序的服务器环境中，服务器。可以从环境中提取该信息，以便它知道。API密钥应该是什么，而不需要API。密钥实际出现在。
- en: web application source code itself and，so as we begin to deal with api's you。might
    notice that many api's will，require you to have an API key and often。it's for
    these sorts of reasons to make，sure that we're able to authenticate。users effectively
    and also to make sure，that we're able to limit users to make。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 网页应用的源代码本身，当我们开始处理API时，你可能会注意到许多API会要求你拥有一个API密钥，这通常是为了确保我们能够有效地验证用户，并限制用户的请求。
- en: sure that they're not making too many，requests to the server or to the。database
    at any particular time but this，then starts to get us into other。potential vulnerabilities
    in particular，vulnerabilities concerning JavaScript。JavaScript again as a programming，language
    that we use in order to write。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 确保他们在任何特定时间没有向服务器或数据库发送过多请求，但这开始引出其他潜在的漏洞，尤其是与JavaScript相关的漏洞。JavaScript是一种编程语言，用于编写运行在我们网页浏览器中的代码。
- en: code that runs inside of our web browser，a browser like Chrome or Safari or。something
    like that and as a result，JavaScript has a lot of power to。manipulate things on
    the page it can，simulate the clicking of buttons it can。change the content of
    what happens to be，on any particular page and as a result。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 代码在我们的网页浏览器内运行，比如Chrome或Safari，因此，JavaScript具有强大的能力来操作页面上的内容，它可以模拟按钮点击，可以改变页面上内容的显示，因此。
- en: there are many many vulnerabilities that，come about when it comes to thinking。about
    JavaScript and one such，vulnerability is this notion of，cross-site scripting that
    in general。went on your，web application you only want javascript，to run if you
    yourself have written it。cross-site scripting as a potential，threat where someone
    else might be able。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 处理JavaScript时会出现许多漏洞，其中一个漏洞是跨站脚本的概念，通常在你的网页应用中，你只希望JavaScript在你自己编写时运行。跨站脚本是一个潜在的威胁，其他人可能会在你的网页上运行JavaScript代码，而这段代码不是你自己写的。
- en: to get JavaScript code to run on your，website when it's JavaScript code that。someone
    else wrote instead of you，yourself and this is a potential。vulnerability because
    if someone else，can write the JavaScript code they can。manipulate the contents
    of what happens，to be on your website make intentionally。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个潜在的漏洞，因为如果其他人可以编写JavaScript代码，他们就可以操控你网页上发生的内容，故意造成改变。
- en: manipulate the user experience to get a，result that it's not actually desired
    so。let's go ahead and take a look and one，example of cross-site scripting all。right
    so I've prepared a web application，in advance，it's called security inside of which
    is。a single Django app called XS x XSS for，cross-site scripting and inside of
    here。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 操作用户体验以获得实际上并不期望的结果，所以我们来看看一个跨站脚本的例子。好吧，我提前准备了一个网页应用，它叫做`security`，里面有一个名为`XS`的单一Django应用，用于跨站脚本。
- en: we'll first take a look at the URLs so，there's a single URL that just allows
    us。to provide any path and then it's going，to load the index view and on the index。view
    we're gonna display an HTTP，response that says here was the path。that just happened
    to be requested so，you might imagine this is a simplified。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先查看URL，只有一个URL允许我们提供任何路径，然后它将加载索引视图，在索引视图中，我们将展示一个HTTP响应，表明刚才请求的路径是什么，所以你可以想象这是一个简化的示例。
- en: version of what you might see on other，websites for example where websites。might
    show you on any particular page，what path you're on in order to get to。that page
    some sort of indication of。![](img/612830d9e0c6e8e6e092a38f9678a7fb_5.png)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你在其他网站上可能看到的内容版本，例如，网站可能在特定页面上显示你正在访问的路径，以指示如何到达该页面的一些标识。![](img/612830d9e0c6e8e6e092a38f9678a7fb_5.png)
- en: where you are inside of this web，application so I'll go ahead and CD into。security
    and run the server Python。![](img/612830d9e0c6e8e6e092a38f9678a7fb_7.png)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个网页应用中，我将进入`security`并运行服务器Python。![](img/612830d9e0c6e8e6e092a38f9678a7fb_7.png)
- en: managed up I run server so I am now，running the server and now now I'll go。ahead
    and go into my web application，/hello for example and so what I see。here is requested
    path hello which is，what I would expect it to be I can。change it to something
    else like hi，so here's requested path hi here's hi /。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经运行了服务器，现在我将进入我的网页应用，例如`/hello`，我看到的是请求路径`hello`，这正是我所期望的，我可以把它改成其他的，比如`hi`，所以请求路径现在是`hi`。
- en: '- for example whatever page I visit it，gives me a page that says requested
    path。and then whatever path I happen to be，visiting but watch what happens if
    I try。and visit this URL instead I''m gonna，visit URL slash script alert hi and
    then。end script so I run it and suddenly an，alert shows up on my page that says
    hi。'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '- 例如，无论我访问哪个页面，它都会给我一个显示请求路径的页面，然后是我正在访问的路径，但注意当我尝试访问这个 URL 时会发生什么，我将访问 URL
    /script alert hi 然后 end script，所以我执行它，结果突然在我的页面上出现一个显示 hi 的警告。'
- en: and then press okay and it says I。![](img/612830d9e0c6e8e6e092a38f9678a7fb_9.png)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后按确定，系统显示我。![](img/612830d9e0c6e8e6e092a38f9678a7fb_9.png)
- en: requested path that alert was a，JavaScript alert it was javascript code。running
    on my web application but it was，not code that was javascript code inside。of my
    web application it was someone，else who wrote based on the URL to run。particular
    JavaScript on my particular，page and so someone linked to my web。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 请求的路径那个警告是一个 JavaScript 警告，它是在我的网络应用程序上运行的 JavaScript 代码，但并不是我应用程序内部的代码，而是基于
    URL 运行的特定 JavaScript 代码，是其他人写的，所以有人链接到了我的网页。
- en: application and passed in this script，tag as part of the URL，someone who clicked
    on that link might。have been taken to my web application，but ultimately had JavaScript
    run that。was created by someone else and that，ultimately is potentially dangerous
    it。leaves open the possibility that someone，else could run JavaScript code on
    my。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序并在 URL 中作为部分传递这个脚本标签，点击该链接的人可能会被带到我的网络应用程序，但最终运行了由其他人创建的 JavaScript，这最终是潜在危险的，它留下了其他人可以在我的网页上运行
    JavaScript 代码的可能性。
- en: page and it might not just be something，like a script you might imagine someone。not
    just displaying an alert but，modifying something inside of the Dom。changing the
    contents of the webpage，making API requests doing other types of。tasks that you
    can do using JavaScript，inside of a web browser that ultimately。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 页面可能不仅仅是你想象中的某个脚本，不只是显示一个警告，而是修改 DOM 内部的内容，改变网页的内容，进行 API 请求，执行其他你可以用 JavaScript
    在网页浏览器中完成的任务，这最终。
- en: leave my page open to potential security，vulnerabilities and so these are cases。where
    it's important to be mindful of，when you're designing these pages if。ever there's
    a possibility that someone，could inject their own JavaScript into。your page somehow
    you'll want to either，detect that or escape it in some way or。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我页面面临潜在的安全漏洞，这些都是在设计这些页面时需要谨慎考虑的情况。如果有可能有人能以某种方式将自己的 JavaScript 注入到你的页面中，你需要检测到这一点或以某种方式转义它。
- en: take other precautions to make sure that，this kind of cross-site scripting isn't。going
    to be possible you might imagine，that in a messaging application for。example if
    you're messaging back and，forth you don't want it to be the case。that if you message
    someone else some，JavaScript code that when they receive。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 采取其他预防措施，确保这种跨站脚本攻击不会发生。你可以想象，在一个消息应用程序中，如果你互相发送消息，你不希望当你向其他人发送一些 JavaScript
    代码时，接收者会执行它。
- en: it that code actually ends up running as，some JavaScript that runs on that。particular
    page you want to be sure to，escape that information so that they。just see the
    text of the JavaScript code，but the code isn't actually executed and。this is a
    similar threat to that threat，of sequel injection it all comes back to。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码实际上作为某个 JavaScript 在你想要的特定页面上运行，你需要确保转义这些信息，以便他们只看到 JavaScript 代码的文本，但代码并不会真正执行，这与
    SQL 注入的威胁类似，一切又回到了。
- en: the idea of not wanting to allow someone，else to be able to inject their own
    code。into your program you don't want someone，else to be able to inject sequel
    code。into the queries you run on your，database and you don't want someone to。be
    able to inject JavaScript code into，your web page because that leaves open。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 不希望允许其他人将自己的代码注入到你的程序中，你不希望其他人能够将 SQL 代码注入到你在数据库上运行的查询中，也不希望有人能够将 JavaScript
    代码注入到你的网页中，因为这留下了。
- en: potential security vulnerabilities as，well one type of security vulnerability。the
    Django is quite good at defending，again this is one that we've seen before。but
    we'll explore them in more detail，cross，I request forgery where you fake a。request
    to a website when you didn't，intend to actually make a request to。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 潜在的安全漏洞，其中一种安全漏洞 Django 在防御上相当有效，这种情况我们之前见过，但我们会更详细地探讨它，跨站请求伪造，在你并不打算向网站发起请求时伪造一个请求。
- en: that website so you might imagine that，if your bank for example had a URL that。allowed
    you to transfer money from one，person to another person we've talked。about this
    idea a little bit but imagine，now how you could implement this if it。really was
    just a URL that you could go，to like slash transfer and say as get。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以想象，如果您的银行有一个允许您从一个人转账到另一个人的网址。我们稍微讨论过这个想法，但想象一下如果这真的是一个可以访问的URL，比如/transfer，并说作为获取。
- en: parameters Who am I transferring money，to and what is the amount that I'm。transferring
    then someone else on some，other website could in the body of their。page just have
    a link where that link，says click here and it links to your。bank column or whatever
    your bank is，transferring money like to me in this。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 参数我正在将钱转给谁，以及我转账的金额。那么其他网站上的某个人可以在其页面的主体中有一个链接，链接文本为“点击这里”，并链接到您的银行，或者无论您的银行是什么，像是给我转账。
- en: amount and if some user unknowingly just，clicked on that link not knowing where。it
    would take them this website might be，able to forge a request to the bank make。it
    seem like the user had gone to the，bank and tried to initiate some kind of。transfer
    and ultimately tried to，transfer money and it doesn't even。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 金额，如果某个用户在不知情的情况下点击了那个链接，而不知道它将带他们去哪里，这个网站可能能够伪造对银行的请求，让它看起来像用户已经访问了银行并尝试启动某种转账，最终尝试转账，而这甚至没有。
- en: necessarily need to be in a link how，else might you get some new request to。happen
    inside of the web browser you，might imagine though it might seem a bit。strange
    to put this inside of an image，image source the source of the image is。this particular
    URL the banks transfer，page now doesn't really make any sense。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 不一定需要在链接中，您可能想象一下，虽然将其放在图像中可能有些奇怪，图像源是这个特定URL，银行的转账页面现在看起来似乎没有任何意义。
- en: the transfer page is not an image but it，doesn't matter all an image tag is
    going。to do is try to make a request to this，source URL to get that image and
    then。try to display it in the users web，browser but the first part is what's。important
    the fact that this source ends，up being requested by the web browser。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 转账页面不是图像，但这没关系，所有图像标签将尝试请求这个源URL以获取该图像，然后尝试在用户的网络浏览器中显示它，但第一部分是重要的，事实是这个源最终被浏览器请求。
- en: without the user having to click on or，do anything they might try and request。from
    your bank on flash transfer this，particular request which might initiate。some
    sort of bank transfer without the，user even realizing it and it's for that。reason
    that we generally suggest that，anytime you're recreating a website that。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 用户无需点击或做任何事情即可请求。来自您银行的快速转账，这个特定请求可能会发起某种银行转账，用户甚至没有意识到。这就是我们通常建议的原因，任何时候您重建一个网站时。
- en: is going to allow for the manipulation，of some kind of state that allows for。some
    change to happen something like，transferring money you don't want that。to be via
    a get request something you，could just load in an image or load by。clicking on
    a link that takes you to，another page you don't want that to。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 将允许某种状态的操作，以便发生一些变化，比如转账。您不希望通过GET请求来实现此操作，您可以通过加载图像或点击一个链接来实现，您不希望那样。
- en: happen because then it makes it very，easy for someone else to fake a request，to
    your page by just。creating an image or linking to somehow，a website like transferring
    funds from。one user to another so a solution to，this as we've talked about is
    that。generally we only want post requests to，be able to manipulate something inside。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就很容易让其他人伪造请求，只需创建一个图像或以某种方式链接到一个网站，如从一个用户转账到另一个用户。因此，解决方案如我们所讨论的，通常我们只希望POST请求能操作某些内容。
- en: of the database to be able to actually，initiate a transfer from one user to，another
    user。but even then this is not perfectly，secure that you could still be tricked。into
    submitting a post request imagine，an adversarial website that had a form。like
    this a form whose action was your，bank comm slash transfer and whose。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库能够实际从一个用户发起转账到另一个用户。但即便如此，这也不是完全安全的，您仍可能被欺骗提交一个POST请求，想象一下一个对抗性的网站，具有这样的表单，表单的操作是您的银行comm/transfer。
- en: method was post and now here two input，fields whose type is hidden meaning you。won't
    actually be able to see those，input fields when the user is looking at。the page
    they'd only know about it if，they inspected the source code of this。particular
    HTML page here there's a，hidden input whose name is - meaning the。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 方法是 POST，这里有两个输入字段，其类型为隐藏，意味着当用户查看页面时，实际上看不到这些输入字段，只有在检查这个特定 HTML 页面源代码时，才会知道这里有一个名为
    - 的隐藏输入。
- en: person I'd like to transfer money to，here's the amount the value that I would。like
    to transfer and all the user is，going to see is a button that says click。here
    they're not going to see either of，the input fields because they're hidden，button。well
    then suddenly they're going to be，submitting a post request to the bank。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我想转移资金给的人，这里是我想转移的金额，用户将看到的只是一个写着“点击这里”的按钮，他们不会看到任何输入字段，因为它们是隐藏的按钮。好吧，突然间，他们将会向银行提交一个
    POST 请求。
- en: and initiating some transfer when they，didn't intend to now maybe this seems。like
    oh it's not a big deal because the，user still needs to click a button and。the
    user shouldn't be clicking on a，button if they don't know what the。button is going
    to do well for one it's，probably reasonable to imagine that an。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 当他们没有意图时启动了一些转移，可能这看起来没什么大不了，因为用户仍然需要点击一个按钮，而用户不应该在不知道按钮将会做什么的情况下点击按钮。首先，合理的想法是。
- en: adversary might embed this button inside，of a page where it looks totally safe
    to。be able to click on a button but，moreover the user doesn't even need to。click
    on it in order to submit the form，we can just add a little bit of。JavaScript you
    might imagine that an，adversary could do something like this。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对手可能会将这个按钮嵌入到一个看起来非常安全的页面中，以便能够点击按钮，但更重要的是，用户甚至不需要点击它就能提交表单，我们只需添加一点 JavaScript，你可以想象一个对手可能会这样做。
- en: add an onload attribute to the body that，says when the body of the page is done。loading
    go to document forms meaning all，of the forms for this webpage get the。first one
    and submit it submit the form，and what that's going to do is even。without the
    user doing anything even，without the user clicking on the click。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 为页面的 body 添加一个 onload 属性，表示当页面的 body 加载完成时，转到文档表单，意味着这个网页的所有表单获取第一个并提交它，提交表单，这将会导致即使用户什么都不做，甚至不点击，也会提交请求。
- en: here button as soon as this page is，loaded this form is going to submit。submitting
    a post request to the bank，and attempting to transfer funds from。one user to another
    user and so this is，what we might call a cross-site request。forgery where some
    adversarial website，has forged a request to our website and。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个页面加载后，按钮一出现，这个表单就会提交。提交一个 POST 请求到银行，并尝试将资金从一个用户转移到另一个用户，这就是我们可能称之为跨站请求伪造的情况，其中某个对立网站伪造了对我们网站的请求。
- en: ideally we wouldn't like for that to be，able to happen so how did we guard，against
    this。well what Django allows us to do and a，very common approach is to add a CSRF。token
    a cross-site request forgery token，that is going to be regenerated for。every session
    such that only if that，token is present will the transfer be。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们不希望这种情况发生，那么我们是如何防范的呢？好吧，Django 允许我们做的一种非常常见的方法是添加一个 CSRF 令牌，跨站请求伪造令牌，该令牌将在每个会话中重新生成，只有在该令牌存在时，转移才会被执行。
- en: able to go through so on our website we，can include the CSRF token inside of。this
    HTML form and as a result make sure，that we're able to transfer money only。when
    the CSRF token is present but if，some other website tries to forge a。request they
    won't know what the CSRF，token should be because it changes for。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 能够通过，因此在我们的网站上，我们可以在这个 HTML 表单中包含 CSRF 令牌，因此确保只有在 CSRF 令牌存在时才能转移资金，但如果其他网站尝试伪造请求，他们不知道
    CSRF 令牌应该是什么，因为它会变化。
- en: every session and therefore they won't，be able to actually forge a request from。one
    user to another so all across the，various different tools and technologies。we've
    been using python HTTP django HTML，in terms of creating these web。applications
    using javascript and the，api so we might be interacting with。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 每个会话，因此他们实际上无法伪造从一个用户到另一个用户的请求。所以在我们使用的各种不同工具和技术中，我们用 Python、HTTP、Django、HTML
    来创建这些网络应用，使用 JavaScript 和 API，因此我们可能会进行交互。
- en: there are security considerations all，throughout we've only touched on a。couple
    of them here but just goes to，show how it's important to be mindful if。you think
    about the practice of web，programming thinking about what you're。going to add
    to your web applications，and what features your web application。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 安全性考虑贯穿始终，我们这里只触及了其中几个，但这显示了在考虑网络编程实践时，关注你将要添加到网页应用中的内容以及你的网页应用的功能是多么重要。
- en: supports to think about what the，potential vulnerability is there are as。well
    how someone might exploit your web，application in order to do something。with it
    that they probably shouldn't and，as you take your web applications from。applications
    that are just running on，your own local computer to applications。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 支持思考潜在的脆弱性，以及有人可能如何利用你的网页应用做一些他们可能不应该做的事情。当你将网页应用从仅在你本地计算机上运行的应用转变为可公开访问的应用时。
- en: that are running in some web server that，many people are starting to use these。are
    the types of questions to start to，be asking how can you make sure the your。web
    application is scalable how can you，make sure that your web application is。secure
    so now that we've explored that a，lot of web programming what comes next。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这些正在某些网络服务器上运行的应用程序，许多人开始使用。这些都是开始询问的类型问题：你如何确保你的网页应用是可扩展的？你如何确保你的网页应用是安全的？所以，现在我们已经探讨了很多网页编程，接下来会是什么呢？
- en: in this course we've explored a number，of different tools and technologies and。languages
    but there are many other web，frameworks and ways you can build web。applications
    as well we spent most of，our time looking at the Django web。framework written
    in Python but you can，use other programming languages to build。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在本课程中，我们探讨了多种不同的工具、技术和语言，但还有许多其他的网页框架和构建网页应用的方法。我们大部分时间都在研究用Python编写的Django网页框架，但你也可以使用其他编程语言来构建网页应用。
- en: web applications as well，express j/s for example is a very，popular javascript
    framework for。building web applications Ruby on Rails，is a popular server-side
    web framework，that built。using Ruby and there are many others as，well and they're
    also client-side。frameworks used primarily with，JavaScript to be able to build
    user。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，Express.js是一个非常流行的JavaScript框架，用于构建网页应用，而Ruby on Rails是一个流行的服务器端网页框架，使用Ruby构建，还有许多其他框架，以及主要与JavaScript一起使用的客户端框架，以构建用户界面。
- en: interfaces we've seen a little bit of，react to build dynamic and interactive。user
    interface ISM other popular，client-side frameworks include angularjs。and view
    j/s and a number of others as，well and then once you've built these。web applications
    using any of these，server-side frameworks and client-side。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经看到了如何使用React构建动态和交互式用户界面，其他一些流行的客户端框架包括AngularJS和Vue.js，以及其他一些框架。一旦你使用任何这些服务器端框架和客户端框架构建了这些网页应用。
- en: frameworks then you might imagine，wanting to take these applications and。deploy
    them to the web and to do that，there are a number of ways we can do。this as well
    a number of different，services including Amazon Web Services。AWS Google cloud
    and Microsoft Azure，that can be used in order to deploy。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 框架方面，你可能会想要将这些应用部署到网络上，为此，我们可以通过多种方式来实现，也包括像亚马逊网络服务（Amazon Web Services）、谷歌云（Google
    Cloud）和微软Azure等多种不同的服务。
- en: these web applications Heroku is a，service that uses AWS and tries to。simplify
    the process of making it easier，to deploy your web applications and if。your web
    application is really just，static it's just HTML and CSS and。JavaScript well then
    you can use，something like github pages to be able。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这些网页应用程序使用Heroku，这是一个利用AWS的服务，试图简化部署网页应用的过程。如果你的网页应用仅仅是静态的，只有HTML、CSS和JavaScript，那么你可以使用像GitHub
    Pages这样的服务。
- en: to host a web application for free on，github zone servers instead and there。are
    many other ways you can imagine，deploying web applications as well。different services
    that you can use in，order to take the web applications that。you have been building
    or web，applications you might build in the。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub的Zone服务器上可以免费托管网页应用，还有许多其他方式可以想象部署网页应用，使用不同的服务来处理你已经构建或可能构建的网页应用。
- en: future and make them available on the，internet for others to be able to use
    as。well so as we look back on the various，topics within web programming is。explored
    we've seen a lot of tools and，technologies we can use that we can。leverage in
    order to build interesting，web applications we started by taking a。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 未来并将其在互联网上提供给其他人使用。回顾我们探索的网页编程各种主题，我们看到许多工具和技术可以利用，以构建有趣的网络应用程序。我们开始时简单入手。
- en: closer look at HTML and CSS diving into，how we can use that to describe the。structure
    of our page and then taking，advantage of tools like sass that allow。us to generate
    CSS that allows for much，more complex styling for our website。that would have
    been much more difficult，to do with just CSS alone as we started。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 更深入地了解HTML和CSS，探讨我们如何利用它来描述页面的结构，然后利用像Sass这样的工具，生成更复杂的CSS样式。仅用CSS实现这一点会更加困难。
- en: to build larger web applications we took，a look at git version control tools
    that。we can use in order to make sure that we，keep track of versions and changes
    we。make to our code allowing multiple，people to collaborate on a project。simultaneously
    we then took a look at，Python looking at various different。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 构建更大型的网页应用，我们查看了可以使用的Git版本控制工具，以确保跟踪我们对代码所做的版本和更改，允许多个人同时协作在一个项目中。然后我们研究了Python，关注不同的方面。
- en: features that the language offered，functions and in the conditions and。loops
    as we've seen in many other，programming languages but also。object-oriented programming
    the ability，to represent objects and methods and。functions that operate on those，particular
    objects which proved。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 语言提供的功能、条件和循环，正如我们在许多其他编程语言中看到的，还有面向对象编程，能够表示对象、方法以及作用于特定对象的函数，这一点非常重要。
- en: especially powerful in the context of，dealing with data，web applications Django
    was the example。of a web framework written in Python，that we use to very quickly
    be able to。start up a web application that's able，to listen for requests and make。responses
    Django has a whole lot of，features built-in that really make it。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是在处理数据的上下文中，Django是一个用Python编写的网页框架的例子，使我们能够快速启动一个能够监听请求并作出响应的网页应用。Django内置了许多功能，确实使得开发更加便捷。
- en: easy to get started with building a web，application and in particular it makes。it
    easy for writing web applications，that deal with data so Django allows us。the
    ability to build models that，interact with sequel without us having。to actually
    write any sequel code Django，can generate the sequel for us just。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 轻松开始构建网页应用，尤其是便于编写处理数据的网页应用。Django让我们能够构建与SQL交互的模型，而无需编写任何SQL代码，Django可以为我们生成SQL。
- en: using these models and migrations that，allow us to continually apply changes。that
    we make to our database that as we，add new tables and add and modify。existing
    fields on those tables Django，can take care of all of that after that。as you'll
    recall we took our attention，towards the second of the main。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些模型和迁移，允许我们不断应用对数据库的更改。随着我们添加新表以及添加和修改现有字段，Django可以处理所有这些。正如你所记得的，我们将注意力转向了主要的第二个。
- en: programming languages in the course，JavaScript which was has a lot of uses。and
    is very very popular but we，primarily used on the client side to be。able to build
    interesting user，interfaces using javascript to。manipulate the Dom structure of
    the page，to change what it is the user sees them。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 编程语言的过程中，JavaScript有很多用途，非常流行，但我们主要在客户端使用，以构建有趣的用户界面，利用JavaScript操控DOM结构，改变用户看到的内容。
- en: and also to add event handling so that，when the user clicks on a button when。the
    user hovers over something when the，user interacts with the page in some。sort
    of way our code is able to respond，to it and we saw react a web framework。that
    your client-side framework that，uses JavaScript in order to allow us to。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 还可以添加事件处理，以便当用户点击按钮、鼠标悬停或以某种方式与页面互动时，我们的代码能够响应。我们看到了React，这是一个客户端框架，使用JavaScript来帮助我们。
- en: create really interesting and，interactive user interfaces with not all。that
    much code at all and then finally，in these last couple of lectures we've。been
    looking at some best practices how，we can design tests test the test the。server
    but also the client to make sure，that our code is working appropriately。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 创建非常有趣和互动的用户界面，所需代码并不多，而在最后几节课中，我们也在探讨一些最佳实践，如何设计测试来测试服务器和客户端，以确保我们的代码正常工作。
- en: and also some industry practices like，continuous integration and continuous。delivery
    that just helped to make sure，that as we make changes to our code。we're able to
    deploy and deliver them，rapidly and effectively and make sure。that we're able
    to make incremental，changes to our code base rather than。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 以及一些行业实践，如持续集成和持续交付，这有助于确保我们在对代码进行更改时，能够快速有效地部署和交付，并确保我们能够对代码库进行增量更改，而不是。
- en: need to wait on longer release cycles，and then finally today we've been。talking
    about issues about scalability，and security especially important as we。begin to
    take our application and move，them to the web we want to make sure。that these
    applications are scalable，that they're able to handle multiple。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 需要等待更长的发布周期，然后今天我们终于讨论了可扩展性和安全性的问题，特别是在我们开始将应用程序移至网络时，我们希望确保这些应用程序是可扩展的，能够处理多个。
- en: different users and also to make sure，that they're secure that we're not。exposing
    ourselves to potential，vulnerabilities like someone who might。inject sequel or
    inject JavaScript code，into our pages or who might try to。access some data that
    they're not，to access we want to make sure that when。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的用户，并确保它们是安全的，我们不想让自己暴露于潜在的漏洞中，比如有人可能会将SQL注入或JavaScript代码注入到我们的页面中，或试图访问一些他们无权访问的数据，我们希望确保当。
- en: we go about designing these web，applications we're able to do so in a。scalable
    and ultimately in a secure way，so hopefully you enjoyed this。exploration into
    the world of web，programming with Python and JavaScript a。best of luck with the
    web programs that，you yourself might build with the tools。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计这些网络应用时，我们能够以可扩展且最终安全的方式进行设计，因此希望你喜欢这次对Python和JavaScript网络编程世界的探索，祝你在使用这些工具构建网络程序时好运。
- en: we've seen here today and also other，tools that are inspired by or use。similar
    tools and techniques and ideas，as the things that we've ultimately。talked about
    here a big things to the，courses teaching staff and the。production team for making
    this entire，class possible I look forward to seeing。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 今天我们在这里看到的，以及其他一些工具，它们受到启发或使用了与我们最终在这里讨论的内容相似的工具、技术和想法，特别感谢课程教学人员和制作团队，使整个课程成为可能，我期待看到。
- en: the web applications that you might go。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能创建的网络应用。
