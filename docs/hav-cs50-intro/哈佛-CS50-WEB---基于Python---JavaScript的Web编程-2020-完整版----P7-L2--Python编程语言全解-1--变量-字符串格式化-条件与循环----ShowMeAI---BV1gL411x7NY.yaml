- en: 哈佛 CS50-WEB ｜ 基于Python ／ JavaScript的Web编程(2020·完整版) - P7：L2- Python编程语言全解 1
    (变量，字符串格式化，条件与循环) - ShowMeAI - BV1gL411x7NY
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈佛 CS50-WEB ｜ 基于Python ／ JavaScript的Web编程(2020·完整版) - P7：L2- Python编程语言全解 1
    (变量，字符串格式化，条件与循环) - ShowMeAI - BV1gL411x7NY
- en: '![](img/7197b85a91b83e27dfb773cad9c71625_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7197b85a91b83e27dfb773cad9c71625_0.png)'
- en: '[Music]。![](img/7197b85a91b83e27dfb773cad9c71625_2.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[音乐]。！[](img/7197b85a91b83e27dfb773cad9c71625_2.png)'
- en: all right welcome back everyone to web，programming with Python and JavaScript。and
    today we take a look at one of the，two main languages we're going to be。looking
    at in this course in particular，we're going to be looking at Python。Python is
    a very powerful language that，makes it very easy to build applications。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，欢迎大家回到用 Python 和 JavaScript 进行网页编程的课程。今天我们将关注这门课程中我们将要学习的两种主要语言之一，特别是 Python。Python
    是一种非常强大的语言，使构建应用程序变得非常简单。
- en: quickly because there are a lot of，features that are built into the。language
    that just make it convenient，for quick and productive development so。one of the
    goals of today is to，introduce you to the Python programming。language if you haven't
    seen it before，and even if you have seen it before to。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '今天的目标之一是向你介绍 Python 编程语言，如果你以前没有见过，即使你见过，也要让你更熟悉它。 '
- en: give you a taste for what the language，has to offer，exploring some of the more
    advanced。features and some of the techniques we，can use using Python to be able
    to。develop applications all the more，effectively so we begin with our very。first
    Python program just a program that，says hello world we're going to be。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 给你一个对这门语言的体验，探索一些更高级的特性和我们可以使用 Python 开发应用程序的技术，让开发变得更有效。因此我们将从我们的第一个 Python
    程序开始，只是一个简单的程序，输出 hello world，我们将要快速进行，因为语言中内置了许多功能，使得快速和高效的开发变得方便。
- en: writing it in a text file and the。![](img/7197b85a91b83e27dfb773cad9c71625_4.png)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在文本文件中编写它，和。！[](img/7197b85a91b83e27dfb773cad9c71625_4.png)
- en: program just looks like a single line，just like this and if you've used other。programming
    languages before like C or，Java or other languages this probably。looks pretty
    familiar syntax wise but，just to break it down we have a function。called print
    built into the Python，programming language for us and like。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 程序看起来就像这一行，如果你以前使用过其他编程语言，比如 C 或 Java 或其他语言，这可能在语法上看起来很熟悉，但为了简单说明，我们有一个内置的 print
    函数在 Python 编程语言中。
- en: many other programming languages，functions in Python take their arguments。inside
    of parentheses so inside of these，parentheses are the argument or the。input to
    the print function which in，this case is just the words hello world。followed by
    an exclamation point so，here's how we can actually take this。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多其他编程语言中，Python 的函数在括号内接收参数，因此在这些括号内是传递给 print 函数的参数或输入，在这种情况下就是单词 hello world，后面跟着一个感叹号，所以这就是我们实际可以采用的方式。
- en: program and run it I'm going to go into，my text editor and create a new file。that
    I'll call hello dot P Y dot py or，dot pi is the conventional extension for。Python
    programs so I'll create a file，called hello dot PI inside of which will。just be
    the Python code that we just saw，a moment ago，we'll call the print function and
    as an。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我将进入我的文本编辑器，创建一个新的文件。这个文件我将命名为 hello dot P Y dot py，或者 dot pi 是 Python 程序的常规扩展名，因此我将创建一个名为
    hello dot PI 的文件，里面将包含我们刚才看到的 Python 代码，我们会调用 print 函数，并作为参数或输入传递给 print 函数的内容是
    hello world。感叹号。
- en: argument or the input to the print，function I'll say hello world。exclamation
    point now in order to run，this program we're going to use a。![](img/7197b85a91b83e27dfb773cad9c71625_6.png)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了运行这个程序，我们将使用一个！[](img/7197b85a91b83e27dfb773cad9c71625_6.png)
- en: program in our terminal that also just，so happens to be called a Python Python。is
    what you might call an interpreted，language meaning we're going to run a。program
    called Python which is an，interpreter that is going to read our。dot PI file line-by-line
    executing each，line and interpreting what it is is that。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的终端中这个程序恰好也叫 Python。Python 可以被称为一种解释型语言，这意味着我们将运行一个名为 Python 的程序，这是一个解释器，它将逐行读取我们的
    dot PI 文件，执行每一行并解释其内容。
- en: it means in a way that the computer can，actually understand so we'll run Python，we'd
    like。interpret in this case hello depay and，when we run this program we see that
    the。words hello world are printed to the，terminal and that's it that's the end
    of。![](img/7197b85a91b83e27dfb773cad9c71625_8.png)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着以计算机实际上能够理解的方式，因此我们将运行 Python，在这种情况下我们将解释 hello depay，当我们运行这个程序时，我们看到单词
    hello world 被打印到终端，这就是全部，这就是程序的结束。！[](img/7197b85a91b83e27dfb773cad9c71625_8.png)
- en: the program and that's the very first，program that we've written using the。Python
    programming language so now，already we've seen a couple of features。of Python
    the ability to interpret，Python there's no need to compile it。into a binary first
    in order to run a，Python program we've seen functions and。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们使用 Python 编程语言编写的第一个程序，因此我们已经看到了 Python 的几个特性，能够解释 Python，无需先将其编译成二进制文件才能运行
    Python 程序，我们已经看到了函数。
- en: we've also seen strings just text that，we can provide in quotation marks that。we
    can provide as input to other，functions or manipulate in other ways。and we'll
    see some examples of string，manipulation a little bit later like。many other programming
    languages Python，also supports variables and in order to。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也见过字符串，字符串就是我们可以用引号提供的文本，作为输入提供给其他函数或以其他方式进行操作。稍后我们会看到一些字符串操作的示例。像许多其他编程语言一样，Python
    也支持变量。
- en: assign a new value to a variable the，syntax looks a little something like。this
    if I have a line like a equals 28，what that's going to mean is take the。value
    28 and assign it store it inside，of this variable called a now unlike。other languages
    like C or Java which you，might be familiar with where you have to。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 为变量赋值的语法看起来像这样，如果我有一行 a 等于 28，这意味着取值 28 并将其赋值，存储在名为 a 的变量中。与 C 或 Java 等其他语言不同，在这些语言中你必须明确声明。
- en: specify the type of every variable you，create have to say like int a to mean
    a。is an integer Python doesn't require you，to tell you what the types of each
    of。these variables actually are so we can，just say a equals 28 and Python knows。that
    because this number is an int that，it's going to represent without the。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 定义每个变量的类型时，你需要像 int a 这样说明 a 是一个整数，而 Python 不要求你告诉它这些变量的实际类型。因此，我们可以直接说 a 等于
    28，Python 知道这个数字是一个 int，它将代表。
- en: variable a as an int and it knows it's，able to infer what the types of any of。these
    values happen to be so all the，values do indeed have types。you just don't explicitly
    need to state，them so for example this here the number。28 is of type int it's
    an integer a，number like 1。5 has a decimal in it it's。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 将变量 a 定义为 int 类型，并且它能够推断这些值的类型，所以所有的值确实都有类型。你只需不明确地声明它们，例如这里的数字 28 是 int 类型，它是一个整数，而像
    1.5 这样的数字则带有小数。
- en: a floating-point number so that in，python is what we might call a float。type
    any type of text something like the，word hello wrapped in either double。quotation
    marks or single quotation，marks Python supports both is what we。would call the
    ster type short for，string we also have a type for boolean。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 浮点数在 Python 中我们可能称之为 float 类型，任何文本类型，例如用双引号或单引号括起来的单词 hello，Python 支持两者，这种类型我们称之为字符串（string）类型。我们也有布尔类型。
- en: values things that can be either true or，false in Python those are represented。using
    a capital T true and a capital F，false those are of type bool and also we。have
    a special type in Python called the，none type which only has one possible。value
    this capital n none and none as a，value will use whenever we want to。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，有很多不同的值可以是真或假，这些值用大写的 T（true）和大写的 F（false）表示，类型为 bool。我们在 Python
    中还有一种特殊类型称为 none 类型，它只有一个可能的值，即大写的 n（none），当我们想表示 none 作为一个值时会使用它。
- en: represent the lack of a value somewhere，so if we have a function。that if not
    returning anything it is，really returning none effectively and so。you might imagine
    that none can be，useful if ever you want a variable to。represent the absence of
    something for，example so lots of different possible。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 表示没有值的情况，因此如果我们有一个函数，如果不返回任何内容，它实际上返回的是 none。因此你可能会想象，当你想让一个变量表示某事的缺失时，none
    是很有用的。
- en: types and there are more types in just，this but here's a sampling of the。possible
    variables and types that might，exist inside of this language so now。let's try
    and actually use a variable in，order to do something a little bit more。interesting
    inside of our program and，we'll write a program that's able to。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 类型还有更多，这里只是一些可能存在于该语言中的变量和类型的示例。现在，让我们尝试在程序中实际使用一个变量，以便做一些更有趣的事情，我们将编写一个能够执行的程序。
- en: take input from the user in order to say，hello to them for example so I'll create。a
    new file we'll call it name dot PI and，input，I'd like to prompt the user to for。example
    type in their name so how might，we do that well just as there is a print。function
    that is built into Python that，just prints out whatever the argument。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 从用户那里获取输入以便向他们说hello，例如，我会创建一个新文件，我们将其命名为name.py，输入，我想提示用户例如输入他们的名字，那么我们该怎么做呢？就像Python内置的print函数，它只是打印出任何参数。
- en: happens to be Python also has a built-in，function called input that prompts
    the。user for input and ask them to just type，in some input so let's provide some。input
    and ask the user to type in their，name for example and then we can save。the result
    the output of that function，inside of a variable and in this case。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 恰好Python还有一个内置函数叫做input，它提示用户输入并要求他们输入一些内容，所以让我们提供一些输入并要求用户输入他们的名字，例如，然后我们可以将该函数的结果保存到一个变量中，在这种情况下。
- en: I'll save it inside of a variable that，in this case also just happens to be。![](img/7197b85a91b83e27dfb773cad9c71625_10.png)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 我会将其保存在一个变量中，这在这种情况下也正好是。![](img/7197b85a91b83e27dfb773cad9c71625_10.png)
- en: called name now we can run the program I，can run the program by going into my。terminal
    and typing python named i i'll，press return and we'll see the program。prompts
    me to type in my name i see name，colon space which is that string i。provided as
    the argument to the input，function and this now prompts me to type，in my name
    so i will。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 叫做name，现在我们可以运行程序，我可以通过进入终端并输入python name.py来运行程序，我会按回车，然后我们会看到程序提示我输入我的名字，我看到name，冒号空格，这就是我提供给输入函数的字符串，现在这会提示我输入我的名字，所以我会。
- en: and after that nothing seems to happen，so far so now i'd like to do something。![](img/7197b85a91b83e27dfb773cad9c71625_12.png)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 之后似乎什么都没有发生，到目前为止，所以现在我想做点什么。![](img/7197b85a91b83e27dfb773cad9c71625_12.png)
- en: with that input i typed in my name i'd，like to say like hello for example to。myself
    so i'll go back into this program，and now what i can do is i can say print。hello
    comma and then i can say plus name，this plus operator in python does a。number
    of different things if I have two，numbers that will add those two numbers。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 用我输入的名字，我想对自己说hello，例如，所以我会回到这个程序中，现在我可以说print，hello，逗号，然后我可以说plus name，这个plus运算符在Python中有很多不同的功能，如果我有两个数字，它会将这两个数字相加。
- en: together but with two strings plus can，actually concatenate or combine two。strings
    together so I can combine hello，comma space with whatever the value of。![](img/7197b85a91b83e27dfb773cad9c71625_14.png)
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一起但用两个字符串，plus实际上可以连接或组合两个字符串，所以我可以将hello，逗号空格与无论是什么值的结合。![](img/7197b85a91b83e27dfb773cad9c71625_14.png)
- en: name happens to be so now I'll rerun，this program，Python named PI type in my
    name and now。![](img/7197b85a91b83e27dfb773cad9c71625_16.png)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: name恰好就是这样，所以现在我会重新运行这个程序，Python命名为PI，输入我的名字，然后。![](img/7197b85a91b83e27dfb773cad9c71625_16.png)
- en: we see hello Brian as the output of the，program so this is one way that you
    can。manipulate strings in Python another way，that's quite popular in later versions。of
    Python 3 is a method known as using f，strings short for formatted strings and。in
    order to use f strings in Python it's，going to be a similar but slightly。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到hello Brian作为程序的输出，所以这是在Python中操作字符串的一种方式，另一种在后来的Python 3版本中相当流行的方法被称为使用f字符串，f是格式化字符串的缩写。为了在Python中使用f字符串，方法会类似但略有不同。
- en: different syntax instead of just having，a string in double quotation marks we'll。put
    the letter F before the string and，inside of the string I can now say hello。comma
    and then if in a formatted string，if I want to plug in the value of a。variable
    I can do so by specifying it in，curly braces so what I'll say here is。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的语法而不仅仅是将字符串放在双引号中，我们会在字符串前加上字母F，并且在字符串内部我现在可以说hello，逗号，然后如果在格式化字符串中，如果我想插入一个变量的值，我可以通过在花括号中指定它来做到这一点，所以我在这里要说的是。
- en: inside of curly braces name and so，what's going on here is I am Telling。![](img/7197b85a91b83e27dfb773cad9c71625_18.png)
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在花括号内的name，因此，这里发生的事情是我在告诉。![](img/7197b85a91b83e27dfb773cad9c71625_18.png)
- en: this formatted string to substitute，right here the value of a variable。so I
    prompted the user for input to type，in their name we took their name saved。it
    inside of this variable called name，and now here in this print statement on。line
    two I'm printing out a formatted，string that is hello comma and then in。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这个格式化字符串用来替换变量的值，所以我提示用户输入他们的名字，我们将他们的名字保存到一个名为name的变量中，现在在这条打印语句的第二行中，我打印出一个格式化字符串，它是hello，逗号，然后在。
- en: curly braces here I'm saying plug in the，value of the variable name and so that。is
    going to have the effect of taking，whatever name was provided as input and。printing
    it out and this is a slightly，more efficient way of being able to。quickly create
    strings as by plugging in，values into those strings so now I'll。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的花括号表示插入变量name的值，因此这将产生将输入的名字打印出来的效果，这是一种稍微更有效的方式，能够快速创建字符串，通过将值插入这些字符串中。
- en: see the exact same behavior if I run，Python name pi then prompted to type in。my
    name I'm like Brian and then I save。![](img/7197b85a91b83e27dfb773cad9c71625_20.png)
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我运行Python命名为pi，然后提示输入我的名字，我输入“Brian”，然后我保存。![](img/7197b85a91b83e27dfb773cad9c71625_20.png)
- en: the result hello Brian for example and，so those are a couple of ways that we。can
    deal with strings manipulating，strings and combining strings using this。technique
    so in addition to variables，Python also supports all the same other。features that
    are core to many，procedural programming languages such as。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是“你好，Brian”，例如，所以这些是我们处理字符串的一些方法，操作字符串和组合字符串，使用这种技巧。此外，Python也支持许多过程式编程语言的核心特性。
- en: conditions for example so let's take a，look at an example now of seeing whether。a
    number is positive or negative or zero，for example so I'll create a new file。that
    I'll call conditions pi and inside，of conditions depay i'll first prompt。the user
    to type in some input I'll say，input，number two mean you know type in a。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，让我们现在来看一个例子，看看一个数字是正数、负数还是零。所以我将创建一个新的文件，称为conditions.py，接下来在conditions.py内部，我会首先提示用户输入一些内容，我会说“输入一个数字”。
- en: number and we'll save that input inside，of a variable that I'm just going to。call
    n and now I can ask questions I can，say something like if n is greater than。zero
    then print and he's positive and so，what's going on here is I have a Python。condition
    and the way a Python condition，works is it begins with this keyword a。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个输入保存在一个我将称之为n的变量中，现在我可以问问题，比如说“如果n大于零，则打印出‘n是正数’”。在这里发生的事情是我有一个Python条件，而Python条件的工作方式是以这个关键字开头。
- en: keyword like if followed by a boolean，expression some expression that's going。to
    evaluate to true or false or，something kind of like true or false we。can be a
    little bit loose about that as，we may see you later and then a colon。means alright
    here is the beginning of，the body of the S statement and in。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 关键字“if”后跟一个布尔表达式，某个将评估为真或假的表达式，或者有点像真或假的表达式，我们可以对这一点稍微放松一下，然后冒号表示好，这里是if语句主体的开始。
- en: Python the way we know that we're inside，the body of an if statement or inside。the
    body of any other block of code is，via indentation so in some languages。like C
    or in languages like HTML which，we saw a couple of lectures ago the。indentation
    isn't strictly required by，the computer to be able to parse and。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Python中，我们知道自己在if语句的主体内或任何其他代码块的主体内，是通过缩进来区分的。在一些语言中，比如C语言或HTML，这些语言在几节课前提到过，缩进不是计算机解析所严格要求的。
- en: understand what's inside the program in，Python it's different the indentation
    is。required because the indentation is how，the program knows what code is inside
    of。the if statement and what code is，outside of the if statement so we have。if
    n is greater than 0 colon and then，everything indented underneath the F is。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中理解程序内部的内容是不同的，缩进是必需的，因为缩进是程序知道什么代码在if语句内，什么代码在if语句外的方式，所以我们有“如果n大于0，冒号”，然后所有缩进在if下面的内容都是。
- en: all of the body of the estate 'men it is，the lines of code that will execute
    if。this condition this boolean expression，and greater than zero happens to be
    true。so if n is greater than 0 we'll print，out and is positive and then we can
    add。an additional condition I can say，something like well I could say，something
    like else print n is not。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所有遗产的主体是“人”，如果这个布尔表达式和大于零的条件为真，则会执行这些代码行。所以如果n大于0，我们将打印出“n是正数”，然后我们可以添加一个额外的条件，我可以说，比如说“否则打印n不是”。
- en: positive but I can be a little bit more，specific than that here is sort of two。branches
    one if n is greater than 0 and，one else case to handle all of the other。possible
    scenarios but really what I'd，like to do is perform a second check in。other languages
    this might be called an，else if like if this condition is not。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 积极的，但我可以更具体一些，这里大致有两个分支，一个是当 n 大于 0 时，另一个是处理其他所有可能情况的 else 分支。但我真正想做的是执行第二次检查。在其他语言中，这可能被称为
    else if，比如如果这个条件不满足。
- en: true but this other condition is true，Python abbreviates this to just lf-ii。LIF
    just short for else if so I can say，L if n is less than 0 then let's go。ahead
    and print out n is negative，and else print n is zero so the idea。here now is that
    if n is greater than，zero we perform some tasks L if in other。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 但另一个条件是成立的，Python 将此缩写为 just lf-ii。LIF 是 else if 的缩写。所以我可以说，如果 n 小于 0，那么我们就继续打印
    n 是负数，else 打印 n 是零。因此，现在的想法是，如果 n 大于零，我们执行某些任务，L 如果在其他条件下。
- en: words if it's not greater than zero then，we check to see if it is less than
    zero。in which case we print out that n is，negative else if neither of those two。conditions
    are true it's not positive，and it's not negative，the only remaining possibility
    is that N。is zero so we can print out that n is，zero and so we might like for
    this。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它不大于零，那么我们检查它是否小于零。在这种情况下，我们打印出 n 是负数。否则，如果这两个条件都不成立，那它既不是正数也不是负数，唯一剩下的可能性是
    n 等于零，所以我们可以打印出 n 是零，我们可能希望这个程序能正常工作。
- en: '![](img/7197b85a91b83e27dfb773cad9c71625_22.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7197b85a91b83e27dfb773cad9c71625_22.png)'
- en: program to work but watch what happens，if I now try and run conditions pas even。though
    logically in our heads and，looking at it now it probably seems，pretty logical
    if I run Python。conditions pi and type in a number I'll，type in the number five
    for example just，see what happens。![](img/7197b85a91b83e27dfb773cad9c71625_24.png)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 但是注意如果我现在尝试运行条件，即使在我们脑海中逻辑上看起来可能很合理，如果我运行 Python 条件并输入一个数字，我将输入数字五来看看会发生什么。![](img/7197b85a91b83e27dfb773cad9c71625_24.png)
- en: all right something weird just happened，and this is our very first Python。exception
    an error that happens because，something didn't quite go right inside。of our Python
    program and over time，you'll begin to learn how to parse this。exception and understand
    what it means，and where to begin to debug but learning。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，发生了一些奇怪的事情，这是我们第一次遇到 Python 异常，错误发生是因为我们的 Python 程序内部出现了问题。随着时间的推移，你将开始学习如何解析这个异常，理解它的含义，以及从哪里开始调试，但学习。
- en: how to read these exceptions and figure，out how to deal with them is definitely。a
    very valuable skill on your way to，becoming a Python developer and so let's。see
    if we can figure out what this，exception is saying oftentimes I start。by looking
    at the bottom I see that，there is a type error that is the type。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如何读取这些异常并弄清楚如何处理它们，绝对是你成为 Python 开发者过程中一个非常宝贵的技能。那么我们来看看能否搞清楚这个异常在说什么。通常我先看底部，我看到那里有一个类型错误，即类型错误。
- en: of the exception that has happened there，are a lot of exceptions that can go。wrong
    in Python things that we can do，that cause errors in this case it's the。type error
    which generally means that，there's some mismatch of types that。Python expected
    something to be of one，type but it turned out to be a different。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 发生的异常有很多，Python 中有很多事情可能出错，我们可以做的事情会导致错误。在这种情况下是类型错误，通常意味着存在某种类型不匹配，Python 预期某个东西是某种类型，但它实际上是另一种类型。
- en: type so let's try and understand what，this might be we says greater than sign。not
    supported between instances of stur，short for string and int so what does。that
    mean well I guess it means that the，greater than symbol that checks if one。thing
    is greater than another doesn't，work if you're comparing a string to an。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 类型，所以让我们尝试理解这可能是什么，我们说大于符号不支持在字符串和整数实例之间进行比较。那么这意味着什么呢？我想这意味着大于符号在检查一个东西是否大于另一个东西时，如果你在比较字符串和整数时就不成立。
- en: integer and that's probably pretty，reasonable it doesn't really make sense。to
    say a string is greater than or less，than an integer when we're talking about。greater
    than or less than usually we're，talking about numbers so they should。both be integers
    for example so why do，we think that greater than is comparing。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 整数，这大概是合理的。说一个字符串大于或小于一个整数并不合逻辑。当我们谈论大于或小于时，通常是在谈论数字，因此它们都应该是整数。例如，为什么我们认为大于在比较时是成立的。
- en: a string and an integer well now we can，look a little bit further up at the。trace
    back which will show which parts，of the code are，causing this problem and in this
    case。the trace back is pretty short it's just，pointing me to a single line of
    a single。file it's saying in the file conditions，PI on line 3 here is the line
    that。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一个字符串和一个整数，现在我们可以，再往上看一下追踪，它将显示哪些部分。代码导致这个问题，在这种情况下，追踪相当短，只是。指向一行单个文件，说明在文件conditions，PI的第3行这是那一行。
- en: triggered the exception if n is greater。![](img/7197b85a91b83e27dfb773cad9c71625_26.png)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 触发了异常，如果n更大。![](img/7197b85a91b83e27dfb773cad9c71625_26.png)
- en: than 0 so what's the exception here well，0 is obviously an integer because that。just
    is an integer and so if greater，then thinks that it's comparing a string。with
    an integer then n somehow must be a。![](img/7197b85a91b83e27dfb773cad9c71625_28.png)
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 比0那么这里的例外是什么呢，0显然是一个整数，因为那。就是一个整数，因此如果更大，则认为它是在比较一个字符串。和一个整数，那么n某种程度上必须是一个。![](img/7197b85a91b83e27dfb773cad9c71625_28.png)
- en: string even though I typed in the number，5 you must still think and is a string。so
    why might that be let's take a look，at the code again and see if we can。figure
    out what's going on well it seems，that this input function doesn't care。what you
    type in it's always going to，give you back a string and somehow is。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串即使我输入了数字，5，你仍然必须认为它是一个字符串。那为什么会这样呢？让我们再看看代码，看看能否。弄清楚发生了什么，似乎这个输入函数不在乎。你输入了什么，它总是会，返回一个字符串，并且某种程度上是。
- en: ending up as a string which it's pretty，reasonable because the input function。has
    no idea whether I typed in a number，or whether I typed in a letter or I。typed
    in other characters altogether，some input doesn't know to give back its。data in
    the form of an int or in the，form of a float or in any other form so。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 最终成为一个字符串，这是相当合理的，因为输入函数。并不知道我是否输入了数字，或者我是否输入了字母，或者我。输入了完全不同的字符，某些输入不知道以什么形式返回其。数据，无论是以int的形式，float的形式，还是以任何其他形式。
- en: by default it's just going to return a，string what characters did the user type。in
    as their input so what I'd like to do，now in order to make this program work。the
    way I wanted to is take this and，convert it into an integer or cast it。into an
    integer so to speak and the way，that I can do that is by using a。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，它只是返回一个，字符串用户输入了什么字符。作为他们的输入，所以我现在想要做的是，为了让这个程序按。我的意愿工作，将其转换为一个整数，或者可以说转换为一个整数，方法是使用一个。
- en: function in Python called int that takes，anything and turns it into an integer
    so。here I can say int and then as the，argument to the int function the input。to
    the nth function I'm just going to，include this whole expression input。number
    so I'm going to ask the user to，input a number they type in some text。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中有一个函数叫做int，它接受，任何内容并将其转换为整数。因此在这里我可以说int，然后作为，int函数的参数输入。nth函数，我只需包括这个完整的表达式input。number，所以我要请求用户，输入一个数字，他们输入一些文本。
- en: the input function gives me back a，string and that string is going to serve。as
    the input to the int function which，then gets saved inside of this variable。![](img/7197b85a91b83e27dfb773cad9c71625_30.png)
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 输入函数返回给我一个，字符串，而该字符串将作为int函数的输入，然后被保存到这个变量中。![](img/7197b85a91b83e27dfb773cad9c71625_30.png)
- en: called n so now that we know that n is，indeed an integer let's try and run this。program
    again I'll go back into the，terminal run Python conditions PI I'm。asked to type
    in a number I type in a，number like 5 and alright that's still。doesn't seem to
    have worked and it，didn't work because I didn't save the。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '被称为n，因此现在我们知道n确实是一个整数，让我们再试一次。运行这个程序，我回到终端，运行Python conditions PI。系统让我输入一个数字，我输入一个，像5这样的数字，好的，这仍然。似乎没有工作，它没有工作是因为我没有保存。 '
- en: file so I go ahead and save the file，try it again type in a number and。we see
    that indeed n is positive we get，no more exception we were able to run。the codes
    successfully and see that the，value of n is positive and I could try。this again
    to test the other two，conditional branches type in negative。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '文件，所以我去保存文件，再试一次，输入一个数字，。我们看到确实n是正数，我们没有更多的异常，我们成功运行了。代码，并看到n的值是正的，我可以再试一次，测试其他两个。条件分支，输入负数。 '
- en: one for example to see that n is，negative and otherwise if it is neither。![](img/7197b85a91b83e27dfb773cad9c71625_32.png)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，看n是，负数，否则如果它不是。![](img/7197b85a91b83e27dfb773cad9c71625_32.png)
- en: positive or negative then we know that n，is zero and so here was our first。exposure
    to conditions in Python the，ability to have multiple different。branches and do
    different code depending，on some expression that we're going to。evaluate to either
    be a true expression，or a false expression all right so let's。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正或负，那么我们知道 n 是零，因此这里是我们第一次接触 Python 中的条件，能够有多个不同的分支，根据我们要评估的某些表达式执行不同的代码，这些表达式要么是真实的，要么是假的。好吧，让我们。
- en: take a look at some of the other，features that are going to be present。inside
    the Python language and one of，the most powerful features of Python are。its various
    different types of sequences，data types that store values in some。sort of sequence
    or some collection of，values altogether so I'll go ahead and。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下 Python 语言中将会出现的一些其他**特性**，其中一个最强大的特性是它各种不同类型的**序列**，这些数据类型以某种**顺序**或某些值的**集合**存储值，所以我继续。
- en: create a new file that will call，sequences pi and there are a number of。different
    types of sequences that all，obey similar properties but one of the。types of sequences
    is a type we've，already seen which is just a string for。example so if I have a
    name and the name，is something like Harry for instance and。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的文件，我们称之为 sequences pi，并且有许多不同类型的序列都遵循类似的属性，但其中一种类型的序列是我们已经看到过的一种类型，比如一个字符串。例如，如果我有一个名字，名字是哈利之类的。
- en: this sequence allows me to access，individual elements inside of the。sequence
    and in order to do so it's much，like an array in other languages if。you've experienced
    them before but I can，print out name squ*re bracket 0 this。squ*re bracket notation
    takes a sequence，some ordered sequence of elements and。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这个序列让我可以访问序列中的单个元素，为了做到这一点，它很像其他语言中的**数组**，如果你之前有接触过它们，但我可以打印出 name[squ*re bracket
    0]，这个**方括号**表示法获取一个序列，一些有序的元素。
- en: gets me access to one particular element，inside of that sequence and so if I
    have。a string like name and I say name squ*re，bracket 0 the effect of that is
    going to。be take this long sequence and get me，the zeroth element in many programming。languages
    and in programming more，generally we often start counting things。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我访问该序列中的一个特定元素，因此如果我有一个字符串，例如 name，我说 name[squ*re bracket 0]，那么这个效果就是获取这个长序列中的零个元素。在许多编程语言中，以及更一般的编程中，我们通常从
    0 开始计数。
- en: at 0 so the very first item in the，sequence is item 0 the second item is。item
    1 so it's easy to get slight，off-by-one errors there but just know。![](img/7197b85a91b83e27dfb773cad9c71625_34.png)
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在 0 处，所以序列中的第一个元素是项 0，第二个元素是项 1，所以很容易出现轻微的**越界**错误，但只需知道。![](img/7197b85a91b83e27dfb773cad9c71625_34.png)
- en: that item 0 of the name should be the，first character in the name and I can。see
    that for sure if I run Python I'll，save this file run Python sequences PI。and
    what I get is just the first，character of Harry's name which in this。![](img/7197b85a91b83e27dfb773cad9c71625_36.png)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 那么 name 的项 0 应该是名字中的第一个字符，如果我运行 Python，我可以确定这一点，我会保存这个文件，运行 Python sequences
    PI。我得到的只是哈利名字的第一个字符，正是这个。![](img/7197b85a91b83e27dfb773cad9c71625_36.png)
- en: case is the letter H，if I instead asked to print out。![](img/7197b85a91b83e27dfb773cad9c71625_38.png)
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 情况是字母 H，如果我请求打印出。![](img/7197b85a91b83e27dfb773cad9c71625_38.png)
- en: character 1 which will be the second，character in the name if I rerun the。program
    now I get the letter A and this，type of indexing works for many。different types
    of sequences not just a。![](img/7197b85a91b83e27dfb773cad9c71625_40.png)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 字符 1 是名字中的第二个字符，如果我现在重新运行程序，我会得到字母 A，这种索引类型适用于许多不同类型的序列，而不仅仅是一个。![](img/7197b85a91b83e27dfb773cad9c71625_40.png)
- en: string which so happens to be a sequence，of characters but other types as well。Python
    for example has a type for lists，of data so if I have a sequence of any。type of
    data that I want to store I can，store that information inside of a list。in Python
    so maybe instead of storing，one name I have multiple names that I。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串恰好是一个字符的序列，但还有其他类型。Python 例如有一个用于数据列表的类型，因此如果我有一个我想存储的任何类型数据的序列，我可以将该信息存储在
    Python 的列表中。所以也许我不是存储一个名字，而是有多个名字。
- en: want to store so I want to store our，names like Harry and Ron and Hermoine。for
    example so now I have three names，all stored in the sequence inside of a。Python
    list and I can you know I can，print out all of the names for example。just to print
    out all of the names to。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我想存储一些名字，比如哈利、罗恩和赫敏。例如，现在我有三个名字，都存储在一个 Python 列表的序列中，我可以打印出所有的名字，举个例子。
- en: '![](img/7197b85a91b83e27dfb773cad9c71625_42.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7197b85a91b83e27dfb773cad9c71625_42.png)'
- en: see what the value of the variable names，is equal to and we'll see that when
    I do。that I get a printout of the contents of。![](img/7197b85a91b83e27dfb773cad9c71625_44.png)
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下变量名称的值是什么，我们会看到当我这样做时，我得到了内容的打印输出。![](img/7197b85a91b83e27dfb773cad9c71625_44.png)
- en: that list Harry Ron Hermione in that，particular order but you could also much。as
    you could index into a string index，into a list to say get me just the very。![](img/7197b85a91b83e27dfb773cad9c71625_46.png)
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 那个列表是哈利、罗恩和赫敏按特定顺序排列的，但你也可以像索引字符串那样索引列表，以获取特定的内容。![](img/7197b85a91b83e27dfb773cad9c71625_46.png)
- en: first item inside of this names list，which in this case when I run the。program
    is going to just be Harry so，there are a number of different sequence。types you
    can use in order to represent。![](img/7197b85a91b83e27dfb773cad9c71625_48.png)
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 这个名称列表中的第一个项目，当我运行程序时将会是哈利，因此，有许多不同的序列类型可以用来表示。![](img/7197b85a91b83e27dfb773cad9c71625_48.png)
- en: data another one just so happens to be，called a tuple and a tuple is often used。if
    you have a couple of values that，aren't going to change but you need to。store
    a pair of values like two values，together or three values together or。something
    like it you might imagine that，if you're writing a program to deal with。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个数据结构叫做元组，通常用于存储一对不变的值，比如两个值在一起或三个值在一起，想象一下，如果你在编写一个程序来处理实际上是一个单位的情况，它恰好有两个部分。
- en: graphing in two dimensions for example，you might want to represent a point as。an
    x value and a Y value and you could，create two variables for it I could say。you
    know let me do say a coordinate X is，going to be equal to ten point O and。coordinate
    Y is equal to twenty point O，but now I'm creating two variables for。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在二维图形中，你可能想将一个点表示为X值和Y值，你可以为此创建两个变量，我可以说，坐标X将等于十点零，坐标Y将等于二十点零，但现在我为此创建了两个变量。
- en: what's really one unit that just so，happens to have two parts and so to。represent
    this we can use a tuple in，Python and just say something like。coordinate equals
    ten point O comma，twenty point O so whereas in lists we。use squ*re brackets to
    denote where the，list begins and where the list ends up。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了表示这个，我们可以在Python中使用元组，像这样说：坐标等于十点零，二十点零。而在列表中，我们使用方括号来表示列表的开始和结束。
- en: in a tuple we just use parentheses，say we're grouping a number of values。together
    we're grouping one value ten，point O with a second value twenty point。O and now
    we can pass around these two，values as a single unit。just by referencing them
    using a single，name which in this case is coordinate so。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在元组中，我们只需使用括号，表示我们正在将多个值组合在一起，组合一个值十点零和第二个值二十点零，现在我们可以将这两个值作为一个单元传递，只需用一个单一的名称来引用它们，这里是坐标。
- en: there are a number of different types of，these various different sequences and。some
    of those sequences we'll take a，look at are these data structures here。so list
    for example is the sequence of，mutable values which we took a look at。and mutable
    just meaning we can change，the elements in the list if I have a。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多不同类型的这些各种序列，我们将查看的一些序列是这些数据结构。例如，列表是可变值的序列，我们已经看过，而可变值意味着我们可以改变列表中的元素。
- en: list I can add something to the end of，the list I can delete something from
    the。list I can modify the values inside the，list a tuple on the other hand is
    a。sequence of immutable values those，values can't change you can't add。another
    element to the existing couple，you'd have to create a new tuple in。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在列表中，我可以在列表的末尾添加某个元素，可以从列表中删除某个元素，可以修改列表中的值，而元组则是一系列不可变值，这些值不能更改，你不能向现有的元组添加另一个元素，你必须创建一个新的元组。
- en: order to do so and there are other data，structures that exist as well a couple。that
    we'll take a look at in a moment，include sets which are a collection of。unique
    values so if you're familiar with，sets from the world of mathematics it's。a very
    similar idea that where as a list，in a tuple keeps things in a particular。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他数据结构存在，我们将在稍后查看的一些包括集合，这是一组唯一值的集合，因此如果你熟悉数学中的集合，这个概念非常相似。而列表和元组则保持内容的特定顺序。
- en: order a set does not keep things in any，particular order it's just a collection。and
    in particular all of the values need，to be unique in a list or in a tuple you。might
    have the same value appearing，multiple times in a set every value。appears exactly
    once and there are some，advantages to set some ways that you can。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 集合不会保持任何特定顺序，它只是一个集合，所有的值需要是唯一的，在列表或元组中，你可能会有相同的值多次出现，而在集合中，每个值只出现一次，这给集合带来了一些优势以及你可以使用的一些方式。
- en: make your programs more efficient by，using sets if you know that you just。need
    a collection if you don't care，about the order if something is only。going to show
    up exactly once at most，then you can use a set to potentially。make your programs
    a little more，efficient and a little more elegantly。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你知道只需要一个集合，而不在乎顺序，如果某个元素最多只会出现一次，那么通过使用集合可以使你的程序更高效，更优雅。
- en: designed and finally one other data，structure that's quite powerful and。that's
    going to come up a number of，times during this course is a dictionary。in Python
    shortened to just a dict which，is a collection of what we're gonna call。key value
    pairs and the way I like to，think of this is with an actual physical。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 设计的最后一种数据结构是相当强大的，在本课程中会多次出现的字典，在 Python 中简称为 dict，它是我们所称的键值对的集合，我喜欢用一个实际的物理例子来思考这个。
- en: dictionary that you might find at a，library that map's words to their。definitions
    in a physical dictionary you，open up the dictionary and you look up a。word and
    you get the definition an，addicted Python is going to be very。similar it's going
    to be a data，structure where I can look something up。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 字典就像你在图书馆找到的那样，将单词映射到它们在纸质字典中的定义，你打开字典，查找一个单词，得到它的定义，而在 Python 中，字典的工作方式非常相似，它将是一个数据结构，我可以查找某些东西。
- en: by one keyword or one value and get some，other value as a result we call the。thing
    that I'm looking up the key and we，call what I get when I do。looking up the value
    so we keep pairs of，keys and values in the case of an actual。dictionary in the
    real world the key is，the word that we want to look up and the。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通过一个关键词或一个值来获取另一个值，我们称我正在查找的东西为键，称我查找时得到的结果为值，因此我们在实际字典的情况下保留键和值的配对，在现实世界中，键是我们想要查找的单词。
- en: value is its definition but we can use，this more generally in Python anytime
    we。want to map something to some other，value such that we can very easily look。up
    that value inside of this data，structure so we'll see examples of。dictionaries
    as well so let's now，explore the first of these data。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 值是它的定义，但我们可以在 Python 中更一般地使用它，每当我们想要将某些东西映射到另一个值时，这样我们就可以很容易地在这个数据结构中查找该值，因此我们将看到字典的例子，所以现在让我们探索这些数据中的第一个。
- en: structures these lists to explore what，we can do by taking advantage of the。features
    that are given to us by a，Python list for example so we'll go。ahead and create
    a new program that I'll，call lists dot pi and here I'm just。going to create a
    list of names so names，equals Harry Ron Hermione and Ginny for。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这些结构是我们通过利用 Python 列表所提供的特性来探索我们可以做的事情，例如，我们将创建一个新程序，我将其命名为 lists.py，在这里我只是创建一个名称列表，所以
    names = Harry Ron Hermione 和 Ginny。
- en: example and as I start to write multiple，lines of code especially as my Python。programs
    start getting longer it can be，a good idea to document what it is that。I'm doing
    so I can say let me add a，comment to this particular line of code。just so I know
    what it is that I've done，in this line of code and in Python there。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，当我开始写多行代码，特别是当我的 Python 程序变得越来越长时，记录我所做的事情可能是个好主意，所以我可以说让我为这一行代码添加一个注释，这样我就知道在这行代码中做了什么，而在
    Python 中。
- en: are a couple of different ways to create，a comment but the simplest way is just。to
    use the pound sign or the hash tag as，soon as you include that everything。after
    that for the remainder of the line，is a comment the interpreter is going to。ignore
    that comments you can say，whatever you want it's more for you the。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 创建注释有几种不同的方法，但最简单的方法就是使用井号或哈希标签，只要你包含它，之后该行的其余部分都会被解释器忽略，这些注释你可以随意写，这更多是为了你自己。
- en: programmer and for someone who's reading，your program to be able to look at
    the。program understand what it's saying and，figure out what they need to do about
    it。so I can just say define a list of names，for example just to make it clear
    to me。what it is that I have done inside of，this line of code so I can print out。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员，以及阅读你的程序的人能够查看程序，理解它所表达的内容，并弄清楚他们需要对其采取的行动。因此，我可以说定义一个名字的列表，例如，仅仅为了让我清楚我在这行代码中做了什么，以便我可以打印出来。
- en: that list of names as we've done before。![](img/7197b85a91b83e27dfb773cad9c71625_50.png)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 名字列表，就像我们之前做的那样。![](img/7197b85a91b83e27dfb773cad9c71625_50.png)
- en: and we'll see that when I print out that，list of names what I get is let me
    run。list up I what I get is this list Harry。![](img/7197b85a91b83e27dfb773cad9c71625_52.png)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会看到，当我打印出这个名字的列表时，我得到的是，让我运行这个列表，我得到的是这个列表哈利。![](img/7197b85a91b83e27dfb773cad9c71625_52.png)
- en: Ron Hermione and Ginny but I could also，print out as we've seen before just
    the。first of those mam say you know print，out just name squ*re bracket zero in。which
    case I'm going to get just Harry，for example but now recall that a list。is mutable
    I can modify the elements，that happen to exist inside of this list。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 罗恩、赫敏和金妮，但我也可以像之前看到的那样，打印出其中第一个，妈妈说，你知道的，只打印出名字方括号零，这样我将只得到哈利，例如，但现在请回忆一下，列表是可变的，我可以修改这个列表中存在的元素。
- en: so I could say names that dot append a，new name something like，Rico for example
    and so lists have a。number of built-in methods or functions，which are functions
    that I can run on an。existing list to access particular，elements to the lists
    or to modify the。list in particular way ISM and in the，case of a list the append
    method is a。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我可以说 names.dot.append 一个新名字，例如，Rico，因此列表有许多内置的方法或函数，这些是我可以在现有列表上运行的函数，以访问特定的元素或以特定的方式修改列表，在列表的情况下，append
    方法是一个。
- en: method or function that I can run that，just adds a value to the end of an。existing
    list so I've added Drako to the，list and there are a number of other。methods that
    I can use on lists one of，which is for example sorting a list no。need to write
    your own sorting algorithm，in order to sort a sequence of objects。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 方法或函数，我可以运行，它只是将一个值添加到现有列表的末尾，所以我已经将德拉科添加到列表中，还有许多其他方法可以在列表上使用，其中之一，例如，排序一个列表，没必要编写自己的排序算法，以对一系列对象进行排序。
- en: in Python there is a built-in sort，method that works on lists where I can。just
    say names dot sort that will，automatically sort everything in the。list and now
    if I print out all of those，names go and print them out and get rid。![](img/7197b85a91b83e27dfb773cad9c71625_54.png)
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，有一个内置的 sort 方法，适用于列表，我可以简单地说 names.dot.sort，这将自动对列表中的所有内容进行排序，现在如果我打印出所有这些名字，去打印它们并去掉。![](img/7197b85a91b83e27dfb773cad9c71625_54.png)
- en: of this old print statement now we see，that we get five names that are printed。out
    because I had four elements，originally in this list but then I added。a fifth one
    and notice now that they are，actually in alphabetical order starting。with Drako
    ending with Ron because I was，able to sort the list by modifying the。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这个旧的打印语句，现在我们看到打印出了五个名字，因为我在这个列表中原本有四个元素，但我添加了第五个，并且注意到它们实际上是按字母顺序排列的，从德拉科开始，到罗恩结束，因为我能够通过修改顺序来对列表进行排序。
- en: order in which those elements actually，show up and so list can definitely be。quite
    powerful anytime you need to store。![](img/7197b85a91b83e27dfb773cad9c71625_56.png)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这些元素实际出现的顺序，因此列表在任何需要存储的情况下绝对可以非常强大。![](img/7197b85a91b83e27dfb773cad9c71625_56.png)
- en: elements in order a list is definitely a，useful tool the Python gives to you
    if。you don't care about the order of the，elements though and if you know that
    all。the elements are going to be unique then，you can use a set which is another。Python
    data structure that works in，similar ways the syntax is slightly。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 按顺序的元素，列表绝对是 Python 提供的一个有用工具，如果你不在意元素的顺序，而且如果你知道所有的元素都是唯一的，那么你可以使用集合，这是一种另一种
    Python 数据结构，工作方式类似，语法稍有不同。
- en: different so let's do an example with，those I'll create a new file call it。sets
    pi and let me first create an empty，set and we can do that by just saying s。equals
    s is going to be the variable，that will store my set and I'll say set。and then
    parentheses that will just，create an empty set that just so happens。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 不同，所以让我们做一个例子，创建一个新文件，命名为。集合 pi，让我首先创建一个空的集合，我们可以通过简单地说 s 来实现。s 将是一个变量，它将存储我的集合，我会说
    set，然后是括号，这样就会创建一个空的集合，正好是。
- en: to have nothing inside of it now we'll，add some elements to the set so I can。say
    s dot add let's add the number one，to the set let's add the number two。let's add
    the number three and let's add，the number four and then we can print。![](img/7197b85a91b83e27dfb773cad9c71625_58.png)
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 现在集合里是空的，我们来添加一些元素，可以说`s.add`，让我们把数字一、二、三和四添加到集合中，然后我们可以打印。
- en: out the set to see what happens to be，inside the set right now now when I run。this
    program Python set pi we see that，inside the set are four values。one two three
    and four that happened to。![](img/7197b85a91b83e27dfb773cad9c71625_60.png)
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 打印集合，查看现在里面有什么元素，当我运行这个程序时，我们看到集合中有四个值，一、二、三和四。
- en: be an order but sets are not naturally，ordered they're not gonna always keep。track
    of what the order is going to be，but I could add for example if I add。three again
    to the set now I've added。![](img/7197b85a91b83e27dfb773cad9c71625_62.png)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 集合没有自然的顺序，它们不会总是保持特定的顺序，但我可以添加，比如如果我再次将三添加到集合中。
- en: three to the set twice I added one two，three four and then three again when
    I。print out the contents of the set it's，still just contains the elements one
    two。three four no element ever appears twice，in the set following with the。mathematical
    definition of a set where。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我两次将三添加到集合中，添加了1、2、3、4，然后又添加了3。当我打印集合的内容时，它仍然只包含元素1、2、3和4，集合中从不出现重复的元素，这遵循集合的数学定义。
- en: '![](img/7197b85a91b83e27dfb773cad9c71625_64.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7197b85a91b83e27dfb773cad9c71625_64.png)'
- en: no element ever appears more than once，inside of a set you can also remove。elements
    from sets as well so if I，wanted to remove the number two from the。set for example
    I could say s dot remove，2 and then print out s to say print out。![](img/7197b85a91b83e27dfb773cad9c71625_66.png)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 集合中的元素不会出现多次，你也可以从集合中移除元素。如果我想要移除数字二，比如可以说`s.remove(2)`，然后打印`s`来查看当前的集合状态。
- en: whatever happens to be inside of that，set now and now when I rerun this。![](img/7197b85a91b83e27dfb773cad9c71625_68.png)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 现在集合中包含的所有元素，当我重新运行这个程序时。
- en: program I only get 1 3 & 4 because I，removed 2 from the set so sets allow you。to
    add to them remove from them and also，all sequences whether they be strings or。lists
    or sets allow you to get how many，elements are in the set by taking。advantage
    of a function built into，Python called Len so Len will give you。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序中我只得到了1、3和4，因为我从集合中移除了2，所以集合允许你向其中添加、移除元素，所有序列，无论是字符串、列表还是集合，都可以通过Python内置的函数`len`来获取集合中有多少元素。
- en: the length of a sequence so the number，of items inside of a list or the number。of
    characters inside of a string or the，number of elements inside of a set and。so
    if I wanted to print out how many，elements are in the set I might do。something
    like this in a formatted，string say the set has a sum number of。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 一个序列的长度，即列表中的项目数量、字符串中的字符数量或集合中的元素数量。如果我想打印集合中有多少个元素，我可以在格式化字符串中这样做，比如说这个集合有几个元素。
- en: elements and how do I know how many，elements well again inside of these。curly
    braces I can include any，expression in Python that I would like。to substitute
    into this string so how，many elements are in the set I can get。![](img/7197b85a91b83e27dfb773cad9c71625_70.png)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 元素数量，我怎么知道有多少个元素呢？在这些花括号内，我可以包含任何我想在Python中替换进这个字符串的表达式，那么集合中有多少个元素，我可以得到。
- en: that by calculating Len of s so what，I've done here is I've said with Len of。s
    I would like to calculate the length，of the set s in other words how many。elements
    are actually inside of that set，and then using this curly brace notation。I'm saying
    take that number and plug it，into this string so we can see the set。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 通过计算`s`的`len`，我这里做的是我希望计算集合`s`的长度，换句话说，实际包含在这个集合中的元素数量，然后使用这个花括号表示法，我说把这个数字插入到这个字符串中，这样我们可以看到集合。
- en: has some number of elements for example，so now if I run this program。pythons
    at PI I see that I get these，three elements that happen to be inside。of the set
    right now which is one and，then three and then four，and then it tells me that
    the set has。three elements inside of it which is the。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 包含了一些元素，比如如果我运行这个程序，Python 会告诉我集合中现在有三个元素，即一、三和四，并且它会告诉我这个集合有三个元素。
- en: '![](img/7197b85a91b83e27dfb773cad9c71625_72.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7197b85a91b83e27dfb773cad9c71625_72.png)'
- en: number of elements that are in the set，right now so now we've seen a number
    of。different language features inside of，Python we see in variables we've seen。conditions
    so that we can additionally，do things if something is true if。something else is
    true and we've seen，some of the data structures that are。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们看到集合中元素的数量。所以现在我们已经看到Python中的一些不同语言特性，我们看到变量，看到条件，以便我们可以额外执行某些操作，如果某事为真，如果其他事也为真，我们还看到了一些数据结构。
- en: core to the way Python works lists and，sets and tuples and other data。structures
    it can be helpful too and now，let's take a look at another feature of。the Python
    programming language common，to many programming languages the idea。of looping
    if I want to be able to do，something multiple times now go ahead。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: Python的核心工作方式涉及列表、集合、元组和其他数据结构，这也很有帮助。现在，让我们看看Python编程语言的另一个特性，这是许多编程语言共有的，循环的概念。如果我想多次做某件事，现在可以继续。
- en: and create a new file called loops pi，and let's just create a simple loop the。simplest
    loop we could create in Python，is just one that's going to count a。bunch of numbers
    so in order to do that，what I could say is something like this。for I in 1 2 3
    4 5 or maybe I want to，count 0 1 2 3 4 5 just to start counting。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为loops pi的新文件，让我们创建一个简单的循环。我们可以在Python中创建的最简单的循环就是数一些数字，因此，为此我可以说像这样：for
    I in 1 2 3 4 5，或者也许我想从0 1 2 3 4 5开始计数。
- en: '![](img/7197b85a91b83e27dfb773cad9c71625_74.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7197b85a91b83e27dfb773cad9c71625_74.png)'
- en: at 0 print I so here's the basic syntax，for a Python loop and here's what seems。to
    be going on over here on the very，first line I have a Python list as。denoted by
    those squ*re brackets that，contains a 6 numbers 0 1 2 3 4 5 and now。I have a for
    loop for I in this list and，the way Python interprets this is to say。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 从0开始打印I，所以这是Python循环的基本语法，这里发生的事情似乎在第一行，我有一个由方括号表示的Python列表，包含6个数字0 1 2 3 4
    5，现在我有一个for循环for I in这个列表，Python的解释方式是说。
- en: go through this list one element at a，time and for each element call that。element
    I we could have called it，anything but in this case I is just a。conventional choice
    for a number that，keeps incrementing and we're going to。print out now the value
    of I for each，iteration of this loop so we can try。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我逐个遍历这个列表，对每个元素调用该元素I，我们可以把它叫做任何名字，但在这种情况下，I只是一个约定的选择，用于表示一个不断递增的数字。我们将打印出每次循环迭代中I的值，所以我们可以尝试。
- en: '![](img/7197b85a91b83e27dfb773cad9c71625_76.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7197b85a91b83e27dfb773cad9c71625_76.png)'
- en: this out now and run Python loops pi we，see 1 0 1 2 3 4 5 great it printed out。all
    of the numbers from 0 to 5 one at a，time in practice though if we wanted to。count
    all the way up to 5 or for print，six numbers for example this is fine for。now
    but if we wanted to print like，hundred numbers or a thousand numbers。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在试一下并运行Python循环pi，我们看到1 0 1 2 3 4 5，太好了，它逐个打印出了从0到5的所有数字。在实际操作中，如果我们想要数到5，或者打印六个数字，这样做是可以的，但如果我们想打印像一百个数字或一千个数字。
- en: this is going to start to get tedious so，Python has a built-in function called。![](img/7197b85a91b83e27dfb773cad9c71625_78.png)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这开始变得有些乏味了，所以，Python有一个内置函数叫做。![](img/7197b85a91b83e27dfb773cad9c71625_78.png)
- en: range where I can say for I in range 6，to achieve exactly the same thing。six
    means get me a range of six numbers，so if we start at zero it's going to go。from
    zero all the way up to five and，then we can print out each one of the。elements
    inside of that sequence so if I。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: range，我可以说for I in range 6，以实现完全相同的效果。六意味着让我得到六个数字的范围，所以如果我们从零开始，它会从零一直到五，然后我们可以打印出该序列中的每个元素。
- en: '![](img/7197b85a91b83e27dfb773cad9c71625_80.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7197b85a91b83e27dfb773cad9c71625_80.png)'
- en: rerun Python loops top I we get 0 1 2 3，4 5 so loops enable us to loop over
    any。type of sequence so if the sequence is a，list I can say something like if
    I have。a list of names like Harry and Ron and，Hermoine and this is my list of
    names I。can have a loop that says that for each，name in my list of names let's
    print out。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 重新运行Python循环top I，我们得到0 1 2 3，4 5，因此循环使我们能够遍历任何类型的序列，所以如果序列是一个列表，我可以说如果我有一个名字列表，比如哈利、罗恩和赫敏，这就是我的名字列表。我可以有一个循环说对于我名字列表中的每个名字，让我们打印出。
- en: that name for example so we have a list，the list is called names we're looping。![](img/7197b85a91b83e27dfb773cad9c71625_82.png)
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这个名字，例如，我们有一个名为names的列表，我们正在循环。![](img/7197b85a91b83e27dfb773cad9c71625_82.png)
- en: over at one element at a time and，printing it out now if i run the program。i
    see three names printed one on each。![](img/7197b85a91b83e27dfb773cad9c71625_84.png)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 一次遍历一个元素，并打印出来，现在如果我运行程序。看到三个人名打印出来，每行一个。![](img/7197b85a91b83e27dfb773cad9c71625_84.png)
- en: line and you can do this for other，sequences as well maybe i have just a。single
    name that is called harry and now，i could have a line that says you know。for every
    character in that name print，the character if the name is this is the。sequence
    is a sequence of individual，characters because it's a string then。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 这条线，你也可以对其他序列执行此操作，也许我只有一个名叫哈利的。单一名称，现在，我可以有一行代码说，对于这个名称中的每个字符，打印出该字符，如果名称是这样的，序列就是一个个体字符的序列，因为它是一个字符串。
- en: when I loop over that string I'll be。![](img/7197b85a91b83e27dfb773cad9c71625_86.png)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 当我遍历那个字符串时，我会。![](img/7197b85a91b83e27dfb773cad9c71625_86.png)
- en: looping over each individual character，in that string so I can run the program。and
    see one on each line each of the，letters that just so happens to be。![](img/7197b85a91b83e27dfb773cad9c71625_88.png)
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个字符串中逐个循环每个字符，所以我可以运行程序。看到每一行打印出每个字母，恰好是。![](img/7197b85a91b83e27dfb773cad9c71625_88.png)
- en: inside of Harry's name so now we've seen，conditions we've seen loops and we've。seen
    a number of different data，structures we've seen lists and sets as。well as tuples
    the last important data，structure that we're going to be taking。a look at are
    Python dictionaries which，as you'll recall are some mapping of。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在哈利的名字中，现在我们已经看到了条件，看到循环，并且看到多种不同的数据结构，我们看到了列表和集合，还有元组，最后一个重要的数据结构我们将要查看的是Python字典，正如你会记得的，它们是一种映射。
- en: keys to values if I want to be able to，look something up I can use a Python。dictionary
    just as a data structure to，be able to store these sorts of values。so I'll create
    a new file called，dictionary stop PI and maybe I want to。create a dictionary that
    is going to，keep track of say what house each of the。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我想查找某些东西，我可以使用Python字典作为一种数据结构，来存储这些值。所以我会创建一个新的文件，叫做dictionary.py，也许我想创建一个字典，用来跟踪每个。
- en: students at Hogwarts happen to be in so，I might have a dictionary called houses。and
    the way we specify a dictionary is，by specifying a key ： a value when we're。defining
    a dictionary for the first time，so I might say Harry， Gryffindor and then Draco
    ： Slytherin。for example and so what this line of，code is doing is it is creating
    a new。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在霍格沃茨的学生恰好在，所以我可能会有一个叫做houses的字典。我们定义字典的方式是，通过指定一个键：一个值，当我们第一次定义字典时，所以我可能会说哈利：格兰芬多，然后德拉科：斯莱特林。例如，这行代码的作用是创建一个新的。
- en: dictionary this dictionary is called，houses and inside this dictionary I have。two
    keys two things that I can look up I，can look up Harry or I can look up Draco。and
    when I look up those keys I get the，value that follows there ： so after。Harry
    if I look up Harry I get，Gryffindor if they look up Draco I get。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这个字典叫做houses，在这个字典中我有两个键，两个我可以查找的东西，我可以查找哈利或德拉科。当我查找这些键时，我会得到后面的值：例如，当我查找哈利时，我得到格兰芬多，当我查找德拉科时，我得到。
- en: Slytherin for example so now if I wanted，to print out what house Harry is in
    I。can print out houses squ*re brackets，Harry so I can here say I would like to。print
    out take the houses dictionary and，the squ*re bracket notation is how I。look something
    up inside of a dictionary，it's similar to how we use squ*re。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 例如斯莱特林，现在如果我想打印出哈利所在的房子，我可以打印出houses的*方括号*，哈利。所以我在这里可以说我想打印出取出houses字典，*方括号*表示法是我如何查找字典中的内容，这类似于我们使用*方括号*。
- en: brackets to look up a specific element，inside of a list to say like get me。element
    0 or element 1 in this case，we're using a Python dictionary to say。take the House's
    dictionary and look up。![](img/7197b85a91b83e27dfb773cad9c71625_90.png)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 使用括号查找列表中的特定元素，例如获取元素0或元素1，在这种情况下，我们使用Python字典来说明。取出houses字典并查找。![](img/7197b85a91b83e27dfb773cad9c71625_90.png)
- en: harry's value which hopefully should be，Gryffindor and we'll see that if we
    look。![](img/7197b85a91b83e27dfb773cad9c71625_92.png)
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 哈利的价值希望能得到，格兰芬多，如果我们观察一下就会发现。![](img/7197b85a91b83e27dfb773cad9c71625_92.png)
- en: up run Python dictionary and we do get，Gryffindor as the value of Harry's house。we
    can add things to this dictionary as，well using the same syntax in the same。way
    that I use squ*re brackets to access，the value inside of a dictionary if I。want
    to change the value in a dictionary，or add something new to it I could say。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个 Python 字典，我们确实得到了，格兰芬多作为哈利的学院的值。我们可以使用相同的语法以同样的方式向这个字典添加内容，就像我使用*方括号*访问字典中的值一样。如果我想要改变字典中的值，或添加新的内容，我可以说。
- en: houses and Hermione and say that，Hermione is also in Gryffindor for。example
    and so this line of code here，says take the houses dictionary and look。up Hermione
    in houses dictionary and，when you do that should be set equal to。this value here
    Gryffindor so we took，that value and we are going to assign it。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，*学院*和赫敏，并且说赫敏也在格兰芬多，所以这行代码表示取出学院字典，并在学院字典中查找赫敏，当你这样做时，应该将其设置为这里的值格兰芬多，所以我们取了那个值并将其赋值。
- en: to Hermione inside of the dictionary，such that now if we wanted to we could。![](img/7197b85a91b83e27dfb773cad9c71625_94.png)
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 在字典中添加赫敏，以至于现在如果我们想的话，我们可以。![](img/7197b85a91b83e27dfb773cad9c71625_94.png)
- en: print out Hermione's house at what as，well run the program and see that。![](img/7197b85a91b83e27dfb773cad9c71625_96.png)
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 打印出赫敏的学院，运行程序并查看。![](img/7197b85a91b83e27dfb773cad9c71625_96.png)
- en: Hermione is also in Gryffindor so，anytime we want to be able to map some。value
    to some other value whether we're，mapping people to what house they happen。to
    be in or were mapping users to some，information about those users inside of。our
    web application dictionaries are，going to be very，very powerful tools for us to
    be able to。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 赫敏也在格兰芬多，因此每当我们想将某个值映射到另一个值时，无论我们是将人映射到他们所在的学院，还是将用户映射到有关这些用户的信息时，在我们的网络应用程序中，字典将成为非常非常强大的工具。
