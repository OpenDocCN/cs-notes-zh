- en: 哈佛CS50-CS ｜ 计算机科学导论(2020·完整版) - P15：L7- 数据库与SQL知识体系 2 - ShowMeAI - BV1Hh411W7Up
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈佛CS50-CS ｜ 计算机科学导论(2020·完整版) - P15：L7- 数据库与SQL知识体系 2 - ShowMeAI - BV1Hh411W7Up
- en: table。![](img/1e4f07659e58faa22deb662e5dcbd6dd_1.png)
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 表格。![](img/1e4f07659e58faa22deb662e5dcbd6dd_1.png)
- en: shows and so forth so that is to say now，in this database there is a file or，rather
    there is a table。called shows inside of which is all of，the data from that csv。how
    do i actually get at that data well，it turns out there's other commands，recalled
    not just create。but also select it turns out select is，the equivalent of read。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: shows 等等，也就是说现在，在这个数据库中有一个文件，或者说有一个表。名为 shows，其中包含了来自那个 CSV 的所有数据。我实际上该如何获取这些数据呢，结果表明还有其他命令，不仅仅是
    create。还有 select，结果表明 select 相当于 read。
- en: getting data from the database and this，one's pretty powerful，and the reason
    that so many data。scientists and statisticians，use and like using languages like
    sql，data and。filter that data and analyze that data，using new syntax for us today。but
    relatively simple syntax relative to，other things we've seen，the select command
    in sql lets you。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 从数据库获取数据，这个功能相当强大，许多数据科学家和统计学家，使用并喜欢使用像 SQL 这样的语言，来处理和。过滤数据并分析数据，使用今天对我们来说新的语法。但相对于我们见过的其他东西，这个语法相对简单，SQL
    中的选择命令让你。
- en: select one or more columns，from your table by the given name，so we'll see this
    now in just a moment。here how might i go about doing this，well let me go ah**d
    and now。![](img/1e4f07659e58faa22deb662e5dcbd6dd_3.png)
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 从你的表中按照给定名称选择一个或多个列，我们稍后会看到这一点。那么我该如何进行呢，让我继续。![](img/1e4f07659e58faa22deb662e5dcbd6dd_3.png)
- en: at my prompt after just clearing the，this out，let me go ah**d and select。![](img/1e4f07659e58faa22deb662e5dcbd6dd_5.png)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在我清除完这个之后，让我继续选择。![](img/1e4f07659e58faa22deb662e5dcbd6dd_5.png)
- en: let's say title from shows，semicolon so why am i doing this well。![](img/1e4f07659e58faa22deb662e5dcbd6dd_7.png)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 假设从 shows 中选择标题，分号，那我为什么要这样做呢。![](img/1e4f07659e58faa22deb662e5dcbd6dd_7.png)
- en: select command，more columns，then literally the preposition from and。then the
    name of the table from which，you want to select that data，column is called。title
    it stands to reason that select，title from shows，should give me back the data
    i want now。notice a couple of stylistic choices，that aren't strictly required
    but are，good style。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 选择命令，更多列，然后是字面上的介词 from，接着是你想要选择的数据的表名，列名叫。标题，这就意味着 select，title from shows
    应该会给我返回我想要的数据。请注意一些风格选择，这并不是严格要求的，但却是好的风格。
- en: conventionally i would capitalize any，sql keywords including select and from。in
    this case and then lowercase anything，that's a column name，or a table name assuming
    you created。those columns and tables，in in fact lowercase there's different。conventions
    out there some people will，uppercase some people use something，like。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，我会将任何 SQL 关键字，包括 select 和 from 首字母大写。在这种情况下，然后将任何列名或表名小写，假设你创建了。那些列和表，实际上是小写的，还有其他不同的惯例，有些人会使用大写，有些人使用类似的方式。
- en: but generally speaking i would encourage，all caps for sql syntax。and lowercase
    for the column and table，enter，values，outputted from the database and if you。think
    way back you'll，might recognize that this actually，happens to be the same order。as
    before because the csv file was，loaded top to bottom，into this same database table
    and so。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 但一般来说，我会鼓励，对于 SQL 语法使用全大写，而列名和表名使用小写，输入，值，从数据库输出，如果你。回想一下，你可能会意识到，这实际上是与之前相同的顺序。因为
    CSV 文件是，从上到下加载到这个同一个数据库表中。
- en: same data，duplicates and miscapitalizations and，weird spacing。and all but suppose
    i want to see all of，the data from the csv，well it turns out you can select。title，but
    maybe timest*mp was of interest and，this one admittedly was capitalized，spreadsheet。that
    was not something i chose manually，so if i just use a comma separated list。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的数据，重复和错误的大写，以及奇怪的空格。但假设我想查看 CSV 中的所有数据，结果表明你可以选择。标题，但也许时间戳是感兴趣的，这个显然是大写的，电子表格。这不是我手动选择的，因此如果我只使用一个用逗号分隔的列表。
- en: of column names notice what i can do now，it's a little hard to see for us humans。because
    there's a lot going on now，but notice that in double quotes on the。left there
    are all of the time st*mps，which represent the time at which you。all submitted
    your favorite shows and on，the right of the comma there's another，quoted string。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 列名，注意我现在能做的事情，对于我们人类来说有点难以看清。因为现在有很多事情在进行，但请注意，在左边的双引号中，有所有的时间戳，表示你们提交你们最喜欢的节目的时间，而在逗号右侧还有另一个，被引号的字符串。
- en: that is the title of the show that you，liked although sqlite omits the com。the
    quotes if it's just a single word，like friends just by convention。you know in
    fact if i want to get all of，the columns turns out there's some。shorthand syntax
    for that。![](img/1e4f07659e58faa22deb662e5dcbd6dd_9.png)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 那是你喜欢的节目的标题，尽管sqlite在仅是单词（如friends）时会省略引号，这只是一个约定。事实上，如果我想获取所有列，结果发现有一些简写语法可以做到这一点。![](img/1e4f07659e58faa22deb662e5dcbd6dd_9.png)
- en: and it will get me，all of the columns from left to right in，my table and voila
    now i see，genres。as well so now i effectively have three，columns being outputted，useful。thus
    far in fact all i've been doing is，the csv，but sql is powerful because it comes。with
    other features right out of the box，somewhat similar in spirit to functions，and
    excel。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这将让我获取我的表格中从左到右的所有列，瞧，现在我可以看到流派。所以现在我实际上有三列在输出，非常有用。到目前为止，我所做的只是处理csv，但sql很强大，因为它自带其他功能，有点类似于函数和excel。
- en: but now we can use them ultimately in，count，distinct lower max min and upper
    and，bunches more。these are all functions built into sql，that you can use as part
    of your query。to sort of uh alter the data as it's，coming back from the database
    not，you。so that it's in a format you actually。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但现在我们可以最终在计数、唯一值、转小写、最大值、最小值和转大写等函数中使用它们，还有很多其他功能。这些都是内置于sql中的函数，可以作为查询的一部分使用，以某种方式在从数据库返回数据时，改变数据的格式。
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_11.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_11.png)'
- en: care about so for instance one of my，distinct，the unique titles and we had to
    write。all that annoying code，using a set and add things to the set，and then loop
    over it again right like。that was not a huge amount of code but，it definitely
    took us what five ten。minutes to get the job done at least，in sql you can do all
    of that in one，this。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以例如我关心的就是我的唯一标题，我们不得不写所有那些烦人的代码，使用集合并将内容添加到集合中，然后再次循环，这确实不算大量代码，但我们花了五到十分钟才能完成工作。在sql中，您可以将所有内容放在一行中。
- en: select not just title from，shows let me go ah**d and select，distinct。![](img/1e4f07659e58faa22deb662e5dcbd6dd_13.png)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 选择不仅仅是从节目中提取标题，让我去**选择唯一值**。![](img/1e4f07659e58faa22deb662e5dcbd6dd_13.png)
- en: title from shows so distinct again is an，available function in sql。that does
    what the name says it's going。![](img/1e4f07659e58faa22deb662e5dcbd6dd_15.png)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 从节目中提取标题，因此再次，唯一值在sql中是一个可用的函数，它的功能正如其名称所示。![](img/1e4f07659e58faa22deb662e5dcbd6dd_15.png)
- en: to filter out all of the titles to just，give me the distinct ones back so if
    i，hit enter now。you'll see a similarly messy list but，including no idea someone
    that doesn't，watch tv including。an unsorted list of those titles so i，think we
    can probably，start to clean this thing up as we did。before let me go ah**d and
    now select，not just distinct but let me go ah**d。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤掉所有标题，只给我返回唯一值，因此如果我现在按回车，你会看到一个类似的混乱列表，但不包括那些不看电视的人的标题。包含这些标题的未排序列表，所以我认为我们可以开始像之前一样整理这个东西。让我去**选择**，不仅仅是唯一值，让我去**选择**。
- en: and uppercase everything as well，and i can use upper as another function。and
    notice i'm just nesting things like，the output of one function as we've seen，to
    another。let me hit enter now and now it's，getting a little，more canonicalized
    so to speak because。i'm using capitalization for everything，but it would seem
    that things still，aren't really。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 还要将所有内容转为大写，我可以使用转大写作为另一个函数。注意，我只是将一个函数的输出嵌套到另一个函数中。让我现在按回车，现在看起来更标准化，因为我对所有内容都进行了大写处理，但似乎事情仍然不太。
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_17.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_17.png)'
- en: sorted it's just the same order in which，you inputted them but without，that
    sql has。other syntax that we can use to make our，queries more precise and more
    powerful。so in addition to these kinds of，functions that you can use to alter
    the，coming back。you can also use these kinds of clauses。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 排序仅是您输入它们的相同顺序，但没有，sql有其他语法可以使我们的查询更加精确和强大。因此，除了可以用来改变返回数据的这些函数外，您还可以使用这些类型的子句。
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_19.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_19.png)'
- en: or syntax in sql queries，you can say where which is the，equivalent of a condition。![](img/1e4f07659e58faa22deb662e5dcbd6dd_21.png)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在sql查询中，您可以说“where”，这相当于一个条件。![](img/1e4f07659e58faa22deb662e5dcbd6dd_21.png)
- en: you can say give select all of this data，where something is true or。false you
    can say like where you can say，give me data that doesn't isn't exactly。this but
    is like this，you can order the data by some column，you can limit the number of。rows
    that come back and you can group，identical values together in some way so。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以说选择所有这些数据，条件是某些东西是真或假，你可以说像“where”，也可以说给我一些不完全是这样的数据，而是像这样的。你可以按某一列排序数据，可以限制返回的行数，并可以以某种方式将相同的值分组。
- en: let's see a few examples of this，with uh，how about the office that was the one
    we，select title。from shows where title equals，i've added this，title，equals quote
    unquote the office so sql。is nice similar in spirit to python，it's more user-friendly
    perhaps than c。where everything kinda sort of reads，like an english sentence even
    though，it's a little more。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看几个例子，如何选择标题。来自shows表，标题等于，我添加了这个，标题等于引号中的“the office”，所以SQL在精神上与Python类似，或许比C更用户友好。尽管它有点。
- en: precise and it's a little more succinct，let me go ah**d and hit enter。and voila
    that's how many of you，inputted the office，but notice it's not everyone is it
    we're。missing some still，it seems that i got back only those of，you who typed
    in literally。the office capital t capital o so what，if i want to be a little more
    resilient。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 精确且更简洁，让我去**并按下回车。瞧，这就是你们输入“the office”的数量，但注意并不是所有人都是这样，我们仍然缺少一些。似乎我只得到了那些字面上输入了“the
    office”大写T和大写O的人的结果。那么如果我想更加宽容呢？
- en: than that well let me get back any，rose where you all typed in office maybe，you
    omitted the um。the article the so let me go ah**d and，say not title，equals office
    but let me go ah**d and。say where the title is，be office，i want to allow for maybe
    some stuff at，end。and even though this seems like a bit of，an inconsistency in
    the context。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，让我返回任何你们输入的“office”，也许你省略了“the”这个冠词。所以让我去**并说标题不等于office，但让我去**并说标题是“office”，我想允许末尾有一些内容。尽管这在上下文中似乎有些不一致。
- en: of using like there's another wild card，character the percent sign，the left。and
    this percent sign represents zero or，more characters to the right。so it's kind
    of this catch-all that will，now find me all，titles that somewhere have o-f-f-i-c-e。inside
    of them and it turns out like is，case insensitive so i don't even need to。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用像另一个通配符一样的字符，即百分号（%），在左侧。这个百分号表示零个或多个字符在右侧。所以这是一种通用的方式，可以找到所有包含o-f-f-i-c-e的标题。结果表明，like是大小写不敏感的，所以我甚至不需要。
- en: worry about capitalization with like，now let me hit enter and voila now i get。back
    more answers and you can really see，the messiness now notice up here。one of you
    used lowercase you know that，tends to be common when。typing things in quickly
    one of you did，it lower case here and then also gave us。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们不必担心大小写的问题，按下回车，瞧，我得到了更多的答案，你可以真正看到这里的杂乱。注意上面，有人使用了小写字母，快速输入时这往往是常见的，有人确实在这里使用了小写字母，并且还给我们。
- en: an extra white space at the end，one of you just typed in office one of，space
    at the end。and so there's a lot of variation here，and that's why when we forced
    everything，things。we were able to get rid of a lot of，those redundancies，well
    in fact let's go ah**d and and。order this now so let me go back to，selecting，distinct，upper
    of title uh。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在结尾有一个额外的空格，有人只输入了“office”，结尾有一个空格。所以这里有很多变化，这就是为什么当我们强制所有内容时，我们能够消除许多冗余。那么实际上，让我们去**并排序，所以让我返回选择，distinct，upper
    of title。
- en: from shows and let me now order by which，is a new clause，uh the uppercased version
    of title。so now notice there's a few things going，on here but i'm just building
    up more。complicated queries similar learnings of，scratch where we just started
    throwing。more and more puzzle pieces at a problem，i'm selecting all of the distinct，uppercase
    titles。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 从shows中，现在让我按新的子句进行排序，标题的大写版本。所以现在注意这里有一些事情在进行，但我只是在构建更复杂的查询，类似于Scratch的学习，我们只是开始不断地向一个问题抛出更多的拼图块。我选择所有不同的大写标题。
- en: from the shows table but i'm going to，order the results this time。by the uppercase
    version of title so，everything's going to be uppercase and。then it's going to
    be sorted a through z，hit enter now and now things are a。little easier to make
    sense of notice，the quotes are there only when。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 从shows表中，但这次我要按标题的大写版本来排序结果，所以所有内容都将是大写的。然后将按字母顺序从A到Z排序，现在按下回车，事情会变得更容易理解，注意，引号只有在。
- en: there are multiple words in a title，us，but notice here's all the the shows and，the。m's
    the l's and so forth it's indeed，alphabetized，thanks to using order by all right
    let。me pause for just a second because i，know that's a lot all at once，any questions
    thus far on select。or on distinct or on upper table names，the where clause the
    order by clause。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 标题中有多个单词，但注意这些是所有节目，以及m's，l's等等，确实是按字母顺序排列的，感谢使用按顺序排列。好吧，让我暂停一下，因为我知道一下子有很多内容，到目前为止对选择、去重、上层表名、where子句、order
    by子句有任何问题吗？
- en: it's a lot quickly but it just generally，expresses the kinds of problems we've，already
    seen。anything on your end brian no hands here，all right well let's start to solve
    more。similar problems now in sql，bit ago，in python suppose i want to actually，figure
    out the counts of。combine，all of the identical shows and figure，out all of the
    corresponding counts well。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这很快，但一般来说，它表达了我们已经看到的各种问题。布赖恩，你那边有什么吗？没有人举手，好吧，让我们开始解决更多类似的问题。现在在SQL中，之前在Python中，如果我想实际计算。将所有相同的节目合并，找出所有相应的计数，好吧。
- en: let me go ah**d and try this，let me go ah**d and select again um。the uppercase
    version of title but i'm，not going to do distinct this time，differently。i'm going
    to select the uppercase，version of title the count。of those titles so the number
    of times a，given title appears so count as a new，keyword now，what the。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 让我继续尝试这个，让我继续选择一下嗯。标题的大写版本，但我这次不会做不同的选择。我将选择标题的大写版本，计数那些标题的出现次数，所以把它视为一个新的关键词，现在，什么。
- en: count is well if you think about this，table as having a lot of。titles uh title
    title title title title，it would be nice to kind of group the。identical titles
    together，and then actually count，how many such titles we group together，say。group
    by upper title this tells sql，to group all of the uppercase titles。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 计数，嗯，如果你想象这个表有很多标题，标题，标题，标题，标题，能够将相同的标题分组在一起，然后实际计算有多少个这样的标题，我们可以说。按大写标题分组，这告诉SQL将所有的大写标题分组。
- en: together kind of collapse multiple rows，into one，but keep track of the count
    of titles，and。hit enter and you'll see very similar to，wrote，all of the titles
    on the left followed。by a comma followed by the count so one，of you really likes
    tom and jerry one of。you really likes top，top gear if i scroll up though two of，you
    really liked the wire。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 一起将多个行合并为一行，但保持标题的计数。按回车键，你会看到非常类似于左侧写的所有标题，后面跟着一个逗号，后面是计数，因此你们中有一个人真的喜欢《猫和老鼠》，而有一个人真的喜欢《顶级车》。不过，如果我向上滚动，有两个人真的喜欢《线人》。
- en: 23 of you here like the office although，we still haven't trimmed。the issue here
    so we could still combine，that further by trimming white space if。we want but
    now we're getting these，kinds of counts，well how can i go ah**d and order this。as
    we did before let me go ah**d here，and add，order by count of，title and then hit
    semicolon now。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在场的你们中有23人喜欢《办公室》，尽管我们还没有处理这个问题。因此，如果我们想的话，可以通过修剪空格进一步合并。但现在我们得到这些计数，嗯，我该如何继续排序呢？就像我们之前做的那样，让我继续这里，按标题的计数排序，然后点分号，现在。
- en: and now notice just as in python，everything is from smallest to largest。![](img/1e4f07659e58faa22deb662e5dcbd6dd_23.png)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 现在注意，就像在Python中，所有内容都是从最小到最大。![](img/1e4f07659e58faa22deb662e5dcbd6dd_23.png)
- en: on the bottom，how can i fix this well it turns out if，you can order things in
    descending order。d-e-s-c for short instead of asc which，is the default for ascending。so
    if i do it in descending order now，i'd have to scroll all the way back up，to the
    a's the very top。to see where the lines begin whoops，if i scroll all the way back
    up to the，begin。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在底部，我该如何修复这个呢？结果发现，如果你能将事物按降序排列。d-e-s-c是缩写，而asc是默认的升序。所以如果我以降序排列，现在，我必须一直向上滚动到最顶部，看看行从哪里开始，哎呀，如果我一直向上滚动到开头。
- en: up here and now if i want to，whoops whoops did i do that right，sorry i don't
    want to uh there we go。order by count descending，now let me go ah**d and this
    is just a。little too unwieldy to see let me just，limit myself to the top 10 and
    keep it。simple and only look at the top 10，values here，voila now i have game of
    thrones at 33。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，现在如果我想，哎呀，我这样做对吗？抱歉，我不想这样，哦，来吧。按计数降序排列，现在让我继续，这看起来有点太笨重了，让我限制自己到前10个，只看前10个值，瞧，现在我有《权力的游戏》33。
- en: friends at 26 the office at 23 though i，think i'm still missing a few brian
    do。you recall the sequel function for，trimming leading and trailing white，space。i
    think it's just trim trim okay i，myself did not remember so when in doubt，fix。this
    let me go ah**d and select，uppercase of，going to，it there。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在 26 的办公室和 23 的朋友们，不过我觉得我仍然遗漏了一些，布莱恩，你记得修剪前导和后导空格的序列函数吗？我想就是 trim，trim，好吧，我自己不记得了，所以如果有疑问，就修正它。让我继续前进，选择大写的内容。
- en: and now enter and voila thank you brian，so now we're up to our。![](img/1e4f07659e58faa22deb662e5dcbd6dd_25.png)
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在输入，瞧，谢谢布莱恩，所以现在我们达到了我们的。![](img/1e4f07659e58faa22deb662e5dcbd6dd_25.png)
- en: 26 offices here so in short，it took us a little while to get to this。point in
    the story in sql but notice，what we've done we've taken a program。that took us
    a few minutes and certainly，a dozen or more lines of code。and we've distilled
    it into something，that yes is a new language。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有 26 个办公室，总之，我们花了一些时间才到达 SQL 的这个故事节点，但请注意，我们做了什么，我们把一个程序浓缩成了几分钟，并且确实是十几行代码，浓缩成了一个新的语言。
- en: but it's just kind of a one-liner and，once you get comfortable with a language，like
    sql especially。if you're not even a computer scientist，but maybe a data scientist。or
    an analyst of some sort who spends a，lot of their day looking at financial。information
    or medical information or，really any data set，that can be loaded into rows and
    columns。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 但这只是一句简单的说法，一旦你对一种语言，比如特别是 SQL，感到舒适。如果你不是计算机科学家，而是数据科学家或某种分析师，整天查看财务信息、医疗信息或任何可以加载成行和列的数据集。
- en: once you start to speak。![](img/1e4f07659e58faa22deb662e5dcbd6dd_27.png)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你开始说。![](img/1e4f07659e58faa22deb662e5dcbd6dd_27.png)
- en: and read sql as a human can you start to，express some pretty powerful queries，your
    answer。and by using a command line program like。![](img/1e4f07659e58faa22deb662e5dcbd6dd_29.png)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 人类可以阅读 SQL，你能开始表达一些非常强大的查询，你的答案。通过使用像这样的命令行程序。![](img/1e4f07659e58faa22deb662e5dcbd6dd_29.png)
- en: results there，albeit as very simplistic text but as，mentioned too there's also
    some，commercial。that also supports sql where you can，still type these commands
    and then it。will show it to you in a more，user-friendly way，much like in windows
    or mac os would by，default。![](img/1e4f07659e58faa22deb662e5dcbd6dd_31.png)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 结果在这里，尽管只是非常简单的文本，但如前所述，还有一些商业软件也支持 SQL，你仍然可以输入这些命令，然后它会以更用户友好的方式显示给你，就像 Windows
    或 Mac OS 默认那样。![](img/1e4f07659e58faa22deb662e5dcbd6dd_31.png)
- en: so any questions now on the syntax or，capabilities，of select statements，any
    questions on selects。seeing anything on your end brian uh one，question came in
    where is the file with。this data actually being stored，where is the good question
    where is the。file actually being stored so，before quitting i can actually save
    this。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在关于选择语句的语法或功能有什么问题吗？关于选择的任何问题。布莱恩，你那边看到什么了，一个问题来了，数据实际存储在哪个文件里？这是个好问题，文件实际存储在哪里？在退出之前，我可以实际保存这个。
- en: file as anything i want the file，extension would typically be，db and in fact
    brian do you mind just。checking what's the syntax for writing，the file manually
    with dot something。i think it's dot save if followed by the，name of the file dot
    save so i'll call，this shows dot。![](img/1e4f07659e58faa22deb662e5dcbd6dd_33.png)
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 文件可以用我想要的任何名字保存，文件扩展名通常是 db，实际上布莱恩，你介意检查一下手动写文件的语法吗，.something。我想是 .save，后面跟着文件名
    .save，所以我会称之为 shows。![](img/1e4f07659e58faa22deb662e5dcbd6dd_33.png)
- en: uh db enter and now if i open up another，terminal window just to demonstrate，whoops。![](img/1e4f07659e58faa22deb662e5dcbd6dd_35.png)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，输入数据库，现在如果我再打开一个终端窗口只是为了演示，哎呀。![](img/1e4f07659e58faa22deb662e5dcbd6dd_35.png)
- en: sorry close the whole thing if i now，will go ah**d and open up another，ls。you'll
    see that now i have a csv file i，have my python file from before and i，i've created。that
    is the binary file that contains，the tables that i the table that i've，loaded
    dynamically in。from that csv file，any other questions on select queries or，anything
    on your end brian yeah a few。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 抱歉，关闭整个东西，如果我现在要继续打开另一个 ls。你会看到我现在有一个 csv 文件，我有之前的 python 文件，我创建的那个是包含表格的二进制文件，我动态加载的表格来自那个
    csv 文件。关于选择查询或其他任何问题，布莱恩，有几个。
- en: people are asking about what the run，time of this is，yeah really good question
    what is the。run time i'm going to come back to that，okay，right now it's admittedly
    big o of n。i've not actually done anything better，than we did with our csv。file
    or our python code right now it's，still big o of n by default but there's。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 人们在询问这个的运行时间，是的，非常好的问题，运行时间是什么。我会回到这个，好的，现在诚然是大O符号为n。我实际上还没有做得比我们之前的csv文件或python代码更好，现在默认仍然是大O符号为n，但还有。
- en: going to be a better answer to，that that's going to make it something。much more
    logarithmic so let me come，back to that feature，when it's time to enable it but
    in fact。let's start to take some steps toward，that because it turns out。when loading
    in data we're not always，going to have the luxury of just having，one big file
    in csv。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这会是一个更好的答案，这将使其更具对数性质，所以让我回到这个特性，当时机成熟时再启用它。实际上，让我们开始朝着那个方向迈出一些步骤，因为事实证明。在加载数据时，我们并不总是有奢侈的机会，只用一个大csv文件。
- en: format that we import and we go about，our business we're gonna have to decide。in
    advance how we wanna store the data，and what data we wanna store。and what the
    relationships might be，across not one single table。but multiple tables so let
    me go ah**d，and run one other command here that。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 导入我们使用的格式，我们需要提前决定如何存储数据，以及我们想存储什么数据，关系是什么，跨越的不仅是一个表，而是多个表。所以让我继续，运行另一个命令。
- en: actually introduces the first of a，problem let me go ah**d and select，title
    from shows where。genres equals for instance comedy that，was one of the genres，and
    notice that we get back a whole。bunch of results but i get i bet i'm，missing some，i'm
    skimming through this pretty quickly。but i bet i'm missing some，because if i check
    if genre is equals，comedy what am i omitting。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上引入了第一个问题，让我去选择，从节目中选择标题，其中流派等于例如喜剧，那是其中一个流派。注意我们返回了很多结果，但我敢打赌我漏掉了一些，我快速浏览这些。可是我打赌我遗漏了一些，因为如果我检查流派等于喜剧，我遗漏了什么。
- en: well those of you who checked multiple，boxes might have said something is a，comedy
    and a drama。or comedy and romance or maybe a couple，of other permutations of genres。if
    i'm searching for equality here，equals comedy i'm only going to get，those favorites
    from you。where you only said my favorite tv show，is a a comedy，comedy，what if
    we want to do something like。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，那些勾选了多个选项的人可能会说某个节目是喜剧和剧情，或者是喜剧和浪漫，或者其他几种流派的组合。如果我在这里搜索相等，等于喜剧，我只会得到你喜欢的那些节目，你只说我最喜欢的电视节目是喜剧。如果我们想做些别的事情。
- en: like comedy instead，and we could say something like well so，long as the word
    comedy is in there。then we should get back even more，results and let me stipulate
    that indeed。i now have a longer list of results，now we have all shows where you
    checked，at least the comedy box。but unfortunately this starts to get a，little
    sloppy because recall what the，select。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 比如喜剧，我们可以说，只要包含“喜剧”这个词，就应该返回更多结果。让我明确一下，确实我现在有一个更长的结果列表，现在我们有所有的节目，你至少勾选了喜剧选项。但不幸的是，这开始变得有些杂乱，因为回想一下选择。
- en: genres from shows semicolon notice that，this table，list，of genres that's just
    the way google。purposes，that's kind of fine for sql purposes but，this is kind
    of messy。like generally speaking storing comma，separated lists，of values in a
    sql database。is not what you should be doing the，whole point of using a sql database。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 来自节目的流派；注意这个表格，流派列表，这就是谷歌的方式。对于sql来说，这样是可以的，但这有点混乱。一般来说，在sql数据库中存储用逗号分隔的值列表并不是你应该做的，使用sql数据库的整个意义就在于此。
- en: is to move away from commas and csvs and，to actually store things more cleanly。because
    in fact let me propose a problem，for，comedy but maybe also music。like this thereby
    allowing me to find，any shows where the word music。is somewhere in the comma separated
    list，there's a subtle bug here and you might。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 是从逗号和csv中转移，实际上更干净地存储信息。因为让我提出一个问题，关于喜剧，但也许还有音乐。这样就能让我找到任何节目，其中包含“音乐”这个词在逗号分隔的列表中，这里有一个微妙的bug，你可能。
- en: have to think back to where，that you pulled up，i can't show the whole thing
    here but we，biography。dot dot music musical，was also there so distinct a music
    video，versus a musical。are two different types of genres but，notice my query at
    the moment。what's problematic with this at the，whereby，but also，musical and so
    this is just where things。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我得回想一下，你提到的地方，我不能在这里展示全部内容，但我们有传记。省略号音乐视频与音乐剧截然不同，这两种类型是不同的流派，但请注意我目前的提问。这里存在的问题是什么，以及，音乐剧，这就是事情的所在。
- en: are getting messy now yeah you know what，we could kind of clean this up。maybe
    we could put a comma here so that，it can't just be，music something it has to be
    music comma。but what if music is the last box that，you checked well then it's
    music。nothing there is no comma so now i need，to like or things together。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在变得混乱了，是的，你知道，我们可以稍微清理一下。也许我们可以在这里放一个逗号，这样它不能只是，音乐某些东西，它必须是音乐逗号。但是如果音乐是你选中的最后一个框，那么就是音乐。那里没有逗号，所以现在我需要，把东西结合起来。
- en: so maybe i have to do something like，we're music like this or or，genres like
    quote-unquote music。![](img/1e4f07659e58faa22deb662e5dcbd6dd_37.png)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 所以也许我得做一些，比如，我们的音乐像这样，或者，类型像所谓的音乐。![](img/1e4f07659e58faa22deb662e5dcbd6dd_37.png)
- en: like this but honestly this is just，getting messy like this is poorly。designed
    if you're just storing your，inside of a column，and you have to resort to this
    kind of。hack to figure out well maybe it's over，here or here or here and thinking
    about。all the permutations of syntax，you're doing it wrong you're not using a。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 像这样，但老实说，这只是，变得凌乱，这样设计得很糟糕，如果你只是将你的，内容存储在一列中，而不得不 resort 这种。黑客方法来弄清楚，或许在这里或那里，或这里，考虑所有语法的排列组合，你做错了，你没有使用一个。
- en: sql database to its fullest potential，so how do we go about designing this。thing
    better and actually load this csv，short，how do we get rid of the stupid commas，in
    the genres。column and instead put one word，those cells，so to speak not two not
    three one only，genres。well let me introduce a few building，blocks that'll get
    us there。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 完全利用sql数据库的潜力，那么我们该如何设计这个。东西更好，实际上加载这个csv，简短地说，我们如何摆脱那些愚蠢的逗号，在类型。列中，而是将一个词放入那些单元格，换句话说，不是两个，不是三个，只有一个，类型。那么让我介绍几个建筑，块帮助我们达到目的。
- en: it turns out in sql that when you want，to，create your own tables we can um sorry。it
    turns out when creating your own，on your own，we're going to need more than just，reading。but
    if we're going to do this better and，not just use sqlite 3's。built-in dot import
    command but instead，we're going to write some code，tables。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，在sql中，当你想要，创建自己的表时，我们可以，抱歉。事实是当你自己创建时，我们需要的不仅仅是，阅读。但是如果我们想更好地做到这一点，而不仅仅是使用sqlite
    3的。内置的点导入命令，而是，我们要写一些代码，表。
- en: one for the titles one for the genres，we're going to need a little more，expressiveness。when
    it comes to sql，and so for that we're going to need one。the ability to create
    our own tables and，we've seen a glimpse of this before but。we're also going to
    need to see another，piece of syntax as well，so inserting inserting is another。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 一个用于标题，一个用于类型，我们需要更多的表现力。谈到sql，所以为此我们需要一个。创建我们自己表的能力，我们之前见过这一点，但。我们还需要看看另一个，语法的部分，因此插入也是另一个。
- en: command that you can，actually，add data to a database which is great，because
    if i want to。ultimately iterate over that same csv，but this time manually add
    all of the，rows to the database。myself well then i'm going to need some，is，table，the
    column or columns that you want to。insert values into，then literally the word
    values and then，literally in parentheses again。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以，实际，向数据库添加数据的命令，这很好，因为如果我想。最终遍历那个相同的csv，但这次手动添加所有的，行到数据库。自己，那么我将需要一些，是，表，您想要插入值的列或列，然后字面上是单词值，然后，字面上在括号中。
- en: the actual list of values so it's a，generic form。![](img/1e4f07659e58faa22deb662e5dcbd6dd_39.png)
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 实际的值列表，因此这是一个，通用形式。![](img/1e4f07659e58faa22deb662e5dcbd6dd_39.png)
- en: just，a moment here as well so when it comes，to inserting something into a database。let's
    go ah**d and try this so，a show，that uh the muppet show like i grew up，like the
    70s。and i don't think it was on the list but，i can check this for sure so，select
    star from shows where。uh title like let's just search for，muppets with a wild
    card，and i'm guessing no one put it there。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 只是，这里稍等一下，当涉及到将某些东西插入数据库时。让我们继续尝试一下，比如**木偶秀**，就像我在70年代成长的那样。我认为它不在列表中，但我可以确认这一点，所以，选择所有内容从节目中，其中，标题像我们只是搜索一下，*muppets*，带一个通配符，我猜没有人把它放在那儿。
- en: good so it's a missed opportunity i，forgot to fill out the form。i could go back
    and fill out the form，and re-import the csv but let's go ah**d，and，insert into
    shows。what columns title and genres，for kicks，and then i'm going to insert what
    values，whatever。time it is now so i'm going to cheat，and the time，the title will
    be like the muppet show。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以这是一个错失的机会，我，忘了填写表单。我可以回去填写表单，并重新导入csv，但让我们继续，插入到节目中。哪些列，标题和类型，为了好玩，然后我将插入什么值，*无论现在是什么时候*，所以我要作弊，标题将是像**木偶秀**这样的。
- en: and the genres will be it was kind of a，kind of。![](img/1e4f07659e58faa22deb662e5dcbd6dd_41.png)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 类型将是它有点像，嗯，类型。![](img/1e4f07659e58faa22deb662e5dcbd6dd_41.png)
- en: leave it at that semicolon so again this，follows the standard syntax here。of
    specifying the table you want to，insert into the columns you want to，insert into。and
    the values you want to put into。![](img/1e4f07659e58faa22deb662e5dcbd6dd_43.png)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样留下分号，所以这遵循标准语法，指定你想插入的表，插入的列，以及你想放入的值。![](img/1e4f07659e58faa22deb662e5dcbd6dd_43.png)
- en: those columns and i'm going to go ah**d，and hit enter now，nothing seems to have
    happened but if i。now select，oh okay it's still nothing because i，made a subtle
    mistake。uh not i'm not searching for muppets，plural i'm searching for muppet，see
    my。row in this database and so insert would，give us the ability now to insert
    new。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 那些列，我现在要去啊**d，按下回车，现在似乎没有发生什么，但如果我。现在选择，哦，好的还是没什么，因为我犯了一个小错误。嗯，我不是在搜索 muppets（复数），我在搜索
    muppet，看看我的。行在这个数据库中，因此插入将使我们现在能够插入新的数据。
- en: rows into the database suppose you want，to update something maybe you know。some
    of the muppet shows were actually，pretty dramatic so how might we do that。well
    i can say update shows set，let's see genres equal to comedy，drama musical where。title
    equals the muppet show，so again i'll pull up the canonical。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 将行插入数据库，假设你想更新某些内容，也许你知道。某些木偶节目实际上非常戏剧化，那么我们该如何做呢？嗯，我可以说更新 shows 设置，看看类型等于喜剧、戏剧、音乐剧，条件是。标题等于木偶秀，所以我再次提取经典版本。
- en: syntax for this in a bit but for now，just a little teaser，you can update things
    pretty simply and。even though it takes a little getting，used to the syntax，it
    kind of does what it says update。shows set genres，equal to this where title equals
    that，and now i can go ah**d and enter if i go。ahead and select the same thing
    just，like in a terminal window you can go up，quickly。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 语法稍后会讲，但现在只是一个小提示，你可以非常简单地更新内容。尽管需要一点时间来适应语法，但它确实如所说的那样工作，更新。shows 设置类型等于这个，条件是标题等于那个，现在我可以去啊**d，输入。如果我继续选择同样的东西，就像在终端窗口中一样，你可以快速向上滚动。
- en: i'm just going up and down to previous，commands voila now i see that the muppet。show
    is a comedy a drama，drama and a musical well i i take，issue though with one of
    the more。popular shows that was in the list a，whole bunch of you liked um，let's
    say friends which i've never。really been a fan of and let me go ah**d，and select，a
    title from shows where。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是在上下滚动以前的命令，瞧，现在我看到木偶秀是一个喜剧，一个戏剧，戏剧和音乐剧，不过，我对列表中更受欢迎的节目有些意见，你们中有很多人喜欢，嗯，假设是朋友，我从来没有真正喜欢过，让我去啊**d，选择。一个标题从
    shows 中。
- en: title equals friends and maybe i should，be a little more rigorous than that
    i，should say title。like friends just in case there was，different capitalizations
    enter。a lot of you really liked friends in，fact how many of you well recall that
    i。can do this i can say count，and i can let sequel do the count for me。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 标题等于朋友，也许我应该更严格一点，我应该说标题。就像朋友，以防有不同的大小写出现。很多人真的很喜欢朋友，实际上你们中有多少人还记得我。可以做到这一点，我可以说计数，并且我可以让续集为我计数。
- en: 26 of you i disagree with strongly and，there's a couple of you that even added，later。so
    suppose i do take issue with this，well delete from，shows where title equals quote
    unquote。friends uh actually title like friends，let's get them all。![](img/1e4f07659e58faa22deb662e5dcbd6dd_45.png)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中有 26 个人我强烈不同意，还有几个人甚至在后面添加了内容。那么假设我对此有异议，嗯从 shows 中删除，标题等于引用的朋友，实际上标题类似朋友，来吧把它们都找出来。![](img/1e4f07659e58faa22deb662e5dcbd6dd_45.png)
- en: enter and now if we select this again，i'm sorry friends has been cancelled so，you
    can again。update the you can execute these，fundamental commands of crud create
    read，update and delete，select。by using update literally and delete，literally as
    well，and that's about it like even though。this was a lot quickly there really
    are，just those four fundamental operations。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 输入，现在如果我们再次选择，抱歉，朋友已经被取消了，所以你可以再次。更新你可以执行这些基本的 CRUD 命令，创建、读取、更新和删除，选择。通过字面意义上的更新和删除来实现，而就这些而言，即使这很快，确实只是这四个基本操作。
- en: in sql plus some of these add-on，features like these additional functions。like
    count that you can use and also，the like，well let me propose that we now do，data。and
    create tables and insert data let's，go ah**d and write our own。![](img/1e4f07659e58faa22deb662e5dcbd6dd_47.png)
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在 SQL 中，一些附加功能，比如这些额外的函数，比如计数，你可以使用，还有类似的功能，嗯，让我提议我们现在做数据。创建表并插入数据，让我们开始吧，啊**d，自己写点代码。![](img/1e4f07659e58faa22deb662e5dcbd6dd_47.png)
- en: python script that uses sql，as in a loop to read over my csv file。and to insert
    insert insert insert each，of the rows manually because honestly it。will take me
    forever to like manually，type out like hundreds of sql queries to。import all of
    your rows into a new，does this instead，and i'm going to propose that we design。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: python 脚本使用 sql，以循环的方式读取我的 csv 文件，并逐行手动插入，因为老实说，这样手动输入数百条 sql 查询将花费我太多时间。为了将你的所有行导入到一个新的表中，我将这样做，并建议我们设计。
- en: it in the following way，i'm going to have two tables this time。![](img/1e4f07659e58faa22deb662e5dcbd6dd_49.png)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以以下方式进行，我这次将有两个表。![](img/1e4f07659e58faa22deb662e5dcbd6dd_49.png)
- en: rendition，one is going to be called shows one is，going to be called genres。and
    this is a fundamental principle，of designing relational databases to。figure out
    the relationships，among data and to normalize，your data to normalize your data
    means。to eliminate redundancies，to normalize your data means to，eliminate mentions
    of the same words，*****。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: renditions，其中一个将被称为 shows，另一个将被称为 genres。这是设计关系数据库的基本原则，以弄清楚数据之间的关系，并规范化你的数据。规范化你的数据意味着消除冗余，规范化你的数据意味着消除对相同词汇的多次提及，*****。
- en: '*****，mean by that，i''m going to propose that we instead，create a simpler table
    called。shows that has just two columns one is，going to be called id，which is new
    the other is going to be。called title as before honestly i don''t，care about timest*mps
    so we''re just。going to throw that value away which is，another upside of writing
    our own，want。'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '*****，我的意思是，我将建议我们创建一个更简单的表，称为 shows，只有两列，一列将被称为 id，这是新的，另一列将像以前一样被称为 title。老实说，我不在乎时间戳，所以我们将把那个值丢弃，这也是自己编写的一个好处。'
- en: for id i'm introducing this which is，going to be a unique identifier，literally
    a simple integer one。two three all the way up to a billion or，have，i'm just going
    to let this auto，increment as we go why。i propose that we move to another table。![](img/1e4f07659e58faa22deb662e5dcbd6dd_51.png)
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 id，我引入了这个，它将是一个唯一标识符，字面上是一个简单的整数，从一、二、三一直到十亿。我将让它随着我们进行而自增，为什么？我建议我们转到另一个表。![](img/1e4f07659e58faa22deb662e5dcbd6dd_51.png)
- en: having，one or two or three or five genres in，list，which is stupid only in the
    sense that。it's just messy right it means that i，have to run stupid commands where
    i'm。checking for the comma here the comma，there it's very hackish，that。i'm going
    to create another table that，also has two columns，one is going to be called show
    id and。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一到三个或五个类型的列表，这在某种意义上是愚蠢的，因为这只是杂乱无章，这意味着我必须运行愚蠢的命令，检查这里的逗号，那里也有逗号，这非常 hackish。我将创建另一个表，它也有两列，一列将被称为
    show id。
- en: the other is going to be called，genre and genre here is just going to be，a single
    word now。that column will contain single words，for genres like，comedy or music
    or musical but，genres。with the original show to which they，belong per your google
    form submissions。by using this show id here so what does，this mean in particular。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 另一列将被称为 genre，而这里的 genre 只会是一个单词。那一列将包含单词，例如 comedy、music 或 musical，但 genres
    将与它们所属的原始节目相关联，根据你的 Google 表单提交。通过在这里使用这个 show id，这具体意味着什么。
- en: by adding to our first table shows this，five six，i can now refer to that same
    show。in a very efficient way using a very，simple number instead of redundantly。having
    the office the office the office，just one，canonical number which is only going
    to。be like four bytes or 32 bits，pretty efficient but i can still。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 通过向我们的第一个表 shows 添加这五、六，我现在可以以非常高效的方式引用同一个节目，使用一个非常简单的数字，而不是冗余地写出 the office、the
    office、the office，只需一个规范的数字，这个数字只会是四个字节或 32 位，效率很高，但我仍然可以。
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_53.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_53.png)'
- en: associate that show with，one genre or two or three or more or，even none，table。is
    going to become one or more rows，in our new pair of tables we're，factoring out
    the genres。so that we can add multiple rows，for every show potentially but still，remap
    those。genres back to the original show itself，so what is some of the the buzzwords。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个节目与一个、两个、三个或更多类型关联，甚至没有。这个表将变成我们新的一对表中的一行或多行，我们正在将类型提取出来，以便我们可以为每个节目添加多行，但仍然将这些类型重新映射回原始节目本身。那么，这些流行词是什么呢？
- en: here or what's some of the the language，what kinds of，types are at our disposal
    here so for。that let me propose this，here，it turns out in sql lite there are five。main
    data types and that's a bit of an，data types，some of which look familiar a couple
    of。which are a little weird um。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这里或者说一下我们有哪些语言，哪些种类，类型可以使用。为此我想提到，在SQLite中有五种主要的数据类型，这些数据类型中有一些看起来很熟悉，还有一些稍显奇怪。
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_55.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_55.png)'
- en: integer is a thing uh real，is the same thing as float so an integer。might be
    a 32 bit or four byte value，negative，a real number is going to have a decimal。point
    in it a floating point value，probably 32 bits by default but those。kinds of things
    the sizes of these types，vary by system just like they。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 整数是一个东西，而实数和浮点数是相同的。因此，一个整数可能是一个32位或四字节的值，负数，一个实数将会有小数点，一个浮点值，通常默认是32位，但这些类型的大小因系统而异，就像它们支持。
- en: technically did in c so do they vary by，system in the world of sql but generally。speaking
    these are good rules of thumb，text is just that it's sort of the。equivalent of
    a string of some length，but then in sql light it turns out。there's two other data
    types we've not，seen before numeric and blob。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，在C中也是如此，因此它们在SQL世界中因系统而异，但一般来说，这些都是很好的经验法则，文本就是这样的，它是某种长度的字符串的等价物，但在SQLite中，似乎还有两种我们之前没有见过的数据类型，数字型和blob。
- en: but more on those in just a little bit，can store，zeros and ones in your database
    numeric。is going to be something that's，number like but isn't a number per se，it's
    like a year or a time。something that has numbers but isn't，just a simple integer，at
    that and then we propose two that sql。light is going to allow us to specify，manually，by
    executing the sql code ourselves we。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 但是稍后会详细介绍这些。可以在数据库中存储零和一，数字型将是某种类似数字但不完全是数字的东西，比如年份或时间。某些有数字的东西但不是简单的整数，然后我们提出两个，SQLite将允许我们手动指定，通过自己执行SQL代码。
- en: can specify that a column，cannot be null thus far we've ignored，this but some
    of you might have。taken the fifth and just not given us，the title of a show or
    a genre。your answers might be blank some of you，may be in registering for a website。don't
    want to provide information like，where you live or your phone number so a。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 可以指定某一列，不能为null。到目前为止我们一直忽略这个，但你们中的一些人可能已经选择不提供，节目或类型的标题。你的答案可能是空白，你们中的一些人，在注册网站时，不想提供信息，比如你住在哪里或你的电话号码。
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_57.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_57.png)'
- en: to support，null values but you might want to say，that it can't be null a website
    probably。needs your email address needs your，password and a few other fields but
    not。everything and there's another keyword，in sql just so you've seen it。called
    unique where you can additionally，column，also use that，if you want to make sure
    that the same。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 空值，但你可能想说，它不能为null。一个网站可能需要你的电子邮件地址，需要你的密码和其他几个字段，但不是所有字段。而且在SQL中还有另一个关键词，叫做unique，你可以在想确保同一个。
- en: email address can't register for your，website multiple times，you just specify
    that the email column。multiple people，long story short，this is just more of the
    tools in our。sql toolkit because we'll see some of，these now indirectly，and the
    last piece of jargon we need。before designing our own tables，sql，there's this
    notion of primary keys and。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 电子邮件地址不能多次注册你的网站，你只需指定电子邮件列。多个用户，长话短说，这只是我们SQL工具包中的更多工具，因为我们现在会间接看到其中一些，而在设计我们自己的表之前，我们需要的最后一个术语是SQL的主键概念。
- en: foreign keys and we've not seen this in，spreadsheets，odds are unless you've
    been working in。the real world for some years and you。![](img/1e4f07659e58faa22deb662e5dcbd6dd_59.png)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 外键，我们在电子表格中没有见过，除非你在真实世界中工作了几年。![](img/1e4f07659e58faa22deb662e5dcbd6dd_59.png)
- en: have fairly fancy spreadsheets in front，and the like，odds are you've not seen
    keys or unique。identifiers in quite the same way。![](img/1e4f07659e58faa22deb662e5dcbd6dd_61.png)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面有相当复杂的电子表格， odds are 你可能没有以相同的方式看到键或唯一标识符。![](img/1e4f07659e58faa22deb662e5dcbd6dd_61.png)
- en: but they're relatively simple in fact，let me go back to，our picture before and
    propose that。when you have two tables like this and，you want to use a simple integer
    to，uniquely identify。that's called，technically an id that's what i'll call，it
    by convention you could call it。anything you want but id just means it's，a unique
    identifier，but semantically this id is what's。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 但它们实际上相对简单，让我回到之前的图示，提出当你有两个这样的表时，你想用一个简单的整数来唯一标识。这被称为，技术上是一个ID，按惯例我会称之为。你可以称它为任何你想要的东西，但ID只意味着这是，一个唯一标识符，但在语义上，这个ID就是。
- en: called a primary key，a primary key is the column in a table，that uniquely identifies
    every row。this means you can have multiple，versions of the office in that。title
    field but each of those rows is，going to have its own number uniquely。potentially
    so primary key uniquely，like，genres which i'm proposing we create in，just a moment，refer。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 称为主键，主键是一个表中的列，唯一标识每一行。这意味着你可以在标题字段中有多个版本的《办公室》，但每一行将有自己的唯一编号。因此主键唯一，就像我建议我们马上创建的类型一样，参考。
- en: back to another table by way of that，unique identifier，called。a foreign key
    so even though i've called，it show id，here that's just a convention in a lot。of
    sql databases to imply that，this is technically a column called id，in a table。called
    show or shows plural in this case，so if there's a number one here and，suppose
    that。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 通过那个唯一标识符，称为外键，虽然我在这里称它为显示ID，这在很多SQL数据库中是一个约定，意味着这是技术上在一个表中称为ID的列。叫做显示或复数形式的显示，因此如果这里是数字一，假设。
- en: the office has a unique id of one，we would have a row in this table called，id
    is one，in。the comedy category the drama category，ones，output，three rows the number
    one one one，comedy。respectively，so again the goal here is to just design，our database
    better。not have these stupid comma separated，list of values，inside of a single
    column we want to。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 办公室有一个唯一的ID为一，在这个表中我们会有一行，ID为一。在喜剧类别，剧情类别，输出三行，分别是第一、第一、第一，喜剧。所以再次强调，这里的目标是设计得更好。不要在单一列中有愚蠢的逗号分隔值列表，我们想要。
- en: kind of blow that up explode it，into individual rows you might think，columns。but
    again per our principle from，spreadsheets you should not be in the，habit of adding
    more and more。columns when the data is all the same，like genre genre genre right
    the sort of。stupid way to do this in the spreadsheet，genre one，another column
    called genre two another。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 一种将其拆分为单独行的方式，你可能会想到，列。但根据我们的原则，来自电子表格，你不应该习惯性地增加更多和更多的列，当数据都是相同的，比如类型类型类型，没错，这在电子表格中是一种愚蠢的做法，类型一个，再添加一个叫做类型二的列。
- en: column called genre three，genre four and you can imagine just how，stupid and
    inefficient this is。a lot of those columns are going to be，empty for shows with
    very few。genres and it's just kind of messy at，that point so better，in the world
    of relational databases to。have something like a second table，where you have multiple
    rows that，somehow link back to。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 一列叫做类型三，类型四，你可以想象这有多愚蠢和低效。很多这样的列将会为空，对于那些类型非常少的节目来说，这显得有点杂乱，因此在关系数据库的世界里，更好的是。拥有一个第二个表，那里有多行，某种方式链接回。
- en: that primary key by way of what we're，calling conceptually，a foreign key all
    right so let's go。ahead now and try to write this code let，me go back to my ide，let
    me quit out of sql lite now。and let me just move away i'm going to，move this away，my
    file for just a moment so that we're。only left with our original data，let's go
    about implementing a final，version of my python file。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 通过我们所称的概念上，一个外键来实现主键，所以让我们现在继续，尝试写这个代码，让我回到我的IDE，让我退出SQL Lite。让我稍微移动一下我的文件，暂时移开，让我们只保留原始数据，开始实现我的Python文件的最终版本。
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_63.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_63.png)'
- en: called，shows one called genres and then two，in a for loop iterates over that
    csv and。inserts some data into the shows and，other data into the genres how can
    we do，this programmatically。well there's a final piece of the puzzle，that we need
    we need some way of。bridging the world of python and sql，and here we do need a
    library because it。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 被称为，显示一个叫做类型的表，然后在一个循环中遍历那个CSV，并插入一些数据到显示中，其他数据到类型中，我们如何以编程方式做到这一点。好吧，我们还需要一个拼图的最后一部分，我们需要某种方法来连接Python和SQL的世界，在这里我们确实需要一个库，因为它。
- en: would just be way too painful to do，without a library，it can be cs50 cs50s as
    we'll see makes。this very simple，there are other third-party commercial，and open
    source libraries that you can。also use in the real world as well，that do the same
    thing but the syntax is，a little less friendly。so we'll start by using the cs50
    library，which in python recall has functions。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有库，这将会非常痛苦，cs50s如我们所见，使得这变得非常简单。还有其他第三方商业和开源库，你也可以在现实世界中使用，它们做的事情相同，但语法就不那么友好了。所以我们将首先使用cs50库，记得在python中有函数。
- en: like getstring and getint and getfloat，out。![](img/1e4f07659e58faa22deb662e5dcbd6dd_65.png)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 像getstring、getint和getfloat，out。![](img/1e4f07659e58faa22deb662e5dcbd6dd_65.png)
- en: for sql capabilities as well so i'm，going to go back to my favorites file。and
    i'm going to import not only csv but，i'm also going to import，from the cs50 library
    a feature。you will，inside of the cs50 library or rather a，called，sql that if i
    call it will allow me to。![](img/1e4f07659e58faa22deb662e5dcbd6dd_67.png)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 也为sql能力，所以我将回到我最喜欢的文件。我不仅要导入csv，还要从cs50库中导入一个功能。你将在cs50库中找到这个，或者说是sql，如果我调用它，它将允许我。![](img/1e4f07659e58faa22deb662e5dcbd6dd_67.png)
- en: load a sql lite，database into memory so how do i do this，well let me go ah**d
    and add a couple of。new lines of code，let me go ah**d and um open up，a file called
    shows。db。but this time in write mode and then，just for kick just for now rather
    i'm，away。this is a a pythonic way of creating an，empty file it's kind of stupid
    looking。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个sql lite数据库加载到内存中，那我该怎么做呢？让我继续添加几行新的代码，让我继续打开一个名为shows.db的文件。但这次以写模式，然后，为了好玩，暂时我会。以一种pythonic的方式创建一个空文件，这看起来有点傻。
- en: but by opening a file called shows。db in，write mode and then immediately closing，file。closing
    the file so i now have an empty，file with which to interact。i could also do this
    as an aside by，doing this touch，shows。db touch kind of a strange command。![](img/1e4f07659e58faa22deb662e5dcbd6dd_69.png)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 但通过以写模式打开一个名为shows.db的文件，然后立即关闭文件。我现在有一个空文件可以进行交互。我也可以通过执行这个touch shows.db，这个命令有点奇怪。![](img/1e4f07659e58faa22deb662e5dcbd6dd_69.png)
- en: but in a terminal window it means to，create a file，if it doesn't exist so we
    could also do。that instead but that would be on，uh that would be independent of
    python。so once i've created this file，a，sqlite database i'm going to declare a。variable
    called db for database，i'm going to use the sql function from，cs50s library。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 但在终端窗口中，它意味着创建一个文件，如果它不存在。所以我们也可以这样做，但那将是独立于python的。所以一旦我创建了这个sqlite数据库，我将声明一个名为db的变量，用于数据库，我将使用cs50s库中的sql函数。
- en: and i'm going to open via somewhat，cryptic string this，sqlite colon slash slash，shows。db
    now it looks like a url，http colon slash but it's sql lite，instead and there's
    three。uh slashes instead of the usual two but。![](img/1e4f07659e58faa22deb662e5dcbd6dd_71.png)
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我将通过一些有点神秘的字符串打开这个sqlite数据库，sqlite://shows.db，现在看起来像一个url，http://，但它是sql lite，而有三个斜杠而不是通常的两个，但是。![](img/1e4f07659e58faa22deb662e5dcbd6dd_71.png)
- en: result of，with nothing，in it yet as being a sqlite database，using cs50s library
    why did i do that。well i did that because i now want to，create my first table，let
    me go ah**d and execute db。execute。so there's a function called，execute inside
    of the cs50 sql library。and i'm going to go ah**d and run this，create table，called
    shows the type of which。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 结果是，目前还没有内容，作为一个sqlite数据库，使用cs50s库，为什么我这样做？好吧，我这样做是因为我现在想要创建我的第一个表，让我继续执行db。execute。所以在cs50
    sql库中有一个名为execute的函数。我将继续运行这个，创建一个名为shows的表，其类型为。
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_73.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_73.png)'
- en: the columns of which are an id which is，going to be an integer，a title which
    is going to be text the。primary key，in which is going to be the id column，so this
    is a bit cryptic but let's see。what's happening，i seem to now in line 8 be combining，python
    with sql and this is where now。like programming gets really，powerful fancy cool
    difficult whatever，however you want to perceive it。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 它的列有一个id，它将是一个整数，一个标题，它将是文本，主键将是id列，所以这有点神秘，但让我们看看发生了什么。我似乎现在在第8行将python与sql结合在一起，这就是编程变得真正强大、花哨、酷和困难的地方，随你怎么理解。
- en: i can actually use one language inside，of another how well，sql is just a bunch
    of textual commands。up until now i've been typing them out，light 3。there's nothing
    stopping me though from，strings。and then passing them to a database，using code，the
    code i'm using is a function called。execute and its purpose in life and cs50，staff
    wrote this，is to pass the argument。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我实际上可以在一种语言中使用另一种语言，SQL只是一堆文本命令。直到现在，我一直在手动输入它们，轻松一点。不过没有什么阻止我使用字符串，然后将它们传递给数据库，使用代码，我使用的代码是一个名为`execute`的函数，它在CS50中的作用是传递参数。
- en: from your python code into the database，for execution so it's like the。programmatic
    way of just typing things，manually at the sql lite prompt a few，minutes ago。so
    that's going to go ah**d and create，my table called shows in which i'm going。to
    store all of those unique ids，and also the titles and then let me do，this again
    db。execute。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 从你的Python代码中执行到数据库，这就像是以编程的方式手动在SQL Lite提示符下输入几分钟前的命令。因此，这将去创建一个名为shows的表格，我将存储所有唯一的id和标题，然后让我再次执行`db.execute`。
- en: create table genres and that's going to，have a column called show id。which is
    an integer also genre which is，text and lastly it's going to have a。foreign key
    it's going to wrap onto two，it's going to wrap a little long here on，show id。which
    references the shows table id，all right so this is a lot so let's just，recap left
    to right。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 创建表格genres，它将有一列叫做show id，类型为整数，还有genre，类型为文本，最后它将有一个外键，引用show id，指向shows表的id。好吧，这信息量很大，让我们从左到右回顾一下。
- en: db execute is my python function that，executes any sql i want，create table genres
    creates a table。called genres the columns，in that table will be something called，show
    id which is an integer。and genre which is a text field but it's，going to be one
    genre at a time。not multiple and then here i'm，specifying a foreign，key will be
    the show id column。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`db.execute`是我执行任何SQL的Python函数，创建表genres，创建一个名为genres的表格，该表格的列将有一个叫做show id的整数和一个文本字段genre，但它将是一次一个genre，而不是多个，然后在这里我指定一个外键，即show
    id列。'
- en: which happens to refer back to the shows，tables，brian over to you uh never mind
    no okay。did i just fix the bug，yes okay brian's very good at secretly，it first
    so。well i knew that something was wrong all，right so it's a little cryptic。![](img/1e4f07659e58faa22deb662e5dcbd6dd_75.png)
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 它正好指向shows表，Brian，交给你了，没关系。哦，好的，我刚刚修复了这个bug，是的，Brian在秘密解决这个问题方面很不错。好吧，我知道有什么地方不对，好的，所以这有点晦涩。![](img/1e4f07659e58faa22deb662e5dcbd6dd_75.png)
- en: but all this is doing is implementing，here，i could have manually typed both
    of。![](img/1e4f07659e58faa22deb662e5dcbd6dd_77.png)
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 但这一切只是实现了在这里，我本可以手动输入两个SQL命令！[](img/1e4f07659e58faa22deb662e5dcbd6dd_77.png)
- en: these sql commands，at that blinking prompt but again no i，want to write a program
    now in python。that creates the tables for me and now，more interestingly loads
    the data into。that that database so let's go ah**d and，do this now i'm not going
    to select a。title from the user because i want to，import everything，i'm not going
    to use any counting or。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个闪烁的提示符下输入这两个SQL命令，但我想写一个程序，现在用Python为我创建表格，更有趣的是将数据加载到数据库中。所以让我们继续，我不打算从用户那里选择一个标题，因为我想导入所有内容，我不会使用任何计数或。
- en: anything like that so let's go ah**d and，just go inside of my loop as before。and
    this time let's go ah**d and for，row in reader let's go ah**d and get the。current
    title as we've always done，but let's also as always go ah**d and，strip it of white
    space。and capitalize it just to canonicalize，execute db，execute quote unquote
    insert into。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 任何这样的东西。所以让我们继续，像以前一样进入我的循环。这次让我们继续，从reader中获取当前标题，像往常一样，但也让我们继续去掉空格并大写，以便规范化，执行`db.execute`，插入。
- en: shows the title column the value，of quote-unquote uh，title so i want to put
    the title here it。turns out that，sql libraries like ours supports one a，placeholder。in
    c we used percent s in python we just，there，in sql we have a third approach to
    the，different but。conceptually the same you put a question，mark where you want
    to put a placeholder。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: shows表中的标题列的值为“标题”，所以我想在这里放入标题。事实证明，像我们的SQL库支持一个占位符。在C语言中我们用`%s`，在Python中我们用“”，在SQL中我们有第三种方法，概念上是相同的，你放置一个问号在你想放置占位符的地方。
- en: and then outside of this string i'm，going to actually type in。the value that
    i want to plug into that，question mark so this is so similar to，printf in week
    one。mark now，and then a comma separated list of the，arguments you want to plug
    in for those，placeholders。so now this line of code 16 has just，inserted，all of
    those values into my database and。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在这个字符串外面，我实际上会输入我想要插入那个问号的值，这与第一周的`printf`非常相似。现在，接着是你想为那些占位符插入的参数的逗号分隔列表。现在这行代码16已经将所有这些值插入到我的数据库中。
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_79.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_79.png)'
- en: any further，let me go ah**d and do this i'm going to，go ah**d now and run python。a
    favorite stop pi and cross my fingers，as always，it's taking a moment taking a
    moment。that's because there's a decent，sized file there or i screwed up。take this
    is taking too long what did i，do wrong，okay this is inexplicably taking too。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我继续，啊**d，做这个，我现在要运行python。一个喜欢的停止点，心中祈祷，一如既往，正在加载，正在加载。这是因为那里有一个相当大的文件，或者我搞砸了。等这个太久了，我做错了什么，好的，这显然花费了太长时间。
- en: it's getting bigger and bigger for some，oh okay i should have just been more，patient
    all right。so it just seems my connection's a，little slow so，uh as i expected everything
    is 100。correct and it's working fine so now，did，if i type ls notice that i have
    a file，called shows。db。this is brand new because my python，program created it
    this time，let's go ah**d and run sqlite3 of。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 它变得越来越大，哦，好吧，我应该更有耐心。好了，看来我的连接有点慢，所以，嗯，正如我预期的一切都是100。正确，并且运行良好，所以现在，如果我输入ls，请注意我有一个名为shows.db的文件。这是全新的，因为我的python程序创建了它。现在，让我们继续运行sqlite3。
- en: inside of it，notice that i can do。schema just to see，tables，exist。but notice
    that there's if i do select，star from shows let's see all the data。voila there
    is a table that's been，programmatically created，and it has noticed this time no
    time。st*mps no genres，title，ids。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在其中，我注意到我可以做。schema只是查看，表是否存在。但请注意，如果我执行选择，星号从shows，让我们看看所有数据。瞧，已经程序性创建了一个表，这次注意没有时间。st*mps，没有类型，标题，id。
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_81.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_81.png)'
- en: are monotonically increasing from 1 on，up to 513 in this case why is that。well
    one of the features you get in a，sql database is if you define a column。as being
    a primary key in sql lite，it's going to be auto incremented for。you recall that
    nowhere in my code，did i even have a line an integer。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 从1开始单调递增到513，这种情况为什么会这样？那么你在sql数据库中获得的一个特性是，如果你将一列定义为主键，在sql lite中，它将为你自动递增。请记住，在我的代码中，根本没有一行是整数。
- en: inputting one then two then three i，could absolutely do that，i could have done
    something like this。counter rather，i could have done something like this，counter
    equals one。and then down here i could have said id，comma title，give myself two
    placeholders and then。pass in the counter each time，i could have implemented this
    myself and。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 输入一个然后是两个然后是三个，我完全可以做到，我可以这样做。计数器，实际上我可以这样做，计数器等于一。然后在这里我可以说id，逗号标题，给自己两个占位符。然后每次传入计数器，我可以自己实现这个。
- en: then on each iteration done counter plus，equals one，but with sql databases as
    we've seen you。get a lot more functionality built in，i don't have to do any of
    that because。if i've declared that id as being a，primary key。![](img/1e4f07659e58faa22deb662e5dcbd6dd_83.png)
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在每次迭代中，计数器加一，但正如我们所见，在sql数据库中，你会得到更多内置的功能，我不必做任何事情，因为如果我已经将该id声明为主键。![](img/1e4f07659e58faa22deb662e5dcbd6dd_83.png)
- en: sqlite is going to insert it for me and，right，so if i go back to sql lite though。notice
    that i do have ids and titles but，if i select star，there yet。![](img/1e4f07659e58faa22deb662e5dcbd6dd_85.png)
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: sqlite将为我插入它，所以，如果我回到sql lite，请注意我确实有id和标题，但如果我选择星号，还没有。![](img/1e4f07659e58faa22deb662e5dcbd6dd_85.png)
- en: so how now do i get all of the genres，for each of these shows in i need to，finish
    my script。only the title，in my current row but i also have genres，in the current
    row。but the genres are separated by commas，recall that in the csv，next to every
    title there's a comma。separated list of titles so how do，genres how do i get at
    each genre，say for，genre in row bracket。
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我现在如何获取每个节目的所有类型，我需要完成我的脚本。当前行中只有标题，但我也有当前行中的类型。但是类型是用逗号分隔的，回想一下在csv中，每个标题旁边都有一个逗号分隔的标题列表。那么我该如何访问每个类型呢？假设对，类型在行括号中。
- en: genres but this is not going to work，because that's not，going to be split up
    based on those。iterate over，in fact all of the characters in that，string as we
    saw last week。but it turns out that strings in python，have a fancy split function。whereby
    i can split on a comma followed，by a space，and what this function will do for
    me in，genres。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 但是这行不通，因为不会基于这些进行分割。实际上，正如上周所看到的，我们需要对字符串中的所有字符进行迭代。但事实证明，Python中的字符串有一个华丽的分割函数。我可以在逗号后面跟一个空格进行分割，而这个函数将为我在类型中执行。
- en: and explode it so to speak split it on，every comma space into a python list。containing
    genre after genre，in an actual python list allah squ*re，brackets so now i can。iterate
    over that list of individual，genres and inside of here。i can do db execute insert
    into genres，show id genre the values，question mark question mark but。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 并且可以说会将其分割，在每个逗号和空格上，将其转换为包含类型的Python列表。现在我可以对这个单独类型的列表进行迭代，在这里我可以执行db执行插入到类型中，节目ID类型的值，问号问号。
- en: huh there's a problem i can definitely，plug in the current，something。here still
    for that first question mark，i need a value for the show id how do i，know what
    the id。is of the current tv show well it turns，out the library can help you with。this
    when you insert new rows into，a table that has a primary key it turns。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，有个问题，我肯定可以将当前的某些东西插入这里，仍然需要第一个问号的值，我怎么知道当前电视节目的ID是什么呢？事实证明，库可以在你向有主键的表插入新行时提供帮助。
- en: out that most libraries will return you，that value in some way，and if i go back
    to line 15 and i。actually store the return，value of db execute after using insert。my
    the library will tell me what was the，integer that was just used for this。given
    show maybe it's one two three，i don't have to know or care as the。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数库会以某种方式返回你这个值，如果我回到第15行，实际上在使用插入后存储db执行的返回值，库会告诉我刚刚为这个给定的节目使用了哪个整数，可能是123，我不需要知道或者关心。
- en: programmer but the return value i can，store in a variable，and then down here
    i can literally put。that same id，so that now if i am inputting the office，whose
    id is one。into the shows table and its genres are，comedy drama romance，i can now
    inside of this for loop this。nested for loop，insert one followed by comedy，romance，three
    rows all at once and so now let's。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 程序员，但我可以将返回值存储在一个变量中，然后在这里我可以直接放置那个相同的ID，这样如果我输入的办公室ID是1，并且其类型是喜剧、戏剧、爱情，我可以在这个嵌套的for循环中，一次插入喜剧、爱情的三行数据。
- en: go back down here，uh into my terminal window let me remove，the old shows。db。with
    rm just to start fresh let me go，ahead and rerun，uh python of favorites。pi i'll
    be more。patient this time because，cloud's being a little slow so it's。doing some
    thinking and in fact there's，more work being done now。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回到这里，呃，在我的终端窗口，让我删除旧的shows.db，使用rm命令以重新开始。让我继续重新运行，呃，python favorites.py。这次我会更加耐心，因为云端有点慢，所以它正在思考，实际上现在正在进行更多的工作。
- en: at this point in the story my program is，rows，in the csv and it's inserting
    into，it's inserting。one or more genres into，the genres table and，that，do its thing
    there let me let it。do its thing there let me let it do its，thing there，it's a
    little slow if we're on a faster。system or if i were doing it on my own，mac or
    pc it would probably go。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 在故事的这个时刻，我的程序正在CSV中插入行，并且正在将一个或多个类型插入到类型表中，让它在那里处理一下。它有点慢，如果我们在更快的系统上，或者在我自己的Mac或PC上，它可能会更快。
- en: down more quickly but you can see here，an example of why i used the dot import。command
    in the first place，that automated some of this process but，change。the format of
    my data but the key point，to make here，is that even though this is taking a。little
    bit of time to insert these，hundreds of rows all at once。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 更快地下降，但你可以在这里看到我为什么最初使用点导入命令的一个例子，它自动化了这个过程的一部分，但改变了我的数据格式。但关键要点是，尽管一次插入几百行花了一些时间。
- en: i'm only going to have to do this once，and was asked a minute a bit ago。was
    the performance of this it turns out，that now that we have full control。over the
    sql database it turns out we're，going to have the ability to。to actually um improve
    the performance，thereof and i really don't want to keep。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我只需要做一次，刚才有问过关于性能的事情，事实证明现在我们完全控制了SQL数据库，因此我们有能力提升其性能，而我真的不想继续。
- en: stalling here i really just want this，thing to finish i should have used a，take。nearly
    as long on some other systems，but let me just stall for a few more，seconds。stalling
    stalling stalling stalling，well let me suspend our，suspense for just a moment
    and use the。time wisely let me switch over，oh okay as expected it finished right
    on。
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我只是想让这个事情完成，我应该使用一个需要的时间。几乎在其他系统上所需的时间一样，但让我再拖延几秒钟。拖延拖延拖延拖延，好吧，让我暂停我们的悬念，利用这个时间，让我切换到，哦，好的，正如预期的那样，它正好完成了。
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_87.png)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_87.png)'
- en: light 3，on shows。db alright so now i'm back in，my raw sql environment，did before。we'll
    see all of this as before if i，select star from shows where。title equals quote-unquote
    the office，i'll see the actual，uh unique ids of all of those we didn't。bother
    eliminating duplicates we just，kept everything as，is but we gave everything a
    unique id。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在shows.db上亮灯3。好的，现在我回到了我的原始SQL环境，之前的操作。如果我从shows中选择星星，其中标题等于所谓的《办公室》，我将看到所有这些的实际唯一ID，我们没有消除重复项，只是保持所有内容原样，但我们给了每个项目一个唯一ID。
- en: but if i now do select star，from genres，we'll see all of the values there and，notice
    the key detail。there is only one genre per row here，and so we can ultimately line
    those up，had，um something's wrong。let me think for a while i want to get。![](img/1e4f07659e58faa22deb662e5dcbd6dd_89.png)
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果我现在执行选择星星，从类型中，我们将看到所有的值，并注意关键细节。这里每行只有一种类型，因此我们可以最终将其排列，有，嗯，出了点问题。让我想一会儿，我想得到。![](img/1e4f07659e58faa22deb662e5dcbd6dd_89.png)
- en: this right let's go ah**d and take our，second and final five minute break here。and
    we'll come back and i will explain。![](img/1e4f07659e58faa22deb662e5dcbd6dd_91.png)
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们继续，进行第二次也是最后一次五分钟的休息。然后我们会回来，我会解释。![](img/1e4f07659e58faa22deb662e5dcbd6dd_91.png)
- en: all right we are back and just before we，broke up my own self-doubt was starting。to
    creep in but i'm happy to say，with no fancy magic behind the scenes。everything
    was actually working fine i，this，get back，two columns one with the unique id the。so-called
    primary key followed by the，similarly，search for star from genres i get single。
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们回来了，就在我们分开之前，我的自我怀疑开始滋生。但我很高兴地说，没有任何华丽的魔法在后台，一切实际上都运作得很好，我，返回，得到两列，一列是唯一ID，所谓的主键，接着是，类似地，从类型中搜索星星，我得到了单一的。
- en: genres at a time，but on the left hand side are not，primary uh keys per se。but
    now those same numbers here in this，context called foreign keys，that map one to
    the other so for。instance whatever，show 512 is had five different，genres associated
    with it and in fact if。i don't go back a moment to shows，it looks like game of
    thrones was，decided by one of you，adventure。
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在某个时间点的类型，但左侧并不是主要的主键。现在这些相同的数字在这个上下文中被称为外键，它们将一个映射到另一个。例如，无论如何，显示512有五种不同的类型与之相关，实际上如果我稍微回顾一下，似乎《权力的游戏》是由你们中的一个决定的，属于冒险类。
- en: action and war as well，those five so now this is what's meant，by relational
    database you have this。relation or relationship，across multiple tables that link
    some，data in one。to some other data in the like the catch，though is that it would
    seem a little，harder now to answer。questions because now i have to kind of，query
    two tables or，execute two separate queries and then。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 动作和战争也是，那五个。所以现在这就是关系数据库的意思，你在多个表之间有这种关系，将某些数据连接起来。问题是，现在回答问题似乎会更难，因为我现在得查询两个表，或者执行两个单独的查询，然后。
- en: the case，suppose that i want to answer the，question of what are all of the musicals。among
    your favorite tv shows，i can't select just the shows because。there's no genres
    in there anymore but i，because there's no，titles in there but there is a value。that's
    bridging，one in the other that foreign key to，primary key relationship。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我想回答在你最喜欢的电视节目中有哪些音乐剧，我不能仅仅选择节目，因为那里不再有类型，但有一个值，将一者与另一者连接起来的外键与主键关系。
- en: so you know what i can do off the top of，my head i'm pretty sure i can select
    all，of the show ids。from the genres table where a specific，genre equals quote
    unquote musical。and i don't have to worry about commas，version，that i have designed
    programmatically。with code musical and every other genre，is just a single word，if
    i hit enter all of these show ids。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你知道我能在脑海中迅速做的，我很确定我可以从类型表中选择所有的节目ID，其中某种特定类型等于所谓的音乐剧。我不需要担心逗号和版本，因为我用代码编写的音乐剧和其他每个类型都是一个单词，如果我按下回车键，所有这些节目ID。
- en: were decided by you all as belonging to，musicals but now this is not interesting。and
    i certainly don't want to execute 10，or so queries manually。to look up every one
    of those ids but，notice what we can do in sql as well。i can nest queries let me
    put this whole，query in parentheses for just a moment。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你们决定这些都属于音乐剧，但现在这并不有趣。我当然不想手动执行 10 个查询，查找每一个 id，但请注意我们在 SQL 中也能做到什么。我可以嵌套查询，让我先把这个整个查询放在括号里。
- en: and then prepend to it the following，select title，from shows where the primary
    key。id is in this sub query，so you can have nested queries similar。in spirit a
    bit like in python and see，when you have nested for loops。in this case just like
    in grade school，math whatever's in the parentheses will，be executed first。
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将以下内容添加到它之前，选择标题，从显示中选择主键。id 在这个子查询中，这样你就可以拥有嵌套查询，类似于在 Python 中看到的，当你有嵌套的
    for 循环时。在这种情况下，就像在小学数学中，括号内的内容将会优先执行。
- en: using，the results of that inner query so if i，is in，that list of ids voila it
    seems that。somewhat amusingly uh several of you，think that breaking bad，supernatural
    glee sherlock how i met。the lawyer，and my brother my brother and me are all，musicals
    i。take exception to a few of those but so，those shows，so even though we've sort
    of uh done。
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 利用那个内查询的结果，如果我在那个 id 列表中，瞧，似乎有点好玩的是，许多人认为《绝命毒师》、《超自然》、《欢乐合唱团》、《夏洛克》、《我遇到的律师》和《我和我弟弟》都是音乐剧。我对其中一些有异议，但这些节目，所以即使我们已经算是做了一些工作。
- en: things we've designed things better in，the sense that we've normalized our。database
    by factoring out commonalities，or rather we've cleaned up the data。they're still
    admittedly some redundancy，but i，at least now have the data in。clean fashion so
    that every column has，just a single value in it and not some。
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在设计上做得更好，因而我们通过提取共性来规范化我们的数据库，或者说我们清理了数据。诚然，仍然有一些冗余，但至少现在我的数据是干净的，每一列仅有一个值，而不是一些。
- en: contrived comma separated list suppose i，want to find out all of the genres
    that，let's。ask kind of the opposite question well，the office，i'm going to first
    need to select the id。from shows，where title equals quote unquote the，office because
    a whole bunch of you。uh typed in the office and we gave each，of your answers a
    unique identifier so。
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 设想一个人为的逗号分隔列表，假设我想找出所有的类型。让我们问一个相反的问题，首先，我需要从显示中选择 id，条件是标题等于“办公室”，因为有很多你们输入了《办公室》，我们给每一个答案分配了一个唯一的标识符。
- en: we could keep track of it and there's，all of those numbers now this is like。dozens
    of responses i certainly don't，want to execute that many queries。but i think a
    sub query will help us out，again let me put parentheses around this，whole thing。and
    now let me say select distinct genre，from genres where the show。
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以跟踪这些数据，现在有所有这些数字。这就像数十个响应，我当然不想执行那么多查询。但我认为子查询将会帮助我们。让我再把这个整个内容放在括号里。现在让我说选择独特的类型，从类型表中选择，条件是显示。
- en: id in the genres table is in that query，and just for kicks let me go ah**d and，order
    by uh。genre so let me go ah**d and execute，this and okay somewhat amusingly。those
    of you who inputted the office，checked boxes for animation。comedy documentary
    drama family horror。
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在类型表中的 id 在那个查询中，仅仅是为了好玩，让我去排序，呃，按类型排序，所以让我执行这个，好的，有点好玩的是，输入《办公室》的你们勾选了动画、喜剧、纪录片、剧情、家庭、恐怖等选项。
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_93.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_93.png)'
- en: reality tv romance and sci-fi i take a，section exception to a few of those too，user，sql。language
    the ability to express fairly，succinctly even though it's a lot of new。features
    today all at once what would，otherwise take me a dozen or two lines，in python
    code。to implement and god knows how many，lines of code and how many hours it，like
    this。
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 现实电视、浪漫和科幻我也对其中的一些有例外，用户，SQL 语言能够相对简洁地表达，尽管今天有很多新特性一下子出现，否则我需要在 Python 代码中实现这一点需要十几行或更多，天知道那需要多少行代码和多少小时。
- en: in c now admittedly we could do better，than this design，this table or this picture
    represents。what we have now，but you'll notice a lot of redundancy，implicit in
    the genres table。anytime you check the comedy box i have，a row now that says comedy
    comedy comedy。comedy and the show id differs，but i have the word comedy again
    and，again and now。
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C 中，诚然我们可以比这个设计做得更好，这张表或这个图表示的是我们现在的情况，但你会注意到类型表中有很多冗余。每当你勾选喜剧框时，我现在就有一行显示喜剧、喜剧、喜剧。尽管节目
    id 不同，但我又有了“喜剧”这个词，重复多次。
- en: that tends to be frowned upon in the，you have a，genre called called comedy or
    one called。musical or anything else，you should ideally just have that living。in
    one place and so if we really wanted，to be particular，and really truly normalize
    this database。which is an academic term referring to，removing all such redundancies。
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这在喜剧或音乐类等类型中往往是不被赞同的，你理想中应该将这些内容集中在一个地方，所以如果我们真的想，要特别注意，并且真正规范化这个数据库，这个学术术语指的是，去除所有此类冗余。
- en: we could actually do it like this we，could have a shows table still with an。![](img/1e4f07659e58faa22deb662e5dcbd6dd_95.png)
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上可以这样做，我们，仍然可以有一个节目表。
- en: id and title，no difference there but we could have a，genres table。with two columns
    id and name now this is，its own id it has no connection with the。show id it's
    just its own unique，identifier a primary key here now。and the name of that genre
    so you would，have one row in the genres table for。
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ID和标题没有区别，但我们可以有一个类型表，包含两列ID和名称，现在这是它自己的ID，和节目ID没有关联，它只是它自己的唯一标识符，这是一个主键，名称对应类型。
- en: comedy for drama music musical and，everything else，and then you would use a
    third table。which is colloquially called a，join table which i'll draw here in
    the，want but we've drawn。called it shows underscore genres to，make clear that
    this table implements a。relationship between those two，tables and notice that
    in this table is。
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: “喜剧”、“戏剧”、“音乐”、“音乐剧”以及其他所有类型，然后你将使用一个第三个表，这个表在口语上称为连接表，我会在这里绘制，但我们已经画过。称它为shows_genres，以明确这个表实现了这两个表之间的关系，并注意在这个表中是。
- en: really no juicy data it's just，foreign keys show id genre id，and by having this
    third table we can。now make sure that the word comedy，only appears in one row
    anywhere the。word musical only appears in one row，anywhere but we use these more
    efficient。integers called show id and genre id，which respectively point to those，primary
    keys，two together。
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 里面没有什么重要的数据，只有外键、节目ID、类型ID，通过这个第三个表我们现在可以确保“喜剧”这个词，只有在某一行中出现，“音乐”这个词也只出现在一行中，但我们使用这些更高效的，称为节目ID和类型ID的整数，分别指向那两个主键。
- en: and this is an example of what's called，in the world of databases a many-to-many，relationship。one
    show can have many genres one，genre can belong to many shows and so by。having
    this third table you can have，that many-to-many relationship。and again the third
    table now allows us，to truly normalize our data set。
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个在数据库世界中称为多对多关系的示例，一个节目可以有多种类型，一个类型可以属于多个节目，因此通过拥有这个第三个表，你可以实现这种多对多关系。这个第三个表现在允许我们真正规范化我们的数据集。
- en: by getting rid of all of the duplicate，comedy comedy comedy，why is this important
    probably not a。huge deal for genres，but imagine with my current design if i，misnamed。comedy
    i would now have to change every，row with the word comedy again and again。or if
    maybe you change the cat the，genres of the shows，you have to change it in multiple
    places。
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 通过消除所有重复的“喜剧”，为什么这很重要，对类型来说可能不是一个大问题，但想象一下，在我当前的设计中，如果我错误命名了“喜剧”，我现在需要在每一行中再次更改“喜剧”这个词，或者如果你更改了节目的类型，你必须在多个地方进行更改。
- en: tables，you can argue that now you only have to，change the name of a genre。in
    one place not all over the place and，that in general in c，and now in python and
    now sql has。generally been a good thing，not to copy-paste identical values all，said。what
    other tools do we have at our，disposal well it turns out，that there are other
    data types out。
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以争辩说，现在你只需要在一个地方更改类型的名称，而不是到处更改，这在一般情况下，在C语言、Python和SQL中通常是一件好事，不要复制粘贴相同的值。
- en: there in the real world using sql，besides just these five blob integer，binary
    stuff。generally not used except for more，specialized applications let's say。integer
    which is an int typically 32，bits numeric which is something like a，date or a
    year or。time or something like that real numbers，which are floating point values
    and text。
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界中使用SQL，除了这五种大对象、整数、二进制数据以外，通常不用于其他更专业的应用，假设整数是一个通常为32位的int，数字是像日期、年份或时间之类的，实数是浮点值和文本。
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_97.png)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: 还有什么其他工具可以使用呢？事实证明，还有其他数据类型。
- en: graduate，ultimately from sql lite on phones and，on macs and pcs to actual。servers
    that run oracle mysql and，own，out that uh，databases，come with other subtypes if
    you will so。besides integer you can specify，small int for small numbers maybe
    using，just a few bits instead of。32 integer itself or bigint which uses，sixty-four
    bits instead of 32。
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 最终从手机和Mac、PC上的SQLite，过渡到运行Oracle、MySQL等实际服务器的数据库，这些数据库还带有其他子类型。除了整数之外，你可以指定小整数（**small
    int**）用于小数字，可能只使用几个比特而不是32位整数，或者大整数（**bigint**），它使用64位而不是32位。
- en: the facebooks the twitters of the world，need to use big ants a lot because they，have
    so much data。you and i can get away with simple，integers because we're not going
    to have。more than 4 billion favorite tv shows in，a class certainly something like
    real。you can have 32-bit real numbers or a，little weirdly named，double precision
    which is like a double。
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 社交媒体如Facebook和Twitter需要频繁使用大整数（**bigint**），因为它们有大量数据。你和我可以使用简单的整数，因为我们不会有超过40亿个最喜欢的电视节目，当然像**real**这样的类，你可以有32位实数，或一个命名有些奇怪的双精度数（**double
    precision**），它就像一个双精度数。
- en: precision，numeric is kind of this catch-all you，can have not only dates and
    date times。but things like boolean values，you can specify the total number of。digits
    to store using this numeric scale，and precision，so it relates to numbers that
    aren't。just quite integers，and then you also have categories of，text char followed
    by a number。
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 精度，数值型（**numeric**）是一种通用类型，你不仅可以有日期和时间，还有布尔值。你可以使用这种数值刻度和精度指定要存储的数字总位数，因此它涉及到的不仅仅是整数，还有其他类型的数字。然后你还有文本类别，**char**后面跟着一个数字。
- en: which specifies that every value in the，characters，that's helpful for things
    where you know。the length in advance like in the us，all states all 50 states have
    two digit。code or two character codes，like m a for massachusetts ca for，california。char
    two would be appropriate there，because you know every value in the。
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这指定了每个值在字符中是有帮助的，适用于你事先知道长度的情况，比如在美国，所有50个州都有两位数字代码或两个字符代码，比如马萨诸塞州的**MA**和加利福尼亚州的**CA**。在这种情况下，字符长度是合适的，因为你知道每个值的长度。
- en: column is going to have two characters，when you don't know though you can use。varchar
    and varchar specifies a maximum，number of characters and so you might。specify
    varchar of like，32 no one might be able to type in a。name that's longer than 32
    characters or，varchar 200 if you want to allow for，something even bigger。
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当你不知道时，你可以使用`varchar`，而`varchar`指定了最大字符数，因此你可以指定`varchar`为32，没人在名字中输入超过32个字符，或者`varchar`为200，如果你想允许更大的输入。
- en: but this is germaine to our real world，experience with the web if you've ever，gone
    to a website。start filling out a form and all of a，sudden you can't type any more。characters
    your response is too long，why is that well one the programmers。just might not
    want you to keep，expressing yourself in more detail。
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 但这与我们在网络上的现实世界体验是相关的。如果你曾经访问过一个网站，开始填写表格，突然发现你无法再输入任何字符，提示你输入的内容太长。这是为什么呢？可能程序员不希望你继续详细表达自己。
- en: especially if it's like a complaint form，on a customer service site。but pragmatically
    it's probably because，their database，was designed to store a finite number of。threshold，and
    you certainly don't want to have a，buffer overflow like in c。so the database won't
    force a maximum，value n and then text is for even bigger。
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 特别是在客户服务网站上的投诉表单，但从实际角度看，可能是因为他们的数据库设计用于存储有限数量的阈值，你当然不想像在C语言中那样发生缓冲区溢出。因此，数据库不会强制一个最大值，而文本则用于更大的输入。
- en: chunks of text if you're letting people，documents，or even larger sets of text
    you might。use text instead，set，things get really interesting and all of，these
    very academic。ideas and recommendations really come，favorites，but when we have
    uh thousands instead。and so what i'm going to go ah**d and do，here is download
    a file here。
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你让人们处理文档，或更大的文本集合，你可能会使用**text**类型，这样事情变得非常有趣，所有这些非常学术的想法和建议实际上是相对的，但当我们有成千上万的数据时就不一样了。因此我接下来要做的就是下载一个文件。
- en: give me just a moment to grab it from，the course's website，i'm going to go ah**d
    and download a。file from today which is a，sql lite version of the imdb，internet
    movie database that some of you。might have used in website form in order，to look
    up movies and ratings thereof。and the like and what we've done in，advance is we
    wrote a script。
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 请给我一点时间从课程网站上获取它，我将下载一个今天的文件，这是**IMDB**（互联网电影数据库）的SQLite版本，你们中的一些人可能在网站上使用过，以查找电影及其评分等。我们事先写了一个脚本。
- en: i wrote a script that downloaded all of，that information in advance。as tsv files
    it turns out that they，available，all of their data available as uh tsv。files tab
    separated values，script，called shows。db，as follows so i'm going to go ah**d in。just
    a moment and open up shows。db which，is not the version i created earlier。
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我写了一个脚本，提前下载了所有信息。作为 tsv 文件，结果表明他们提供所有数据作为 tsv 文件（制表符分隔值），脚本名为 shows.db，如下所示，所以我将去，哦**继续**片刻，打开
    shows.db，这不是我之前创建的版本。
- en: based on your favorites，this is now the version that we the，staff created in
    advance。by downloading hundreds of thousands of。![](img/1e4f07659e58faa22deb662e5dcbd6dd_99.png)
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 根据你的喜好，这现在是我们工作人员提前创建的版本，通过下载成千上万的。![](img/1e4f07659e58faa22deb662e5dcbd6dd_99.png)
- en: movies and tv shows and，actors and directors from imdb。com under，their license。and
    then imported into a sqlite database，so how can i see what's in here well let。me
    go ah**d and type dot schema recall。![](img/1e4f07659e58faa22deb662e5dcbd6dd_101.png)
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 电影和电视节目、演员和导演来自 imdb.com，在他们的许可下，然后导入到 sqlite 数据库中。那么我该如何查看这里的内容呢？让我去看看，哦**继续**输入点模式回忆。![](img/1e4f07659e58faa22deb662e5dcbd6dd_101.png)
- en: therein，and in fact in pictorial form it，actually looks like this here's a，the
    land。there's going to be a people table that，has an id for every person。a name
    and their birth year there's，going to be a shows table just like，we've been talking
    which is。ids titles of shows also though the year，that the show debuted and the
    number of。
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 其中，实际上在图示形式中，它实际上看起来像这样，这是一个土地。将会有一个人员表，其中每个人都有一个 ID、名字和出生年份，将会有一个节目表，就像我们一直在讨论的那样，包含节目
    ID 和标题，以及节目的首播年份和剧集数量。
- en: episodes that the show had，then there's going to be genres similar。in design
    to before so we didn't go all，out and factor it out into a third table。we just
    have some duplication here，admittedly in genres，but then there's a ratings table
    and。here's where you can see where，relational databases get interesting you。
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 该节目的剧集数量，然后将会有一个与之前设计相似的类型，所以我们没有完全展开，将其拆分为第三个表。我们在类型上确实有一些重复，但随后有一个评级表，在这里你可以看到关系数据库变得有趣的地方。
- en: can have a ratings table storing ratings，like one to five，but also associate
    those ratings with a。show by way of its show id，and then you can keep track of
    the，number of votes that that show got。writers notice is a separate table and，notice
    this is kind of cool。this table per the arrows relates to，the shows table and
    the people table。
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 可以有一个评级表来存储评分，例如从一到五，但也可以将这些评分与某个节目的显示 ID 关联，这样你就可以跟踪该节目获得的投票数。编剧通知是一个单独的表格，注意这有点酷。这个表格通过箭头与节目表和人员表相关联。
- en: because this is a join table a foreign，person id，refer to the shows table and
    the people。table respectively，so that a human person can be a writer，for multiple
    shows and。on show can have multiple writers，another many-to-many relationship。and
    then lastly stars the actors in a，show notice that this too is a join，show id。
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这是一个连接表，外键的人 ID 分别引用节目表和人员表，这样一个人可以是多个节目的编剧，而一个节目也可以有多个编剧，这又是一个多对多关系。最后，明星是节目的演员，注意这也是一个连接表，显示
    ID 和一个人 ID 分别引用那些表格。
- en: and a person id that are referring back，to those tables respectively。and here's
    where it really makes sense a，relational database it would be pretty。stupid and
    bad design，if you had names of all of the directors，and names of all of the writers
    and。names of all of the stars of these shows，in separate tables in duplicate like。
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 这才是真正有意义的地方，关系数据库如果你将所有导演、编剧和明星的名字放在不同的表中重复列出，那将是相当愚蠢和糟糕的设计。
- en: steve carell steve carell，steve carell all of those actors and，directors and
    writers and every other。role in the business are just people at，the end of the
    day so in a relational。database the advice would be to put all，of those people
    in a people table。and then use primary and foreign keys to，refer to to relate
    them to。
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 史蒂夫·卡瑞尔，史蒂夫·卡瑞尔，史蒂夫·卡瑞尔，所有这些演员、导演、编剧和业务中的其他角色，归根结底都是人。所以在关系数据库中，建议是将所有这些人放在一个人员表中，然后使用主键和外键来将它们关联起来。
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_103.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_103.png)'
- en: these other types of tables the catch is，though that when we do this。it turns
    out that things can be slow，when we have lots of data so for，instance let me go
    into this。let me go ah**d and select star from，shows semicolon，that's a lot of
    data it's pretty fast on，mac。just to save time because it's a little，in the cloud，let
    me go ah**d and count the number of。
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 这些其他类型的表格的关键是，当我们这样做时，事实证明，当我们有大量数据时，事情可能会变得缓慢。例如，让我进入这个。让我继续从shows中选择星级，分号，这有很多数据，在Mac上还挺快。为了节省时间，因为这是在云中，让我继续计算一下。
- en: shows in this imdb，database by using count 153。![](img/1e4f07659e58faa22deb662e5dcbd6dd_105.png)
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: IMDB数据库中节目的数量，使用计数153。![](img/1e4f07659e58faa22deb662e5dcbd6dd_105.png)
- en: the count of，people from the people table，457 886 people who might be stars。or
    writers or some other role as well so，this is a sizable data set。so let me go
    ah**d and do something，star from，shows where title equals the office。and this
    time i don't have to worry，about weird capitalization or spacing。
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 来自人员表的人员计数，457,886个可能是明星、编剧或其他角色的人，所以这是一个相当大的数据集。让我继续做一些事情，从标题等于办公室的节目中选择星级。这次我不必担心奇怪的大小写或空格。
- en: this is imdb this is clean data from an，authoritative source。![](img/1e4f07659e58faa22deb662e5dcbd6dd_107.png)
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这是IMDB，这是来自权威来源的干净数据。![](img/1e4f07659e58faa22deb662e5dcbd6dd_107.png)
- en: notice that there's actually different，versions of the office you probably know。the
    uk one and the us one，there's other shows that are unrelated，to that particular。type
    of show but uh each of them is，distinguished notice by the year。here all right
    so that's kind of a lot，and let's do this again let me go ah**d。
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，实际上有不同版本的办公室，你可能知道英国和美国版本，还有其他与该特定类型的节目无关的节目，但它们每个都按年份区分。好吧，这有点多，让我们再做一次，我继续。
- en: and turn on a feature temporarily just，in this program，and let me run it again
    it looks like it。took 0。012，seconds of real time to do that search，that's pretty
    fast i barely noticed。certainly because it's so fast，but let me go ah**d and do
    this let me，go ah**d and create an，called。doing，well to answer the question finally
    from，before about performance by default。
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 让我暂时开启一个功能，在这个程序中，再次运行它，似乎花了0.012秒的实际时间来完成这个搜索，这真的很快，我几乎没注意到。显然因为它如此之快，但让我继续去做，创建一个，叫做。好的，最终回答之前关于默认性能的问题。
- en: everything we've been doing is indeed，big o of n it's just being linearly。searched
    from top to bottom，which seems to call into question the。whole purpose of sql
    if we were doing no，better than with csvs。but an index is a clue to the database，efficiently，in
    such a way that you get logarithmic。
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们一直在做的确实是大O的N，它只是在从上到下线性搜索，这似乎质疑了SQL的整个目的，如果我们做得不比CSV好。但索引是数据库的一个线索，以一种高效的方式，让你获得对数级别的效率。
- en: time an index is a fancy data structure，that the sql lite database or the oracle。database
    or the mysql database whatever，product you're using，builds up for you in memory
    and then it。does something using syntax like this，something known as a b，tree
    we've talked a bit about trees in。trees，things that kind of look like family，tree，that's
    just very wide and not that tall。
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 索引是一种高级数据结构，SQLite数据库或Oracle数据库或MySQL数据库，无论你使用什么产品，都会为你在内存中构建，然后它使用类似这样的语法进行操作，称为B树，我们曾经谈论过树，树的外观就像家谱树，宽而不高。
- en: it's a data structure，similar in spirit to what we looked at，in c but it tries
    to keep all of the。leaf nodes all of the children or，to speak，as close to the
    root as possible and the。algorithm it uses for that，tends to be proprietary or
    documented，based on the system you're using。but it doesn't store things in a list
    it，does not store things，them as。
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种数据结构，精神上类似于我们在C中看到的，但它试图将所有的叶子节点，或者说所有的子节点，尽可能靠近根节点，而它使用的算法，往往是专有的或基于你使用的系统进行文档化。但它不以列表形式存储数据。
- en: underneath the hood those tables that，look like very tall structures。are actually
    underneath the hood，trees，and if we create those trees by creating。what they're
    properly called，indexes like this it might take us a，index。but now notice what
    happens previously，office，using linear search it took 0。012。
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在底层，这些看起来很高的表格，实际上在底层是树，如果我们通过创建它们被正确称为的索引来创建这些树，这可能需要我们一个索引。但现在注意之前发生的事情，办公室，使用线性搜索时花了0.012。
- en: seconds if i do the same query again，after having created the index。and having
    told sql light build me this，fancy tree in memory。![](img/1e4f07659e58faa22deb662e5dcbd6dd_109.png)
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我在创建索引并告诉 SQL Lite 在内存中构建这个花哨的树之后，再次执行相同的查询，只需几秒钟。![](img/1e4f07659e58faa22deb662e5dcbd6dd_109.png)
- en: voila 0。001 seconds，so orders of magnitude faster now both，are fast to us human
    certainly but。imagine the data set being even bigger，the query being even bigger，that。uh
    and they're rather the queries can，take longer than that and therefore take，even
    more time。than that but unfortunately if i've got，all of my data all over the
    place。
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 瞧，0.001 秒，所以现在速度快了几个数量级。对我们人类来说，这两者都很快，但想象一下数据集更大、查询更大，呃，它们的查询可能会比这更长，因此需要更长的时间。但不幸的是，如果我的数据分散得一团糟。
- en: as in a chart as in a diagram like this，my god how do i actually get useful
    work。done how do i get back the people in a。![](img/1e4f07659e58faa22deb662e5dcbd6dd_111.png)
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在图表中，就像在这样的图示中，我的天啊，我如何才能实际完成有用的工作？我如何才能获取到人们的信息？![](img/1e4f07659e58faa22deb662e5dcbd6dd_111.png)
- en: movie and the writers and the stars and，the ratings if it's all over the place
    i。would seem to have created such a mess，and that i now need to execute all of，to
    be。that complicated it turns out that，there's another，keyword in sql really the
    last that。we'll look at here，called join the join keyword which you，can use implicitly
    or explicitly。
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 电影、编剧、明星和评分，如果一切都是混乱的，我似乎制造了一团糟，我现在需要执行所有这些，以至于变得复杂。事实证明，在 SQL 中还有另一个关键字，实际上我们这里要查看的最后一个，称为连接（join）。连接关键字可以隐式或显式使用。
- en: allows you to just join tables together，and sort of reconstitute a bigger more，user-friendly
    table。so for instance suppose i want to get，the office，well recall that i can
    select steve's id。from the people table，where name equals steve carell so again，he
    has a different id in this table。because this is from imdb，but there's his id
    and let me go ah**d，and turn the timer off。
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 允许你将表连接在一起，并重新构建一个更大、更用户友好的表。例如，假设我想获取《办公室》，好吧，记得我可以从人员表中选择史蒂夫的 ID，条件是名称等于史蒂夫·卡瑞尔。所以在这个表中他有不同的
    ID，因为这是来自 IMDb，但这是他的 ID，让我去做，嗯，关闭计时器。
- en: for now all right so there is his id，136-797 i could copy-paste that into my。code
    but that's not necessary，thanks to these nested queries i can do，something like
    this。let me go ah**d and now select all of，the show ids，from the stars table where
    person id。from that table is in or is equal to，this result，so there's that join
    table stars that。
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 现在好吧，这里是他的 ID，136-797，我可以把它复制粘贴到我的代码中，但这并不是必要的。得益于这些嵌套查询，我可以做这样的事情。让我去做，嗯，接下来从星级表中选择所有节目
    ID，条件是那张表的人 ID 在这个结果中。
- en: links people and shows，the wrong key，retyping it，select show id from stars，where
    person id equals。whatever steve carell's ideas all right，so there's all of the
    show ids of steve。carell's tv shows that's a lot，and it's very non-obvious what
    they are。so let me do another nested query by，putting all of that in parentheses
    and，now select title。
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 连接人们并展示，错误的关键，重新输入它，从星级表中选择显示 ID，条件是人 ID 相等。不论史蒂夫·卡瑞尔的想法是否正确，这都是史蒂夫的所有节目 ID。卡瑞尔的电视节目很多，且其内容并不明显。所以让我再做一个嵌套查询，把所有内容放在括号里，现在选择标题。
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_113.png)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_113.png)'
- en: uh from shows where the id of the show，is in this big long list of show ids。and
    there are all of the shows that he's，in including，the dana carvey show back when
    the。office up at the top and then most，recently shows like the morning show。on
    apple tv alright so that's pretty，the data like that，but it turns out there's
    different ways。
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 呃，从节目中选择，节目的 ID 在这份很长的节目 ID 列表中。那是他参与的所有节目，包括当年的达娜·卡维秀和顶部的《办公室》，还有最近的像苹果电视上的《早间秀》。好吧，这些数据很不错，但事实证明有不同的方式。
- en: more of this，in the coming weeks and in the problem，sets in labs and the like
    but it turns。out we can do other things as well and，let me just show this syntax
    even though，glance。you can also use that join keyword as，follow i can select the
    title。from the people table joined with，column，equaling the stars person id column。
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几周以及问题集、实验室等中会有更多类似的内容，但事实证明我们也可以做其他事情，让我就展示这个语法，尽管只是瞥一眼。你也可以像这样使用连接关键字，我可以选择标题，来自与星级表中人
    ID 列相等的人员表。
- en: so in other words i can select a title，from the result of joining。people and
    stars like this on the id，column in one and the person id。column in the other
    and i can join in，the shows，table on the stars dot。show id equaling the shows
    dot id so，again now i'm，joining the primary and foreign keys on。
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，我可以从连接结果中选择一个标题。像这样在ID列上连接“人物”和“明星”，在另一边的“人物ID”列上，我可以在“节目”表中连接，“明星.show
    ID”等于“节目的ID”，所以，现在我在连接主键和外键。
- en: these two tables，where the name equals quote unquote，steve carell。so this is
    the most cryptic thing we've，seen yet but it just means take this。table and join
    it with this one，and then join it with this one and。![](img/1e4f07659e58faa22deb662e5dcbd6dd_115.png)
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 这两张表，其中名字等于“引用引号”，**史蒂夫·卡瑞尔**。所以这是我们见过的最隐晦的东西，但它只意味着取这张表并与这一张连接，然后再与这一张连接。![](img/1e4f07659e58faa22deb662e5dcbd6dd_115.png)
- en: filter all of the resulting joined rows。![](img/1e4f07659e58faa22deb662e5dcbd6dd_117.png)
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 过滤所有的连接结果行。![](img/1e4f07659e58faa22deb662e5dcbd6dd_117.png)
- en: there we have，all of those answers as well and there's，other ways of doing this。![](img/1e4f07659e58faa22deb662e5dcbd6dd_119.png)
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也得到了所有的答案，还有其他方式来做到这一点。![](img/1e4f07659e58faa22deb662e5dcbd6dd_119.png)
- en: too i'll leave unsaid now some of the，syntax for that but that's felt a little。slow
    and in fact let me go ah**d and，turn my timer back on，let me re-execute this last
    query select。title from people，joining on stars joining on shows，where name equals
    steve carell that took。over half a second。
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 我现在会保留一些语法不说，但这感觉有点慢，事实上让我继续并重新启动我的计时器，让我重新执行这个最后的查询：选择“人物”中的标题，连接“明星”连接“节目”，条件是名字等于**史蒂夫·卡瑞尔**，这花费了超过半秒的时间。
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_121.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_121.png)'
- en: so that was actually admittedly kind of，slow but again。![](img/1e4f07659e58faa22deb662e5dcbd6dd_123.png)
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 所以那实际上承认有点慢，但又一次。![](img/1e4f07659e58faa22deb662e5dcbd6dd_123.png)
- en: indexes come to the rescue and if again，we don't allow，linear search to dominate
    but let me go。ahead and create a few indexes，create an index on called person
    index，why。well my query a moment ago used the，person id column it filtered on
    it so，that might be a bottleneck。i'm going to go ah**d and create another，index
    on the called。
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 索引来拯救我们，如果我们不允许线性搜索占主导地位，但让我继续创建几个索引，创建一个名为“人物索引”的索引，为什么？因为我刚才的查询使用了“人物ID”列，进行了过滤，所以这可能是一个瓶颈。我将继续创建另一个索引。
- en: show index on the stars table on show id，similarly a moment ago my query used
    the，show id column。and so that too might have been a，bottleneck linearly top to
    bottom。so let me create that index and then，lastly let me create an index called。name
    index and this is perhaps the most，before，on the people table on the name column。
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在“明星”表上显示索引，基于显示ID，稍早前我的查询使用了显示ID列。因此这也可能成为一个瓶颈，从上到下线性地。让我创建那个索引，然后，最后让我创建一个名为“姓名索引”的索引，这也许是最重要的，在“人物”表的姓名列上。
- en: and that too took a moment now in total，this took like almost a full second。but
    these these indexes only get created，over time，but you don't incur this with every。query
    now let me do my，select again let me select title from，people。joining the stars
    table joining the。
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 而且这也花了一点时间，现在总的来说，这几乎花了一整秒。但这些索引只是随着时间的推移而创建，但你并不会在每个查询中都承担这个。现在让我再做一次选择，让我从“人物”中选择标题，连接“明星”表，再连接。
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_125.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_125.png)'
- en: shows table，where name equals steve carell boom。![](img/1e4f07659e58faa22deb662e5dcbd6dd_127.png)
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 在“节目”表中，条件是名字等于**史蒂夫·卡瑞尔**，哗！![](img/1e4f07659e58faa22deb662e5dcbd6dd_127.png)
- en: 0。001，seconds that it's an order of magnitude，faster than the like more than
    half a。second it took us，a little bit ago so here too you see the，power of a relational
    database。so even though we've created some，problems for ourselves over time。we've
    solved them ultimately granted，with some more sophisticated features，and additional
    syntax。
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 0.001秒，这比刚才花费的超过半秒快了一个数量级。所以在这里你也看到了关系数据库的力量。尽管我们随着时间的推移给自己制造了一些问题，我们最终解决了它们，当然，凭借一些更复杂的特性和额外的语法。
- en: but a relational database is indeed why，you use them in the real world for the，the
    googles。because they can store data so，efficiently，without redundancy because
    you can。normalize them and factor everything out，but they can still maintain the，spreadsheet。but
    using something closer to，logarithmic thanks to those tree，structures but there
    are problems and。
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 但是关系数据库确实是你在现实世界中使用它们的原因，像**谷歌**这样。因为它们能够如此高效地存储数据，没有冗余，因为你可以对它们进行规范化并分解一切，但它们仍然可以保持电子表格。使用接近对数的结构，得益于那些树状结构，但也存在问题。
- en: what we wanted to do is end on today two，with sql，and because they are just
    unfortunately。so commonly done，notice this here there is something，attack，which
    you are vulnerable to in any。application where you're taking user，input that hasn't
    been an issue for my，favorites。pi。file where i only took input from a csv，but
    if one of you were malicious what if。
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 我们今天想要结束的内容是关于SQL，因为它们确实不幸地非常常见。请注意这里有一个攻击，你在任何接受用户输入的应用中都是脆弱的，这对我最喜欢的`pi.file`来说并不是一个问题，因为我只从CSV中获取输入，但如果你们中的一个人是恶意的，那会怎样。
- en: one of you had maliciously typed in the，word delete，of your show。and i accidentally
    plugged it into my，own python code when，executing a query you could potentially。inject
    sql，if logging in，via yale you'll typically see a form，like this or logging in
    via harvard to。something you'll see a form like this，here's an example that i'm
    pretty sure，to。
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中的一个恶意地在你的展示中输入了“删除”这个词。当我在执行查询时，不小心将其插入了我自己的Python代码，你可能会注入SQL，如果通过耶鲁大学登录，你通常会看到一个这样的表单，或者通过哈佛大学登录时，你会看到一个这样的表单，这里有一个我非常确定的例子。
- en: suppose i type in my email address to，this login form as mailand。harvard。edu，sql。dash
    dash is the symbol for commenting，if you want to comment something out。it turns
    out that the single quote is，something like，steve carell or in this case mailing
    at。![](img/1e4f07659e58faa22deb662e5dcbd6dd_129.png)
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我在这个登录表单中输入我的电子邮件地址为`mailand.harvard.edu`，SQL两个短横线是用于注释的符号，如果你想注释掉某些内容，结果发现单引号是某种像史蒂夫·卡瑞尔，或者在这种情况下是`mailing@`。![](img/1e4f07659e58faa22deb662e5dcbd6dd_129.png)
- en: harvard。edu it can be double quotes it，can be single quotes，in this case i'm
    using single quotes。here but let's consider some sample，code if you will in python
    here's a line，of code that i propose。might exist in the back end for，harvard's
    authentication or yales or，anyone else's。maybe someone wrote some python code，like
    this using select star from users。
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在`harvard.edu`，可以使用双引号，也可以使用单引号，在这种情况下，我使用单引号。但是让我们考虑一些样本代码，如果你愿意，这是我提出的代码行，可能存在于哈佛的身份验证后端，或耶鲁大学的，或者任何其他人的。也许有人写了这样的Python代码，使用`select
    * from users`。
- en: where username equals question mark and，password equals question mark。and they
    plugged in username and，password whatever the user typed into，that web form a
    moment ago。gets plugged in here to these question，marks this is good，this is good
    code because you're using。the sql question marks so if you，literally just do what
    we preach today。
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 其中`username`等于问号，`password`等于问号。他们将用户名和密码插入到用户刚才在网页表单中输入的内容中，这很好，这是好的代码，因为你使用了SQL问号占位符，所以如果你真的只按我们今天所说的去做。
- en: and use these question mark placeholders，you are safe from sql injection attacks。unfortunately
    there are too many，developers in the world，that don't practice this or don't。realize
    this or do forget this，if you instead resort to python，approaches like this。where
    you use an f string instead which，might be your instincts after last week。
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 并且使用这些问号占位符，你就可以安全地防止SQL注入攻击。不幸的是，世界上有太多开发者并不这样做，或者没有意识到这一点，或者确实忘记了，如果你转而使用这样的Python方法，使用f字符串，这可能是你上周的直觉。
- en: because they're wonderfully convenient。![](img/1e4f07659e58faa22deb662e5dcbd6dd_131.png)
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它们非常方便。![](img/1e4f07659e58faa22deb662e5dcbd6dd_131.png)
- en: with the curly braces and all，suppose that you literally plug in。![](img/1e4f07659e58faa22deb662e5dcbd6dd_133.png)
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 带有大括号，假设你真的插入了。![](img/1e4f07659e58faa22deb662e5dcbd6dd_133.png)
- en: username and password，not with the question mark placeholders，but just literally。in
    between those curly braces watch what，happens if my username，mailin harbor。edu
    was actually typed in，by me maliciously as mailin。![](img/1e4f07659e58faa22deb662e5dcbd6dd_135.png)
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 用户名和密码，不是带问号占位符，而是字面意思。在这些大括号之间，注意如果我恶意地输入了`mailin.harbor.edu`，会发生什么。![](img/1e4f07659e58faa22deb662e5dcbd6dd_135.png)
- en: harvard。edu single quote dash dash，that would have the effect of tricking，this
    python code。into doing essentially this let me do a，find and replace，it with trick
    python into executing。username equals quote mainland，harvard。edu，quote dash dash
    and then other stuff。![](img/1e4f07659e58faa22deb662e5dcbd6dd_137.png)
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在`harvard.edu`单引号两个短横线，这将使这段Python代码基本上执行这个，让我来进行查找和替换，欺骗Python执行`username =
    'mailin.harvard.edu' --`和其他内容。![](img/1e4f07659e58faa22deb662e5dcbd6dd_137.png)
- en: unfortunately the dash dash again means，comment which means，ignoring。![](img/1e4f07659e58faa22deb662e5dcbd6dd_139.png)
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，两个短横线又意味着注释，这意味着被忽略。![](img/1e4f07659e58faa22deb662e5dcbd6dd_139.png)
- en: the whole password part of the sql query，is to check，is this username and password
    valid so。that you can decide to log the user in，by essentially，commenting out
    everything related to。![](img/1e4f07659e58faa22deb662e5dcbd6dd_141.png)
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: SQL查询的整个密码部分是检查这个用户名和密码是否有效，以便你可以决定登录用户，基本上，注释掉所有相关内容。![](img/1e4f07659e58faa22deb662e5dcbd6dd_141.png)
- en: password notice what i've done，i've just now theoretically logged，myself in。![](img/1e4f07659e58faa22deb662e5dcbd6dd_143.png)
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 密码通知我做了什么，我刚刚理论上登录了自己。![](img/1e4f07659e58faa22deb662e5dcbd6dd_143.png)
- en: as mainland harvard。edu without even，knowing or inputting a password。![](img/1e4f07659e58faa22deb662e5dcbd6dd_145.png)
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 作为大陆harvard.edu，甚至在不知道或输入密码的情况下。![](img/1e4f07659e58faa22deb662e5dcbd6dd_145.png)
- en: and the dash dash，just ignoring。![](img/1e4f07659e58faa22deb662e5dcbd6dd_147.png)
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 而且连字符连字符，正在被忽略。![](img/1e4f07659e58faa22deb662e5dcbd6dd_147.png)
- en: the password equality check and so it，turns out that db。![](img/1e4f07659e58faa22deb662e5dcbd6dd_149.png)
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 密码等于检查，所以结果显示db。![](img/1e4f07659e58faa22deb662e5dcbd6dd_149.png)
- en: execute when you execute an insert it，returns to you as said，you use。db execute
    to select rows from a，database table，it returns to you a list of rows each of。which
    is a dictionary so this is now，pseudocode down here with my comment。![](img/1e4f07659e58faa22deb662e5dcbd6dd_151.png)
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 执行插入时，它返回给你，正如所说，你使用db执行从数据库表中选择行，它返回给你一系列每个都是字典的行。所以这是现在的伪代码，以及我的评论。![](img/1e4f07659e58faa22deb662e5dcbd6dd_151.png)
- en: but if you get back one row that would，seem to imply that there is a user named，malin
    at harvard。edu。don't know what his password is because，whoever this person is
    maliciously。tricked the server into ignoring，that syntax so sql injection attacks
    are。unfortunately one of the most common，attacks against sql databases they are，completely
    preventable。
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你得到一行，似乎暗示有一个用户名为malin@harvard.edu的人。我不知道他的密码是什么，因为这个人恶意地欺骗了服务器忽略那个语法，所以SQL注入攻击不幸地是对SQL数据库最常见的攻击之一，它们是完全可以防止的。
- en: if you simply use placeholders and use，libraries whether it's cs50s or other，down
    the road。a common meme on the internet is this，picture here，if we zoom in on this
    person's license，be。this is an example of someone，theoretically trying to trick
    some。camera on the highway into like dropping，the whole database drop is another，table。
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你简单地使用占位符并使用库，无论是cs50s还是其他的。网上有一个常见的迷因，这里有张图片，如果我们放大这个人的执照，这就是一个理论上试图欺骗高速公路上的某个相机的例子，掉掉整个数据库，删除是另一个表。
- en: and this person was either intentionally，or just humorously，trying to trick
    it into executing sql by。using syntax like this so，semicolons，are all potentially
    dangerous characters。in sql if they're passed through，unchanged to the database
    a very popular。xkcd comic let me give you a moment to，just read this，now，in computer
    science if you'd like to。
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这个人可能是故意的，或者只是幽默地，试图用这样的语法让它执行SQL。所以，分号都是潜在危险字符。如果它们不加改变地传递到数据库，非常流行的。xkcd漫画，让我给你一点时间，去阅读它，现在，在计算机科学中，如果你想的话。
- en: read this one，in the，um family of，of educated learners who know who little。![](img/1e4f07659e58faa22deb662e5dcbd6dd_153.png)
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 阅读这个，在嗯教育学习者的家庭中，知道得很少。![](img/1e4f07659e58faa22deb662e5dcbd6dd_153.png)
- en: bobby tables is unfortunately it's dead，silence in here so i can't tell if，but。anyhow
    this is a very well-known meme so，if you're a computer scientist who knows。sql
    you know this one，and there's one last problem we'd like，to introduce if you don't
    mind just a。couple final moments here，and that is a fundamental problem in。
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: Bobby Tables 不幸的是这里死寂，我无法判断，如果，但是无论如何这是一个众所周知的迷因，所以如果你是一名了解SQL的计算机科学家，你知道这个，还有一个最后的问题我们想介绍，如果你不介意，最后几分钟，这就是一个根本性的问题。
- en: computing called race conditions which，for the first time is now manifest。in
    our discussion of sql it turns out，that sql and sql databases。are very often used
    again in the real，world for very high performing。applications and by that i mean
    again，the googles the facebooks the twitters。
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机中称为竞争条件的情况，现在第一次在我们对SQL的讨论中显现出来，结果显示SQL和SQL数据库在现实世界中非常常用，用于非常高性能的应用程序，换句话说，再次是谷歌、脸书、推特等。
- en: of the world where lots and lots of data，is coming into servers。all at once
    and case in point some of，you might have clicked like。on this egg uh some time
    ago this is the，most liked instagram post ever。as of last night it was up to like
    50，plus million likes，uh well eclipsed kim kardashian's。
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个世界上，许多数据是同时进入服务器的。例如，你们中的一些人可能在不久前点击了这个蛋的赞，这是有史以来点赞最多的Instagram帖子。截止到昨晚，它的点赞数已经超过了五千多万，嗯，确实超过了金·卡戴珊。
- en: million or so，this is to say this is a hard problem to，solve um，this uh notion
    of likes coming in at。such an incredible rate，because suppose that long story
    short，instagram。actually has a server with a sql，c，plus or whatever language that's
    talking，to that database。and suppose that they have code that's，trying to increment
    the total number of。
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题是很难解决的，嗯，这种点赞以如此惊人的速度涌入的概念，因为假设长话短说，Instagram实际上有一台使用SQL、C++或任何语言与那个数据库进行交互的服务器。假设它们有代码试图增加总的。
- en: likes well how might this work logically，well in order to increment the number
    of。likes that a picture like this egg has，you might first select from the database。the
    current number of likes，for the id of that egg photograph then，you might add one
    to it。then you might update the database and i，didn't use it before but just like。
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 那么逻辑上这可能如何运作呢？首先，为了增加这个蛋的点赞数，你可能需要先从数据库中选择当前的点赞数，针对那个蛋的照片的`id`，然后你可能给它加一。接着你可能会更新数据库，我之前没用过，但就像。
- en: there's insert and delete，there's update as well so you might，update the database
    with the new count。plus one so the code for that might look，a little something
    like this，here。where you execute select likes from，posts where id，equals question
    mark where id is the。unique identifier for that egg，and then i'm storing the result
    in a，list。
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 插入和删除都是有的，还有更新，因此你可能会用新的计数来更新数据库，加一，所以相关的代码可能看起来像这样，这里。你执行从`posts`中选择`likes`，其中`id`等于问号，`id`是那个蛋的唯一标识符，然后我将结果存储在一个列表中。
- en: of rows i'm going to go into the first，row so that's rows bracket 0。and i'm
    going to go into the likes，column to get the actual number and that。number i'm
    going to store in a variable，50 million，and i want it to go to 50 million and。one
    so how do i do that，posts，set likes equal to question mark and。
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我将进入第一行，所以是`rows[0]`。然后我将进入`likes`列以获取实际数字，这个数字我将存储在一个变量中，五千万，我想让它变成五百万一，那么我该如何做到呢？`posts`，设置`likes`等于问号。
- en: then i just plug in likes plus one，the problem though with the instagrams。and
    googles and twitters of the world，is that they don't just have one server。they
    have many thousands of servers，and all of those servers might in，and i。on the
    internet and those clicks，translate into this code getting，executed executed executed。
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我只需将点赞数加一，问题在于Instagram、Google和Twitter这样的世界，实际上它们并不只有一台服务器。它们有成千上万的服务器，而所有这些服务器可能在网络上，而这些点击则转化为这段代码被执行，执行，执行。
- en: and the problem is that when you have，three lines of code and suppose brian。and
    i click on that egg at roughly the，same time，my three lines might not get executed。before
    his three lines are vice versa，they might get co-mingled。chronologically my first
    line might get，executed then brian's first line might。
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 问题是当你有三行代码时，假设布莱恩和我大约在同一时间点击那个蛋，我的三行代码可能在他的三行代码之前没有被执行。相反地，它们可能会混合在一起，按时间顺序，我的第一行可能会被执行，然后布莱恩的第一行可能会。
- en: get executed my second line might get，executed brian's second line，so they might
    get interspersed on。different servers or just temporarily，problematic，because
    suppose brian and i click on。that egg roughly at the same time and we，query，50
    million is the current count then our。next lines of code execute on the，servers
    we happen to be on，which adds one to the likes the。
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 被执行，我的第二行可能会被执行，布莱恩的第二行也可能会，所以它们可能会在不同的服务器上交错，或者只是暂时存在问题，因为假设布莱恩和我大约在同一时间点击那个蛋，我们查询五千万是当前计数，然后我们的下一行代码在我们所处的服务器上执行，增加一个点赞。
- en: updating，the row for the egg with 50 million one，both times because the fundamental，problem
    is。execute，we are both checking the value of a，variable at essentially the same
    time，oh。the current likes are 50 million we are，then making a decision let's add
    1 to 50，million we are then。updating the value with 50 million one，the problem
    is though，that really if brian's code or the。
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 更新那个蛋的行到五千万，因为根本问题是。执行时，我们基本上是在同一时间检查一个变量的值，哦。当前的点赞数是五千万，我们然后做出决定，给五千万加一，我们接着更新值为五百万一，问题是，如果布莱恩的代码或这个。
- en: instagram，happens to have selected the number of，likes first，he should be allowed
    to finish the code。that's being executed，so that when i select it i see 50，million
    one and i add one to that so the。new count is 50 million，two this is what's known
    as a race，condition when you write code。in a multi-server or fancily known as
    a，multi-threaded environment。
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: Instagram碰巧首先选择了点赞数，他应该被允许完成正在执行的代码，这样当我选择时，我看到5000万，我再加一，所以新的总数是5000万两。这就是在多服务器环境或被称为多线程环境中编写代码时，所称的竞争条件。
- en: lines of code chronologically can get，given time，the problem fundamentally derives
    from。the fact that if brian's，server is in the middle of checking the。state of
    a variable i should be locked，out i should not be allowed to click on。that button
    at the same time or my logic，code my code might，should not be allowed to execute。
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 按时间顺序排列的代码行可以得到，根本问题源于，如果布莱恩的服务器正处于检查变量状态的过程中，我应该被锁定，不能同时点击那个按钮，或者我的逻辑代码，可能不应该被允许执行。
- en: logically so there is a solution，when you have to write code like this as。is
    common for twitter and instagram and，facebook and the like，to use what are called
    transactions。transactions add some few new pieces of，syntax that we won't dwell
    on today and。you won't need to use in the coming days，but they do solve a fundamentally
    hard。
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 从逻辑上讲，当你需要像这样编写代码时，这是一个解决方案，这在推特、Instagram、Facebook等中很常见，使用被称为交易的东西。交易增加了一些新的语法，我们今天不会深入探讨，你在接下来的日子里也不需要使用，但它们确实解决了一个根本性的难题。
- en: problem transactions essentially allow，you to lock，a table or really a row in
    a table。so that if brian's click on that egg，results in some code executing that's
    in。the process of checking what is the，total like count，my click on the egg will
    not get handled。by the server，until his code is done executing so in，green here
    i've proposed the way you。
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 交易本质上允许你锁定一个表，或者实际上是表中的一行，以便如果布莱恩点击那个鸡蛋，导致一些代码在检查总点赞数的过程中执行，我对鸡蛋的点击将不会被服务器处理，直到他的代码执行完成，所以在这里我提出了你。
- en: should do this，you shouldn't just execute the middle，three lines you being in。facebook
    in this case instagram should，execute begin transaction first。then commit the
    transaction at the end。![](img/1e4f07659e58faa22deb662e5dcbd6dd_155.png)
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该这样做，你不应该只是执行中间的三行，作为Facebook的用户，在这种情况下，Instagram应该首先执行开始交易，然后在最后提交交易。![](img/1e4f07659e58faa22deb662e5dcbd6dd_155.png)
- en: and the design of transactions is that，all of the lines in between will either，succeed
    altogether。or fail altogether the database won't，get into this funky state where
    we start，losing track。of likes on eggs and though this has not，been an issue in
    recent years back in。the day when twitter was first getting，started twitter was
    super popular。
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 交易的设计是，所有的操作要么全部成功，要么全部失败，数据库不会进入这种奇怪的状态，我们开始失去对“喜欢”的跟踪。尽管近年来这不是问题，但在推特刚开始的时候，推特非常受欢迎。
- en: and super offline a lot of the time，there was this thing called a fail。whale
    which is like the picture they，showed on their website when they were。![](img/1e4f07659e58faa22deb662e5dcbd6dd_157.png)
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 并且经常处于离线状态，曾经有个叫做“失败鲸”的东西，那是他们网站上展示的图片。![](img/1e4f07659e58faa22deb662e5dcbd6dd_157.png)
- en: getting too much traffic to handle，that was because when people are liking。and
    tweeting and retweeting things it's，a huge amount of data coming in。and it turns
    out it's very hard to solve，these problems but，locking the database table or the
    rows。with these transactions is one way，final，extra time today we thought we would。
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 处理过多流量的问题，正是因为当人们喜欢、推文和转发时，数据量巨大。事实证明，解决这些问题非常困难，但通过这些交易锁定数据库表或行是一种方式，最后，今天我们想。
- en: play this out in the same example that i，ago，suppose that the scenario at hand
    is。![](img/1e4f07659e58faa22deb662e5dcbd6dd_159.png)
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 在我之前提到的同一个例子中，假设当前的场景是。![](img/1e4f07659e58faa22deb662e5dcbd6dd_159.png)
- en: that you and your roommates have a nice，dorm fridge，and you're all in the habit
    of drinking。![](img/1e4f07659e58faa22deb662e5dcbd6dd_161.png)
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 你和室友有一个不错的宿舍冰箱，大家都习惯喝。![](img/1e4f07659e58faa22deb662e5dcbd6dd_161.png)
- en: lots of milk and you want to be able to，drink some milk，but you go to the fridge
    like i'm about。to here and you realize，uh oh we're out of milk and so now i'm，inspecting
    the state of this。![](img/1e4f07659e58faa22deb662e5dcbd6dd_163.png)
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 大量的牛奶，而你想喝点牛奶，但你去冰箱的时候，像我即将要做的那样，你意识到，哦，我们没有牛奶了，所以现在我在检查这个的状态。![](img/1e4f07659e58faa22deb662e5dcbd6dd_163.png)
- en: refrigerator which is quite old，this variable，being empty tells me that i should
    go to。cvs and buy some more milk。![](img/1e4f07659e58faa22deb662e5dcbd6dd_165.png)
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 冰箱，这个变量是空的，告诉我我应该去CVS再买些牛奶。![](img/1e4f07659e58faa22deb662e5dcbd6dd_165.png)
- en: so what do i then do i'm presumably，going to close the fridge，and i'm going
    to go and leave and go。head to cvs，unfortunately the same problem arises，that
    we'll act out here in our final 60。or so seconds together，whereby if brian now
    my roommate in this，story also wants some milk。he comes by when i'm already headed
    to，fridge，and realizes oh we're out of milk so he。
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 那我接下来该怎么做，我想我会关上冰箱，然后去离开，前往CVS，不幸的是，同样的问题出现了，我们将在最后60秒左右的时间里重演这个场景，假设现在我的室友布莱恩在这个故事中也想要一些牛奶。他来找我时，我已经走向冰箱，意识到哦，我们没有牛奶了。
- en: nicely will go restock，as well so let's see how this plays out。![](img/1e4f07659e58faa22deb662e5dcbd6dd_167.png)
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，会去补货，所以让我们看看这个会如何发展。![](img/1e4f07659e58faa22deb662e5dcbd6dd_167.png)
- en: and we'll see if there's，isn't a similar uh analogous solution so。![](img/1e4f07659e58faa22deb662e5dcbd6dd_169.png)
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看看是否有类似的，呃，类比解决方案。![](img/1e4f07659e58faa22deb662e5dcbd6dd_169.png)
- en: i've checked the state of the variable，back。![](img/1e4f07659e58faa22deb662e5dcbd6dd_171.png)
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我检查了变量的状态，返回。![](img/1e4f07659e58faa22deb662e5dcbd6dd_171.png)
- en: do。![](img/1e4f07659e58faa22deb662e5dcbd6dd_173.png)
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 做吧。![](img/1e4f07659e58faa22deb662e5dcbd6dd_173.png)
- en: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_174.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](img/1e4f07659e58faa22deb662e5dcbd6dd_174.png)'
- en: all right i am now back from the store，i've picked up some milk，gonna go ah**d
    and put it into the。fridge and oh how did this happen now，there's multiple jugs
    of milk and of。course you know milk does not last that，long and brian and i don't
    drink that。much milk so this is like a really，serious problem，we've sort of tried
    to update the very。
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我现在回到商店，买了一些牛奶，要去**把它放进**冰箱，哦，这怎么发生的，现在有好几瓶牛奶，当然，你知道牛奶不会保存太久，而布莱恩和我喝的牛奶也不多，所以这真是一个严重的问题，我们已经尝试更新这个非常。
- en: value of this variable，at the same time so so how do we go，about fixing this
    what's the。the actual solution here well i dare say，that we can draw some inspiration。![](img/1e4f07659e58faa22deb662e5dcbd6dd_176.png)
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这个变量的值，同时，怎么去解决这个问题呢，实际的解决方案是什么呢，嗯，我敢说，我们可以得到一些灵感。![](img/1e4f07659e58faa22deb662e5dcbd6dd_176.png)
- en: from the world of transactions and the，world of databases and perhaps create
    a。visual for here that we hope you never，forget if you take nothing away from。today
    let's go ah**d and act this act，this out one last time。where this time i'm going
    to be a little，more extreme i go ah**d and open the。
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 从事务的世界和数据库的世界中，或许可以在这里创建一个视觉化，让你希望永远记住，如果今天你什么都没学到，就去**把这个重演**一次。这次我会更极端一些，我去**打开冰箱**。
- en: fridge i realize ah we're out of milk，i'm going to go to the store i do not。want
    to allow for this situation where，well，instead，let me go ah**d and drape this
    through。a little extreme but i think so long as，he can't get into the fridge，this
    shouldn't be a problem。let me go ah**d now and just attach the，lock here，almost
    got it come on all right。
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 冰箱，我意识到啊，我们没有牛奶了，我要去商店，我不想让这种情况发生，也就是说，嗯，让我先去**把这个挂起来**。有点极端，但我觉得只要他进不了冰箱，这应该就没问题。让我现在去**把锁装上**，快好了，加油，好的。
- en: now the fridge is locked now i'm gonna。![](img/1e4f07659e58faa22deb662e5dcbd6dd_178.png)
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 现在冰箱锁上了，我要去。![](img/1e4f07659e58faa22deb662e5dcbd6dd_178.png)
- en: i can come up on stage and just tell me，oh all right that's it for cs50 sorry
    to。keep you late we will see you。![](img/1e4f07659e58faa22deb662e5dcbd6dd_180.png)
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以上台并告诉我，哦，好吧，CS50就到此为止，抱歉让你们久等，我们下次再见。![](img/1e4f07659e58faa22deb662e5dcbd6dd_180.png)
