- en: 哈佛 CS50-WEB ｜ 基于Python ／ JavaScript的Web编程(2020·完整版) - P17：L5- JavaScript编程全解
    3 (逻辑存储，API) - ShowMeAI - BV1gL411x7NY
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈佛 CS50-WEB ｜ 基于Python ／ JavaScript的Web编程(2020·完整版) - P17：L5- JavaScript编程全解
    3 (逻辑存储，API) - ShowMeAI - BV1gL411x7NY
- en: user presses a key for example but it，turns out JavaScript has other ways of。allowing
    functions to run in fact on，their own we can set what are called。intervals where
    a particular function，runs every some number of milliseconds。for example and so
    if we go back to like，the counter example from before right。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 用户按下一个键，比如说，但事实证明JavaScript还有其他方式。允许函数运行，实际上是独立运行的，我们可以设置所谓的。间隔，在某个时间间隔内，特定函数每隔一些毫秒。运行一次。所以如果我们回到之前的计数器示例。
- en: now for this counter example I have to，be the one to press the count button。that
    is going to increment the value of。![](img/dc59dd7877c6ec784380fe9b1020ccd4_1.png)
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在这个计数器示例中，我必须。自己按下计数按钮。这样就会增加。![](img/dc59dd7877c6ec784380fe9b1020ccd4_1.png)
- en: count every single time but I could put，that inside of an interval instead so。let
    me go back to counter，dot HTML whose JavaScript is inside of。counter j/s and now
    what I'd like to say，is I would like when the Dom content is。loaded let me set
    an interval for count，and 1000 so what is that going to do set。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 每次都计数，但我可以把。这个放在间隔里面。所以让我回到counter，dot HTML，JavaScript在counter j/s里面，现在我想说的是，当DOM内容加载时，让我为count设置一个间隔，间隔为1000。那么这会做什么呢？设置。
- en: interval as a function built into，JavaScript here where I'm saying that I。would
    like to create a new interval，where every so often go ahead and run a。particular
    function and I would like to，run the count function will recall that。count function
    is going to increment the，value of count and I'll get rid of this。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: interval是JavaScript内置的一个函数，在这里我说我。想要创建一个新的间隔，周期性地去运行一个。特定的函数，我想要运行计数函数，记得。计数函数将增加count的值，我会去掉这个。
- en: alert for now just for simplicity all I，want the count function to do is update。the
    h1 with the new value of the counter，and，go ahead and run that count function。every
    1000 milliseconds otherwise known。![](img/dc59dd7877c6ec784380fe9b1020ccd4_3.png)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 目前只是为了简化，我只想让计数函数更新。h1标签，显示新的计数器值，并且。每1000毫秒去运行这个计数函数，换句话说。![](img/dc59dd7877c6ec784380fe9b1020ccd4_3.png)
- en: as every one second go ahead and run the，count function so now when I open。![](img/dc59dd7877c6ec784380fe9b1020ccd4_5.png)
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 每一秒都去运行计数函数，所以现在当我打开。![](img/dc59dd7877c6ec784380fe9b1020ccd4_5.png)
- en: counter dot HTML it's zero but every，second now it's going to change every。second
    updating one by one by one I，don't have to click the button of course。I could
    and the event handler would，still work but the interval is saying。now every one
    second go ahead and run，the count function and that has this。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: counter dot HTML现在是零，但每。秒现在它会每秒变化一次。每秒更新一次，我不需要点击按钮。当然，我可以点击，事件处理器仍然会工作，但这个间隔表示。现在每一秒去运行计数函数，并且有这个。
- en: particular result so if you've ever seen，a webpage that like displays the current。time
    in seconds and like a countdown，timer or is displaying the current time。with seconds
    it might be doing something，like this just having some sort of。interval that every
    second is going to，count and increment in order to say。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 特定的结果。所以如果你曾经见过，一个网页像是显示当前的。时间（秒数）和倒计时器，或者显示当前时间。带秒数，它可能是在做某些事情，像这样：有某种。间隔每秒去计数和增加。
- en: update the number to the one greater one，greater and one greater than that of。![](img/dc59dd7877c6ec784380fe9b1020ccd4_7.png)
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 更新数字为更大的一个，比那个更大的一个。![](img/dc59dd7877c6ec784380fe9b1020ccd4_7.png)
- en: course if I close the page and go back，to it if I close these pages and then。![](img/dc59dd7877c6ec784380fe9b1020ccd4_9.png)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果我关闭页面并返回，如果我关闭这些页面然后再回来。![](img/dc59dd7877c6ec784380fe9b1020ccd4_9.png)
- en: open counter dot HTML again I've gone，back to zero like JavaScript is not。saving
    any state about my page it's just，every time we're running the page it's。![](img/dc59dd7877c6ec784380fe9b1020ccd4_11.png)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 再次打开counter dot HTML，我又回到了零，就像JavaScript并没有。保存关于我的页面的任何状态，每次我们运行页面都是。![](img/dc59dd7877c6ec784380fe9b1020ccd4_11.png)
- en: going to go back to counter j/s it's，going to say all right we're defining a。![](img/dc59dd7877c6ec784380fe9b1020ccd4_13.png)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 将返回到counter j/s，它会说，好吧，我们在定义一个。![](img/dc59dd7877c6ec784380fe9b1020ccd4_13.png)
- en: variable called counter we're setting，that variable equal to zero so every。time
    I load the page it's going to be，set back to zero and that might not be。great
    depending on the type of page，you're trying to create that maybe you。want to page
    that is somehow able to，store information such that on。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一个名为 `counter` 的变量，我们将那个变量设为零，所以每次加载页面时，它都会重置为零，这可能不太好，具体取决于你试图创建的页面类型，也许你希望页面能够存储信息。
- en: subsequent visits were able to utilize，the information that was already stored。some
    way of remembering information for，later use in later versions of。JavaScript and
    more modern browsers now，allow us to do something just like that。called local
    storage and what local，storage is is it's a way for us to be。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在后续访问中，我们能够利用已经存储的信息。在后来的 JavaScript 版本和更现代的浏览器中，现在允许我们做一些类似的事情，这叫做本地存储，而本地存储就是我们能够。
- en: able to store information inside of the，user's web browser that a page can ask。to
    store particular values inside the，web browser and later on on subsequent。visits
    to that page we can go back and，say let's extract those values that were。previously
    stored inside of local，storage local storage it's going to give。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 能够在用户的网页浏览器内存储信息，页面可以请求在浏览器中存储特定的值，并且在后续访问该页面时，我们可以回来提取那些之前存储在本地存储中的值，本地存储会给。
- en: us access to two key functions that。![](img/dc59dd7877c6ec784380fe9b1020ccd4_15.png)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以访问两个关键功能。![](img/dc59dd7877c6ec784380fe9b1020ccd4_15.png)
- en: we're going to use to manipulate this，local storage，the first is local storage
    getitem where。we would like to get something out of，local storage based on its
    key some name。that we have given to that value and we，also have access to local
    storage dot。set item which goes ahead and adds a new，value to local storage or
    replaces an。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用本地存储来操作这个，第一个是本地存储的 `getitem`。我们想根据某个名称从本地存储中获取一些东西，那个名称是我们给那个值的。
- en: existing value in local storage，setting this key equal to a particular。value
    so we can use local storage then，to allow our webpages using javascript。to be
    able to store information and，retrieve information from the browser。and let's
    now try to use that in order，to solve this problem of the counter。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地存储中设置这个键等于一个特定的值，这样我们就可以使用本地存储，允许我们的网页使用 JavaScript 能够存储信息并从浏览器中检索信息。现在让我们尝试使用它来解决这个
    `counter` 的问题。
- en: that seems to always reset back to zero，so now in counter jeaious instead of。sending
    counter equal to zero the first，thing I want to know is is there already。a value
    for the counter in local storage，so I can ask a question like if local。storage
    dot get item counter meaning go，to local storage try and get the counter。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这似乎总是重置为零，所以现在在 `counter` 的部分，我想知道的是本地存储中是否已经有 `counter` 的值，所以我可以问一个问题，比如 `if
    local.storage.get item counter`，意思是去本地存储尝试获取 `counter`。
- en: and anything in this if expression will，happen if there is something inside
    of。local storage for counter but it turns，out that if I want to do the inverse
    of。that say not I can just use the，exclamation point much like in C in。JavaScript
    the exclamation point just，means not so meaning if there is not。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这个 `if` 表达式中的任何内容将会发生，如果本地存储中有 `counter` 的值，但如果我想做反向操作，简单来说，我可以使用感叹号，和 C 语言一样。在
    JavaScript 中，感叹号仅表示否，所以意思是如果没有。
- en: something in local storage called，counter well then let's go ahead and。just
    set the value in local storage，local storage dot set item counter and。we'll set
    it equal to zero so what this，is doing here is before anything else。happens we
    are checking local storage to，say is there already a value for counter。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在本地存储中有一个名为 `counter` 的东西，那么我们就设置本地存储中的值，使用 `local storage.set item counter`
    并将其设为零。这在做什么呢？在其他任何事情发生之前，我们会检查本地存储，看看是否已经有 `counter` 的值。
- en: and if there is not already a value for，counter we need to make sure there is。something
    there inside of local storage，for the counter so we are going to set。the value
    of counter equal to zero for，example and so now what needs to change。I'll go ahead
    and get rid of the，interval so that it only happens when I。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 如果本地存储中还没有 `counter` 的值，我们需要确保在本地存储中有一些东西用于 `counter`，所以我们将 `counter` 的值设为零，例如，现在需要改变的是什么。我将去掉间隔，这样它只在我。
- en: click on it but what should this count，function actually do well first let me。get
    the value of the counter counter is，going to be whatever local storage get。item
    counter is I'm gonna get the，counter out of local storage I'm going。to increment
    it counter plus plus we'll，go ahead and set the value of this h1，elements innerhtml。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 点击它，但这个count函数到底应该做什么呢？首先让我获取计数器的值，计数器将是local storage中获取的item counter的值。我将从本地存储中获取计数器。我将增加计数器。
- en: equal to that counter but the last step，is I'll also do local storage dot set。item
    counter is equal to the new value，of counter so what I've done here is to。say
    that when I click the button count，function is going to run we're first。going
    to go into local storage get，value for the key counter whatever the。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 等于该计数器，但最后一步是我也会执行local storage dot set，item counter等于计数器的新值。所以我在这里做的是，点击按钮时，count函数将会运行。我们首先进入本地存储获取键counter的值。
- en: value of counter happens to be save it，inside of this variable called counter。we'll
    go ahead and increment that，variable setting it equal to itself plus。one update
    the h1s innerhtml same as，before just to update what we actually。see on the page
    but then go ahead and，local storage set item counter gets set。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: counter的值恰好保存在一个叫做counter的变量中。我们继续增加该变量，将其设置为自身加一。更新h1的innerHTML和之前一样，只是更新我们实际在页面上看到的内容，然后继续将local
    storage的item counter设置。
- en: to counter for example so now let's go。![](img/dc59dd7877c6ec784380fe9b1020ccd4_17.png)
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 计数器，例如，所以现在让我们去。![](img/dc59dd7877c6ec784380fe9b1020ccd4_17.png)
- en: ahead and see what's going to happen if，I go ahead and open counter dot HTML
    we。see 0 we count 1 2 3 4 5 everything so，far so good now watch what happens if
    i。refresh this page i refresh the page and，alright that seems a little bit strange。at
    0 let me try counting and see what，happens i press count and alright the。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来看看如果我打开counter dot HTML会发生什么，我们看到0，我们数1 2 3 4 5，到目前为止一切正常。现在看看如果我刷新这个页面会发生什么，我刷新页面，好吧，这似乎有点奇怪，显示为0，让我试着计数看看会发生什么。我按下计数，好吧。
- en: count changed to 6 so it seems like it，did remember that i counted up to 5 0
    1。2 3 4 5 but when i refresh the page it，still showed me 0 but then let me count。up
    to the number 6 and I can keep，counting 7 8 9 10 what happens if i。refresh the
    page now I can try it i，refresh the page I've gone back to 0 but。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 计数变为6，所以看起来它记住了我数到5（0 1 2 3 4 5），但当我刷新页面时，它仍然显示0，但让我数到6，我可以继续数7 8 9 10。如果我现在刷新页面，会发生什么呢？我可以试试，刷新页面后，我回到了0。
- en: I count and okay now I'm at 11 so，somehow I am still remembering but the。first
    time it's still giving me 0 every。![](img/dc59dd7877c6ec784380fe9b1020ccd4_19.png)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我数到11，所以不知怎么的，我仍然记得，但第一次它仍然给我0每次。![](img/dc59dd7877c6ec784380fe9b1020ccd4_19.png)
- en: time why might that be well if you look，back at counter dot HTML you'll notice。that
    the reason is just inside the body，of the page the initial value of the h1。is
    just always 0 so if I want to fix，that then what I need the same is when。the Dom
    content is loaded go ahead and，get document query selector h1 go ahead。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么会这样呢？如果你回头看看counter dot HTML，你会注意到，原因就在页面的主体中，h1的初始值总是0，所以如果我想修复这个问题，我需要在DOM内容加载时，获取document
    query selector h1。
- en: and update the innerhtml，equal to whatever local storage get item。counter happens
    to be so every time I，open the page even before I click the。button even before
    the event listener is，triggered I'd like to say go ahead and。replace this heading
    update its inner，HTML to be the result of getting the。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 并将innerHTML更新为local storage中获取的counter的值。因此，每次我打开页面，即使在点击按钮之前，甚至在事件监听器触发之前，我都想说，去替换这个标题，将其innerHTML更新为获取结果。
- en: '![](img/dc59dd7877c6ec784380fe9b1020ccd4_21.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc59dd7877c6ec784380fe9b1020ccd4_21.png)'
- en: counter out of local storage for example，so now for refresh the page it's all
    at。11 I can update update update click，again some number of times bring it up。to
    18 for example refresh the page and，it stays at the number 18 and no matter。what
    value I get it to it's going to，store that number inside of local。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，从本地存储中获取计数器，所以现在刷新页面时，它的值是11。我可以更新更新更新，点击几次，比如说变成18，刷新页面后，它保持在数字18，无论我得到什么值，它都会存储在本地。
- en: storage such that when i refresh the，page that number is going to stay there。we
    can actually see the value inside of，local storage but again going into。Chrome's
    inspector I go into Chrome if I，go to the application tab and I go to。local storage
    here on the Left I can see，that I have a value for key counter。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 本地存储这样，当我刷新页面时，这个数字会保持在那里。我们实际上可以在本地存储中看到这个值，但再次进入Chrome的检查器。我进入Chrome，如果我去应用程序标签，进入本地存储，在左侧我可以看到，我有一个键为counter的值。
- en: whose value in this case happens to be，28 and you could go into local storage。you
    can manipulate this value you could，delete it if you want but this just goes。to
    show you that we have now stored this，value inside of my browser such that on。subsequent
    visits if this page gets，loaded again we can access that value。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，其值恰好是28，你可以进入本地存储。你可以操作这个值，如果需要的话可以删除它，但这只是表明我们现在已经在浏览器中存储了这个值，以便在后续访问时，如果该页面再次加载，我们可以访问到这个值。
- en: from inside of the application as well，and so now we've been able to see how。our
    pages are able to store data in，order to just make the user experience a。little
    bit better if we want the user to，be able to have information remembered。from
    the last time they visited a，particular page we can sometimes。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 也可以从应用程序内部传输数据，因此我们现在可以看到我们的页面如何存储数据，以便使用户体验稍微好一些。如果我们希望用户能够记住上次访问某个特定页面时的信息，我们有时可以做到这一点。
- en: actually be quite helpful all right so，now we've seen a lot of features of。JavaScript
    we've seen a bunch of，different ways of representing data we。store data in variables
    and those，variables have had types like integers。those variables of sum has been
    strings，and some times have been HTML elements。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，这可能会非常有帮助。好吧，现在我们已经看到了JavaScript的许多特性，看到了一些不同的数据表示方式。我们将数据存储在变量中，这些变量有类型，比如整数。有些变量是字符串，有些时候是HTML元素。
- en: sometimes they've been arrays or lists，of our items sometimes they've even been。functions
    so we can set a variable equal，to a function but perhaps one of the。most useful
    data types inside of，JavaScript is the JavaScript object so。go into the JavaScript
    console just to，demonstrate this what the JavaScript。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 有时这些变量是我们的项目的数组或列表，有时甚至是函数，因此我们可以将一个变量设为一个函数，但也许在JavaScript中最有用的数据类型是JavaScript对象。所以进入JavaScript控制台只是为了演示这个JavaScript。
- en: object is is it's really the equivalent，of like a Python dictionary some。Association
    of keys to values where you，can look up something by a key or by a。property and
    see what his value happens，to be so if I had a variable like person。I could set
    person equal to a JavaScript，object who's like first name is Harry。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对象实际上就像Python字典的等价物，是一组键和值的关联，可以通过键或属性查找某个东西，看看它的值是什么。如果我有一个变量叫做person，我可以将person设为一个JavaScript对象，像是名字为Harry。
- en: and whose last name is Potter again，using syntax very similar to what the。dictionary
    syntax looks like inside of，Python as well and now that I have this。variable person
    which is first Harry，last Potter I can access a particular。property of the person
    in a number of，ways I can say something like person dot。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 而且他的姓是Potter，再次使用与Python中字典语法非常相似的语法，现在我有了这个变量person，名字是Harry，姓是Potter，我可以以多种方式访问person的特定属性。我可以说person.dot。
- en: first to say get me the first name，property of this particular object and I。see
    that it's equal to Harry I could，equivalently use squ*re bracket notation。the
    way Python does squ*re bracket first，and that will also give me Harry。but this
    turns out to be quite powerful，to be able to represent data in this。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 首先获取这个特定对象的first name属性，我看到它等于Harry。我也可以等效地使用方括号表示法，就像Python那样，方括号先出现，这样也会得到Harry。但这证明能够以这种方式表示数据是相当强大的。
- en: structured way like this where I have an，association of keys or otherwise known。as
    properties with particular values and，then I have the ability given a。JavaScript
    object to be able to access a，particular value and it turns out that。one of the
    ways this is most useful is，in the exchange of data moving data。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以这样的结构化方式，我有一组键（也称为属性）与特定值的关联，然后我可以通过一个JavaScript对象访问某个特定的值，事实证明，这种方式最有用的之一是在数据交换中，移动数据。
- en: around from one service to another and，so here we're going to introduce what。are
    known as api's otherwise known as，application programming interfaces which。in
    the context of the web you can think，of as some well-defined structured way。for
    services on the Internet to，communicate with each other that if you。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个服务到另一个服务，所以在这里我们将介绍被称为API的内容，也就是应用程序编程接口，在网络上下文中，你可以将其视为互联网服务相互通信的一种定义明确的结构化方式。
- en: want your application to be able to talk，to some other service maybe you want。your
    application to interact with Google，Maps or to be able to interact with。Amazon
    or some other weather service to，get the day's weather then you might be。able
    to access some API some mechanism，whereby you can communicate with another。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望你的应用能够与某个其他服务进行交互，可能你希望你的应用能够与谷歌地图或亚马逊等天气服务互动，以获取当天的天气，那么你可能能够访问某个API，通过某种机制与其他服务进行通信。
- en: service by sending a request and，receiving back data in some sort of very。well
    structured format and very often，that well structured format happens to。be a particular
    type of data known as，Jason which stands for JavaScript object。notation which
    is a way of transferring，data in the form of JavaScript objects。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 通过发送请求并以某种结构化良好的格式接收数据，这种结构良好的格式通常是被称为Jason的特定类型数据，即JavaScript对象表示法，这是一种以JavaScript对象的形式传输数据的方式。
- en: these sort of objects that happen to，have properties and values associated。with
    them and so what does javascript，object notation look like well if we。think back
    to the applications that，we've been creating these applications。that are able
    to represent things like，an airline and many movements of planes。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这些对象具有相关的属性和值，那么JavaScript对象表示法看起来是什么样子呢？如果我们回想一下我们创建的这些应用，这些能够表示航空公司和飞机动态的应用。
- en: between particular destinations a，JavaScript object representing a flight。might
    look something like this，a JavaScript object that has properties。for origin is
    something destination is，something duration is something things。we've seen before
    but you might imagine，that if we wanted our airline to be able。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 表示特定目的地的JavaScript对象可能看起来像这样，一个具有origin、destination和duration属性的JavaScript对象，这些都是我们之前见过的，但你可以想象，如果我们希望我们的航空公司能够。
- en: to make its data available to other，services so that other web applications。or
    other programs could programmatically，access information about flights we。could
    pass data in this format to those，other applications so that they could。then treat
    this as a JavaScript object，and get access to the information about。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 使其数据可供其他服务使用，以便其他网络应用或其他程序可以以编程方式访问航班信息，我们可以以这种格式将数据传递给其他应用，以便它们可以将其视为JavaScript对象，从而获取有关航班的信息。
- en: it and the nice thing about this，particular representation is that it is。both
    human readable and machine readable，that we as people can look at this and。get
    an intuitive understanding for what，all of this means but also a computer。knows
    how to access particular，properties that appear before the colon。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这个特定的表示法的好处在于，它既易于人类阅读，也易于机器阅读，我们作为人类可以查看这些内容，直观理解其中的含义，同时计算机也知道如何访问冒号前出现的特定属性。
- en: and get access to what those values are。![](img/dc59dd7877c6ec784380fe9b1020ccd4_23.png)
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 并访问这些值是什么。![](img/dc59dd7877c6ec784380fe9b1020ccd4_23.png)
- en: which appear after that colon as well so，JavaScript object notation otherwise。known
    as jason offers a very convenient，representation and this isn't exactly。what the
    JavaScript object syntax is in，JavaScript objects you don't strictly。need the
    quotation marks around the keys，you could just say origin colon and not。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在冒号后面出现的内容也是如此，因此JavaScript对象表示法，也称为Jason，提供了一种非常方便的表示方式，而这并不完全是JavaScript对象语法中的内容，JavaScript对象中不需要严格地在键周围加引号，你可以直接写origin:。
- en: origin in quotation marks so JavaScript，object notation uses slightly different。syntax
    but ultimately very reminiscent，what we've seen in JavaScript objects。and JavaScript
    knows how to take data in，this form and turn it into something。like a JavaScript
    object and turns out，there ways of doing this in Python as。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: origin用引号括起来，因此JavaScript对象表示法使用稍微不同的语法，但最终与我们在JavaScript对象中看到的非常相似，JavaScript知道如何以这种形式接收数据并将其转换为JavaScript对象，结果发现，在Python中也有实现这种功能的方法。
- en: well in other programming languages have，the ability to interpret JSON data
    in。order to use it in some meaningful way，and another advantage of the JSON。representation
    is it is very conducive，to representing structures of things so。these values don't
    just need to be，strings or numbers they could be lists。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他编程语言中，能够解释JSON数据，以便以某种有意义的方式使用它，JSON表示的另一个优势是它非常适合表示事物的结构。因此，这些值不需要只是字符串或数字，它们可以是列表。
- en: or arrays that happen have a sequence of，possible values or they could even
    be。other javascript objects that if we，wanted to represent not just a city name。but
    represent the city name and the，airport code for example as we saw that。we wanted
    to do before I could instead，of having origin be equal to a string。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 或者数组可能具有一系列可能的值，或者它们甚至可以是其他JavaScript对象，如果我们想表示的不仅仅是城市名称，而是例如城市名称和机场代码，如我们之前想做的那样，我可以将origin设置为一个字符串。
- en: like New York have origin be equal to，yet another JavaScript object that。contains
    a city property and a code，property where the city is the name of。the city and
    the code is the name of the，airport code and the important thing is。as long as
    I and the person I'm，communicating with agree upon this。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 喜欢纽约的来源等于另一个包含城市属性和代码属性的JavaScript对象，其中城市是城市名称，代码是机场代码，重要的是，只要我和我沟通的人对这一点达成一致。
- en: representation agree upon what the names，of these keys are and what the structure。of
    this JSON payload this JSON object，happens to be then the person on the。receiving
    end can take this data and，write a program that's able to interpret。it and use
    that data in some meaningful，way and so we'll see an example of this。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们达成一致，确定这些键的名称以及这个JSON有效载荷（JSON对象）的结构是什么，那么接收方可以获取这些数据并编写一个能够解释它的程序，并以某种有意义的方式使用这些数据，因此我们将看到这个例子的一个例子。
- en: now of using javascript to be able to，communicate with yet another online。service
    in particular for accessing，information about currency exchange。rates currency
    exchange rates are always，changing we want access to the latest。currency exchange
    rate data and if there，is an online service an API that。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在使用JavaScript能够与另一个在线服务通信，特别是用于访问有关货币兑换率的信息。货币兑换率总是在变化，我们希望访问最新的货币兑换率数据，如果有一个在线服务的API。
- en: provides access to that data in JSON，form in a format like this that is。machine
    readable then we can use that，data to write a stock a currency，data。in order to
    make those conversions what，might that data look like well the data。![](img/dc59dd7877c6ec784380fe9b1020ccd4_25.png)
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 以JSON格式提供该数据的访问权限，格式类似于这种机器可读的方式，那么我们可以使用这些数据来编写货币数据，以便进行转换。这些数据可能看起来像这样！[](img/dc59dd7877c6ec784380fe9b1020ccd4_25.png)
- en: could look something like this that we，make a request for accessing what are。![](img/dc59dd7877c6ec784380fe9b1020ccd4_27.png)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 可能看起来像这样，我们请求访问什么是。![](img/dc59dd7877c6ec784380fe9b1020ccd4_27.png)
- en: the exchange rates for converting from，US dollars of the West Newton is USD
    and。we get back a JSON object that looks，like this and it has a base key of USD。and
    then has a rates key that has a，whole bunch of rates within it so。conversion to
    euros and Japanese yen，great british britain pounds as well as。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 从美元转换的汇率是西纽顿的USD，我们得到的JSON对象看起来像这样，它有一个基础键USD，然后有一个汇率键，里面有一堆汇率。因此，转换为欧元和日元，以及英镑等。
- en: Australian dollars and all of the，various different currency exchange。rates
    for all of these different，currencies for example and this doesn't。have to be
    the way that this data is，structured but it happens to be a。convenient way and
    so long as the person，providing this data to me and I both。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 澳大利亚元和各种不同的货币兑换率。例如，这些不同货币的汇率，并不一定要以这种方式构造数据，但这恰好是一种方便的方式，只要提供数据的人和我都。
- en: know what this structure is we can begin，to write programs that are able to
    use。that data and so will now see our，example of an API which is exchange。rates
    API I owe and if we go to API dot，exchange rates API am / latest and。provide a
    get parameter of base equals，US dollars then what we get back is data，that looks
    like this。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们了解这个结构，就可以开始编写能够使用该数据的程序，因此我们现在将看到一个API的例子，即汇率API。我所欠的，如果我们访问API点汇率API点/最新，并提供一个参数base等于美元，那么我们得到的数据看起来像这样。
- en: now it's a little bit messy looking not，nearly as clean as we saw before but。it's
    the same exact thing just without，the whitespace we have a JavaScript。object that
    has a rates key that tells，me all right here is the exchange rate。between US Dollars
    and Canadian dollars，in the pound in the euro and other。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 现在看起来有点杂乱，不像之前那么整洁，但它确实是完全相同的东西，只是没有空格。我们有一个JavaScript对象，里面有一个rates键，它告诉我，“好吧，这里是美元与加元、英镑、欧元之间的兑换率”。
- en: currencies that exist as well and down，below we have the base of what base。currency
    we're converting from so all of，this data can come back to me if I just。make an
    HTTP request I make a web，request to this particular URL I then。get access to
    all of this currency，exchange rate information that I can。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 还存在其他货币，下面我们有基本的货币，也就是我们转换的基础货币。如果我仅仅发起一个HTTP请求，这些数据就会返回给我。我向这个特定的URL发起网页请求，然后可以获取到所有这些货币兑换率的信息。
- en: then use inside of my application so how，can I do this how can I now begin to
    use。this information inside of an，application let's now create a new page。I'm
    gonna call this currency HTML inside，of currency about HTML at our usual HTML。a
    title of currency exchange and a body，and inside the body and we're just going。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我将在我的应用程序中使用这些数据。那么，我该如何做呢？我现在如何开始在应用程序中使用这些信息？现在让我们创建一个新页面，我将其命名为currency
    HTML。在currency HTML中，我们将包含一个常规的HTML标题，标题为货币兑换，以及一个主体，主体内部我们就要开始。
- en: to include nothing for now what I really，care about is the JavaScript that is。going
    to make a web request in order to，get access to additional data。so far in JavaScript
    our JavaScript code，has exclusively been running code that。exists only on our
    computer it's running，inside the web browser and all happening。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 暂时不包含任何内容，我真正关心的是能够进行网页请求的JavaScript，以便获取额外的数据。到目前为止，我们的JavaScript代码只是在我们的计算机上运行，运行在网页浏览器内，一切都在进行中。
- en: inside the web browser we're not，communicating with some external server。what
    we'll take a look at now is，something known as Ajax which was about。asynchronous
    JavaScript where the idea，is that even after a page has loaded。using JavaScript
    we can make additional，web requests to ask for additional。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在网页浏览器中，我们并没有与某个外部服务器进行通信。现在我们要看看的是Ajax，这与异步JavaScript有关，意思是即使页面已经加载，我们也可以使用JavaScript发起额外的网页请求以请求更多的信息。
- en: information either from our own web，servers or from some third party web。servers
    if we want additional，information on our page and what we want。in this case is
    for our page to make an，asynchronous request to request for。additional data about
    the current，currency exchange rates for example so。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 信息来自我们自己的网络服务器或一些第三方网络服务器。如果我们想要在页面上获得额外的信息，这里我们想要的是让我们的页面发起一个异步请求，以请求当前货币兑换率的额外数据，例如。
- en: how am I going to do that well I want to，do this after the Dom content is loaded。so
    we'll add that usually there and what，we're going to take advantage of as a。function
    built-in to more recent，versions of JavaScript and supported by。most major browsers
    now and if the，function called fetch and what fetch is。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我该怎么做呢？我想在DOM内容加载后再做这个。因此我们通常会在这里添加，接下来我们将利用一个内置于较新版本JavaScript中的功能，并且现在大多数主流浏览器都支持这个功能，那就是fetch。
- en: going to do is it is going to make a web，request it is going to query some。website
    it could be our own it could be，someone else's and it's gonna get back。some HTTP
    response from that page and，I'm going to fetch in the page I'm going。to fetch
    is this URL API not exchange，rates API dot io / latest base equals。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做是发起一个网页请求，它将查询某个网站，可能是我们自己的，也可能是其他人的，然后从该页面返回一些HTTP响应，而我将要获取的页面是这个URL API，即exchange
    rates API dot io / latest base equals。
- en: USD and the only reason I happen to know，how this API works is because I've
    read。the api's documentation that describes，how the URL parameters work and what
    the。structure of the data that I get back，isn't and so I'm here going to say go。ahead
    and fetch from this URL make a，HTTP request asking for additional。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 关于美元，我之所以知道这个API是怎么工作的，仅仅是因为我阅读了API的文档，它描述了URL参数是如何工作的，以及我获取的返回数据的结构是什么。因此我在这里要说的是，继续从这个URL获取，发起一个HTTP请求以请求额外的。
- en: information from this URL and get back，what the results are going to be and。what
    fetch gives back to us is something，in JavaScript known as a promise and a。promise
    is going to be a way of，representing the idea that something is。going to come
    back but it may not come，back immediately we're not going to go。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个URL获取信息并查看结果会是什么。而fetch给我们的结果是JavaScript中称为“promise”的东西，promise是一种表示某件事情将要回来但可能不会立即返回的方式，我们不会继续等待。
- en: into the details of exactly how those，promises work but it turns out there's
    a。particular syntax for dealing with them，which is that I can say after I fetch
    I。can add a line called dot then that says，what should I do when the promise comes。back
    once I get back something like a，response，and so when I get back the response
    what。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 关于这些promise具体如何工作的细节，但事实证明有一种特定的语法来处理它们，我可以在fetch之后添加一行称为`.then()`，这表示当promise返回后我应该做什么。一旦我得到像响应这样的东西，
- en: I want to do is convert the response，into Jason treat it as Jason data Java
    a。JavaScript object as something that I，can then manipulate and so what I can
    do。is just use this as a function to say go，ahead and return response Jason and
    so。what this is saying is go ahead and get，me the latest exchange rates and then。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我想做的是将响应转换为JSON，将其视为JavaScript对象，以便我可以进行操作。因此，我可以使用这个函数来让程序返回`response.json()`，这意味着去获取最新的汇率，然后。
- en: after that's done this is an，asynchronous process it might take some。time but
    once I get back those results，then run this function take the response。and return
    the jason version of the，response convert that response into just。the raw JSON
    data such that I can use，that data to then access the currency。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，这是一个异步过程，可能需要一些时间，但一旦我得到这些结果，就运行这个函数，获取响应并返回响应的JSON版本，将响应转换为原始JSON数据，以便我可以使用这些数据来访问货币。
- en: exchange rates and it turns out that，with arrow functions if you ever have a。very
    simple function that all it's doing，is taking something and returning。something
    else I can simplify this，function even further and just say I can，return。I can
    just say response arrow response，Jason and this is a shorthand way of。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 汇率结果显示，使用箭头函数时，如果你有一个非常简单的函数，它只是将某个东西作为输入并返回其他东西，我可以进一步简化这个函数，只需说我可以返回。我可以直接说`response
    => response.json()`，这是一种简化的方式。
- en: saying a function that takes as input，the response and returns as output。response
    to Jason so here I'm saying go，ahead and fetch me in the latest。exchange rates
    from this particular API，then convert the response to Jason data。and then once
    you have the data here's，what I want you to do with that data and。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我定义了一个函数，它以响应作为输入，并返回将响应转换为JSON的数据。所以在这里，我让程序去获取来自这个特定API的最新汇率，然后将响应转换为JSON数据。一旦你有了数据，这就是我希望你对这些数据所做的事情。
- en: for now let's just go ahead and console，dot log that data just to print it out。to
    the terminal so we're not doing，anything else to us yet all I'm doing is。saying
    get me the exchange rates convert，the exchange rates data into Jason and。then
    let's go ahead and print out that。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们先控制台打印一下这些数据，只是将它打印到终端上，所以我们现在还没有做其他任何事情，我所做的就是让程序获取汇率，将汇率数据转换为JSON，然后我们打印出这些信息。
- en: '![](img/dc59dd7877c6ec784380fe9b1020ccd4_29.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc59dd7877c6ec784380fe9b1020ccd4_29.png)'
- en: data so I'll open up currency at HTML，it's a blank page but if I look in the。JavaScript
    inspector I see what got，logged is a JavaScript object here。indicated by the word
    object and if I，click the triangle at left I can open up。and see all right inside
    of this object，is all of this data about exchange rates。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 数据，所以我会打开`currency.html`，这是一个空白页面，但如果我查看JavaScript检查器，我看到记录的是一个JavaScript对象，这里用单词“object”表示。如果我点击左侧的三角形，我可以展开，看到这个对象内部包含的所有汇率数据。
- en: for a whole bunch of different exchange，rates for converting from the US dollar，we're
    here u。s。dollar one means one，u。s。dollar is one u。s。dollar for。![](img/dc59dd7877c6ec784380fe9b1020ccd4_31.png)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对于一大堆不同的汇率，从美元转换，我们这里的美元意味着一美元就是一美元！[](img/dc59dd7877c6ec784380fe9b1020ccd4_31.png)
- en: example so now that I've got this data，let's actually try and use this inside。of
    the program maybe let's say I want to，convert between US Dollars and the。to figure
    out what the conversion rate，is between dollars and euros well if we。recall what
    the data looks like the data，is a JavaScript object where we have a。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，现在我得到了这些数据，让我们实际上尝试在程序内部使用它，也许假设我想要在美元和欧元之间进行转换，以确定美元和欧元之间的兑换率。好吧，如果我们回忆一下数据的样子，数据是一个JavaScript对象，其中有一个。
- en: key called rate and inside of rates is，this object and inside of that object
    I。can access the EU our property to get，the exchange rate of one US dollar is。equal
    to some number of euros for，example so it's inside of the rates key。and then inside
    of the EU our key and，that's how I know what to get access to。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 键名为rate，rates中有这个对象，在那个对象内部我可以访问EUR属性，以获取一美元等于一些欧元的汇率，例如，所以它在rates键内部，然后在EUR键内部，这就是我知道要访问什么。
- en: inside of my data so what I really want，to do is access data dot rates dot EU
    R。it says get me to all the data that came，back access the rates key and then。access
    the euro key and we'll go ahead，and save that in a variable called rate。and now
    I'll just document query，selector body dot innerhtml。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的数据中，所以我真正想要做的是访问data.rates.EUR。它说获取我返回的所有数据，访问rates键，然后访问欧元键，我们将继续将其保存到一个名为rate的变量中。现在我将只需document.querySelector.body.innerHTML。
- en: '![](img/dc59dd7877c6ec784380fe9b1020ccd4_33.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/dc59dd7877c6ec784380fe9b1020ccd4_33.png)'
- en: equals rate just like take that rate put，it inside of the body so now if i。refresh
    currency dot HTML what I see is，just this value 0。9 zero eight eight。four three
    which means that right now，one u。s。dollar happens to be equal to。![](img/dc59dd7877c6ec784380fe9b1020ccd4_35.png)
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 等于汇率，就像把那个汇率放入主体中。所以现在如果我刷新currency.html，我看到的只是这个值0.908843，这意味着现在一美元恰好等于。![](img/dc59dd7877c6ec784380fe9b1020ccd4_35.png)
- en: about zero point nine one euros for，instance so that's useful I could make。this
    a little more human-friendly by，putting this inside of a template string。I could
    say one US dollar is equal to，and then rate euros for example and so。now if i
    refresh the page I see one u。s。dollar is equal to this many euros and。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 关于零点九一欧元，例如，这很有用，我可以通过把它放在一个模板字符串中，使其更人性化。我可以说一个美元等于，然后再加上欧元汇率，例如等等。所以现在如果我刷新页面，我看到一美元等于这么多欧元。
- en: even this is a little bit annoying I，probably don't care about it too this。many
    decimal places and some really in，the mood to be very precise about these。exchange
    rates if I only care about it，to like 3 decimal places for example it。turns out
    JavaScript has functions I can，use on numbers like rate dot two fixed。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 即使这有点烦人，我可能不太在意这么多小数位，我真的很想精确到这些汇率。如果我只关心三位小数，例如，事实证明JavaScript有一些可以在数字上使用的函数，比如rate.toFixed。
- en: passing in three as an argument there to，mean I'd like to take this exchange
    rate。and just round it to three decimal，places for example so now i refresh the，page
    and I see one u。s。dollar is equal，to zero point nine zero nine euros and，the interesting
    thing about what's。happening here is this is happening as a，result of an asynchronous
    request I am。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 传入三作为参数意味着我想把这个汇率四舍五入到三位小数，例如，所以现在我刷新页面，我看到一美元等于零点九零九欧元，而有趣的是，这一切都是由于异步请求的结果。
- en: asking for the latest exchange rates and，when I get back the exchange rates
    date。javascript is plugging that information，into the body of the page I now。communicating
    with an API getting back，that api's data in JSON form and then。using that data
    to update the contents，of my HTML page of course in practice if。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 正在请求最新的汇率，当我收到汇率数据时，JavaScript会把这些信息插入到页面的主体中。我现在正在与一个API通信，获取该API的数据，以JSON格式返回，然后使用这些数据更新我的HTML页面。当然在实践中，如果。
- en: I really want a currency exchange web，page I probably don't just want to。display
    the exchange rate between US，dollars and euros I probably want to let。the user
    pick what currencies they would，like to exchange between and so here's。how I might
    go about doing that inside，of the body of the page now rather than。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我真的想要一个货币兑换网页，我可能不仅仅想显示美元和欧元之间的汇率，我可能想让用户选择他们想要兑换的货币。因此，我可能会在页面主体内这样做，而不是。
- en: just have an empty body let's go ahead，and add a form that form is going to。have
    an input whose ID is currency just，so I have a way of referencing it later。the
    place holder will just be currency，and the type of it is text and then I'll。have
    an input whose type is submit and，we'll give it a value of convert that'll。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 只有一个空的主体，让我们继续添加一个表单，这个表单将有一个ID为`currency`的输入，这样我就可以稍后引用它。占位符将只是`currency`，它的类型是文本，然后我会有一个类型为`submit`的输入，我们将其值设为`convert`。
- en: be what the button says it says convert，and then I can convert to a particular。currency
    and then I need some place to，put my results so I'll go ahead and add。a div whose
    ID is result and this is，where after I've done all the currency。conversion this
    is where I'm going to，put the results of doing that currency。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮上写的内容是`convert`，然后我可以转换为特定的货币，然后我需要一个地方来放我的结果，所以我将添加一个ID为`result`的div，这就是在我完成所有货币转换后，我将放置那些结果的地方。
- en: conversion so now rather than fetch，right away here's what I need to do I。need
    to do something only when the form，is submitted，so I can get the form by saying
    document。query selector form dot on submit equals，this function and I'm gonna
    go ahead and。just in advance return false at the end，of the function so we don't
    actually try。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 转换，所以现在而不是获取，立刻这里是我需要做的事情。我需要在表单提交时做一些事情，因此我可以通过说`document.querySelector`表单的`onSubmit`等于这个函数来获取表单，并且我会提前在函数的最后返回`false`，这样我们就不会实际尝试。
- en: and submit the form to another page I，just want to run everything locally on。this
    same page but now inside of this，form once you submit it that is when I。want to
    run this code that is going to，fetch new data so I'm going to fetch。data from
    the exchange rates API convert，that data to Jason same as before then。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 并将表单提交到另一个页面，我只想在同一页面上本地运行所有内容，但现在在这个表单内部，一旦你提交，这就是我想运行这个将要获取新数据的代码的时刻，所以我将从汇率API获取数据，将数据转换为JSON，和之前一样，然后。
- en: go ahead and get access to that data but，now what I want to do is I want to。figure
    out what the user actually typed，in to the input field and that is going。to be
    the currency that I care about，getting access to so I'll create a。variable called
    currency which will be，equal to document query selector and I。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我继续访问那些数据，但现在我想要做的是弄清楚用户在输入字段中实际输入了什么，而这将是我关心的货币，以便获取访问，因此我会创建一个名为`currency`的变量，它将等于`document.querySelector`，而我。
- en: write the input field if I scroll down，it has an ID of currency so if I want
    to。get that input field I'm，to say get the element whose ID is，currency and get
    its value so this now。is the currency that the user wanted me，to get access to
    and I can then say data。rates currency instead of data rates dot，you are and importantly
    I can't do data。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我向下滚动输入字段，它的ID为`currency`，所以如果我想要获取那个输入字段，我将说获取ID为`currency`的元素并获取它的值，因此现在这是用户希望我访问的货币，然后我可以说`data.rates[currency]`而不是`data.rates.currency`，而且重要的是我不能做`data.变量`被称为`undefined`，这意味着那里没有值。
- en: rates dot currency that would literally，try to access a property of rates that。is
    called currency if I use squ*re，brackets instead that allows me to use a。variable
    something like the currency，variable which are defined up here on。line 13 as the
    currency that the user，typed in I would like to access that。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`rates.currency`这将确实尝试访问一个名为`currency`的属性，如果我使用方括号替代，它允许我使用一个变量，比如在这里第13行定义的`currency`变量，即用户输入的货币，我想要访问它。'
- en: particular currency inside of the rates，and so now I can ask a question there。are
    two possibilities here either the，currency the user typed in it is a valid。currency
    or it's not and it turns out，that if you try and access a property of。an object
    that doesn't exist what you，get back is a particular JavaScript。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 特定的货币在汇率中，因此我现在可以问一个问题，这里有两个可能性：用户输入的货币是有效的，或者不是。事实证明，如果你尝试访问一个不存在的对象的属性，返回的是一个特定的JavaScript。
- en: variable called undefined meaning there，is no value there so for example if
    I。have something like let person equal，first name is Harry and last name is。Potter
    like we did before I can access，something like person dot first and get。Harry
    I can access person dot last and，get Potter but if I access person dot。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '例如，如果我有像`let person = { firstName: ''Harry'', lastName: ''Potter'' }`这样的东西，就像我们之前做的那样，我可以访问`person.first`并得到`Harry`，我可以访问`person.last`并得到`Potter`，但是如果我访问`person.`'
- en: middle that is going to be a special，variable in JavaScript or a special。value
    in JavaScript called undefined，meaning there is no value there it's。slightly different
    from null which also，has a similar meaning they're used in。slightly different
    contexts so here what，I can say is if the rate is not。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 中间将会是JavaScript中的一个特殊变量或特殊值称为undefined，意味着没有值，这与null略有不同，虽然它们的意思相似，但在略有不同的上下文中使用。所以在这里我可以说如果汇率不是。
- en: undefined well then let's go ahead and，update not the body but the result to，say
    one u。s。dollar is equal to this，rate not necessarily euros but whatever。the currency
    happens to be and otherwise，let's go ahead and document query。selector result
    dot inner HTML equals，invalid currency just to let the user。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: undefined，那么我们来更新，而不是更新主体，而是更新结果，显示1美元等于这个汇率，不一定是欧元，而是货币所对应的汇率，否则，让我们把document.querySelector结果的innerHTML设为无效货币，以便让用户知道。
- en: know that the currency they tried to，provide is not actually a valid currency。and
    so we're going to need to try a，different currency in order to get the。![](img/dc59dd7877c6ec784380fe9b1020ccd4_37.png)
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 知道他们尝试提供的货币实际上并不是有效的货币。因此，我们需要尝试另一种货币以获得结果。![](img/dc59dd7877c6ec784380fe9b1020ccd4_37.png)
- en: all to work so now here's what we can do，if I open up currency dot HTML again
    I。now see a form where I can type in a，currency I can type in something like。the
    Europe for example press convert and，I see alright one u。s。dollar equal to，0。9
    0。0 something like the pound press，convert one u。s。 dollar equal to 0。77。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在我们可以做的就是，如果我再次打开currency.html，我现在看到一个表单，可以输入货币，我可以输入一些像欧洲的东西，按下转换，我看到好的，1美元等于0.900多一点，像英镑，按下转换，1美元等于0.77。
- en: one pounds I type in the Japanese yen，one u。s。dollar is equal to 109 point。eight
    five two Japanese yen and all of，this is happening where every time I。submit the
    form it's making yet another，request so if the exchange rates happen。to change
    in between when I submit the，form the next time I submit the form I。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我输入日元时，1美元等于109.852日元，所有这一切都在发生，每次我提交表单时，它都会发出另一个请求。因此，如果在我提交表单的过程中汇率发生变化，下次我提交表单时。
- en: will be getting the latest exchange，rates according to that exchange rates。API
    and the results are going to come，back here and of course if I type in a。currency
    that doesn't exist I type in，something like foo for example and press。convert
    invalid currency so it's going，to report back to me that it wasn't able。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将根据汇率API获取最新的汇率，结果将返回到这里，当然，如果我输入一个不存在的货币，比如输入foo并按下转换，结果将是无效货币，它将告诉我无法。
- en: to find that currency and so it tells me，that I need to type in something valid。and
    so I can type in something valid，maybe I try just US dollars itself it，tells me
    one u。s。dollar is equal to one，US dollar exactly what I would expect it，to be
    now there are a couple of。optimizations and improvements that we，can make here
    one is that I can search。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 找到那个货币，所以它告诉我我需要输入有效的东西。因此，我可以输入有效的东西，也许我尝试一下美元本身，它告诉我1美元等于1美元，正是我期望的样子。现在这里有一些优化和改进。
- en: for euros right now with EU our press，convert but if I search for euros in。lower
    case for example it turns out it。![](img/dc59dd7877c6ec784380fe9b1020ccd4_39.png)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在用欧元与欧盟的我们的按键转换，但如果我搜索小写的欧元，例如，结果是。![](img/dc59dd7877c6ec784380fe9b1020ccd4_39.png)
- en: thinks that's an invalid currency and，the reason why is because if you look
    at。the data that comes back to me from the，API this is the data that I get back。from
    the exchange rates API what you'll，notice is that all of the currencies are。all
    in capital letters that are all，capital letters all capital letters。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 认为那是无效货币，原因是如果你查看API返回给我的数据，这是我从汇率API收到的数据。你会注意到所有货币都是全大写的。
- en: which means the only keys that I'm，allowed to access are in fact those that。have
    capital letters in them because，these are the only keys that this API。makes available
    to me so if I want to，convert between US dollars and euros。lowercase what I might
    want to do is，first take the currency the thing the。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着我只能访问那些实际上具有大写字母的键，因为这些是API提供给我的唯一键。所以如果我想在美元和小写欧元之间转换，我可能想先获取货币的值。
- en: user typed in and first just call to，uppercase on it which is a JavaScript。function
    that takes a string and，converts it Dabra case I'd like to take。whatever the user
    typed in and now just，first convert it to uppercase that way。if I go back here
    I can type in Euro，lowercase press convert and I'm still。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 用户输入并首先对其调用大写，这是一种JavaScript函数，它接受一个字符串并将其转换为驼峰式。我想把用户输入的内容先转换为大写，这样如果我回到这里，输入欧元小写并按下转换，我仍然。
- en: able to get the correct conversion rate，the other thing that we won't noticeably。notice
    the difference with，is that right now I'm assuming that all。of this is going to
    go successfully that，we're gonna successfully be able to make。a web request will
    successfully convert，the response back to Jason but you never。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 能够获取正确的转换率，另外一件我们不会明显注意到的事情是，目前我假设这一切都会成功进行，我们将能够成功地发出网页请求，成功地将响应转换回Jason，但你永远不会。
- en: know an API could go down the API could，change and do something unexpected and。so
    anytime you're dealing with these，types of promises where you fetch。something
    and say then do this then do，that it can often be a good idea to add。one last
    case which is a catch case that，basically says what should you do if。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们知道API可能会宕机，API可能会发生变化并做出意外的事情，因此每当你处理这些类型的承诺时，获取某些内容并说接下来做这个，再做那个，添加一个最后的案例，基本上说明如果。
- en: something goes wrong so I can say catch，the error and what I can just do is
    say。![](img/dc59dd7877c6ec784380fe9b1020ccd4_41.png)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出了什么问题，我可以说捕获错误，我可以做的就是说。
- en: like console dot log error and then log，the error there and all that's really。saying
    is that if anything above goes，wrong with the fetching and trying to。process the
    response it's gonna catch，the error and then we'll just like print。out to the
    console that something went，wrong some error message happened and so。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 比如控制台输出错误，然后在那记录错误，这实际上是说，如果上述任何内容在获取和处理响应时出现问题，它将捕获错误，然后我们只需像打印出控制台中出现了什么错误消息一样。
- en: that can be a helpful nice to have just，to make sure that when things crash
    they。crash in a predictable way that you're，able to see exactly what the error
    is。and just by looking inside the，JavaScript console and so now we have a。fully
    working web page that is able to，communicate with an external API that is。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以是一个有用的附加功能，以确保当事情崩溃时，它们以可预测的方式崩溃，你能够准确看到错误是什么，只需查看JavaScript控制台，因此现在我们有一个完全工作的网页，能够与外部API进行通信。
- en: able to ask for information from another，service on the Internet。use those results
    and put them back into，the page really just going to show the。power now that we
    get by taking，advantage of the JavaScript language we。have the ability now to
    not only use，JavaScript to be able to run code on the。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 能够向互联网的另一个服务请求信息，使用这些结果并将它们放回页面，实际上只是展示了我们通过利用JavaScript语言所获得的力量，我们现在不仅能够使用JavaScript在。
- en: client where we weren't able to before，were right before we only had Python。code
    that was running on a web server，but using JavaScript the really powerful。thing
    is now the ability to manipulate，the dog the ability to use JavaScript to。take
    the page and change the contents of，the page by updating things by reading。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端，我们以前无法做到的，之前我们只有在web服务器上运行的Python代码，但使用JavaScript，现在强大的地方在于操控能力，使用JavaScript能够通过更新内容读取页面并更改页面的内容。
- en: what happens to be on the page whether，it's inside of a particular element or。what
    a user happened to type in and，using that in conjunction with event。handlers ways
    that we can listen for，when the user clicks on something or。when the user Scrolls
    through something，or when the user types a key to be able。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 页面上发生的事情，无论它是在特定元素内，还是用户输入的内容，结合事件处理程序使用，我们可以监听用户点击某个东西、用户滚动某个内容或用户输入键时的情况。
- en: to respond and therefore make our，webpages all the more interactive next。time
    we'll continue our discussion of，JavaScript looking at how we can。leverage the
    features of JavaScript to，continue to build even more interesting。and engaging
    user interfaces so we'll。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 响应，因此使我们的网页更加互动。下次我们将继续讨论JavaScript，看看我们如何利用JavaScript的功能，继续构建更加有趣和引人入胜的用户界面。
