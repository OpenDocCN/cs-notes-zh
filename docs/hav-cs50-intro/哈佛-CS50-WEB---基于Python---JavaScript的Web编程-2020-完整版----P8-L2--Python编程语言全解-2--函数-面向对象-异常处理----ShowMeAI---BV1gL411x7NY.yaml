- en: 哈佛 CS50-WEB ｜ 基于Python ／ JavaScript的Web编程(2020·完整版) - P8：L2- Python编程语言全解 2
    (函数，面向对象，异常处理) - ShowMeAI - BV1gL411x7NY
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈佛 CS50-WEB ｜ 基于Python ／ JavaScript的Web编程(2020·完整版) - P8：L2- Python编程语言全解 2
    (函数，面向对象，异常处理) - ShowMeAI - BV1gL411x7NY
- en: we'll take a look at our functions in，Python that are going to be some way for。us
    to write our own functions that take，an input and produce some output we've。already
    seen a number of different，functions that already exist in Python。we've seen the
    input function that takes，an input from the user we've seen the。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将看看我们在Python中的函数，这些函数将为我们提供编写自己的函数的方法，这些函数接收输入并产生输出。我们已经看到了Python中存在的许多不同函数。我们看到过接收用户输入的输入函数。
- en: print function that takes some text or，some other information and prints it
    to。the screen but if we want to define our，own functions we can do so as well。so
    here I'll go ahead and write a new，program called function stop PI and。let's write
    a function that takes a，number and squ*res it so the squ*re of。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 打印函数接收一些文本或其他信息并将其打印到屏幕上，但如果我们想定义自己的函数，我们也可以这样做。所以在这里，我将继续编写一个名为function stop
    PI的新程序。让我们编写一个接收数字并计算平方的函数。
- en: 10 is 10 times 10 or 100 I would like a，function that very easily takes a number。and
    returns its squ*re the way I define，a function in Python is using the DEF。keyword
    def short for define and here I，can say let me define a function called。squ*re
    and then in parentheses what，inputs it takes in this case squ*re just。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 10是10乘以10，或者100。我想要一个非常简单的函数，接收一个数字并返回它的平方。我在Python中定义函数的方式是使用DEF关键字，def是define的缩写。在这里我可以说让我定义一个名为平方的函数，然后在括号中指定它接收的输入，这里只是平方。
- en: takes a single input that I'm gonna call，X but if there were multiple inputs
    I。could separate them with commas like X Y，Z for a function that took three inputs。for
    example but in this case there's，just a single input X and the squ*re。function
    could have any logic in it，indented underneath the squ*re function。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 接收一个输入，我称之为X，但如果有多个输入，我可以用逗号分隔它们，例如X Y Z，用于接收三个输入的函数。但在这种情况下，只有一个输入X，平方函数可以有任何逻辑，缩进在平方函数下面。
- en: but ultimately this function is fairly，simple all it's going to do is return
    x。times X X multiplied by itself and now，if I want to print out a whole bunch
    of。squ*res of numbers I can do so I can say，for I in range let's say 10 let's
    print。![](img/84f93f161fd860c9cc985c69f11fc8e7_1.png)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 但最终这个函数相当简单，它将返回x乘以x，即x的平方。如果我想打印出很多数字的平方，我可以这样做。我可以说，假设I在范围内，让我们打印。![](img/84f93f161fd860c9cc985c69f11fc8e7_1.png)
- en: out that the squ*re of I is squ*re I so，let's try and parse out what's going
    on。here line 4 says for I in range 10 do，some loop ten times looping from 0 all。the
    way up to 9 and for each time we，loop we're going to print something out。we're
    gonna print out the squ*re of plug，in the value of I here is plug in the。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 第4行表示对于I在范围10内，执行一个循环十次，从0循环到9。每次循环时，我们将打印一些内容。我们将打印出I的平方值。
- en: value of calling our squ*re function，using I as input so that is going to。have
    the result of running this loop ten，times and printing out this line 10。different
    times each with a different，value of I so I can run Python functions，pi and here's。I
    see the squ*re of zero is zero squ*re。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 调用我们的平方函数，使用I作为输入，因此这将会是运行这个循环十次并打印这一行十次，每次的I值不同。我可以运行Python函数pi，这里我看到0的平方是0平方。
- en: '![](img/84f93f161fd860c9cc985c69f11fc8e7_3.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84f93f161fd860c9cc985c69f11fc8e7_3.png)'
- en: of one is one two is for someone and so，forth all the way up to the squ*re of
    9。is 81 so we've now written a function，and been able to use it but ideally when，we
    write functions。we'd like to not just be able to use，them in the same file but
    for others to。be able to use them as well and so how，can we do that well in order
    to do that。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一个是一个，两个是四，以此类推，一直到9的平方是81，所以我们现在已经编写了一个函数，并能够使用它，但理想情况下，当我们编写函数时，我们希望不仅能够在同一文件中使用它们，还希望其他人也能使用它们，那么我们该如何做到呢？
- en: you can import functions from other，Python modules or files so to speak so。let
    me create a new file called squ*res，PI for example so then instead of。running
    this loop here let's instead run，this loop in squ*res PI again separating。out
    different parts of my code I have，one file that defines the squ*re。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以从其他Python模块或文件中导入函数。让我创建一个名为squ*res PI的新文件。例如，这样我们就不再在这里运行这个循环，而是改为在squ*res
    PI中运行这个循环，再次将我的代码不同部分分开，我有一个定义平方的文件。
- en: function inside of functions pi and then。![](img/84f93f161fd860c9cc985c69f11fc8e7_5.png)
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在functions pi内部的函数中，然后。![](img/84f93f161fd860c9cc985c69f11fc8e7_5.png)
- en: another file called squ*res pi where I'm，actually calling the squ*re function
    now。![](img/84f93f161fd860c9cc985c69f11fc8e7_7.png)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个名为squ*res pi的文件，我现在实际上在调用squ*re函数。![](img/84f93f161fd860c9cc985c69f11fc8e7_7.png)
- en: if I try to run Python squ*res pi you'll，notice I'll run into an error here's。another
    error you'll see quite，frequently it's a name error another。type of exception
    which here says the，name squ*re is not defined meaning I'm。trying to use a variable
    or a function，name or something else that doesn't。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我尝试运行Python squ*res pi，你会注意到我会遇到一个错误。这里是另一个你会经常看到的错误，它是一个名称错误，另一种异常类型，这里说的是名称
    squ*re 未定义，意味着我正在尝试使用一个未定义的变量、函数名称或其他东西。
- en: actually have a definition I've never，said what squ*re is and that's because。by
    default Python files don't know about，each other if I want to use a function。that
    was defined inside of another file，I need to import it from that file and I。can
    do so like so I can say from，functions import squ*re functions was。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上我并没有定义squ*re是什么，这就是因为默认情况下Python文件互不了解。如果我想使用另一个文件中定义的函数，我需要从该文件导入它。我可以这样做，我可以说从functions导入squ*re函数。
- en: the name of this file function stop PI，and I'm saying from that Python module
    I。would like to import the squ*re function。![](img/84f93f161fd860c9cc985c69f11fc8e7_9.png)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件的名称是function stop PI，我在说我希望从该Python模块导入squ*re函数。![](img/84f93f161fd860c9cc985c69f11fc8e7_9.png)
- en: as a function that I would like to use。![](img/84f93f161fd860c9cc985c69f11fc8e7_11.png)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个我想要使用的函数。![](img/84f93f161fd860c9cc985c69f11fc8e7_11.png)
- en: now I can run Python squ*res da PI and，we get the output that we expect no more。exception
    I've now been able to import，something from another module and access。it this
    way so this is one way to import，to literally say from functions import a。squ*re
    function import a particular name，that is defined inside a function stop。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我可以运行Python squ*res da PI，我们得到了预期的输出，没有更多的异常。我现在能够从另一个模块导入某些东西并以这种方式访问它，这是一种导入方式，字面意思是从functions导入squ*re函数，导入一个在function
    stop中定义的特定名称。
- en: PI another way I could have done this is，just to say import functions just import。that
    whole module but then I would need，to say instead of just squ*re I would，need
    to say from。Shin's dot squ*re to mean go inside the，functions module and get the
    squ*re。function and run that function and this，would operate in exactly the same
    way so。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种做法是直接说导入functions，导入整个模块，但那样我就需要说从Shin的.squ*re来表示进入functions模块并获取squ*re函数并运行该函数，这样操作也会完全一样。
- en: a couple of different options either，import the entire module in which case
    I。use this dot notation to say access a，particular part of that module or I say。from
    functions of import squ*re to just，import the name squ*re into this file。entirely
    so that I can just use the word，squ*re whenever I want to and this works。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种不同的选择，或者导入整个模块，在这种情况下我使用这个点表示法来访问模块的特定部分，或者我说从functions导入squ*re，以便仅将名称squ*re导入到这个文件中，这样我就可以随时使用squ*re这个词，这样是有效的。
- en: not just for modules that we have，written but also Python comes with a。number
    of built-in modules if you want，to write programs that interact with CSV。files
    which are a spreadsheet file，format I can import pythons built in CSV。module to
    get access to a whole bunch of，CSV related features there are a whole。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这不仅适用于我们自己编写的模块，Python还附带了许多内置模块。如果你想编写与CSV文件交互的程序，而CSV是一种电子表格文件格式，我可以导入Python内置的CSV模块，以获取与CSV相关的一系列功能。
- en: bunch of math related features you can，get by importing the math module so on。and
    so forth and there are additional，Python modules and packages that you can。install
    that other people have written，time comes，and next time as we take a look at。Django
    this is one of the techniques，that we're going to be looking at is。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 一堆与数学相关的功能可以通过导入数学模块等方式获得。此外，还有其他人编写的额外Python模块和包，你可以安装。当时机来临，下次我们看Django时，这是我们要关注的技巧之一。
- en: using functions that have been written，by people that are not ourselves so that。now
    is modules and how we can use，modules to be able to import functions。in order
    to allow for certain behavior，and this is one way that we can program。using the
    Python programming language，but another key technique the Python。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 使用由其他人编写的函数，因此现在是模块，以及我们如何使用模块来导入函数，以便允许某种行为，这是一种使用Python编程语言编程的方式，但另一种关键技巧是Python。
- en: supports that are supported by a number，of other programming languages as well。is
    an idea of object-oriented，programming a special type of，programming or a programming
    paradigm so。to speak which is a way of thinking，about the way that we write programs
    and。in object-oriented programming we think，about the world in terms of objects。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这一点也被许多其他编程语言所支持。对象导向编程的概念是一种特殊类型的编程或编程范式，从某种意义上说，它是一种思考我们如何编写程序的方式。在面向对象编程中，我们以对象的方式思考世界。
- en: where objects might store information，store some data inside of them and also。support
    the ability to perform types of，operations some sort of actions or。methods or
    functions as we might call，them that can operate on those objects。so now we're
    going to take a look at，some of the object-oriented capacities。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在对象可能存储信息的地方，存储一些数据并且也支持执行某些类型的操作、某种行为或方法，或者我们可能称之为可以对这些对象进行操作的函数。因此，现在我们将深入了解一些面向对象的能力。
- en: that the Python programming language is，going to give us the ability to have
    so，types。it has types for lists it as types for，sets and so on and so forth。let's
    imagine though that we want to，create a new type in Python some way of。representing
    other types of data，for example two-dimensional points。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: Python编程语言将为我们提供能力，以便有这些类型。它有列表类型，它有集合类型等等。假设我们想在Python中创建一个新类型，一种表示其他数据类型的方式，例如二维点。
- en: things we talked about before something，that has an x value and the y value
    now。as we've already discussed you could do，this using the tupple just using one。number
    comma another number but we could，create an entire class of objects to be。able
    to represent this data structure as，well and so that's what we'll take a。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前谈到的事情是有一个x值和y值。正如我们已经讨论过的，你可以通过使用元组来做到这一点，使用一个数字和另一个数字，但我们可以创建一个完整的对象类来表示这个数据结构，所以这就是我们将要进行的。
- en: look at now is how to create a class in，Python so a create a new file called。classes
    PI and all a class is if you can，think of a class as a template for a。type of
    object we are going to define a，new class called point and then after。we've defined
    what a point is we will be，able to create other points we'll be。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看如何在Python中创建一个类，所以创建一个名为classes.py的新文件。类可以被视为我们要定义的某种对象的模板，我们将定义一个名为point的新类，然后在定义完point是什么之后，我们将能够创建其他点。
- en: able to create points to store x and y，values for example and so what do we。need
    in order to create a class well we，need some way to say that when I create。a point
    what should happen and in Python，this is defined using of what's called a。magic
    method called underscore，underscore init an underscore underscore。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 能够创建点以存储x和y值，例如。那么我们需要什么来创建一个类呢？我们需要某种方式来说明当我创建一个点时应该发生什么，在Python中，这通过被称为魔法方法的__init__来定义。
- en: in it is a method or function that is，going to automatically be called。every
    time that I try to create a new，point and this function takes a couple。of arguments
    all functions that operate，on objects themselves otherwise known as。methods are
    going to take the first，argument called self and this argument。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个方法或函数，每次我尝试创建一个新点时都会自动调用。这个函数接受几个参数，所有操作对象本身的函数，通常称为方法，都会接受第一个参数self，这个参数。
- en: self represents the object in question，and this is going to be important。because
    we don't just want a single，variable called X to store the points。x-coordinate
    or a single variable called，Y to store the y-coordinate because two。different
    points might have different X，and different Y values and we want to be。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: self表示相关的对象，这一点非常重要。因为我们不想仅仅有一个名为X的单一变量来存储点的x坐标，或一个名为Y的单一变量来存储y坐标，因为两个不同的点可能有不同的X和不同的Y值，而我们希望能够。
- en: able to store those separately and we're，going to store them inside of the object。itself
    so this variable self references，the object that we are currently dealing。with
    and it might change depending on，which point we happen to be interacting，with
    at any given time。what other inputs does a point need will，a point also needs
    an x value and a Y。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 能够分别存储这些点，并且我们将把它们存储在对象本身内部，因此这个变量self引用了我们当前处理的对象，并且可能会根据我们在任何给定时刻与之交互的点而改变。点还需要哪些输入？点还需要一个x值和一个y值。
- en: value so when we create a point we're，going to provide to that point an x。value
    and a y value now what do we need，to do in order to store all this data。inside
    of the point well recall that，self is representing，the point itself and so if
    we want to。store data inside of that point allow，the point to store its own x
    and y。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 值，因此当我们创建一个点时，我们将为该点提供一个x值和一个y值。现在，我们需要做什么才能将所有这些数据存储在点内部？好吧，记住self表示点本身，因此如果我们想在该点内部存储数据，让点存储它自己的x和y。
- en: values then weenus we need to store that，data inside of the cells so to speak
    and。in order to do that we can use this dot，notation to say self dot X is equal
    to。whatever this input X happens to be and，self dot Y is equal to whatever this。argument
    Y happens to be and these，values x and y they could be called。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要将数据存储在单元格中，可以这么说。为了做到这一点，我们可以使用这个点符号来表示self的X等于这个输入X，而self的Y等于这个参数Y，而这些值x和y可以被称为。
- en: anything they could just be called like，input 1 and input 2 for example and
    then。you would just reflect them here the，important thing is that these two input。values
    are being stored inside of the，point itself in properties that we're。going to
    call x and y all right so that，was a little bit abstract but let now。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 任何东西都可以被称为，例如，输入1和输入2。然后，你只需在这里反映它们，重要的是这两个输入值被存储在点本身的属性中，我们将称之为x和y。好的，这有点抽象，但现在让我们。
- en: let's see how we could actually use this，if I want to create a new point called
    P。I can say P equals point and then the，self argument is going to be provided。automatically
    I don't need to worry，about that but I do need to provide。input 1 and input 2
    the x value and the，y value so I'll go ahead and provide an。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 看看我们实际上如何使用它，如果我想创建一个叫P的新点。我可以说P等于点，然后自我参数会自动提供。我不需要担心这一点，但我确实需要提供输入1和输入2，x值和y值，所以我将继续提供一个。
- en: x value of 2 and a y value of 8 for，example so now I've created this point。and
    now that I have a point I can print，out information about the point I can。print
    out the x value of the point and I，can print out the Y value of the point。again
    I'm using this dot notation to say，go into the point and access data that。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: x值为2，y值为8，例如，所以现在我创建了这个点。现在我有了一个点，我可以打印出关于该点的信息。我可以打印出点的x值，也可以打印出点的Y值。再一次，我使用这个点符号来访问数据。
- en: is stored inside of that point access。![](img/84f93f161fd860c9cc985c69f11fc8e7_13.png)
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在那个点内部访问。![](img/84f93f161fd860c9cc985c69f11fc8e7_13.png)
- en: its x value and excesses Y value so now，when I run this program Python classes。pi
    what I get is 2 on the first line。![](img/84f93f161fd860c9cc985c69f11fc8e7_15.png)
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 它的x值和超额Y值，因此现在，当我运行这个程序Python类时。我得到的是第一行的2。![](img/84f93f161fd860c9cc985c69f11fc8e7_15.png)
- en: that is the x value and then 8 on the，second or 8 on the second line that is。the
    Y value so what we have here is a，function called init that creates a。point by
    storing the two inputs inside，of the object inside of a property。called X and
    a property called Y such，that later I can create a point which。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是x值，第二行是8，或者说这是Y值。所以我们这里有一个叫init的函数，通过将两个输入存储在对象内部的属性中，创建一个点，称为X和Y，以便稍后我可以创建一个点。
- en: calls this init function implicitly and，after we've created the point I can。access
    the data inside of it I can say，print out whatever P dot X is equal to。print out
    whatever P dot Y is equal to，as well，so that was a fairly simple example of。creating
    a class just creating a class，for representing a point in X and a y。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 隐式调用这个init函数，创建点后，我可以访问其中的数据。我可以说，打印出P的x等于多少，打印出P的y等于多少，这样也是可以的。这是创建一个类的一个相当简单的例子，只是创建一个表示x和y的点的类。
- en: value let's look at a more interesting，example let's imagine that we're trying。to
    write a program for an airline where，the airline needs to keep track of。booking
    passengers on a flight and，making sure that no flight gets。overbooked we don't
    want more passengers，on the flight then there is capacity on。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看一个更有趣的例子，假设我们正在为一家航空公司编写一个程序，该航空公司需要跟踪航班上的乘客预订，并确保没有航班被超额预订。我们不希望航班上的乘客超过其容量。
- en: that flight so let's define a new class，that we're gonna call flight and this。time
    the init method is just going to，take a single argument other than the。self which
    is the capacity every flight，needs some sort of capacity to know how。many people
    can fit on the plane and so，I'll store that inside of a value called。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们定义一个新的类，我们将称之为flight，这次init方法将只接受一个参数，除了self之外，就是容量。每个航班需要某种容量来知道可以容纳多少人，因此我会将其存储在一个名为容量的值中。
- en: self dot capacity equals capacity and，what other information do we need to。store
    about a flight well a flight has a，capacity and it also has all of the。passengers
    on the flight and so we could，represent this in a number of ways but。we know that
    lists can be used in order，to store a sequence of values so we'll。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: self.capacity等于容量，那么我们还需要存储关于航班的其他信息吗？航班有一个容量，并且它还有所有乘客，所以我们可以用多种方式表示这一点，但我们知道列表可以用来存储一系列值。
- en: go ahead and just create a list that，will store in self dot passengers that。is
    going to be equal to the empty list，so we start out with an empty list of。passengers
    so now if I want to create a，flight I can say flight equals and then。capital F
    flight that's the name of the，class and then provide a capacity I can。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 继续创建一个将存储在self.passengers中的列表，该列表将等于空列表，因此我们从空乘客列表开始。现在如果我想创建一个航班，我可以说flight
    = 大写F flight，这是类的名称，然后提供一个容量。
- en: say capacity of three to mean three，people can go in the flight but no more。than
    three that is the capacity because，that is the argument that's specified。inside
    of this init function and when I，do so I'm automatically going to get。this empty
    list of passengers so now，let's think about what methods or what。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 说容量为三意味着可以有三个人上飞机，但不能超过三人。这是因为这是在init函数中指定的参数，当我这样做时，我会自动获得一个空的乘客列表。现在，让我们考虑一下可能出现的问题或方法。
- en: functions we might care about performing，when it comes to a flight so one。reasonable
    function to add would be a，function that says alright let's add a。passenger to
    the flight if I want，someone new to go on this light so how。might I go about doing
    that well let's，define a new method also known as a。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到航班时，我们可能关心的一些函数，所以一个合理的函数是添加一个乘客的函数。如果我想让某个新乘客上这趟航班，我该如何进行呢？那么让我们定义一个新的方法，也称为。
- en: function to this flight class called add，a passenger this method can be called。whatever
    we want because this is a，method that's going to work on an。individual object
    we need some way of，referencing that object itself so we'll。use the keyword self
    again and when we，add a passenger we need to add a path。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这个航班类中有一个名为add的方法，可以调用乘客。因为这是一个将作用于单个对象的方法，我们需要某种方式来引用该对象本身，所以我们会再次使用关键字self，当我们添加乘客时，需要添加一个路径。
- en: by their name so I need to specify their，name as well such that now here I want。to
    add that name to the passengers list，how do I get access to the passengers。list
    will I have access to the self the，object itself and I stored the。passengers inside
    of self in self dot，passenger in attribute of this object。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 通过他们的名字，所以我需要指定他们的名字，这样现在我想将这个名字添加到乘客列表中，我该如何访问乘客列表呢？我会访问self，即对象本身，而我将乘客存储在self中，在self.passenger这个属性中。
- en: and self dot passengers is a list that，initially starts out as an empty list。but
    if I want to add something to the，end of the list we've already seen that。in order
    to do that I can say self dot，passengers dot append name so that adds。someone
    new to the end of this，passengers list now what could good。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: self.passengers是一个最初为空的列表，但如果我想将某些内容添加到列表的末尾，我们已经看到，为此我可以说self.passengers.append(name)，这样就可以将新乘客添加到这个乘客列表的末尾。现在有什么好处呢？
- en: potentially go wrong here well every，time we call this add passenger function。what's
    going to happen is we are going，to append to the end of this passengers。list this
    name but we haven't taken into，consideration the capacity of the flight。ideally
    our add passengers function，shouldn't let someone be added to a。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用这个add passenger函数时，将会发生的事情是，我们将把这个名字追加到乘客列表的末尾，但我们没有考虑到航班的容量。理想情况下，我们的add
    passengers函数不应该让某人被添加到航班中。
- en: flight if the flight is already at，capacity so there are a number of things。we
    could do here we could just check it，inside of this function but just for。good
    measure let's create a new function，let's add a new function called open。seats
    that is going to return the number，of open seats that are on the plane。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果航班已经达到容量，有很多事情我们可以做。我们可以在这个函数内部检查，但为了确保万无一失，让我们创建一个新函数，叫做开放座位，它将返回飞机上剩余的开放座位数量。
- en: other than self there are no other，inputs that we need to calculate how。many
    open seats there are the only thing，we need to know in order to calculate。open
    seats is we need to know the，capacity - however many passengers there。are remember
    self dot passengers is our，list of all the passengers and anytime。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 除了自我，我们不需要其他输入来计算有多少开放座位。计算开放座位所需知道的唯一事情是容量减去乘客数量。记住，自我乘客是我们的所有乘客列表，而任何时候。
- en: we have a sequence to get the length of，that sequence I can say Len or length
    of。that sequence to say get me the number，of passengers that there are so now
    we。have this function called open seats，which will return capacity - the number。of
    passengers and tell us how many open，seats there are and now in this add。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个序列来获取该序列的长度，我可以说长度或该序列的长度，以获取乘客数量。所以现在我们有这个叫做开放座位的函数，它将返回容量减去乘客数量，并告诉我们还有多少开放座位。
- en: passenger function I can add some，additional logic I can say if，not self dot
    open seats so this is。equivalent to me saying in this case，like if self don't
    open seats equals。equals zero meaning there are no open，seats a more pythonic
    way so to speak of。expressing this idea is just saying if，not self not open seats
    in other words。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在乘客函数中，我可以添加一些额外的逻辑。我可以说，如果没有自我开放座位，这等同于我在这种情况下说，如果自我没有开放座位等于零，意味着没有开放座位，换句话说，更为
    Pythonic 的表达方式是说，如果没有自我开放座位。
- en: if there aren't any more open seats then，what should we do we should return
    and。maybe you might imagine this add，passenger function returns true if it。was
    able to successfully add a passenger，and false otherwise so in this case I。can
    return false to say you know what，there aren't enough open seats let me。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有更多的开放座位，我们应该怎么做？我们应该返回。也许你可以想象这个添加乘客函数如果成功添加乘客将返回真，否则返回假。所以在这种情况下，我可以返回假，表示没有足够的开放座位。
- en: return false from this function to，indicate that there was some sort of。error
    but otherwise if there are open，seats we can add the passenger and。return true
    to mean that everything was，okay we were able to add the passenger。successfully
    so now we have these three，functions in it that creates a new。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 从这个函数返回假以指示出现某种错误，但如果有开放座位，我们可以添加乘客并返回真，表示一切正常，我们能够成功添加乘客。所以现在我们有这三个函数，它创建了一个新的。
- en: flight add passenger that adds a new，passenger to that flight and open seats。which
    tells us how many open seats there，are and now let's use those functions to。actually
    add some passengers to this，flight let me get a list of people will。say Harry
    Ron Hermione and Ginny and now，let me loop over all of those people for。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 航班添加乘客，该函数将新乘客添加到该航班上，以及开放座位，告诉我们有多少开放座位。现在让我们使用这些函数，实际上为这个航班添加一些乘客，让我获取一组人，比如哈利、罗恩、赫敏和金妮，然后让我循环遍历所有这些人。
- en: every person in that list of people，let's try to flight add passenger person。and
    we can save the result in a variable，called success for example and then I，can
    say if success。well then let's print out that we added，the person to flight successfully
    but。else otherwise let's print out no。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的每一个人，让我们尝试在航班上添加乘客，并将结果保存到一个变量中，称为成功。例如，我可以说如果成功，那么让我们打印出成功将这个人添加到航班上，但否则打印出没有。
- en: '![](img/84f93f161fd860c9cc985c69f11fc8e7_17.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84f93f161fd860c9cc985c69f11fc8e7_17.png)'
- en: available seats for that person so，what's going on here we have a list of。people
    for people and for each of those，people we're gonna try and add the。passenger
    to the flight calling flight，add passenger calling this method。passing as input
    the person's name and，save the result true or false in this。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 有效的座位给那个人。那么这里发生了什么？我们有一组人，对于每一个人，我们将尝试将乘客添加到航班上，调用航班添加乘客，传入该人的名字，并将结果（真或假）保存到这里。
- en: variable called success if success is，true we print out we've added them。successfully
    otherwise we print out，there are no available seats for that，person。and now we
    can try running this program，I'll run Python classes Piatt and now we。see we've
    added Harry Ron and Hermione，to the flight successfully but the。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 变量称为 success，如果 success 为 true，我们打印出“我们已成功添加他们”。否则，我们打印出“该人员没有可用座位”。现在我们可以尝试运行这个程序，我将运行
    Python 类 Piatt，现在我们看到我们已成功将哈利、罗恩和赫敏添加到航班中。
- en: '![](img/84f93f161fd860c9cc985c69f11fc8e7_19.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84f93f161fd860c9cc985c69f11fc8e7_19.png)'
- en: flight had a capacity of three which，means there are no available seats for。Ginny
    which we get as the error message，on the fourth line and if you're really。trying
    to optimize you might notice that，you don't really need this variable I。could
    just take this entire expression，flight add passenger person and put it。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 航班的容量为三，这意味着对金妮来说没有可用座位，这在第四行显示为错误消息。如果你真的想进行优化，你可能会注意到，你其实不需要这个变量。我可以将整个表达式
    flight add passenger person 拿掉。
- en: in the condition itself I can say try，and add a passenger add passenger will。return
    true or false and if it returns，true that means it was a success and。then I can
    print out that we've added，the person to the flight successfully so。that is a
    brief look at object-oriented，programming this technique within Python。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在条件语句中，我可以尝试添加一个乘客，添加乘客将返回 true 或 false，如果返回 true，这意味着成功。然后我可以打印出“我们已成功将该人员添加到航班中”，这是对
    Python 中面向对象编程的一次简要介绍。
- en: and other programming languages to，represent objects like this particular。flight
    and then to manipulate those，objects using methods like the add。passenger method
    that takes a flight and，adds people to it at least as long as。there is available
    capacity on that，flight so one of the many powerful。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 以及其他编程语言，以表示像这个特定航班的对象，然后使用方法（如添加乘客的方法）来操作这些对象，该方法接收航班并将人员添加到航班中，只要该航班有可用容量，因此这是许多强大的功能之一。
- en: features of Python but will be，definitely taking a look at later in the。term
    and using as we go about building，these web applications now there are a。couple
    of final examples that are Juris，worth taking a look at just to give you。some
    exposure to some of the other，features that are available in python。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的一些特性将会在后期深入探讨，并在我们构建这些网页应用时使用。现在有几个最终示例，值得一看，以便让你接触到 Python 中其他可用的特性。
- en: one thing that will be coming up soon is，the idea of decorators and just as
    we。can take a value in python like a number，and modify the value decorators are
    away。in Python of taking a function and，modifying that function adding some。additional
    behavior to that function so，I'll create a new file called decorators。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 很快就会出现的一个概念是装饰器，就像我们可以在 Python 中获取一个值（比如数字）并修改它一样，装饰器是在 Python 中修改函数的一种方式，为该函数添加一些额外的行为。因此，我将创建一个名为
    decorators 的新文件。
- en: pi just to demonstrate what we can do，with decorators and the idea of a。decorator
    is a decorator is going to be，a function that takes a function as。input and returns
    a modified version of，that function as output so unlike other。programming languages
    where functions，just exist on their own and they can't。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 仅用来演示我们可以用装饰器做什么，装饰器的概念是，装饰器是一个接受函数作为输入并返回该函数的修改版本的函数。因此，与其他编程语言不同，函数独立存在，无法直接。
- en: be passed in as input or output to other，functions in Python a function is just
    a。value like any other you can pass it as，input to another function you can get
    it。as the output of another function and，this is known as a functional。programming
    paradigm where functions are，themselves values so let's create a。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 函数可以作为输入或输出传递给 Python 中的其他函数，函数就像任何其他值一样，可以作为输入传递给另一个函数，也可以作为另一个函数的输出，这被称为函数式编程范式，其中函数本身就是值。因此，让我们创建一个。
- en: function that modifies another function，by announcing，that the function is about
    to run and。that the function is completed running，just to demonstrate so this
    announced。function will take us input a function f，and it's going to return a
    new function。and usually this function wraps up this，function f with some additional
    behavior。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 修改另一个函数的函数，通过声明该函数即将运行，以及该函数完成运行，来进行演示。因此，这个声明函数将接收一个函数 f 作为输入，并返回一个新函数。通常，这个函数会用一些额外的行为包装函数
    f。
- en: and for that reason is often called a，wrapper function so we may call this。wrapper
    to say that alright what is my，wrapper function going to do its first。going to
    print about to run the function，just to announce that we're about to run。the function
    that's what I want my，announced decorator to do then let's。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通常称为包装函数，我们可能称这个。包装器，来说明我的包装函数将要做什么，它将首先打印即将运行函数的信息，以便宣布我们即将运行该函数，这就是我想让我的，宣布装饰器做的。
- en: actually run the function f and then，let's print done with the function so。what
    my announced decorator is doing is，it's taking the function f and it's。creating
    a new function that just，announces via a print statement before。and after the
    function is done running，and then at the end we'll return this。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上运行函数f，然后，打印完成该函数。所以我所做的宣布装饰器是，接收函数f，并创建一个新函数，通过打印语句在函数执行前后进行宣布，最后我们将返回这个。
- en: new function which is the wrapper，function so this right here is what we。might
    call a decorator a function that，takes a function modifies it by adding。some additional
    capabilities to it and，then gives us back some output and so。now here I can define
    a function called，hello that just prints hello world for。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 新函数即包装函数，所以这就是我们，可能称之为装饰器的地方，它是一个接收函数、通过添加一些额外功能来修改它，并最终返回一些输出的函数。现在，我可以定义一个名为hello的函数，它只是打印hello
    world。
- en: example and then to add a decorator I，use the @ symbol I can say at announce。to
    say add the announced decorator to，this function and then I'll just run the。![](img/84f93f161fd860c9cc985c69f11fc8e7_21.png)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个例子，然后添加装饰器我使用@符号，可以说@announce，来添加宣布装饰器到这个函数上，然后我只需运行。![](img/84f93f161fd860c9cc985c69f11fc8e7_21.png)
- en: happens，I'll run Python decorators dot Pi and I，see about to run the function
    then hello。![](img/84f93f161fd860c9cc985c69f11fc8e7_23.png)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 发生的事情是，我将运行Python decorators dot Pi，我看到即将运行这个函数，然后是hello。![](img/84f93f161fd860c9cc985c69f11fc8e7_23.png)
- en: world then done with the function so，again why did that work it's because our。hello
    function that just printed hello，world is wrapped inside of this。announced decorator
    where what the，announced decorator does is it takes our。hello function of input
    and gets us a，new function that first prints an alert。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数完成后，为什么会这样工作呢？是因为我们的。hello函数只是打印了hello，world，被这个。宣布装饰器所包裹，而这个，宣布装饰器所做的就是接收我们的。hello函数作为输入，并返回一个，新的函数，首先打印一个警告。
- en: warning that we're about to run the，function actually runs the function and。then
    prints another message so a bit of，a simple example here but there's a lot。of
    power in decorators for being able to，very quickly take a function and add。capability
    to it you might imagine in a，web application if you only want certain。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 警告我们即将运行的函数实际上会运行这个函数，然后打印另一条消息，这是一个简单的示例，但装饰器在能够快速地对函数添加功能方面有很大的潜力。在一个网页应用中，如果你只想要某些。
- en: functions to be able to run it if a user，is logged in you can imagine writing
    a。decorator that checks to make sure that，a user is logged in and。just using that
    decorator on all of the，functions that you want to make sure。only work when a
    user so happens to be，logged in so decorators are a very。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户已登录，则能够运行它，你可以想象编写一个装饰器，确保用户已登录。然后在你想确保的所有函数上使用该装饰器，这些函数只有在用户恰好已登录时才有效，所以装饰器是一个非常。
- en: powerful tool that web application，frameworks like Django can make use of。just
    to make the web application，development process a little bit easier。as well let's
    take a look at a couple，other techniques that exist within。Python one is how we
    might be able to，more efficiently represent functions so。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 强大的工具，像Django这样的网页应用框架可以利用它。只是为了让网页应用开发过程变得更简单一点。我们再来看一下Python中存在的其他几种，技术，其中一种是我们可能如何，更高效地表示函数。
- en: let's imagine that I now have I'm gonna，call this lambda PI for a reason you'll。see
    in a moment let's imagine that I，have a list of names or people for。example and
    inside of this list of，people each person instead of being just。a string is going
    to be a dictionary，that has both a name like Harry and a，house like Gryffindor。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我现在有一个，我将称之为lambda PI，稍后你会明白原因。假设我有一个名字或人的列表，举个例子，在这个人的列表中，每个人不是一个简单的字符串，而是一个字典，包含一个名字，比如Harry和一个房子，比如Gryffindor。
- en: and let me add another name like Cho and，a house like Ravenclaw and then another。name
    like Draco and a house like，Slytherin，so here we have a list where each of the。elements
    inside of that list is a，dictionary a mapping of keys and values。and that's totally
    okay in Python we，have the ability to nest data structures。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 让我再添加一个名字，比如 Cho 和，一个像 Ravenclaw 的学院，然后再加上一个。名字像 Draco 和一个学院像，Slytherin，所以这里我们有一个列表，其中每个。元素都是一个字典，一个键值对的映射。这在
    Python 中是完全可以的，我们有能力嵌套数据结构。
- en: within one another we can have lists，inside of other lists or lists inside of。dictionaries
    or in this case，dictionaries inside of a list and in。fact this nesting of data
    structures is，one of the reasons why it's very easy in。python to be able to represent，structured
    data like a list of people。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在彼此内部拥有列表，嵌套在其他列表中或字典中的列表，或者在这种情况下，字典在列表中，事实上，这种数据结构的嵌套是，Python 能够表示的原因之一，结构化数据，比如一个人的列表。
- en: where every person has various different，properties what I might like to do
    now。is something like sort all of these，people and then print them all out so
    I。might want to say people dot sort and，then print all the people but if I try。![](img/84f93f161fd860c9cc985c69f11fc8e7_25.png)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人都有各种不同的，属性，现在我可能想做的是像对所有这些，进行排序然后打印出来，所以我。可能想说 people.dot sort，然后打印所有人，但如果我尝试。![](img/84f93f161fd860c9cc985c69f11fc8e7_25.png)
- en: to run this I'll get an exception I get，an exception type error less than not。supported
    between dict and depth which，is sort of weird because I'm not using。any less than
    symbol at all anywhere my，program but in the trace back you'll see。that the line
    of code that is catching，on is people dot sort somehow people dot。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 运行这个我会遇到异常，我遇到，异常类型错误，字典和深度之间不。支持小于，这有点奇怪，因为我根本没有在任何地方使用。小于符号，但在回溯中你会看到。捕捉到的代码行是
    people.dot sort，某种程度上 people.dot。
- en: sort is causing a type error because，it's trying to use less than to compare。![](img/84f93f161fd860c9cc985c69f11fc8e7_27.png)
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 排序导致类型错误，因为，它试图使用小于进行比较。![](img/84f93f161fd860c9cc985c69f11fc8e7_27.png)
- en: to dictionaries and what this appears to，mean is that Python doesn't know how
    to。sort these dictionaries it doesn't know，does Harry belong before or after。Choa
    because it doesn't know how to，compare these two elements and so if I。want to
    do something like this then I，need to tell the sort function how to。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对字典的比较，这似乎意味着 Python 不知道如何。对这些字典进行排序，它不知道哈利是在，Cho 之前还是之后，因为它不知道如何。比较这两个元素，因此如果我。想这样做，我需要告诉排序函数如何。
- en: sort these people and so in order to do，that one way I could do this is by。defining
    a function that tells the sort，function how to do the sorting what to。look at
    when sorting so if I want to，sort by people's name let me define a。function that
    I'll just call f that，takes a person as input and returns that。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 排序这些人，因此为了做到这一点，我可以通过。定义一个函数来告诉排序，函数如何进行排序，排序时看什么，因此如果我想要，按人名排序，让我定义一个。函数，我将其称为
    f，它接受一个人作为输入并返回该。
- en: person's name by looking up the name，field inside of that dictionary and now。I
    can sort people by their name by，saying sort key equals F what this means。is sort
    all the people and the way to，sort them the way you know how to。compare them is
    by running this function，where this function takes a person and。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 通过查找该字典中的名字字段来获取某人的名字，现在我可以通过，使用 sort key 等于 F 来按姓名排序，这意味着。是对所有人进行排序，而排序的方式是通过运行这个函数，函数接受一个人并。
- en: '![](img/84f93f161fd860c9cc985c69f11fc8e7_29.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84f93f161fd860c9cc985c69f11fc8e7_29.png)'
- en: gives us back their name and this will，sort everyone by name now if I run。Python
    lambda PI you'll see that I first，get show then Drako。![](img/84f93f161fd860c9cc985c69f11fc8e7_31.png)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 给我们返回他们的名字，现在如果我运行，Python lambda PI 你会看到我首先，得到的是 show 然后是 Drako。![](img/84f93f161fd860c9cc985c69f11fc8e7_31.png)
- en: then Harry in alphabetical order by name，whereas if instead I had tried to sort。![](img/84f93f161fd860c9cc985c69f11fc8e7_33.png)
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 然后按名字的字母顺序排列哈利，而如果我试图排序。![](img/84f93f161fd860c9cc985c69f11fc8e7_33.png)
- en: people by their house by changing my，function that I'm using to sort and then。rerun
    this now I see that it's first，Harry who's in Gryffindor then Ravenclaw。then Slytherin
    for example so we get the。![](img/84f93f161fd860c9cc985c69f11fc8e7_35.png)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 通过更改我使用的排序函数来按他们的学院对人进行排序，然后。重新运行这个，现在我看到的是首先，哈利在格兰芬多，然后是拉文克劳。接着是斯莱特林，例如，我们得到。![](img/84f93f161fd860c9cc985c69f11fc8e7_35.png)
- en: houses in alphabetical order instead but，the reason I show this is because this。function
    is so simple and is only used，in one place Python actually gives us an。easier
    way to represent a very short，one-line function using something called。a lambda
    expression and this is a way of，including the function just as a single。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 按字母顺序排列的房屋，而我之所以展示这个是因为这个函数非常简单，仅在一个地方使用，Python 实际上提供了一种更简单的方式来表示一个非常短的一行函数，使用一种称为
    lambda 表达式的方式，这是一种将函数包含为单个表达式的方法。
- en: value on a single line I can say instead，of defining a function called F I can。get
    rid of all of this and just say sort，by this key a lambda which is a function。that
    takes a person and returns the，person's name so we say person is the，input ：
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在一行中，我可以说，不必定义一个名为 F 的函数，我可以去掉这些，只需说按这个键排序，一个 lambda 函数，它接受一个人并返回这个人的名字，所以我们说人是输入：
- en: person name as the output this，is a condensed way of saying the same。thing we
    saw a moment ago of defining a，function giving it a name and then。passing in the
    name here this right here，is a complete function that takes a。![](img/84f93f161fd860c9cc985c69f11fc8e7_37.png)
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 输出的名字作为结果，这是一种简化的表达方式，和我们刚刚看到的定义一个函数、赋予它一个名字然后在这里使用这个名字是相同的。这里就是一个完整的函数，它接受一个输入。
- en: person and as input and returns their。![](img/84f93f161fd860c9cc985c69f11fc8e7_39.png)
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以人作为输入并返回他们的名称。
- en: name so python lambda pi that will，actually sort the people by their name。![](img/84f93f161fd860c9cc985c69f11fc8e7_41.png)
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 名称，所以 Python lambda 其实是按名称对人进行排序。
- en: Cho then Draco then Harry whereas if I，have left off this key altogether。![](img/84f93f161fd860c9cc985c69f11fc8e7_43.png)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Cho、Draco 和 Harry，但如果我完全省略了这个键。
- en: and then tried to sort well then we get，this type error because we can't compare。these
    two dictionaries so we've seen a，lot of different exceptions now that are。out
    Python so the very last example，we'll take a look at is an example of。how to deal
    with these exceptions like，what to do when things might go wrong if。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 然后尝试排序时，我们得到这个类型错误，因为我们无法比较这两个字典。现在我们已经看到了许多不同的异常，这些都是 Python 中的异常。最后一个例子是关于如何处理这些异常的示例，例如当事情出错时该怎么做。
- en: we want our program to be able to handle，those possible exceptional cases。situations
    where things might in fact go，wrong so let's try an example I'll。create a new
    file that I'm going to call，exception stop PI and what exceptions。that PI is going
    to do is it's going to，get some input it's going to say let's。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望我们的程序能够处理这些可能的异常情况，情况可能真的出错，所以让我们尝试一个例子，我将创建一个新文件，叫做 exception stop PI，而这个
    PI 将会获取一些输入，告诉我们：
- en: get an integer input called X and let's，get an integer input called Y and then。it
    let's go ahead and print out the，result of X divided by Y so result。equals x divided
    by Y and then let's，print out something like X divided by y。equals result and
    we can literally print，out the values of x and y so this is a。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 获取一个名为 X 的整数输入，再获取一个名为 Y 的整数输入，然后让我们继续打印 X 除以 Y 的结果，所以结果等于 X 除以 Y，然后让我们打印出像
    "X 除以 Y 等于结果" 这样的内容，我们可以字面上打印出 X 和 Y 的值，这就是一个。
- en: simple program that's just performing，some division get a value of X get a。value
    of y divide the two and print out。![](img/84f93f161fd860c9cc985c69f11fc8e7_45.png)
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的程序，仅仅是执行一些除法，获取一个 X 的值，获取一个 Y 的值，将它们相除并打印出结果。
- en: the result we can try running this，running Python exception stop I am if I。type
    in like 5 and then 10 5 divided by，10 is 0。5 exactly where my I might。expect but
    what could go wrong now you，remember from math in division what。could go wrong
    is if I type in 5 and，then 0 and try and do 5 divided by 0。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以尝试运行这个程序，运行 Python exception stop I，如果我输入 5 然后 10，5 除以 10 正好是 0.5，这是我可能期待的结果，但现在可能出现什么问题呢？你还记得数学中的除法吗？可能出错的情况是，如果我输入
    5 然后 0，尝试 5 除以 0。
- en: what's going to happen well when I do，that I get an exception I get a 0。division
    error which is an error that，happens whenever you try to divide by 0。what I'd
    like to happen though in this，case is not for my program to display。kind of a
    messy error and a traceback，like this but to handle the exception。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 发生什么情况呢？当我这样做时，我会得到一个异常，出现一个 0 除法错误，这是在尝试除以 0 时发生的错误。不过，我希望发生的情况是，不是让我的程序显示这样的混乱错误和回溯，而是处理这个异常。
- en: gracefully so to speak to be able to，catch when the user does something wrong。![](img/84f93f161fd860c9cc985c69f11fc8e7_47.png)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 优雅地处理它，能够捕获用户做错事的情况。
- en: and report a nicer looking message，instead and so how might I go about。doing
    that well one thing I can do here，is instead of just saying result equals。x over
    Y I can say try to do this try to，set result equal to X divided by Y and。then
    say except if a 0 division error，happens then let's do something else，let's print。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 并报告一个更好看的消息。那么，我该如何进行呢？我能做的一件事是，不仅仅说结果等于 X 除以 Y，而是尝试这样做，尝试将结果设为 X 除以 Y，然后说，如果发生
    0 除法错误，那我们就做点别的，打印出来。
- en: I cannot divide by zero and then exit，the program how do you exit the program。it
    turns out there's a module in Python，called sis and if I import the Syst。module
    I can say sis dot exit one to，mean exit the program with a status code。of one
    where a status code of one，generally means something went wrong in。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我无法除以零，然后退出程序。如何退出程序呢？结果发现，Python 中有一个模块，叫做 sis，如果我导入 Syst 模块，我可以说 sis.dot exit
    1，意味着以状态代码退出程序。状态代码 1 通常意味着出了一些问题。
- en: this program so now I'm trying to divide，X divided by Y except I have an。exception
    handler this is a try except，expression I'm saying try to do this。except if this
    exception happens rather，than have the program crash just print。out this error
    message can't divide by。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序，现在我试图将 X 除以 Y，除了我有一个异常处理器。这是一个 try except 表达式，我在说，尝试这样做。除非发生这个异常，否则就不要让程序崩溃，只需打印出这个错误消息，无法除以。
- en: '![](img/84f93f161fd860c9cc985c69f11fc8e7_49.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/84f93f161fd860c9cc985c69f11fc8e7_49.png)'
- en: zero and then exit the program so now，let's try it，python exception stop PI
    again 5 and 10。works totally normally gets me a value，of 0。5 and but now if I
    try 5 and 0。press return I get an error cannot，divide by 0 no long exception that's。gonna
    look complicated to the user it's，no longer messy I've been able to handle。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 零，然后退出程序。现在，让我们试试，python 异常停止 PI，再试 5 和 10。完全正常，得到了 0.5 的值，但现在如果我尝试 5 和 0。按回车，我得到了一个错误，无法除以
    0。这个长异常对用户来说看起来复杂，不再混乱，我已经能够处理。
- en: the exception gracefully now one other，exception that might come up is what
    if。instead of X is 5 I type in a word like，hello something that's not a number
    now。I get another type of exception a value，error which is happening when I try
    and。convert something to an int because，integer，you can't take text that is not
    a number。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 优雅地处理异常。现在另一个可能出现的异常是，如果我输入的不是数字的单词，比如 hello，而是 X 为 5，现在我得到了另一种类型的异常，一个值错误，这发生在我尝试将某个东西转换为整数时，因为整数，你无法将不是数字的文本。
- en: and turn it into an integer so instead。![](img/84f93f161fd860c9cc985c69f11fc8e7_51.png)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 并将其转换为整数，因此，![](img/84f93f161fd860c9cc985c69f11fc8e7_51.png)
- en: I'm getting this value error here how，can I deal with that well I can deal。with
    it in much the same way when I'm，getting this input X&Y I can say rather。than
    just get the input just try to get。![](img/84f93f161fd860c9cc985c69f11fc8e7_53.png)
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里遇到了这个值错误，我该如何处理呢？我可以用与我获取输入 X 和 Y 时几乎相同的方式来处理。我可以说，不仅仅是获取输入，而是尝试获取。![](img/84f93f161fd860c9cc985c69f11fc8e7_53.png)
- en: the input except if a value error，happens which is the error that we got a。![](img/84f93f161fd860c9cc985c69f11fc8e7_55.png)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 输入，除非发生值错误，这就是我们得到的错误。![](img/84f93f161fd860c9cc985c69f11fc8e7_55.png)
- en: moment ago this value error then print，error invalid input and go ahead and
    sis。not exit 1 so now I've been able to。![](img/84f93f161fd860c9cc985c69f11fc8e7_57.png)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 刚才的值错误，然后打印错误，无效输入，并继续执行，而不是退出 1。所以现在我已经能够。![](img/84f93f161fd860c9cc985c69f11fc8e7_57.png)
- en: handle that error as well I can say，Python exception stop I am I can say。hello
    and I just get error invalid input，I can divide by zero I get error cannot。divide
    by zero but if I do type a valid，x and a y value then I get the result of。![](img/84f93f161fd860c9cc985c69f11fc8e7_59.png)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 处理这个错误，我可以说，Python 异常停止，我可以说。你好，我只是得到了错误，无效输入，我无法除以零，得到了错误，无法除以零。但是如果我输入一个有效的
    X 和 Y 值，我就得到了。![](img/84f93f161fd860c9cc985c69f11fc8e7_59.png)
- en: dividing one number by the other so，exception handling is often a helpful。tool
    for if you expect that some lines，of code you might be running might run。into
    some sort of problem，be they a value error or zero division。error or some other
    error altogether to，be able to handle those errors。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 将一个数字除以另一个数字，因此，异常处理通常是一个有用的工具，如果你预计某些代码行可能会遇到某种问题，无论是值错误、零除法错误还是其他错误，都能够处理这些错误。
- en: gracefully and that's probably what you，want if you're going about building
    a。web application using Python is the，ability to say that if something goes。wrong
    we want to handle the error nicely，display a nice error message to the user。telling
    them what was wrong instead of，having the program entirely crash so。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 优雅地处理错误可能正是你所想要的，如果你打算使用Python构建一个Web应用程序的话，也就是说如果发生错误，我们希望优雅地处理它，向用户显示一个友好的错误信息，告诉他们出错的原因，而不是让程序完全崩溃。
- en: those are some of the key features now，this Python programming language this。language
    that gives us the ability to，define these functions and loops and。conditions and
    very convenient ways to，create classes where we can begin to。build objects that
    are able to perform，various different types of tasks and。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是Python编程语言的一些关键特性，这种语言让我们能够定义函数、循环和条件，并以非常方便的方式创建类，以便我们开始构建能够执行各种任务的对象。
- en: next time using Python we'll be able to，design web applications such that users。are
    able to make requests to our web，applications and get some sort of。response back
    so we will see you next。![](img/84f93f161fd860c9cc985c69f11fc8e7_61.png)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 下次使用Python时，我们将能够设计Web应用程序，使得用户能够向我们的Web应用程序发出请求并获得某种响应，所以我们下次见！
