- en: 哈佛 CS50-WEB ｜ 基于Python ／ JavaScript的Web编程(2020·完整版) - P21：L7- 测试与前端CI／CD 1 (测试与断言，单测)
    - ShowMeAI - BV1gL411x7NY
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈佛 CS50-WEB ｜ 基于Python ／ JavaScript的Web编程(2020·完整版) - P21：L7- 测试与前端CI／CD 1 (测试与断言，单测)
    - ShowMeAI - BV1gL411x7NY
- en: '![](img/e83f06e692087eac7272eb66f5d44ede_0.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e83f06e692087eac7272eb66f5d44ede_0.png)'
- en: '[Music]。![](img/e83f06e692087eac7272eb66f5d44ede_2.png)'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '[音乐]。![](img/e83f06e692087eac7272eb66f5d44ede_2.png)'
- en: okay welcome back everyone to web，programming with Python and JavaScript。and
    now at this point we've seen a，number of different techniques and tools。that we
    can use in order to design web，applications HTML and CSS to describe。how it is
    that our pages look a，programming language like Python using a。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，欢迎大家回来参加Python和JavaScript的网页编程，现在我们已经看到了一些不同的技术和工具，可以用来设计网页应用程序，HTML和CSS用于描述我们的页面外观，像Python这样的编程语言则用于实际编程。
- en: framework like Django in order to listen，for requests process them and provide。some
    sort of response and then more，recently we took a look at JavaScript。another programming
    language that we can，use in particular on the client-side。running inside of the
    users web browser，in order to make our webpages even more。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 像Django这样的框架可以监听请求，处理它们并提供某种响应，最近我们还查看了JavaScript，另一种可以特别用于客户端的编程语言，在用户的网页浏览器中运行，以使我们的网页更加生动。
- en: interactive and user friendly now what，we'll transition - today is taking a。look
    at some of software's best，practices some tools and techniques that。developers
    actually use when they're，working on web applications especially。as those web
    applications start to grow，larger in particular we'll start by。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 交互性和用户友好性，现在我们将过渡到今天讨论软件最佳实践，一些开发人员在处理网页应用程序时实际使用的工具和技术，尤其是当这些网页应用程序开始变得越来越复杂时，我们将从中开始。
- en: discussing testing this idea of，verifying that our code is correct and。then
    transition to see ICD short for，continuous integration and continuous。delivery
    some other best practices that，are used in making sure that the work。that software
    developers are working on，can be tested and deployed readily and。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 讨论测试，这种验证我们代码是否正确的想法，然后过渡到ICD，即持续集成和持续交付，以及一些其他最佳实践，确保软件开发人员的工作可以方便地进行测试和部署。
- en: very quickly so we'll begin the，conversation with testing and testing is。really
    about this idea of verifying and，making sure that the code that software。developers
    are writing are in fact，correct to make sure that the functions。work the way they're
    supposed to that，the webpages behave the way that they。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 非常迅速，因此我们将以测试开始讨论，测试实际上是关于验证和确保软件开发人员编写的代码确实是正确的，以确保函数按预期工作，网页按预期表现。
- en: are supposed to and ideally we'd like，some way to be able to efficiently and。effectively
    test our code over time and，as our programs grow more complicated to。allow our
    tests to make sure that our，program is behaving the way that we。wanted to so we'll
    go ahead and start，simple we consider the basic way that we。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，我们希望有一种高效有效地测试代码的方法，随着程序变得越来越复杂，确保我们的程序按我们想要的方式运行，因此我们会从简单开始，考虑我们正在进行的基本方法。
- en: might take a function for example，written in Python and test and verify to。make
    sure that it works the way we would，expect it to and to do so we can start。with
    a command and Python known as，assert and what assert does in Python is。it asserts
    or just states that something，should be true and if that something is。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能会以一个用Python编写的函数为例进行测试和验证，以确保其按预期工作。为此，我们可以从一个在Python中称为assert的命令开始，assert的作用是断言或声明某事应为真，如果某事不是。
- en: not true then the assert is going to，throw an exception some sort of error so。that
    whoever is running the program or，running the command knows that something。went
    wrong and this can be a very basic，way that we can leverage pythons。abilities
    to test a function and verify，that that function behaves the way we。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不正确，那么断言将抛出某种错误异常，以便运行程序或命令的人知道发生了什么问题。这是利用Python能力来测试函数并验证该函数行为的一种非常基本的方法。
- en: would want it to so let's go ahead and，try a simple example of writing a Python。function
    and then trying to test to make，sure that that fun，works the way we would want
    it to so。we'll go ahead and create a new file，I'll call it a search PI and let
    me。define a new Python function for example，that is going to take an integer and。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望这样做，所以让我们先尝试一个简单的例子，编写一个Python函数，然后进行测试，以确保这个函数按我们希望的方式工作。我们将创建一个新文件，我将其命名为search
    PI，并让我定义一个新的Python函数，例如，它将接受一个整数。
- en: squ*re it just want to take a number and，return it squ*re so I'm going to define。a
    function called squ*re that takes as，input a number like X and I want to。return
    x times X it's a fairly，straightforward function but I would。like to know verify
    that the function，works the way I would expect it to now。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 平方函数，我只想接受一个数字并返回它的平方，所以我将定义一个叫做平方的函数，输入一个数字像X，我想返回x乘以X，这是一个相当简单的函数，但我想验证这个函数是否按我预期的方式工作。
- en: there are a number of ways that you，could do this one would be just like。![](img/e83f06e692087eac7272eb66f5d44ede_4.png)
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 有很多方法可以做到这一点，一种方式就是。![](img/e83f06e692087eac7272eb66f5d44ede_4.png)
- en: let's print out what the squ*re of 10 is，for example and just see what that's。![](img/e83f06e692087eac7272eb66f5d44ede_6.png)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们打印出10的平方，例如，看看结果是什么。![](img/e83f06e692087eac7272eb66f5d44ede_6.png)
- en: equal to and then you could run a，program something like Python assert PI。and
    just say all right the answer is 100，and I could say to myself ok that's what。I
    would expect it to be but I now have，to do the mental math of squaring the。number
    10 making sure that the answer，comes out to be the value that I expect。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 等于，那么你可以运行一个程序，类似于Python assert PI，然后直接说，好的，答案是100，我可以对自己说，好吧，这就是我所期待的，但我现在必须进行心理计算，确保10的平方的答案是我预期的值。
- en: '![](img/e83f06e692087eac7272eb66f5d44ede_8.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e83f06e692087eac7272eb66f5d44ede_8.png)'
- en: it would be nice if I could automate，this process well one thing I could do。is
    print out does the squ*re of 10 equal，100 I know that I want squ*re of 10 to。![](img/e83f06e692087eac7272eb66f5d44ede_10.png)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我能自动化这个过程就太好了，我可以做的事情之一就是打印出10的平方是否等于100。我知道我想要10的平方。![](img/e83f06e692087eac7272eb66f5d44ede_10.png)
- en: equal 100 so I could just print out that，value print out does squ*re of 10 equal。the
    number 100 I'll go ahead and run the，program again and this time what I get。is
    true for example because those two。![](img/e83f06e692087eac7272eb66f5d44ede_12.png)
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 等于100，所以我可以直接打印出这个值，打印出10的平方是否等于100。我将继续运行程序，这次我得到的结果是正确的，例如，因为这两个。![](img/e83f06e692087eac7272eb66f5d44ede_12.png)
- en: things are equal to each other and if on，the other hand I had tried to check
    for。![](img/e83f06e692087eac7272eb66f5d44ede_14.png)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 事物彼此相等，如果我另一方面尝试检查。![](img/e83f06e692087eac7272eb66f5d44ede_14.png)
- en: something that wasn't true like does，squ*re of 10 equal 101 you run the。program
    and okay now it's going to be。![](img/e83f06e692087eac7272eb66f5d44ede_16.png)
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 如果说10的平方等于101那是不正确的，你运行程序，好的，现在它将会是。![](img/e83f06e692087eac7272eb66f5d44ede_16.png)
- en: false so this is nothing new nothing we，haven't seen before but now what I can。do
    is instead of this I can just say let，me assert that squ*re of 10 is equal to。100
    here I'm just asserting that this。![](img/e83f06e692087eac7272eb66f5d44ede_18.png)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是什么新鲜事，也不是我们没见过的，但现在我可以做的是，替代这个，我可以直接说，让我断言10的平方等于100。这里我只是断言这一点。![](img/e83f06e692087eac7272eb66f5d44ede_18.png)
- en: expression that the squ*re of 10 is，equal to 100 is going to be true and now。I
    can run the program and what you'll，notice is nothing happens no output。nothing
    at all because when in a certain，statement in runs and the expression。that it's
    checking turns out to be true，that the squ*re of 10 does equal 100 it。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 10的平方等于100的表达式将是正确的，现在我可以运行程序，你会注意到没有任何反应，没有输出，完全没有，因为当某个语句运行时，它检查的表达式如果是正确的，10的平方确实等于100。
- en: effectively ignores that statement，altogether just continues on to the next。thing
    no output no side-effect of any，sort and this is helpful because it just。means
    that if I want to assert that，something is true I can assert it and。then just
    continue writing my code and，it's as if I hadn't written that a。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 它有效地忽略了这个语句，完全继续到下一个内容，没有输出，没有任何副作用，这很有帮助，因为这意味着如果我想要断言某件事情是正确的，我可以断言它，然后继续写我的代码，就好像我没有写过那一行。
- en: certain statement at all so long as the，thing that I am asserting is actually，true。but
    if there were a bug in my code for，example some sort of mistake where。instead
    of returning x times X imagined，that I accidentally said return X plus X。to calculate
    the squ*re and said，something that would be a bug in this。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 只要我断言的事情实际上是，真的。但如果我的代码中有一个错误，例如某种错误，假设我意外地说返回X加X，来计算平方，这就是一个错误。
- en: case well then when I try to run Python，assert PI what I'm going to get is an。![](img/e83f06e692087eac7272eb66f5d44ede_20.png)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 当我尝试运行Python时，assert PI，我得到的是一个。![](img/e83f06e692087eac7272eb66f5d44ede_20.png)
- en: exception and the type of exception that，I get is something known as an assertion。error
    and I can see that here there's an，assertion error and then I see the。reason why
    the assertion error happened，and the assertion error happened on line。4 which
    is this line here where I said I，would like to assert that the squ*re of。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 异常，而我得到的异常类型是一个叫做断言错误的东西，我在这里看到，有一个断言错误，然后我看到，断言错误发生的原因，发生在第4行，就是我说的，我想断言平方。
- en: 10 is equal to 100 so one way we could，imagine testing our code is just by。including
    a number of these different，assert statements if I want to verify。that my code
    is correct I can write，various different assert statements and。for a function
    that's fairly simple like，this squ*re function probably not too。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 10等于100，所以我们可以想象测试我们的代码，就是包括许多不同的断言语句，如果我想验证我的代码是正确的，我可以写，几种不同的断言语句，对于像这个平方函数这样相当简单的函数，可能并不太复杂。
- en: many tests that I would need to write，but you can imagine for more complex。functions
    that have multiple different，conditional branches being able to。assert that no
    matter which conditional，branch the program chooses to follow。that the code will
    actually be correct，can be a valuable thing to be able to。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我需要写很多测试，但你可以想象，对于更复杂的函数，具有多个不同的条件分支，能够断言无论程序选择哪个条件分支，代码实际上都是正确的，这将是非常有价值的。
- en: say and this can be helpful to when in，working on a larger project you want
    to。deal with the problem of like bugs that，might appear inside of a project and。this
    gets at the idea of test-driven，development developing while keeping。this notion
    of testing in mind and one，of the best practices would be if ever。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，这在处理较大项目时可能会很有帮助，你想解决项目中可能出现的错误。这涉及到测试驱动开发的理念，在开发时保持测试的概念，其中一项最佳实践是，如果出现问题。
- en: you're working on a program of your own，and you encounter some bug in the。program
    you'll first want to fix the bug，but then you'll want to write a test。that verifies
    that the new behavior is，working as expected and once you've。written these tests
    these tests can，start to grow over time and as you。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你正在做自己的程序，遇到了一些错误。在程序中，你首先想修复这个错误，之后你会想写一个测试，来验证新行为是否按预期工作，一旦你写完这些测试，这些测试可以，随着时间的推移而增长。
- en: continue working on your project you can，always run those existing set of tests。to
    make sure that you nothing no new，changes that you make to the program。down the
    line no future if features that，you add or changes you might make are。going to
    break anything that was there，before and this is especially valuable。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当你继续进行项目时，你可以，始终运行这些现有的测试集，确保你所做的任何新更改，不会破坏之前的任何内容，特别是在你添加的新特性或可能做的更改中，这一点尤其宝贵。
- en: as programs start to get more complex，and testing everything by hand would。start
    to become a very tedious process，to be able to just automate the process。of just
    run a whole bunch of tests on，all the things that I know that I would。like the
    program to do and making sure，helpful，so assert then is one basic way of just。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 随着程序变得越来越复杂，手动测试一切将变得非常繁琐，因此能够自动化这个过程，运行一大堆我希望程序执行的测试，并确保，这很有帮助，因此断言是一种基本的方法。
- en: saying that I would like for this，true，go ahead and throw an exception and。using
    Python we know we also have，to catch those exceptions in order to。make sure that
    we're able to handle，those appropriately so we could display。a nice error message
    for example if we，wanted to do so but now let's go ahead。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 说我想这样做，确实，可以继续抛出一个异常。而使用Python，我们知道我们也必须，捕获这些异常以确保我们能够，适当地处理它们，这样我们就可以显示，漂亮的错误信息，例如如果我们，想这样做，但现在让我们继续。
- en: and try and write a more complex，function something more complex than。just taking
    a number and squaring it，somewhere where there's more room for。various different
    cases that I might，want to test and more room where I the。programmer might make
    a mistake for，example so let's imagine writing a new。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试写一个更复杂的函数，比仅仅对一个数字进行平方更复杂，这里有更多不同的情况我可能想要测试，还有更多的空间让我作为程序员可能出错。例如，让我们设想编写一个新的。
- en: file but I'm gonna call prime PI we're，here I'll go ahead and say that I would。like
    prime dot pi to implement a，function called is prime and what the is。prime function
    should do is check to see，if a number is prime or not the prime。number only has
    factors of 1 and itself，and I would like to write a function。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 文件但我打算称之为**prime PI**，在这里我会说我希望**prime.dot.pi**实现一个名为**is prime**的函数。这个**is
    prime**函数应该做的是检查一个数字是否为素数，素数只有1和它本身的因子，我想写一个函数。
- en: that verifies that fact and so how might，I go about doing that well if n is
    less。than 2 then it is definitely not prime，because we say 0 and 1 are not going
    to。be Prime and we're only deal with，numbers that are 0 or greater and we'll。deal
    with that for now but let's start，then with other numbers numbers that are。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 验证这一事实。那么我该如何着手呢？如果n小于2，那么它肯定不是素数，因为我们认为0和1不是素数，我们只处理0或更大的数字。现在先处理这些，但让我们从其他数字开始，能被100整除的数字。
- en: 2 or greater well what do I want to do i，we really want to check each of the。possible
    factors like if I want to check，whether or not a hundred is prime or not。that
    I want to loop over all the，possible numbers that could be factors。of 100 like
    2 3 4 5 6 and when I get to，a number like 2 or a number like 5 that。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 2或更大的数字。那么我想做什么呢？我真的想检查每一个可能的因子，比如如果我想检查100是否为素数，我想循环遍历所有可能的因子，如2、3、4、5、6，当我到达一个像2或5的数字时。
- en: do go into 100 cleanly well then I'll，know that the number is not prime so I。could
    say for I in range from 2 all the，way up through n for example let me go。ahead
    and say if n mod I equals 0 then，return false so what am I saying here。I'm saying
    go ahead and start it to go，up through but not including n so for an。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我就知道这个数字不是素数，因此我可以说对于范围从2到n的每个i，举个例子，让我说如果n模i等于0，那么返回false。那么我在这里说的是什么？我在说继续向上遍历，但不包括n。
- en: if I'm checking to see if 10 is prime，for example I'm going to check for is
    2。3 4 5 6 7 8 9 and for each of those，numbers check if n my input to this。function
    mod I the factor that I would，like to check is equal to 0 this mod。operator this
    percent if you don't，recall gives us the remainder when you。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我在检查10是否为素数，我将检查2、3、4、5、6、7、8、9，对于这些数字中的每一个，检查n（我传入这个函数的输入）模i，想要检查的因子是否等于0。这个模运算符（%）如果你不记得了，给我们的是当你将一个数字除以另一个数字时的余数。
- en: divide one number by another and so if n，mod I equals 0 that means the remainder，when
    you divide n。by I equals zero meaning I goes in to，end cleanly with no remainder
    and that。means that it's not prime because it，does have a factor whatever I is
    going。to be that factor and if I get to the，end of this for loop then I can go
    ahead。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果n模i等于0，那意味着当你将n除以i时余数为零，意味着i整除n，没有余数。这意味着它不是素数，因为它确实有一个因子，无论i是什么因子。如果我到达这个for循环的末尾，那么我可以继续。
- en: and just say return true if we weren't，able to find a factor for the number。other
    than 1 and the number itself well，then we can go ahead and say that true。this
    number is going to be prime and so，this for example could be a function。that checks
    to see if a number is prime，but if I'm trying to optimize I'm trying。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 并且仅仅在找不到除了1和这个数字本身的因子时返回true。那么我们可以说这个数字将是素数，因此这个例如可以是一个检查数字是否为素数的函数，但如果我试图优化，我正试图。
- en: to make my function more efficient I，might realize that you really don't need。to
    check every number from 2 all the way，up to the number n itself I could really。just
    check up to like the squ*re root of，that number for example that for a。number
    like 25 I want to check like 2 3，4 5 because 5 squ*red is going to be 25。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使我的函数更高效，我可能意识到你真的不需要检查从2到数字n本身的每一个数字，我实际上可以只检查到该数字的平方根。例如，对于25，我想检查2、3、4、5，因为5的平方就是25。
- en: but after 5 I don't need to check any，more numbers beyond that that after you。get
    to a number after a number the，squ*re root of that number is multiplied。by itself
    there's never going to be a，case where a number bigger than that。could be a factor
    that I won't have，already known about so just thinking。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 但是在5之后，我不需要检查任何更大的数字，超过某个数字后，这个数字的**平方根**乘以自身，永远不会有一个比这个更大的数字可能是一个因子，而我不会已经知道它，所以我只是想。
- en: about things a little bit mathematically，we might be able to make some sort
    of。optimizations we're instead of going，from 2 all the way up through n I might。go
    up to the squ*re root of N and I'll，*****，*****，*****，the squ*re root doesn't
    already happen。to be an integer so I think this works，I've at least talked myself
    into。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 从数学角度稍微考虑一下，我们可能能够进行一些优化，而不是从2一直到n，我可以只到N的**平方根**，如果**平方根**恰好不是一个整数，我想这样是有效的，我至少让自己相信了这一点。
- en: thinking that this is a function that，might be able to check if a number is。prime
    so what could I do if I wanted to。![](img/e83f06e692087eac7272eb66f5d44ede_22.png)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 思考这是一种可能检查数字是否为**质数**的函数，那么如果我想要做什么呢？![](img/e83f06e692087eac7272eb66f5d44ede_22.png)
- en: verify this well I could write some，assert statements another thing I could。do
    is just use the Python interpreter I，could say all right let me go ahead and。type
    Python and I'm in the Python，interpreter and I can say from prime go。ahead and
    import is prime prime is the，name of that file is prime is the。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 验证这一点，我可以写一些**assert**语句，另一件我可以做的事情是直接使用**Python**解释器，我可以说，好的，让我输入**Python**，我在**Python**解释器中，可以说从**prime**导入**is
    prime**，**prime**是那个文件的名称，**is prime**是我想测试的文件中的函数。
- en: function in that file that I would like，to test and let's just try all right。like
    is prime 5 that's a prime number，hopefully it'll say true that it's prime。all
    right it does let's try is prime 10，see if that works，all right is prime Tenace
    false because。10 is not prime that's good that seems，to be working as well let's
    try like is。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 那我们就试试吧。像是**is prime 5**，这是一个质数，希望它会说它是**true**，好的，它确实这样说了，我们试试**is prime 10**，看看这是否有效，好的，**is
    prime 10**是**false**因为10不是质数，这很好，这似乎也在正常工作，让我们试试。
- en: prime 99 that's not prime because like 3，is a multiple，that for example all
    right false so。that's good this seems to be working and，I could in the interpreter
    test this。function to make sure that it works the。![](img/e83f06e692087eac7272eb66f5d44ede_24.png)
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**prime 99**，这不是质数，因为例如3是它的一个倍数，好的，**false**，这很好，这似乎在正常工作，我可以在解释器中测试这个函数，以确保它有效。![](img/e83f06e692087eac7272eb66f5d44ede_24.png)'
- en: way that I would want it to work but，let's now see some other ways that I。might
    go about testing it well one way，is that I could write a file like tests。zero
    pi and went s zero dot pi is going，to do instead of using assert I'm just。going
    to do our boolean checks like we，were doing before I'm going to import。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我希望它工作的方式，但现在让我们看看其他一些我可能用来测试它的方法，嗯，有一种方法是我可以写一个文件，比如**tests zero pi**，而**zero
    dot pi**将做的事情是，不再使用**assert**，而是像我们之前那样做布尔检查，我将导入。
- en: the is prime function and I've defined a，new function called test prime which
    is。going to serve the role of testing to，make sure that when you squ*re some。number
    or when you check to see if some，number n is prime that you get some。expected
    value where that expected value，is either true for it is prime or false。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '**is prime**函数，我定义了一个新的函数叫**test prime**，这个函数将用于测试，以确保当你**平方**某个数字或检查某个数字n是否为质数时，你得到的期望值是**true**或**false**。'
- en: for it's not prime what then is this，function doing well the function is。checking
    we're calling the is prime，function on this number n and seeing。whether or not
    it is equal to the，expected value that we get where we。expect it to be either
    true or false and，if we run is prime on N and it is not。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 如果它不是质数，那么这个函数在做什么呢？这个函数正在检查我们调用**is prime**函数在这个数字n上，并查看它是否等于我们期望的值，期望的值要么是**true**，要么是**false**，如果我们在N上运行**is
    prime**，而它不是。
- en: equal to what we expect well then we，print out ok there's an error we。expected
    some value true or false but it。![](img/e83f06e692087eac7272eb66f5d44ede_26.png)
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 是否等于我们期望的值，那么我们打印出来，好的，这里有一个错误，我们期望的某个值是**true**或**false**但它。![](img/e83f06e692087eac7272eb66f5d44ede_26.png)
- en: turned out not to be the case and so now，that I had this test prime function
    well。I can say alright let me go back into，the Python interpreter from tests 0。import
    test Prime and now I can say all，right let me test Prime make sure that 5。is prime
    so I'm passing in my first，input the number n the number I would。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 结果并不是这样，所以现在我有了这个测试素数函数，我可以说，好的，让我回到Python解释器，从test0导入testPrime，现在我可以说，好的，让我测试素数，确保5是素数，所以我传入我的第一个输入，数字n。
- en: like to check I want to check if 5 is，prime and the second input I provide is。what
    I expect it to be either true or，false and here nothing happens which is。a good
    thing if there were an error it，would have printed something out and the。fact
    that I see nothing printed out，means that everything was ok if I test。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我想检查，我想检查5是否是素数，而我提供的第二个输入是我期望的结果，要么是真，要么是假，这里什么也没有发生，这是件好事，如果有错误，它会打印出一些东西，而我看到什么都没有打印，意味着一切都很好。如果我测试。
- en: Prime now and say something like alright，make sure 10 is not prime make sure
    the。10 when you pass it into is prime is，going to give us false again nothing。happens
    seems to be working just fine，let me now try I can try more examples。maybe I try
    test prime 25 I want to make，sure that 25 is not prime 25 is not a。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是素数，像是确保10不是素数，确保当你把10传入是素数时，它将给我们假，再次没有任何事情发生，似乎工作得很好，让我现在尝试更多的例子。也许我试试测试素数25，我想确保25不是素数，25不是一个。
- en: prime number all right we get some sort，of error there's an error on is prime
    25。where I expected the output to be false，but for some reason it looks like is，prime。something
    other than false have probably，returned true and some might indicate。some sort
    of bug in my program that，somehow I don't think that 25 should be。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 素数没问题，我们得到了某种错误，在是素数25上有一个错误，我原本预期输出为假，但由于某种原因，它看起来像是素数。除了假以外的某些东西可能返回了真，并且可能指示我的程序中某种错误，我不认为25应该是素数。
- en: a prime number but my program thinks，that 25 is a prime number and that error。can
    be a clue to me as to how to do this，but ultimately especially as programs。start
    to grow longer especially as I，start to add more and more functions。testing each
    of those functions by hand，is going to start to get tedious so one。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一个素数，但我的程序认为25是一个素数，这个错误可以给我一个线索，告诉我该怎么做，但最终，尤其是当程序开始变得更长时，尤其是我开始添加越来越多的功能，手动测试每一个功能将开始变得繁琐。
- en: '![](img/e83f06e692087eac7272eb66f5d44ede_28.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e83f06e692087eac7272eb66f5d44ede_28.png)'
- en: thing I could do is like write a script，to be able to run all these tests for
    me。automatically and so here what I have a，test zero dot s H dot s H being like
    a。![](img/e83f06e692087eac7272eb66f5d44ede_30.png)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以做的事情是写一个脚本，让我能够自动运行所有这些测试，所以这里我有一个test0.sh文件。![](img/e83f06e692087eac7272eb66f5d44ede_30.png)
- en: shell script some script that I can just，run inside my terminal and what this
    is。doing is it's running Python 3 for，python version 3 - C which means I'm。just
    going to give it a command and it，is going to run that command and so I。can just
    run these and each of these，lines does what from test 0 it imports。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: shell脚本，一个我可以在终端中运行的脚本，这样做是运行Python 3，对于python版本3 - C，这意味着我将给它一个命令，它将运行该命令，所以我可以运行这些，每一行都执行什么，从test0中导入。
- en: my test prime function that function，that is going to test to make sure that。the
    prime function produces the output，that I would expect it to and each time。I'm
    testing a different number making，sure that one is not prime making sure。that
    2 is prime eight is not prime so on，and so forth and I can just write a。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 我的测试素数函数，这个函数将测试以确保素数函数生成我预期的输出，每次我都在测试一个不同的数字，确保1不是素数，确保2是素数，8不是素数，依此类推，我可以这样写一个。
- en: whole bunch of these tests and then，rather than have to run each test one at。a
    time what I can do is I can just run，tests 0s age I can just say that I would。like
    to run dot slash test 0 sh and all，right I see that I get two errors I get。an
    error on is prime eight where I，expected it to not be prime but for some。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这一系列测试，然后，与其一个一个地运行每个测试，我可以直接运行测试0，我可以说我想运行`./test0.sh`，好吧，我看到我有两个错误，我在是素数8上得到一个错误，我原本预期它不是素数，但由于某种原因。
- en: reason it seems to be prime and then，again here exception on is prime 25 or
    I。expected it to not be prime but for some，reason my program thinks that it is。prime
    so a very helpful way for me to。![](img/e83f06e692087eac7272eb66f5d44ede_32.png)
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 理由是它似乎是素数，然后，关于是素数25的例外，我原本预期它不是素数，但由于某种原因，我的程序认为它是素数。真是对我很有帮助的一种方式。![](img/e83f06e692087eac7272eb66f5d44ede_32.png)
- en: know immediately that there's some sort，of error that is going on here。but ultimately
    rather than have me have，to write all this framework for how to。go about testing
    my code on my own there，exists libraries that can help us with。this and one of
    the most popular in，Python is a library known as unit test。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 立即知道这里发生了一些错误。但最终，除了让我自己编写所有这些框架来测试我的代码外，还有库可以帮助我们，其中一个在Python中最流行的库称为单元测试。
- en: and what unit test is a library designed，to do is it is going to allow us to
    very。quickly write tests that are able to，check whether something is equal to。something
    else and then unit test is，built in with an automated test runner。that will run
    all of the tests for me，and verify the output and unit test gets。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 而单元测试是一个旨在快速编写能够检查某物是否等于其他东西的测试的库，并且单元测试内置了一个自动测试运行器，可以为我运行所有测试，并验证输出，单元测试得到了。
- en: built in to a lot of other libraries，be able to，apply this sort of idea to our
    Django。applications as well but let's now，translate these tests that we have。written
    ourselves just by writing a，function that like test whether the。prime number is
    what we expect it to be，and now translate it to using this。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 许多其他库中内置了，可以将这种想法应用于我们的Django应用程序，但现在让我们翻译一下我们自己编写的这些测试，只需编写一个函数来测试素数是否如我们所期望的那样，现在将其翻译为使用这个。
- en: Python unit test library instead and so，just to get a sense for what this looks。like
    I'll now go ahead and open up tests，one dot pi we're here first thing i'm。doing
    is i'm importing unit tests which，we get for free with python I'm also。importing
    the function that I would like，to test and now I'm defining a class。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Python单元测试库，所以，为了了解这是什么样的，我现在将打开tests one dot pi，第一件事是我导入单元测试，这是我们在Python中免费获得的，我还导入了我想要测试的函数，现在我定义一个类。
- en: which will contain all of my tests this，is a class that inherits from or derives。from
    unit test test case which means，that this is going to be a class that is。going
    to define a whole bunch of，functions and each of which is something。that I would
    like to test and so for，example in this very first test this is。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将包含我所有的测试，这是一个继承或派生自单元测试测试用例的类，这意味着这是一个定义一大堆函数的类，每个函数都是我想要测试的。因此，例如在这个非常第一个测试中，这是。
- en: a test that checks to make sure that one，is not prime and so the way I do that
    is。by calling self this testing object，itself it happens to have a method or。function
    built into it called assert，false there's an equivalent assert true。but I would
    like to assert false and，what would I like to assert that is。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 一个测试检查确保一不是素数，因此我做的方法是调用self这个测试对象，它恰好有一个内置的方法或函数叫做assert false，还有一个等效的assert
    true，但我想断言false，我想要断言的是。
- en: false is Prime one so whatever is prime，one is that should be false and I would。like
    to just assert that it is false，likewise for the number two now I want。to check
    that the number two is prime，and the way I do that is by calling self。dot assert
    true I would like to assert，that when I run the is prime function on。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 假设一是素数，因此无论一是什么，应该是错误的，我想仅仅断言它是错误的，同样对数字二，我现在想检查数字二是否是素数，我的方法是调用self.dot assert
    true，我想断言，当我在上面运行is prime函数时。
- en: the number two the output that I get is，going to be a true value self dot a。third
    true and I can translate each of，the rest of my tests into one of these。self dot
    assert throughs or self dot，assert false and then I say that if you。go ahead and
    run the program go ahead。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 数字二，我得到的输出将是一个true值self dot a third true，我可以将其余的测试翻译成这些self dot assert true或self
    dot assert false，然后我说如果你继续运行程序就好了。
- en: '![](img/e83f06e692087eac7272eb66f5d44ede_34.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e83f06e692087eac7272eb66f5d44ede_34.png)'
- en: and call unit test main which will run。![](img/e83f06e692087eac7272eb66f5d44ede_36.png)
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 并调用单元测试主程序，它将运行。![](img/e83f06e692087eac7272eb66f5d44ede_36.png)
- en: all of these unit tests so now when I，run Python test one pi here's what I get。I
    get some nice output where up at the，top I see dots every time a test。![](img/e83f06e692087eac7272eb66f5d44ede_38.png)
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些单元测试，所以现在当我运行Python test one pi时，这就是我得到的。我看到了一些很好的输出，顶部每次测试都有点。![](img/e83f06e692087eac7272eb66f5d44ede_38.png)
- en: succeeded and a letter F for a test that，happened to fail it says that it ran
    six。tests and down at the bottom I see that，there were two failures so it's。immediately
    going to tell me exactly，what failed and it'll give me some。rationale some reason
    for why it is that，those tests failed as well so we can see。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 而一个 F 的字母用于一个失败的测试，它表明运行了六个测试，底部我看到有两个失败，所以它会立即告诉我到底是什么失败了，并且会给我一些理由，说明这些测试失败的原因，所以我们可以看到。
- en: all right here is one test，here's another test this tests have，failed if the
    tests that。checked that 25 is not prime and this，sentence here is what I supplied
    inside。of what was known as that Python，docstring inside of this triple，quotation
    marks underneath the。declaration of the function those triple，quotation marks
    otherwise known as a。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，这里有一个测试，这里有另一个测试，这些测试失败了，检查 25 不是质数的测试，而这句话是我在 Python 文档字符串中提供的，位于函数声明下的三个引号之内，这三个引号也被称为。
- en: docstring serve a number of purposes，they can serve as just a comment for。describing
    what it is the function does，but they're a special comment insofar as。someone
    who's looking at the function，can access that docstring that's usually。used for
    documentation for what it is，that the function is doing and they can。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 文档字符串有多种用途，它们可以作为描述函数所做内容的注释，但它们是特殊的注释，因为查看函数的人可以访问该文档字符串，通常用于记录函数的功能。
- en: use it inside of other places as well，and so what unit test is doing is for。every
    function it uses that docstring as，a description of what the test is。testing for
    so that if a test fails then，I can see exactly what the name is of。the test that
    failed up and what it was，tested where the description describes。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 并且它们也可以在其他地方使用，因此单元测试所做的是，对于每个函数，它使用文档字符串作为测试的描述，因此如果测试失败，我可以确切看到失败的测试名称，以及它测试的内容，描述清楚。
- en: what was happening now in this case，where it's just one function I'm testing。a
    whole bunch of different numbers it，doesn't seem all that useful but again。if
    you imagine projects that start to，get more complex being able to know。immediately
    when you run your tests，which parts of the program or which。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 现在发生的情况是，在这个案例中，我正在测试一个函数，测试一堆不同的数字，这似乎并不是很有用，但再次说，如果想象一下越来越复杂的项目，当你运行测试时能够立即知道程序的哪些部分或者。
- en: parts of your web application aren't，working the way they are expected to can。actually
    be quite helpful so test 25，that was the function that triggered an。assertion
    failure in this case and the，line that caused it was self dot a cert。false is
    prime 25 and the reason that it，failed is because true which apparently。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你的网站应用程序的某些部分没有按预期工作，这实际上可能是相当有帮助的，因此测试 25，这是在这种情况下触发断言失败的函数，而导致失败的行是 self.dot.a_cert。false
    是质数 25，失败的原因是 true，显然成功了。
- en: was the output of this function is not，false and I expected it to be false。instead
    and so multiple different ways，of trying to run our test this happens。to be one
    quite popular one but this，note tells me that I should go back and。try and fix
    my is prime function I can，go back into prime dot Piatt and say all。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数的输出不是 false，而我期望它是 false，因此有多种不同方式尝试运行我们的测试，这恰好是其中一种非常流行的方法，但这个提示告诉我，我应该回去修复我的
    is prime 函数，我可以回到 prime.dot.Piatt 并说。
- en: right I would like to figure out why，this went wrong and if you look at this。enough
    and maybe give it a little bit of，testing you might see that a slight off。by one
    error that I probably need to，check one additional number then I。actually am because
    in checking whether，or not 25 is prime or not for example I。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我想弄清楚为什么会出错，如果你仔细查看，也许进行一点测试，你可能会发现有一个稍微偏差的错误，我可能需要检查一个额外的数字，实际上我在检查 25 是否是质数时。
- en: might need to go up to and including the，number 5 to know that 5 is a factor
    of。25 but before I was going up to the，number 5 but I wasn't including the。number
    5 so I also need to just check。![](img/e83f06e692087eac7272eb66f5d44ede_40.png)
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可能需要检查到包括数字 5，以知道 5 是 25 的因数，但之前我只检查到了数字 5，但没有包括数字 5，因此我还需要检查一下。![](img/e83f06e692087eac7272eb66f5d44ede_40.png)
- en: one more number and now to verify that，this is right I could just manually test。the
    function myself or I could just run，these tests again run。I found test1 pi and
    this time all these，dots mean all these tests succeeded we。ran six tests and everything
    was okay no。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个数字，现在要验证这一点，我可以自己手动测试这个函数，或者我可以再运行这些测试。我找到测试1 pi，这次所有这些点意味着所有这些测试都成功了。我们运行了六个测试，一切都正常。
- en: '![](img/e83f06e692087eac7272eb66f5d44ede_42.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/e83f06e692087eac7272eb66f5d44ede_42.png)'
- en: failures and so this can be a helpful，way for me to know immediately the thing。seems
    to be working okay so the，takeaways from here are that these tests。can definitely
    help as you begin to，write new changes to your program。especially as you begin
    to optimize，functions you might make a function more。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这对我来说是一个有帮助的方式，可以立即知道事情似乎运作良好。从这里的要点是，这些测试肯定会帮助你在开始对程序进行新更改时，尤其是在你开始优化函数时，可能会使函数更有效。
- en: efficient but then run your tests to，make sure that in making these。improvements
    you haven't broken anything，you haven't changed any behavior that。the way the
    program was supposed to，behave and now it doesn't behave that。way you are able
    to verify with much，more confidence that that is true but of。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 高效，但随后运行你的测试，以确保在进行这些改进时，你没有破坏任何东西，你没有改变程序本应如何运行的行为，而现在却不再以那种方式运行。你能够以更大的信心验证这一点。
- en: course that only works if your tests，have good coverage of all the things。that
    you would want the function to do，and you've covered appropriately all the。various
    different cases for how the，function should behave because only if。the tests are
    comprehensive well they，actually be useful to you and indicating。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这只有在你的测试覆盖了你希望函数执行的所有内容时才有效，而且你已适当地覆盖了函数应该如何行为的各种不同情况，因为只有当测试全面时，它们才会对你有用，并指示出失败。
- en: that the change that you made isn't，going to break anything and only then。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 你所做的更改不会破坏任何东西，只有这样才行。
