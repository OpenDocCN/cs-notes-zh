- en: 哈佛 CS50-WEB ｜ 基于Python ／ JavaScript的Web编程(2020·完整版) - P13：L4- 数据库、SQL与集成 2 (表关联，django模型，集成)
    - ShowMeAI - BV1gL411x7NY
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 哈佛 CS50-WEB ｜ 基于Python ／ JavaScript的Web编程(2020·完整版) - P13：L4- 数据库、SQL与集成 2 (表关联，django模型，集成)
    - ShowMeAI - BV1gL411x7NY
- en: data we have multiple tables of data and，those multiple tables might relate
    to。each other in some way and let's take a，look at an example of how that might。come
    about we're gonna introduce a，concept that we'll call foreign keys and。we'll see
    what that means in just a，moment so here again is our flights。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 数据中我们有多个数据表，这些多个表可能以某种方式相互关联，让我们看看一个示例，看看这可能是如何产生的，我们将介绍一个概念，我们称之为外键，我们稍后将看到它的含义。
- en: table the flights table has four columns，an ID origin destination and duration。but
    of course in New York there are，multiple airports in New York for。instance and
    so it might not make sense，for me to just label each origin or each。destination
    just by the name of the city，maybe I also want to give the。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 这里再次是我们的航班表，航班表有四列：ID、起点、目的地和持续时间。但是在纽约，当然有多个机场，比如说，因此仅仅通过城市名称标记每个起点或目的地可能没有意义，可能我还想提供。
- en: three-letter Airport code that，corresponds to the airport to which I'm。referring
    in this case and so how would，I encode into this table not only the。origin but
    also that city's airport code，and not only for the destination the。name of the
    city but also the airport，code for that Airport as well well I。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 三个字母的机场代码对应我所提到的机场，那么我该如何在这个表中编码，不仅是起点，还有那个城市的机场代码，以及目的地城市的名称，还有那个机场的代码呢。
- en: could just add more columns I could say，something like alright now we have this。table
    that as an ID in origin in origin，code a destination a destination code。and a
    duration but here now the table is，starting to get fairly wide there are a。lot
    of columns here and in particular，there's some duplicate data that I've，repeated
    my cement。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以添加更多的列，比如说，好吧，现在我们有这个表，包含一个ID，一个起点，起点代码，一个目的地，目的地代码和一个持续时间，但现在这个表开始变得相当宽，有很多列，尤其是我重复了一些冗余数据。
- en: of ***** is associated with this，particular three-letter code and the。same thing
    for New York and other，airports as well there is some messiness。in the structure
    of this data and so，often what we'll want to do is we begin。to deal with data
    and larger and larger，sets with more and more columns is we'll。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 与此特定的三个字母代码相关联的*****，对于纽约和其他机场也是如此，这个数据的结构中存在一些混乱，因此，当我们开始处理数据和越来越大的数据集，拥有越来越多的列时，我们通常会想要。
- en: want to normalize this data separating，things out into multiple different。tables
    that just reference one another，in some way and so instead of just。having a single
    flights table what we，might consider doing is saying that。flights are one type
    of object but，another type of object that I care about。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我想要规范化这些数据，将它们分隔到多个不同的表中，这些表以某种方式相互引用，所以与其仅仅有一个航班表，我们可能考虑的是说，航班是一种对象，但还有另一种我关心的对象。
- en: is like an airport and so I might just，have a separate table just for airports。where
    this table has three columns a，column for the ID of the airport just am。unique
    number that can identify a，particular airport one column for the。three-letter
    code for that Airport and，one letter for the city or one column。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于机场，所以我可能只会有一个单独的机场表，这个表有三列，一列是机场的ID，一个唯一数字可以识别特定机场，一列是那个机场的三个字母代码，还有一列是城市名称。
- en: for the city where that airport is in，and now this is a much more。straightforward
    simpler representation，of all of the airports and the question。becomes what happens
    to my flights table，that my flights table that here had an。ID origin destination
    and duration where，the type of origin and destination were。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 关于那个机场所在的城市，现在这是一个更加直接、简单的所有机场的表示，问题变成了我的航班表会发生什么，我的航班表在这里有一个ID、起点、目的地和持续时间，而起点和目的地的类型。
- en: in this case just text text-based data，representing the name of the city from。which
    the flight is departing or to，which the flight is arriving well now。that I have
    this separate airports table，where every row in the airport's table。has its own
    unique ID then what I can do，in this case is instead of storing an。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，仅仅是文本数据，表示航班出发或到达的城市名称。现在我有了这个单独的机场表，其中每一行都有其独特的ID，那么在这种情况下，我可以做的是，避免存储冗余数据。
- en: origin and a destination as text I can，store what we'll call a foreign key a。reference
    to a key in another table and，rename these columns to origin ID and。destination
    ID that instead of storing，text are going to store a number where。origin ID 1
    means the origin of flight 1，is whatever airport number 1 happens to。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 出发地和目的地以文本形式存储。我可以存储我们称之为外键的内容，即对另一个表中键的引用，并将这些列重命名为出发地ID和目的地ID，而不是存储文本，而是存储一个数字，其中出发地ID
    1意味着航班1的出发地是机场1。
- en: be and I could go to the airport's table，lookup which Airport has an ID of 1
    and。that would tell me the origin of this，flight and if I went to the airport's。table
    and looked up which airport had an，ID of 4 that would tell me the。destination
    of this slide as well so by，combining now two different tables one。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以查找机场表，找出哪个机场的ID是1，这将告诉我该航班的出发地。如果我去机场表，查找哪个机场的ID是4，这也会告诉我该航班的目的地。因此，通过结合两个不同的表。
- en: table for representing airports and one，table for representing flights I'm able。to
    connect this these two different，tables together，by way of a foreign key some
    columns。inside of my flights table namely the，origin ID column and the destination
    ID。column that together allow me to，reference information stored inside of。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 用于表示机场的一个表和用于表示航班的一个表。我能够通过外键将这两个不同的表连接起来，我的航班表中的某些列，即出发地ID列和目的地ID列，使我能够引用存储在其他表中的信息。
- en: another table as well and as you imagine，this sort of airline's database growing。and
    storing more different kinds of data，the ability to relate tables to each。other
    is going to become incredibly，powerful so one thing you might imagine。is that
    in addition to storing airports，and storing flights an airline probably。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个表，以及你可以想象这个航空公司数据库的增长和存储更多不同种类的数据，将表之间的关系变得非常强大。因此，你可能想象的是，除了存储机场和航班，航空公司可能还需要。
- en: also needs to store information about，its passengers like who is on which。flight
    and so you could imagine，constructing a passengers table that has。an ID column
    to uniquely identify every，passenger a first name column that。stores every passengers
    first name a，last name column for storing their last。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 还需要存储有关乘客的信息，比如谁在哪个航班上。因此你可以想象，构建一个乘客表，其中有一个ID列来唯一标识每位乘客，一个名字列来存储每位乘客的名字，以及一个姓氏列来存储他们的姓氏。
- en: name and a flight ID column for storing，what flight that passenger happens to
    be。on so in this case I could say that all，right Harry Potter is on flight number
    1。I could look that up in the flights，table to find out all right inside the。flights
    table here is where the flight，is leaving from where it's going to and。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 姓名和航班ID列，以存储该乘客正在乘坐的航班。因此在这种情况下，我可以说，好的，哈利·波特在航班号1上。我可以在航班表中查找，以找出航班的出发地和目的地。
- en: what its duration happens to be now as，we begin to design these tables we have。to
    think about what the implications of，that design happened to be and in the。case
    of this passengers table it does，seem that there is a limitation on the。table
    design that I have created and，namely if you think about it you'll see。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 它的持续时间是什么。现在当我们开始设计这些表时，我们必须考虑这种设计的影响。在乘客表的情况下，确实似乎存在我创建的表设计的局限性，换句话说，如果你仔细考虑一下，你会发现。
- en: the limitation of this table design is，that any particular row can only have。one
    flight ID associated with it that，Harry Potter has a single flight ID。column that
    can only have one value，stored inside of it and this would seem。to make it impossible
    to allow for us to，be able to represent a person that could。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这个表设计的局限性在于，任何特定行只能关联一个航班ID。哈利·波特只有一个航班ID列，并且只能存储一个值，这似乎使我们无法表示一个人可以有多个航班的情况。
- en: be on multiple different flights and so，this starts to get at the idea of。different
    types of relationships that，rows on a table can have to one another。one type of
    relationship is a many to，one relationship or a one-to-many。relationship where
    I can express the，idea that one flight can be associated。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在多个不同的航班上。因此，这开始涉及到表中行之间不同类型关系的想法。关系的一种类型是多对一关系或一对多关系，在这种情况下，我可以表达一个航班可以关联。
- en: with many different passengers for，instance but what we might also want is。a
    many-to-many relationship where many，different passengers can be associated。with
    many different flights a passenger，might have more than one flight a flight。might
    have more than one passenger and，to do that we're going to need a。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，有许多不同的乘客，但我们可能还想要一个多对多的关系，其中许多不同的乘客可以与许多不同的航班关联，一个乘客可能有多个航班，一个航班可能有多个乘客。为此，我们需要另一个表。
- en: slightly different structure for this，particular type of tape，and one way we
    could approach it is by。creating a separate table for storing，people that I can
    have a people table。where every person has an ID has a first，name and has a last
    name the same as。before but I'm no longer storing flight，information inside of
    the table I've。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种特定类型的表格有稍微不同的结构，一种方法是创建一个单独的表来存储人员，我可以有一个人员表，每个人都有一个ID，有一个名字和一个姓，与之前相同，但我不再在表中存储航班信息。
- en: created my setup up I'm only storing，people in this table and nothing about。their
    flight information and then I'll，have a separate table for dealing with。passengers
    on the flight and mapping，people to their flights and we can think。about what
    does that table need to look，like well I need some sort of table that。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建的设置只存储人员在这个表中，航班信息不在此表中，然后我会有一个单独的表来处理航班上的乘客，并将人员与他们的航班关联起来，我们可以考虑这个表应该是什么样子的。
- en: is going to relate people to what，flights they happen to be on so odds are。we're
    gonna need one column that is a，foreign key that references this people。table
    and we'll need another column that，is a foreign key that references the。flights
    table such that I can relate，those cue tables together and so that。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 将人们与他们乘坐的航班关联起来。因此，我们很可能需要一列外键，引用这个人员表，另外一列外键，引用航班表，以便我能够将这些表关联在一起。
- en: table could look like this，this now is the simplified passengers。table that
    only has two columns it has a，person ID column and a flight ID column。and the
    idea of this table now is it's，known as an association table or a join。table that
    just associates one value，from one table with another value from。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 表格可以看起来像这样，现在这是简化后的乘客表。这个表只有两列，一个是人员ID列，另一个是航班ID列。这个表的想法现在是，它被称为关联表或连接表，旨在将一个表中的一个值与另一个表中的另一个值关联起来。
- en: another table that this row here 1 and 1，means the person with an ID of 1 is
    on。flight number 1 and I could look up that，person inside of the per-pupil table。look
    up that flight inside of the，flights table and figure out who the。person is and
    what flight they're on and，down here 2 + 4 means whoever the person。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的这一行1和1意味着ID为1的人在航班1上，我可以在人员表中查找那个人。在航班表中查找该航班，弄清楚那个人是谁以及他们乘坐的航班，而这里的2 + 4意味着无论那个人是谁。
- en: with an ID of 2 is is on whichever，flight happens to have an ID of 4 and so。this
    now has allowed us to be able to，represent the types of relationships we。want
    we have a table for airports and a，table for flights and any flight is。going to
    map to two different airports，one destination one origin and any。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: ID为2的人是在ID为4的航班上。因此，现在这使我们能够表示我们想要的关系类型。我们有一个机场表和一个航班表，任何航班都将映射到两个不同的机场，一个是目的地，一个是起点。
- en: airport might appear on multiple，different flights sort of a one-to-many。relationship
    and then over here when it，comes to passengers we've stored people。inside of a
    separate table and then had，a many-to-many mapping between people。and flights
    that any person could be on，multiple different flights like here for。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 机场可能出现在多个不同的航班上，这是一种一对多的关系。然后在这里，当涉及到乘客时，我们将人们存储在一个单独的表中，并且在人员和航班之间有多对多的映射，任何人都可以乘坐多个不同的航班，就像这里。
- en: example person number two is on both，flights 1 & 4 and likewise a flight。could
    have multiple people so in this，case flight number six has passengers，well。we've
    been able to represent those，relationships of course a byproduct of。doing this
    is that now our tables are，are a little bit Messier to look at and。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，乘客编号二在航班1和4上，同样一个航班可以有多个乘客。因此，在这种情况下，航班编号六有乘客。我们能够表示这些关系，当然，做到这一点的副产品是，现在我们的表看起来有点杂乱。
- en: messy in the sense that it's not，immediately obvious to me when I look at。this
    table like what data I'm looking at，I see these numbers but I don't know。what
    these numbers mean I've separated，all these tables into different places。and now
    it's a little harder for me to，figure out who's on which flight I have。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这种情况有些混乱，因为当我查看这个表时，不明显我在看什么数据。我看到这些数字，但不知道它们的含义。我已经将所有这些表分开，现在更难判断谁在乘坐哪个航班。
- en: to look at the Statham lookup people in，the people table look up flights in
    the。flights table and somehow associate all，of that information back together
    in。order to draw any sort of conclusion but，luckily sequel makes it pretty easy
    for。us to be able to take data across，multiple different tables and join them。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看人员表中的人员，在航班表中查找航班，并以某种方式将所有信息关联起来，以得出任何结论，但幸运的是，SQL使我们能够轻松地从多个不同的表中提取数据并进行连接。
- en: all back together and we can do this，using a join query that takes multiple。tables
    and joins them together so the，syntax for a join query might look，something like
    this。and here we'll go back to just a two，table setup where I have flights and。passengers
    where every passenger is，associated with one flight you could。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一个连接查询，将多个表结合在一起，因此连接查询的语法可能看起来像这样。这里我们将回到只有两个表的设置，我有航班和乘客，每个乘客都与一个航班相关联。
- en: extend this and join multiple tables to，deal with our more complex example as。well
    but here I'd like to select every，person's first name and their origin and。their
    destination and I'm going to，select that from the flights table but I。need to
    join it with the passengers，table and then I say on to indicate how。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展这个，连接多个表来处理更复杂的示例。在这里，我想选择每个人的名字、出发地和目的地，并从航班表中选择，但我需要与乘客表连接，然后我会说出如何。
- en: it is these two tables are related to，one another and in this case I'm saying。the
    way these two tables are related to，one another is that the flight ID column。of
    the passengers table is associated，with the ID column of the flights table。the
    flights table has an ID that，uniquely identifies every flight and the。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个表是相关的，在这种情况下我想说。它们之间的关系是，乘客表的航班ID列与航班表的ID列相关联。航班表有一个唯一标识每个航班的ID。
- en: passengers table has a flight ID column，that uniquely identifies the flight
    that。we're referring to for this particular，passenger and so the road volt I might。get
    is the table that looks like this，that gives me everyone's first name but。also
    their origin and their destination，where origin and destination are going。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 乘客表有一个航班ID列，唯一标识我们所指的特定乘客的航班。因此我可能得到的结果是这样的表，显示每个人的名字，以及他们的出发地和目的地。
- en: to be drawn from that table of flights，and the first name is going to be drawn。from
    the table of passengers but by，using a join query I've been able to。take data
    from two separate tables and，join them both back together and there。are a number
    of different types of，drawing queries that I can run what we。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我将从航班表中提取信息，名字将从乘客表中提取，但通过使用连接查询，我能够从两个不同的表中提取数据，并将它们结合在一起。我可以运行多种不同类型的绘制查询。
- en: saw here was just the default join which，is otherwise known as an inner join。we're
    effectively an inner join we'll，take the two tables it will，cross compare them
    based on the。condition that I specified and only，return back to me the results
    where。there's a match on both sides where we，match a passengers flight ID with
    an ID。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 我看到的是默认的连接，也称为内连接。我们有效地进行内连接，将两个表交叉比较，基于我指定的条件，仅返回在两侧都有匹配的结果，即将乘客的航班ID与ID匹配。
- en: in the flight stable and there are，various different kinds of outer joints。if
    I want to be okay with the idea that，maybe something on the Left table that。I'm
    joining doesn't match with anything，on the right or that maybe something on。the
    right table doesn't match with，something on the left but just know。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在航班表中，有各种不同类型的外连接。如果我希望允许左侧表的某些内容与右侧表的任何内容不匹配，或者右侧表的某些内容与左侧表的不匹配，但请记住。
- en: there are other types of join queries，that I can run as well other strategies。that
    can be helpful when dealing with，sequel tables are optimizations we can。make to
    make queries more efficient and，so one thing we can do with our table。ism is to
    create an index on a，particular table and you can think of an。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 我也可以运行其他类型的连接查询，其他策略在处理序列表时可能会有帮助，我们可以进行优化，使查询更高效，因此，我们可以在特定表上创建一个索引，你可以将其视为。
- en: index it's kind of like the index in the，back of a book for example where if
    you。wanted to be able to search for a topic，in a text book you could open the
    text。book and just page by page look for，every topic and just try and find the。topic
    you're looking for but often what，you'll be able to do if the table has an。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 索引有点像书籍最后的索引，例如，如果你想在教科书中搜索一个主题，你可以逐页翻阅教科书，寻找每个主题，试图找到你所寻找的主题，但通常情况下，如果表格有一个。
- en: index is go to the index of the book，find the topic you're looking for and。that
    will quickly give you a reference，for how to get to the right page in。question
    and an index on a table，operates in much the same way it is an。additional data
    structure that beacons，can be constructed and it does take time。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 索引，你可以去书的索引，找到你正在寻找的主题，这将快速给你一个参考，告诉你如何到达相关页面，而表格上的索引运作方式非常相似，它是一个附加的数据结构，可以构建，确实需要时间。
- en: and memory to be able to construct this，data structure and to maintain it。anytime
    you update the data inside the，table but once it exists it makes。querying on a
    particular column much。![](img/6a8623f9000a2368ca4c4713a3565a72_1.png)
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 需要内存来构建这个数据结构并维护它。每当你更新表中的数据时，但一旦它存在，它就会使在特定列上的查询变得更高效！[](img/6a8623f9000a2368ca4c4713a3565a72_1.png)
- en: more efficient that you can very quickly，look something up in the index and
    find。the corresponding rows that go along，with it and so here we could have a。command
    like create an index that we're，gonna call name index on the passengers。table
    and in particular on the last name，column gonna say something like I expect。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 更高效地，你可以非常快速地在索引中查找某些内容并找到相应的行。因此，在这里我们可以有一个命令，例如创建一个索引，我们将其称为乘客表上的名称索引，特别是在姓氏列上，可能会说我期望。
- en: that as I query this table I'm pretty，frequently going to be looking up。passengers
    by their last name so I would，like to create an index on that table to。be able
    to more efficiently search for a，passenger based on their last name as。well and
    so that's just a general，overview of what sequel syntax is all。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 当我查询这个表时，我会经常根据乘客的姓氏进行查找，所以我想在这个表上创建一个索引，以便能够更高效地根据姓氏搜索乘客。这只是关于序列语法的一个总体概述。
- en: about a syntax that we can use to be，able to create data tables inside of。which
    are storing rows of data where，every row consists of some number of。columns and
    every column has a type you，have the ability to create tables add。data to them
    update delete and get data，out of those tables as well but as we。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们可以使用的一种语法，用于创建数据表，存储数据行，每行由一些列组成，每列都有一个类型。你可以创建表格，向它们添加数据，更新、删除以及从这些表中获取数据，但随着我们。
- en: begin to introduce these new technology，there are always risks and potential。threats
    that are associated with those，technologies as well and in sequel the。key one
    to be aware of is what's known，as a sequel injection attack a security。vulnerability
    that can happen if you're，not careful about how it is you actually。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 开始引入这些新技术，总是存在与这些技术相关的风险和潜在威胁，而在序列中，关键是要意识到所谓的序列注入攻击，这是一种安全漏洞，如果你不注意实际操作方式。
- en: execute your sequel commands and so，where might this come about you might。imagine
    for instance that if a database，has some number of user ism you might be。storing
    those users inside of a database，for instance in a user's table where。there's
    a username column and a password，column though in practice you probably。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 执行你的序列命令，可能会出现这种情况，例如，如果数据库中有一些用户信息，你可能会在数据库中存储这些用户，例如在一个用户表中，其中有一个用户名列和一个密码列，虽然在实践中你可能。
- en: wouldn't want to store passwords in，clear-text let's imagine here for。example
    that you are storing usernames，and passwords inside of a table and we。have a login
    form for a website that，looks like this where you get to type in。your username
    and your password and so，if someone types in their username and。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不希望以明文存储密码，假设你在一个表中存储用户名和密码，我们有一个看起来像这样的登录表单，你可以在其中输入你的用户名和密码。如果有人输入了他们的用户名。
- en: password what might happen is that the，web application might look select star。from
    users where username equals this，particular username highlighted here。we're just
    gonna substitute the username，right there and password equals them and。we'll substitute
    the password over there，so if someone tries to log into our site。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 可能发生的情况是，网络应用程序可能会执行类似于 `SELECT * FROM users WHERE username = '这个特定的用户名'` 的查询。我们只需将用户名替换到那里，然后将密码替换到另一边，如果有人尝试登录到我们的网站。
- en: like Harry logs in with a password of 1，2 3 4 5 what we might do is run the。Select
    query and say select star from，users where username is Harry and where。the password
    is 1 2 3 4 5 and our logic，might be if we get results back then。that means there
    is a user whose user，name is Harry and password is 1 2 3 4 5。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 比如 Harry 使用密码 `1 2 3 4 5` 登录，我们可能会运行选择查询，执行 `SELECT * FROM users WHERE username
    = 'Harry' AND password = '1 2 3 4 5'`。我们的逻辑可能是，如果我们得到了结果，那么意味着存在一个用户名为 Harry，密码为
    `1 2 3 4 5` 的用户。
- en: and we can go ahead and sign that user，in but imagine now what might happen
    if。instead the user who typed in a username，of a hacker quotation mark - - it
    seems。like a bit of a strange user name to，type in and it doesn't matter what
    they。put in their password here now the，result might be that what they plug into。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以继续为该用户签名，但想象一下，如果输入用户名的用户是一个黑客，可能会发生什么。似乎这个用户名有点奇怪，输入的密码无论是什么，结果可能就是他们输入的内容。
- en: the username is where username equals，hacker and then the - - it turns out -
    -。and sequel stands for a comment in，sequel it just means ignore everything。that
    comes after it in the same way that，in Python you can use the hashtag symbol。to
    mean the rest of this line is a，comment and the compiler whoever's。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 用户名是 `WHERE username = 'hacker'`，然后 `--` 后面会出现的情况是，`--` 在 SQL 中表示注释，这意味着忽略其后的一切，就像在
    Python 中使用井号符号意味着这一行的其余部分是注释一样，编译器会处理它。
- en: running the program should just ignore，it so everything after the - - kind of。gets
    ignored and we've effectively been，able to bypass the password check that。someone
    could bypass a password check，and log into an account even if they。were unauthorized
    to do so，so here the vulnerability with，in the sequel syntax if we're not。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 运行程序时应该忽略它，因此在 `--` 之后的所有内容都会被忽略，这样我们就有效地绕过了密码检查。某人可以绕过密码检查并登录到一个他们无权访问的账户，这里就是
    SQL 语法中的漏洞，如果我们不注意。
- en: careful about when we're running sequel，syntax we could be running untrusted。sequel
    commands that some hacker some，adversary has been able to plug in to。our program
    so how do we solve this sort，of problem one strategy is to escape。these characters
    escaping just meaning，add some back slashes that just make。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们运行 SQL 语句时要小心，我们可能在运行一些不受信任的 SQL 命令，而这些命令是某个黑客能够注入到我们程序中的。那么，我们该如何解决这个问题呢？一种策略是转义这些字符，转义只是意味着添加一些反斜杠，使其变得安全。
- en: sure that sequel knows to treat these as，a literal quotation mark and a literal。dash
    and not as like special sequel，syntax of any sort another strategy is。to use an
    abstraction layer on top of，sequel so that we don't have to write。the sequel queries
    at all and that's in，fact what we're about to do as we。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 确保 SQL 知道将这些视为字面上的引号和破折号，而不是任何特殊的 SQL 语法。另一种策略是使用一个抽象层在 SQL 之上，这样我们根本不需要编写 SQL
    查询，这正是我们接下来要做的。
- en: transition to the world of Django to，take a look at how when we begin to use。a
    web framework like Django we now have，the ability to not worry about the。nuances
    of the syntax of sequel and just，deal a little more high-level with what。our models
    are what are the types of，objects that we're dealing with and。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们过渡到 Django 的世界时，看看当我们开始使用像 Django 这样的网络框架时，我们现在能够不必担心 SQL 语法的细微差别，而是更高层次地处理我们的模型，处理我们正在使用的对象类型。
- en: interacting with inside of this，application one other concern worth。noting about
    with regards to sequel is，the possibility of race conditions and a。race condition
    is something that might，happen anytime you have multiple events。that are happening
    in parallel threads，so to speak that you have one thing。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 与这个应用程序内部交互的另一点需要注意的是关于SQL的潜在竞争条件，竞争条件是指在你有多个事件在并行线程中同时发生时，可能会发生的事情。
- en: happening and another thing happening，simultaneously you might imagine that
    in。the case of social media sites where you，can like a post like an image on。Instagram
    or a tweet on Twitter for，example what would happen if two people。tried to like
    the same post at the same，time if we're not careful about how we。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了一件事情，同时还有另一件事情发生，你可以想象在社交媒体网站的情况下，比如你可以在Instagram上点赞一条帖子或在Twitter上点赞一条推文。例如，如果两个人同时试图点赞同一条帖子，会发生什么？如果我们不小心处理这些特定的SQL查询，就可能出现竞争条件的问题。
- en: run those particular sequel queries，there's a potential for us to be able to。get
    a race condition problems where we，end up like trying to query for the。number
    of likes that a post has and then，another person tries to do the same。thing and
    there are conflicts when we，try and update it where the result might。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终可能会尝试查询一条帖子有多少个赞，而另一个人也试图做同样的事情，当我们尝试更新时就会发生冲突，结果可能不是我们所预期的，并且在处理与竞争条件相关的问题时，可能会出现许多意外结果。
- en: not be what we would expect it to be and，there are a number of unexpected results。that
    can happen when we deal with，problems related to race conditions。where multiple
    things are happening，simultaneously how do we solve those。problems well one strategy
    is to sort of，place a lock on the database to say all。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当多个事情同时发生时，我们该如何解决这些问题？一个策略是对数据库进行锁定，表示所有。
- en: right well I'm working on this database，nobody else can touch this data let
    me。finish this transaction so to speak，finish working on this particular。transaction
    and making all the changes I，need to make the database and only after。I'm done
    I can sort of release the lock，let someone else go ahead and modify the。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我在处理这个数据库，其他人无法触碰这些数据，让我完成这个事务，完成对这个特定事务的操作并进行我需要进行的所有更改，只有在我完成后，我才能释放锁，让其他人去修改。
- en: database as well it's a number of，concerns to be aware of as we begin，dealing
    in this world。of sequel and trying to work with，databases so now that we've taken
    a look。at the syntax of sequel understanding，how these tables work how they're。structured
    and what it is that we can，add to those tables let's go ahead and。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库也是如此，在我们开始处理SQL和与数据库打交道的过程中，有许多需要注意的问题。所以现在我们已经看过SQL的语法，理解这些表如何工作、如何结构化以及我们可以在这些表中添加什么，接下来我们就来继续。
- en: turn our attention in particular to，Django models which are a way of。representing
    data inside of a Django，application because we're Django is。really going to get
    powerful in，designing our web applications is the。ability to represent data in
    terms of，these models and so we're gonna go ahead。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 特别关注Django模型，这是在Django应用程序中表示数据的一种方式，因为Django在设计我们的网络应用程序时，真正强大的地方就是能够通过这些模型表示数据，因此我们将继续。
- en: and try and create a web application，that is going to represent like what an。airline
    might want to store inside of，its own web application as well all。right so the
    first thing I want to do is，create a Django project so I'll go ahead。and type
    Django admin start project and，the name of my project will just be。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 并尝试创建一个网络应用程序，以代表航空公司可能希望在其自己的网络应用程序中存储的内容。好的，首先我想做的是创建一个Django项目，所以我将输入Django
    admin start project，项目的名称将是。
- en: called airline I'm creating a project，for an airlines website for example I'll。go
    ahead and go into the airline，directory open then up in my code editor。but before
    I actually begin editing any，code remember that every jingo project。needs to have
    one or more apps within it，so the first app that I'll create for。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建的项目叫做航空公司，我为航空公司的网站创建一个项目。例如，我将进入航空公司目录，然后在我的代码编辑器中打开它。但在我实际开始编辑任何代码之前，请记住，每个Django项目都需要有一个或多个应用程序，因此我将为。
- en: this airline is I'll start an app for，keeping track of flights so keeping。track
    of flight related information like，origins and destinations and durations。![](img/6a8623f9000a2368ca4c4713a3565a72_3.png)
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这家航空公司，我将启动一个应用程序来跟踪航班，因此跟踪航班相关的信息，比如出发地、目的地和持续时间。![](img/6a8623f9000a2368ca4c4713a3565a72_3.png)
- en: and what passengers are on those flights，when I create a new app first thing
    I'll。need to do is go into settings dot PI，inside of airline and go ahead and
    add。this app as an installed app alright so，flights is now an app that I've。installed
    and then what I'll want to do，is say go ahead and go into URLs PI。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 还有哪些乘客在这些航班上，当我创建一个新应用时，我需要做的第一件事是进入 settings dot PI，在航空公司内部，将这个应用添加为已安装的应用，因此，flights
    现在是我已安装的一个应用，然后我想要做的是说，进入 URLs PI。
- en: which is again that table of contents，for all the URLs I can get to for this。particular
    web application I'll import，include because I want to do is when。someone visits
    the path of flights slash，something I want to take them to flights。dot URLs mapping
    them to the URLs PI，file that will be inside of my flights。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这又是目录，对于我能获取的所有URL，这个特定的网络应用程序我将导入，包含因为我想做的是当某人访问 flights slash 的路径时，我想带他们到
    flights dot 的 URL，将它们映射到我 flights 中的 URLs PI 文件。
- en: application of course now I need a URL，spy file inside of my flights。application
    so I go into flights and，create a new file that I'll call you are。l-step PI and
    we can do from Django，about URLs import path from dot import。views and then my
    url patterns are going，to go inside of this list right here but。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当然现在我需要在我的 flights 应用中有一个 URL spy 文件，所以我进入 flights，创建一个新的文件，我将其命名为 url-step
    PI，然后我们可以从 Django 的 URLs 中导入 path，从 dot 导入 views，然后我的 URL 模式将放在这个列表中。
- en: before I begin dealing with，chewable URLs the first thing I'm going。to want
    to do is create some models，models are going to be a way of creating。a Python
    class that is going to，represent data that I want Django to。store inside of a
    database and so when I，create a model Django is going to figure。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在我开始处理可处理的 URL 之前，我首先要做的是创建一些模型，模型将是创建一个 Python 类的方式，该类将表示我希望 Django 存储在数据库中的数据，因此当我创建一个模型时，Django
    将会弄清楚。
- en: out what sequel syntax that needs to use，it to a create that table but then
    be。manipulate that table selecting and，updating and inserting anytime I make。changes
    to those models and so here what，I can do is inside of every app that。gets created
    in this case called flights，there's a models dot PI file when we。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 找出需要使用的 SQL 语法，以创建该表，然后可以操纵该表，随时在我对这些模型做出更改时选择、更新和插入。因此，在这个名为 flights 的每个应用程序中，我可以做的是，每个应用程序都有一个
    models dot PI 文件。
- en: haven't looked up before but this is，going to be the place where we get to。define
    what models are going to exist，for our application every model is going。to be
    a Python class and you can think，of this as having one model for each of。the main
    tables we care about storing，information about so I let me define a。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前没有查阅过，但这是我们定义模型将存在于我们的应用程序中的地方，每个模型将是一个 Python 类，你可以将其视为每个我们关心存储信息的主表都有一个模型，因此让我定义一个。
- en: new class called flight that is going to，inherit from models model so I'm。creating
    a new class called flight that，is going to be a model and then I need。to provide
    inside of this class all of，the parameters that a flight has what。properties does
    a flight have that I，might want to keep track of well a。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 新的类叫做 flight，将继承自 models model，因此我正在创建一个新的类叫做 flight，它将是一个模型，然后我需要在这个类中提供航班的所有参数，航班有什么属性是我可能想要跟踪的。
- en: flight has an origin and the origin is，going to be a model char field and this。is
    all documented on Django's website in，terms of the various different types of。fields
    that exist that I can include，inside of a django model where here I'm。saying all
    right here is a character，field whose max length is going to be。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 航班有一个起点，起点将是一个模型字符字段，这一切在 Django 的网站上都有文档，关于各种不同类型的字段，我可以包含在 Django 模型中，这里我说，好的，这里是一个最大长度的字符字段。
- en: let's say  sixty-four  I'll assume that most city，names I'm not going to go
    longer than  sixty-four  。characters that seems like a reasonable，maximum length
    for the origin of the。flight for example every flight will，also have a destination
    which will be a。character field whose max length is also， sixty-four  and every
    flight will have a duration。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 假设是 64，我假设大多数城市名称不会超过 64 个字符，这似乎是航班起点的合理最大长度。例如，每个航班还将有一个目的地，它将是一个最大长度为 64 的字符字段，每个航班将有一个持续时间。
- en: which will just be an integer field so，now this is my very first django model。it
    is a class called flight where I've，defined all of the properties that a。flight
    has and then using Django syntax，to find what type they should have as。well every
    flight has an origin has a，destination and has a duration but of。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这将只是一个整数字段，现在这是我非常第一个Django模型。它是一个名为flight的类，我定义了航班的所有属性，然后使用Django语法来确定它们应该有什么类型。每个航班都有一个起点、一个目的地和一个持续时间。
- en: course nothing here is actually modified，the database that Django is using in。![](img/6a8623f9000a2368ca4c4713a3565a72_5.png)
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这里实际上并没有修改Django正在使用的数据库在！[](img/6a8623f9000a2368ca4c4713a3565a72_5.png)。
- en: order to store information about my web，application and we can see if we in
    fact。go back to airline and I type ls' what，you see here is that there isn't yet。a
    database that exists I just have an，airline directory of flights directory。and
    a managed PI file so what I'd like，to do is somehow tell Jango that you。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 为了存储关于我的网页应用的信息，我们可以查看是否确实能够返回航空公司，并输入`ls`，你看到的是还没有存在的数据库，我只有一个航空公司航班目录和一个管理的PI文件，所以我想要做的是以某种方式告诉Django。
- en: should update the database to include，information about the models that I have。just
    created and this is a process that，we refer to in Django and more generally。as
    migrations I create a migration to，say here are some changes that I would。like
    to apply to the database and then I，migrate them to tell Django alright take。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 应该更新数据库以包含我刚刚创建的模型的信息，这是我们在Django中称之为迁移的过程，我创建一个迁移，说明我想应用于数据库的一些更改，然后我迁移它们，告诉Django好吧，接受。
- en: those changes and actually apply them to，the database so it's a two-step process。one
    is creating the migration the，instructions for how to actually go。about manipulating
    the database and then，one to take that migration step of。saying now take those
    instructions and，actually apply them to the underlying。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 那些更改并实际应用到数据库中，因此这是一个两步过程。第一步是创建迁移，即如何实际操作数据库的指示；第二步是将那个迁移的步骤应用到基础。
- en: database we can make the migrations via，a command again we'll use the manage。script
    that has a number of different，commands that allow us to control。various parts
    of the application I'll，use Python managed at PI and then make。migrations and
    now what we see is we've，created a migration inside of zero zero。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过命令进行迁移，再次我们将使用管理脚本，它有许多不同的命令，可以让我们控制应用程序的各个部分。我将使用Python管理的PI，然后进行迁移，现在我们看到的是，我们在0001_initial数据中创建了迁移。
- en: zero one underscore initial data we're。![](img/6a8623f9000a2368ca4c4713a3565a72_7.png)
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们！[](img/6a8623f9000a2368ca4c4713a3565a72_7.png)
- en: in this migration it's created a model，called flight and so if I go ahead and。look
    at the migrations directory I see。![](img/6a8623f9000a2368ca4c4713a3565a72_9.png)
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个迁移中，它创建了一个名为flight的模型，所以如果我继续查看迁移目录，我会看到！[](img/6a8623f9000a2368ca4c4713a3565a72_9.png)。
- en: this file has been created for me I，didn't have to create it myself and what。this
    file is is it as instructions to，Django for how to manipulate the。database to
    reflect the changes I have，made to the model that here is a。construction to Django
    to create a new，model called flight that has these。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件是为我创建的，我不必自己创建它。这个文件是对Django的指示，如何操作数据库以反映我对模型所做的更改。这是对Django的一个构建，创建一个名为flight的新模型，具有这些特性。
- en: particular fields inside of it and it's，basing this off of the changes that
    I。made to model stopped by the model that，I added is now reflected in this。migration
    and now if I want to apply the，migration actually apply it to Django's。database
    I can run Python managed PI，migrate to go ahead and apply these。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 特定字段在其中，它基于我对模型所做的更改，而我添加的模型现在在这个迁移中得到了反映。如果我想将迁移实际应用到Django的数据库中，我可以运行Python管理的PI迁移来继续应用这些更改。
- en: migrations there are a bunch of default，migrations that get applied as well
    but。notice that one of the migrations that，gets applied is this one here applying。flights
    dot zero zero zero one，underscore initial to say let's go ahead。and apply that
    migration create that，table that is going to represent flights。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 迁移中有一堆默认的迁移也会被应用，但请注意，其中一个迁移是将flights.0001_initial应用，表示让我们继续应用那个迁移，创建将表示航班的表。
- en: and if I type ls' now you'll see that，now I have a DB，sequel light three file
    a sequel light。database that is going to contain a，table that is going to store
    all of my。flights and so how can I actually begin，to manipulate this data how
    can I。interact with these with diseased sorts，of models I could use direct sequel。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我现在输入 ls，你会看到我现在有一个 DB.sqlite3 文件，这是一个 SQLite 数据库，将包含一个存储我所有航班的表，那么我该如何实际开始操作这些数据呢？我该如何与这些模型进行交互？我可以使用直接的
    SQL。
- en: syntax by opening up this database file，and running commands but Jango provides。some
    nice abstraction layers on top of，it so that I don't actually need to。execute
    those commands myself I can，begin to work more generally with Python。classes and
    variables and things that，I'm used to，inside the Python language so I can。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 通过打开这个数据库文件并运行命令来进行语法操作，但 Django 提供了一些很好的抽象层，这样我就不需要自己执行这些命令，我可以开始更通用地使用 Python
    类、变量和我熟悉的东西，在 Python 语言内部。
- en: enter jingoes shell where I can just run，Python commands by running Python manage。pie
    shell and what this does is open up，a shell or a console where I can begin。to
    write Python commands that get，executed on this web application and the。first
    thing I'd like to do is from，flight models，let me just import flight so flights
    is。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 进入 jingoes shell，我可以通过运行 Python manage.py shell 来直接运行 Python 命令，这样做的目的是打开一个
    shell 或控制台，我可以开始编写在这个 web 应用程序上执行的 Python 命令，首先我想从 flight 模型中导入 flight。
- en: the name of my app models is the name of，that file I'm importing the flight
    class。from that models file that I've just，created and now what I can do is I
    can。create a new flight I can say something，like f equals a a flight whose origin
    is。New York and whose destination is London，and whose duration equals four hundred。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 我应用的模型名称是我从中导入 flight 类的文件的名称，就是我刚创建的那个模型文件，现在我可以做的是创建一个新航班，我可以说类似 f 等于一个航班，起点是纽约，目的地是伦敦，持续时间是四百。
- en: and fifteen minutes and then I can say F，dot save to save that new flight that
    I。have created and this syntax now and，I'll go ahead and make it a little bit。bigger
    so we can see it a little easier，is my way of inserting data into this。table I
    don't need to use an insert，query in sequel I just have to write a。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 十五分钟后，我可以说 F.dot save 来保存我创建的新航班，这种语法，现在我会把它做得大一点，以便我们更容易看到，是我插入数据到这个表的方式，我不需要在
    SQL 中使用插入查询，我只需写一个。
- en: Python command and Gengo knows that when，I create a new flight and save it that。it
    should run an insert command on the，underlying sequel tables where here I've。created
    a new flight with this，particular origin and destination and。duration and I've
    gone ahead and saved，that flight as well and if I want to。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: Python 命令和 Django 知道，当我创建一个新航班并保存时，应该在基础的 SQL 表上运行插入命令，在这里我创建了一个新航班，具有特定的出发地、目的地和持续时间，我也已经保存了这个航班，如果我想。
- en: query that flight get information about，that flight I can say something like。flight
    dot objects dot all is the，equivalent of like I select all get me。all of the flights
    that exist inside of，my database and here I see I get back a。query set which is
    just a set of results，and here I have one flight that came。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 查询该航班，获取有关该航班的信息，我可以说类似 flight.objects.all 的内容，相当于选择所有的内容，获取我数据库中存在的所有航班，在这里我看到我得到了一组查询结果，其中有一个航班。
- en: back flight object one so a flight has，been created for me with。one now flight
    object one probably not，all that helpful in the name it'd be。nicer if this model
    had a cleaner way of，seeing the name of a particular of a。![](img/6a8623f9000a2368ca4c4713a3565a72_11.png)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '返回航班对象一，因此航班已经为我创建，现在航班对象一的名称可能没有太大帮助，如果这个模型有更干净的方式来看特定对象的名称，那就更好了。 '
- en: particular flight for example and it，turns out we can do that that any model。I'll
    go back to the code inside of model，spy any model can implement double。underscore
    stirrer function which，returns a string representation of that。particular object
    and this applies not，just a jingle models but two Python。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 特定的航班，例如，结果证明我们可以这样做，任何模型，我会回到 model.py 中，任何模型都可以实现双下划线 str 方法，它返回该特定对象的字符串表示，这不仅适用于
    Django 模型，还适用于 Python。
- en: classes more generally then if this，function returns a string representation。of
    the object let's go ahead and return，a formatted string that is self dot ID。I'll
    say self dot origin to self dot。![](img/6a8623f9000a2368ca4c4713a3565a72_13.png)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 类更一般地说，如果这个函数返回对象的字符串表示，让我们返回一个格式化的字符串，那就是 self.dot ID。我会说 self.dot origin 到
    self.dot。
- en: destination so here what I've said is，that the string representation of any。flight
    is going to be a string that，gives its ID and then says are a origin。to destination
    just a nice clean name，that is going to represent this。particular flight so now
    if I go back to，pie shell，I can say from flights models import。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: destination 所以在这里，我所说的是任何航班的字符串表示将是一个字符串，提供它的 ID，然后说明从起点到目的地，这是一个干净的名称，用于表示这个特定的航班，所以现在如果我回到交互式解释器，我可以说从
    flights.models 导入。
- en: flight I can say all right let's let a，variable called flight to be equal to。flight
    objects all and now flight is，going to be this flight slight one New。York to London
    it now has a much nicer a，string representation of the name which。just makes it
    a little bit easier to，interact with if I wanted to get just。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: flight 我可以说好的，让我们将一个变量叫做 flight 等于 flight 对象的集合，现在 flight 将是这趟从纽约到伦敦的航班，它现在有了一个更漂亮的字符串表示，这使得与它交互稍微容易一些，如果我想获取。
- en: that one flight I can say flight equals，flights dot first slice is a query set。first
    gets me that first flight and so，now I have this flight from New York to。London
    and just as in any Python object，I can begin to access properties of that。object
    I can say all right flight what，is your ID flight what is your origin。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 那个航班，我可以说 flight 等于 flights.first，这是一个查询集。first 获取我第一个航班，所以现在我有了这个从纽约到伦敦的航班，就像在任何
    Python 对象中，我可以开始访问那个对象的属性，我可以说好的，flight 你的 ID 是多少，flight 你的起点是什么。
- en: flight what is your destination flight，what is your duration and I can access。as
    values all of the properties of this，flight that I ultimately care about and。if
    I want to delete the flight I can say。![](img/6a8623f9000a2368ca4c4713a3565a72_15.png)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: flight 你的目的地是什么，flight 你的飞行时长是多少，我可以访问所有我最终关心的这个航班的属性值。如果我想删除这个航班，我可以说。
- en: something like flight dot delete now，ultimately though this is not the model。that
    I actually want to represent my，flight because here again I'm using a。character
    field a char field for things，like origin and destination when in。reality I probably
    like to use something，like another table for representing air，airports。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 类似于 flight.dot delete 现在，最终虽然这并不是我实际想要表示的航班模型，因为在这里我再次使用字符字段来表示起点和目的地，而实际上我可能希望使用另一个表来表示机场。
- en: some relationship between every flight，and an airport so let's go ahead and
    try。and implement that idea now that I can，go back into model spy it and create
    a。new class I'll create a class called，airport that is also a model and I'd。like
    for this Airport class to have a，code which is a character field with a。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 每个航班和一个机场之间存在某种关系，所以让我们继续尝试实现这个想法，现在我可以回到模型中并创建一个新的类，我将创建一个名为 airport 的类，这也是一个模型，我希望这个机场类有一个代码，这是一个字符字段。
- en: max length of 3 for the airport's code，as well as a city which would be a。character
    field with a max length of  sixty-four  ，and let's also give this Airport a。string
    representation will say that the，string representation of an airport will。just
    be the city of the airport and then，in parentheses the code of the airport。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 机场代码的最大长度为 3，城市则是一个最大长度为六十四的字符字段，我们还为这个机场提供一个字符串表示，字符串表示将是机场所在城市，然后在括号中是机场代码。
- en: so it'll be something like New York and，then in parentheses JFK to represent
    a。particular airport and now our flight，model needs to change a little bit。no
    longer will origin and destination be，character fields that are just storing。text
    but instead origin is going to be a，foreign key a foreign key that。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 所以它会是像纽约这样的名称，然后在括号中是 JFK 来表示特定机场，现在我们的航班模型需要稍作更改，不再将起点和目的地作为仅存储文本的字符字段，而是起点将成为一个外键，一个外键。
- en: references another table like the，airport table and then I can provide。some
    additional arguments so this alone，would be enough but I can add some。additional
    arguments like on delete，equals models dot cascade so what does。this mean well
    when I have tables that，are related to each other。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 引用另一个表，比如机场表，然后我可以提供一些额外的参数，这样单独这些就足够了，但我可以添加一些额外的参数，比如 on delete 等于 models.dot
    cascade，那么这意味着什么呢？当我有相互关联的表时。
- en: sequel me in some way of knowing what，should happen if you ever delete。something
    if I have a flight from JFK to，London and I sign it later in the later。in time
    decide to delete JFK Airport，from my database what should happen to。that flight
    like what happens to flights，when the thing that it is referencing。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: SQL中以某种方式知道如果你删除某个东西时会发生什么，如果我有一趟从JFK到伦敦的航班，而我在稍后的时间决定从我的数据库中删除JFK机场，那么这趟航班会发生什么，就像当它引用的东西消失时航班会发生什么。
- en: gets deleted what models dot cascade，means is if I were to ever delete an。airport
    from the airport's table it's，going to also delete any of the。corresponding flights
    and there are，other on delete parameters you can set。for saying like don't even
    let me delete，an airport if there are flights that are。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 被删除时，`models dot cascade`的意思是如果我从机场表中删除一个机场，它也将删除任何相应的航班，还有其他在删除时的参数，你可以设置，例如，如果还有航班的话，甚至不让我删除一个机场。
- en: leaving from or going to that Airport，that's called models not protect but。there
    are other ways of implementing，similar types of constraints and the。other argument
    that I'm going to provide，it is what's called a related name and a。related name
    as we'll see in just a，moment is going to be a way of me。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 从那个机场起飞或前往那个机场，这称为模型，不保护，但有其他方法可以实现类似类型的约束，而我将提供的另一个参数被称为相关名称，正如我们稍后将看到的，这将是我。
- en: accessing a relationship in the reverse，order that from a flight I can take
    a。flight and say dot origin to，the flights origin in airport but the。other question
    I want to ask is in the，reverse order if I have an airport how。do I get all of
    the flights that have，that Airport as an origin and so here if。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 以反向顺序访问关系，从航班我可以使用航班的原点调用`dot origin`，但我想问的另一个问题是，如果我有一个机场，如何获取所有以该机场为出发地的航班，因此在这里如果。
- en: I give a related name to this foreign，key Django will automatically set up the。relationship
    going in that opposite，direction and so here well if we have an。airport and I
    want to know all of the，flights that have that Airport as their。origin the reasonable
    name for a related，name here is something like departures。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我给这个外键一个相关名称，Django会自动设置相反方向的关系，因此在这里，如果我们有一个机场，我想知道所有以该机场作为出发地的航班，相关名称的合理名称类似于出发。
- en: so if I have an airport I can access all，of the departures which gets me all
    of。the flights that are leaving from that，Airport and I'll likewise do the same。thing
    here for destination instead of a，character field it's going to be a。foreign key
    it's going to reference，airport when we delete it will go ahead。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我有一个机场，我可以访问所有的出发，这样我就能获取所有从那个机场起飞的航班，我在目的地这里也会做同样的事情，取而代之的是，它将是一个外键，它将引用机场，当我们删除它时，它会继续进行。
- en: and cascade and the related name will be，arrivals because if I have an airport
    I。might want to access all of the arrivals，all of the flights that correspond
    to。flights that are arriving at that，particular destination and so now I've。done
    two things I've added a new class，called airport and I've modified in my。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 和级联，相关名称将是到达，因为如果我有一个机场，我可能想访问所有的到达，所有与在特定目的地到达的航班对应的航班，因此现在我已经做了两件事，我添加了一个新类，称为机场，并且我在我的。
- en: existing flight model so this is changed，in my Python code but it hasn't yet。![](img/6a8623f9000a2368ca4c4713a3565a72_17.png)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 现有的航班模型，这是在我的Python代码中更改的，但还没有！
- en: changed in my database so in order to，make the change in the database again。it's
    a two-step process step one，Python managed PI make migrations to say。look for
    any new changes that have been，made to model CI and go ahead and create。a migration
    instruction for how to make，those changes to the database and here。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在我的数据库中进行更改，因此为了在数据库中进行更改，再次是一个两步过程，第一步，Python managed PI make migrations，说找出模型CI中进行的任何新更改，并继续创建如何对数据库进行这些更改的迁移指令，在这里。
- en: we see that we've created a new，migration file and this migration is。going to
    create a model called airport，and it's also going to alter the。destination field
    and alter the origin，field on my flight model because as we。know we've changed
    destination and，origin to no longer be character fields。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们看到我们创建了一个新的迁移文件，这个迁移将创建一个叫做机场的模型，并且它还会改变目的地字段和我航班模型中的出发地字段，因为我们知道我们已经将目的地和出发地不再是字符字段。
- en: but to instead be references to a，particular airport so that's something。that's
    going to need to change in the，database and to make that change。I can run something
    like Python managed，PI migrate to go ahead and apply those。changes we've now applied
    this migration，that we just created and our database is。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 而是引用特定的机场。因此，这需要在数据库中进行更改，要进行更改，我可以运行类似Python managed PI migrate的命令，继续应用这些更改。我们已经应用了刚创建的迁移，我们的数据库也更新了。
- en: now up to date so what can we do well，now I can go ahead and go back into the。show
    and I'll just go ahead and import，from flights，that model is import star import。everything
    and I can now create an，airport I can say something like JFK。equals an airport
    whose code is JFK and，whose city is New York for example and。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在是最新的，那么我们能做什么呢？我可以继续回到显示页面，我将导入航班模型，从中导入所有内容。我现在可以创建一个机场，可以说JFK是一个机场，代码为JFK，城市为纽约。
- en: then save that I can create a London one，some lhr as an airport whose code is
    la。charm and whose city is London and I can，save that you know you could create
    more。I could say C D G equals an airport，whose code is C D G and city is *****。and
    maybe we'll do one more will say n R，T is the airport whose code is NRT and。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我可以创建一个伦敦的机场，代码为LHR，城市为伦敦，并保存。你知道的，你可以创建更多，我可以说CDG是一个机场，代码是CDG，城市是*****。或许我们再做一个，NRT是一个机场，代码是NRT。
- en: and whose city is Tokyo for example so，I've created and saved for airports that。get
    added to my airport table and now I，can add a flight F equals flight whose。origin
    equals JFK whose destination，equals London Heathrow and whose。duration equals
    four hundred and fifteen，minutes and I'll go ahead and save that。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，东京的城市，所以我创建并保存了机场，这些机场会被添加到我的机场表中，现在我可以添加一个航班F，航班的出发地为JFK，目的地为伦敦希思罗，持续时间为四百十五分钟，我会继续保存这个。
- en: as well so I've now created four，airports I've created a flight and saved。it
    if I type F just for my flight I see，that all right this is a flight from New。York
    to London but I can also say what，is f dot origin and to write F dot。origin that
    is now an airport object its，JFK in particular and I can do F dot。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经创建了四个机场，创建了一个航班并保存了它。如果我输入F，代表我的航班，我看到这是一个从纽约到伦敦的航班，但我也可以说F的出发地是什么，写下F的出发地，现在这是一个机场对象，特别是JFK。我可以进行F的操作。
- en: origin dot city to get the city of the，origin which is New York F dot origin。code
    to get the code of that Airport，which is JFK and if I start with in。origin something
    like JFK or London，Heathrow I can say LH r dot arrivals to，*****，*****。London
    Heathrow and it looks like，there's just one of them which is this。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 使用origin.city获取出发地的城市，也就是纽约，F的origin.code获取那个机场的代码，即JFK。如果我从出发地开始，比如JFK或伦敦希思罗，我可以说LHR的到达航班到*****，*****伦敦希思罗，看起来只有一个，就是这个。
- en: flight that I've just created from New。![](img/6a8623f9000a2368ca4c4713a3565a72_19.png)
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我刚刚创建的航班从纽约出发。![](img/6a8623f9000a2368ca4c4713a3565a72_19.png)
- en: York that is going to London as well and，so this now gives us the ability to。manipulate
    sequel just by using these，Python models and I now have Python。classes that represent
    all of these，various different types of data and now。instead of running sequel
    queries like，select star from flights or from。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 纽约的航班前往伦敦。因此，这使我们能够仅通过使用这些Python模型来操控SQL，现在我有Python类来表示各种不同类型的数据，而不是运行SQL查询，比如从航班中选择所有。
- en: airports I can just interact with these，classism and these properties on the。classes
    and django takes care of the，process for me of figuring out what the。underlying
    sequel queries should be，those results，back to me and we can begin now to。design
    a web application around this，idea that I can go into URL stop PI and。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我可以与这些类和类中的属性进行交互，Django为我处理确定底层SQL查询的过程，并将结果返回给我。现在我们可以围绕这个想法设计一个网络应用程序，我可以进入URL
    stop PI并保存。
- en: let's add a URL pattern that says you，know the default route will go ahead and。load
    the index view give it a name of，index same as similar things we've seen。from
    last time and now what should we do，in the index view，well the index view let's
    go ahead and。say what I would like to do is just，display a list of all the flights
    so I。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们添加一个URL模式，说明默认路由将继续加载索引视图，给它一个名称为索引，这与我们上次看到的类似。那么我们该在索引视图中做什么呢？索引视图中，我想做的是显示所有航班的列表。
- en: might from dot models import flight and，Airport or maybe I just need flight
    I。just want a list of all the flights so，I'm going to import flight from all of。my
    models and now what I'd like to do is，return let's go ahead and render a。template
    called flight slash index dot，HTML and give index。html access to a。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 可能从点模型导入航班和机场，或者我只是需要航班。我只想要一个所有航班的列表，所以，我将从所有的模型中导入航班，现在我想做的是，返回让我们继续渲染一个。名为航班的模板，斜杠索引点，HTML，并给索引。html访问一个。
- en: variable called flights and what is that，variable going to be equal to it's
    gonna。be equal to flight got objects dot all，to get me like all of the flights
    that I。would like to put right here all right，so what can I do from now now what
    I。need to do is actually create those，individual templates so inside of。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 一个叫做航班的变量，这个变量将等于什么，它将等于航班对象的所有，以获取我想放在这里的所有航班，好吧，那么我现在可以做什么，我需要做的是实际创建那些，单独的模板，所以在。
- en: flights I'll create a new folder called，templates inside of which I'll create
    a。new folder called flights inside of，which I'll go ahead and create a layout。dot
    HTML much as we've done before where，that layout is going to contain the。basic
    structure of our HTML page so a，head section is title as flights and a。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我将创建一个名为模板的新文件夹，在其中创建一个名为航班的新文件夹，在其中继续创建一个布局。点HTML，就像我们之前做的那样，该布局将包含我们的HTML页面的基本结构，因此，头部分将标题设置为航班，并且。
- en: body section that it's going to have a，block body and the end of the block much。as
    before this is the default layout for，this particular page and then I'll add a。new
    template called index。html that is，going to extend flight slash layout dot。HTML
    and then inside the body of the，page I'm going to display an h1 that。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 正文部分将有一个块体和块的结束，就像之前一样，这是该页面的默认布局，然后我将添加一个新的模板叫索引。html，这将扩展航班斜杠布局点。HTML，然后在页面的主体部分，我将显示一个h1。
- en: just says flights and let's now create，an unordered list where I can now loop。over
    for flight in flight and for to end，the loop but inside the loop let me。create
    a list item where I just print，out like flight maybe I'll print a。flight and then
    flight ID to print out，like flight one fly two flight。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 只是说航班，现在让我们创建一个无序列表，我可以在其中循环，航班中的航班，结束循环，但是在循环内让我创建一个列表项，我只是打印，像航班，也许我会打印一个。航班，然后航班ID打印出，像航班一航班二航班。
- en: '![](img/6a8623f9000a2368ca4c4713a3565a72_21.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a8623f9000a2368ca4c4713a3565a72_21.png)'
- en: and then I'll print flight origin to，flight destination so what I've done。here
    is create a template that I'm going，to give access to a variable called。flights
    where flights is going to be a，variable that represents all of the。flights that
    I queried by running flight，objects all that is my way using。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我将打印航班起点到航班目的地，所以我所做的是创建一个模板，我将给予一个变量的访问权限，叫航班，其中航班将是一个代表所有的。航班的变量，这些航班是我通过运行航班对象的所有查询得到的，这就是我的方式。
- en: Django's api using the functions that it，has given me access to to say take
    the。flight and get all of the flights that，are stored inside of Django's database。then
    here in the template I'm looping，over each one of those flights for each。one printing
    out a list item where I can，access properties of that flight say。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: Django的API使用它所提供给我的功能来获取航班，并获取存储在Django数据库中的所有航班。然后在模板中，我对每一个航班进行循环，打印出一个列表项，让我可以访问该航班的属性。
- en: flight this ID from origin to a，particular destination so now I'll go。ahead
    and go into my terminal run Python，manage pi run server which again is how。![](img/6a8623f9000a2368ca4c4713a3565a72_23.png)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 航班这个ID从起点到特定目的地，现在我将进入我的终端，运行Python，管理pi运行服务器，这也是如何。![](img/6a8623f9000a2368ca4c4713a3565a72_23.png)
- en: we run and django web application and，now if i go to that URL slash flights。![](img/6a8623f9000a2368ca4c4713a3565a72_25.png)
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行Django网络应用程序，现在如果我去那个URL斜杠航班。![](img/6a8623f9000a2368ca4c4713a3565a72_25.png)
- en: this time because that's the URL what i，see is exactly what it would expect
    to。see an unordered list that just so，happens to have a flight one new york to。london
    displayed there it is taking data，from my database and now displaying it。inside
    of this template and if I were to，add new flights it would also update on。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这次因为这是URL，我看到的正是我所期望的。看到一个无序列表，正好有一个从纽约到伦敦的航班在显示，正在从我的数据库中获取数据，现在在这个模板中显示出来，如果我添加新的航班，它也会更新在。
- en: this page as well so if I go ahead and，go back go into the shell Python managed，up
    pie shell。I'll go from flights models import star，let's go ahead and well alright
    let's， ***** 。example well how do I get the airport's，for ***** in ***** well
    it turns out。that if I want to get like ***** I，can say like ***** equals airport
    dot。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 这个页面也是如此，所以如果我继续，回到 Python 管理的 shell。我要从 flights models 导入 star，接下来我们继续，好吧，让我们*****。例如，我该如何获取*****的机场，在*****中呢？结果表明，如果我想获取像*****这样的内容，我可以说像*****等于
    airport.dot。
- en: objects dot and then I can say if I do，airport objects on all that gets me all。of
    the airports for example oh and it，seems I don't actually have a *****。one but
    I can add one if I wanted to but，if I do airport objects dot all that。again gives
    me all of them but if I want，to filter my airport's list not get all。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: objects.dot，然后我可以说如果我做 airport.objects 所有，那会获取到所有的机场。例如哦，似乎我并没有实际拥有一个*****。但是如果我想的话，可以添加一个，但如果我做
    airport.objects.dot.all，那会再次给我所有的机场。如果我想要过滤我的机场列表，而不是获取所有的。
- en: of the airports but just get some of，them I can say airport dot objects dot。filter
    and I can say like get me all the，airports where the city is New York for。example
    and that is going to he'll go，ahead and give me a query set that only。contains
    the results that I care about，so again airport object stop filter lets。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 机场中的一些，但只获取其中的一部分，我可以说 airport.dot.objects.dot.filter，并且我可以说像获取所有城市是纽约的机场。例如，这将会给我一个查询集，只包含我关心的结果，所以再次
    airport.object.stop.filter 让我们。
- en: me constrain the results that come back，not get me all of the airports but only。get
    me airports whose city is New York，for example and it opens only giving。back one
    so I could say that filter is，City equals in New York dot first to say。take that
    query set and just get me the，first and only thing in that query set。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 限制返回的结果，不获取所有的机场，而是只获取城市是纽约的机场，例如，这样只会返回一个，所以我可以说这个过滤条件是 City 等于纽约，然后取这个查询集的第一个，得到我只想要的查询集中的第一个和唯一的项。
- en: and that gives me Airport New York a，simplified way of doing the same thing。if
    you know you're only going to get one，result back if I can say something like。Airport
    objects dot get which will only，get one result if it knows that there's。only going
    to be one Airport with the，city of New York that too will return to。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这给我纽约机场，简化了同样的操作方法，如果你知道你只会得到一个结果的话，我可以说像 airport.objects.dot.get，这将只获取一个结果，如果它知道在纽约只有一个机场的话，这也会返回。
- en: me New York JFK Airport but it will，throw an error if ever there's more than。one
    or if there's none for example so we，go ahead and save that inside of JFK and。we'll
    go ahead and create a flight that，is going from New York to ***** for。example
    I can do C DG equals airport，objects get city equals ***** and now I。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 纽约JFK机场，但如果航班超过一个或没有航班时会抛出错误，例如，我们继续把它保存在JFK中。接着我们创建一个从纽约到*****的航班。例如，我可以设定
    C DG 等于机场对象，获取城市等于*****，现在我。
- en: have this variable CDG which represents，the airport ***** and if I want to。create
    a new flight that goes from New，York to ***** I can say F is going to be。a flight
    whose origin is JFK whose，destination equals C D G and whose。duration equals 435
    and I can save that，flight as well and so I've added a new。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我有这个变量 CDG，它代表机场*****，如果我想创建一个从纽约到*****的新航班，我可以说 F 将是一个航班，其起点是 JFK，目的地等于 C D
    G，持续时间等于 435，我也可以保存这个航班，所以我添加了一个新的。
- en: '![](img/6a8623f9000a2368ca4c4713a3565a72_27.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/6a8623f9000a2368ca4c4713a3565a72_27.png)'
- en: flight and so now if I run the server，Python managed up I run server refresh。the
    page I now see that I have two，flights one flight that's going from New。![](img/6a8623f9000a2368ca4c4713a3565a72_29.png)
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 航班，所以现在如果我运行服务器，Python 管理了一下，我刷新了页面，现在看到有两个航班，一个是从纽约出发的。![](img/6a8623f9000a2368ca4c4713a3565a72_29.png)
- en: York to London one flight that's going，from New York to ***** but of course。it's
    going to be pretty annoying if，every time I want to update the data。adding new
    data manipulating the data I，need to go into the shell in order to。run direct
    commands so they're able to，add new flights add new airports so on。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 从纽约到伦敦的航班，是从纽约出发的*****，但当然每次我想更新数据时，添加新数据或操作数据时，必须进入 shell 以运行直接命令，这样才能添加新航班、新机场等等。
- en: and so forth what I'd really like to be，able to do is just very simply to add
    it。via a web interface via the web be able，to say alright let me add a new flight。that
    goes from location 1 to location 2，and it's possible using the information。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，我真正想要做的就是通过网络接口非常简单地添加它。通过网络，我能够说好，让我添加一个新的航班。这个航班从位置1到位置2，并且可以使用这些信息。
