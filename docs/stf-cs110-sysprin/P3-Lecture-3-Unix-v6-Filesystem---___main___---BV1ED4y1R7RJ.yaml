- en: P3：Lecture 3 Unix v6 Filesystem - ___main___ - BV1ED4y1R7RJ
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P3：讲座3 Unix v6文件系统 - ___main___ - BV1ED4y1R7RJ
- en: Welcome。 Welcome back to CS110。 How is the summit one going？ You guys started
    it。 I know a bunch of people started。 I've seen you in， office hours。 There will
    be more office hours。 If not today and tomorrow definitely on Sunday and then
    next week as well， we'll have a full list。 available。 So I hope it's going all
    right。 And I hope it's not bringing that too many memories of like pointer math
    and things that we're kind of tricky to learn。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎。欢迎回到CS110课程。**峰会**进行得怎么样？你们开始了吗？我知道有一群人已经开始了。我在办公时间见过你们。以后还会有更多的办公时间。如果今天和明天不行，那肯定会有星期天的办公时间，然后下周也会有，我们会提供完整的时间表。所以希望一切顺利。我也希望它不会带给你们太多像指针运算之类的回忆，那些曾经很难学的东西。
- en: but you're getting back up to speed。 And then you're learning a little more
    C++， et cetera。 Let's see。 Sunday at noon。 Lab sign up will open up。 There are
    most of the labs sections。 whatever you want to call them， are on Fridays right
    now。 Like next week。 many of you will be in your section instead of here。 There
    are a few sections on Thursday。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你们正在恢复状态，同时还在学习更多的C++，等等。再说一次，星期天中午，实验室报名将开放。目前大多数实验室部分，或者说你们可以称之为“组”，安排在星期五。下周，很多人可能会在你们的实验室小组而不是这里。也有少数小组安排在星期四。
- en: So if you do need a Thursday section， sign up， try to get on there and sign
    up as early as possible。 If you're like， oh， I don't can't do Friday。 Although
    most of you should be able to do Friday for what it's worth。 But if you can't
    do that， then get on there and do that。 If for some reason you can't find a time
    that fits your schedule。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确实需要一个星期四的组，请尽早报名。如果你说，哦，我不能参加星期五的组，虽然大多数人应该能够参加星期五的组。可是如果你不能参加，那就尽早报名。如果因为某些原因找不到合适的时间来匹配你的日程。
- en: let me know and we'll try to figure something out。 You do have to go to some
    section。 but we will figure it out。 So that's going to open up on Sunday at noon
    and there's a link on the class website that will go straight to the sign up page。
    I think that's about it for announcements。 I think that's about it。 All right。
    Let's get going。 So today we're actually not going to see any code today。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有问题，告诉我，我们会尽量找出解决方案。你们确实需要去某些特定的部分，但我们会想办法解决。所以这个报名链接会在星期天中午开放，课程网站上会有直接链接到报名页面。我想这就是所有的通知了。大概就是这些。好了，开始吧。今天我们实际上不会看任何代码。
- en: So what we're going to do though is we are going to learn about the Unix version
    six file system。 Now， why do I say it like that？ We're not just learning about
    file systems in general。 We're going to learn about a very specific one to show
    you an idea of how a file system is built。 So not necessarily the way you would
    build one today or the way people have built them for the last 20 years or so。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们今天要做的就是学习Unix第六版文件系统。那么，为什么我这样说？我们不仅仅是学习一般的文件系统。我们将学习一个非常具体的文件系统，给你们展示文件系统是如何构建的。所以这不一定是你今天构建文件系统的方式，也不一定是过去20年来人们构建文件系统的方式。
- en: I think the version six files came out in 1978 or something like that when computers
    were actually somewhat different。 But it still works and you can still run an
    emulator and actually use that kind of file system。 So generally think of this
    as a case study in how to build a file system。 So again。 don't think this is the
    only way to do it。 Don't even think this is the best way to do it necessarily。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得第六版的文件是在1978年左右发布的，那时的计算机其实和现在有些不同。但它依然有效，你仍然可以运行模拟器并实际使用那种文件系统。所以一般来说，可以把它看作是一个如何构建文件系统的案例研究。所以，别认为这是唯一的做法，也不要认为它一定是最好的做法。
- en: but it is a way to do it。 And it's a pretty good one。 And there were some very
    clever people who came up with it。 So that's what we're going to talk about today。
    And in fact。 the version six file system is exactly the file system that you need
    to program assignment to for。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 但它确实是一个方法，而且是一个相当不错的方法。还有一些非常聪明的人发明了这个方法。所以今天我们要讨论的就是这个。事实上，第六版的文件系统正是你们在编程任务2中需要用到的文件系统。
- en: And I'm going to go over three examples at the end of class today。 which should
    help you think through how you're going to code that up。 So stick around to the
    end and we'll see those examples。 All right。 Okay。 So if you've done CS 107 or
    even 106 B， you know that memory。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 今天课堂结束时，我会举三个例子，这些例子应该能帮助你们思考如何编写代码。所以坚持到最后，我们会看到这些例子。好了。好，既然你们学过CS107或甚至是CS106B，你们应该知道内存管理。
- en: at least RAM in your computer is we can think of it as one big long array。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 至少计算机中的RAM可以被认为是一个非常长的数组。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_1.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_1.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_2.png)'
  id: totrans-11
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_2.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_3.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_3.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_4.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_4.png)'
- en: Right， going from address zero to address whatever the maximum address or the
    maximum number of bytes of memory in your computer。 One long array， you can， you
    could access it with either pointer math or just an array。 And if the operating
    system allowed you to do that。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，从地址0到地址任意最大地址，或者是你计算机内存的最大字节数。就像一个长数组，你可以使用指针运算或直接用数组来访问它。如果操作系统允许你这样做。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_6.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_6.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_7.png)'
  id: totrans-16
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_7.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_8.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_8.png)'
- en: In fact， if you took CS 107 E， you'll realize that， oh。 if I have a bare metal
    hardware sort of system， I can access all sorts of memory。 which also means that
    you can dereference null pointers and nothing actually happens until later in
    your program when something crashes wildly。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，如果你参加了CS 107 E课程，你会意识到，哦，如果我有一个裸机硬件系统，我可以访问各种内存，这也意味着你可以取消引用空指针，而直到程序的后期，某些东西崩溃时才会发生错误。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_10.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_10.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_11.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_11.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_12.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_12.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_13.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_13.png)'
- en: But anyway， think of it as one big long byte addressable array。 That's the RAM
    system。 And when I say byte addressable， what does that mean？
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 但无论如何，想象它是一个大的、可以按字节寻址的数组。这就是RAM系统。当我说“字节寻址”时，这是什么意思呢？
- en: It means that you can adjust one byte of memory at a time。 You can't do one
    bit at a time。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你一次可以调整一个字节的内存。你不能一次调整一个位。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_15.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_15.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_16.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_16.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_17.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_17.png)'
- en: Right now， you can do masking and you can do bit masking and so forth。 But you're
    always working on at least one byte at a time。 Meaning that if you want to read
    something from memory， you're going to read eight bits out of it。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以进行掩码操作，进行位掩码等操作。但你总是至少一次操作一个字节。这意味着如果你想从内存中读取某些内容，你将一次读取8位。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_19.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_19.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_20.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_20.png)'
- en: And if you write something in memory， you're going to write eight bits to it。
    Okay。 That's how RAM works。 Now， the disk drive on your computer， and in fact。
    many of you guys don't even have disk drives in your computer。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你写入内存，你将写入8个位。好的，这就是RAM的工作原理。现在，计算机中的磁盘驱动器，事实上，许多人甚至没有磁盘驱动器。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_22.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_22.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_23.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_23.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_24.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_24.png)'
- en: You have an SSD， which is a solid state drive， which I guess is a， it's not
    a disk drive。 but it is a memory system that allows you to store information that
    persists when you turn your laptop off or crashes or whatever。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 你有一个SSD，固态硬盘，我猜它不算是磁盘驱动器，但它是一个内存系统，允许你存储在你关闭笔记本电脑或崩溃时依然能够持久化的信息。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_26.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_26.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_27.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_27.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_28.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_28.png)'
- en: That's what disks are all about。 They are generally relatively slow。 although
    SSDs are much faster because flash memory is pretty fast。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是磁盘的工作原理。它们通常比较慢，尽管SSD比传统硬盘快得多，因为闪存的读写速度非常快。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_30.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_30.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_31.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_31.png)'
- en: It used to be that disks， in fact， some of you probably still have these kind
    of disks on the computer。 used to be a cylinder that was actually spinning around
    and has little read heads that read one byte or。 well， they read more than one
    byte at a time， depending on the type of thing。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 以前，磁盘——实际上你们当中有些人可能还在使用这种磁盘——曾经是一个旋转的圆柱体，并且有一些读取头，可以读取一个字节，或者说，实际上它们一次读取不止一个字节，这取决于具体的类型。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_33.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_33.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_34.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_34.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_35.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_35.png)'
- en: You read what we call a block at a time。 And they would forward that to the
    operating system and the operating system can say。 save data as well。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你一次读取我们称之为“块”的数据。然后它们会转发给操作系统，操作系统可以继续处理这些数据。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_37.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_37.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_38.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_38.png)'
- en: Okay。 So the， so a disk has these things called blocks on them， okay， or sectors。
    You can kind of use those interchangeably。 I'll talk about the difference in a
    minute。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，所以，磁盘上有一些叫做块的东西，或者说是扇区。你可以把这两个词互换使用。稍后我会讲一下它们的区别。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_40.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_40.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_41.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_41.png)'
- en: But we can assume that there's some fixed amount of bytes per sector。 A lot
    of times it's 512。 On some disks it's as much as 4096 maybe， but it's a relatively
    small amount。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 但我们可以假设每个扇区有固定数量的字节。很多时候是512字节。在某些磁盘上，可能多达4096字节，但这仍然是相对较小的数量。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_43.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_43.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_44.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_44.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_45.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_45.png)'
- en: But that is the smallest chunk of data you can read or write from a drive。 Okay。
    If you want to read one byte from a drive， you can't。 You have to read all 512。
    And if you want to write one byte， you can't， you have to write all 512。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 但那是你从磁盘上可以读取或写入的最小数据块。好吧。如果你想从磁盘上读取一个字节，你不能。你必须读取全部512字节。如果你想写入一个字节，你也不行，你必须写入全部512字节。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_47.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_47.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_48.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_48.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_49.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_49.png)'
- en: Now， if you write one by， that you can keep track of up the other 512。 the operating
    system does or the hard drive itself does or what have you。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你按字节写入，你可以保持追踪其他512字节。操作系统或硬盘本身会做这件事，或者由其他什么方式来处理。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_51.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_51.png)'
- en: But that's the way it works。 Okay。 The size of the sector just happens to do
    with the disk itself or the。 like the type of disk it is and so forth。 Okay。 So，
    and you， it's a trade-off。 How big your sector is。 It's just a trade-off on how
    fast it is and a couple of other different things。 This is what it might look
    like and this should look very similar to the memory system， right？
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 但就是这样工作的。好吧，扇区的大小恰好与磁盘本身有关，或者说，它的磁盘类型等等。好吧，所以，这是一种权衡。扇区的大小就是如何影响速度以及其他一些不同因素的权衡。这看起来应该与你的内存系统非常相似，对吧？
- en: You've got sector zero， sector one， sector two， et cetera。 A sector zero would
    be bytes zero through 511。 That's probably a little small to read。 But anyway。
    that's the， like this is 512 bytes and then 512 bytes and you just access it that
    way。 Okay。 So that's how the hard drive or the solid state drive would work。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你有扇区零、扇区一、扇区二，等等。扇区零是字节从0到511。可能有些小，难以阅读。但无论如何，这是512字节，然后是另一个512字节，你就是这么访问它的。好吧。所以硬盘或固态硬盘就是这样工作的。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_53.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_53.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_54.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_54.png)'
- en: The API that the hard drive makes available to the operating system is actually
    very simple。 It's read and write basically。 You can read a sector and you can
    write a sector and that's about it。 You give a sector number and you read it，
    you give a sector number and you write it。 It's a little more nuanced than that
    but for the most part you can think of it that way。 And again。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 硬盘提供给操作系统的 API 实际上非常简单。基本上就是读取和写入。你可以读取一个扇区，也可以写入一个扇区，差不多就是这样。你提供一个扇区号，读取它，提供一个扇区号，写入它。虽然细节上更复杂一些，但大多数情况下，你可以这样理解。再一次。
- en: you have to write a whole sector or read a whole sector at once。 Okay。 That's
    the part that below that level you don't need to worry about。 Okay。 We're going
    to talk about kind of a much higher level of basically how do you take this thing
    here and this memory kind of model and map files to it and map information to
    it that persists。 et cetera。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须一次性写入或读取整个扇区。好的。这部分是低于此层次的内容，你不需要担心。好的，我们将讨论一种更高层次的内容，基本上就是如何将这里的东西以及这个内存模型映射到文件并映射持久化的信息，等等。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_56.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_56.png)'
- en: Okay。 All right。 Like I said， and I've already done this once or twice。 you
    may hear me say block and sector kind of interchangeably。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，明白了。就像我说的，我已经做过一两次了，你可能会听到我说块和扇区交替使用。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_58.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_58.png)'
- en: It turns out that the sectors are defined on the disk themselves， sector zero，
    sector one。 et cetera。 You can have another abstraction where it might be that
    multiple sectors are considered a block。 So you might have two sectors per block。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，扇区是在磁盘上定义的，扇区零、扇区一，等等。你可以有另一种抽象，其中多个扇区可以算作一个块。所以你可能每个块有两个扇区。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_60.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_60.png)'
- en: For our purposes and to make things a little simpler except in the case where
    we sometimes need to think of sector versus block。 you don't really normally need
    to do that。 We are going to just consider them being the same。 So if I say block，
    think sector， think of the chunk of memory on the drive that you can read and
    then you can write to。 That's what we're going to continue going forth with this
    lecture。 Okay。 All right。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，为了简化事情，除非我们有时需要区分扇区和块，否则通常不需要这么做。我们会把它们当作相同的来看。所以如果我说块，就当作是扇区，想象一下驱动器上你可以读取和写入的内存块。这就是我们将在接下来的讲解中使用的方式。好的，明白了。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_62.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_62.png)'
- en: So there is a diagram here。 Again， it might be a little hard to see from all
    the way in the back。 So pull it up on your slides。 You can't see it from all the
    way in the back。 But there's a diagram here that we're going to talk about。 Now，
    as I said。 this is one way to do a file system。 It happens to be the way some
    people decided to do it for a Linux or Unix version six back in the late 70s。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这里有一个图示。再说一次，从后排看可能有点难看到。所以请把它拉到你的幻灯片上。如果从后排看不清楚。这里有一个我们将要讨论的图示。正如我所说，这是实现文件系统的一种方式。恰好是一些人在上世纪70年代末为Linux或Unix版本六选择的方式。
- en: And what it does is it basically allows the files to be written on here so that
    you can quickly find them depending on your definition quick。 And then you can
    read the data from the drive in a way that is more or less efficient。 Okay。 And
    we'll see what we mean about that as we go along。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 它的作用基本上是允许文件写入这里，这样你可以根据你的“快速”定义来快速找到它们。然后，你可以以更高效或较低效的方式从驱动器读取数据。好的，我们在接下来的讲解中会详细解释这个意思。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_64.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_64.png)'
- en: Okay。 The first block， the first sector or block here is special。 Okay。 It's
    block zero。 It's called the boot block。 And we are not going to worry about that
    for the class。 But the boot block is basically what happens when you turn your
    computer on。 Well。 the first thing it needs to do is it needs to start the computer
    up。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，第一个块，第一个扇区或块是特别的。好的，它是块零。它被称为引导块。我们在课堂上不需要担心这个。但引导块基本上就是你开机时发生的事情。首先，它需要做的就是启动计算机。
- en: And you can do that in a kind of a couple different ways。 The first thing that
    Peter does is it actually reads from its own BIOS。 which is ROM memory inside
    the computer itself。 And if you don't have a hard drive attached to your computer
    at all。 it will usually read something from that BIOS， look for a hard drive and
    then not find it and say something like can't find a hard drive or can't find
    any boot drive or something like that。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用几种不同的方式来做这件事。Peter做的第一件事是，它实际上从它自己的BIOS读取数据，这就是计算机内部的ROM内存。如果你的计算机没有连接硬盘驱动器，它通常会从BIOS中读取某些信息，查找硬盘驱动器，找不到时，会显示类似“找不到硬盘”或“找不到启动驱动器”的消息。
- en: And then the first block， sector one is going to be on your system。 And that's
    almost universal。 Like hard drives kind of do that and they know to do that。 The
    second block is called the super block。 And the super block contains information
    about the file system itself as far as interacting with the operating system。
    Okay。 And again， these are things that are generally like put there by either
    when you format your drive or put there when the drive is created to begin with。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后第一个块，扇区一，将会出现在你的系统中。这几乎是通用的。就像硬盘驱动器通常会这样做，它们知道要这么做。第二个块叫做超级块。超级块包含了关于文件系统本身的信息，主要是与操作系统交互的部分。好的。再说一次，这些内容通常是在你格式化驱动器时，或者在驱动器最初创建时由系统写入的。
- en: We will not need to worry about those two sectors at all。 Okay。 The follow on
    sectors are where things start to get interesting。 Okay。 The rest of the disk
    is made up of two different parts。 There is a netta data part。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要担心那两个扇区。好的。接下来的扇区是事情开始变得有趣的地方。好的，磁盘的其余部分由两部分组成。一部分是元数据部分。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_66.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_66.png)'
- en: And then there is an actual data part of the drive。 Okay。 This diagram。 it makes
    it look like if you broke this up， there's a whole bunch of metadata here。 This
    whole part。 it's not really that much。 It's in fact less than 10%。 but we needed
    to make this at least big enough so that you could see it to the extent that you
    do。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是驱动器的实际数据部分。好的，这个图表，它让它看起来像是，如果你把它拆开，这里有一堆元数据。整个这一部分，实际上并没有那么多。实际上不到10%。但我们需要至少把它做得足够大，以便你能够看到它，直到你现在所看到的程度。
- en: Now， with metadata and data sharing this one long abstract kind of array sort
    of thing。 you might be starting to sweat a little because it sounds a little bit
    like a heap allocator。 Right？
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，元数据和数据共享这个长的抽象数组类型的东西，你可能会开始有点担心，因为这听起来有点像堆分配器。对吧？
- en: And you might be going， "Oh no。 Now I've got a deal with this。 Like metadata
    sharing the same space with the data。 And every time I put use some metadata。
    I take away from the actual disk space for the data itself。" And so forth。 And
    that's true。 although I think this is set up a little less like integrated so
    that we don't have to worry about it too too much。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想，“哦不，现在我得处理这个问题了。比如说，元数据和数据共享相同的空间。每次我使用一些元数据时，就会从实际的数据磁盘空间中扣除。”等等。这确实是对的，尽管我认为这个设置有点不像堆分配器那样集成化，因此我们不必过于担心这个问题。
- en: Okay。 The details of how the file system work itself are going to be enough
    to keep you busy。 So you don't have to worry too much about it being too much
    like the heap allocator。 But that's basically the same idea。 You've got all this
    memory。 You need to store both of the data itself that you're trying to store
    and metadata about the stuff you're going to store so you can find it。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。文件系统如何工作的细节本身就足够让你忙碌了。所以你不必太担心它会像堆分配器那样复杂。但基本上，概念是一样的。你拥有所有这些内存。你需要存储的不仅是你要存储的数据本身，还有关于你将要存储的东西的元数据，这样你才能找到它。
- en: So you can access it so you can get information about it whether it's a directory
    or a file or how big it is and so forth。 Okay。 What the permissions are and all
    that that's set in the operating system in the thing itself。 Okay。 So that's the
    basic idea of a file system of this file system。 Okay。 You've got a couple blocks
    that we don't worry about。 We've got a whole bunch of metadata in here。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以访问它，获取关于它的信息，无论它是目录还是文件，或者它有多大，等等。好的。权限是什么，以及所有这些设置是在操作系统中进行的，是在系统本身设置的。好的。所以这就是这个文件系统的基本概念。好的。你有几个我们不需要担心的块。我们有一大堆元数据在这里。
- en: And then we've got all the rest of it being data。 And this is 90% of the drive。
    Okay。 And depending on the file system that percentage can go up or down， I don't
    know if you can ever。 if you ever really run out of that metadata space， how the
    file system actually deals with it。 It might just say you look at a space or it
    might be able to take more data out of the rest of the hardware。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们有其余的部分是数据。这占据了硬盘的90%。好的。根据不同的文件系统，这个百分比可能会上下波动。我不知道你是否真的会用完元数据空间，文件系统如何处理它。它可能会说空间已满，或者它可能能够从其他硬件中获取更多的数据。
- en: I'm not 100% sure how that works。 And it's really not that pertinent。 Okay。
    All right。 So we have file。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我不是100%确定它是如何工作的。其实这并不是那么重要。好的。好了。所以我们有文件。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_68.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_68.png)'
- en: File payloads。 That's the actual data， much like the payload that you've dealt
    with in 107 if you did a heap allocator assignment。 And they're stored in 512
    byte chunks。 Well， that sounds like a good。 that sounds like a block size or sector
    size and in fact it is。 Okay。 So they。 the file payloads are stored 512 bytes
    at a time。 Unlike the heap allocator， when you assign a file。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 文件负载。这是实际的数据，就像你在107课程中处理的负载，如果你做了堆分配作业一样。它们以512字节为单位存储。嗯，这听起来像是一个不错的块大小或扇区大小，实际上就是这样。好的。所以文件负载是以512字节为单位存储的。与堆分配器不同，当你分配一个文件时。
- en: like when you have a file， it can use multiple blocks in different places on
    the drive。 It does not have to be contiguous。 Okay。 Which is good because it might。
    it means that you can set up your file and then add to it and then you don't have
    to go moving all this data around。 Okay。 There's no real like necessary。 Although，
    I should say that your hard drive and your drive can what we call fragment。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 比如，当你有一个文件时，它可以在硬盘上的不同地方使用多个块。它不需要是连续的。好的。这个特性很好，因为它意味着你可以设置好文件，然后继续向其中添加数据，不需要移动所有的数据。好的。没有什么真正必要的。不过，我应该说的是，你的硬盘和存储设备可能会出现所谓的碎片化。
- en: which means you've got all these different pieces all over the place。 And it
    is not quite as efficient to grab that data。 Depending on the buffering on your
    drive and so forth。 But again。 that's beyond the scope of what we're talking about
    now。 For now。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着你在各个地方都有这些不同的片段。而且要获取这些数据并不是那么高效。取决于你硬盘的缓存等因素。但再说一次，这超出了我们现在讨论的范围。暂时就这样。
- en: all we need to know is 512 byte chunks for your file。 Okay。 If you have a file
    that is one byte long， that file takes up 512 bytes on the drive。 Too bad。 Okay。
    That's the way it goes plus the metadata。 Alright。 Why is that the case？
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要知道的是文件的512字节块。好的。如果你有一个1字节长的文件，那么这个文件在硬盘上占用512字节。没办法。好的。就是这么回事，还有元数据。好吧。为什么会这样呢？
- en: Because 512 is the smallest amount that we can deal with。 And so therefore。
    we set it up so that our file has at least 512 bytes taken off the drive。 Okay。
    This is why tiny little files can actually end up using a lot more space than
    you might think。 Because the underlying space has got to be done in 512 byte chunks。
    Now。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 因为512是我们可以处理的最小单位。所以因此，我们将其设置为文件至少占用512字节的空间。好的。这就是为什么小文件实际上可能占用比你想象的更多空间。因为底层空间必须以512字节为单位来处理。现在。
- en: that's for this operating system。 And that's for this file system。 It may be
    that more advanced file systems have another way of dealing with this so that
    you don't have that limitation。 I'm not exactly sure about the newest ones or
    whatever。 But again。 this is one way of doing it and it's a way that seems to
    work。 Okay。 512 bytes is not that much。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这是针对这个操作系统的。这也是针对这个文件系统的。可能更先进的文件系统有其他处理方式，以避免这个限制。我不确定最新的文件系统是怎么处理的。但这依然是一种可行的方式，而且似乎是有效的。好的，512字节并不多。
- en: Even though you do that。 And most files are not one or two bytes generally。
    But that's that's it。 Even if it was a zero byte file， by the way， we'd have one
    block associated with it and zero bytes for that。 Okay。 When it's not 512， if
    it's more than 512， well， it takes more blocks in 512 byte chunks。 Okay。 The last
    one， if the file size is not a multiple of 512， is just a partial block。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你这么做了。大多数文件通常不会只有一两字节。但就是这样。顺便说一下，即使是一个零字节文件，我们也会为它分配一个块，里面没有字节。好的。如果文件大小超过512字节，那么它会占用更多的块，每个块512字节。好的。如果文件大小不是512的倍数，那么最后一个块就是一个部分块。
- en: So if you have a file that's 513 bytes， you have two blocks， right？ And 768，
    and so forth。 Or 512。 5， 1，025 would be one more。 Yeah。 What's the benefit of
    storing it as blocks of 512？
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你有一个文件是513字节，你需要两个块，对吧？768字节，以此类推。或者是512字节。1,025字节会是另一个块。是的。将其存储为512字节的块有什么好处呢？
- en: And what was the last part？ Well， that's a good question。 Is it just to make
    the calculations better？ It's the way they set up the drives。 And it's a little
    historical in that drive for setup that it wants to be able to read that much
    and write that much。 That's really what it is。 Why is it 512？ It's multiple of
    two。 I mean。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一部分是什么？嗯，这是个好问题。仅仅是为了让计算更准确吗？这是他们设置驱动器的方式。这种驱动器的设置有点历史性，它需要能够读取和写入这么多数据。这就是它的原因。为什么是512字节？因为它是2的倍数。我的意思是。
- en: that's the big reason why it's 512。 But the ability for it to do just those
    chunks。 we had to find the quantum， if you will， somewhere。 So they said， let's
    make it 512。 If we had made it one byte， drives would be way too slow。 If we made
    it four megabytes。 it would still be too slow because there would be other issues
    going on。 Good question。 Anyway。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它是512字节的主要原因。但是它能够处理这些块的能力，我们必须在某个地方找到量子，理解吧。所以他们说，让我们设定为512字节。如果我们设定为一个字节，硬盘会慢得不可思议。如果我们设定为四兆字节，它仍然会太慢，因为会有其他问题。好问题。不管怎么说。
- en: other questions before we keep going on this。 What we're going to do， basically。
    is I'm going to go through this stuff and then we're going to do three big examples
    that， well。 they're not that big。 But three examples of doing this that I think
    you'll see how this works if you are a little bit confused about it。 OK， so this
    diagram down here， again， it's a little bit hard to see。 But let me bump this
    up here。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前有什么问题吗？基本上我们要做的就是，我将通过这些内容，然后我们会做三个大的示例，嗯，实际上并不算太大。但是我认为如果你有点困惑的话，做这三个示例你会看到它是如何工作的。好了，这个图示在这里，虽然有点难以看清，但让我放大一下。
- en: There are actually two files on here that we'll see。 A 32 byte file and a 1028
    byte file。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这里实际上有两个文件，我们将看到它们。一个是32字节的文件，另一个是1028字节的文件。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_70.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_70.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_71.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_71.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_72.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_72.png)'
- en: OK， and here's how this works in this kind of color coded for you here。 OK。
    there is the file that is in green。 Again， I apologize to people who can't differentiate
    the colors。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这就是它在这里如何工作的，已经为你做了颜色编码。好的。绿色的部分是文件。再次为那些无法分辨颜色的人道歉。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_74.png)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_74.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_75.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_75.png)'
- en: But the filing green here is a file that has three blocks associated， 1，025，
    1，027， 1，028。 And each one of those blocks is 512 bytes。 And the file itself happens
    to only have 1。028 bytes associated with it。 So it uses a full block here and
    then a full block here and then a tiny little part of the next block。 So the way
    that goes。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 但是绿色的文件表示它有三个关联的块，分别是1,025，1,027，1,028。而每个块的大小都是512字节。文件本身恰好有1,028字节。因此它使用了一个完整的块在这里，另一个完整的块在这里，然后在下一个块中使用了一个小小的部分。就是这么回事。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_77.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_77.png)'
- en: OK， and the other file was just a 32 byte file， which is here， which is going--
    well。 it's actually-- it turns out it's over here。 But the information about it
    is here。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，另一个文件只是一个32字节的文件，位于这里，实际上它是在这里。不过关于它的信息就在这里。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_79.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_79.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_80.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_80.png)'
- en: And it uses this block here， 32 bytes worth。 That's that。 OK， question。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 它使用了这个块，大小为32字节。就是这样。好的，问题。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_82.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_82.png)'
- en: '[ Inaudible ]， Right， there''s good question。 Would it be possible for files
    to share a block？'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '[听不清楚]，对，问得好。文件是否可能共享一个块？'
- en: Not with this operating system。 OK， so if you have 10 files and they're all
    one byte。 you need 10 different 512 byte blocks。 Some other file system may have
    that， but this one does not。 Good question。 Other questions？ OK， so let's move
    on。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作系统不支持。好的，如果你有10个文件，而它们都是一个字节，你需要10个不同的512字节块。其他一些文件系统可能支持这种情况，但这个不行。好问题。还有其他问题吗？好了，我们继续。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_84.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_84.png)'
- en: We need to track which blocks are used to store those payloads， right？
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要追踪哪些块被用来存储这些负载，对吧？
- en: The whole point of this is if we've got a file spread out among the disk here，
    well。 we better be able to find it， right？ And you might think， oh。 maybe we'll
    have some sort of linked lists where it goes on and then finds the other--。 that's
    one way to do it。 It's not the way this does it。 But that is one way to do it。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切的关键是，如果我们的文件在磁盘上分散存储，我们最好能够找到它，对吧？你可能会想，哦，也许我们会有某种链表，它会继续查找下一个——这是一种做法。虽然这不是它的做法，但那的确是一种方法。
- en: The way this does it is it has the blocks that are used for the file listed
    in a particular place on the drive in that metadata area。 OK， down here。 OK。 And
    they will-- it lists them in what we call an i-node。 OK。 And an i-node is a 32-bit
    data structure for this operating system。 It might be different for others。 But
    for this operating system， it's 32 bytes。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 它的做法是把文件使用的块列在磁盘上一个特定的位置，即元数据区域。好的，在这里。好的。它们会——我们称之为i节点，列出这些块。好的。i节点是一个32位的数据结构，适用于这个操作系统。其他操作系统可能会不同。但对于这个操作系统，它是32字节。
- en: I'm sorry if I said bits。 It's 32 bytes data structure。 And it stores the information
    about a single file。 OK。 You get things like the file size。 You get the permissions。
    You get when it was created or modified， right？
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 对不起，如果我说成是比特。它是32字节的数据结构。它存储有关单个文件的信息。好的。你会得到像文件大小这样的信息。你会得到文件权限。你会知道它是何时创建或修改的，对吧？
- en: And you get the blocks that are all there。 And the important ones that we care
    about are the file type。 That could be either a directory or a file or a link，
    as it turns out。 And also the file size。 which is going to be critical。 And in
    fact， the file size is the part that people get most confused about when they
    look at this operating-- when they look at this file system。 OK。 And what it is
    is this block or this i-node， OK， lists all that information。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你会得到所有存在的块。而我们关心的关键点是文件类型。它可以是目录、文件或链接。还有文件大小，这个是至关重要的。实际上，文件大小是人们在查看这个操作系统时最容易混淆的部分，尤其是在查看这个文件系统时。好的。实际上，这个块或i节点，好的，列出了所有这些信息。
- en: And it has space for up to eight different block numbers。 The block numbers
    are the ones that show which block-- tell which blocks in order the file is located
    in。 OK。 So if you've ever had your hard drive crash， by the way-- and there's
    various ways of hard drives crashing。 But sometimes it can crash。 And if it wipes
    out the metadata here。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 它有空间存储最多八个不同的块编号。这些块编号标明了文件所在的各个块的顺序。好的。所以如果你曾经遇到过硬盘崩溃——顺便说一下，硬盘崩溃有很多种方式。但有时候它会崩溃。如果它抹掉了这里的元数据。
- en: you will almost never be able to get your files back。 Because they're spread
    all around the disk and they're just data。 And so there's no way to reconcile
    where they are。 So the various drive manufacturers do fancy things like they keep
    backups of this area somewhere else on the drive。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 你几乎永远无法找回你的文件。因为它们分布在磁盘的各个地方，本质上只是数据。所以没有办法知道它们具体在哪儿。因此，各个硬盘制造商会做一些复杂的事情，比如把这个区域的备份存储在磁盘的其他地方。
- en: And they do things that try to make it so that if your car drive does crash。
    you can get the data back。 But in this case， if the metadata is gone， your file
    is just out there。 512 bytes at a time， just out there。 So there's no real way
    to get that back easily。 Yeah。 [INAUDIBLE]， Ah， that's such a good question。 What
    if your file is more than eight blocks long？
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 它们会做一些尝试，以确保如果你的硬盘崩溃，你仍然可以找回数据。但在这种情况下，如果元数据丢失了，你的文件就在那里。每次512字节的存储，就在那儿。所以没有办法轻松地找回它。是的。[不清楚]，啊，这是个好问题。如果你的文件超过了八个块长怎么办？
- en: We will get there。 But that's a very good follow-on question。 OK。 But we'll
    get there and they thought of that， of course。 Because that's a good question。
    Because if 512 times eight is like 4，096， and even in 1978， files were bigger
    than four kilobytes。 So that's a good question。 Right？ So we'll have to deal with
    that。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会谈到这个问题。但这是一个非常好的后续问题。好的，我们会讨论这个问题，他们当然考虑到了这一点。因为这是一个很好的问题。如果512乘以8是4,096，那么即使在1978年，文件的大小也大于四千字节。所以这是一个很好的问题，对吧？所以我们需要处理这个问题。
- en: But keep that in your mind for another few minutes。 OK。 Regardless， the i-nodes
    themselves， well。 they go into blocks。 OK？ Because they're， that's part of the
    thing。 And what it is is you can fit 16 i-nodes。 This diagram is a little bit
    off。 This actually only had this diagram shows that there's only four i-nodes
    per block。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 但先记住这个，再等几分钟。好的，无论如何，i-node 本身，它们是存储在块中的。好的？因为它们是，这就是一部分。你可以在一个块中容纳 16 个 i-node。这个图有点不对，这个图实际上只显示每个块有四个
    i-node。
- en: Don't worry about the numbers specifically down there。 Just know that for this
    file system。 you can store 1632 bite i-nodes in one sector or one block。 OK。 That's
    going to be critical when you do your assignment。 OK。 And each one of those refers
    to a particular file or a particular directory on the disk。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 不必特别关注下面的数字。只需要知道，对于这个文件系统，你可以在一个扇区或一个块中存储 1632 个字节的 i-nodes。好的，这在你做作业时非常关键。每个
    i-node 都指向磁盘上的一个特定文件或目录。
- en: And when I say directory， a directory is a file。 It's just a special type of
    file。 You'll see what you'll see what that means when we do the examples。 OK。
    All right。 So let's look a little bit more at what this i-node actually does。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 当我说目录时，目录是一个文件。它只是文件的一种特殊类型。你将在做例子时看到这意味着什么。好的，明白了。那么，让我们再看一下这个 i-node 实际上是怎么工作的。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_86.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_86.png)'
- en: So the i-node 2 here， OK， which would be down down here in green。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这个 i-node 2，在这里，好的，它会在绿色的地方。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_88.png)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_88.png)'
- en: Now I'm going to make this a little bigger so you can see it。 But the one in
    green here is i-node number 2。 This is considered i-node number 1。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我要把它放大一点，好让你能看到。但这里绿色的那个是 i-node 编号 2。这被认为是 i-node 编号 1。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_90.png)'
  id: totrans-135
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_90.png)'
- en: So it's the zero-earth one in the block。 It's considered one。 I don't know why
    they named they numbered them starting at one。 You'll probably have to do a little
    off by one kind of arithmetic when you do your assignment。 But anyway， the point
    is we're going to look at i-node 2， which happens to be right there。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 所以它是块中的零地球。它被认为是第一项。我不知道为什么它们从1开始编号。你可能在做作业时需要做一些“减一”类型的算术。但无论如何，关键是我们要查看 i-node
    2，它恰好就在这里。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_92.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_92.png)'
- en: It's in block 2 or sector 2 offset one， I guess， which is block 2。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 它在块 2 或扇区 2，偏移量是 1，我想，应该是块 2。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_94.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_94.png)'
- en: That makes sense。 That's where it is。 For now you don't need to know more details
    than that。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这很合理。就是这样。现在你不需要知道更多细节了。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_96.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_96.png)'
- en: And what it says in it in this case is it says， and I guess it's offset 16 if
    you talk。 if you are talking about， let's see。
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 它在这里面说的内容是，它说，如果你说的是偏移量 16的话，让我们看看。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_98.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_98.png)'
- en: Oh， sorry， that's offset 16 for the 4， but don't worry about that。 For now it's
    going to be offset of 32 bytes in that case。 In this case it tells that it's a
    regular file。 It says how big it is， critical。 And then it says how many blocks
    it's going to take。 So if you know the file size。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，抱歉，那是 4 的偏移量 16，但现在不用担心这个。现在它是 32 字节的偏移量。在这种情况下，它表明这是一个普通文件。它显示文件的大小，关键，然后它显示需要多少个块。所以如果你知道文件大小。
- en: then you can start to figure out how many blocks it needs to take。 And that
    is going to be very important to finding out how you can traverse these i-nodes。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以开始弄清楚需要多少个块。了解这一点对于确定如何遍历这些 i-nodes 非常重要。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_100.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_100.png)'
- en: The blocks that are listed are 1，027， 1，028 and 1，025 in that order。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 列出的块是 1,027，1,028 和 1,025，按这个顺序。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_102.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_102.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_103.png)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_103.png)'
- en: So if you look at it here， the first part of the file is here， beginning of
    the file。 the second part of the next 512， the first 512 bytes are here， the second
    5，000。 I got that wrong again。 It says 1，027 first。 That's the first one。 Thank
    you。 And then it says 1。028 is the next 512 bytes and here's the final 512 bytes。
    Now look。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果你看这里，文件的第一部分在这里，文件的开始。第二部分是下一个512字节，前512字节在这里，第二部分5000字节。我又错了。它说1027是第一个。谢谢你。然后它说1028是下一个512字节，这是最后的512字节。现在看。
- en: the operating system is going to try to put these things in order。 If it's got
    a whole bunch of。 or the disk is going to depending on which， but the i- this
    is the operating system。 at least initially， is going to try to put it in order。
    Why？ Because that just makes the most sense。 But if it can't， it will find， it's
    got a list of free blocks and it just picks the next one that it can do。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统会尝试将这些东西按顺序排列。如果它有一大堆，或者磁盘会根据具体情况来处理，但是i——这是操作系统，至少最初，它会尝试按顺序排列。为什么？因为那样最有意义。但如果它做不到，它会查找，它有一个空闲块的列表，然后它就选择下一个它能做的块。
- en: And this is where fragmentation comes into play and you have to be a little
    bit concerned about that sometimes。 If you've been using your disk for a long
    time， sometimes I think your computer is slowing down。 And it may be because your
    disk needs to be defragmented。 Meaning， hey。 take all these parts of the files
    that are so far apart and put them closer together。
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 这是碎片化问题的体现，有时候你必须稍微担心这一点。如果你使用磁盘已经很长时间了，有时你会觉得计算机变慢了。可能是因为你的磁盘需要进行碎片整理。也就是说，嘿，把这些相距很远的文件部分整理到一起。
- en: Why would that matter except that they're right next to each other？
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么这会很重要？除非它们彼此非常接近？
- en: The disk sometimes will read more than 512 bytes because it can and it buffers
    that and so forth。 So that's the big idea there。 Alright， questions on how that
    works。 And we'll get to the question there。 Yeah。 [inaudible]， Yeah， yeah， yeah，
    yeah。 The offset should be each one of these。 Again， Ryan came up with this and
    he had a different reason for doing it this way。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 磁盘有时会读取超过512字节的数据，因为它可以这么做，并且它会对这些数据进行缓存，等等。所以这就是那个大概的想法。好的，关于它如何工作的有什么问题吗？我们会回到那个问题上。是的。[听不清]，是的，是的，是的。偏移量应该是每一个。再说一遍，Ryan想出了这个方法，他有不同的理由这么做。
- en: These should be， you should get 16 i-nodes per block。 So there are 32 bytes
    each， 16。 So that's when you do your assignment， you'll get that。 What I think
    I'll do is I'll update this diagram and make it so the slides are actually correct
    for what we're talking about here。 Okay。 Alright。 And by the way， because it is
    1028， as I already mentioned， the first two blocks。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这些应该是，你每个块应该得到16个i节点。所以它们每个占32字节，16个。所以当你做作业时，你会得到这些。我想我会更新这个图表，使幻灯片与我们在这里讨论的内容一致。好的，明白了。顺便说一下，正如我之前提到的，因为它是1028，前两个块。
- en: 1027， 1028， completely filled。 This one only a little bit partially filled。
    And by the way。 how could this happen？ Well， maybe this file was bigger at one
    point or there was another file here that freed up some space and then this one
    got changed。 And then you're always saving， right？ Whenever you save， if it's
    bigger or smaller。 the disk will accommodate that in whatever way it can't by
    deleting the。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 1027，1028，完全填满。这个只是部分填满一点。顺便问一下，为什么会这样？嗯，也许这个文件曾经更大，或者这里曾经有另一个文件，释放了一些空间，然后这个文件被修改了。然后你总是会保存，对吧？每次保存，无论文件变大还是变小，磁盘都会以某种方式进行适应，如果不能就会删除它们。
- en: by freeing a block or taking a new block。 And so it's just going to happen as
    it goes along。 Okay。 Alright。
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 通过释放一个块或获取一个新的块。所以随着时间的推移，这种情况就会发生。好的，明白了吗？
- en: '![](img/ab730a8becfb15893f836f4928a920c1_105.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_105.png)'
- en: So， as I said， the not in contiguous or sorted order。 you really have no idea
    until you actually read off the numbers there about what it is。 Okay。 And this
    is what I kind of just said about how it could be for one reason or the other。
    You might。 and we've already talked about this too， where you might get a file
    system that does reuse some blocks for kind of double up on blocks。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，正如我所说，这些并不是按顺序或者连续存储的。你真的不知道，直到你实际读取这些数字，才能知道它是什么。好的。这就是我刚才说的，可能出于某种原因，可能是你会遇到一个文件系统，它会重复使用一些块，也就是说在块上做重复使用。
- en: This one does not。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这个没有。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_107.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_107.png)'
- en: Alright。 The files I nodes tell us where to find the payload。 But as I said。
    it's also stored on the disk itself。 Okay。 That's the part that is the 32 bytes
    per i number。 Okay。 And you have to be able， you have to know that， right？
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。文件的i节点告诉我们在哪里找到有效负载。但如我所说，它也存储在磁盘上。好的。那部分就是每个i节点32字节的部分。好的，你必须知道这一点，对吧？
- en: Because you're going to be reading 512 byte chunks off the disk。 And so if you
    want to find i node 3， you can do the math， the calculations say， "Oh。 i node
    3 must be in the first block because there's 16 in there。 i node 16 is also。 I
    guess i know 16 will also be in the end of the first block。
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你将从磁盘读取512字节的块。所以，如果你想找到i节点3，你可以做数学计算，得出结论：“哦，i节点3一定在第一个块，因为那里有16个i节点。i节点16也在其中。猜测i节点16也会在第一个块的末尾。”
- en: i node 17 is going to be in the first node， first part of the next block。 Okay。
    So you have to do those calculations。 And when you get to your assignment next
    week。 you will start to think about those。 Okay。 And as I said。 you can store
    16 of these side by side in a block。 Alright。 And last time， I think。
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: i节点17会在下一个块的第一个部分。好的。所以你必须做这些计算。等到下周的作业，你将开始思考这些问题。好的。正如我所说，你可以在一个块中并排存储16个这样的i节点。好的。上次，我记得。
- en: last time I'm going to mention it， if you think this is the only way to do it，
    it's not。 If you do have to know how to do this for your assignment， that's correct。
    Yeah。 [inaudible]。 Good question。 If you have a block that has partial， and the
    question was。 if you had a block that had partial， it was partially filled and
    then you added more data and still didn't fill it。
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一次我要提到，如果你认为这是唯一的做法，那就错了。如果你确实需要了解如何为你的作业做到这一点，那是对的。是的。[听不清]。很好的问题。如果你有一个部分填充的块，问题是：如果你有一个部分填充的块，然后你添加了更多数据，但仍然没有填满它。
- en: it would just fill right up to the， it's going to fill。 It will edit the block。
    What it will do is it will read in the block， do the， make the change。 then write
    the whole thing back。 Again， that's what it'll actually do。 Okay。 And the operating
    system will take care of a lot of that for you。 Good question。
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 它会直接填满，填满它。它会编辑这个块。它会做的是读取块，进行更改，然后再把整个内容写回去。再次说明，这就是它实际上会做的。好的。操作系统会为你处理很多这些事情。很好的问题。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_109.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_109.png)'
- en: Okay。 So， as humans， we like to remember， we don't like numbers so much。 Okay。
    And this is not a comment on like math education in the United States or anything。
    This is just saying that we don't like to remember。 we're not as good at remembering
    numbers as we are words because that's the way we are。
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。所以，作为人类，我们喜欢记住东西，但我们不太喜欢记数字。好的。这并不是在评论美国的数学教育什么的。只是说我们不喜欢记忆数字，我们不如记单词那样善于记住数字，因为我们就是这样。
- en: Words are easier to remember。 It would not be so good if you had， if I said，
    Hey。 I just put a spreadsheet in Dropbox at 70881， slash， and that's how you had
    to refer to it。 Right。 You go a little crazy trying to remember those things。
    Okay。 This is an emoji I found today。 It's called like screaming face emoji or
    something like that。 I also found another， you know。
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 单词更容易记住。如果我说，“嘿，我刚把一个电子表格放进Dropbox，位置在70881，斜杠”，如果你必须通过这种方式来引用它，应该会有点疯掉吧？对吧。你会有点疯狂地试图记住这些东西。好的。今天我找到的一个表情符号。它叫做“尖叫的脸”表情，类似的名字。我还找到另一个，知道吗。
- en: there's a， you know， there's a thumbs up and there's thumbs down and all those。
    There's actually a middle finger emoji。 I didn't know that until I don't think
    it's listed like you can't like pull it up in your phone and there it is like
    you got to kind of figure know how to do it。
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道的，有“点赞”和“点踩”之类的表情符号。实际上还有一个中指表情。我直到现在才知道这一点。我不认为它会列出来，你不能直接在手机上找到它，得想办法知道如何做。
- en: I think。 But anyway， I didn't put that one out here。 But you probably could。
    If you've got a file name that was like this， you could probably want that emoji。
    But anyway。 we don't like that。 So what do we do instead？ Of course， we use names，
    right？
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得。不过，反正我没有把它放在这里。但你可能可以。如果你有一个文件名是这样的，你可能希望使用那个表情。反正，我们不喜欢这样做。那么我们该怎么办呢？当然，我们用名字，对吧？
- en: And we actually have paths and in Linux and Unix， the paths are an English like
    name or I should say a string。 which is separated by slashes and you've been doing
    this， right？
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux和Unix中，我们实际上有路径，路径是像英文名字一样的字符串，应该说是字符串，用斜杠分隔，你一直在做这些事情，对吧？
- en: So you've got a path that's slash user slash class， less Cs 110 slash W。O。U。
    slash index。html。 And that is going to be what we could remember。 I mean。 I can
    actually remember that when I can't remember all those different numbers。 Okay。
    So we need some sort of translation layer。 Okay。 We need some sort of virtualization，
    if you will。
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你有一个路径，例如/用户/类/Cs 110/W.O.U./index.html。这个就是我们能够记住的东西。我实际上可以记住它，而不是那些不同的数字。好吧。所以我们需要某种翻译层。我们需要某种虚拟化，你懂吗？
- en: between going from the numbers， which the computer likes to the words with impacts，
    which we like。 Okay。 And so that's handled with these special types of files called
    directories。 Right。 And that's what we're going to have to do。 And the directories
    are just files。 meaning that a directory has an i number associated with it。
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机喜欢使用数字，而我们喜欢使用有影响的单词。明白了吗？所以这是通过一种特殊类型的文件来处理的，叫做目录。对吧。我们就要做这个了。而目录只是文件。意味着目录有一个与之关联的i号。
- en: You follow blocks in that i number to an actual file that has the， well， not
    there。 I guess it would be here that has a file in it。 In fact， I'll zoom in on
    that over here。 It has information in it about the， about the files that are in
    that directory。
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 你跟随块中的i号到实际文件，这个文件有，嗯，应该是这里有一个文件。实际上，我会把这个放大，过来看看。它包含了关于该目录中所有文件的信息。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_111.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_111.png)'
- en: Okay。 And it says the name of the file， which by the way is limited to 14 characters。
    And there's a little tip for your assignment next week。 It's limited to 14 characters。
    And there is no trailing zero at the end。 Okay。 If it doesn't， if it uses up all
    14 characters。 That makes sense。 Like there's no， if it uses all 14， they don't
    bother with the new。
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。它显示了文件的名称，顺便说一下，文件名最多只能有14个字符。这个是下周作业的小提示。它限制为14个字符。而且末尾没有零。如果它已经使用了所有14个字符，那就没有问题了。明白吗？如果用了所有14个字符，他们就不会再去添加零。
- en: with the zero because they know， you know that it's a maximum 14。 It's the way
    it goes。 the way it's described it。 Remember， back when these things were created。
    memory was still kind of important。 So we ended up with things like this and things
    like the Y2K problem。 Some of you guys were actually born， anybody born after
    in 2000 or after？ Yeah， youngsters。
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 使用零，因为他们知道，你知道，最大值是14。事情就是这么描述的。记住，当这些东西被创建时，内存还是非常重要的。所以我们最终得到了像Y2K问题这样的事情。你们当中有些人其实是2000年后出生的，有人在2000年或之后出生的吗？是的，年轻人。
- en: The Y2K problem for what it's worth is， and I don't know if you've even heard
    of this。 but this is the big thing back then， was in 1997 or so。 somebody realized
    that people only use that most programs only use two digits for the date。 And
    so they would use the last two digits， like 1993 or 1994， whatever。 They would
    use 94。 Well。
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Y2K问题，说它值什么也好，我不知道你们是否听说过这个问题。这是当时的大问题，发生在1997年左右。有人意识到，大多数程序只用了两位数字来表示日期。所以，他们会使用最后两位数字，比如1993年或者1994年，随便。它们会用94年。嗯。
- en: what happens when you get up to 2000？ It rolls over to zero。 and then all of
    a sudden you don't know， you think you're in 1900 instead of 2000。 And then people
    literally thought the world was going to die， like。 and like explode or whatever
    at that point。 And it didn't， of course。 But most programs those days。
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，到了2000年会发生什么？它会回滚到零。然后突然间，你就不再知道日期了，认为自己处于1900年而不是2000年。人们当时真的认为世界要毁灭，可能会爆炸之类的。当然，事实并没有。那时候的大多数程序都是这样。
- en: and in fact many programs these days were written in Coball。 which is a language
    from like the 1950s。 And if you were a Coball program in 1999。 you could in 2000
    buy a vacation home， because lots of people were hiring you to go fix the code
    that's been 30 years old or whatever。 Anyway， so anyway， so as far as， as far
    as files are go， a directory is a file。 Oh。
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，现在很多程序都是用Cobol写的。Cobol是一种上世纪50年代的编程语言。如果你是1999年用Cobol编写程序的人，到了2000年，你可以去买一个度假屋，因为很多公司雇佣你去修复那些已经有30年历史的代码。无论如何，回到文件的问题，目录就是文件。哦。
- en: I didn't show you what else is in there。
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我没有展示里面还有什么。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_113.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_113.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_114.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_114.png)'
- en: A directory is a file that has the name and an i number associated with it。
    Okay。 it has the i number in the directory。 So if you're looking up a file name。
    you know what i number to go to。 Okay， buy this little， buy this little file。
    And it is a real file。
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 目录是一个文件，它与文件名和 i 编号关联。好的，目录中有该 i 编号。所以如果你要查找一个文件名，你知道该查找哪个 i 编号。好的，买这个小文件。它确实是一个真实的文件。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_116.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_116.png)'
- en: The operating system actually keeps the details of that file from you。 You can't
    go and say， oh。 let me get the actual data out of that file to say what to see
    what the files in there are specifically。 It's all hidden from you。 You don't
    get access to that。
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统实际上将该文件的细节隐藏起来。你不能说，“哦，我来获取这个文件的实际数据，看看里面具体有什么文件。”这一切都对你隐藏了。你无法访问这些内容。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_118.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_118.png)'
- en: Okay， all right， how do we do this？ Well， like you actually probably could put
    a file name inside an i node。 But the problem is， file names are kind of long。
    In fact。 you have the whole path associated with the file name。 They can get very，
    very， very long。 And we want to keep the i nodes themselves small。 We want to
    keep them 32 bytes。 And in fact。
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，好吧，我们该怎么做呢？嗯，实际上你可能可以把文件名放在 i 节点中。但问题是，文件名通常很长。事实上，你还需要包括与文件名关联的完整路径。它们可能变得非常非常长。而我们希望保持
    i 节点本身的大小较小。我们希望它们保持为 32 字节。事实上。
- en: if you try to keep this entire path here in one i node， you'd run out of space。
    It's more than 32 bytes immediately。 So we don't keep the names there。 This is
    why we keep them in the actual file associated with the directory itself。 Okay。
    you also don't want to try to search through the actual linear linear research
    through the i nodes。
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你试图将整个路径保存在一个 i 节点中，你会很快用完空间。它超过了 32 字节。所以我们不把文件名保存在这里。这就是为什么我们把它们保存在与目录本身关联的实际文件中。好的。你也不想尝试通过
    i 节点进行线性搜索。
- en: There might be a lot of i nodes。 There might be millions of them。 So you don't
    want to have to try to do that every time you're looking for a file。 Okay。 that
    would be kind of slow。 Okay， there are better ways to do it。 Question。 Do file
    i numbers always start at two？ Okay， that's a good question。
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 可能会有很多 i 节点，甚至可能有数百万个。所以你不希望每次查找文件时都得做这件事。好的，那样会很慢。好，有更好的方法来做这件事。问题。文件的 i 编号总是从二开始吗？好的，这是个好问题。
- en: And we'll get there in a little bit。 The first i node that you care about is
    the one right here that's at sector two。 offset zero。 And that happens to be the
    root i node， i number two， right there。 So I should say。 yeah， it's actually in
    this file system， it's one， newer ones it is two。 But that's the one that's the
    directory for root。
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会讲到。你关心的第一个 i 节点是位于第二扇区，偏移量为零的那个。那恰好是根 i 节点，i 编号为二，就在这里。所以我应该说，嗯，实际上在这个文件系统中，它是
    1，更新的文件系统中它是 2。但这是根目录的目录。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_120.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_120.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_121.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_121.png)'
- en: Now we're going to know where to start。 And we'll see how that manifests itself
    in a minute。 Question。
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道从哪里开始了。我们稍后会看到它是如何表现的。问题？
- en: '![](img/ab730a8becfb15893f836f4928a920c1_123.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_123.png)'
- en: Good question。 Some of the super block， I believe。 keeps track of what i nodes
    have been used or not。 I'm not sure exactly how。 like the mechanics of that part
    of it， but it does。 the operating systems keep in the disk itself and say， hey。
    these ones are failed and these ones aren't。 Other questions on this so far？ Okay。
    we're getting there。 Yeah。 So is this the directory that maps the i-numbers of
    the file that it uses in any way that relates to directories。 how many like computers，
    like sort of files？ Good question。 Are the directories that the file names in
    here for directory。
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 好问题。我相信有一些超级块会跟踪哪些 i 节点已被使用，哪些没有。我不完全确定它的具体机制是什么，但确实有。操作系统会在磁盘中保留这些信息，告诉你，嘿，这些是坏的，那些不是。到目前为止还有其他问题吗？好，我们快到了。是的。那么这个目录是否以某种方式映射文件的
    i 编号，和目录有关吗？计算机中的文件如何？好问题。这里的文件名是目录的 i 节点吗？
- en: are they related to the directories on your computer？
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 它们和你电脑上的目录有关吗？
- en: They are exactly the directories on your computer。 That's what they are， in
    fact。 So you've got slat， you've got a file for the root， you've got a file for
    user。 You've got a file for class。 You've got a file for CS110， et cetera。 And
    literally on the。 in each one of those has its own i-note associated with it。
    Good question。 Yeah。
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 它们实际上就是你电脑上的目录。它们就是，实际上就是。你有根文件，你有用户文件。你有类文件。你有CS110文件，等等。而且每一个文件上都与之关联一个i号。好问题。是的。
- en: I suppose it doesn't follow up。 So in the i-note itself。 is there something
    that tells me if it's in use or not used？ For the i-notes themselves。 is it something
    that tells you if it's in use or not in use？ Yes， same thing。 I mean。 I think
    it's the operating system or the disc itself has a list of which i-notes are not
    used and just like the blocks that are not used。
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我想它并没有跟进。那么在i号本身中。是否有某些内容告诉我它是否正在使用？对于i号本身。是否有某些内容告诉你它是否正在使用？是的，同样的事情。我的意思是，我认为是操作系统或磁盘本身有一个列表，列出了哪些i号没有被使用，就像哪些块没有被使用一样。
- en: Yeah。 Good question。 Anybody else？ All right。 Let's move on a little bit。 So
    what do we do for this？
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 是的。好问题。还有其他人吗？好了。让我们继续一点。那么我们该怎么做呢？
- en: Okay。 We have a directory file type。 I've already kind of mentioned this a little
    bit。
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。我们有一个目录文件类型。我已经稍微提到过这一点。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_125.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_125.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_126.png)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_126.png)'
- en: We don't really need to change our model to do this because we are going to
    simply say a directory is a special kind of file。 but it really is just a file。
    We don't even make any changes。 We just lay this abstraction onto the system we've
    already got and we just say， great。 Now you're going to have to search through
    a bunch of files to find your directory。
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实际上不需要改变我们的模型来做这件事，因为我们将简单地说，目录是一个特殊类型的文件。但它实际上就是一个文件。我们甚至不做任何修改。我们只需将这个抽象应用到我们已经有的系统上，然后我们只需要说，太好了。现在你将不得不搜索一堆文件来找到你的目录。
- en: but it's going to be relatively fast because you can only have to search through
    a limited number to actually find that。 Okay。 So it's not too bad。 You， the file
    payload， the， this is again。 I think this is actually supposed to be， hang on，
    that one， the file payload is series 16 bytes。 livers of foreign table mapping
    names to i numbers。 Oh yeah， sorry。 That was right。 This is the。
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 但是它会相对较快，因为你只需要搜索有限数量的文件就能找到它。好了，所以并不算太糟糕。你，文件负载，这，嗯，我想这实际上应该是，等一下，那一个，文件负载是16字节的序列。将外部表映射到i号的名称。哦，是的，抱歉。没错。这就是。
- en: what we just talked about down here， we just talked about down here with the
    thing。 Each one of these is 16 bytes long。 Okay， you have 14 bytes with a file
    name and then two bytes for the number。 the i number。
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚才在下面讲过的内容，我们刚才在下面讲的内容。每个文件都是16字节长。好，你有14字节是文件名，然后2字节是数字，i号。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_128.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_128.png)'
- en: That's what the 16 bytes， bytes， slivers are。
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是16字节，字节，分片的含义。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_130.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_130.png)'
- en: The file name is created at np3。 Yeah。 Whatever that directory is， yes， that's
    good。 That's a very good question was， hey， wait a minute， what directory is this
    one stored in。 It's wherever the directory that np3。mp3 lives。
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 文件名是在np3创建的。是的。不管那个目录是什么，没错，这是一个非常好的问题，嘿，等一下，这个文件是存储在哪个目录中的？它存储在np3.mp3所在的目录中。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_132.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_132.png)'
- en: That's the file associated with this file here。 Yes， good question。 Okay。 All
    right。 So。 when we do the examples， it'll start to become a little more， little
    more clear。 Okay。
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这是与这个文件相关的文件。是的，好问题。好了。好的。那么，当我们做示例时，它将开始变得更清晰一点，更加明了。好吧。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_134.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_134.png)'
- en: Again， the OS hides this from you。 It's not like you can go and look at these
    files yourself。 Even though they are just files， the operating system won't let
    you。 Because I'm not going to let you look inside that directory file。 That's
    for a media use。 So it goes。 Okay。 All right。 Let's look at block 1024 on here。
    Okay。 That's this one over。
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 再说一遍，操作系统会把这一切隐藏起来。不是说你可以自己去查看这些文件。虽然它们只是文件，但操作系统不会让你查看。因为我不会让你查看那个目录文件。那是用于媒体的。就这样。好了。好吧。让我们看一下这里的1024块。好，这是这一个。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_136.png)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_136.png)'
- en: That's this one。 We already， we already did look at this one as it turns out。
    The directory contains two files。 Okay。 The total file size there is actually
    32。 Why？
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这个文件。事实上，我们已经看过这个文件了。目录中包含两个文件。好的。那里文件的总大小实际上是32。为什么？
- en: Because each one of these slivers takes 16 bytes。
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这些小块每个占 16 字节。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_138.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_138.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_139.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_139.png)'
- en: Okay。 And it， the first row of the table is the first file， second row is the
    second file。 And you can look through these。 And in fact， when you do your assignment
    starting next week on this stuff。 you will have a struct that you will lay over
    this information so you can walk through those files one after the other after
    the other。
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。表的第一行是第一个文件，第二行是第二个文件。你可以浏览这些。事实上，当你从下周开始做作业时，你将有一个结构体来覆盖这些信息，这样你就可以一个接一个地浏览这些文件。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_141.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_141.png)'
- en: Okay。 So it's just a bunch of 32 bytes of data and it's 16 bytes chunks for
    each file。 Okay。 And again， you might ask， wait， what if there were more than
    16 times 512 divided by 16 number of files in the directory？
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。所以这只是一些 32 字节的数据，每个文件为 16 字节一块。好的。再说一次，你可能会问，等等，如果目录中有超过 `16 * 512 ÷ 16`
    个文件怎么办？
- en: Yeah， it's going to need multiple blocks to store that file。 But it's just like
    any other file。 You hopefully have some abstraction where you can say。 give me
    an entire file or one chunk at a time。 And that's exactly what the program you
    will write does and you'll have to abstract that away next week。 Okay。 All right。
    So， so what you're going to do is you're going to search through these files。
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，这个文件需要多个块来存储。但它就像其他任何文件一样。你应该有某种抽象方法，可以说，给我整个文件，或者一次一个块。那正是你将要编写的程序所做的，你下周必须将这个抽象化。好的。明白了。那么，你要做的就是在这些文件中进行搜索。
- en: If you are looking for a directory or a file that is somewhere down the path，
    you're going。 this file will hold instead of saying a。mp3。
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在查找一个位于路径某处的目录或文件，你将会。这个文件将代替说一个 `.mp3`。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_143.png)'
  id: totrans-226
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_143.png)'
- en: You might be looking in the slash directory and you might be looking for the
    user directory。 Well。 that's going to be user and it's going to have an i number
    and you're going to go to there and keep doing the process。 either recursively
    or iteratively depending on how you decide to do it。
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在 `/` 目录下查找，并且你可能在找 `user` 目录。好吧，那就会是 `user`，它会有一个 i 编号，你就去那里并继续执行这个过程。不管是递归地还是迭代地，这取决于你决定如何做。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_145.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_145.png)'
- en: Okay。 Like I said， we're going to do examples where you're going to see this
    in action。
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。正如我所说，我们将做一些示例，你将看到这个过程的实际应用。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_147.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_147.png)'
- en: All right。 What does the file look up actually like how does it actually work？
    Well。 if you were looking for users slash users slash class last season one 10
    slash example。 Okay。 First。 we find the i node for the slash。 Now， I've already
    mentioned that you know where that one is。 It happens to be the first i node or
    i node number i number one i node number one that you go look at。
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。文件查找到底是怎样的？它到底是如何工作的？好吧，如果你要查找 `/users/users/class/last/season1/10/example`。好的。首先，我们找到
    `/` 的 i 节点。我已经提到过，你知道那个在哪里。它恰好是第一个 i 节点，或者说 i 节点编号为 1，你去查找它。
- en: So that's where you start。 So you don't need to go like figure something else
    out。 You say， okay。 I know where it's listed on the draw or what sector it is
    on the drive， the i number。 and you go there。 Okay。 So you search that payload。
    In other words。 you go to the file associated with that and you search for the
    user token and then you find the i number associated with that and then you go
    to the i node table。
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是你开始的地方。你不需要去弄清楚其他的事情。你说，好吧，我知道它在磁盘上列出的位置或所在的扇区，i 编号，然后你就去那里。好的。所以你搜索那个有效载荷。换句话说，你去那个文件，查找与之关联的用户令牌，然后你找到与之关联的
    i 编号，然后你去查找 i 节点表。
- en: You find that you find out where the file is for that。 You go to that file。
    You read the contents。 In there， you will hopefully find a slash class or a class
    file。 And then you go to the class i node and you find the i number with that。
    You go to there and you find the file associated with that。
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 你发现并找出文件的位置。然后去那个文件。读取内容。里面，你希望能找到一个斜杠类或类文件。然后你去到类的i节点，找到与之关联的i号。然后去那里，找到与之关联的文件。
- en: You go read the file and then you find the CS 110 file inside that。 Okay。 And
    then inside that same thing。 It's the same process again。 Look at the i number。
    Go to the block associated with that and then go and find the i number associated
    with the file。 Go to that i number。 Find all the blocks associated with that file
    and read the file。
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 你去读文件，然后你会在里面找到CS 110文件。好的。然后在里面是同样的东西。又是同样的过程。看一下i号。去访问与之关联的块，然后去找与文件关联的i号。去到那个i号。找到所有与该文件关联的块并读取文件。
- en: That's how the process works。 Okay。 It's relatively fast。 Okay。 You have to
    look through it most one， two， three， four different files to get to that。 And
    most paths aren't that many different， that many levels down。 Okay。 Question，
    how's it？
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是过程的工作方式。好的。它相对较快。好的。你大约需要查看一、二、三、四个不同的文件才能找到它。而且大多数路径不会有那么多不同的层级。好的。问题，怎么样？
- en: When you're searching in a directory and you're trying to find like the next
    directory or file。 you want people in your search or you want them to sort of
    order an alphabet。 Good question。 The question was， hey， is this like a binary
    search or something？ It is not。 You do have to do a linear search for the files。
    Now。
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 当你在目录中搜索并试图找到下一个目录或文件时，你希望在搜索中按字母顺序排列。好问题。问题是，嘿，这是不是类似于二分搜索之类的？不是的。你确实需要做线性搜索来找文件。现在。
- en: it may be that the files are in alphabetical order， but I do not think they
    are at all。 You cannot guarantee that anyway。 What happens is when you create
    a new file。 it just gets tagged down to the end of the， it's just on VM。 They
    don't resort it or anything like that。 So good question， but you do have to do
    that。 But again。
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 文件可能是按字母顺序排列的，但我认为它们根本不是。你不能保证这一点。实际上发生的情况是，当你创建一个新文件时，它会被直接加到最后——它就在虚拟内存中。它们不会重新排序或类似的操作。所以，问题很好，但你确实需要做这件事。但还是。
- en: directories really don't have that many files in them。 And it's pretty quick
    to search through 32-bit or 16-bit files。 It's not our 16-bit entries in the file。
    Relatively fast。 Question。 [ Inaudible ]。
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 目录里其实没有那么多文件。通过32位或16位文件进行搜索相当快。它不是我们文件中的16位条目。相对快速。问题。[听不清]。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_149.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_149.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_150.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_150.png)'
- en: Good question。 Are these relative offsets or are they actually explicit ones？
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 好问题。这些是相对偏移量还是显式的偏移量？
- en: They are the i number associated with that。 So it's not an offset or anything。
    It's just go to i number two starting at sector two in the file system。
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 它们是与之关联的i号。所以这不是偏移量什么的。就是从文件系统的第2个扇区开始，直接去到i号2。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_152.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_152.png)'
- en: So in other words， starting here， counting down here until you get to that number。
    That's how it works。 It's not an offset。 [ Inaudible ]， It's not necessarily in
    that sector either。 It's in the i-nodes。 It's somewhere in the i-number。 And so
    it's in the i-nodes somewhere。 And you just have to figure out， you do a little
    math。 Trust me。
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 换句话说，从这里开始，往下数，直到你得到那个数字。这就是它的工作方式。这不是偏移量。[听不清]，它不一定在那个扇区里。它在i节点中。它在某个i号中。所以它在i节点里。你只需要搞清楚，做一点数学运算。相信我。
- en: for the next assignment you're going to do some arithmetic。 That's really it。
    Yeah。 [ Inaudible ]。
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一个作业，你将进行一些算术运算。就这么简单。是的。[听不清]。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_154.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_154.png)'
- en: Correct。
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 正确。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_156.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_156.png)'
- en: '[ Inaudible ]， Yeah， two bytes is， what， 16，000？ 16，000 different i-nodes。
    Over this operating system， that was all you could add。 Or whatever。 You probably
    couldn''t add more than 16，000 files。 But when the hard drive was five megabytes。
    it didn''t really matter that much。 Question。 [ Inaudible ]， A good question。'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '[听不清]，是的，两个字节是，多少，16000？16000个不同的i节点。在这个操作系统上，那是你能添加的全部。或者说，可能你无法添加超过16000个文件。但当硬盘只有五兆字节时，这没什么大不了的。问题。[听不清]，好问题。'
- en: What happens if there are two file names that have 14 characters？
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有两个文件名都有14个字符，怎么办？
- en: The first 14 characters are the same， but they're different file names。 They
    aren't different file names。 There is no way to make a file name longer than 14
    bytes on this operating system。 You're limited to that。 In fact， DOS was that
    way。 Microsoft DOS was that way for years。 It was an 8 plus 3。 In other words，
    8 characters meant 3 character extension。
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 前14个字符是相同的，但它们是不同的文件名。它们不是不同的文件名。在这个操作系统上，无法创建超过14字节的文件名。你只能限定在这个长度。事实上，DOS就是这样。微软的DOS多年来都是如此。它是8+3格式。换句话说，8个字符代表3个字符的扩展名。
- en: And then they had to do some dead jumps and big hoops to make it so they could
    put long file names into windows when they did it that way。 Yeah。 It was a limitation。
    Nobody really thought it may have mattered if they could do that。
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 然后他们不得不做一些死跳和大圈子，才能让长文件名能够以这种方式放入窗口。是的，那是个限制。没有人真的觉得如果他们能够做到这一点，可能会有多大的影响。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_158.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_158.png)'
- en: So， yeah。 Limitations back then that were kind of important。 Good questions。
    Anybody else？ Yeah。 Oh。 over here。 Sorry。 Mr。 Yeah。 [ Inaudible ]， A good question。
    You limited 32 files per director。 No。 You can have as many as you want。 And it
    wouldn't be 32。 Yeah。 I guess it would be well。 512。 5 or 6。 32。 Yeah。 32。 But
    you just have more blocks associated with it。 Just like any other file。
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，那个时候的限制确实有些重要。好问题。还有谁有问题吗？嗯？哦，您那边。抱歉，先生。嗯，[听不清]，是个好问题。你限于每个目录32个文件吗？不，您可以有任意多个文件。并不一定是32个。嗯，我猜可能是512个，5、6个，32个，嗯。32个。但你只是与之关联更多的块，就像任何其他文件一样。
- en: '[ Inaudible ]， Yes。 Your director is a file which can be one block or multiple
    blocks。 Up to 8。 And we haven''t quite gotten to this answer。 I was like， "Whoa。
    what happens when there''s more than 8？" We''ll get there。 Yeah。 [ Inaudible ]，
    Nope。 The blocks do not have to be full。 Good question。 [ Inaudible ]， Yeah。'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '[听不清]，是的。您的目录是一个文件，可以是一个块或多个块，最多8个块。我们还没有完全回答这个问题。我当时想，“哇，超过8个块怎么办？”我们马上会讲到。是的，[听不清]，不对。块不需要填满。好问题。[听不清]，是的。'
- en: This is a little bit they do fall show up。 A good question was， "Do hidden files
    show up？" I mean。 they do。 I didn't represent them here。 So， yeah。 And 。 。 。 you
    show up。 If that's your question。 Anybody else？ Okay。 So， let's move on。 We got
    some big stuff still happening here。
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 这是他们展示的一个小问题。一个好问题是，“隐藏文件会显示出来吗？”我的意思是，它们会显示出来。我这里没有表示它们。所以，嗯。你会看到。如果这是你的问题的话。还有其他问题吗？好吧，我们继续。我们接下来还有些大事要发生。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_160.png)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_160.png)'
- en: Okay。 This was the question that came up earlier。 All right。 The question was。
    "I nodes can only store 8 block numbers。" Okay。 They're just limited to that。
    All right。 Why？
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧。这是早些时候提出的问题。好吧。问题是，“i节点只能存储8个块号。”好吧，它们就只能存储这么多。为什么呢？
- en: Because that's the way they built it。 Okay。 So that means， ostensibly。 that
    you're limited to 8 by 512 or 4，000。 Or 4，000。 And 96 bytes worth of data for
    a file。 Well。 even back then， as I said， that was far smaller than files you might
    want to create。 Okay。 So。 what did they do？ Well， they had to figure out some
    other method to do that。
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 因为他们就是这样构建的。好，假设这意味着，从表面上看，您限制于8个512个块或者4,000，或者4,000字节的数据。那么即便在当时，正如我所说，这个大小远远小于你可能想要创建的文件。好吧，那么他们是怎么做的呢？他们必须想出其他方法来解决这个问题。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_162.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_162.png)'
- en: And what they did was they said， "Let's do what we call indirect addressing。"
    Okay。 So。 if you had blocks like 2001 to 2008， right？ You would be full。 Right。
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 他们做的是说，“我们来做所谓的间接寻址。”好吧。所以，如果你有像2001到2008这样的块，对吧？那么就会是满的，对吧？
- en: '![](img/ab730a8becfb15893f836f4928a920c1_164.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_164.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_165.png)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_165.png)'
- en: Because you have 8 of those times。 You have 4，096 bytes worth。 And then the
    file would be full。 Okay。 Once it gets bigger than that， a flag is set。 It says，
    "Uh-oh。 Now we have what we call a large file。" Okay。 And the large file switches
    everything so that instead of listing the 8 blocks for that list the data。 it
    lists blocks that themselves list blocks for data。
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你有8个这样的块。你有4,096字节的容量。然后文件就满了。好吧。一旦它变得更大，系统会设置一个标志。它会说，“哎呀，现在我们有了所谓的大文件。”好吧。大文件会切换一切，所以它不再列出这8个块来存储数据，而是列出那些列出数据块的块。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_167.png)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_167.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_168.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_168.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_169.png)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_169.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_170.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_170.png)'
- en: Okay。 So what that basically means is， if you have a block， before it had 8
    numbers in it。 and each one of those， you'd go to the first one and that would
    be your data and the second would be your data and so forth。
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，基本上这意味着，如果你有一个区块，之前它有8个数字。而这些数字中的每一个，你都会去查看第一个数字，它就是你的数据，然后是第二个数字，依此类推。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_172.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_172.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_173.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_173.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_174.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_174.png)'
- en: Now， it's going to have 8 numbers in it。 In fact， it is 7。 We'll get to that
    in a few minutes。 And what it would， what it means is each one of those points
    to a block。 And inside here。 the block itself is filled with numbers that are
    other blocks that are your data。
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，它将包含8个数字。实际上，它是7个。我们稍后会讨论这个。它的意思是，每一个数字指向一个区块。而在这个区块里，填充的是其他区块的数字，这些区块存储的是你的数据。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_176.png)'
  id: totrans-274
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_176.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_177.png)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_177.png)'
- en: Okay。 It's an indirect inception kind of thing where you've got your indirectly
    referring to your file by saying。 "Okay， great。 Let's have each one of these numbers
    go to a block。" And that block has a whole bunch of numbers in them to do that。
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这是一种间接的递归方式，你通过间接的方式引用你的文件。你可以说：“好的，太好了。让我们让这些数字每一个都指向一个区块。”而那个区块里面有许多数字来实现这一点。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_179.png)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_179.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_180.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_180.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_181.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_181.png)'
- en: Now， these are 2 byte numbers。 Blocks are 512 bytes each。 meaning that you can
    have 256 different blocks per indirect block。
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这些是2字节的数字。每个区块是512字节，意味着每个间接区块可以有256个不同的区块。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_183.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_183.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_184.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_184.png)'
- en: Okay。 Why？ Because you've got one indirect block pointing to here a block of。
    I know block number pointing to this block。 Inside here， you have 256 more numbers。
    Each one of those numbers points to a block of actual data in that order。
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，为什么呢？因为你有一个间接区块指向了这里的一个区块。我知道这个区块的编号指向了这个区块。在这里，你有256个数字，每个数字指向一个实际的数据区块，按这个顺序。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_186.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_186.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_187.png)'
  id: totrans-285
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_187.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_188.png)'
  id: totrans-286
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_188.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_189.png)'
  id: totrans-287
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_189.png)'
- en: Okay。 That's called indirect addressing。 And you can do that for every block
    of the original 8 blocks。 except it's only 7， and we'll get to why in a minute。
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这叫做间接寻址。你可以对原始的8个区块中的每一个进行这样的处理。只是实际上只有7个，稍后我们会解释为什么。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_191.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_191.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_192.png)'
  id: totrans-290
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_192.png)'
- en: Okay。 But what does that mean？ That means if you did store all 8 blocks as indirect
    blocks， okay。 well， how much data can we store now？
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那这意味着什么呢？这意味着，如果你把所有8个区块都存储为间接区块，那么我们现在能存储多少数据呢？
- en: '![](img/ab730a8becfb15893f836f4928a920c1_194.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_194.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_195.png)'
  id: totrans-293
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_195.png)'
- en: We could store 8 of those blocks， good block numbers。 So we have 8 of them in
    the i-node。 Each one has 256 other block numbers。 Each one of those can store
    512 bytes。
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以存储8个这样的区块，也就是有效的区块数字。因此我们在i节点中有8个这样的区块。每个区块有256个其他区块的数字。每个区块可以存储512字节。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_197.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_197.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_198.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_198.png)'
- en: 8 times 256 times 5 under 12 is 1 megabyte。 That's how big your file could be
    with indirect addressing。 Okay。 What questions do you have about that so far？
    That takes a few minutes to process。
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 8乘以256再乘以5，除以12，就是1兆字节。这就是你在间接寻址下文件可能的大小。好的，到目前为止你有什么问题吗？这需要一点时间来处理。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_200.png)'
  id: totrans-298
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_200.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_201.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_201.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_202.png)'
  id: totrans-300
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_202.png)'
- en: First time I saw it， I went， "Oh， what's going on there？" Yeah。
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 我第一次看到它时，我想，“哦，发生了什么？”是的。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_204.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_204.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_205.png)'
  id: totrans-303
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_205.png)'
- en: '[ Inaudible ]。'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '[听不清]。'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_207.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_207.png)'
- en: That is a good question。 The question was， "Is the number of levels of indirection
    limited？
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 这是个好问题。问题是，“间接寻址的层数是否有限？”
- en: '" For now， all we consider is one level of indirection。 We''ll get to that
    in a second。'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: “现在，我们只考虑一个间接寻址的层级。稍后我们会讲到这个。”
- en: '![](img/ab730a8becfb15893f836f4928a920c1_209.png)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_209.png)'
- en: You're thinking one side out of two sides ahead。 But yes。 For now， just think
    there is no other。 for this case， one level of indirection。 All we need to worry
    about。
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 你思考的是从两个方面中的一个提前一步。但没错。目前只需认为没有其他情况。对于这个例子，只需要一个间接寻址层级。我们只需要担心这个。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_211.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_211.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_212.png)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_212.png)'
- en: We'll get to the other in a second。 Somebody else？ Yes。 What's that？ You changed
    your mind。 Okay。 Anybody else have questions about this？
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后会讲到其他问题。还有谁有问题？是的。那是什么？你改变主意了。好的。还有其他人对这个有问题吗？
- en: '![](img/ab730a8becfb15893f836f4928a920c1_214.png)'
  id: totrans-313
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_214.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_215.png)'
  id: totrans-314
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_215.png)'
- en: If you're using indirect addressing， the best in every file。 Is it actually
    using indirect addressing or something？
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用间接寻址，文件中最好每一部分都使用。那是不是实际上在使用间接寻址或类似的东西？
- en: '![](img/ab730a8becfb15893f836f4928a920c1_217.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_217.png)'
- en: Good question。 Do we have all the blocks using indirect addressing or just some
    of them？
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 好问题。我们所有的块都在使用间接寻址，还是只有一些在使用？
- en: You automatically switch to a full indirection。
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 你自动切换到完全的间接寻址。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_219.png)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_219.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_220.png)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_220.png)'
- en: It needs the operating system and the drive has to do the moving of your files。
    The minute it gets bigger than 4096。
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 它需要操作系统，并且驱动器必须负责移动你的文件。一旦它超过了4096字节。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_222.png)'
  id: totrans-322
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_222.png)'
- en: we've got to switch things here。 And then you end up going with that。 And then
    if you go back to 4096， it'll switch back again。 And so forth。
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得在这里切换一下。然后你就会用那个。接着如果你回到4096，它又会切换回来。如此类推。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_224.png)'
  id: totrans-324
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_224.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_225.png)'
  id: totrans-325
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_225.png)'
- en: It's pretty dumb in that sense。 But it does then。 Other questions about that？
    Okay。
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在那方面它其实挺笨的。但它确实起作用了。还有其他问题吗？好的。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_227.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_227.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_228.png)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_228.png)'
- en: So you might be saying to yourself， great。 In 1977 or 1978。 a million byte file
    was pretty big and they just left it at that。
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可能会对自己说，太好了。在1977年或1978年，百万字节的文件相当大，而且他们就只停留在那个层面。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_230.png)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_230.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_231.png)'
  id: totrans-331
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_231.png)'
- en: Well， even in 1978， a million byte file， one megabyte。 although it was a big
    proportion of the available hard drives in general。 was not big enough to store
    all the data that you might want to。
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，即使是在1978年，一个百万字节的文件，一个兆字节，尽管它在当时占据了大部分可用硬盘的存储空间，但它仍然不足以存储你可能想要的所有数据。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_233.png)'
  id: totrans-333
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_233.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_234.png)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_234.png)'
- en: Okay。 So they said， well， now what do we do？ Right。 And you kind of almost hit
    on what we do。 But what we do is we say， all righty then。
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。那么他们说，现在我们该做什么呢？对吧。你几乎已经提到我们该做什么了。但我们要做的是，我们说，好吧。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_236.png)'
  id: totrans-336
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_236.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_237.png)'
  id: totrans-337
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_237.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_238.png)'
  id: totrans-338
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_238.png)'
- en: If you have a indirect addressing， why not go to doubly indirect addressing？
    Okay。 And it's not as bad as you think。
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是间接寻址，为什么不使用双重间接寻址呢？好的，事实上，它并不像你想的那么糟糕。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_240.png)'
  id: totrans-340
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_240.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_241.png)'
  id: totrans-341
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_241.png)'
- en: Okay。 You might think， well， now we just go and once it gets bigger and we just
    do everything over again like we did before。 It's not quite that bad。 Okay。
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，你可能会想，嗯，现在我们只是把它弄大一点，然后像之前那样继续做下去。其实并不是那么糟糕。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_243.png)'
  id: totrans-343
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_243.png)'
- en: That would probably lead to when you hit that threshold。 you'd all of a sudden
    have to change things a lot and it would be more movement than they wanted to
    do。
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能导致当你达到那个阈值时，突然间你就得做很大的改变，这会比他们原本希望的要更多的移动。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_245.png)'
  id: totrans-345
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_245.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_246.png)'
  id: totrans-346
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_246.png)'
- en: But what they did was they said， okay， if you use more than seven of your indirect
    blocks。 the eighth indirect block is a doubly indirect block。 And what that means
    is。 and this is really inception， right？
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 但是他们做的是，好的，如果你使用超过七个间接块，第八个间接块就是一个双重间接块。它的意思是，这真的是一种递归式的结构，对吧？
- en: '![](img/ab730a8becfb15893f836f4928a920c1_248.png)'
  id: totrans-348
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_248.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_249.png)'
  id: totrans-349
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_249.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_250.png)'
  id: totrans-350
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_250.png)'
- en: You have the seven block numbers that are going to indirect blocks。 Each one
    of those goes to one that has 256 entries in it。 The final block number。 the eighth
    block number points to a block， okay， which is filled with block numbers， 256
    of them。
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 你有七个块号，它们指向间接块。每个块号指向一个包含 256 个条目的块。最后一个块号，第八个块号指向一个块，那个块里充满了块号，总共有 256 个。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_252.png)'
  id: totrans-352
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_252.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_253.png)'
  id: totrans-353
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_253.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_254.png)'
  id: totrans-354
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_254.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_255.png)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_255.png)'
- en: Each one of which goes to a block which has 256 numbers in it。 which each one
    points to a data file or data part of your data。
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 每一个都指向一个包含 256 个数字的块。每个块指向一个数据文件或数据的一部分。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_257.png)'
  id: totrans-357
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_257.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_258.png)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_258.png)'
- en: Okay。 It's an indirect scheme because you can do that， right？
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。这是一个间接方案，因为你可以这么做，对吧？
- en: And they just explicitly say just that eighth block and only that eighth block。
    if you need to use it， should be interpreted as a doubly indirect block。
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 他们明确地说明只有第八个块，如果需要使用它，应该被解释为一个双重间接块。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_260.png)'
  id: totrans-361
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_260.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_261.png)'
  id: totrans-362
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_261.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_262.png)'
  id: totrans-363
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_262.png)'
- en: Okay。 So there's a couple that I'll have a summary down here goes to the details
    here。 And again。 you'll have to figure these details out for assignment next week。
    And it sounds like， oh。 this is crazy， but not as bad as you think once you understand
    what's happening。
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。这里有几个总结，下面有详细内容。再说一遍，你需要搞清楚这些细节，作为下周作业的一部分。听起来可能很疯狂，但一旦你理解了发生了什么，其实并没有你想的那么糟糕。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_264.png)'
  id: totrans-365
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_264.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_265.png)'
  id: totrans-366
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_265.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_266.png)'
  id: totrans-367
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_266.png)'
- en: '[ Inaudible ]。'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '[听不清]。'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_268.png)'
  id: totrans-369
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_268.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_269.png)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_269.png)'
- en: Is the eighth， let me explain the eighth block again。 Okay。 Let me do it this
    way。 Okay。 You have a。 you have the i node here。 Okay。 And the i node has seven
    numbers in it。 Okay。 We'll call them zero。 one， two， three， four， five。
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 让我再解释一下第八块。好的，让我这么说。你有一个，你有这个 i 节点。好的，i 节点里有七个数字。好的，我们称它们为零、一个、二、三、四、五。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_271.png)'
  id: totrans-372
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_271.png)'
- en: And six。 And those are all singly indirect。 Okay。 They each point to one。 they
    each point to a block which has 256 data block pointers， basically， or beta block
    i nodes。 Okay。 And each one of those goes to a data point。 Okay。 And that last
    one here， okay。 the eighth one is a special one。 And it is in， it's a regular
    number just like the others that points to a block。
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 六个。这些都是单重间接块。好的。它们每个都指向一个。它们每个都指向一个包含256个数据块指针的块，基本上，或者是贝塔块i节点。好的。每一个指向一个数据点。好的。最后一个，这里，第八个是一个特殊的块。它是一个常规的数字，就像其他的那样，指向一个块。
- en: And when you go to that block， you will find 256 numbers。 Each one of those
    numbers points to a block which has 256 numbers in it which each point to a data。
    Does that make sense？ As far as that answer your question as far as what's happening
    there？
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 当你进入那个块时，你会找到256个数字。每一个数字都指向一个块，这个块里有256个数字，每个数字指向一个数据。这样说有道理吗？这样回答你的问题，关于那里发生了什么？
- en: There's no other， like there's no other abnormalities to it。 And it's always
    the eight one。 And it's always the one that is used if it's necessary。 That's
    something in the back there。 No？ Yes。 So， you can see the indirect block shows
    that the string does just all numbers。 They are all two byte numbers。 Yep。 And
    that's it。 And they're just two byte i numbers。
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 没有其他的，就没有其他的异常情况了。并且它总是第八个。而且如果有需要，它总是被使用。那是后面的某个东西。不是吗？是的。所以，你可以看到间接块显示该字符串仅包含数字。它们都是两个字节的数字。是的。就这样。它们只是两个字节的i数字。
- en: That's all they are。 Okay。 All right。 Question？ So， if your only one is in the
    indirect。 If you want to use， yes。 If your file is small enough so that it only
    fills in the first seven indirect block numbers。 that's all you do。 The minute
    you go over to that eighth one。 now it's a double indirect and you have to do
    it with a family。 But it's， but it's not， there's no。
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这些。好的。还有问题吗？所以，如果你的文件仅在间接块中存在。如果你想使用，是的。如果你的文件足够小，只填充了前七个间接块号。那你就做这个。一旦你进入第八个，它现在就是双重间接块，你必须使用一个家族来处理。但是，它不是没有。
- en: there's no decision making at that point。 The only real decision is， have I
    gotten。 have I gotten bigger than four thousand nine？ And then four thousand ninety
    six。 And then it goes to the indirect method。 And in the indirect method。 there's
    one of those blocks that's doubly if it's needed。 It's always the last one。 That's
    that。
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个时候没有决策。唯一真正的决策是，我是否已经超过了四千九百？然后是四千九十六。然后它进入间接方法。在间接方法中，如果需要，会有一个块是双重间接的。它总是最后一个。就是这样。
- en: Okay。 All right。 So， let's go。 Yep。
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，明白了。那我们开始吧。是的。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_273.png)'
  id: totrans-379
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_273.png)'
- en: Are the indirect blocks considered files？ Are the indirect blocks still considered
    files？
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 间接块被认为是文件吗？间接块仍然被认为是文件吗？
- en: The indirect blocks are， no， they're just blocks in that case。 They're not files
    themselves。 They don't have associated i numbers with them。 No， they， they， well，
    they， they have block number。 They're not have i numbers。 They're not files。 Good
    question。
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 间接块，不，它们只是块而已。在这种情况下，它们不是文件本身。它们没有与之关联的i数字。不，它们有块号。它们没有i数字。它们不是文件。好问题。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_275.png)'
  id: totrans-382
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_275.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_276.png)'
  id: totrans-383
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_276.png)'
- en: Okay。 Let's summarize。 And by the way， here's the final calculation， by the
    way。 Okay。 You can have up to seven plus 256 indirect blocks。 Why？
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们总结一下。顺便说一下，这里是最终的计算结果。好的，你最多可以有七个加256个间接块。为什么？
- en: Because you have seven from the seven that you've got there in direct。 Right。
    Plus you have 256 more indirect blocks because of the block that is now doubly
    indirect block。
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你有从前七个直接块得到的七个。对的。加上你有256个额外的间接块，因为现在有一个块是双重间接块。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_278.png)'
  id: totrans-386
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_278.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_279.png)'
  id: totrans-387
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_279.png)'
- en: For a total of 263 indirect blocks， each one of which points to has 256 blocks
    associated with it。 Okay。 And each one of those 256 blocks， so each one is 512
    bytes。 meaning that you can have a total of now 34 megabytes for a file in the
    Unix version six file system。
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 总共有263个间接块，每个块指向有256个相关的块。好的。每一个这些256个块，每个块是512字节。意味着在Unix版本六文件系统中，你可以为一个文件提供总计34MB的空间。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_281.png)'
  id: totrans-389
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_281.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_282.png)'
  id: totrans-390
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_282.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_283.png)'
  id: totrans-391
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_283.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_284.png)'
  id: totrans-392
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_284.png)'
- en: Okay。 34 megabytes today is zero。 Right。 So， you know， an mp3 is bigger than
    30。 34 megabytes or what have， you know， most things are bigger than 34 megabytes
    these days。 But back then， that was a big deal。 I'm going to date myself。 but
    my first computer didn't even have a hard drive for its work。 But the。
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，今天34MB已经不算什么了。对吧？你知道，现在一个MP3文件都比34MB大，或者说大多数东西现在都超过了34MB。但是在那个时候，这已经是个大事了。我得自嘲一下，但我第一台电脑甚至没有硬盘。
- en: when I did get a hard drive for it was 20 megabytes and I went， well， I will
    never fill that up。 And， and it took like， and it took hours to like back it up
    and so forth。 the flappy disks and whatever。 But it， but back then 34 megabytes
    was still was pretty big back then。 Right。 For the number of things that you wanted
    to do。 And if you did need bigger files， well。
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 当时我买的硬盘是20MB，我想，我永远也用不完它。而且备份数据需要好几个小时。用软盘什么的。但在那个时候，34MB已经算是相当大了。对吧？在你需要做的事情数量上。而如果你需要更大的文件，那就另当别论了。
- en: you'd do just like we do today， you would have to break them into different
    files and somehow keep that separate from the file system。
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们今天做的那样，你必须把它们拆分成不同的文件，并以某种方式将它们与文件系统分开。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_286.png)'
  id: totrans-396
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_286.png)'
- en: And go look， I just know that mine， I'm going to do this myself for files that
    are bigger than that。 You would chunk them up yourselves。 But anyway， point is
    now we've got an act up to 34 megabytes。
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你去看，我只是知道我会自己处理那些超过这个大小的文件。你会自己将它们拆分成更小的部分。不过，无论如何，重点是现在我们已经达到了34MB。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_288.png)'
  id: totrans-398
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_288.png)'
- en: Okay。 All right。 So， to summarize。 Okay。 If a file is less than 4，096 bytes，
    okay。 we take those that i number and you go to the i node， associate with that
    i number。 and it's got eight block numbers in there。 And it also says the file
    size， by the way。 so you know how to interpret this。
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，好的。那么，总结一下。好吧，如果一个文件小于4,096字节，我们就拿到那个i号，然后去查看与该i号关联的i节点，它包含八个块号。顺便说一下，它还会显示文件大小，帮助你理解这个信息。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_290.png)'
  id: totrans-400
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_290.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_291.png)'
  id: totrans-401
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_291.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_292.png)'
  id: totrans-402
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_292.png)'
- en: But you go and you find the eight block numbers are all used as a direct address
    block。 So all eight of those have 512 bytes， bytes associated with the block。
    You go there。 you find the data in that order。 And it doesn't have to use all
    eight。 You can use one or two update。
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 但是你去找，你会发现这八个块号都是作为直接地址块使用的。所以这八个块每个都有512字节的数据。你去那里，按顺序找到数据。而且并不一定要使用全部八个，你可以更新一个或两个。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_294.png)'
  id: totrans-404
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_294.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_295.png)'
  id: totrans-405
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_295.png)'
- en: The instant you go above 4，096， you are now a large file。 And for large files。
    the first seven block numbers are indirectly addressed， meaning that each one
    is not a large file。
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你超过了4,096字节，你现在就成了大文件。对于大文件，前七个块号是通过间接寻址的方式访问的，这意味着每一个块都不是一个大文件。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_297.png)'
  id: totrans-407
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_297.png)'
- en: You can use one block number。 And you can use one block number。 And you can
    use one block number。 which is 256 numbers in it。 Each one of those goes to data。
    And you do it in order。
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用一个块号。你可以使用一个块号。你可以使用一个块号，其中包含256个数字。每一个数字都指向数据。你按顺序进行操作。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_299.png)'
  id: totrans-409
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_299.png)'
- en: If you need to use the eight block， that eight block is now doubly indirectly
    addressed。 meaning that it refers to a block， which has 256 block numbers， which
    are。 which each refer to a block， which has 256 block numbers。
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要使用八块，那么这八块现在是通过间接寻址的方式访问的。这意味着它指向一个包含256个块号的块，而每个块号又指向一个包含256个块号的块。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_301.png)'
  id: totrans-411
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_301.png)'
- en: Which refers to 512 different ones。 Okay。 That's how it works。 Question。
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 它指向512个不同的块。好了，事情就是这样。问题是什么？
- en: '![](img/ab730a8becfb15893f836f4928a920c1_303.png)'
  id: totrans-413
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_303.png)'
- en: So the two byte number is a block number， not a non-number。 Correct。 That's
    a good question。 All right。 And again， this goes to the question of are they files
    or not。 They're not。
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 所以那个两字节的数字是一个块号，而不是一个非数字。正确。好问题。好的。再一次，这个问题又回到了它们是否是文件的问题。它们不是。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_305.png)'
  id: totrans-415
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_305.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_306.png)'
  id: totrans-416
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_306.png)'
- en: Once they're blocks that are associated with this scheme， they are not no longer
    considered files。 Okay。 So let's， yeah。 Question。 Sorry。 Yeah。
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦它们是与这个方案相关的块，它们就不再被视为文件。好的。那我们，嗯，问题。抱歉。嗯。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_308.png)'
  id: totrans-418
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_308.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_309.png)'
  id: totrans-419
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_309.png)'
- en: '>> You mentioned setting flags to show indirect addressing where to be。 >>
    Correct。 Good question。 Where do you store those flags that show indirect addressing？
    The I number itself。 Remember it has six， it has eight numbers associated with
    the bytes。 It''s 32 bytes long。 There''s 16 bytes worth that are just there for
    data， metadata。 And it has the file type。'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '>> 你提到了设置标志来显示间接寻址的地方。 >> 正确。好问题。你存储这些标志的地方在哪？就是i编号本身。记住，它有六个，它有八个数字与字节相关。它是32字节长的。有16字节用于存储数据、元数据。它还包含文件类型。'
- en: it has the size， it has the flags that are set， whether it's large or not。 Good
    question。 And you will see one， when you do this， when you do the assignment associated
    with this。 we've showed you structs that you can use that can map right over that
    data。 Anybody else？ Okay。 Let's do a couple of examples。 All right。 We'll do three
    examples here。
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 它有大小，也有设置的标志，表示它是否是大文件。好问题。当你做这项任务时，你会看到一个结构体，它可以直接映射到这些数据上。还有其他问题吗？好的。让我们做几个例子。好的。我们将做三个例子。
- en: We are going to try to locate a file called local slash， slash local slash files，
    slash fairy tale。txt。 And then we want to read that file。 Okay。 It's the first
    thing we're going to do。 Then we're going to look at reading a file called slash，
    me file or med file。 which is a medium size， the large file。 Okay。 It's bigger
    than 4096， but not as big as 917，504。
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尝试定位一个名为`/local//files/fairy tale.txt`的文件。然后我们想要读取这个文件。好的。这是我们要做的第一件事。接着我们将查看读取一个名为`/me
    file`或`med file`的文件。它是一个中等大小的、大型文件。好的。它比4096大，但没有917,504大。
- en: which would be using all seven of those indirect blocks。 Okay。 Then we will
    go and read a file called big slash big file， which is a large file。 which is
    bigger than 917，504 bytes， but smaller than 34 megabytes。 Okay。 And by the way。
    at that limit right there， you do have other overhead because now you've got at
    least two more blocks that have to be used for your metadata and whatever。
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 这将会使用所有七个间接块。好的。然后我们将读取一个名为`big/big file`的文件，这是一个大文件，大小大于917,504字节，但小于34兆字节。好的。顺便提一下，达到这个限制时，你会有其他的开销，因为现在至少有两个块必须用于存储元数据和其他内容。
- en: but it's not the， not the biggest deal in the world when your file is that big
    anyway。 It's a tiny。 tiny amount of extra data that you're using。
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 但如果你的文件这么大，也没什么大不了的。它只是占用了一点额外的数据。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_311.png)'
  id: totrans-425
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_311.png)'
- en: Okay。 All right。 So hopefully I came up with this diagram that actually will
    make sense。 Okay。 Hopefully it's big enough too。 So we are going to look for slash
    local slash file slash fairy tale。txt。 Here's the steps on how you do that。 Okay。
    You first look for the slash directory。 Okay。 We know where that lives。 There's
    no calculations necessary。 It lives at i number one。 Okay。
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。没问题。希望我能想出这个图示，它实际上能让你明白。好的。希望它也足够大。我们将要查找的是`/local/file/fairy tale.txt`。下面是你如何执行这个操作的步骤。好的。首先，查找斜杠目录。好的。我们知道它的位置，不需要计算。它位于i编号1。好的。
- en: And i number one happens to be I did not put sector zero and sector one here。
    This is sector two。 sector three， sector four。 I node one lives at sector two
    offset zero。 That is where the file。 that is where the i node lives that tells
    you where to go look for your root directory。 Okay。 No。 no calculations necessary
    in that sense or no thinking， no like decision making there。
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 而且i编号1恰好是我没有在这里放置扇区零和扇区一。这是扇区二，扇区三，扇区四。i节点1位于扇区二的偏移量零。那就是文件的位置，也就是告诉你去哪里查找根目录的i节点。好的。没有，不需要做什么计算，也不需要做决定。
- en: You go there and you look it up and that set。 Okay。 So what does this say？ Well。
    what I've got on here is these are the black numbers in this column here。 Okay。
    These are the file size。 I just threw that in just so we can kind of check and
    see the size of the size。 And then these are the i numbers associated with the
    i node。 Those are in order， of course， right？
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 你去那里并查找，看它说了什么。好。那么这是什么意思呢？嗯。我这里有的是这一列中的块号。这些是文件大小。我把它放进去了，只是为了我们可以检查一下大小。然后这些是与i节点关联的i节点号。当然，这些是按顺序排列的，对吧？
- en: You get one， two， three， four all the way up to however many you have。 Remember
    that you only get 16 of them per block。 Okay。 This is the arithmetic part you
    have to deal with。 Now we're doing it kind of abstractly。 You will have to figure
    out the arithmetic a little bit later。 Okay。 All right。 So anyway。
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 你得到一个、二、三、四，直到你有多少个为止。记住，每个块最多只有16个。好的。这是你需要处理的算术部分。现在我们是抽象地处理这个问题。你稍后需要自己弄清楚算术。好的。总之。
- en: you go to i node one。 That's the root。 You say， okay。 what block numbers are
    associated with that file？ 25。 Okay。 And it's only 80 bytes long。 So I know I'm
    only going to have to do one block number and it's singly address or it's directly
    address。 not indirectly address。 So you go to block 25， which happens to be down
    here。
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 你去到i节点1。那是根节点。你说，好的，这个文件关联了哪些块？25。好的，它只有80字节长。所以我知道我只需要做一个块，并且它是直接地址，不是间接地址。所以你去到25块，恰好就在这里。
- en: And you look through the， and you know that it's a directory because it's definitely
    a directory because that's the whole point。 And of the root。 And you look through
    and it's got some files in it。 Now in this time。 so I did put the dot and dot
    and dot in there。 Okay。 And you look through and you read that file and you go，
    is that I'm looking for local， by the way。
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 你翻阅一下，你知道它是一个目录，因为它显然是一个目录，这就是根目录的全部要点。你翻阅一下，看到它里面有一些文件。这次我确实把点和点点也放进去了。好的。你翻阅并读取那个文件，问自己，嗯，我在找的是本地，顺便提一下。
- en: That's the first thing I'm looking for。 Is that local？ No。 Is that local？ No。
    Is that local？ Yep。 Well， that means that it says， oh， locals i number is 16。
    So what do you do？
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我首先要找的东西。它是本地的吗？不是。它是本地的吗？不是。它是本地的吗？是的。那么，这意味着它显示了，哦，本地的i节点号是16。那么你怎么做？
- en: You go up to block i node number 16 and that must be local。 Okay。 And so you
    do that and you go。 okay， what do I need to do？ Well， it's a thousand and one
    bytes long。 And I look at block 27 first and then I'll read 54 if I need to。 And
    you go to block 27。 which is down here。 And you say， okay， let me read through
    this。 Now I'm looking for files。 Okay。
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 你上到i节点号16的块，它应该是本地的。好的。所以你做这个，然后你说，好的，我需要做什么？嗯，它是1001字节长。我首先查看27块，如果需要的话，再读取54块。然后你去到27块，它就在这里。你说，好的，让我看看。现在我在找文件。好的。
- en: because that's the next part of our path。 And so in five not files， not files。
    Oh。 there's files at i number 31。 You see how this is like recursive or iterative
    or whatever？
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这是我们路径的下一个部分。所以在五个不是文件，不是文件。哦，i节点31处有文件。你看得出这是递归的还是迭代的，或者是其他的吗？
- en: Just keep doing that all the way through the thing。 Sorry。 Sorry。 Keeps for
    me。 It's iterative guys。 It's either whichever one you want， right？ I would do
    it iteratively。 It's just easier that way。 I think。 But anyway， so you go down
    here and you say， okay， great。 Files is at 31。 Okay。 So you go to 31， which is
    here。 And you go， oh， great。 That means I go to block 32。
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 一直这样做下去。抱歉，抱歉。保持下去。这是迭代的，伙计们。无论你喜欢哪种方式，对吧？我会选择迭代的方式。这样做更容易。我觉得。但不管怎样，你继续往下走，说，好的，文件在31处。好的。那么你去到31，那里就是。然后你会说，哦，太好了。那意味着我要去32块。
- en: which is over here。 Now I'm looking for fairytale。txt。 And I go down here and
    I say， okay， well， 32。 I go to 32。 And I look at that's not fairytale。 There it
    is。 Block 47。 And now we found our file。 Right。 And now we know it's a file。 We
    can check and see if it's a file or a director if we want to。 Now we go on there。
    We go to 47， i number 47， which happens to be over here。 And you go， great。
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 就在这里。现在我在找fairytale.txt。我往下看，说，好的，那就去32。我去到32，看看那不是fairytale。它在这里，块47。现在我们找到了我们的文件。对吧？现在我们知道它是一个文件。如果我们想的话，可以检查它是文件还是目录。现在我们进入，去到47，i节点47，恰好在这里。然后你说，太好了。
- en: It is a 1057 byte long file。 And so you go， okay， great。 Let me start reading
    it。 I'll go to block 80。 And because it's a 1057， we know that it's less than
    our large file differentiator。 Right。 So it's just going to be direct blocks。
    That's nice。 So you go to block 80。 And you go to 80。 And that's going to say
    once upon a time there was a vast forest because they're fairytale。 Right。
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一个1057字节长的文件。所以你说，好吧，太好了。让我开始读取它。我将去块80。因为它是1057字节，我们知道它小于我们的较大文件区分值。对吧。所以它将直接访问块。这很不错。所以你去到块80。然后你去到80。它会说，很久很久以前，有一片广阔的森林，因为它们是童话故事。对吧。
- en: And then you read the next one。 And this may not be in order。 In fact， it isn't
    in this case。 You go to 89 and says， that's a die in the Princess Solar Star to
    Google， which blah， blah。 Right。 And then you go back and that's an expert。 And
    then you finally go to 87 and you get to 87 and they lived half the ever after。
    Now， until you get to 87， how much data are you going to read from each one of
    these？
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你继续读取下一个。这可能不是按顺序的。事实上，这个例子中并不是。你去到89，看到的内容是，公主太阳星中死去的那一刻，什么的，接着就开始继续，吧，吧。对吧。然后你回去，那里是一个专家。最后你终于去到87，到了87，你就看到他们过上了幸福的生活。现在，直到你到达87，你会从每一个位置读取多少数据呢？
- en: That's actually kind of a trick question。 How much data are you going to always
    read from a sector？
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 这个实际上有点像是一个陷阱问题。你打算从一个扇区里读取多少数据呢？
- en: 512 bytes。 How much is relevant for 80 and 89？ All 512。 How much is relevant
    for 87？
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 512字节。对于80和89来说，多少字节是相关的？全部512字节。对于87呢？
- en: '![](img/ab730a8becfb15893f836f4928a920c1_313.png)'
  id: totrans-441
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_313.png)'
- en: Well， you have to do the calculation。 You have to do a little either modding
    and dividing and that arithmetic stuff。 Right。 Because you need to know you will
    read 512 bytes。 In fact。 the disk is not going to try to figure the disk doesn't
    say， hey， you want to read 7 bytes？
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，你得做个计算。你得做一些模运算、除法和那些算术的事情。对吧。因为你需要知道你将读取512字节。事实上，磁盘不会去尝试弄清楚磁盘并不会说，嘿，你要读取7字节吗？
- en: I'll get you 7 bytes。 No。 It says， here's 512 bytes。 You do that what you want。
    It might be garbage。 Some of it's garbage。 And some of it is the end of your file。
    You do the math to figure that out。 Okay。 So that's how that works。 All right。
    And then we found it and then we're done。 So that's that。 Questions on that。 Straight
    forward enough， I hope。 I mean。
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 我给你7字节。不。它说，这是512字节。你想怎么做就怎么做。可能是垃圾数据。部分是垃圾数据。部分是文件的结尾。你做数学运算来弄清楚这一点。好的。这就是它的工作方式。好了。我们找到了它，然后完成了。就是这样。关于这个有问题吗？我希望这足够直接明了。我的意思是。
- en: given that this is new and we able to do it。 You could look through that and
    do it that way。 Okay。 Good。 All right。 So then let's look at the next one here。
    Now we want to read a file called slash need file or med file。
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于这是新的，且我们能够做到。你可以查看这些内容并按照这种方式操作。好了。很好。那么，我们来看下一个。现在我们想读取一个名为“slash need file”或者“med
    file”的文件。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_315.png)'
  id: totrans-445
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_315.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_316.png)'
  id: totrans-446
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_316.png)'
- en: Right。 It's a medium sized file。 Well， how do you do it？ First we have to find
    it by the way。 Right。 If you're going to do that， I could have said， oh， look，
    we know it's a design node number。 Well。 let's just actually find it。 What do
    we do？ We go to the root directory。 We know where that lives。 And we go there
    and we say， and it's the same one as before because I just kind of copied and
    pasted this over there and changed a couple of things。
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 对吧。它是一个中等大小的文件。那么，你该怎么做呢？首先我们得找到它，顺便说一下。如果你要做这个，我可以说，哦，看，我们知道它是一个设计节点编号。那么，我们实际上来找到它。我们该怎么做呢？我们去根目录。我们知道它在哪。然后我们就去那里，发现它和之前的是一样的，因为我只是简单地复制粘贴了它，并做了一些修改。
- en: Anyway， you go to block 25。 You go to 25 and start reading through the files。
    It's not that one。 It's not that one。 It's not that one。 Oh， there it is。 It's
    the file we're looking for。 It is a file。 You can go to the file and find out
    that it's actually a file。 So you go to i number 16， which is here。 And once you're
    here， you say， oh， okay。
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 不管怎样，你去到块25。你去到25并开始读取文件。不是那个。不是那个。也不是那个。哦，就是这个。就是我们要找的文件。它是一个文件。你可以打开文件，发现它确实是一个文件。所以你去到编号16的位置，就在这里。一旦你到达这里，你说，哦，好吧。
- en: how big is this file？ 800，000 bytes。 Well， that's bigger than 4096。 so I'm going
    to start using my indirect addressing。 Okay。 So you go great。 There's one， two，
    three。 four， five， six different I know associated with this。 I hope I counted
    that right anyway。 And what you do is you go to the first one。 You say， okay，
    let's go to block 26。 Well。
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 这个文件有多大？80万个字节。嗯，那比4096字节大。所以，我开始使用我的间接寻址。好的。接着，跟我之前说的一样，我知道这个文件有六个不同的I节点与之关联。希望我数对了。然后你做的事情是去第一个I节点，去块26。嗯。
- en: down in block 26， I know that these are not -- this is not a file。 These are
    more block numbers。 Two bytes each。 I go to the first one and I go， okay， 80。
    Well， that's where my file starts。 Okay。 so I go to file starts as it was the
    best of times， it was the worst of times， right there。 And that's the first one。
    Well， then I go to the next one and that goes to 87。 And 87 is over here。
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 在块26下，我知道这些不是——这不是一个文件。这些是更多的块编号。每个块两个字节。我去第一个块，然后我去，好的，80。嗯，这就是我的文件开始的地方。好的。所以我去到文件开始的位置，就像是“这是最好的时光，也是最坏的时光”，就在那儿。这就是第一个块。然后，我去到下一个块，它是87。87就在这里。
- en: It was the spring of hope， it was winter， despair， etc， etc。 Okay。 And you do
    the same thing all the way through this list， right？
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 它是希望的春天，也是绝望的冬天，等等，等等。好的。你就这样做，直到整个列表结束，对吧？
- en: And that's going to be 256 different blocks， right， of 512 bytes。 And then you
    go to the next one。 right？ And you do the same exact thing。 And you go to 30 and
    you go， okay， great。 And now I'm going to go to block 89 and I go to 89 and the
    accident is happening getting out of the car。 And that is the 257th data block。
    Okay， because it's indirectly addressed。
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是256个不同的块，对吧？每个块512字节。然后你去下一个块，对吧？然后做完全相同的事情。你去到块30，哦，太好了。现在我要去块89，然后我去到89，车外发生了事故。这是第257个数据块。好的，因为它是间接寻址的。
- en: And you keep doing that all the way through in that particular order。 going
    back here every time you get through the 256， going back down there， doing 256
    of those， etc。 Until you get to the last one， which is the last one of block 59，
    and you need to count， right？
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你一直按这个特定的顺序做。每次通过256个块后，你就回到这里，继续做256个块，依此类推，直到你到达最后一个，也就是块59的最后一个块，你需要开始计数，对吧？
- en: Because it might not be all 256 used， right？ It might just be， you know， however
    many you need。 You need to kind of recognize that。 For the last one。 there's going
    to be some off by whatever errors depending on whether it's 512 block bytes or
    not。 Good。 Everybody with us on that one？ Okay。 Hopefully that's not too bad。
    The last one。
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它可能并不是全部256字节都被使用，对吧？它可能只是，嗯，使用了你需要的那些字节。你需要识别这一点。对于最后一个块，根据它是512字节块还是其他的，会有一些“越界”错误。好。大家都明白了吗？好的。希望这不太难。最后一个。
- en: let's take a look。 The last one is now we're going to try to read/large file。
    We first have to find it and then read it。 Okay， same thing。
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看。最后一个是我们现在要尝试读取/大型文件。我们首先得找到它，然后读取它。好，过程一样。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_318.png)'
  id: totrans-456
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_318.png)'
- en: You first go to the root， you find it， you have to go to block 25， you go to
    block 25。 which is a file。 You read the file。 You know that these are each 16
    bytes each。 You go down。 you look， you're not in large file。 There's the large
    file。 It happens to be at i number 16。 You go up to i number 16 and you go， holy
    smokes， this is an 18 megabyte。 Long file。 And you go。
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: 你首先去根目录，找到它，你得去到块25，去块25，那是一个文件。你读取文件。你知道这些每个都是16字节。然后你继续往下看，发现你不在大型文件中。大型文件在i号16位置。你去到i号16，结果你发现，这是一个18MB的大文件。然后你继续。
- en: great。 Now it's not， you have to know that， but it's not quite as critical to
    know that until you get to that last block there or that last block number。 Right？
    Remember， all of the first seven ones are exactly indirect like we just did in
    the previous one。
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 很好。现在你知道了，但是直到你到达最后一个块或者最后一个块编号时，才需要特别注意这个问题，对吧？记住，前七个块都是完全间接的，就像我们在前一个例子中做的那样。
- en: Okay？ So what do you do？ You go to 26 and you go down to 26 and you read off
    80 and you go to 80 and this was the beginning of the file and then you go to
    41。 which I don't have on here and that's the next one and 82， et cetera。 Okay？
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 好吗？那你该怎么办？你去到块26，继续往下到26，读取80，然后去到80，这就是文件的开始，然后你去到41，我这里没有列出，那是下一个块，然后是82，依此类推。好的？
- en: And then you're done with this one。 And then you do the same thing for 35 and
    32 and 58 and 59。 And then you finally get to block 30 and block 30。 You go to
    block 30 and you go to， oh。 I gotta go to 87。 But I know that it's doubly indirect。
    So you go to 87 and 87 has more numbers in it。 And the first number。
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你完成了这个。然后你对35、32、58和59做同样的事。最后你回到块30，块30。你去块30，去到，哦，我得去87。但是我知道这是双重间接的。所以你去到87，87有更多的数字。第一个数字。
- en: you go to the file there and that happens to be the 1793rd data block because
    you're counting all this up。 Right？ And then you do， for you go through each one
    of these。 then you go back to block 30 again and you read 114 and 114 has 256
    different numbers。 Right？
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: 你去到文件那里，恰好是第1793个数据块，因为你在统计所有这些。对吧？然后你做的事情是，你逐个遍历这些。然后你再次返回到块30，读取114，而114包含了256个不同的数字。对吧？
- en: And those go。 And those each have 256 different numbers， et cetera， et cetera。
    Yeah？ Should I what？
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它们继续。每个都有256个不同的数字，等等，等等。对吗？我应该做什么？
- en: Should I what？
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 我应该做什么？
- en: '![](img/ab730a8becfb15893f836f4928a920c1_320.png)'
  id: totrans-464
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_320.png)'
- en: Should I have 87？ So 87 should have， let's see， 87， did I do it wrong？ I might
    have done it wrong。 Let's see。 So 87 was from here。 87 should be， or 87 goes to
    89 and that's a block number。 That's another number。 Which goes to， let's see，
    which goes to the actual data。 Yeah。 Make sense？
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 87应该有吗？所以87应该是，看看，87，难道我算错了吗？可能我算错了。看看。所以87是从这里来的。87应该是，或者87指向89，而那是块号。那是另一个数字。然后它指向，看看，指向实际的数据。明白吗？
- en: You go to 30， that has a block number。 Right？ If it was indirect， that would
    point to data。 But now it points to a block which has a block pointing to data。
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: 你去到30，它有一个块号。对吗？如果它是间接的，它会指向数据。但现在它指向一个块，这个块又指向数据。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_322.png)'
  id: totrans-467
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_322.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_323.png)'
  id: totrans-468
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_323.png)'
- en: '![](img/ab730a8becfb15893f836f4928a920c1_324.png)'
  id: totrans-469
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_324.png)'
- en: Should it have 256？ It has 256 of them here。 Right。 Yes。 And that's an， oh。
    I mean it could have 256 there。 It may not。 But it could have up to a hundred
    percent。 It doesn't have to if there's a， not necessarily。 One for a team。 Oh，
    sorry。 Yes。 You're right。 Because of this。 Yes。 You could have that。 You could
    have this be the last one， which goes to them。
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该有256个吗？这里有256个。对吧？是的。那是个，哦。我的意思是它可能有256个，也可能没有。但它最多可以有百分之百的容量。如果有的话，不一定非得是256。一个团队用的。哦，抱歉。是的，你说得对。因为这个。是的，你可以有这个。你可以让这个成为最后一个，它指向它们。
- en: And then it's only， correct。 Because of the way I've done it。 All right。 So。
    Questions。 Yes。 [ Inaudible ]， You know， I don't know if I did the math right。
    But yeah。 It would have however many are necessary to get up to the maximum file
    size in there。 Yes。 It does not have to have 256 here。 Right。 That would be if
    you had almost 34 megabytes worth。 Yes。
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它是正确的。因为我就是这样做的。好了。问题。是的。[听不清]，你知道，我不确定我算得对不对。但没错。它会有足够的数字，直到最大文件大小。是的。这里不一定非得是256。对。这是如果你有接近34兆字节的内容。没错。
- en: correct。 Other questions on this？ It kind of， hopefully it makes sense。 I mean。
    the first time you see it， you go， oh man， it's so complicated。 It is pretty complicated
    for what it's worth。 But it's not un-learnable。 I mean。 you can certainly learn
    it。 And you just have to know how to do it。 And my final comment。
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 正确。还有其他问题吗？希望这样讲能让你明白。我的意思是，当你第一次看到它时，你会觉得，天啊，太复杂了。的确，它对于它的价值来说是相当复杂的。但它并不是不可学习的。我的意思是，你肯定能够学会它。你只需要知道怎么做。我的最后一个评论。
- en: which was exactly my first comment， was don't worry about that this is the only
    way to do it。 There are many hundreds of probably thousands of different file
    systems。 Another question。 Yes。 Say again。 One， two， three， one， two， three， four，
    five， six。 Oh， I should have done another one。 Sorry。 Thank you。 That should be
    an aid。 Thank you。 Keeping me honest。 I'll fix that。 Thanks。
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是我第一次评论的内容，不用担心这就是唯一的做法。实际上有成百上千种不同的文件系统。另一个问题。是的。再说一遍。一个，二，三，四，五，六。哦，我应该再做一个。抱歉。谢谢。那应该是一个帮助。谢谢。让我保持诚实。我会修正的。谢谢。
- en: Anyone else？ All right。 We'll see you on Monday。 Don't forget to sign up for
    labs on Sunday。
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 还有其他人吗？好了，我们周一见。别忘了周日报名参加实验课。
- en: '![](img/ab730a8becfb15893f836f4928a920c1_326.png)'
  id: totrans-475
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab730a8becfb15893f836f4928a920c1_326.png)'
