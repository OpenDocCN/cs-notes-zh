- en: P1：Lecture 1 Introduction - ___main___ - BV1ED4y1R7RJ
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P1：讲座1介绍 - ___main___ - BV1ED4y1R7RJ
- en: All right。 Welcome to CS110。 I'm Chris Gregg teaching CS110 this quarter。 Welcome。
    The。 room we actually we were going to be in the nice spaces from next door but。
    turns out 106 AS gigantic as you might imagine。 So we're kind of in here。 The。
    bad news is every single one of you is going to be coming to every single。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，欢迎来到CS110。我是Chris Gregg，本学期教CS110，欢迎。这个教室，我们原本会在隔壁的好地方上课，但结果106AS就像你想象的那样巨大。所以我们就在这里。坏消息是，你们每一个人都必须来上每一节课。
- en: lecture so all the seats will be taken I'm sure。 We'll talk more about if you。
    decide not to attend lecture what what that means and as we go along。 CS110。 principles
    of computer systems I assume at this point you have gone through either。 CS106A
    or some AP class CS106B and CS107。 If you haven't gone through those。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 讲座，所以所有座位都将被占满，我敢肯定。如果你决定不参加讲座，我们会详细讨论这意味着什么，随着课程的进行。CS110。计算机系统原理，我假设到目前为止你们已经修过CS106A或者某些AP课程，CS106B和CS107。如果你没有修过这些。
- en: that series of courses welcome to everybody come on you can find a seat I'm。
    sure there's some seats in the middle you can I'm sure you can find some if you。
    haven't taken that sequence especially CS106B and CS107 this class is going to
    be。 challenging now the class is challenging in general as you can imagine but
    it's。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这系列课程欢迎每个人来，快点进来，你可以找个座位，我敢肯定中间有一些座位，你可以，我敢肯定你能找到一些。如果你还没有修过那一系列课程，特别是CS106B和CS107，这门课将会很有挑战性。现在，这门课整体上会有挑战性，正如你能想象的那样，但是它。
- en: kind of in some sense you do we will do a lot of things in here that you have
    seen。 in one of six be because you're going to be building big programs that mean
    you。 have to use a bunch of the data structures you've used in CS106B and a lot。
    of the classes in C++ so you have to remember that sort of thing and then CS107。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 一些方面你做的事情，我们会做很多你在CS106B中见过的事情，因为你将构建大型程序，这意味着你必须使用你在CS106B中用过的许多数据结构，以及很多C++类，所以你必须记住这些事情，然后是CS107。
- en: the systems these stuff well this is also a systems class and so you need to
    know。 what pointers are you need to know what void stars are not too too much
    but you。 need to understand those need to understand what structs are and and
    all。 those things so we'll do like one minute of assembly code but that's it so
    you。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 系统的这些内容，这也是一门系统课，所以你需要了解什么是指针，了解什么是void指针，虽然不需要了解太多，但你需要理解这些，需要理解什么是结构体以及所有这些内容。所以我们会讲一分钟的汇编代码，但就这些。
- en: have passed that that barrier from 107 and that's that so what is this class。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 已经通过了107的障碍，那就是如此。那么，这门课是什么？
- en: '![](img/a24171389b50634ece0607b1841cc3fe_1.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_1.png)'
- en: all about there are actually five main topics and the odds are very good that
    you。 have not seen any of those topics before in great detail you may have kind
    of。 seen some of them and if you've done some programming on your own you may
    have。 seen some of them which is basically five main things the first thing we're。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 这些内容其实有五个主要主题，几乎可以肯定你们没有详细了解过这些主题，你们可能看过其中一些，如果你自己做过一些编程，可能也见过其中一些，基本上就是五个主要的内容，第一个我们。
- en: gonna cover and I'll go over some more in detail in a few minutes as well but。
    here's the big thing Unix file system so you know a little bit about files and。
    you've used Unix if you've done if you've logged into myth from CS107 etc。 but
    we're gonna talk about how the actual file system itself is built like what。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 将涵盖，我稍后会更详细地讲解，但这是一个重点：Unix文件系统。所以你对文件有所了解，也使用过Unix，如果你已经登录过CS107等的myth。但我们将讨论实际的文件系统是如何构建的，像什么。
- en: does it mean to be a file system how do you actually take keep track of where。
    the various bytes are in a file and how do you keep track of the file names and。
    how you look up file names and all that sort of stuff so that's kind of the first。
    big topic and you'll have an assignment on that then we go into this thing called。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 文件系统是什么？你如何实际追踪文件中的各个字节，并且如何追踪文件名，以及如何查找文件名和所有这些内容，这是第一个大主题，你会有一个关于它的作业，然后我们进入这个叫做的东西。
- en: multi-processing okay on your computer you guys know that you can be browsing
    the。 internet at the same time they can be printing a document at the same time
    that。 you can be downloading a file at the same time etc etc etc this all happens。
    because your computers are running multiple programs at exactly the same。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 多进程的课程。你们知道，在计算机上，你可以同时浏览网页、打印文档、下载文件等等。所有这些都发生，因为你的计算机在同一时刻运行多个程序。
- en: time okay even if you only have one processor on your computer the operating。
    system is smart enough to say hey I've got two programs or twenty programs。 running
    I'm going to time slice them and give a little bit of this program some。 time
    to do its thing and then a little bit of this program etc etc and and。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 即便你计算机上只有一个处理器，操作系统也足够聪明，可以处理“嘿，我有两个程序或二十个程序在运行，我会为它们分配时间片，让这个程序运行一会儿，然后再给那个程序一点时间”等等。
- en: as it does that you it seems to the user more or less that all these things
    are。 actually happening at the same time now if your computer does have multiple。
    processors or multiple cores things can literally happen at the same time so。
    we're going to write we are going to write a bunch of programs that utilizes。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在进行时，用户看起来似乎所有这些事情几乎是同时发生的。如果你的计算机有多个处理器或多个核心，事情就真的可以同时发生。所以我们将编写一系列程序来利用这些。
- en: this we're going to write a program that does what we call forking and sets
    off。 another process at the exact same time as the first process and they go at
    the。 same time okay the tricky part of this is debugging it you guys think you're。
    great at debugging what wait till you have two or twenty things to going at the。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将编写一个程序，做我们所说的“分叉”，并在与第一个进程同时启动另一个进程，它们会同时进行。这个过程的难点是调试，你们觉得自己调试很牛，等到你们有两个或二十个任务同时运行的时候，再来看看吧。
- en: same time trying to debug it's a little bit trickier so we have to talk about。
    those sorts of things that's the next thing the third thing which is kind of。
    part of multi-processing is signal handling it turns out that if you have。 multiple
    processes going at the same time on your computer you might want to。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 同时进行调试时会有些更复杂，所以我们必须讨论这些内容。这是接下来要讲的第三个内容，信号处理是多进程的一部分。事实证明，如果你的计算机上有多个进程同时运行，你可能需要。
- en: talk you might want them to talk to each other okay turns out when you do this。
    thing called for which we'll talk about again later you actually get a parent。
    process and then a child process and if you want to talk between them or if the。
    parent wants to know when the child has finished well signals get set so those。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能希望它们互相通信。好吧，实际上，当你做这个叫做分叉的操作时，我们稍后会再次讲到，你会得到一个父进程和一个子进程，如果你想让它们之间通信，或者如果父进程想知道子进程什么时候完成，那么信号就会被设置。
- en: are the things we're going to talk about there all right then we're going to
    go。 and we're going to shift into this thing called multi-threading which is a
    very。 similar sort of topic but it involves these things called threads which
    means。 one program is now running well one process is now running multiple things。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来要讨论的这些内容，好了，然后我们将转到一个叫做多线程的东西，它是一个非常相似的话题，但它涉及到叫做线程的东西，这意味着一个程序现在在运行时，多个任务在同一进程中进行。
- en: at once very similar but handled in a much different way so we're going to。
    transition to that and then finally we're going to go into talking a little。 about
    networks so we're going to build some servers and we're going to build。 some clients
    and we're going to have them talk to each other on different。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 非常相似，但处理方式却完全不同。所以我们会过渡到这个部分，最后我们将讨论一些关于网络的内容。我们将构建一些服务器和客户端，并让它们在不同的。
- en: machines and through the internet and so forth and that's going to be the kind。
    of a culminating part of the course so those are the big topics now what are。
    all those topics all about well most of them happen to do with have to do with。
    operating system sort of things so 110 a lot of times is considered like。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过机器和互联网等等，这将是课程的高潮部分。那么这些大话题都在讲什么呢？好吧，大多数话题其实都涉及操作系统方面的内容，所以110这门课经常被认为是类似于。
- en: operating systems late and it's kind of an introduction to operating systems
    if。 you do want to take operating systems you can take CS 140 and and go take
    an。 actual operating systems class but we're going to talk about all these things
    that。 the operating system has to help you do in this course okay there are eight。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统这门课稍微晚一点开设，它是操作系统的入门课程。如果你想深入学习操作系统，可以选择CS 140，去上一门实际的操作系统课程，但在这门课中，我们会讨论操作系统需要帮助你做的所有事情。好吧，这门课一共有八个部分。
- en: assignments there will be eight assignments roughly one a week a little bit
    more。 than one a week in the midterm we're extending the assignment a little bit。
    little longer so you have time to study etc。 The you can look at what what all。
    those are but they're basically assignments that test all the things we。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 会有八个作业，差不多每周一个，稍微超过一周做一个，还有期中考试。我们会把作业的截止日期稍微延长一点，这样你们有更多的时间来复习等等。你们可以查看所有的作业内容，基本上是测试我们要教授的所有内容。
- en: talk about obviously and there's a couple multi processing ones and a couple。
    threading ones and and so forth and then there's a culminating project called。
    MapReduce which is a which has threading and processes and networking is all kind。
    of tied into one and it's kind of a cool data set last assignment all right so。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 我会讲的东西显而易见，还有一些多处理器相关的内容，以及一些线程的内容等等，最后会有一个汇总项目叫做MapReduce，它包含了线程、进程和网络，所有这些都结合在一起，这是一个很酷的数据集，最后一个作业就是这个。
- en: that's kind of the overview of the course who am I I've seen I see some friendly。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是课程的概览，我看到有些人很友好。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_3.png)'
  id: totrans-24
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_3.png)'
- en: faces out there that I've seen all of you are friendly I hope I've seen some。
    people I know before but if you haven't had me for a class before I am my。 original
    bachelor's degree was in electrical engineering at Johns Hopkins。 then I decided
    I actually went to the Navy right after that and then decided to。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我看到的各位脸孔都很友好，希望我曾见过一些熟悉的人。如果你之前没上过我的课，我的本科专业是电气工程，毕业于约翰·霍普金斯大学。之后我决定去海军服役，然后又做出了决定。
- en: go into teaching so I went and got a master's degree in education and then。
    decided a little bit later on that I still had some GI Bill which is the Navy's。
    or the military's kind of money for college that they let people use and I。 still
    had some of that so I decided to go get a PhD in computer engineering and。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我去攻读了教育学硕士学位，之后稍晚些我还发现自己有一些GI Bill的学费资助，这是海军或者军方提供的大学资金支持，我还剩一些。所以我决定去攻读计算机工程的博士学位，并。
- en: thinking that I still wanted to teach and so that kind of led me to Tufts。 University
    in Massachusetts and then out here I've been here for three years。 I'm technically
    a junior now so some of you guys are more have been here longer。 than me and that's
    that so I've lectured a whole bunch of classes this is why I。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直在想我还是想继续教学，这种想法最终让我来到了马萨诸塞州的塔夫茨大学，然后来到这里，我已经在这里待了三年了。现在我是大三学生，所以你们中的一些人可能比我在这里待得更久。就这样，我讲授了很多课程，这也是我。
- en: recognize some of you is because I've lectured 106 B 106 X 107 107 E 208 E。
    which is a great ideas in computer science I'm gonna do it again next year。 and
    it's a fun course and it's very generally very small and we talk about。 all these
    big ideas in computer science over the years kind of like a history。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 认出你们中的一些人，是因为我讲过106 B、106 X、107、107 E、208 E课程。这些是计算机科学中的伟大思想课程，我明年还会再讲。这是个很有趣的课程，通常班级人数很少，我们会讨论计算机科学中的所有这些伟大的思想，像是计算机科学的历史。
- en: class that was fun and then now CS 110 the as far as teaching CS 110 my first。
    quarter was last quarter normally Jerry Kane teaches this course he's actually。
    not here this quarter and I kind of wanted to roll into 110 so I co-taught it。
    with Jerry last quarter the class is ostensibly his class and he put most。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 那门课很有趣，然后就是CS 110，关于CS 110的教学，我的第一学期是上个学期，通常这门课是Jerry Kane教授的，他本学期不在，我也想进来上110课程，所以我和Jerry一起上了这门课。课程名义上是他的，他也出了大部分作业。
- en: of it together we are not going to change too much okay I'm a very different。
    lecturer than Jerry but the material is all the same so except for a couple minor。
    tweaks here and and there so I'm going to keep it mostly mostly the same a little。
    bit more about me I love to tinker you haven't seen my typewriter project my。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会做太多变化，我是一个和Jerry非常不同的讲师，但课程内容是一样的，除了几个小小的调整。我会尽量保持内容的稳定，稍微介绍一下我自己，我喜欢摆弄东西，如果你还没见过我的打字机项目，那。
- en: musical typewriter project you can just look it up Chris Greg typewriter on
    the。 internet you can find it and then or you can come by my office and actually
    see。 it in real life I love kind of doing you know everything from soldering to
    our。 doinos to raspberry pie stuff so you have any projects you're working on
    in that。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 音乐打字机项目，你可以在互联网上查找Chris Greg typewriter，然后你可以找到它，或者你也可以来我的办公室亲自看看。我喜欢做各种事情，从焊接到Arduino，再到树莓派项目。如果你有类似的项目，也可以来和我聊聊。
- en: feel free to stop by and chat with me about that all right okay so who else。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 随时来找我聊聊这个问题，好吗？好了，还有谁？
- en: '![](img/a24171389b50634ece0607b1841cc3fe_5.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_5.png)'
- en: is going to be involved in this class well as of noon today there's 209。 students
    enrolled it's not a huge huge class but it's still relatively big what。 do you
    need to know for the class well we're gonna be primarily programming in。 a combination
    of C and C++ most of the projects are actually going to be C++。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这门课有209名学生，截止到今天中午。它不是一个特别大的班级，但也算是相对较大的。你需要知道什么呢？我们主要会使用C和C++来编程，大部分项目实际上是用C++来做的。
- en: reason for that is it's much easier to use C++ strings we've got all these。
    cool things like maps and and sets and things that you can use by the way we。
    will be using the standard template library not the Stanford library so for。 instance
    if you want to use a if you want to use a cue you do if you want to。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 之所以这么做，是因为使用C++字符串要容易得多，我们有很多很酷的东西，比如映射（maps）、集合（sets）等等，你可以使用这些功能。顺便说一下，我们会使用标准模板库，而不是斯坦福库。所以比如说，如果你想使用队列（queue），你就得使用。
- en: get the front value off the cue you do pop underscore front and that pops the。
    value off but it doesn't give it back to you if you just do front it gives it。
    back to you so there's a couple nuances that you have to learn most of those。
    things will come relatively naturally it will not take long to to learn that。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想从队列中取出前面的值，你需要使用`pop_front`，它会弹出一个值，但不会返回给你。如果你只使用`front`，它会把值返回给你。所以有一些细微的差别，你需要学习这些。大部分这些东西会相对自然地学会，不会花太长时间。
- en: there's a few few things about using maps that are a little tricky I will do
    my。 best to kind of preview you on any new C++ things that you might not have
    seen。 in CS 110 for instance there's these things called closures which we're
    gonna。 have for the first assignment and then through most of the other assignments
    and。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 关于使用映射（maps）有一些小技巧，我会尽量提前给你们介绍一下，你们可能在CS 110中没有接触过的C++新知识。例如，这里有一些叫做闭包（closures）的东西，我们将在第一个作业中用到，并且会用到其他的大部分作业中。
- en: you have to learn how to use those and I'm gonna explain how to use those so
    don't。 don't worry too too much about that we do write pretty complex programs
    in this。 class what does that mean well it means you're going to have a large
    code base。 that you are going to have to build part of and you kind of did this
    a little bit。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要学习如何使用这些，我会解释如何使用这些，所以不用太担心这些。我们在这门课中会写相对复杂的程序，这意味着什么呢？这意味着你会有一个大型的代码库，你需要构建其中的一部分，你在之前的课程中可能做过一些类似的事情。
- en: for CS 110 and maybe a little for CS 107 this is kind of even more so people。
    always go and they look at the first assignment they go the assignments like。
    15 pages long or whatever right and and the number of files you get is like 22。
    files and half of them are header files and whatever you really need to be able。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 对于CS 110，可能还有一点适用于CS 107，这种情况甚至更加明显。人们总是先看看第一个作业，看到作业可能有15页长，或者类似的内容，文件数量也有22个。文件，其中一半是头文件，等等，你实际上需要能够理解这些内容。
- en: to comprehend those things before you even start writing any code so I'll try
    to。 what will the first assignment is a good example of hey there's a bunch of
    code。 here you have to figure out where to put your pieces and that's sometimes
    one of。 the harder parts about the course itself you should be able to trace memory。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始写代码之前，你需要理解这些内容。所以我会尝试。第一个作业是一个很好的例子，里面有一堆代码。你需要弄清楚应该把你的代码块放在哪里，这有时是这门课最难的部分之一。你应该能够追踪内存。
- en: diagrams and you should understand memory if you took CS 107 I'm confident you。
    understand enough about memory to do just find this class you should also。 understand
    Unix and Linux and the terminal and so forth GCC and Valgrind if。 you took CS
    107E for instance you probably have no idea what I mean when I。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图示，你应该理解内存，如果你上过CS 107，我相信你已经了解足够的内存知识来应付这门课了，你还应该了解Unix和Linux，以及终端等内容，GCC和Valgrind。如果你上过CS
    107E，例如，你可能根本不知道我说的是什么意思。
- en: say Valgrind it's just a program you run that tells you when your programs leaking。
    memory or you haven't closed files etc not very hard to use and then make and。
    so forth you won't have to write any make files but you might want to modify。
    them so not a bad idea to to do that there are 10 CAs this is roughly the same。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 比如Valgrind，它只是一个程序，你运行它时，它会告诉你你的程序是否存在内存泄漏，或者你没有关闭文件等等，使用起来并不复杂，然后是make等工具。你不需要写make文件，但可能需要修改它们，所以稍微了解一下这些也不算坏主意。总共有10个助教，这个大致上和以前一样。
- en: proportion of CAs as you would have seen in 107 that means that there's 200
    of。 you and there's 10 CAs well it means that there's possibly longer lines than
    you。 might hope for in ops hours that's the way it goes the one thing about office。
    hours and I think this is covered on other slide too is the difference in 110。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 就像你们在107课上看到的那样，意味着你们有200个学生，而只有10个CAs，结果可能会比你希望的排队时间长，这就是现实。在办公室时间里，我认为这个问题在其他幻灯片中也有提到，110课程和其他课的不同之处就在于。
- en: versus 107 is the CAs are not going to look at your code so you bring a bug
    to。 the to off-side you go I got this bug and they go great tell me about your。
    bug what's going on what did you do here what do you do there they're not。 gonna
    sit down and try to help you find the bug you guys are believe it or not。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 相比107，CAs不会审查你的代码，所以你带着bug去实验室时，他们会说：好，告诉我你的bug，发生了什么，之前做了什么，之后做了什么。他们不会坐下来帮你找bug，你们相互之间其实相信不相信。
- en: you're good enough programmers now you can probably track down where your bug。
    is right it is harder when you get into multi-threading and multi-processing。
    things but by this point your you are fairly advanced and we expect you to do。
    that and it does make off-sours go smoother I mean if you unfortunately。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 你们现在已经是足够好的程序员了，应该能追踪到你bug出现的位置，对吧？当你进入多线程和多进程的环境时，这会变得更难，但到目前为止，你们已经相当进阶，我们也希望你们能够自己解决问题，这样就能使任务进展得更顺利。当然，如果你不幸碰到问题。
- en: some of the assignments are very they're not open-ended so much as we say write。
    this function and you just kind of go and write it and your decisions might be。
    very different than your neighbors decisions and it would be impossible for。 the
    CAs to sit down and try to figure out what the differences are in the 10。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 有些作业的要求其实并不开放式，它们更多的是让你写这个函数，然后你就写它，你的决定可能与你邻座同学的决定大不相同，CAs是无法坐下来试图搞清楚你们10个之间的区别的。
- en: minutes they might be able to give to you so so that's that for what it's worth。
    most people think it's a it works pretty well like you you'd be surprised at how。
    talking through what you think should be happening in your program translates。
    into you being able to fix your own bugs surprise you're not more or six be。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 他们可能能给你提供的时间就是这样，所以就这样吧，至于它的价值，大多数人认为它其实效果不错，你会惊讶于**当你通过与自己讨论程序中应该发生的事情时**，这能转化为你自己修复bug的能力，真是令人惊讶，你不是更多的是六个或者七个吗？
- en: anymore one or seven where you can you know you can rely on the TAs and CAs
    to。 do that okay the CAs are also going to hold lab sections I'll talk about labs。
    in a few minutes so for what it's worth the class is held Monday Wednesday 1 32。
    2 50 and then Fridays are most of the labs during the same timeframe there are。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经不再是像107那样了，你可以依赖助教和CAs来帮忙。好的，CAs还会举办实验课，我稍后会讲到实验课的内容。所以，课程安排是这样的：每周一、三下午1:30到2:50，然后周五会有大部分实验课，时间大致相同。
- en: also some labs on Thursdays so you'll be able to sign up for those I'll talk。
    more about labs in a minute labs are just they're they're not sitting out of。
    computer all they should bring your laptop but it's run by a CA and they。 people
    like those two because you get a little bit more small kind of feel for。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，周四还有一些实验课，你可以注册参加。我稍后会详细讲解实验课。实验课其实并不是全程坐在电脑前的，你应该带上自己的笔记本电脑，实验由助教主持，大家喜欢这些实验课，因为它们让你感到一种更小型的互动氛围。
- en: the teaching all right what questions you have so far thing we'll get to more。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 教学部分，好了，到目前为止有什么问题吗？我们稍后会讨论更多内容。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_7.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_7.png)'
- en: logistics I promise not to all logistics we're gonna get into some real stuff。
    today - of course website CS 110。stanford。edu as you might imagine the。 website
    is not you know super detailed with stuff it's got the lectures on it。 it's got
    the lecture slides it's got the handouts it's got discussion section。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 后勤安排，我保证不会讲太多后勤内容，我们今天会深入讲一些真正的东西。今天 - 当然，网站是CS 110。stanford.edu，你可能猜到，这个网站并不是非常详细，它有课程讲座，有讲座幻灯片，有讲义，还有讨论部分。
- en: information and the links and so forth that's about it's got a calendar which。
    lists all of the list right now lists when all the assignments are going to be。
    given out the due dates are kind of still to be a little bit determined as well。
    we also have a Piazza as you can imagine Piazza gets pretty busy because lots。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 信息和链接等等差不多就是这些，里面有一个日历，列出了目前所有作业的发放时间，截止日期还稍微需要确定一下。我们也有一个Piazza，你可以想象，Piazza会非常忙，因为有很多。
- en: we love lots of questions and keep up to that keep up to date on that and you'll。
    be in pretty good shape and then we'll also have a slack channel just in case。
    you want to check I'm not having the CAs go to the slack channel I'll keep my。
    eye on it if you have specific questions but it's more for you guys to chat。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们喜欢很多问题，并且要保持更新，保持关注，你将会处于一个不错的状态。然后我们还会有一个Slack频道，以防你需要查看，我不希望教学助理去Slack频道，我会盯着看。如果你有特定问题可以问，但它更多是供你们自己交流的地方。
- en: amongst yourselves if you want questions and things generally go to Piazza as
    you。 can imagine but if you have something you want to chat about then slacks
    a better。 better place for that I have some off-sours you can find out when those
    are if。 you can't make my off-sours and you really want to chat with me directly。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有问题，通常还是通过Piazza来提问。你可以想象，Piazza会非常忙，因为有很多问题。可是如果你有些想聊的内容，那Slack是一个更合适的地方。我有一些办公时间，你可以查一下这些时间。如果你无法参加我的办公时间，又真的想和我面对面交流。
- en: shoot me an email and we'll find a time to meet CAs of course we'll have their
    own。 off-sours and we will probably start them this week but they will be official
    as。 of next like the the weekend because your first assignment is coming out on。
    Wednesday okay as I said CAs don't look at your code during off-sours neither。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 给我发封邮件，我们会找时间见面。教学助理当然也会有自己的办公时间，我们可能这周就开始，但它们会在下周末正式开始，因为你们的第一次作业将在星期三发布。好的，正如我所说，教学助理在办公时间也不会看你的代码。
- en: will I for it is worth now if you've got something you don't understand of error。
    message certainly we'll look you thought like we're like no that can't you see。
    your screen right we're gonna be able to see like they can help you at least get。
    figure out what error messages are and so forth and if you haven't done much C++。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有不理解的错误信息，当然我们会帮助你看。如果你觉得你的屏幕上有一些东西，看起来不对，我也能帮助你，至少能够帮助你弄明白那些错误信息是什么，如果你还没做过太多C++的编程。
- en: programming you'll know that error messages in C++ are ridiculous so that。 does
    take a little bit of time to get your head wrapped around okay there's two。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 编程时，你会发现C++的错误信息简直荒谬，所以这确实需要一些时间来理清楚，好吧，这是两个。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_9.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_9.png)'
- en: textbooks for the course the textbook that you may have used for 107 the bright。
    and a Halloran Halloran Halloran if you're gonna pronounce his name textbook is。
    the same one there is actually a custom version just for 110 which has you know。
    the six or eight chapters we're gonna cover in 110 if you want to buy that or。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 课程教材是你可能在107课程中使用过的教材《The Bright》和《Halloran Halloran Halloran》，如果你要发音他名字的话，教材就是那个。实际上有一个为110课程定制的版本，里面包括了我们将在110课程中讲解的六到八章内容，如果你想购买那个版本的话，。
- en: if you bought the whole book last time continue to use it it doesn't really。
    matter so much if you haven't a slightly older version it's basically for you
    to。 read I'm not assigning anything from the book and most of the things haven't。
    changed and it's not like 107 where the older versions were in 32-bit。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你上次买了整本书，继续使用它也没关系。如果你有稍旧的版本，也没关系，反正主要是供你阅读。我并没有指定书中的内容，书中的大部分内容也没有变化，而且这不像107课那样，旧版本是32位的。
- en: architecture and now we're talking about 64-bit architecture we really don't
    get。 into those details in this class so still fine question yeah all right there's。
    another textbook which will primarily be for the first couple of weeks on file。
    systems that talks about file systems it's it's called principles of computer。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 架构，现在我们谈论的是64位架构，实际上在这门课中我们不会深入探讨这些细节，所以如果有问题也没关系。好吧，这里有另一本教材，主要是讲前几周关于文件系统的内容，书名叫《计算机原理》。
- en: system design and if you want to do well on assignment to read the book because。
    it has all the details for the for the the way the an old Unix file system was。
    built so when we get to that you'll see those reading assignments come up you。
    can buy it it's also available free online okay all right lecture example so。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 系统设计，如果你想在作业中表现好，阅读这本书很有帮助。它详细介绍了旧版Unix文件系统的构建方式。等到我们讲到这一部分，你会看到相关的阅读任务。你可以购买这本书，它也可以在网上免费获取，好吗？好了，讲座示例。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_11.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_11.png)'
- en: this class is I'm gonna have slides but I'm also gonna do lots of coding kind
    of。 live or kind of from my notes etc where you're gonna see lots of code put
    up and。 run in real life and the code examples if you want to either follow along
    or。 look at them yourself you can get them by you can get them online I generally
    have。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这门课我会有幻灯片，但我还会做大量的实时编程演示，或者从我的笔记中展示代码。你会看到很多实际运行的代码示例。如果你想跟着一起做，或者自己查看，可以在线获取这些代码，我通常会提供链接。
- en: links on the slides or you can actually clone the entire repository of all the。
    examples I would really suggest looking at those examples and understanding how。
    they work especially if they fly by and lecture and you're right and don't really。
    know what that is go down and look at them line-by-line test some things try。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 幻灯片上的链接，你可以直接克隆整个示例库。我强烈建议你查看这些示例并理解它们的工作原理，特别是当它们在讲座中迅速展示时，而你可能跟不上，甚至不知道那是什么，就应该停下来逐行查看并尝试。
- en: it out yourself and that's a good way to get yourself up to speed on those。
    assignments or those those code examples okay everything we do is gonna be done
    in。 the myth machines if you need to you could do it on cardinal I believe to
    but。 the machines that we'll use for class are myth the myth machines if for some。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 自己完成作业是一个很好的方式，可以帮助你迅速了解那些作业或代码示例。好的，我们所做的一切都会在**myth machines**上进行，如果需要的话，你也可以在**cardinal**上完成，但我们上课使用的机器是myth
    machines，如果某些工作不正常，那是因为机器的问题。
- en: reason you're going out of town you're gonna be on an airplane and don't have。
    internet access we can figure out how to get most things working on your laptop。
    itself especially if you have a Mac but you can also get a you can also put a。
    Linux machine VM on your computer and that will work too so we can we can get。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你因为出差而要坐飞机且没有网络连接，我们可以找办法让大部分内容在你的笔记本上运行，尤其是如果你使用Mac的话，但你也可以在电脑上安装Linux虚拟机，这样也能工作。我们可以搞定。
- en: that work but most all the assignments just like 107 are going to be on the。
    machines okay all right what else the slide so I'm gonna try to make the slides。
    as comprehensive as possible I think putting sometimes you'll the complaints。
    I sometimes get there's too many words and the slides too much stuff on the。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 但大部分作业就像107一样，都会在这些机器上进行。好的，接下来是什么呢？幻灯片。我要尽量让幻灯片尽可能全面。有时我会听到一些抱怨，说幻灯片上的文字太多、内容太多。
- en: slides I'll try not to focus on like the stuff and I certainly will try not
    to。 read like whole slides and so forth but you can use them a little bit for
    a。 reference as well so it's not a not a bad idea to to do that they're not a。
    substitute for attending lecture because we do go off script and you'll ask lots。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 幻灯片的内容，我会尽量避免过多聚焦于此，我当然会尽量避免像读幻灯片那样讲授内容，但你也可以把它们当作参考。虽然它们并不能替代出席课堂，因为我们会脱离课本内容，你也会问很多问题。
- en: of good questions and that will get those we're gonna answer and we'll try。
    things and so forth that aren't gonna be reflective in the slides and and anything。
    we talk about in class really is going to be covered on the midterms and short。
    answer questions and so forth I mean it's way off topic it won't be of course
    but。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 好的问题将会得到解答，我们会尝试解决一些不在幻灯片中体现的内容。我们在课堂上讨论的内容实际上会在期中考试和简答题中涉及，*当然不会偏离主题*。
- en: you should be responsible for that now while I'm thinking about it as far as。
    the class itself being videotaped it is not being videotaped wearing a microphone。
    and looks like it's being videotaped it's not I will generally put together a。
    screencast which means it's just gonna be what you see on the board and me talking。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在应该为此负责。顺便提一下，关于课堂是否会录像，实际上是没有录像的，虽然我带着麦克风，看起来像是录像了，但其实并没有。我通常会制作一个屏幕录制，这意味着你看到的只是黑板上的内容和我在讲解。
- en: you won't see me at all and some people like to rely on those if you do rely
    on。 those just know that sometimes my computer breaks or I forget to do the。 screencast
    or whatever don't blame me if you don't want to come to class don't。 blame me
    but but I would do my best to try to have the resources available I do。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你将根本看不见我，有些人喜欢依赖这些资源，如果你依赖它们，只要知道有时我的电脑会坏，或者我忘记做屏幕录像，或者其他什么问题。如果你不想来上课，别怪我，我会尽力确保资源可用，我会尽力的。
- en: that not so that you can miss class and timeshift the lectures but more so that。
    if you need to go back and look at something from lecture it's a good idea。 to
    do that that's why I do it some people time shift it and I'm not gonna。 complain
    about it but it's nice to see yours my own faces here regardless okay。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做不是为了让你错过课程并错开讲座的时间，而是为了如果你需要回去查看某个讲座内容，这是一个不错的主意。做这件事是我这么做的原因，有些人会错开时间观看，我不会抱怨，但无论如何能看到你们我的脸总是很好的，没问题。
- en: well questions so far it's lots of logistics so far okay I talked I talked。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止有问题吗？到目前为止全是些后勤问题，好吧，我说过，我说过。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_13.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_13.png)'
- en: most about this mostly about these things already the the and this kind of。
    goes over some of the syllabus again and you can get the the syllabus online and。
    I've already put these some of the details on the calendar as well but as I said。
    the first thing we're gonna talk about starting today is Linux file systems and。
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这些内容大部分已经涉及了，关于这些内容的讲解，也有些大纲的内容再次提及，你可以在线查看大纲，我已经把这些细节放到日历上了，正如我所说，我们今天开始讨论的第一件事是
    Linux 文件系统。
- en: how file systems actually work and some of the different system calls that we。
    will use and by the way that word system call is something that you may not have。
    heard before it's basically a function that ends up getting run by the kernel。
    which is run by the operating system so you've got your program doing its thing。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们讲解了文件系统是如何实际工作的，以及我们将要使用的不同系统调用。顺便说一下，“系统调用”这个词可能是你之前没有听过的，它基本上是一个由操作系统内核运行的函数。所以你有自己的程序在运行。
- en: and then it does a system call which looks just like a function call into the。
    kernel and the kernel does all the stuff that that touches the system like files。
    and networking and and so forth and that's so that you don't have access。 directly
    in your own programs and it's a security feature of the of the operating。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它做一个系统调用，这就像是一个函数调用，进入内核，内核处理所有涉及系统的事情，比如文件和网络等。这样你就不能直接在自己的程序中访问它们，这是操作系统的一项安全特性。
- en: system okay so we'll do that we'll talk about naming and layering and we'll
    talk。 about we'll talk about these things called iNodes which are the the way
    that。 computer keeps track of your files lo and behold computers actually put
    a。 number associated with all your files go figure all right of course it does。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们会讨论命名和分层，并讨论这些叫做iNodes的东西，iNodes是计算机跟踪你文件的方式，事实证明计算机实际上会给你的每个文件分配一个数字，真巧吧，当然会。
- en: right because computers like numbers better than words so that's there's this。
    thing called an iNodes which kind of distinguishes your file from some other。
    one and it's just a number as it turns out we'll talk about that then as I said。
    we'll go into multi processing and we'll do these things called forking which
    is。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 对，因为计算机比起单纯的文字更喜欢数字，所以有这么一个叫做iNodes的东西，它能区分你的文件和其他文件，实际上它只是一个数字。正如我所说，我们会讨论这个问题，然后我们将讨论多进程，并进行所谓的“分叉”操作。
- en: branching of your program as it almost sounds like and then there's you have
    to。 be able to coordinate those things so we'll use things like weight PID and。
    executive CVP which means which basically means take your take another。 program
    and start running it immediately that's already that's on your system。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 就像是你的程序的分支一样，然后你必须能够协调这些进程，我们会用到像`wait PID`和`exec CVP`这样的工具，这基本上意味着将另一个程序立刻启动并运行，这已经在你的系统上了。
- en: it's a cool way to run external programs while your program is doing things
    one。 of the assignments for that is called Stanford Shell which is basically what。
    your shell is doing I mean if we go over here and we say LS right well there's
    a。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种很酷的方式，可以在你的程序执行时运行外部程序。这个作业之一叫做 Stanford Shell，它基本上是在做你的 shell 所做的事情。如果我们来到这里，输入`LS`，那么这里就有一个。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_15.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_15.png)'
- en: program running the shell which is what the which is what you're typing right
    and。 then when I take LS that's another program and your shell says to the。 operating
    system hey run that LS program and then come back to me and go from。 there so
    that's what's happening when you type LS it's a multi processing endeavor。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 程序运行外壳，也就是你输入的内容，对吧？然后当我输入 `LS` 时，那是另一个程序，你的 shell 告诉操作系统，嘿，运行那个 `LS` 程序，然后再回到我继续执行。所以，当你输入
    `LS` 时，这就是一个多处理的过程。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_17.png)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_17.png)'
- en: right there okay all right we are going to also talk about protected address。
    spaces and a little bit about virtual memory you know how you you know on the。
    let's see if I can do this you know how on you know how on in your like CS 107
    we。 drew all these memory diagrams and we said that well it's not gonna look。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 就在这里，好吧，我们还会谈到保护地址空间，以及一点虚拟内存的内容。你知道如何在，嗯，让我看看我能不能做到，你知道在你们的 CS 107 课程中，我们画了这些内存图，并且我们说，好吧，它看起来不会像。
- en: very good here other time here do these memory diagrams and like here's the
    heap。 and here's the stack and like or around sorry the stack grows down stacks
    up here。 and then the heaps down here I'm doing it backwards depends on which
    class you。 teach about how you draw those anyway stack goes down heat goes up
    and and this。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 非常好，这里是另外的时间，我们做这些内存图，就像这是堆区，那里是栈区，或者，抱歉，栈是向下增长的，栈在这里，然后堆在下面，我做得有点反了，取决于你教的是哪一类课程，不管怎么画，栈是向下增长的，堆是向上增长的，嗯，这个。
- en: like starts to some value in this okay it's all along for what it's worth it。
    turns out that every program thinks it has access to the entire memory system。
    and it's all faked out by that right the entire program like the your program
    says。 oh I have access to all the memory well really whenever it accesses memory
    the。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 类似地，它开始在某个值上运行，好吧，值无论如何都会存在。结果是每个程序都认为它可以访问整个内存系统，而这一切都是被虚拟化的，对吧？整个程序就像你的程序说，哦，我可以访问所有的内存，实际上每当它访问内存时，
- en: operating system gets in a way the way and says okay you're actually looking
    at。 over here but you think you're looking at this part of memory and it's it's
    a。 it's kind of a neat way to to virtualize things and we call it virtual memory。
    because of that and it the reason we do that is so that it simplifies your。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统介入并告诉你，实际上你正在看这个地方，但你以为你在看内存的这一部分，它是一种非常巧妙的方式来虚拟化东西，我们称之为虚拟内存，正因为如此。我们这么做的原因是为了简化你的。
- en: program it's not like your program needs to know oh I'm shoehorned into this
    little。 part of memory here I get the entire system well we'll make it look like
    you。 have the entire system and we'll take care of the the handshaking that makes。
    makes it go back to to the original or to make it look like you know what you're。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 程序一样，不是你的程序需要知道，哦，我被限制在这小部分内存里，而是你获得了整个系统的内存。我们会让它看起来像是你有整个系统的内存，我们会处理这些握手操作，让它返回到原来的状态，或者让它看起来像是你知道你正在做什么。
- en: doing and actually stores things where it really is we'll get into the details
    of。 that that's all part of multi processing exceptional control flow etc。 okay
    we'll。 also talk a little about concurrency versus parallelism concurrency is
    this。 idea that two or more things are happening at the same time parallelism
    is。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上存储内容的地方，它真正存在，我们将深入探讨这些细节，这都是多处理、异常控制流等内容的一部分。好的，我们还会稍微谈谈并发与并行的区别。并发是指两个或多个任务在同一时间内发生，而并行是。
- en: the idea that you've got a big problem that you're breaking into chunks and。
    solving at the same time so there's there's a little bit of a difference。 there
    in like idea and abstraction we'll get to those things and we'll also talk。 about
    how to send signals between different programs okay then I said we're。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这个想法是，你有一个大问题，正在将其分解成若干块并同时解决，所以在这里有一点区别。关于想法和抽象的部分，我们稍后会谈到这些内容，我们还会讨论如何在不同的程序之间发送信号，好吗？然后我说过我们已经。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_19.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_19.png)'
- en: gonna talk about threading which is another concurrency kind of idea and this。
    is where you can actually emulate many real world things using this threading。
    idea where you basically say hey I've got a whole bunch of tasks to do and they。
    might communicate between each other I'm gonna set part of my program off doing。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要谈论线程，这是另一种并发的概念。这是你可以利用线程概念模拟许多现实世界的事情，你基本上是说，嘿，我有一堆任务要做，它们可能会相互通信，我会将我的程序的一部分分配出去做。
- en: these things independently of everything else until it receives a message to
    go。 do like work with something else so they're happening kind of all at the same。
    time and it models some nice problems for us so we will we'll do that we also。
    have to talk about this idea that if you have two things both trying to access
    a。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 这些事情相互独立地发生，直到接收到去。 做其他事情的消息，它们几乎同时发生，并为我们建模了一些有趣的问题。所以我们将会做那个，我们还。 必须讨论这个概念，如果你有两件事情都在尝试访问一个。
- en: data structure at the same time let's say they both are trying to add things
    to a。 set or read from a set or so forth if they're trying to do that at the same。
    time and we only have one copy of the set guess what we're gonna run into。 problems
    unless we say hey you go first and then you go first or then you go。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 数据结构同时发生，假设它们都在尝试向一个。 集合中添加内容或从集合中读取内容，等等。如果它们正在尝试同时进行这些操作，而我们只有一个集合的副本，猜猜看，我们会遇到。
    问题，除非我们说嘿，你先来，然后你先来，或者你先来。
- en: second right and one one after the other and we may not be able to order those。
    necessarily that's the other thing about this class there's a lot of non-deterministic。
    things that are gonna happen in your programs okay and I don't mean things that。
    are just bugs I mean like you have things that when you run it two times in a
    row。
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个右边和一个接一个，我们可能无法对这些进行排序。 这也是这个课程的另一件事，存在很多非确定性的。 事情会在你的程序中发生，好吧，我指的不是那些。 只是错误的东西，我是说，当你连续运行两次时会发生的事情。
- en: and it's perfectly written it will produce two different outputs because it。
    just happens that the operating system grabbed this part of the program first。
    before this one and it did in a slightly different order so those sorts of things。
    are we'll have to contend with those as we go through the as we go through the。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 它是完全正确的，它将产生两个不同的输出，因为。 正巧操作系统首先抓取了程序的这一部分。 然后这个程序在略微不同的顺序中运行，所以这些事情。 是的，我们必须在接下来的过程中应对这些。
- en: course okay but anyway point is that when you're trying to access that one。
    data structure with two different threads you need to do what we call locking。
    where you basically say I'm going to access it now anybody else has to wait。 and
    then the next and then the next thread can can go and do it so we will。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 课程，好吧，但无论如何，关键是当你尝试通过两个不同的线程访问那个数据。 结构时，你需要做我们所说的锁定。 你基本上是说我现在要访问它，其他任何人都得等。
    然后下一个线程可以继续进行，所以我们将。
- en: get into those details it's kind of fun when it works and it is a little。 challenging
    to get it right but it is fun when it works okay all right and then。 we're gonna
    talk about there's some differences between the way threads。 working C and C++
    most of the stuff we do will be in C++ but we'll see the。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 进入这些细节时，当它工作时，它很有趣，而且有点。 挑战性，要做到正确，但它在工作时真的很有趣，好吧，好的，然后。 我们要讨论的是线程之间的一些差异。 在C和C++中的工作方式，大部分我们做的事情会在C++中进行，但我们会看到。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_21.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_21.png)'
- en: differences okay all right then finally as I said we're gonna do networking
    and。 networking is as you might expect it's two computers talking to each other
    or or。 a computer talking to itself through this thing called a port and this
    this。 involves IP addresses which is how the internet determines what computer
    your。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 差异，好吧，然后最后如我所说，我们要做网络编程。 网络编程，正如你所预期的那样，就是两台计算机相互通信，或者。 一台计算机通过一个叫做端口的东西与自己通信。
    这涉及到IP地址，它是互联网确定哪个计算机是你的。
- en: computer is if you type myth。stanford。edu it goes to a particular bank of。 computers
    and that's over the network of course I will write some very trivial。 web pages
    that will actually be accessing to so that you can test some of your。 programs
    with your browser and we'll go into that and we'll also go into some of。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机是，如果你输入 myth。stanford。edu，它会去一个特定的计算机群。 和那是通过网络完成的，当然，我会写一些非常简单的网页，实际上会进行访问，这样你就可以用浏览器测试一些你的。
    程序，我们将深入讨论这个，并且我们还会深入了解一些。
- en: the details of HTTP which is the protocol used on the internet to send。 and
    receive data like it has to be two computers when they're talking to each。 other
    had better agree on what language they're using and what protocol they're。 using
    otherwise they'd never be able to talk and HTTP happens to be the way the。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: HTTP的细节，它是互联网中用来发送。 和接收数据的协议，就像两台计算机在相互通信时，必须就它们使用的语言和协议达成一致，否则它们永远无法交谈，HTTP恰好是。
    互联网中使用的方式。
- en: way that works okay and then finally as I said we're gonna end up doing this。
    program called MapReduce which is an idea of taking a problem breaking it into。
    many parts having lots of different computers work on all those parts and。 then
    collecting the data back again for a final answer so that's that's the the。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 一种可行的方式，好吧，最后就像我说的，我们将最终实现一个叫做 MapReduce 的程序，这是一个将问题拆分成多个部分，让许多不同的计算机处理这些部分，然后收集数据得出最终答案的想法，所以这就是我们要做的事情。
- en: final thing and then the last thing we'll talk about for the last couple days
    of。 class there's not an actual assignment on it is what we call non-blocking
    I/O and。 by blocking we mean we're gonna see an example of blocking later today
    by。 blocking we mean the program when you're asking for data we'll wait for that。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一点，我们将在课程的最后几天讨论的内容，虽然没有实际的作业，叫做非阻塞 I/O。所谓的阻塞，我们稍后会看到一个阻塞的例子，意思是，当你请求数据时，程序会等待数据。
- en: data to arrive and that's called blocking otherwise we can have it asked for。
    data and then keep going if the data doesn't it hasn't available yet and then。
    comes back later and checks again so that's the last thing we're gonna do okay。
    so that's the big thing like I said most of the stuff in this class is all about。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 数据到达的过程称为阻塞，否则我们可以要求数据，然后继续进行，如果数据尚未可用，就会稍后返回并再次检查，所以这就是我们要做的最后一件事，好吗？所以这就是我要说的重点，就像我说的，本课程的大部分内容都围绕着这个。
- en: like operating systems sort of thing so you're gonna we're gonna get into some。
    of the details of what the operating system is actually doing for you in。 particular
    the Linux operating system but guess what the Mac governing system。 and the Windows
    operating system and the Raspberry Pi's operating system all。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 就是操作系统的那一部分，所以我们将深入研究操作系统实际上为你做了什么，特别是 Linux 操作系统，但你猜怎么着，Mac 操作系统、Windows 操作系统和
    Raspberry Pi 的操作系统也是一样的。
- en: that are really the same sort of thing they're they're all doing the same have。
    the same sort of features because some people decided a while ago hey those are。
    cool features that we'd like to have that's the other thing by the way in this。
    class we'll talk about a lot of things and you'll say to yourself huh that seems。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 它们实际上是同样的事情，它们都在做同样的事情，具有相同的特性，因为有些人早些时候决定，嘿，这些是我们想要的很酷的特性。顺便说一句，在这门课中，我们会谈论很多内容，你会对自己说，嗯，这似乎。
- en: really specific like doing this this way seems like a really specific way of。
    doing it and you're absolutely right it was some people some very clever people。
    in my opinion who made decisions to do something this way there are many many。
    other ways to do it we're gonna look at a file system for our second assignment。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做看起来确实像是一个非常具体的做法，你完全正确，这种做法确实是一些非常聪明的人做出的决定，我个人认为，他们选择了这种方式，当然有许多其他方法可以实现这一点。我们将查看第二个作业中的文件系统。
- en: and you're gonna have to know all the nuances of how that file system works。
    and all these things about block numbers and I know numbers and how to how to。
    access and how much data is stored and so forth that wasn't the only way to do。
    this in fact newer operating systems have different file systems and your。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要知道该文件系统的所有细节，包括块号、I/O号，以及如何访问和存储多少数据等等。事实上，这并不是唯一的做法，实际上更新的操作系统使用了不同的文件系统，你的。
- en: Mac is in file system and Windows is a different file system it's just one way。
    of doing it and we want you to appreciate that aspect of it not。 necessarily to
    say oh my gosh this is the one way to do it and I better。 memorize this exact
    way of doing it I mean you do have to know it but you you。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: Mac 是一种文件系统，而 Windows 是另一种文件系统，这只是实现的一种方式。我们希望你能理解这一点，而不是单纯地认为，哦，天哪，这就是唯一的做法，我最好把这种方式完全记住。我的意思是，你确实需要知道它，但你。
- en: don't have to specifically think oh that's the only way of doing it please。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要特别认为，哦，这就是唯一的做法，请不要这样想。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_23.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_23.png)'
- en: don't think that okay all right a little bit more logistics here programming。
    assignments 40% of your grade they're the most important part all at once is。
    there's eight assignments as I said some of the assignments are like one file
    do。 your thing and you're done like the first assignment I think you have to write。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 不要认为好吧，好了，这里还有一点点关于编程的后勤工作。作业占你成绩的40%，它们是最重要的部分。就像我说的，作业一共有八个，有些作业是做一个文件，做完你的事情就结束了，比如第一项作业，我想你得写。
- en: basically code in one file most of the programming assignments you have to write。
    in a few different files you generally don't have to write like 20 different。
    files were things but there's key things in each file as I said a few minutes
    ago。 there are lots of files involved in these in these programs we want to give
    you。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上，大多数编程作业都要求你将代码写在一个文件中，但你需要在几个不同的文件中进行编写，通常你不需要写20个不同的文件，虽然每个文件都有一些关键内容，正如我几分钟前提到的，这些程序中涉及了很多文件，我们希望给你
- en: programming assignments that are both challenging and interesting and to do。
    that a lot of times we have to have a lot of back-end kind of things to make it。
    kind of work and then you do that kind of the meat of it and that's why there's。
    lots of different types of header files and things really really really when you're。
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 编程作业既具有挑战性又有趣，为了做到这一点，很多时候我们需要进行大量的后端工作，才能让它顺利运行，然后你就可以做这部分内容了，这就是为什么有很多不同类型的头文件和其他东西，真的，真的，当你。
- en: going and reading your through your assignment just spent an hour or two。 looking
    through the header files going oh that's that and that's what this is oh。 I better
    remember this because you'll use it later and you'll and that will help。 you kind
    of trigger your memory that oh that's what I can go use you wouldn't be。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 去阅读你的作业，花一两个小时看看头文件，哦，这就是那个，哦，这是什么，我最好记住这个，因为以后会用到，这将帮助你激活你的记忆，“哦，这就是我可以去用的东西”，你不会。
- en: you'd be surprised at how many questions on Piazza are all about oh how do I
    do。 this and somebody's looking this header files right there and that are files。
    have a lot of comments in them too so that's my comment on that the late policy。
    for this class as it turns out the late policy may or may not cost you points。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 你会惊讶于Piazza上有多少问题都是关于“哦，我该怎么做？”而有人就在找这个头文件，头文件里面也有很多注释。这就是我对这个问题的评论，关于这门课的迟交政策，实际上，迟交政策可能会影响你得分，也可能不会。
- en: it's a little different than lots of other classes here's how it works if you。
    submit on time obviously you get you can get up to a hundred percent of the。 points
    that makes sense if you submit 24 up to 24 hours later your assignment is。 capped
    at 90 percent so if you get an 80 percent on the assignment and you hand。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 这与很多其他课程有点不同，以下是运作方式。如果你按时提交，显然你可以获得最多百分之百的分数，这很有道理。如果你延迟最多24小时提交，你的作业分数将限制在90%。所以如果你在作业上得了80分，而你提交了。
- en: it in a day late doesn't matter you're still gonna get that 80 percent it's。
    not gonna take more points off okay but if you had a 95 it gets capped at 90。
    that's how that works the same thing is true for 24 hours it goes down to 60%。
    cap so you're sorry for the next 24 for 48 hours later so you probably want to。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 如果迟交一天，没关系，你仍然会得到80%的分数，不会再扣更多分数。但如果你得了95分，它会被限制在90分，这就是它的运作方式。对于24小时内提交的情况，分数会下降到60%，如果超过48小时，分数会继续下降。所以你可能希望。
- en: try to hand it in at most day late otherwise you do get kind of penalized。 on
    lots of points we generally don't accept assignments after 48 hours unless。 there's
    very good extenuating circumstances you're ill or you've got。 something that's
    curricular related that's not another class but something that's。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 尽量在最多延迟一天的情况下提交，否则你会在很多分数上受到惩罚。我们通常不接受超过48小时的作业，除非有非常充分的特殊情况，比如生病，或者你有与课程相关的紧急情况，而不是另一门课，而是其他事情。
- en: that's related to why you can't actually do the assignment job interview or。
    something like that email me will probably I'll probably give you a little。 extension
    for free that's that let's see the part that oh discussion sections。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 这与为什么你实际上不能做作业、参加面试或类似的事情有关，给我发个邮件，我可能会给你一个小的延迟，免费延长一下，看看哪部分哦，讨论小组。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_25.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_25.png)'
- en: that's next as I said Monday Wednesday's your lectures the one exception Friday
    we。 are having lecture labs sections start next week we're doing three lectures
    this。 week just so that we can get through some material for your project next
    or for。 your assignment next week on our three this week following this just Monday。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 下一项，如我所说，周一和周三是你的讲座，唯一的例外是周五，我们将开始讲座实验部分，下周我们将进行三场讲座，只是为了能完成一些材料，为下周的项目或作业做准备，本周的三场讲座，接下来只剩周一。
- en: Wednesday not Friday Fridays are generally the like the labs the discussion。
    sections as I said a CA is leading them I think I'm gonna be leading a section。
    too and they're a little bit of theoretical things talking about stuff we。 talked
    about in class but then there's a lot of looking at code and going through。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 周三的讨论课不是周五，周五通常是实验课和讨论课，正如我所说，助教会带这些课程，我也可能会带一个讨论课，它们会涉及一些理论内容，讨论我们在课堂上讲过的东西，但也有很多关于代码的分析和讨论。
- en: code and then answering questions about that code and doing some other kind
    of。 looking at the details of things okay they are not mandatory in the sense
    that if。 you go to all of the lab of all the discussion sections is 5% of your
    final。 grade and you just get 100% for showing up okay every time you miss a discussion。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 代码，然后回答有关代码的问题，并做一些其他类型的细节分析，好吗？这些讨论课并不是强制性的，意思是如果你参加所有的实验课和讨论课，它们会占你期末成绩的5%，只要你出席，每次缺席一节讨论课，你的成绩会略微下降，期末考试的分数则会略微提高。
- en: section you your great council a little it counts a little bit less and your。
    final exam counts a little bit more right so that's all it's not so much a。 penalty
    if you don't go to sections it's just that I gotta do a little bit。 better on
    the on the final and this is for people who are like I hate going to。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这不是一种惩罚，只是你如果不去上讨论课，就必须在期末考试上做得更好。这是针对那些说“我讨厌去讨论课”的人来说的。
- en: sections they're boring I don't need them well great you don't have to but they。
    are there for your benefit okay discussion section signups Sunday April 7th。 this
    Sunday at noon is when it's gonna open up like I said most of the sections。 are
    gonna be Friday during this time slot some of the sections are going to be。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 觉得它们很无聊，不需要参加？好吧，那没关系，你可以不去，但这些课程是为了你的利益设置的。讨论课的报名将于4月7日（周日）中午12点开始，如我所说，大部分课程会安排在周五的这个时间段，一些课程会安排在其他时间。
- en: on Thursday so if you really want a Thursday section get in there early on。
    Sunday like Sunday around noon and sign up for them okay I don't know exactly。
    how many sections yet in each one but that will be available then okay all right。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你真的想要一个周四的课程，周日中午左右早点去报名，好吗？我还不确定每个课程的具体数量，但到时候会公布的。好的，明白了。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_27.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_27.png)'
- en: midterm there are exams in this class the midterm is going to be Thursday May，
    2nd 6 to 8 p。m。 it's outside of class we're gonna use blue book who has used blue。
    book before yeah most of you guys you've never used it it's just a program that。
    you use that you kind of written in house and it's enabled to type your answers。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 期中考试的时间是周四，5月2日，下午6点到8点。这是课外考试，我们会用蓝皮书，有人用过蓝皮书吗？是的，大多数人都用过。如果你没用过，它只是一个你可以写作答的工具，允许你输入答案。
- en: people tend to like and it makes grading a little bit easier and like you don't。
    have to worry about your handwriting and you can erase and delete and so forth
    I。 think it's pretty good it does require a laptop if you don't have a laptop
    that。 has a good enough battery the last two hours let me know we'll try to get
    you。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 人们倾向于喜欢这样，这也让评分变得稍微简单一些，而且你不需要担心自己的字迹问题，还可以擦掉、删除等等。我觉得这挺好的，它确实需要一台笔记本，如果你的笔记本电池不够好，无法持续两个小时，告诉我，我们会尝试为你解决。
- en: one okay don't want anybody to not be able to do it because of that the exams。
    are closed book closed notes you do get one page back in front notes for the。
    midterm here's the big thing you have to pass the midterm to pass the class all。
    right now what does that mean well it means that most of you will pass the。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，不希望因为这个原因导致任何人无法参加。考试是闭卷闭书的，你可以在期中考试时拿一张纸上的笔记。重要的事情是，你必须通过期中考试才能通过这门课。现在这意味着什么呢？意味着你们大多数人都会通过期中考试。
- en: midterm okay I mean we don't sit there and go oh 40% of you are out of the class。
    because you failed midterm no the number of people who fail a midterm is very。
    very small but it is possible to fail a midterm so you do have to do well on。
    you have to do a passing grade don't stress about that too much just know that。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我是说，我们不会说“哦，40%的人因为期中考试挂了就要被淘汰”不会的，期中考试失败的人数非常非常少，但确实有可能会失败，所以你必须做得很好，必须达到及格分数。不要太焦虑，知道就好。
- en: you do have to do that that does bring me to another point how many graduating。
    seniors do we have here a few of you guys right first of all give everybody I。
    want to give you guys our applause all right you made it to Stanford well almost。
    haven't quite made it through Stanford yet you decided to take a really hard。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你确实需要做到这一点，这也让我想到另一个问题，我们这里有多少即将毕业的高年级学生？你们中的一些人对吧？首先，我想给大家掌声，好的，你们已经成功进入了斯坦福大学，差不多吧。还没完全通过斯坦福大学的考验，你们决定选择一门非常难的课程。
- en: class is your last quarter some of you had to do that I'm sorry that if you
    had。 to do that that was the way it worked out this is a challenging course the
    odds。 are good that you haven't taken follow-on systems classes because you would
    have。 had to take this first so this may be a very very challenging course for
    you if。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这门课是你们的最后一学期，有些同学可能必须这样做，我很抱歉如果你们必须这样做，这就是最终的安排。这是一门具有挑战性的课程，通常来说，你们可能没有修过后续的系统课程，因为你们本来就应该先修这门课程。所以这对你们来说可能是一门非常非常具有挑战性的课程，如果你们没有相关背景的话。
- en: you find yourself falling behind and this goes particularly for seniors who
    can't。 retake the course or over there or you have to take it with some or whatever。
    please please get the help early okay I know that's we say it in every class but。
    that's really really important okay now multiple practices we're gonna give。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己跟不上进度，尤其是对于那些不能重修课程的高年级学生来说，这一点尤其重要，或者你必须和某些人一起上课或者其他情况，请请尽早寻求帮助，好吗？我知道我们在每门课中都会说这个，但是这真的非常非常重要，好吗？现在我们要给你们做一些多次练习。
- en: multiple practice exams we're going to do that if you have an if you have。 another
    competing thing at the midterm time I know lots of people have I think。 Thursday
    evenings might be like symphony or something like that that's fine you。 can take
    it earlier in the day we'll have those details a little bit later okay and。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会提供多次模拟考试，如果你在期中考试时间有冲突，我知道很多人会有，我觉得星期四晚上可能会有交响乐等活动没问题，你可以在当天早些时候参加，我们会稍后提供这些细节，好吗？
- en: of course you do have testing accommodations email me goes as soon as you can。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，如果你有考试 accommodations，请尽早发邮件给我。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_29.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_29.png)'
- en: the earlier kind of the better there's a final exam the final exams 35% of your。
    grade it is cumulative there are gonna be problems you'll see on file systems
    on。 the final exam also closed book you get two pages of notes and it's going
    to be， June 10th 7 p。m。 I'm sorry June 10th 3 30 p。m。 there's an alternate is
    7 if you。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 越早越好，期末考试的时间是6月10日下午3:30，考试占你总成绩的35%。它是综合性的，你将会看到有关文件系统的题目，期末考试是闭卷的，你可以带两页笔记，考试时间是6月10日下午3:30，抱歉，另外一个时间是晚上7点，如果你有冲突的话。
- en: have another class that conflicts a lot of times you say you can't have。 conflicting
    classes look I understand some people have conflicting classes you。 can take it
    at the second time if you have two conflicting classes well figured。 out all right
    or three conflicting classes or whatever figured out the let's。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有另一门课与这门课冲突，很多时候你会说你不能上。冲突的课程，我理解一些人有冲突的课程。如果你有两门冲突的课程，可以考虑在第二轮上课时解决。好的，或者三门冲突的课程，或者其他的冲突，弄清楚怎么解决，好吧，解决了就行。
- en: see what else about the final you do it past the final past class as well again。
    very few people fail the final it does happen okay all right I think those are。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你们做了什么其他关于期末考试的准备？通过了期末考试，通过了课堂考核，好吧。很少有人会失败期末考试，但确实会发生，好吧。好了，我想这些就是关于期末考试的所有内容了。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_31.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_31.png)'
- en: '![](img/a24171389b50634ece0607b1841cc3fe_32.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_32.png)'
- en: that's the biggest thing about the logistics a final thing that really should。
    not be even need to be mentioned is honor code look some of these assignments
    are。 out there okay your friends took these this class before or assignments are。
    online or whatever because people put them there you should not be putting any。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于课程安排的最大问题，其实应该完全不需要提到的一个点是荣誉守则。看看一些作业是在网上的，好吗，你的朋友们以前修过这门课，或者作业在网上，或者其他地方因为有人把它们放上去了，你不应该把任何这些内容上传。
- en: of your assignments on public repositories please we'll ask you to take。 them
    down but if you find things online please disregard you want to do the。 assignments
    and we have ways of checking them so I will leave it at that all right。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你们的作业上传到了公共仓库上，请注意我们会要求你们将其删除。如果你们在网上找到了类似内容，请忽略它们。你们应该按要求完成作业，我们有办法检查这些作业，所以我就说到这里，好的。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_34.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_34.png)'
- en: what questions you have on logistics before you go into some details about。
    final systems any logistics questions， no okay let's jump right in file systems
    so you guys should be familiar with。 Unix and Linux at this point right if you
    go and you type LS right you type LS。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在深入讨论文件系统之前，有没有关于物流的任何问题？如果没有，我们就开始讲文件系统。你们现在应该已经熟悉了Unix和Linux，对吧？如果你们输入`LS`，会看到当前目录下的文件列表。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_36.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_36.png)'
- en: you get a list of the files that are in some directory that happen to be in
    and。 you may and you may have traversed down the directory some some distance
    like。 this you may have traversed down the directory some some distance to actually。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到某个目录中的文件列表，你也可能已经在某个目录中往下遍历了一些距离，像这样……
- en: '![](img/a24171389b50634ece0607b1841cc3fe_38.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_38.png)'
- en: get there okay and there are other things that you can do aside from just。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 到达那里后，好吧，除了做这些事情外，你还可以做一些其他操作。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_40.png)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_40.png)'
- en: typing LS you type LS - AL for instance it gives you a more detailed list the
    A。
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 输入`LS`时，如果输入`LS - AL`，例如，它会给你一个更详细的列表，其中A表示……
- en: '![](img/a24171389b50634ece0607b1841cc3fe_42.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_42.png)'
- en: stands for all files which includes all the hidden ones would start with a。
    period and it include the L stands for give me a nice big listing of more。 details
    about the files okay in here there are two files in particular that are。 interesting
    one is called dot and one is called dot dot you probably know about。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '`*` 代表所有文件，包括以句点开始的隐藏文件，`L`代表以较大格式列出文件的详细信息。在这里有两个特别有趣的文件，一个叫做“点”（dot），一个叫做“点点”（dot
    dot），你可能已经听说过这些。'
- en: those from 107 as well but those those files stand for directories stand for
    the。 current directory dot and the previous directory dot dot and this is how
    you。 traverse backwards and forwards through a directory okay and then the other
    files。 in here just the ones that exist any others I don't think there's any other
    ones。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是107的文件，但这些文件代表的是目录，表示当前目录是“点”文件（dot），而上级目录是“点点”文件（dot dot）。这就是你如何在目录中前后导航的方法。然后，这里其他的文件就是实际存在的文件，我想应该没有其他文件了。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_44.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_44.png)'
- en: that start with a period in here but those the hidden ones and then there's
    all。 this other information like this stuff out here we're gonna go into more。
    details in a second on that that's your well it tells you whether or not it's
    a。 directory and it's also the permissions for the file so you talk about permissions。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中以句点开始的文件是隐藏文件，然后还有其他一些信息，例如，这些在这里的内容稍后会进一步详细介绍。这告诉你它是否是一个目录，同时也列出了文件的权限，所以我们接下来会讨论文件权限。
- en: at all in 107 I don't think you did yeah okay permissions are basically who
    has。
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在107中你没有遇到这些问题吧？我想你应该没有。好吧，文件权限基本上就是谁有权访问。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_46.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_46.png)'
- en: access to your files okay and on this list right here it looks like I am the。
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你文件的访问权限，好的，列表上看起来我就是……
- en: '![](img/a24171389b50634ece0607b1841cc3fe_48.png)'
  id: totrans-166
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_48.png)'
- en: only one of that has access because the first three things after the first dash。
    are the users permissions and only the only ones that have anything in there are。
    are for the user which is me in this case all the rest of those dashes are for。
    the group which you guys all belong to various groups like the course group and。
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 只有其中一个有权限，因为在第一个破折号后的前三项是用户的权限，只有**我**（在这种情况下）有相关权限，其余的破折号是用于分配给你们这些属于不同组的用户，如课程组等。
- en: some other groups and you also belong to the other category which everybody
    else。
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你们也属于其他一些组，同时你们也属于“其他”类别，这是所有其他人的分类。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_50.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_50.png)'
- en: those are the other two parts we'll get into more details about that in a minute。
    okay who's sending me messages stop sending you messages thank you um you can。
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 那些是另外两个部分，我们稍后会更详细地讨论。好了，谁在给我发消息？请不要再发消息了，谢谢。你可以……
- en: '![](img/a24171389b50634ece0607b1841cc3fe_52.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_52.png)'
- en: do that you can do that please don't learn how to do that it's not it's not。
    it's not it's the messes things up sometimes anyway very nice all right so。
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 请不要学会这样做，它很容易搞乱东西，反正不建议这样做。好吧，非常好，接下来……
- en: '![](img/a24171389b50634ece0607b1841cc3fe_54.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_54.png)'
- en: oh by the way the permissions that you have are read write and execute the only。
    things you can execute are files that are binary files or files that are like。
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，对了，你所拥有的权限是读、写和执行，你唯一可以执行的文件是二进制文件，或者像。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_56.png)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_56.png)'
- en: scripts written in language like Python and so forth okay that's that's when
    the。 x becomes important as I said there's three parts to these files there's
    the。 owner part the group part and the other part and each one can have its own
    type。 of permission its own permissions like if this this up here like if I had
    this。
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 用 Python 等语言编写的脚本，好的，那就是为什么 X 变得重要。正如我所说，这些文件有三个部分，它们分别是拥有者部分、组部分和其他部分，每一部分都有自己的权限类型。如果上面有这个权限。
- en: file called list and it had these permissions - R W X R - X R - X that's down。
    here this basically means okay that the owner has read write execute privileges。
    the owner being in this case me let's say the group can also read the file and。
    execute it and anybody else can also read the file and execute it that's how。
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 文件叫做 list，它有这些权限 - R W X R - X R - X，在这里。这基本上意味着，好的，拥有者有读、写和执行的权限。这里的拥有者是我，假设是我，组也可以读文件并执行，而其他任何人也可以读文件并执行，这就是这样。
- en: permissions work okay and we do this for security reasons we also do it for。
    sharing reasons if you want to share things and so forth here's the interesting。
    part about it because it's R W and X that means there's three bits of。 information
    which means three with three bits of information bits of。
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 权限是如此工作，好的，我们这样做是出于安全原因，我们也这样做是为了共享，如果你想共享东西等等。这里有趣的部分是，因为它是 R W 和 X，这意味着有三个信息位，三个信息位意味着三位二进制数的位。
- en: information you can encode that in one value that goes from zero to seven which。
    would maybe make you think that we could actually use the octal base 8 system
    for。 this and you're going why would we ever do this well here's why okay if you
    have。 the following permissions R W X assume that a one means that permission
    is set。
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以把信息编码成一个值，它的范围从零到七，这可能会让你想，嗯，为什么我们要用八进制的 8 系统呢？好吧，原因是，假设你有以下权限 R W X，假设 1
    表示该权限已设置。
- en: so that you can do that a zero means it's set so you can't do it or it's。 unset
    so R W X would be one one one that's seven right that's a one or seven sort。 of
    thing convert binary to to in this case either decimal or hex decimal or for。
    that matter octal and then one zero one would be R - X and that would be five
    well。
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以这么做，零意味着它已被设置，因此不能再做任何操作，或者它未设置，所以 R W X 会是 1 1 1，就是 7，对吧，这是一个 1 或 7 之类的东西。将二进制转换成这个情况下的十进制或十六进制，或者如果是八进制的话，1
    0 1 会是 R - X，这就是 5。
- en: if you take the number 7 5 5 that number is an octal number okay so it's a 7
    it。 can't go if you added one to that it would not be 7 5 6 it would be 7 6 0
    right。 oh no sorry it wouldn't unlike you had if you had a wonder it would be
    7 5 6 if you。 added three to it it would or if you had a yeah if you had a three
    to it it would。
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你拿到数字 7 5 5，那是一个八进制数，好的，所以它是一个 7。如果你在它上面加一，它就不会变成 7 5 6，而是变成 7 6 0，对吧。哦不，抱歉，它不会那样变，除非你加一，那它就会变成
    7 5 6。如果你加三的话，它就会，或者如果你加三的话，它就会变成。
- en: flip over because it's base 8 the only part the important part is you will。
    often see this just think of them as individual digits each being those three。
    bits of information that's all you really need to know about that okay now in
    C we。
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它是基于 8 的，所以重要的部分是，你通常会看到这些，只要把它们看作是每个三位二进制数的独立数字就行。这就是你真正需要了解的，好的，现在在 C 语言中，我们。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_58.png)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_58.png)'
- en: can open files now you have done that before I assume in other in other classes。
    like 107 if you want to open a file there's actually two different kind of。
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在可以打开文件了，我猜你以前也做过类似的事。在其他课上，比如 107，如果你想打开文件，实际上有两种不同的类型。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_60.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_60.png)'
- en: overloaded ways to do it you can use the open command the open function which
    is。 actually a system call number I said it looks like a function it's just basically。
    a function and you can put the path name and then some flags and some of those。
    flags need a mode which is those permissions we talked about okay and you。
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以用不同的方式来做这个，可以使用 open 命令，这实际上是一个系统调用。我之前说它看起来像是一个函数，其实它就是一个函数，你可以输入路径名，再加上一些标志，有些标志需要一个模式，也就是我们刚才讨论的权限，好的，你可以这样做。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_62.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_62.png)'
- en: might be saying to yourself oh great I know how to overload functions I know。
    all about that you can do that in C I don't know if you remember from 107 but。
    it turns out you can't overload functions in C so how does this work well go look。
    you can go look at stack overflow and see that anybody happen to look at stack。
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会对自己说，哦，太好了，我知道如何重载函数，我知道。 所有这些，你可以在 C 语言中做到这一点，不知道你是否还记得 107，但。 结果是你不能在
    C 中重载函数，那它是如何工作的呢？ 好吧，去看看。 你可以去 Stack Overflow 看看，看看是否有任何人查看了 Stack。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_64.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_64.png)'
- en: overflow today yeah it looks kind of looks kind of like ugly it's your。 mouse
    goes and it puts little stars behind it and there's banners and。
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 今天的溢出情况，嗯，看起来有点丑，你的。 鼠标移过去，它会在后面加上小星星，还有横幅。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_66.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_66.png)'
- en: everything and banners whatever it's like it says just like the 90s they tried。
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 一切都是如此，还有横幅之类的，它就像是说，就像90年代那样，他们尝试。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_68.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_68.png)'
- en: to make it look like the 90s because April Fool's Day anyway that's that let's。
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 让它看起来像90年代的风格，因为反正是愚人节，就这样吧。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_70.png)'
  id: totrans-195
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_70.png)'
- en: see here we go okay hold on there we go okay you don't want to try this again。
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，等一下，来吧，好了，等一下，你不想再试一次。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_72.png)'
  id: totrans-197
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_72.png)'
- en: '![](img/a24171389b50634ece0607b1841cc3fe_73.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_73.png)'
- en: make it a little bit bigger and then go right here there we go okay。 there we
    go well still not getting bigger okay well anyway about the same all。 right so
    you can you can open a file in Linux by using the open command okay you。 can open
    a file to be either read only which means you can only read from it。
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 让它变得稍微大一点，然后就这样，好了。 好吧，还是没变大，没关系，差不多。 好吧，你可以在 Linux 中使用 open 命令打开文件。 好的，你。 可以将文件打开为只读，这意味着你只能从中读取。
- en: can't write to it right only which means you can I think that's actually not
    the。 right flag I'll look it up but you can read it read only or write only or
    you。 can do read right which means you can read to it and write to it which is
    a。 little bit I don't do that too often okay and then you can when you can do。
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 不能写入它，对，只读意味着你可以，我觉得这其实不是。 正确的标志，我会查一下，但你可以是只读、只写，或者你。 可以进行读写操作，这意味着你可以读取它并写入它，这是一。
    点我不太经常做的事情，好吧，然后你可以做。
- en: that you can actually say I want to create a file and I want to create the。
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你实际上可以说，我想创建一个文件，我想创建这个。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_75.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_75.png)'
- en: file and when you create a file you have to pass in the permissions you want
    to。 use for it okay and you can do this by doing the O_create without the E this
    is。 because they wanted a safe space I guess they decided they don't want that
    an。 extra letter in there but you have to do the O_create without the E that tells。
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 文件，当你创建一个文件时，你必须传入你想要的权限。 用于它，好吧，你可以通过执行 O_create（不带 E）来做到这一点。 这是因为他们想要一个安全空间，我猜他们决定不想再多一个字母，但你必须执行不带
    E 的 O_create，它告诉。
- en: you create the file and then O_excl says only create the file if it doesn't。
    exist already that might be important to you like try to create the file and if。
    it exists fail don't recreate like recreate the file and so we're going to。
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建文件，然后 O_excl 表示只有在文件不存在时才创建文件。 这可能对你很重要，比如尝试创建文件，如果。 它已经存在就失败，不要重新创建文件，就像重新创建文件一样，所以我们要。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_77.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_77.png)'
- en: care about those things okay let's actually and by the way the third mode is。
    the permissions this is actually used to attempt to set the permissions operating。
    systems are a little weird okay one of the things that the operating system does。
    it says I'm going to give you a default set of permissions that I'm going to。
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 关注这些事情，好吧，实际上顺便说一下，第三种模式是权限设置。 这实际上用于尝试设置权限。操作系统有点奇怪，好吧，操作系统做的其中一件事。 它说我要给你一组默认的权限。
- en: create this file with and if you tell me to create more explicit permissions
    I。 won't let you which sounds a little weird but I'll show you an example of how。
    that works you figure that out with a command called or a function called you。
    mask which is basically says what default permissions do we have and it if the
    bit。
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 创建这个文件，并且如果你告诉我创建更明确的权限，我。 不会让你这么做，听起来有点奇怪，但我会给你一个例子，展示如何。 它的工作原理，你可以通过一个叫做
    umask 的命令来弄清楚，它基本上表示我们有什么默认权限，如果位。
- en: is set right then if you try to set that bit for the permissions it doesn't
    work。
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试为权限设置那个位，它不会生效，那时它就设置不对。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_79.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_79.png)'
- en: let me show you what I mean okay let's actually write our first program here。
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 让我给你展示我是什么意思，好的，我们实际上在这里写第一个程序。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_81.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_81.png)'
- en: let's see we'll call it I already have a program here we're gonna call it show。
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们来看一下，我们把它命名为，我已经有一个程序了，我们将其命名为 show。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_83.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_83.png)'
- en: you mask dot see okay and in here what we're gonna do is we're gonna pound。
    include some things pound includes h pound include cis slash types dot h。 that's
    and then another one also you have to pound include to be able to use this。 u-mask
    thing and include by the way I'm I always make mistakes mistakes when I'm。
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 你掩码点 C，好吧，在这里我们要做的是我们要包含一些东西，`#include`一些内容，`#include` h，`#include` cis/slash/types.h。还有一个，另外一个你也需要
    `#include` 才能使用这个 u-mask 相关的东西，顺便说一下，我在打这些东西时总是犯错，所以如果你发现错误，抓住我。
- en: typing these things in so catch me if you find remember if you find them catch
    me。 or tell me cis slash stat dot h okay and then you can do our main functions
    it's。 just in C I'm gonna go put the return 0 in there now and then there's a
    type。 called mode underscore T I'm gonna call it the old mask here's how this
    works。
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`#include` cis/slash/stat.h 好的，然后你可以做我们的主函数， 就是 C 语言的，我现在就把返回 0 放进去，然后有一个类型叫做
    mode_T，我会把它叫做旧掩码，下面是它的工作原理。'
- en: equals u mask which is the it's saying hey get me the permissions that you are。
    going to allow me to set okay and I'm actually gonna set it to zero which says。
    allow any permissions here's the dirty little secret you can make any。 permissions
    actually set it's a little bit weird okay but anyway it's gonna do。
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 等于 u-mask，这意味着“嘿，给我你将允许我设置的权限。”好吧，我实际上会把它设置为零，这就意味着允许任何权限。这里有个小秘密，你可以设置任何权限，实际上可以设置，有点奇怪，好吧，但无论如何，它会执行这个操作。
- en: that and then this is how you get the result it's kind of dumb you have to set。
    the result to get it back so what we can do is we can say okay fine let's just。
    set it back to our old mask it's I think it's a kind of a it was a weird choice。
    but that's the way they did it okay and then if we print F you mask is set to。
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，这是你获得结果的方式，挺愚蠢的，你必须先设置结果才能拿回来。所以我们可以做的是，我们可以说好吧，没关系，我们只需要把它设置回旧的掩码，我觉得这是一种奇怪的选择，但就是这样做的，好的，然后如果我们打印
    F 你会发现掩码被设置为。
- en: remember it's octal these things are octal if you do if you do percent zero
    three。 will pad it with zeros and then you do oh that means do an octal number
    with。 three with three places in it okay and then we'll do the old mask and we'll。
    just hold mask and then or return zero okay this all this is doing it's going
    to。
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，它是八进制的，这些是八进制的。如果你写 `%0 3`，它会用零来填充它，然后你写 `0`，这意味着做一个三位数的八进制数。然后我们就用旧的掩码，我们就保持掩码，然后或者返回零，好吧，这一切其实就是在做这个。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_85.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_85.png)'
- en: '![](img/a24171389b50634ece0607b1841cc3fe_86.png)'
  id: totrans-220
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_86.png)'
- en: know you mask what it's gonna do is gonna tell us what permissions are right。
    now all right 077 what are those three bits what's the zero mean 0 0 0 right。
    what's the seven mean one one one well what this mean and then there's another。
    one one one what it means is the user can set any permissions and then the group。
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道你的掩码会做什么，它会告诉我们哪些权限是正确的。好吧，077是什么意思，那三个位是什么，零代表什么，0 0 0，对吧？那七代表什么，一一一，那么这是什么意思呢？然后还有另一个，一一一，它的意思是用户可以设置任何权限，然后是组。
- en: and for the group and for anybody else you're not allowed to set the permissions。
    or in other words it won't set those permissions it'll just be - - - that's what。
    that means it kind of seems a little backwards but that's what it what it's。 all
    about why do we do that again part of it is because somebody decided they。
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 对于组和其他任何人，你不被允许设置权限。换句话说，它不会设置这些权限，它只是 —— —— —— 这就是它的意思。这看起来有点反常，但这就是它的原理。为什么我们这样做？这部分是因为有人决定了这样做。
- en: want things to be a little more secure and they also want things to be able
    to。 have some defaults I was talking with you guys know Michael Chang somebody
    took。 CS 107 from him he was telling me today that the UMass thing is actually
    a really。 good idea for this and this and this reason then I said yeah nobody
    really。
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 希望事情更加安全，他们还希望某些东西能够有一些默认值。我和你们中认识 Michael Chang 的人聊过，谁上过他的 CS 107，他今天告诉我 UMass
    的东西其实是个非常好的想法，出于这个原因。然后我说是的，没有人真正。
- en: knows that he goes I know nobody knows it but anyway that's what it's all about。
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 知道他去哪里，我知道没人知道，但无论如何，这就是关键所在。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_88.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_88.png)'
- en: as far as doing that it's just basically saying what permissions can you set
    okay。
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 至于做这个事，它基本上就是在说你能设置什么权限。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_90.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_90.png)'
- en: so we just did that let's actually we're actually gonna write a quick program
    and。 these programs are all as I said available for you to download or to actually
    to。 clone into your own myth directory somewhere and as you clone when you。 clone
    them you can actually look at them okay every time I mentioned new。
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们刚才做了这些事，现在我们实际上要写一个简短的程序。这些程序都是我说过的，你可以下载，或者实际上克隆到你自己的 myth 目录中。当你克隆它们时，你可以查看它们，好吗，每次我提到新的。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_92.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_92.png)'
- en: examples I'll put them into the into that repository on the next one I want
    to。 write is a little program that actually opens a file up or creates a file
    and。
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 示例我会把它们放到下一个存储库中，我想写的是一个小程序，它实际上打开一个文件或创建一个文件。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_94.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_94.png)'
- en: then set some permissions okay so let's actually do that right now this one
    we're。
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 然后设置一些权限，好吧，现在就让我们做这件事，我们这个。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_96.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_96.png)'
- en: gonna call it open X dot C and I've already put some stuff in there for us。
    here okay and we are going to to do this we're basically as I said we're gonna。
    open a file up and then we are going to set its permissions to some value okay。
    while we're opening it up okay all right in C we generally don't like global。
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 我打算把它命名为 open X.dot C，我已经在里面放了一些东西。好了，我们将要做的就是，我们基本上如我所说的，我们将打开一个文件，然后设置它的权限为某个值，好吧。我们打开它的时候好吧，好的。在
    C 中，我们一般不喜欢全局变量。
- en: variables but constants are okay okay we'll call this one K file name and we'll。
    just call it my file okay that is a global variable it is a constant all。 right
    anyone know what the case stands for constant of course that's for some。 reason
    that's a C thing I don't know why they always did that but that's what it。
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 变量，但常量是可以的。好吧，我们称这个为 K 文件名，我们就叫它我的文件。好的，这是一个全局变量，它是常量。好吧，有人知道 K 代表什么吗？常量，当然，这是某种原因，这是
    C 中的做法，我不知道为什么他们总是这样做，但就是这样的。
- en: is I'll have another one that I looked up K file exists error and by the way
    it's。 nice to put the K there so that anytime you use it in a file in the rest
    of the。 program you know it's a constant it's just kind of tells you that okay
    we'll get。 to what this is in a in a second okay and then in main we're simply
    going to say。
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 我会再查找一个 K 文件存在错误，顺便说一下，把 K 放在那里很好，这样每次你在文件中使用它时，在程序的其他部分，你知道它是常量，这样它就能告诉你“好吧，我们稍后会解释这个”。然后在
    main 中，我们只是简单地说。
- en: you masked zero because I actually want to set the permissions the way I want
    to。 set them as it turns out so you have to set it to tell the system hey I'm
    gonna。 set the risk the whatever however I want so I don't care what the u mask
    is in。 this case okay and then we do this thing we get a what we call a file。
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 你屏蔽了 zero，因为我实际上想按我的方式设置权限。结果发现，你必须设置它，告诉系统“嘿，我要按我自己的方式设置权限”。所以在这种情况下，我不关心 umask
    是什么。好吧，然后我们做这件事，得到一个我们称之为文件的东西。
- en: descriptor the scriptor we're going to three to two fifty right yeah we go to
    two。 fifty file descriptor which equals in this case open K file name okay and
    then。 we have to tell it yeah this is what it was wrong on the slide I'll fix
    the slide。 read right only is what we're going to do with this I can bitwise or
    it with oh。
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 描述符，我们要去到 250 对吧？我们去到 250 文件描述符，这相当于在这种情况下打开 K 文件名。然后我们必须告诉它，“是的，这是错的，我会修正幻灯片。”只读是我们要做的事，我可以用位运算符将其与
    0 或。
- en: create and I can bitwise with it with oh excl which means what right only create。
    the file and only create the file if it doesn't already exist that's what those。
    three flags mean okay and then I'm going to change I'm going to make the。 permissions
    0 6 4 4 okay 6 4 4 6 is what one one zero right and four is one。
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建并且可以使用按位操作，它与 `oh excl` 一起使用，意味着什么？对，只在文件不存在时创建文件，这就是这三个标志的意思。好的，然后我要改变，我将设置权限为
    0 6 4 4，好吧，6 4 4 6 是什么？一一零，对吧？四是1。
- en: zero zero and one zero zero zero the other four notice that I prepended this。
    number with a zero what base do you think that means it's in octals it turns。
    out that's how you make an octal number in C okay all right and then we'll check。
    a file descriptor this is our error checking you won't have to do too much。
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 零零和一零零零其他四个数字，注意我在这个数字前加了一个零，你认为这代表什么进制？它是八进制。事实证明，这就是在 C 语言中表示八进制数的方法。好的，然后我们将检查一个文件描述符，这就是我们的错误检查，你不需要做太多。
- en: error checking for class but we generally try to do it as much as we can in
    the。 lecture or in the real slides to show you how to do it because you should
    do it in。 real life print F okay there was a problem opening or creating let's
    call。 a percent S like that and K file by the way in Vim I don't know if you know
    how。
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 这是类中的错误检查，但我们通常尽量在讲座中或实际的幻灯片中演示如何做，因为你应该在实际工作中也这样做。`print F`，好，打开或创建时出现了问题，让我们调用一个
    `percent S`，像这样。顺便说一下，在 Vim 中我不知道你是否知道怎么做...
- en: many people you took one of seven last quarter and learn emax Nick telling you。
    emax is fine if you want to use a match you can use emax I'm a good person these。
    days anyway okay if there was an error we can actually use this thing called。
    air no to determine the error and file exists error if error number equals file。
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 很多人上个学期学了 CS107，并学了 emax，告诉你们，emax 也行，如果你想用它，你可以用 emax，我现在是个好人了，不管怎样。好的，如果发生错误，我们实际上可以使用一个叫做
    `error no` 的东西来确定错误，文件存在的错误如果错误号等于文件...
- en: exists there we can print out okay the file already exists right like that okay。
    if we don't know the filing we just print out unknown error error no okay。 percent
    D and error no did you use air no in CS 107 you may have a little bit。 maybe not
    air no is a global variable it's based in C and it basically gets。
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件已经存在，我们可以打印出来，好，文件已经存在了，对吧？如果我们不知道文件的状态，我们只会打印出未知错误 `error no`。你在 CS 107
    中使用过 `error no` 吗？你可能用得不多，或许没有。`error no` 是一个全局变量，基于 C 语言，基本上它获取...
- en: set when your program has some error it's a little bit strange that they do
    it。 that way but that's what I do it and this is gonna return negative one to。
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的程序出现某些错误时，这种方式有点奇怪，但这就是他们这么做的方式。这个方法将返回负一。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_98.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_98.png)'
- en: basically say hey our program is not did not do so well and then we're gonna。
    close this file descriptor like that and we're just gonna return zero all right。
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上是说，嘿，我们的程序没有成功运行，然后我们将关闭这个文件描述符，就像这样，然后我们将返回零。好的。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_100.png)'
  id: totrans-247
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_100.png)'
- en: '![](img/a24171389b50634ece0607b1841cc3fe_101.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_101.png)'
- en: so what type is a file descriptor an integer when you open a file you get back。
    an integer a lot of times the very low-numbered integer like five or four or。
    something like that file descriptors are a low level way of saying here's the。
    number for a particular file we're gonna go into details about that later in the。
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 那么文件描述符是什么类型？是整数。当你打开一个文件时，你会得到一个整数，很多时候是一个非常低的数字，比如 5 或 4，类似这样的数字。文件描述符是表示某个特定文件的低级方式，我们稍后会详细讲解这个内容。
- en: week about how that actually works get anybody see any typos in there we'll。
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 一周后我们来看看它到底是怎么工作的。大家有没有看到其中的任何拼写错误？
- en: '![](img/a24171389b50634ece0607b1841cc3fe_103.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_103.png)'
- en: find out open X okay so if I do open X right I just does just runs right and
    the。
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 找到打开 `X`，好，如果我做 `open X`，它就会直接执行。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_105.png)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_105.png)'
- en: file that I call created was called what my file oh my file and there it is。
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我创建的文件名是什么？我的文件哦，"我的文件"，看，这就是它。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_107.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_107.png)'
- en: notice that permissions are read and write right and then and remember it。 starts
    after the second after the second one here so the permissions were。 reading right
    for the owner read for you for group and read for others and that's。 how we set
    that right what's gonna happen if I run it again。
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 注意权限是可读写的，然后记住它从第二个开始，这里第二个是指权限的设置。对于所有者是可读写的，对于用户组和其他人是可读的，这就是我们设置的权限。现在如果我再次运行它会发生什么？
- en: there's a problem creating my file it already exists right we checked that right。
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 创建文件时出现了问题，文件已经存在，对吧？我们检查过了，对吧？
- en: '![](img/a24171389b50634ece0607b1841cc3fe_109.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_109.png)'
- en: if you want to find out all these error numbers I'd look this up air no - L
    will。
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想找出所有这些错误号，我会查找 `air no - L`，它会出现在那里，我们在课程中会用到许多错误号，用于不同的情况。在某些情况下，我们知道发生了错误，但我们不在乎错误本身，我们只想知道这是我们预期的错误。现在听起来有点奇怪，但我们会逐步理解，你会用到这些。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_111.png)'
  id: totrans-260
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_111.png)'
- en: give you a list of all the different file numbers and if we go up here and we。
    look at there's a lot of them we look at 17 it says file exists and that one will。
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 给你一个所有文件号的列表，如果我们向上看，看到有很多，看看第17个，它写着文件存在，那个就会。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_113.png)'
  id: totrans-262
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_113.png)'
- en: be in there we will use a lot of error numbers as we go through the course for。
    various things in some cases we use it there was an error but we don't care。 about
    the error we want to know that it was that error that we were expecting。 sounds
    a little weird now but we will get there and you will use these to do。
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 内核执行打开文件的操作，然后将控制权交回给你的程序，从你的角度看，它就像一个函数调用，但我们需要了解一些底层的细节，明白吗？好吧。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_115.png)'
  id: totrans-264
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_115.png)'
- en: that so you'll get familiar with that okay and by the way how on Linux would
    I。 say error number L and then be able to stop the file halfway through or part
    of。
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你会对这些操作变得熟悉，顺便问一下，在 Linux 上，如果我说错误号 `L`，然后能够在文件处理过程中中止文件，或者部分中止。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_117.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_117.png)'
- en: the way after one page anyway no command less works just fine and then you can。
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 总之，`less` 命令的效果很好，然后你可以。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_119.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_119.png)'
- en: go up and down in less and see it right that works pretty well that's a nice
    way。
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `less` 中上下滚动，看到它了，对吧？效果挺好的，这是一种不错的方法。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_121.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_121.png)'
- en: of doing it so you should get used to those sorts of things as well okay so。
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该也习惯这些操作，好的，那么。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_123.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_123.png)'
- en: that's the basics of file systems okay the we're gonna look at a lot of other。
    low-level operations and by the way you mask and open are two two of these。 functions
    that aren't really functions their system calls when you say open your。 program
    transfers control over to the operating system and the operating systems。
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这是文件系统的基础，接下来我们将了解许多其他低级操作，顺便提一下，`mask` 和 `open` 是这类操作中的两个，这些并不是真正的函数，它们是系统调用。当你调用
    `open` 时，你的程序会把控制权交给操作系统，操作系统会。
- en: kernel does the work to open the file and then gives you back your program back。
    control as far as your concern it looks just like a file a function call but we。
    have to know some of the details about what's happening under the hood okay um。
    let's let's do one other thing and then I'll let you guys go because it is the。
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再做一件事，然后我就让你们去休息了，因为。
- en: first class um let's emulate the copy command CP okay if you do CP right if
    we。
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们来模拟 `copy` 命令 `CP`，好吧，如果你执行 `CP`，对，如果我们。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_125.png)'
  id: totrans-276
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_125.png)'
- en: do CP I've got a file called copy。c and I'll call it copy copy。c this is getting
    a。 little meta right if you do that now there's two files copy。c and copy copy。c。
    right which are exactly the same okay let's remove copy copy。c okay and what we。
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 `CP`，我有一个叫 `copy.c` 的文件，然后我把它叫做 `copy copy.c`，这就有点元编程了，对吧？如果你这样做，现在就会有两个文件，`copy.c`
    和 `copy copy.c`，它们是完全相同的。好了，现在我们删除 `copy copy.c`。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_127.png)'
  id: totrans-278
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_127.png)'
- en: want to do is we just want to write a quick little program to copy a file okay。
    and we use that by doing the the open command and also okay we're going to use。
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想做的是，写一个小程序来复制文件，好的。我们通过执行 `open` 命令来做到这一点，同时也使用。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_129.png)'
  id: totrans-280
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_129.png)'
- en: two other system calls called read and write which do what you imagine reading。
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 还有另外两个系统调用叫做read和write，它们的作用如你所想的那样，读取。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_131.png)'
  id: totrans-282
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_131.png)'
- en: from a file and then writing to a file okay let's actually just quickly do this。
    one up right now let's see copy。c okay I've got most of it I've got the beginning。
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 从一个文件中读取，然后写入文件。好了，让我们快速做一下这个。现在来看看copy.c，好吧，我已经有大部分了，已经完成了开头部分。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_133.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_133.png)'
- en: parts of it in here so I want to be able to just do that format and correctly。
    there we go okay this is basically it says to run this you do you have the。 file
    name or the copy command file one and gets copied into file two like that。 okay
    well how does this actually work okay we need an in file so the file。
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 其中有一些部分我想要能够正确格式化并完成。好了，这基本上是它，它说要运行这个，你需要提供文件名或复制命令，文件一将被复制到文件二中。好了，那它是如何工作的呢？好，我们需要一个输入文件，所以文件。
- en: descriptor open argv one which is the first one and oh read only okay says I'm。
    only gonna read from that file so I should open it as such and then we have。 the
    out file which is another open which is the other one open argv two and this。
    one we are going to do oh write only and o create without the e and o e x c l
    and。
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 文件描述符打开argv中的第一个参数，哦，只读。好吧，它说我只会从那个文件中读取，所以我应该以只读的方式打开它，然后我们有了输出文件，它是另一个open，打开argv中的第二个参数，我们会做哦，写入模式，并且o创建（没有e）以及o_excl。
- en: then we'll do 064 for again is it going to create it with 064 for if I don't
    do。 the u-mask probably not but who care we don't know that okay you can set your
    own。 u-mask as the user by the way through Linux if you want it to do that okay。
    anyway that's how we do that now let's do this let's create a buffer one。
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们再次执行064，它会创建064吗？如果我不这么做，u-mask可能不会，但谁在乎呢，我们也不知道，好吧，你可以通过Linux设置你自己的u-mask，顺便说一下，如果你想这样做的话。好吧，反正这就是我们做的方式，现在让我们来做这个，创建一个缓冲区。
- en: thousand twenty four bytes long okay and then we will do s size t bytes red
    equals。 now an s size t let's a weird one you might have used size underscore
    t in 107。 and s size underscore t is a signed size underscore t it allows us to
    have。 negative values for the specific purpose of negative one saying that's going
    to。
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 文件的长度为1024字节，好吧，然后我们会做s size t bytes red等于。现在s size t是一个奇怪的类型，你可能在107中使用过size_t，而s
    size_t是一个有符号的size_t，它允许我们使用负值，特定的目的是负一表示。
- en: be like the it's going to say there was an error it's the only reason they use
    an。 s size t otherwise it would use a size t but that's c for you all right so。
    anyway bytes red okay equals well we're gonna read and how do we do this we read。
    from a file descriptor we read into the buffer so we pass the buffer in and we。
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 它会说发生了一个错误，这是他们使用s size t的唯一原因，否则它会使用size t，但这就是C语言的特性了。好吧，总之，bytes red等于，我们将进行读取，如何读取呢？我们从文件描述符读取，我们将数据读取到缓冲区，所以我们传入缓冲区并且我们。
- en: read the number of bytes not over buffer there we go okay there we go we read。
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 读取缓冲区中的字节数，好吧，读取完成了。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_135.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_135.png)'
- en: the number of bytes into that okay and then and that tells us how many bytes。
    read now what could cause a program to not read all the number of bytes we pass。
    in to the size of buffer if it's smaller if the file was only 10 bytes long it's。
    not going to read all thousand twenty four what else there's actually one。
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 将字节数写入文件，好吧，然后它告诉我们读取了多少字节。现在，是什么导致程序没有读取我们传入的所有字节呢？可能是缓冲区的大小较小，如果文件只有10个字节，它不会读取全部1024字节。还有其他情况，实际上有一个。
- en: there's actually a very interesting way thing that might happen it might be
    that。 you tried to read in so much data that your program got time shifted by
    to start。 got taken off the processor some other program could run and it only
    returned。 so many bytes this will almost never happen with reading local files
    but。
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上可能发生一种非常有趣的事情，可能是你尝试读取大量数据，以至于你的程序被时间片调度移出了处理器，去执行其他程序，然后它只返回了这么多字节。这个情况在读取本地文件时几乎不可能发生，但。
- en: happens all the time when you're reading network data okay if you're reading。
    network data you try to read a thousand twenty four bytes you might get 480。 bytes
    even though there's plenty more bytes there they're not not available。 this is
    all about time slicing so you have to be a little bit careful with that。
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这在读取网络数据时经常发生。如果你读取网络数据并尝试读取一千二十四个字节，你可能只会读取到480个字节，即便那里还有更多字节，但它们暂时无法获取。这一切都是时间切片的问题，所以你需要小心处理。
- en: and you have to make sure to only try to write the number of bytes you read。
    okay for a number of different reasons now if bytes read equals zero break now。
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须确保只写入你读取到的字节数，好的，出于多个原因。如果字节读取数为零，就跳出循环。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_137.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_137.png)'
- en: one thing that I kind of just lied to a little bit in the sense that the other。
    reason you might not get a read of all the bytes this will block until all the。
    bytes are available as it turns out that that happens if there are more than a。
    thousand twenty four bytes it will or well if there are a thousand twenty four。
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 有一件事我刚才说的不太准确，另一个原因是，你可能无法一次性读取所有字节。这个过程会阻塞直到所有字节都可用，结果是，如果字节数超过一千二十四个，它会或者，如果有一千二十四个字节。
- en: bytes to read it will wait until they're all read in in this case but in general。
    you can for networking and things we don't necessarily block on that okay if。
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 字节数读取时，它会等待直到所有字节都读取完毕，但一般情况下，你可以在网络传输等场景下不必阻塞，没问题的。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_139.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_139.png)'
- en: the number of bytes read is zero that means that we're done reading because
    no。 bytes came back as it turns out okay and then we now have a regular size t
    bytes。 written equals zero while bytes written is less than bytes read okay bytes
    written。 plus equals okay right we also write to a file descriptor this time the
    out one。
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 读取的字节数为零时，意味着我们完成了读取，因为没有字节返回。然后我们有一个常规的大小t字节，已写入字节数等于零，而已写入字节数小于读取字节数。已写入字节数增加。然后我们也向一个文件描述符写入数据，这次是输出文件。
- en: buffer plus bytes written and then that's the location we are going to look
    for in。 the buffers it turns out okay and then bytes read minus bytes written
    like that。
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲区加上已写入的字节数，然后这是我们在缓冲区中查找的位置。结果就是这样，然后字节读取减去已写入字节数就这样。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_141.png)'
  id: totrans-302
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_141.png)'
- en: okay and we are going to have this strange while loop like that okay I'm。
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们将拥有这样一个奇怪的while循环。好的，我。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_143.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_143.png)'
- en: missing one let's see where did I go wrong here let's see there's one， hang
    on I bet my phone be。 yeah that was a spam call anybody get those these days I
    heard that that's。 like tripled in the past year the number of like robot calls
    kind of crazy okay。 hold on a second let's see while by trade well we'll check
    it when we get it but。
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 少了一个，看看我哪里出错了，看看哪里，我还漏了一个，等一下，我敢打赌那是我的手机来电。是的，那是个垃圾电话，现在大家都接到这种电话吗？我听说这种机器人电话在过去一年里增长了三倍，真疯狂。好的，稍等一下，我们到时再检查。
- en: anyway point is that after you do this then you want to actually close the file。
    and then close the two files and then return zero but there's an error here I'm。
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，重点是，在做完这些之后，你需要实际关闭文件，然后关闭这两个文件，最后返回零。但这里有一个错误，我。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_145.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_145.png)'
- en: '![](img/a24171389b50634ece0607b1841cc3fe_146.png)'
  id: totrans-308
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_146.png)'
- en: just gonna make it see what happens there it is okay if but not inside the。
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 我只是想试试会发生什么，结果是这样。如果不是这样，就不在。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_148.png)'
  id: totrans-310
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_148.png)'
- en: break or not 23 yeah all right let's see did I miss a while still I did miss
    a。 while statement okay right here we need a while statement that says while true
    this。
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 是否中断，或者没有中断，23，好，看看我是不是漏掉了一个while语句。是的，我漏掉了一个while语句。好的，在这里我们需要一个while语句，它说的是“while
    true”。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_150.png)'
  id: totrans-312
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_150.png)'
- en: basically says do this until the file is I was a big mistake there do this until。
    the file is done so what have we done here we have opened two files one that。
    we're gonna read from one that we're gonna write to that we could create okay。
    then we are going to read one thousand twenty four bytes at a time okay and if。
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 基本上是说，直到文件完成之前都要执行此操作，我刚才犯了个大错误，应该说直到文件完成。所以我们做了什么呢？我们打开了两个文件，一个用于读取，另一个用于写入，我们可以创建文件。然后我们每次读取一千二十四个字节，如果。
- en: we get back zero it means there were no no bytes left to read okay so we can。
    stop reading because we're done with the file and then we have this weird while。
    loop where we say while the bytes written is less than the bytes read read get
    back。 the number of bytes we've written using the write command and then go down
    into。
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们返回0，意味着没有字节剩下可以读取了。好的，所以我们可以停止读取，因为文件已经读取完毕。然后我们有一个奇怪的while循环，我们说，当写入的字节数小于读取的字节数时，就读取回写入字节的数量，然后继续处理。
- en: the buffer a certain distance of the number of bytes we've already written to。
    get the rest of it this is the same idea where you're not sure if all your。 bytes
    are going to be written all at once so you have to do this weird while okay。
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲区已经写入了某个字节数，我们就可以继续写入其余部分。这是同样的思路，当你不确定所有字节是否会一次性写入时，你就必须执行这个奇怪的while循环，好的。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_152.png)'
  id: totrans-316
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_152.png)'
- en: and that's how it works okay and then you should remember to close your files
    at。 the end we do use value grind to make sure that you do that okay make copy
    there。
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样，它的工作原理就是如此。然后你应该记得在结束时关闭文件，我们确实会使用工具来确保你这样做。好的，制作副本吧。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_154.png)'
  id: totrans-318
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_154.png)'
- en: is copy okay let's do copy dot c to copy copy dot c and diff copy dot c and
    copy。
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 是复制吗？好吧，我们来做将copy dot c复制到copy dot c，并对比copy dot c和copy。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_156.png)'
  id: totrans-320
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_156.png)'
- en: '![](img/a24171389b50634ece0607b1841cc3fe_157.png)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_157.png)'
- en: copy dot c and copy copy dot c there we go they're the same okay so that's how。
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: copy dot c 和 copy copy dot c，没错，它们是一样的。好的，就这样。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_159.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_159.png)'
- en: that worked not too difficult as far as like what's going on but there's some。
    nuances in there you can't write all the bytes at once and expect that they all。
    wrote you can't read all the bytes at once necessarily and expect they already。
    except in this case it does we know that it blocks before it does that okay and。
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 这个工作得挺好，虽然理解起来不算太难，但其中还是有一些细节问题。你不能一次性写入所有字节并期望它们全部写入成功，也不能一次性读取所有字节并期望它们全部读取成功，除非在这种情况下，它确实能做到。我们知道它会在执行之前进行阻塞处理，好的，继续。
- en: that's the that's the way the copy program works and the copy program on。 your
    computer is not that much more the CP command is not that much more advanced。
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是复制程序的工作原理，计算机上的复制程序也并没有更复杂，CP命令并不比这个更先进。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_161.png)'
  id: totrans-326
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_161.png)'
- en: than this okay all right so a couple other things about this like I said you。
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 比这个更好，好的。那么关于这个还有一些事情，正如我所说的，你。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_163.png)'
  id: totrans-328
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_163.png)'
- en: should close your files as you do that and let's see what else oh if you are。
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该在做完之后关闭文件，让我们看看还有什么。如果你是。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_165.png)'
  id: totrans-330
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_165.png)'
- en: used to C and C++ lots of times you'll use what we call file pointers uppercase。
    F I L E and IO streams and so forth that's a higher level that uses read and。
    write I don't for you basically it knows how to do those those while loops and。
    so forth why are we doing it in this class where we use read and write。
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你习惯了C和C++，很多时候你会使用我们所说的文件指针（大写的FILE）和IO流等等，那是一个更高级的层次，使用读取和写入。我不这样做，基本上它知道如何处理那些while循环等等。那我们为什么在这门课上使用读取和写入？
- en: sometimes you have to because of the types of things you're doing and。 sometimes
    you want to because you you know you want to get that lower level。 access which
    might be faster which isn't buffered and so forth and you might。 actually want
    that okay a lot of times you use streams and other than file pointers。
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候你必须这么做，因为你所做的操作类型有时会要求这样。你可能想这么做，因为你希望获得更底层的访问权限，这可能会更快，不会进行缓冲等等，你可能确实需要这样做。好的，很多时候你会使用流而不是文件指针。
- en: because it's just easier go for it in this class most of the time we use read。
    and write because we need to for various reasons okay let's stop there ten。 minutes
    early if you have questions come on up I'll stick around until the。 end of class
    Wednesdays next class and we'll see you then。
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这样更简单，所以在这个课程中大多数时候我们使用读取和写入，因为出于各种原因我们需要这样做。好的，我们在这里提前十分钟结束，如果你有问题可以过来找我，我会在课堂结束前一直待着。周三是下节课，到时见。
- en: '![](img/a24171389b50634ece0607b1841cc3fe_167.png)'
  id: totrans-334
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a24171389b50634ece0607b1841cc3fe_167.png)'
