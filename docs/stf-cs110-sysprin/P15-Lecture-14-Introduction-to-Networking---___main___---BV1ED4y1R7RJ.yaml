- en: P15：Lecture 14 Introduction to Networking - ___main___ - BV1ED4y1R7RJ
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P15：讲座 14 网络基础介绍 - ___main___ - BV1ED4y1R7RJ
- en: Welcome， welcome to week seven we're getting there。 How's assignment five going？
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 欢迎，欢迎来到第七周，我们快到了。 作业五进展怎么样？
- en: It's all right hopefully this one's the first threading assignment obviously
    and。 it's it's got some nuances to it you definitely have to think about locks
    and。 you have to think about seven fours you think about new Texas and we've thrown。
    in all that stuff about oh you have to make sure you only have so many threads。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 没问题，希望这是第一个线程作业，显然。 它有一些细微的差别，你肯定需要思考锁定和。 你得思考七个锁，还有新的测试方法，我们加入了。 这些内容，比如你必须确保你只会有这么多线程。
- en: and this and that and that's all to test your ability to use semaphores。 RSS。
    news feeds are something that we don't really use too much now but about I。 want
    to say six or seven years ago it was kind of a rage like when these came。 out
    it was this big deal of like this is how you're gonna read your new Chanel。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都是为了测试你使用信号量的能力。 RSS。 新闻订阅是我们现在不怎么使用的东西，但是大约。 六七年前，它曾经是非常流行的，当这些东西。 发布时，它是一个大事件，大家都认为这是你获取新闻的方式。
- en: and you're gonna get all these feeds and they're gonna it's gonna be all these。
    little snippets of news that you can go read the bigger articles and all that。
    and everybody thought it was cool and then we all used it for about a week and。
    then went out and was boring like the old way and just kind of went back and。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 你将会获取到所有这些订阅，它们会是这些。 小片段的新闻，你可以去阅读更大的文章之类的。 每个人都觉得很酷，接着我们都用了大约一周。 然后就觉得很无聊，像以前那样，慢慢就又回去了。
- en: but most like lots of places still have these RSS newsfeed services so you can。
    get a newsfeed reader which is what you're building to actually create that。 Okay
    hopefully it's not too too bad it is due Friday what I think I'm gonna do。 is
    we're a little behind on the assignments only because the midterm。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 但是大多数地方仍然有这些RSS新闻订阅服务，所以你可以。 获取一个新闻订阅阅读器，这正是你正在构建的，用来实际创建这些内容。 好的，希望这不会太糟，它是周五截止的，我想我会做的是。
    我们在作业上有点落后，仅仅是因为期中考试的原因。
- en: happened and I wanted to give you a little extra time in the last one so。 what
    we're probably gonna do is I'm probably gonna release the next assignment。 maybe
    Thursday give you a slightly smaller assignment than what we were。 thinking before
    I got to work all the details out and then we'll get back on。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么，我想给你们多一点时间完成上一个作业。 所以我们可能会这样做，我可能会在周四发布下一个作业。 给你一个稍微小一点的作业，比我们之前计划的要简单些。我得把细节都工作出来，然后我们会继续进行。
- en: track because the last two assignments seven or eight are pretty meaty good
    ones。 but pretty meaty and I wanted to give you enough time to wrap your heads
    around。 those without making it feel like it was going a little crazy。 Alright
    but even though we are still in the midst of threading for assignments we。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 跟上进度，因为接下来的两个作业七和八都是相当有分量的。 不过是很有分量的，我想给你们足够的时间来理解。 这些内容，不至于让你们觉得有点疯狂。 好的，尽管我们还在处理中间的作业，我们。
- en: are moving on to new and hopefully interesting material we're talking about。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 正在转向新的、希望是有趣的内容，我们今天要讨论的是。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_1.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_1.png)'
- en: there we go we're talking about networking today so this is kind of the。 next
    big thing and pretty much the last big thing that we're gonna talk about。 for
    the quarter actually we're gonna talk about networking which is connecting。 two
    computers together through kind of similar to a read write mentality it's。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们今天要讨论的是网络，这是接下来的。 大事，也是我们接下来要讨论的最后一件大事。 我们要谈论的是网络，连接。 两台计算机之间，通过类似于读写的方式，它是。
- en: kind it's very similar to creating a pipe between two processes but not。 processes
    but now we're creating this kind of glorified pipe between two。 computers and
    it's how the internet works and it's how the world wide web。 works and and so
    forth so we're gonna see a little bit how to do it by the way。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 有点像在两个进程之间创建管道，但不完全是进程，而是我们在创建这种两台。 计算机之间的"管道"，它就是互联网的工作原理，也是万维网。 的工作原理，等等，我们今天会稍微介绍一下如何实现。
- en: if you really like this stuff CS 144 is it networks yeah 144 is networks which。
    goes into obviously much more detail than what we're gonna kind of touch on in。
    this class and I think you'd enjoy that by the way if you've enjoyed the other。
    stuff then operating systems which is 143 no sorry 140 what is 143 compilers。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的喜欢这些内容，`CS144`就是网络课程，对，144是网络课程，内容显然比我们在这门课上讲的要详细得多，我想你会喜欢的，顺便说一句，如果你喜欢其他课程，那么操作系统就是`143`，不对，应该是`140`，哦不，`143`是编译原理课程。
- en: yeah compilers compilers is also a great class by the way and then 140 is the。
    operating systems class which goes into like how do you build thread a。 threading
    library how do you build multi-processing into an operating system。 and that sort
    of stuff if you really didn't like that then maybe stay with。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对了，**编译原理**课程也是一门很棒的课程，然后`140`是操作系统课程，它讲述了如何构建线程库，如何将多进程集成到操作系统中之类的内容。如果你真的不喜欢这些内容，那么也许可以考虑修其他的课程。
- en: those classes go take more and that's but anyway if you do enjoy there are。
    lots of follow-on classes and we'll spend some time talking about those soon。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你确实感兴趣的话，后续还有很多课程可以跟进，我们很快会花些时间讨论这些课程的内容。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_3.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_3.png)'
- en: anyway so let's talk networking what is networking wealth like I said it's。
    basically connecting two computers on a network and that network can be very。
    local in fact networking can happen between two computers on the same or。 between
    two processes on a single computer much like a pipe would but it's。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们来谈谈网络。正如我刚才说的，网络就是把两台计算机连接起来，而这个网络可以是非常局部的，事实上，网络通信甚至可以发生在同一台计算机上的两个进程之间，就像管道一样，但它是
- en: using network protocols instead of the kind of the underlying pipe protocols
    so。 you can network between two processes on one computer but most often we're。
    talking about multiple computers talking to each other okay the way that works。
    is you need one of the computers to act as a server and a server is simply a。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 使用网络协议，而不是底层的管道协议。你可以在一台计算机上进行进程之间的网络通信，但我们大多数时候是在谈论多台计算机之间的通信。好的，工作的方式是，你需要让其中一台计算机充当**服务器**，而服务器其实只是一个。
- en: computer that's waiting around for some other computer to ask it something。
    I'm waiting around for some other computer to say can I connect to you and。 if
    you don't have that server set up you can ask all day but the other computer。
    is not going to respond okay so that's what you have to have you have to have
    a。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机就像是等待其他计算机向它询问问题的存在。我在等待其他计算机说“我可以连接到你吗？”。如果你没有设置好服务器，你可以整天问，但另一台计算机**不会响应**，好吧，所以下面是你必须要做的，你必须拥有一个。
- en: server and then you have to have one or more clients which are connecting to
    the。 server okay and the World Wide Web works this way if you connect to CS110。stanford。edu。
    you connect to a web server and you are the client and many of you can do the。
    exact can do that at the same time so when I say that it's the same time we do。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 服务器，然后你必须有一个或多个客户端连接到**服务器**。好了，万维网就是通过这种方式工作的，如果你连接到`CS110.stanford.edu`，你连接的是一个网页服务器，而你就是客户端，而且你们很多人可以同时进行这个操作。所以当我说我们可以同时做这件事时，我们确实能。
- en: have to think about efficiency here because there's going to be some kind of。
    ability for it has there has to be an ability for the server to get the。 information
    back to the clients quickly and there might be lots and lots of。 clients so we
    have to think about that first we're not going to worry too much。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须考虑效率，因为服务器必须能够快速地将信息反馈给客户端，而且可能会有很多很多的客户端。所以我们首先需要考虑这一点，但我们现在不用太担心这个问题。
- en: about it but then we will eventually think more about that how does networking。
    work it works through this thing called sockets and a socket is a number all it。
    is just an int in fact it's an int that goes from zero to six five five three。
    five in other words you can only have up to 64 kilo or kilo sockets open at once，
    64，000 or 65。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但最终我们将更多地思考：网络是如何工作的。它通过一种叫做**套接字**的东西来工作，套接字就是一个数字，实际上它只是一个整数，实际上它的范围是从零到六五五三五，换句话说，你最多只能同时打开**64,000个套接字**。
- en: 000 sockets open at once which would be many more than you probably。 have most
    computers do not have that many open at once but it's just a 16-bit。 integer so
    that's why it's limited to 65， 35 and you basically set your program。 up to say
    hey listen on this socket or port another way of another thing we call。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一次可以打开 000 个套接字，这比你可能想象的要多得多。大多数计算机并不会一次打开这么多套接字，但它只是一个 16 位整数，所以它的限制是 65，35，因此你基本上设置你的程序，让它说“嘿，监听这个套接字或端口”，这就是我们所说的另一种方式。
- en: it and when a another computer the client wants to connect to your server。 the
    operating system notices this there's lots of operating system and。 hardware support
    for this the operating system notices this and then sends a。 little wake-up message
    to your server that says hey you've got a client deal。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当另一台计算机（客户端）想要连接到你的服务器时，操作系统会注意到这一点。操作系统和硬件对此有很大的支持。操作系统注意到这一点后，会向你的服务器发送一个小的唤醒信息，告诉它“嘿，你有一个客户端需要处理”。
- en: with it and that's that's what we're trying to do okay you can kind of think。
    of the port number or the socket number as a virtual process ID okay so you can。
    kind of think of it that there's some socket here that connects you to a。 particular
    process on the server okay that's the that's the way it goes all。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 使用它，正是我们想要做的事情。你可以把端口号或套接字号当作一个虚拟的进程 ID 来理解。你可以这样想，它代表着某个套接字，它把你连接到服务器上的特定进程。好吧，事情就是这么发生的。
- en: right and and the reason we don't have a do like the why not make just the process。
    ID the socket ID is because you want to be you want to say hey listen tell people。
    go listen on this particular port and that changes every time you do a new。 process
    so that's that's how we're going to do it how might we look these up on。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 对，为什么我们不直接使用进程 ID 来做套接字 ID 呢？是因为你希望能够说“嘿，告诉大家去监听这个特定的端口”，而每次你启动一个新进程时，端口都会变化。所以，这就是我们要做的事，我们如何在。
- en: your computer to see what you're connected to well we can do the following。
    we can do let's see hang on there we go we can do a studio here next stat and
    then。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让你的计算机查看你连接到的内容。我们可以做以下操作。我们可以，嗯，稍等一下。好了，我们可以在这里使用 studio，然后输入 next stat，接着。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_5.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_5.png)'
- en: I always forget what that runs our PLNT - PLNT make this a bit bigger so you。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我总是忘记它是如何运行的，我们用 PLNT - PLNT 来做得更大一点，所以你。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_7.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_7.png)'
- en: can see the whole thing here okay and let me make it let me make it so that
    it。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到整个内容，好的，让我调整一下，让它变得更清晰。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_9.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_9.png)'
- en: comes out nicely like this there we go that's very nice all right so what you。
    can do is you can do that on the mid servers and it looks like the mid servers。
    are listening on a whole bunch of ports that are that you were able to see what。
    they're listening on okay they're listening on port 25 which is see if I can。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 最终就会像这样美好地呈现出来，来吧，这非常不错。那么，你可以在中间服务器上执行这个操作，看起来这些中间服务器正在监听许多端口，你可以看到它们在监听哪些端口。它们在监听端口
    25，我看看能不能找到。
- en: get my cursor there you go port 25 okay they're listening on port 587 those。
    happen to be associated with the mail server so all the myths listen on a。 mail
    server your computer listens on a mail server okay this one is listening。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 看看我的光标在哪里，那里有端口 25。好的，它们在监听端口 587，这些恰好与邮件服务器相关，所以所有的中间服务器都在监听一个邮件服务器，你的计算机也在监听一个邮件服务器。好了，这个在监听。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_11.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_11.png)'
- en: on 53 every time 53 was 53 is the domain name service so when you go to。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在 53 上，每次 53 就是域名服务（DNS），所以当你访问时，
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_13.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_13.png)'
- en: www。google。com well some somebody needs to translate that into a number because。
    your computer is dealing with numbers and people like to deal with words so that。
    there's a translation layer there which is had handled by the domain name service。
    which is running on your computer which connects to another computer which connects。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: www.google.com 好吧，有人需要把这个翻译成一个数字，因为你的计算机处理的是数字，而人们更喜欢处理文字。所以这里有一个翻译层，它由域名服务（DNS）处理，该服务在你的计算机上运行，并连接到另一台计算机，再连接到。
- en: to another computer which which has all the domains on there like your computer。
    kind of keeps a little list of where I go first and then that query is another。
    computer which eventually gives you back the name I guess in some sense it's like。
    the directory search for your first the file system programs it's kind of what's。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到另一台计算机，这台计算机上有所有域名的信息，就像你的计算机一样，保留了一些我首先访问的地方，然后这个查询会发到另一台计算机，最终返回给你名称。从某种意义上说，这就像是为你的文件系统程序做的目录搜索，这就是。
- en: going on there okay port 22 is for telnet and it's all right for SSH we'll。
    talk about telnet in a minute it's for SSH which when you SSH it goes to port
    22。 by default some people like to set their computers up to listen on some other。
    port for SSH because tort 22 tends to be one that lots of bad actors try to like。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 发生的事情。好，端口22是用于Telnet的，也适用于SSH。我们稍后会讨论Telnet，它是用于SSH的，默认情况下SSH会连接到端口22。有些人喜欢将他们的计算机设置为在其他端口上监听SSH，因为端口22是一个很多恶意行为者尝试攻击的端口。
- en: connects to because they know that if they can figure out a password they can。
    get into the computer so they change that but ours is just the default 22 631。
    happens to be the printer server in fact we may not know this but you can。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到它们，因为它们知道，如果能够搞定密码，就能进入电脑，所以它们会更改这个，但我们的是默认的22和631。恰好是打印机服务器，事实上我们可能不知道，但你可以。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_15.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_15.png)'
- en: generally on your computers let's do it in a new window here you can generally。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 一般来说，在你的电脑上，我们可以在一个新窗口中进行操作，你通常可以。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_17.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_17.png)'
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_18.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_18.png)'
- en: go to make this a little bigger here 127。0。0。1 which is your local computer
    it's。 always your IP address colon 631 if all works right there's the little printer。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们把它放大一点，这里是127.0.0.1，也就是你的本地电脑的IP地址。如果一切正常，应该看到一个小打印机。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_20.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_20.png)'
- en: details so it's actually a web server that you are listening to to actually
    do。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 细节是，实际上你正在监听一个网络服务器来进行操作。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_22.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_22.png)'
- en: printing and it happens to be set up on many computers and you might get a little。
    message that is not set up and it tells you how to set it up if it's if it's not。
    we could also have typed local host colon 631 local host is as you might guess。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 打印功能，而且它通常在许多电脑上都已经设置好了，如果你看到一个小消息说没有设置好，它会告诉你如何设置，如果还没有设置的话。我们也可以输入本地主机的地址，即localhost:631，本地主机，顾名思义。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_24.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_24.png)'
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_25.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_25.png)'
- en: your own computer okay and it should also come up there that's the that's what's。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 你自己的电脑应该没问题，它也应该在那里显示出来，就是这个情况。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_27.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_27.png)'
- en: going on there okay so that's that let's see we've got another little 22 and
    631。 therefore TCP 6 so it turns out that normal IP addresses are 32-bit numbers。
    they've got these colons in them you know like 127。0。0。1 that's a 32-bit。 number
    just kind of separated up into into little two byte number two byte。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 发生了什么呢？好，我们来看看，我们有另一个小的22和631。因此，TCP 6。结果是，正常的IP地址是32位数字。它们中有这些冒号，就像127.0.0.1那样，那是一个32位数字，只是被分隔成了小的两字节数字。
- en: numbers but it's a 32-bit number and with 32 bits how many different IP。 addresses
    could we have four billion about there's actually more than four。 billion computers
    on the internet back when the internet was designed which is。 it turns out it
    was a defense department program back in the day in fact I don't。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 数字是32位的数字，32位数字的话，我们可以有多少个不同的IP地址呢？大约是四十亿。实际上互联网上有超过四十亿的计算机。回想一下互联网设计的时候，它实际上是一个当时由国防部发起的项目，事实上我不。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_29.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_29.png)'
- en: know if I showed you this before original internet see there should be some。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道之前有没有给你展示过这个，原始互联网，看看这里应该有一些。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_31.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_31.png)'
- en: images here I'll probably should be able to find out let's see where's the good。
    one that I always like to use just the one yeah this might be it yeah there's。
    there that's a slightly or oops slightly there's the there's one I was。 thinking
    oh no that's it that's the tiniest little one you can't see it on there。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的图片，我应该能够找到，看看我一直喜欢用的那个图，嗯，这可能是它，看看那里，稍微有点不对，哦，稍等一下，那是我想的那个，哦不，那个是最小的，你根本看不见。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_33.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_33.png)'
- en: well you can kind of see it Stanford is on there we were part of the original。
    internet nice right notice who's not there， else relatively local not there MIT
    is on there BBN which is one of the original。 places it's a company that kind
    of start on this let's see let's see Carnegie。 Mellon was on there used to just
    be the Carnegie Institute at that point。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 你大致可以看到，斯坦福大学在其中，我们是最初互联网的一部分，挺好的，对吧？注意到没有，谁不在其中呢？其他地方的相对本地的地方没有，麻省理工学院也在其中，BBN
    也在，它是最早的参与者之一，这是一家起步于此的公司。让我们看看，卡内基梅隆大学也在其中，当时它还只是卡内基研究所。
- en: Illinois Utah was on there Utah believe it or not it was a really good computer。
    science department back in the 1970s they happened to get on the internet。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 伊利诺伊大学，犹他大学也在其中，相信与否，犹他大学在 1970 年代时有一个非常棒的计算机科学系，他们恰好加入了互联网。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_35.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_35.png)'
- en: really early so lots of lots of early think but anyway back then they said。
    32 bits four billion computers on the internet that will never be big that many。
    computers on the internet that's ridiculous so that's why they kind of。 started
    out with 32 bit numbers but of course today we don't do that how do we。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 很早以前，很多人都在进行早期的思考，不过当时他们说过：32 位，互联网上有四十亿台计算机，那不会有那么多计算机的，这太荒谬了。所以他们就开始使用 32
    位数字，然而现在我们不这么做了，怎么做呢？
- en: get away with this now what we have is routers that then give like in this。
    building there might be one IP address and then the router gives each one of you
    a。 local IP address and so it's one level removed so that's what's that's just。
    going on there we are trying to fix this issue so that every computer can have。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们所面临的是路由器，它们在这栋大楼里可能只有一个 IP 地址，然后路由器给你们每个人分配一个本地 IP 地址，因此它是一个间接的层级。这就是目前发生的情况，我们正在努力解决这个问题，以便每台计算机都能拥有。
- en: its own email or its own IP address we do that through we do that through IP。
    version 6 versus version 4 which has a 128 bit address which is many more。 computers
    you could practically in fact I think you could probably give every。 atom in the
    universe its own IP address if you wanted to without many numbers so。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 它有自己的电子邮件或者自己的 IP 地址，我们通过 IPv6 实现这一点，而不是 IPv4，IPv6 有 128 位地址，可以支持更多的计算机，实际上，我认为如果你愿意的话，几乎可以给宇宙中的每个原子分配一个
    IP 地址，而不需要很多数字。
- en: there's lots in there so there's plenty plenty of room to grow with that but
    it's。 going to take a while to get everybody up to speed some servers are listening
    for。 that okay now if you happen to be running a program yourself notice that
    over in。 this side it says PID program it doesn't say anything that's because
    it kind of。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 里面有很多内容，因此这里有足够的空间来扩展，但这需要一段时间来让每个人都跟上进度。一些服务器正在监听这一过程。好了，现在如果你自己运行一个程序，注意看看这一边，它说
    PID 程序，它没有任何信息，因为它实际上...
- en: hides it from non super users which we are not as just regular users we can。
    actually let's me run something we're gonna actually create here time server。
    descriptors I think that there we go so if I do this just be on the same。 computer
    what are we on over here myth 58 so let's actually do it on the same。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 它隐藏了非超级用户的访问权限，我们作为普通用户并不具备这个权限。我们实际上可以让我运行一些东西，我们将创建时间服务器描述符，我想应该就是这样，所以如果我这样做，就会在同一台计算机上运行，看看我们现在在做什么，神话
    58，我们就这样在同一台计算机上执行。
- en: one let's do oh I'm with 58 okay let's do it again and look at that it says。
    2 6 5 5 slash time server and that doesn't give the whole thing but that's。 ours
    like that's the one I'm running right now okay so that happens to be port。 one
    two three four five that's a good good why is it。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们再来一次，看，这里说的是 2 6 5 5 / 时间服务器，虽然没有给出完整的信息，但这就是我现在正在运行的那个程序。好吧，那个恰好是端口一二三四五，这是个不错的端口，为什么是这个端口呢？
- en: zero zero zero instead of 127 I don't know why tell you true not actually sure
    why。 that's why are we 127。0。0。1 is the way the internet says local computer that's。
    just the number it gives all the computer all your low computer is the same as。
    every other computer I don't know what it's a good question I'm not sure why it's。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 用零零零代替127，我不知道为什么，老实说我也不确定为什么。那为什么是127.0.0.1呢？互联网把它当作本地计算机使用，这只是它给每台计算机的数字，你的计算机和每台其他计算机都是一样的。我不知道，这是个好问题，我不确定为什么它是这样的。
- en: as zero dot zero up there but anyway port is correct but the you're right the。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 就像上面那个零点零一样，不过端口是正确的，不过你说得对。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_37.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_37.png)'
- en: other part is not okay so what else can I tell you about these these addresses
    as。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 另外一部分没有问题。那么关于这些地址，我还能告诉你什么呢？
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_39.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_39.png)'
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_40.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_40.png)'
- en: I said there's let's see there are 65 or 64 thousand or 65 thousand of them。
    you're really only you really only should use some in a particular range。 yeah
    why didn't it show that my SSH connection was established where I am。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我说过，有65,000或64,000个，实际上你只应该在一个特定的范围内使用一些。嗯，为什么它没有显示出我建立的SSH连接呢？
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_42.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_42.png)'
- en: SSH in a myth this is on the myth computer but it doesn't say what doesn't say
    the。 actual connection like there might be many connect this is just showing you。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: SSH是一个神话，这是在神话计算机上，但它没有显示出什么，没有显示实际的连接，可能有很多连接，这只是给你看。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_44.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_44.png)'
- en: which servers are available are listening that's all this is showing you。 now
    good question all right so you can actually go and see a full list of common。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 哪些服务器是可用的并在监听，这就是它展示给你的内容。现在，好的问题，嗯，实际上你可以去查看一份完整的常用端口列表。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_46.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_46.png)'
- en: ports okay the common ports if we go there's lots of them okay this is like。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 端口，好的，常用端口，如果我们去看，那里有很多端口，好的，这就像。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_48.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_48.png)'
- en: that's actually just a tiny little list of them here let's see if I go to there。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上只是其中一个很小的列表，我们来看看我是否可以进入那里。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_50.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_50.png)'
- en: here here's the common ports I make this a little bit bigger here okay very
    big。 so basically ports 0 through 1023 are kind of used for systemy things like
    you。 don't want to do a port that's really low notice all the ones we talked about。
    earlier were kind of low they're like very well defined don't use these ones。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我常用的端口，我把它放大一点，好了，非常大。所以基本上，端口0到1023通常是用来做系统相关的事情，比如你。不要使用那些非常低的端口，注意我们之前提到的所有端口都比较低，它们是非常明确的，不要使用这些。
- en: because they're all ready for SSH and for oh by the way 80 is for the web the。
    web and so forth and so there's you want to be able to you don't want to use。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 因为它们都为SSH准备了，哦，顺便说一句，80是用于网页的。网页等，因此你希望能够，你不想使用。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_52.png)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_52.png)'
- en: those okay but they're the list small in there as I say up here what the other。
    ones are now so we've got lots of ones look if we look at 80 in there 80 is for。
    HTTP which is the web and so forth lots of ports in there that you can look at。
    that are well well defined and don't use them if you can help it we go to the。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 那些端口，好吧，但是它们的列表比较小，就像我在上面说的，其他的端口是什么，现在我们有了很多，如果我们看看80，80是用于HTTP，代表网页等，所以有很多端口你可以查看，它们是明确的，不要使用它们，如果你可以避免的话。我们可以去。
- en: next list here after that okay from 1024 to 49，151 which is you can see why
    they。 chose that number based on some powers of two those are assigned ports but
    it's。 kind of wishy-washy it's basically like somebody says hey I want to use
    this。 port can you assign it to me and the the IAN a which is like this organization。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的列表，从1024到49151，你可以看到为什么它们选择了这个数字，基于一些二的幂，这些是分配的端口，但它们有点模糊，基本上就是有人说“嘿，我想用这个端口，可以分配给我吗？”然后IAN
    A这个组织会这样做。
- en: that does this kind of determines whether or not you have a legitimate。 reason
    are you a company are you some you know you're doing something interesting。 they
    say fine you can have one we'll say that this is your port and some of them。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上决定了你是否有合法的理由，你是公司，还是你知道你在做一些有趣的事情。它们会说，好吧，你可以拥有一个，我们会说这是你的端口，一些端口。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_54.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_54.png)'
- en: in there they they do that open VPN for like connecting your computer through
    a。 virtual private network that's 1194 etc okay there's but lots of them there's。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 它们做的是开放VPN，用来通过虚拟专用网络连接你的电脑，比如1194端口，等等，还有很多这样的端口。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_56.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_56.png)'
- en: there's thousands and thousands of these but you don't have to live by those。
    right if you do your own nobody's gonna go and you broke my thing if you're。 running
    a program that needs that port and you run another program that's on。 that port
    they can't both be listening to the port at the same time so that's the。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这些端口有成千上万，你不必局限于那些。对吧？如果你自己设定端口，没人会说“嘿，你破坏了我的设置”。如果你运行一个程序需要那个端口，而你又运行了另一个程序在那个端口上，它们不能同时监听同一个端口，这就是问题所在。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_58.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_58.png)'
- en: the big issue there we use for the one I just showed you we used one two three
    four。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的一个大问题是，我们刚才展示的就是使用了端口一二三四。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_60.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_60.png)'
- en: five one two three four five this happens to be set up for cube world little
    fighter。 to and net bus they all kind of you know or I guess they assumed that
    they all。 wanted one two three four five we will often use that one just because
    it's easy。 to type and whatever but if you have to be running a cube world server
    on your。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一二三四五，这个设置是为方块世界小战斗机和NetBus设定的，它们都有些相似，或者我猜它们假设大家都需要端口一二三四五。我们通常使用这个端口，因为它简单好记，反正输入也方便，但如果你必须在你的...
- en: computer well that's probably gonna conflict with the one you want to do so
    I。
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 计算机，那可能会和你想做的事冲突，所以我...
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_62.png)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_62.png)'
- en: don't know a cube world but anyway you could or a little fighter - whatever
    okay。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 不知道是一个方块世界，还是其他的，反正可以这么说，或者一个小战斗机 - 随便吧。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_64.png)'
  id: totrans-103
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_64.png)'
- en: anyway and then above the whatever the forty thousand or whatever it was they're。
    kind of upper grabs they will not predefined those you can use those for。 whatever
    you want and nobody's gonna say hey that was the one we kind of wanted。 after
    that okay so those are those are the port numbers and let's see there we go。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，超过四万或其他什么数字的端口，它们是上层端口，未预定义的，你可以根据需要使用这些端口，没人会说“嘿，这是我们想要的那个”。好吧，那就是端口号，让我们继续吧。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_66.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_66.png)'
- en: and those are what you will see you'll see a lot of normal ones and then we'll。
    use our own question well that's good question ports let ports are on a server。
    to listen to the computers a socket in a port is kind of interchangeable a socket。
    is more or less once you set up a socket think of you setting up a pipe that's。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 这些就是你将看到的内容，你会看到很多普通的端口，然后我们将使用我们自己的问题，嗯，那是个好问题，端口是服务器上的一个监听端口。端口和套接字有点可以互换，套接字基本上是，你一旦设置好套接字，可以把它想象成你设置了一个管道。
- en: kind of the way it is but the port number is the socket number that's the you
    use a。 socket on a port number let's put it that way， well a server just is a
    computer right so it's not like yeah I mean your your you。 are when you send a
    message to another computer you actually use a port but it's。 not necessarily
    the one you're connecting to so let's say I want to。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这么回事，但端口号就是套接字号，你使用的是套接字和端口号，可以这么理解，嗯，服务器只是台电脑，对吧？所以并不是说你发送消息到另一个计算机时，你实际上用的是一个端口，但不一定是你连接到的那个端口。比如我想要...
- en: connect to your server on one two three or five my outgoing port might be you
    know。 1800 or something like that it was whatever it goes out on and then and
    then。 the other computer goes oh when I respond go back to that port we actually。
    hide that a bit of that from you from here you don't need to worry about those。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 连接到你的服务器，使用端口一二三或五，而我的外发端口可能是1800，或者其他什么端口，它是通过那个端口出去的，然后，另一个计算机会说：“哦，当我回应时，就返回到那个端口。”我们实际上隐藏了这部分信息，你不需要担心这些。
- en: details quite as much for this one it's just kind of all built into libraries。
    we're using it makes sense yeah anybody else good questions lots of details here。
    that you can get into all right let's see what else that's that let us create。
    our first server okay so we're gonna create a server and all the server is。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个不需要太多细节，它几乎都是内置到库里的。我们使用的它很有意义，是的，其他人有问题吗？这里有很多细节。你可以深入了解，好，看看还有什么，嗯，接下来让我们创建。我们的第一个服务器，好，我们将创建一个服务器，所有的服务器就是。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_68.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_68.png)'
- en: going to do is you do it right here it is called time server and we're gonna
    use。 descriptors to start out okay to do this and there's a bunch of like set
    up。 obviously in here what we're gonna do is we're going to set up a server that。
    basically gets the time on the server as it turns out it's gonna get gm t which。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 要做的是，你就在这里做，它叫做时间服务器，我们将使用。描述符来开始，好，做这个有很多像设置的东西。显然在这里，我们要做的是我们将设置一个服务器，基本上获取服务器的时间，结果它将获取
    GMT 时间，。
- en: is the time at Greenwich Mean Time in England it's gonna get that well it gets。
    the time and then it converts it to whatever we want we're in this case。 we're
    gonna convert it to Greenwich Mean Time which is which is pretty standard。 it's
    the easiest one to type as it turns out but what we're gonna do is gonna get。
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 是格林威治标准时间（Greenwich Mean Time）在英格兰的时间，它将获得这个，嗯，它获取时间然后将其转换为我们想要的时间，在这种情况下。我们将其转换为格林威治标准时间，这个时间是比较标准的。事实证明它是最容易输入的，但我们要做的是获取。
- en: the time it's going to win a connection when you get to connection request it's。
    going to find the time and then format the time into a string and then push it。
    back and connect the computer so basically like a time server it just tells you。
    the time okay and that's all there is to it okay how do we do this well you can。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 时间，它将赢得连接，当你接收到连接请求时。它将查找时间，然后将时间格式化为字符串，再将其推送。回连接的计算机，所以基本上像一个时间服务器，它只是告诉你。时间，好，这就是所有的了，好，我们怎么做呢？嗯，你可以。
- en: do int server equally remember the server is just a well in this case it's a。
    in this case it is a number that associates itself with a server it's kind。 of
    like a file descriptor in that sense okay and then we're gonna use create。 server
    sockets okay one two three four five that's it that's all we're gonna do。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 做 int 服务器同样记住服务器只是一个井，在这种情况下它是一个。 在这种情况下它是一个与服务器关联的数字，它有点像文件描述符。好的，然后我们将使用创建。服务器套接字，好，1，2，3，4，5，就这些，我们将做的就是这些。
- en: for this now to create server socket uses some underlying built-in system calls。
    and so forth you can go look at that in I believe it is server socket dot cpp。
    actually let's just see let's see if we can find server socket server socket。
    dot cpp and it's not it server hang on。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在为了创建服务器套接字使用一些底层的内建系统调用。等等，你可以去查看，我相信它在 server socket dot cpp 中。实际上我们来看看，看看能否找到
    server socket。server socket。dot cpp，不是，等一下。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_70.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_70.png)'
- en: server socket dot c oh that's easy no let's do here server socket dot cc there
    we。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: server socket dot c 哦，这个容易，不如在这里做 server socket dot cc。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_72.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_72.png)'
- en: go okay and create server socket use some underlying function a function called。
    socket which does it and it's got some some parameters in there and things if。
    we're not gonna worry about right now we're just always gonna use these ones。
    you feel free to look at those we'll talk about some of the details of this it's。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 好，创建服务器套接字使用一些底层的函数，一个叫做。socket 的函数来做它，它有一些参数，我们现在暂时不需要担心，我们将一直使用这些。你可以自由查看这些，我们稍后会讨论一些细节，这个是。
- en: pretty soon okay and then by the way did you notice that I did control Z and
    then。 Fg now you know what that all does I've been using it all year and some
    of you。 now you know there is okay so we create that we create the server and
    then we。 basically do a little while Lou that just sits here and waits for connections。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 很快就会完成，好，顺便说一下，你注意到我做了控制 Z 然后。Fg 吗？现在你知道这些都是什么意思了，我这一年一直在用，有些人。现在知道它是什么了，好，我们创建它，创建服务器，然后我们。基本上做一个小的
    while 循环，简单地等待连接。
- en: okay so we're just gonna sit here and wait for connections and when we find。
    well we're going to do the client we're gonna get the client equals except and。
    then we're gonna ask for the tell it to accept on the server number and then。
    we're gonna pass in a couple of no's if we wanted to get the client's IP address。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们现在就坐在这里等待连接，当我们找到时，我们将会做客户端的部分，`client = accept`，然后我们将要求它在服务器端接受连接，并传递一些`no's`，如果我们想获取客户端的IP地址。
- en: we could use those we could use the no's to be a couple parameters ones like
    us。 one's like a status the other one's like what do you want to get kind of like。
    wait PID we could use that for to get information about the client that we。 want
    okay and then we're just gonna call this function we're gonna write in a。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用这些，我们可以用`no's`作为一些参数，比如像我们这样。一个是像状态，另一个是像你想要得到什么的那种。等一下PID，我们可以用它来获取我们想要的关于客户端的信息。好的，然后我们只是要调用这个函数，我们将在a中编写。
- en: second called publish time to the client and that's it for me waits for it does。
    the accept when by the way except blocks until you get an actual client that comes。
    in okay just sits on wait and then when a client requests the connection it goes。
    to the next line it creates the connection then goes to the next line and。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 第二步是将时间发布给客户端，这对我来说就是等待它接受，顺便说一句，`accept`会阻塞，直到你得到一个实际的客户端连接。好的，它就会停在这里，然后当一个客户端请求连接时，它会进入下一行，创建连接，然后进入下一行，继续。
- en: then and then it repeats that's all there is to it okay all right now if。 published
    time took a long time then you might start to drop connections this is。 something
    we have to worry about we will get there a little bit later yeah it never。 breaks
    out the wireless this this server goes on until you do control C and in。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它会重复，就这样。好的，现在如果`publish time`需要很长时间，那么你可能会开始丢失连接。这是我们需要担心的事情，我们稍后会再讨论。是的，它永远不会中断，无线网络也没有问题，这个服务器会一直运行，直到你按下`Ctrl+C`。
- en: most servers like that they just kind of go and go and then and then you want
    to。 break them you stop the program that's it because this is really simple now
    you。 could certainly have some other way to do this and and stop it nicely but
    doesn't。 really matter in this case yeah good question yeah good question why
    do we。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数服务器都是这样的，它们就会一直运行，然后你想要终止它们时，你停止程序就行了。就是这么简单。现在你当然可以用其他方式来做到这一点，优雅地停止它，但在这种情况下其实没关系。对，这是个好问题，是的，好问题，为什么我们。
- en: want to do this this is so that we can get you can ask for the time then I can。
    ask the time and you can ask the time and something this is so that it's gonna
    sit。 there and just anybody who requests the time is gonna get the time back so
    does。 it one after the other at the other at the other that's why we want it in
    a。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 想要这样做，这是为了我们可以获取时间，然后我可以请求时间，你可以请求时间，这样它就会在这里等待，任何请求时间的人都会得到时间回应。所以它会一个接一个地这样做，这就是为什么我们要让它在。
- en: while it's serving the time forever more as long as we have it written good。
    right a good question the question is like wait this seems a little more hidden。
    from us than like all the file descriptors and so forth for now at least we're。
    really when you're writing programs all you really need to know is look do I。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当它一直运行的时候，只要我们写得好，它就永远有效。对了，一个好问题是：等等，这看起来似乎比所有的文件描述符之类的东西更隐藏。至少现在来说，我们真正需要知道的是，写程序时，你只需要知道：看，我是否。
- en: have I set up a server using create server socket and then have I accepted。
    the server and gotten a client from it that's really all the that's the level。
    you're gonna look at feel free to look at the header files in the actual C C plus。
    code if you want to dig a little deeper we're also gonna use well we'll see in
    a。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我已经通过`create server socket`设置了一个服务器，然后我接受了这个服务器并从中得到了客户端，这就是你需要查看的水平。如果你想更深入了解，随时可以查看实际C/C++代码中的头文件。我们稍后会看到如何让它更简单一点。
- en: few minutes how we're gonna make it a little even a little simpler honestly。
    that's not the level we care about the kind of level we care about is create the。
    server respond adequately and send it something， yeah good question let's try
    so right now I'm listening on the port the question。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 过几分钟我们就会看到如何让它变得更简单，老实说，那不是我们关心的层面。我们关心的是创建服务器，正确响应并发送东西，是的，好问题，试试看。现在我正在监听端口，问题是。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_74.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_74.png)'
- en: was wait what if I create a - what if I create two programs I try to listen
    to。 the same port well this one happens to be running right now in one two three
    four。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 等一下，如果我创建两个程序，我尝试监听同一个端口，会怎么样？嗯，这个程序现在就在运行，一二三四……
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_76.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_76.png)'
- en: five on myth 58 if we do the same thing again and do another one on one two
    four。 five also a myth to get it says could not start the server doesn't let you
    it says。 are you've already somebody's already using it sorry and that's all there
    is to。 it okay yeah so you have to be a little careful when you're setting these
    up you。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在58时，如果我们再做一次，并且在124时再做一个，同样会发生错误，它会说不能启动服务器，告诉你端口已经被使用了，抱歉，就是这样。所以，当你设置这些时，得小心一点。
- en: don't you so for instance when you do your assignments with these network。 implants
    we're going to set up the port you use based on a hash of your username。 which
    is unlikely to match anybody else's so it's gonna should work out just。 fun but
    yeah good question you can't we can't duplicate it on the same machine。
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 所以举个例子，当你用这些网络接口进行作业时，我们会根据你用户名的哈希值来设置你使用的端口，这个哈希值不太可能与其他人匹配，因此应该能正常工作。但是对，你的问题很好，确实我们不能在同一台机器上重复使用这个端口。
- en: doesn't work very good question okay let's write the publish time function here
    so。 to publish the time we have to get the time all right time and then it's actually。
    time to underscore T we're gonna look at that in a second it's a struct that is。
    built for you raw time I don't need struct time T because it's C++ or need。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 不太好，问题很好。好的，我们来写一个发布时间的函数。为了发布时间，我们必须先获取时间，好的，时间，然后它实际上是time_t类型的，我们稍后会看到，它是一个为你构建的结构体，原始时间我不需要结构体time_t，因为它是C++的，也不需要。
- en: in C++ and then we're going to just basically use the time function to pass。
    in a pointer to this raw time which populates it okay and then we are going。 to
    use now we do needs a different one hour actually that's probably need to。 do
    this anyway but anyway we're doing it this way P T a pointer to a time which we。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 在C++中，我们基本上会使用time函数来传入一个指向原始时间的指针，这样就会填充它。然后我们将使用，实际上我们需要一个不同的时间函数，实际上可能需要这样做，但总之，我们用这种方式，PT是指向时间的指针。
- en: are going to do that we're going to say gm time and we are also gonna pass in
    the。 raw time this is gonna do that some of the conversion for us okay and there's。
    another struct called TM which we're going to do and gm time is going to do。 now
    let's talk about time for a second it turns out that if you look at time t。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的是说使用gm时间，并且我们还会传入原始时间，这会帮我们做一些转换，好吧，还有一个叫做TM的结构体，我们要处理这个，gm时间将会执行这些操作。现在我们来谈谈时间。事实证明，如果你查看时间t……
- en: sorry I said this wasn't a this was struck this is not a struck it's actually。
    just an integer time t if you look up time t just an integer and when you ask。
    for the time when you say time it populates the integer based on the number。 of
    seconds since the epic okay in fact if we go and look this up let's do it over。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 抱歉，我说错了，这不是一个结构体，它其实只是一个整数类型time t。如果你查看time t，你会发现它只是一个整数，当你请求时间时，调用time，它会基于自纪元以来的秒数来填充这个整数。事实上，如果我们去查找一下，来做一下演示……
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_78.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_78.png)'
- en: here let's close this man time I believe this is it here and see here we go
    time。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们来关闭一下时间，我相信就是这个，来看一下，时间。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_80.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_80.png)'
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_81.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_81.png)'
- en: returns the time is the number of seconds since the epic or epic depending on
    how。 you pronounce it which happens to be the beginning of time in Unix world
    is。 1970 January 1st 1970 and you say who came up with that number what was the。
    reason for making that number as the beginning of time well Unix was created。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 返回的时间是从纪元开始的秒数，纪元根据你的发音不同可以有不同的说法，它恰好是Unix世界中的时间起点——1970年1月1日。那么，谁提出的这个数字呢？为什么选择这个数字作为时间的起点呢？实际上，Unix是在那个时候创建的。
- en: in 1970 and Unix was because they did that they said well let's we got to have。
    the time basically from some time why don't we just start it now I don't know。
    if they never thought that there might be an issue with using time based on。 numbers
    before 1970 I don't know they they didn't think they use this anyway。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 1970年和Unix的时间系统是因为他们这样做了，他们说既然我们必须要有时间，那为什么不现在就开始呢？我不知道。如果他们当时没有考虑到基于1970年前的时间数字可能会存在问题，我也不知道，反正他们没想那么多，反正就这么用了。
- en: for that but it was the time since 1970 and once again many computers these
    days。 still have time underscore T an integer that's actually a four byte or 32
    bit。 integer once again number of seconds since 1970 January 19th first 1970 let's。
    find out how many seconds that is how many numbers can we fit into a 32 bit。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 因为这是自1970年起的时间，而如今许多计算机依然使用时间下划线T，一个整数，它实际上是一个四字节或32位整数。 再次强调，这表示自1970年1月19日的秒数。
    我们来算算那是多少秒，32位能表示多少数字。
- en: number four billion right we want we just do this we'll do it this way let's
    say。 so there's two to the 32 which is how many bits we have right and that's
    how many。 different numbers we can do it turns out this is a signed number so
    it's actually。 only two to the 31 okay two 31 in fact it's minus one because you're
    not get。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 四十亿，没错，我们想要的就是这样，我们就这么做吧，假设。 所以有2的32次方，这是我们拥有的位数，没错，这也是我们可以表示的不同数字的数量。 事实证明，这是一个有符号数，所以实际上是2的31次方。
    好吧，2的31次方，实际上是减1，因为你不能得到。
- en: you don't get that whole range it turns out because a second since so there's
    no。 I guess there's no zero in there minus one that's how many different numbers
    we。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 结果并不能获得整个范围，因为秒数从0开始。所以，应该没有零吧，减1，这就是不同数字的数量。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_83.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_83.png)'
- en: have which is two billion something about this up a little two billion different。
    numbers seconds since 1970 well if we wanted to figure out how long this is。 going
    to be right how are we going to or how are we going to do this so that we。 can
    figure out how many years it is how are we going to convert seconds to years。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到的是大约20亿不同的数字，即自1970年以来的秒数。 好吧，如果我们想弄清楚这是多少年。 我们该怎么做呢，如何将秒数转换成年数，如何计算出它的年数。
- en: in this case divided by maybe 365 point two five all right got it leap you're
    in。 there suppose right okay that's going to be the number of days per what is
    this。 there's seconds seconds per day now we want to end up wanting to know the
    number。 of years okay and then times 24 times 60 times 60 oops did I forget to
    print。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，可能需要除以365.25，好吧，闰年考虑进去了。 假设是对的，好的，这将是每年的天数，现在我们想知道的是秒数每一天是多少。 现在我们想知道多少年，然后再乘以24乘以60乘以60。
    哎呀，我是不是忘记打印了？
- en: there we go okay so 68 years right 68 years from 1970 gives you 2038 what's。
    gonna happen to computers that still use this time in 2038 it's gonna wrap。 right
    this is one of seven stuff I guess right it's gonna wrap around and any time。
    after that is going to start from 1970 again so in 2038 we're gonna end up with。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，68年，从1970年算起，68年是2038年。 到2038年时，仍然使用这个时间表示方式的计算机会发生什么？ 它会回绕，对吧？ 这应该是类似的7个问题，猜猜看，会回绕，之后的任何时间都会重新从1970年开始。所以到2038年，我们最终会得到。
- en: an issue where there are computers in the world that are currently not gonna
    be。 updated until then because well they might be who knows let's see some of
    you are。 actually younger than 2000 who's born after 2000 a few of you yeah a
    few of you。 okay it scares me by the way that vividly remember your 2000 anybody
    remember。
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有些计算机将不会更新，直到那时。因为它们可能不会更新，谁知道呢，看看吧，实际上你们有些人比2000年还年轻，谁是2000年后出生的？ 几个人对吧？
    几个人。 好吧，顺便说一句，记得2000年吗，谁还记得。
- en: the Y2K or anybody know about you don't remember it the Y2K issue but what。
    happened in your 19 about 1997 people realized that there was a very similar。
    issue with many programs where programmers would write the year with only。 two
    digits because they were writing these programs in like the 1970s and。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Y2K问题，或者有人知道吗？ 不记得了，Y2K问题，但发生了什么呢？ 在1997年左右，人们意识到，许多程序中存在类似的问题，程序员只用了两位数来表示年份，因为他们当时编写这些程序是在1970年代。
- en: like who's gonna be using these computers 25 years from now ha ha ha。 right
    well banks all right banks still use the computer use the same programs。 and whatever
    and what they did was they wrote the date with only two days mainly。 to save or
    to two numbers to save memory because back when they were。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 像是，谁会在25年后使用这些计算机呢，哈哈哈。 没错，银行，对吧，银行仍然在使用这些计算机，使用相同的程序，等等。 他们做的是，他们只用了两位数来表示日期。
    主要是为了节省内存，因为当时他们。
- en: building these computers in the 70s the memory actually meant something and
    they。 well for every date if we save two digits that's actually a lot of a lot
    of。 memory back in the day it was a lot of memory so they did this well when 2000。
    was gonna come around then it was gonna wrap around and go back to zero which。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在70年代建造这些电脑时，内存实际上是有意义的。当时，每个日期如果保存两个数字，那实际上节省了大量的内存，回到过去的时代，节省了很多内存。所以他们这么做了。当2000年到来时，日期会回绕并回到零。
- en: instead of 2000 would be 1900 and then this would be a big deal around the。
    first time I heard about it was about 1997 some people have thought about this
    a。 little bit before then but 1997 was when most of the world all of some woke
    up。 and went oh we're in trouble right we're gonna we're gonna like the entire
    world。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 不是2000年，而是1900年，然后这会成为一个大问题。我第一次听到这个问题是在1997年左右，虽然一些人比那时稍早就考虑过这个问题，但1997年是世界上大多数人都突然意识到，哦，我们有麻烦了，整个世界可能都会陷入困境。
- en: could collapse if all the banks collapse because all their software thinks that。
    it's nineteen hundred instead of two thousand and so the world will burn and。
    this was this was a big deal in 1997 or so well people went and looked at all。
    these computers said well okay we can fix these we just have to hire people to。
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 如果所有银行的计算机软件都认为现在是1900年而不是2000年，整个系统就会崩溃，世界也会陷入混乱。这在1997年左右是一个大问题，很多人检查这些电脑说：“好吧，我们能修复这些问题，我们只需要雇佣人来处理。”
- en: rewrite the code and recompile it and so forth much much of the code believe
    it。 or not was still written in co-ball a language designed in the 1950s turns
    out。 that's still kind of true that a lot of banking software for instance happens
    to。 be written in co-ball and most of the co-ball programmers have retired they're。
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 重写代码并重新编译等等，相信与否，很多代码仍然是用COBOL编写的，这是一种在1950年代设计的语言。结果证明，这种说法有一定的真实性，比如许多银行软件就恰好是用COBOL编写的，而大多数COBOL程序员已经退休。
- en: all living in Florida are tired right and so they all started picking up their。
    phones and somebody said hey we'll pay you a million dollars to come to our。 bank
    and fix this they all went a lot of plane and they went and like made lots。 of
    money and fixed it fixed it mostly but it really people December 31st were。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 住在佛罗里达州的人们都很疲惫，于是他们开始拿起手机，有人说：“嘿，我们会付你一百万美元，来我们银行修复这个问题。”他们都坐飞机去了，赚了很多钱，并且大部分解决了这个问题，但其实人们在12月31日时依然感到不安。
- en: like storing like tuna cans and things and like lots of water and all that because。
    they thought this was gonna like the world was gonna blow up because of this。
    and of course he didn't have it I remember one website I went to that said。 the
    date was like January 1st 101 or something weird like that and it was。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 就像存放金枪鱼罐头和一些东西一样，存放大量水和所有这些东西，因为他们认为世界因为这个原因会崩溃。当然他没有做这件事，我记得我曾访问过一个网站，上面写着日期是101年1月1日，或者是类似那种奇怪的日期。
- en: probably that issue is what happened but anyway that issue happened in 2000
    we。 were coming up with another Y2K like you know more better bigger or faster。
    whatever in 2038 and there are still computers that deal with that so all of。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题可能就是2000年时发生的，但不管怎样，那个问题发生在2000年，我们又面临着另一个Y2K问题，像是更好、更大或更快的挑战，反正2023年依然有一些电脑在处理这个问题。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_85.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_85.png)'
- en: that is to say that we still use this time underscore T some computers like
    the。 ones we use now use a 64-bit number oh by the way 64 bit number would be
    instead。 of two to 31 to the 63 and this gives us until well gives us what is
    that two。
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，我们仍然使用这种时间下划线T，一些我们现在使用的电脑使用64位数字，顺便说一下，64位数字将是从2的31次方到63次方，这样我们就能使用到...这给我们带来了，嗯，这是什么？两。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_87.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_87.png)'
- en: hundred ninety two billion more years so if people are talking about that to
    not。 a ninety two billion years now probably not gonna be also gonna be computers。
    talking about it because you know it's probably not gonna be any human。 stalking
    anymore they're gonna go ha ha we've got a deal of this it's that could。
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 一百九十二亿年之后，所以如果人们现在谈论这个问题，不是九十二亿年，而是现在也许不再会有这样的问题了，也不会再有电脑谈论这个问题，因为你知道，很可能再也没有人类在讨论这些问题了，他们会笑哈哈地说，我们已经处理好了，这个问题已经解决。
- en: happen I think the Sun is going to become a red giant before then and then。
    we're all you know the earth is gonna get involved and I think so probably won't。
    be computers they might ship some computers off to some other sources。
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我想太阳会在那之前变成红巨星，然后我们所有人……地球会受到影响，我想所以可能不会有电脑了，或许会把一些电脑送到其他地方去。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_89.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_89.png)'
- en: who knows anyway they're gonna have to deal with that two hundred ninety two。
    billion years now but that's that so back to what we were talking about all。
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 谁知道呢，反正他们得面对这个问题，两百九十二亿年之后，但就是这样，所以回到我们之前谈论的话题。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_91.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_91.png)'
- en: that digression aside we're trying we are getting a time to we're converting
    it。 to this struct TM which kind of breaks it up a little bit question yeah why
    would。 the time TV sorry who it's probably because you can get a。 negative like
    return value like oh let's just make it so we can get negative。
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 离题不谈，我们正在获取时间，把它转换成这个 `struct TM`，这有点拆解了时间，问题来了，为什么会使用 `time TV`？抱歉，可能是因为你可以得到一个负的返回值，像"哦，干脆就这样，能返回负值"。
- en: one back that's probably the reason like it yeah who knows but they also thought。
    well again 68 years if they've done it if they've done 32 bits on some would have。
    gotten another 68 years which is a kind of nice but they didn't think about it。
    probably just because though I want a return value would be negative one。
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能就是原因，嗯，谁知道呢，但他们也想过，嗯，再过68年，如果他们用了32位系统，或许可以再多用68年，那是个不错的选择，但他们没想到这一点，可能只是因为他们认为返回值会是负数。
- en: probably the reason yeah oh for the time yes such a good question is there a。
    timer in your computer is really what you're asking right I mean is there a。 clock
    that's we're updating yeah sure there is yep and the timer runs at。 whatever your
    clock frequency is but then they just divide by the number of。
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 可能的原因是，是的，哦，时间，真是个好问题，你问的是电脑里有没有计时器，对吧？我的意思是，是不是有一个时钟在更新，是的，当然有，计时器的运行频率就是你电脑时钟的频率，然后他们只是将其除以某个数字。
- en: clock ticks per computer if your computer runs it one gigahertz or whatever。
    just divides by one gig or two get you the number of seconds and it and it does。
    update that every you know every second in that case for that time that's。 happened
    that uses signal by the way just the operating system basically it's a。
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的电脑运行在一千兆赫兹或者类似的频率，只需要除以一千兆，就能得到秒数，这样每秒更新一次。在这种情况下，时间就使用信号来更新，顺便说一下，基本上是操作系统来处理的。
- en: signal that happens every it's a timer that happens every second it just goes。
    and does that it actually happens much more frequently than that because there's。
    other more precise timers than one second but yes there's actually a timer。 that
    updates everything oh yeah good question how do you synchronize these。
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 每秒都会发生一次信号，这是一种计时器，每秒触发一次，它实际上比这更频繁地发生，因为有些比一秒更精确的计时器，但确实有一个计时器会更新一切。哦，是的，好的问题，如何同步这些计时器呢？
- en: timers using time servers basically like somebody in Greenwich England says。
    this is the real time boom and then it's and it's much more strata mercer do this。
    by the way and they all say this is the real time based on this and there's always。
    leaps seconds and things every couple years we get and whatever they say this。
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 计时器使用时间服务器，基本上就像格林威治英国的某个人说，"这是准确时间"，然后就是这样，而这实际上是由Strata Mercer来执行的，顺便提一下，所有的时间服务器都说"这是准确的时间"，而且每隔几年就会有闰秒什么的，然后它们就说这是时间。
- en: is a real time and then all a bunch of time servers connect to that and then。
    have their own local versions and then we connected those and it's all very。 coordinated
    doesn't always work but it's pretty coordinated yeah。 yeah so so people didn't
    hear that the so Amy got computer and it was from Germany。
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个真实时间，接着一堆时间服务器连接到它，然后它们有自己的本地版本，然后我们再把这些连接起来，虽然并不是每次都能完全协调，但还是挺协调的。是的，是的，大家没听到的话，艾米拿到了一台来自德国的电脑。
- en: or something and every time she turns it on it resets to the German time zone
    or。 whatever yeah when they when they set up the bios on that computer it probably。
    said if you can't don't know the time look it up by just or just set it to this。
    time and some other time zone where it was first originally like built and。
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 或者每次她开机时，它都会重置到德国的时区，或者……是的，当他们设置这个电脑的 BIOS 时，它可能会设置成，如果无法获取时间，就查找并设置为某个时区的时间，可能是它最初制造时所在的时区。
- en: that's that's a hardware sort of issue by the way it may be because your battery。
    there's another's a battery a tiny battery inside the computer that might be。
    dead that might be the reason that it's a that it does like does it does that
    but。 and then it connects to the server and it's okay once it does it okay。
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个硬件问题，顺便提一下，可能是因为你的电池。计算机内部有一个小电池，可能已经没电了，这可能是它会发生这样的原因。然后它连接到服务器，没问题，一旦完成就好了。
- en: good all right so let's actually finish this this program up before you go to。
    next programs we are going to get the time using this gm time function and then。
    we are going to convert it using this gm time function then we're gonna have to。
    convert to a string let's just use a char star time string there 128 is。
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，好，接下来让我们完成这个程序，然后再开始下一个程序。我们将使用这个 `gm time` 函数来获取时间，然后我们将使用这个 `gm time` 函数将其转换，接下来我们将需要将其转换为字符串，让我们就用
    `char* time string` 来表示，128 是。
- en: definitely long enough to hold our little time string okay and then we're gonna。
    do STR F time this is the thing that converts the time to the actual string。 for
    you and this is in many languages has this stir time function and then you。 takes
    in the time string and then what else does it take in it takes in how big。
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 绝对足够长，以保持我们的小时间字符串，然后我们要做的是 STR F 时间，这就是将时间转换为实际字符串的函数。在许多语言中都有这个 `str time`
    函数，它接受时间字符串，接下来它还需要什么？它还需要接受大小。
- en: it is size of time string so it's an overwrite past the thing percent C in this。
    case actually means not one character but it means do it in a local defined。 time
    this is the GMT time that it's going to do and then it needs to take in the。 pointer
    to the actual time struct TM that we have there okay and then what are。
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 它是时间字符串的大小，所以它会覆盖过去的东西，百分号 C 在这个情况下其实并不是表示一个字符，而是表示以本地定义的时间来做。这是它将使用的 GMT 时间，然后它需要接受指向实际时间结构体
    TM 的指针，好，接下来我们来看看。
- en: we gonna do well we're gonna do this this will give you flashbacks maybe not。
    good ones to the the midterm exam number of bytes bytes written equals zero size。
    T num bytes to write equals the string length of time string we're sending that。
    we don't need the zero on there as it turns out we don't need to send that and。
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的是，我们将执行这个操作，这可能会让你回想起一些回忆，也许不是好的回忆，回到期中考试的那个字节数，已写入字节数等于零，大小。T，要写入的字节数等于我们发送的时间字符串的字符串长度。结果我们不需要在这里加上零，实际上我们不需要发送它。
- en: then while num bytes written is less than num bytes to write num bytes what
    is it。 num bytes written I always get this right to think about it num bytes written。
    plus equals right and then we'll try to the client and then the time stir plus。
    the num num bytes written and then num bytes to write minus num this is a lot。
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 然后当写入的字节数小于要写入的字节数时，num bytes 是什么？我总是能理解这一点，num bytes written。加上等于写入，然后我们会尝试客户端，然后是时间字符串加上已写入的字节数，再减去剩余的字节数。这是一长串。
- en: becoming a long line num bytes written okay all right and then that was in a。
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 成为一行长的代码，已写入的字节数，好，接下来。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_93.png)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_93.png)'
- en: while loop and after that we are done writing and then we need to close the。
    client okay so this is actually now all of a sudden really important to do the。
    right in a loop because when you're dealing with networks it may it's very。 likely
    that you would not push all those bytes up the network files it's pretty。
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在 while 循环之后，我们完成了写入，接下来我们需要关闭客户端，好，这实际上现在变得非常重要，要正确地在循环中进行写入，因为当你处理网络时，可能非常可能不会把所有字节都推送到网络文件，这个过程相当复杂。
- en: likely that you're gonna get them all pushed but in this case unless you have
    a。 pipe that's filled another maybe like making you twitch a little from midterm。
    but that's what that's what's going on there we need to write this to actually。
    write all the bytes out but notice that the client in this case okay the right。
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能你会把它们都推送出去，但在这种情况下，除非你有一个已填充的管道，否则可能会让你从期中考试中稍微“扭动”一下。但这就是发生的事情，我们需要把这个写出来，实际上写出所有字节，但是请注意，在这种情况下客户端，好，写入。
- en: function like no uses treats that just as a file descriptor which in Unix it
    is a。 file descriptor turns out okay it's a file descriptor that ends up pointing
    to a。 socket that point that sends it to the client okay all right let's see if
    I made。
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 函数像是没有使用的，将它当作一个文件描述符，在 Unix 中，它确实是一个文件描述符，结果它变成了一个指向套接字的文件描述符，套接字会将数据发送到客户端，好，我们来看我是不是做对了。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_95.png)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_95.png)'
- en: any mistakes here time server descriptors looks okay okay and then we run it。
    run in the other one over here time times we've seen this already server。 descriptor
    we haven't actually seen it work it time server descriptors is running。 okay and
    you can actually get that information by connecting to the thing。
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有任何错误吗？时间服务器描述看起来还行，然后我们运行它。运行另一个在这边的时间，我们之前已经看过了服务器。描述符，我们其实没有看到它工作，时间服务器描述符正在运行。好了，你实际上可以通过连接到这个东西来获取那个信息。
- en: I've written a little client that we'll talk about probably next time but you
    can。 do it in an interesting way using a function called telnet which we're going。
    to talk about a little bit later to telnet is kind of you get to what used to
    be or。 it's the original kind of version of SSH except it was very much SSH 10
    for。
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我写了一个小客户端，我们可能下次再谈，但你也可以通过一种有趣的方式来做，使用一个叫做 telnet 的函数，稍后我们会详细谈一下。telnet 可以说是
    SSH 之前的版本，虽然它的安全性远不如 SSH。
- en: secure shell telnet is very much not secure but what it does all it does is。
    it connects to a network and sets up a connection and then you can talk back。
    and forth to the network so if we type telnet myth 58 and then give it port number。
    one two three four five okay it all goes well there we go it tells you some。
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 安全外壳（secure shell，telnet）是非常不安全的，但它所做的所有工作就是。它连接到网络并建立连接，然后你可以与网络进行双向通信。所以如果我们输入
    telnet myth 58 然后给它端口号。1 2 3 4 5，好了，一切顺利，它会告诉你一些。
- en: details says trying myth 58 is it turns it that's the IP address from the 58。
    connected to it tells you something about how you exit out of it all you do is
    you。 do the connection the instant you get the connection the myth the time server。
    goes here's the time close the connection and so that's what happened here and
    it。
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 细节说明，尝试使用 myth 58 时，实际上是它转到了来自 58 的 IP 地址。连接到它时，它会告诉你一些关于如何退出的事项，所有你要做的就是。建立连接，一旦你建立了连接，神话时钟服务器。就会返回时间，关闭连接，这就是这里发生的情况。
- en: and that's it okay there is no back and forth we'll get to the back and forth
    in。 a little bit but that's it okay notice it is May 13th 914 it's 914 because。
    that's the current time in Greenwich England this turns out okay 21 14 914 I。
    believe that's correct 7 I was different something like that um so and some who's。
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样了。没有来回的交流，稍后我们会涉及到来回的交流，但就是这样。注意，现在是 5 月 13 日 9:14，实际上是 9:14，因为。那是格林尼治（Greenwich）英国的当前时间。结果是这样的，21:14:9:14，我相信是正确的，可能是差不多的数字，嗯，一些人可能会觉得不同之类的，嗯，所以，某些人。
- en: sending messages hi and you don't do that thank you though but don't you um
    so。 the so anyway once we have the server going now this while what happened it。
    needed one connection and you guys could all check that by the way you could go。
    right now to town that to myth 58 port 1 3 4 5 and get the actual time from。
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 发送消息“嗨”，你没有做那件事，谢谢，但你不需要。好了，所以，反正一旦我们启动了服务器，现在这个 while 循环发生了什么。只需要一个连接，顺便说一下你们都可以检查一下，你们现在可以去访问
    myth 58 的端口 1 3 4 5，获取实际的时间。
- en: myth 58 okay you could actually do that and check it out um we could do this
    in a。 little while loop here while one do uh let's see actually let me run let
    me。 just show y'all run the time client right now I need to do myth 58 and then。
    1 3 4 5 and there we go just kind of it takes away all the other garbage but if。
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: myth 58 好的，你实际上可以这么做并检查一下。嗯，我们可以在这个 while 循环中做一些操作，while 循环中做什么呢？实际上让我来运行一下。我现在需要运行时间客户端，输入
    myth 58，然后是 1 3 4 5，好了，系统就会去除其他的垃圾信息。
- en: we do this in a while loop you can see that it updates。 what while one do time
    client's myth 58 1 3 4 5 and then let's sleep for one second。 and done and that's
    there we go and then every second I'll just kind of update。 my skip one is not
    right on the second or whatever it might make that but you。
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 while 循环中这样做，你可以看到它在更新。什么是 while 循环呢？时间客户端的 myth 58 1 3 4 5，然后我们让它暂停一秒。好了，就是这样，然后每秒钟我就会更新一次。我的跳过一秒可能不精确，或者它可能会做得不对，但你。
- en: can see that every second it's updating because it just updates as we go along。
    okay you can do some other kind of fun stuff with this I wrote a little uh。 a
    little she'll call let's see corner time。sh which uh looks kind of weird and it's。
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到每秒钟它在更新，因为它会在我们进行时不断更新。好了，你还可以做一些有趣的事，我写了一个小脚本，叫做 corner time.sh，它看起来有点奇怪，事实上是这样的。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_97.png)'
  id: totrans-199
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_97.png)'
- en: got it's basically calling this let me change oh it is myth 58 that's good。
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 它基本上在调用这个，等等，让我修改一下哦，确实是 myth 58，挺好的。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_99.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_99.png)'
- en: here's what corner time does let me run it for you first。
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 corner time 的作用，让我先给你们运行一下。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_101.png)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_101.png)'
- en: corner time just basically keeps the time up in the top left corner of your。
    shell right you may ever wonder how them and emacs actually makes it so you can。
    type up here in your shell and not down here and it actually it's using these。
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`corner time`基本上是让时间一直显示在你shell的左上角，对吧？你有没有想过Emacs是怎么做到的，让你可以在shell的上方而不是下方输入？实际上它是利用了这些。'
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_103.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_103.png)'
- en: things called antsy escape characters so if we look at this uh let's see。
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 这些叫做转义字符，所以如果我们看看这个，嗯，让我看看。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_105.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_105.png)'
- en: antsy escape sequences there we go so here's a table of all these antsy escape。
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 转义序列，搞定了，下面是一个所有这些转义序列的表格。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_107.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_107.png)'
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_108.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_108.png)'
- en: sequences it's basically these agreed upon things you have to send to your。
    terminal to make the cursor move around right you can do it you can build up。
    pac-man game or whatever make it in the terminal just like you know you can do。
    anything else you can make it move around the screen which is kind of fun it takes。
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 这些序列基本上是这些约定的东西，你必须发送给终端，以让光标移动。对，你可以做到这一点，你可以制作类似吃豆人游戏之类的东西，或者做任何你想做的事，你可以让它在屏幕上移动，这挺有趣的，它需要...
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_110.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_110.png)'
- en: these things called escape commands um and if we look back at here again。
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 这些东西叫做转义命令，嗯，如果我们再看看这里。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_112.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_112.png)'
- en: the escape character it's actually a little weird to type that it's actually。
    it's actually one character you actually have to type control v and then the escape。
    character and it puts that one character in there for you。 and then every time
    you want to print something you print the escape character。
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 转义字符，实际上输入那个字符有点奇怪，实际上它是一个字符，你实际上必须输入`Ctrl + v`，然后输入转义字符，它就会把那个字符插入给你。然后每次你想要打印一些东西时，你就打印转义字符。
- en: and then some command basically in this case it saves the cursor position and。
    then moves the top left and then um makes it white with red background so I。 wanted
    to do that and then it calls the time client and updates it and then it， only
    sleeps for 0。2 seconds in this case if you do corner time at SH in the。
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是一些命令，基本上在这个情况下，它保存了光标的位置，然后移动到左上角，然后，嗯，设置为白色背景和红色前景。所以我想这么做，然后它调用时间客户端并更新它，然后它只在这种情况下休眠0.2秒，如果你在。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_114.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_114.png)'
- en: background well then you can do LS and whatever and it'll keep coming back。
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 背景好了之后，你可以执行`LS`或者其他命令，它会不断地返回。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_116.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_116.png)'
- en: kind of nice if you want to keep that little timer up there of course you've。
    got one in the other part of your computer anyway and then we can we can。 do that
    um it doesn't necessarily work well with like them uh it works a。 ok but then
    if you want like it'll it'll work ok if you do that but then。
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想保持顶部的小计时器当然，反正你在电脑的其他部分也有一个，然后我们可以，我们可以做那个，嗯，它不一定在像它们这样的程序上工作得很好，呃它工作得还可以，但如果你想要像这样，它会工作得还不错，但然后...
- en: sometimes it goes like if you go back up to the top it'll probably not work。
    there we go so yeah it's not not the most robust thing in the world but。
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候它会出现这种情况，如果你回到顶部，它可能不会工作。好了，搞定了，是的，它不是世界上最稳健的东西，但...
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_118.png)'
  id: totrans-222
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_118.png)'
- en: um that's that let's see let's get rid of that there we go。 so uh so you can
    use this time server if you if you want to okay then anyone try。 connecting to
    it did it connect okay if you connect at the time server。 can bring it connected
    to it yeah okay so what do we want to do to make this。
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，就是这样，看看，我们把它去掉。好了，嗯，你可以使用这个时间服务器，如果你想的话，好的，那有谁尝试连接到它吗？连接上了吗？如果你连接到时间服务器，可以连接到它了，对吗？
- en: program a little bit better well what we want to do first is。
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 程序稍微好一些，呃我们想要做的第一件事是。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_120.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_120.png)'
- en: screen bigger uh we want to do first is we want to this is a。 published time
    we already talked about here um we want to actually get rid of。
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 屏幕更大了，呃我们要做的第一件事是，我们想要这个。已发布的时间我们之前已经讨论过了，嗯，我们实际上是想要去掉这个。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_122.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_122.png)'
- en: that whole while loop right business that's midterm stuff we don't want to。
    write that all right we want to make it easier to print stuff out to the server。
    and uh let's do that using a library called socket plus plus okay the socket plus。
    library is a just a library that wraps that right command and does all the。
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这个整个while循环，业务逻辑部分，是期中作业的内容，我们不想写那么多。好了，我们想要让它更容易打印输出到服务器。让我们使用一个名为socket++的库来实现这个功能。这个socket++库只是一个封装了那个命令并完成所有工作的库。
- en: buffering and whatever necessary for you so that it makes it easier to。 uh to
    do that so let's actually just quickly uh rewrite this。 core uh no we want to
    do uh time server we'll keep the same one so we don't have to。 type all the differences
    here uh so what we need to do is you just need to。
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 缓冲和其他必要的操作都已为你处理好，这使得实现变得更容易。所以，让我们实际快速地重写一下。核心部分——不，我们要做的是——时间服务器，保持相同的内容，这样我们就不需要再重新输入所有的差异了。所以我们需要做的就是，你只需要。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_124.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_124.png)'
- en: pat and you're allowed to use this it is not it's a library that's not built
    into。 c++ but you can use it uh it's called socket plus plus。 slash sock stream
    which is nice okay and then all you need to do down here。 is get rid of all this
    that we don't like writing and we just have to set it up。
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: pat，你可以使用它，它不是内建于C++的库，但你可以使用它，叫做socket++/sock stream，这很好。然后，你所需要做的就是在这里。删除我们不喜欢写的所有东西，只需要设置它。
- en: to uh know how to connect to our talk to our client we do the following we say。
    sock buff sb which is sock buffer and we tell it here's the file descriptor we。
    want you to write out to okay and then we do iosock stream ss which is now a sock。
    stream uh which is in this library as well and then we can do something like。
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 要知道如何连接并与我们的客户端交互，我们做以下操作。我们说，sock buff sb，它是套接字缓冲区，然后我们告诉它，这是我们希望你写入的文件描述符。好的，然后我们做iosock
    stream ss，它现在是一个套接字流，属于这个库，接着我们可以做一些类似的操作。
- en: ss and then these should look very familiar time string and。 and it takes care
    of all that works okay and the other nice thing is we also because。 of the way
    the socket works when the function goes out when the uh sock。 sir the when the
    sock stream goes out of scope the sock buff descriptor i mean。
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: ss，然后这些应该看起来非常熟悉，时间字符串。它处理所有的工作，运行得很好，另一个好处是，我们也因为套接字的工作方式，当函数退出时，哦，套接字流退出作用域时，套接字缓冲描述符就会被关闭。
- en: sorry destructor closes the client so you don't even need to close it。 anymore
    once it goes out of scope the client gets closed for you。 it's kind of nice so
    that makes it so you don't have to write those。 you don't have to write those
    um why that wild that's really annoying to。
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 抱歉，析构函数会关闭客户端，所以你不需要再关闭它了。一旦它退出作用域，客户端会自动关闭。这非常好，这样你就不需要再写那些关闭代码了，真的不需要写那些，真的很麻烦。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_126.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_126.png)'
- en: write time server descriptors again， oh no socket sock stream get around here
    sock。 see i think that's right let me just see um， time server gotta do。
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 再次写入时间服务器描述符，哦不，套接字，套接字流，看看这里是不是对的。时间服务器必须做的事情。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_128.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_128.png)'
- en: it is socket plus plus slash sock stream do that right。 oh oh dot h oh okay
    thank you better than me looking at this stuff there we go。 okay and there we
    go so it's going to be the same。 same exact sock is there okay all right and that's
    the the next thing we want to do。
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 它是socket++/sock stream，做对了。哦哦，点h，哦，好的，谢谢，比我自己看这些东西要好。好了，行了，所以它将是相同的，完全相同的套接字在那里。好了，接下来我们要做的就是。
- en: um this is going to make it much easier so you don't have to do the writing
    and。 waiting and all that it's just uh you can use that as long as we have a c
    plus。 program you can use that which we are going to do uh for all the rest of
    the。
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这将大大简化操作，这样你就不需要处理写入和等待了。只要我们有一个C++程序，你就可以使用这个库，我们将在接下来的部分中使用它。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_130.png)'
  id: totrans-240
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_130.png)'
- en: projects and things it makes it easier all right um。 what else uh are we going
    to worry about well turns it out and let's actually。 try something let's say that
    we add maybe let's say we made published time very slow。 okay so let's say time
    server descriptors cc let's make uh let's say that it might。
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 项目和其他事情会让它变得更简单。好的，还有什么呢？嗯，我们会担心什么呢？好吧，事实证明，实际上我们可以尝试一些事情，假设我们添加了一些东西，假设我们让发布时延非常慢。好的，假设时间服务器描述符是`cc`，让我们假设它可能会很慢。
- en: publish the time but then it's going to be really slow so we say something like，
    sleep uh。 or something like that oh that's not gonna work how about two there
    we go if we do that。
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 发布时很慢，但它会非常慢，所以我们可以说类似，休眠之类的，哦，那不行，怎么不试试两个呢，来吧，如果我们这样做。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_132.png)'
  id: totrans-243
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_132.png)'
- en: see there we go and then let's say i run this again。 and if we go up in our
    do our one second business here。 there it is okay what it's going to do is it's
    trying every second to actually get the number but。 should hang on， let's see
    we want to do this instead of let's get rid of that sleep and see if that makes
    a difference。
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 看，做到了，然后假设我再次运行这个程序。如果我们在这儿做我们的每秒操作，嗯，等一下，它会每秒尝试获取数字，但是应该停一下，让我们看看我们应该做什么，改为去掉那个休眠看看是否有区别。
- en: it should there we go so it's not sleeping anymore who's doing the sleeping
    now。 that's the actual server that's got the issue and that when you try to request
    a client it。 blocks requesting a client and so it takes time to actually do this
    we want to get rid of that delay。 because you don't want to wait for someone else's
    google search before you do a google search。
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该好了，所以现在它不再休眠了，谁在休眠呢？是服务器本身有问题，当你尝试请求一个客户端时，它会阻塞客户端请求，所以实际上要执行这个操作需要时间。我们想要去除这个延迟，因为你不希望在别人完成谷歌搜索之前等待他们的搜索。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_134.png)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_134.png)'
- en: right you want to do it much quicker well and actually before we do anything
    else let's actually。 get rid of that sleep too so we well i guess we could we
    could do it later but how are we gonna do。 that threads okay now that you know
    about threads you can launch a thread every time someone wants to。 connect to
    you and remember how threading works you're doing it now thread says okay i'm
    going to be。
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 对，你希望它运行得更快。嗯，实际上在我们做其他事情之前，让我们先去掉那个休眠。好吧，我猜我们可以稍后再做，但我们要怎么做呢？线程。好的，现在你了解了线程，每当有人想连接时，你就可以启动一个线程，并且记住线程是如何工作的，你现在就可以做了。线程会说，好，我将开始。
- en: in some let's say why i move i'm going to launch the thread forget about it
    let it do its own thing。 and then go back up to the top of my my while loop or
    whatever and then i can accept another。 connection okay so that's what we're actually
    going to do we're going to use a thing called a。 thread pool which i've mentioned
    a couple times thread pool and a thread pool is what you're going。
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，假设我启动了线程，忘记它，让它自己去做事情。然后我会返回到我的`while`循环顶部，或者其他什么地方，然后我可以接受另一个连接。好的，这就是我们实际要做的事情，我们将使用一个叫做线程池的东西，我已经提到过几次线程池，线程池就是你将要使用的东西。
- en: to build for the next assignment okay so we're going to use it now but you're
    going to build it for。 the next assignment and you're going to see how that works
    in the next assignment but it makes it。 relatively straightforward about what
    we have to do to actually do this let's do this we need to go。
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 为下一个作业构建，好的，现在我们要使用它，但你将为下一个作业进行构建，你将会看到它在下一个作业中的工作原理。但这使得实际操作相对简单，关于我们必须做什么来实际完成这项任务。让我们来做这个，我们需要去做。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_136.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_136.png)'
- en: down to main and this while loop is where the problem is right we're blocking
    basically until。 publish time comes back so what we want to do is we want to say
    oh okay let's create a what we call。 a pool of threads that allows us to uh to
    go and set these threads up every time we get a request。 and a request we're going
    to throw it off to a thread for some maximum number of threads in this。
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 到主程序，而这个`while`循环就是问题所在，对吧？我们基本上是在阻塞，直到发布时返回。所以我们想要做的是，我们想说，哦，好，让我们创建一个叫做线程池的东西，它允许我们每当收到请求时就设置这些线程，每个请求，我们将把它交给一个线程，最多允许多少线程在池中运行。
- en: case we're just going to use four as it turns out you do need another pound
    include see if i can。 type this one right this time pound include uh i believe
    it is thread pool dot h there you go。 and that's that and then what we're going
    to do in main is we are going to uh we are still going to。 do the accept but once
    the accept happens we want to get back to that accept accept as fast as we can。
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们就用四个线程，结果证明你确实需要另一个 `#include`，看我能不能这次正确输入，`#include`，我相信是 `thread_pool.h`，好了，就这样，然后我们在主函数中要做的就是，我们还是会做
    `accept`，但是一旦 `accept` 发生，我们要尽快回到那个 `accept`，尽量快。
- en: so that we don't uh block so we don't like make the uh user wait on it okay
    and in this case we are。 going to uh do the following okay we're going to say
    pool dot schedule when you write yours you。 will see what this is all about we're
    basically going to schedule a pool this takes a function。 great so we'll use a
    an anonymous lambda function here we need to do the client and then we need to。
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这样我们就不会阻塞，也不会让用户等待，好的，在这种情况下我们要做的是。我们将说 pool dot schedule，当你写代码时，你会明白这一切，我们基本上是要调度一个池，这需要一个函数。很好，所以我们这里将使用一个匿名的
    lambda 函数，我们需要做的是客户端，然后我们需要做的是。
- en: publish time publish time for the client and that is going to be it and then
    we don't need that。 anymore okay so now we're going to this is going to happen
    instantly and go back up to the accept。 you'll be able to accept many many more
    clients very quickly they will all go into their own。 thread up to four threads
    in this case we could make it 40 if we wanted to but oh but we haven't done。
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 发布时间，发布时间给客户端，这就是它的全部，然后我们就不再需要那个了。好了，现在这会立即发生，然后返回到 `accept`，你将能够更快速地接受更多的客户端，它们会各自进入自己的线程，最多四个线程，在这种情况下我们可以将其设为四十个，但哦，我们还没有做。
- en: that we haven't set that up yet uh we're need to do that let's see thread pool
    pool four pretty。 straightforward you set up the thread pool and then you can
    schedule threads to go off on there。 you can schedule work to go happen on those
    threads as they go okay that's what's happening。 there questions on that yes so
    like thread wouldn't be as uh so there would be more efficient slash。
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还没有设置好这个，嗯，我们需要设置，来看，线程池 pool 四，挺简单的，你设置好线程池，然后你可以调度线程去做任务。你可以安排任务让这些线程去执行，好的，这就是发生的事情。有关于这个的问题吗？是的，像线程不会像其他的那样，嗯，所以会更高效/节省资源。
- en: not like the other stuff that are in， so the question is do we do this because
    it doesn't take up as much resource as they know this makes。 them more resource
    takes up more resources as it turns out but at the benefit uh with the benefit。
    of doing it fast so each three each time somebody requests the time we go and
    set another thread off。 or or say to one of the threads that's waiting around
    doing to do work please go publish the time。
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 不像其他的东西，问题是我们这么做是因为它不占用那么多资源，虽然它们占用的资源更多，事实证明它们的资源消耗更多，但有一个好处，嗯，就是它能更快地完成。所以每当有人请求时间时，我们就会启动一个新的线程，或者说指派给一个空闲的线程，让它去发布时间。
- en: that's how we that's how we use that okay pretty straightforward using thread
    pool is actually very。 nice as it turns out there easy does automatically do it
    it automatically thread pool does all the。 joining yet you'll build that into
    your thread pool when you do that okay but the one thing that。 we do need to change
    you have a question why do we need to create thread？
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 就是这样，我们使用的方式就是这样，好的，使用线程池其实非常简单，事实证明它很方便，线程池自动完成了所有的工作，自动进行线程池的操作，它会自动做所有的 join
    操作，你在使用线程池时会自己构建这些功能，好的，但我们需要更改的一点是，你有没有问题，为什么我们需要创建线程？
- en: we need to create the threads when we're downloading things so so the next assignment
    you're going to。 see how you use a thread pool to make things a little bit faster
    than what you're doing now。 for it's you won't be able to tell necessarily for
    for the assignment uh assignment five。 but basically having threads already running
    means that you don't have to get them running when you。
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在下载时创建线程，所以下一个任务你将看到如何使用线程池让事情变得比现在更快，尽管对于任务五你可能不容易看出差异，但基本上，拥有已经在运行的线程意味着你不需要在每次使用时重新启动它们。
- en: call it so it's faster in that sense they're all just waiting around and going
    give me some work to。 be just like farm did for your assignment three okay i just
    picked four because it was a number。 bigger than one how many do you know how
    many you need good question depends on what your。 low you expect your load to
    be so google's gonna have thousands of thousands of threads running。
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做的原因是它的速度更快，在那种情况下它们都只是在等待，直到给它们一些工作。就像你在作业三中做的那样，我们的选择是四个，因为它比一个大。你知道你需要多少吗？好问题，这取决于你预期的负载是多少。谷歌会运行成千上万的线程。
- en: because they know that millions of people are going to be each server's got
    it's like lots and lots。 of threads um for ours i'm just making small just to
    do it we could have made it 40 and it wouldn't。 have mattered you you are generally
    limited to the number of threads on a particular machine。 if you're not the super
    user thousands or something like that so we don't want to do that now the other。
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 因为他们知道成千上万的人会使用，每台服务器都有很多很多线程。对于我们来说，我只是做了一个小的操作，我们本可以设为40，也不会有什么不同。通常情况下，你的线程数会受到特定机器上线程数的限制。如果你不是超级用户的话，大概会限制到几千个线程之类的。所以我们现在不想这样做，接下来是。
- en: thing we don't want to do is make the bandwidth of the system such that it's
    uh it's we don't we're。 not going to want to like tie it up too too much this
    is what for assignment five what you're doing。 is you're saying oh i only want
    24 total threads and i only want 10 threads going to any particular。 server because
    you don't want to blast it with all your requests that's kind of what we're trying
    to。
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不想做的是让系统的带宽变得过载，我们不希望它被完全占用。这就是在作业五中你要做的事情：你会说，我只想要总共24个线程，并且每个特定的服务器最多只有10个线程，因为你不想把所有请求都发给它。我们正在尝试做的就是类似的操作。
- en: do with limiting these things as well okay so let's do this we have to do one
    other thing here。 we need to actually make uh publish time what we call thread
    safe it's not right now you wouldn't。 know that because you wouldn't necessarily
    think about it but the way we're doing this we are using。 one we're using one
    kind of globally available pointer here or one pointer that actually tries。
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也需要限制这些东西，所以我们来做这件事。我们还需要做另外一件事。我们需要将发布时刻变成线程安全的，现在它不是。你可能不会意识到这一点，因为你可能没考虑过，但我们现在的做法是使用一种全局可用的指针，或者说我们使用的指针实际上是试图。
- en: to go to this that shares the same time struct we can use a different function
    to to do this the。 first couple lines are going to be exactly the same and what
    we're going to do now is we're just。 going to instead of making it a pointer to
    a time struct we are going or a um yeah tm struct a。 struct tm we're just going
    to make it a an actual local copy of the time the tm struct and then what。
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用一个不同的函数来处理这个共享相同时间结构的情况。前两行代码会完全相同，我们现在要做的是，我们不再创建指向时间结构的指针，而是直接创建时间结构的本地副本。然后接下来。
- en: we're going to do is we're going to use another function gm time underscore
    r r stands for reentrant。 which basically means it's thread safe why is it thread
    safe now you are going to be copying the。 time into your local copy threads copy
    of the time so they're not all trying to share this copy。 okay so that's uh that's
    why we're doing that and it takes a little bit more information here takes。
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的是使用另一个函数 `gm_time_r`，其中 `r` 代表可重入（reentrant）。这基本上意味着它是线程安全的。为什么它是线程安全的？因为你将会把时间复制到你本地的线程副本中，这样它们就不会都在共享这个副本。好，这就是我们这样做的原因，并且它需要一些额外的信息。
- en: the raw time and it takes a pointer to tm which is uh we're trying to do and
    then otherwise i think。 except for this being， antressant m i think that's all
    we need to do to change that say again did i screw some up。 you don't think it
    has to because it's a pointer to a time before it was a point ptm but pointer。
    so now i think it does we'll see but anyway that's all you have to do to make
    it reentrant。
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 这个原始时间函数需要一个指向 `tm` 结构的指针，这是我们要做的。除此之外，我想除了这个是可重入的（reentrant）之外，我认为我们所需的更改就这些了。再说一遍，我做错了吗？你不认为它需要因为它是一个指向时间的指针吗？之前它是指向
    `ptm` 的指针。所以现在我认为它需要，我们到时候看看吧。不管怎样，要使其可重入，只需这样做就行了。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_138.png)'
  id: totrans-266
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_138.png)'
- en: you have to think about these things when you do functions with threading you
    always have to worry。 a is my can i do the function is it thread safe things like
    stir talk not thread safe why because。 stir talk has its own internal state which
    is not really what you want why just use another one so。 for instance we look
    up uh man gm time right it should have there's a whole bunch of different。
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用带线程的函数时，你必须考虑这些问题。你总是要担心，能否安全地进行函数调用，像是 `strtok` 就不是线程安全的。为什么？因为 `strtok`
    有它自己的内部状态，这通常不是你想要的。为什么不直接使用另一个呢？例如，我们查找 `man gm time`，它应该有很多不同的版本。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_140.png)'
  id: totrans-268
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_140.png)'
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_141.png)'
  id: totrans-269
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_141.png)'
- en: times in here uh there is right there gm time gm time underscore r which is
    let's see say that。
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有时间，嗯，就是 gm time 和 gm time underscore r，我们来看看吧。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_143.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_143.png)'
- en: it's the reentrant version yeah uh the gm time r function is like the store
    the data and user。 supply struct so basically it's uh there i don't know if it
    even you can look up thread。 there we go tells you if they're thread safe or not
    you have to think about these things when。
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这是可重入版本，嗯，gm time r 函数就像是存储数据和用户提供的结构。所以基本上，它是，我不知道它是否可以查找线程。好了，它会告诉你是否是线程安全的，你必须考虑这些问题。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_145.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_145.png)'
- en: you're doing threads oh yeah the question was why do i have to change from a
    pointer to a local one。 well first of all the gm time underscore r function takes
    a pointer to the thing but it。 populates it for you so in this case it populates
    it for you instead of giving you a pointer and a。 local copy that it's got so
    that's the difference there the regular gm time says oh here's here's。
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 你在做线程哦，嗯，问题是为什么我必须从指针改成局部变量？首先，gm time underscore r 函数接受一个指向该对象的指针，但它会为你填充数据。所以在这种情况下，它为你填充数据，而不是给你一个指针。和它的局部副本，所以这是不同之处。普通的
    gm time 会说哦，这是这是。
- en: my pointer that i'm keeping the time in the one that or the arm i'm creating
    it mine for you and giving。 it to you and then if you called it again it would
    just redo that time and so you don't want your。 thread sharing that one value
    you want their own copy of it good question yeah is there anything。 you can do
    with threads manually you can't do a thread pool uh not really i mean threads
    that you。
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 我保持时间的指针就是那个，或者是我创建的指针，并将它给你，然后如果你再次调用它，它会重新设定时间，所以你不希望线程共享那个值，你希望每个线程都有自己的副本。好问题，嗯，有没有什么方法可以手动处理线程？你不能做线程池吗？不太行，我是说你可以用线程。
- en: you're gonna want to do threads if you have no idea what your load is going
    to be or you just want。 a one-off thread or something like that you probably don't
    need a whole thread pool for it yeah once you。 write that assignment you'll see
    kind of the differences of when when you might use it or not。 good question yeah
    um why wouldn't it be thread safe if it's not changing the value it will change。
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你根本不知道你的负载会怎样，或者你只是想要一个临时的线程之类的，可能不需要为它设置整个线程池。一旦你写完作业，你就会看到在什么时候应该使用它或者不使用它。好问题，嗯，如果它不改变值，为什么它不安全？它会改变。
- en: the value you want to know when you call the function again if two functions
    call the call the。 gm time it will get updated and then it won't be the same they're
    trying to use the same value and。 you just are you only storing it once so let's
    say another one came by a second later the first one。 might get that later time
    if it hadn't published it yet or whatever so there's some issues of it。
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 当你再次调用函数时，你想要知道的值，如果两个函数调用相同的 gm time，它将会被更新，然后就不再是相同的，它们试图使用相同的值，而你只是存储一次。那么假设另一个线程一秒后过来，第一个线程可能会拿到更新后的时间，如果它还没有发布它的话，或者其它原因，所以会有一些问题。
- en: yeah dude okay yes we took out the thread to make it multi-threaded yes um and
    as your question。 like should we try it again with the thread sleep to or if i
    put the sleep to back in it would make。
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，伙计，好吧，是的，我们去掉了线程使其变成多线程的。嗯，关于你的问题，像是我们是否应该再试一次加上线程休眠？如果我把休眠加回去，它会。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_147.png)'
  id: totrans-279
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_147.png)'
- en: it would be that so here's what we did before we just put a we put a little
    thread we put a little。
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 那么这是我们之前做的事情，我们只是放了一个小的线程，我们放了一个小的。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_149.png)'
  id: totrans-281
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_149.png)'
- en: inside here we put like a sleep to or whatever right so every time a server
    requests it that server。 is going to get it and then have to wait a little bit
    before closes its connection two seconds it turns。 out if you have multiple clients
    coming in at once then they will all get their own they will still。 have to wait
    two seconds it turns out but there's that each one does not have to wait two seconds
    each。
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们加入了一个sleep或者其他什么东西，对吧？所以每次一个服务器请求时，该服务器将会接收到它，然后需要等一会儿才关闭连接，两秒钟。结果发现，如果多个客户端同时到来，那么它们都会各自接收，并且它们都需要等两秒钟。结果发现，每个客户端不必等到两秒钟才接收到它。
- en: one independently waits two seconds doesn't have to wait for the other one to
    finish that's the。 difference there okay so all of that said we now have our good
    version which is which uses。
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 一个独立地等待两秒钟，不需要等另一个完成，这就是它的区别。好的，所有这些说完了，现在我们有了我们的好版本，它使用了。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_151.png)'
  id: totrans-284
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_151.png)'
- en: threading a thread pool as it turns out and it allows the server to accept a
    connection spin。 off a thread really quickly and then accept another connection
    so if there are 100 connections。 coming out there are four in this case connections
    at once it will very quickly deal with them it's。 already pretty quick it will
    very quickly deal with them and not have to wait for the published。
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 线程池，事实证明它允许服务器接受一个连接，迅速启动一个线程，然后接受另一个连接。所以如果有100个连接。涌入，这里有四个连接同时到达，它会非常迅速地处理它们，已经相当快了，处理它们时不需要等待已发布的。
- en: time function to end okay so that's the the big deal there now the uh let's
    see we talked about。 the published time that there's the updated time okay uh
    given the time now i think we're gonna talk a。 little bit about building building
    a client i don't know we might get a chance to to build the client。 but i want
    to show you a little bit more about uh the well i'm going to use town that to
    show you a。
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '时间函数结束。好的，这就是大致情况。现在，呃，我们已经讨论了已发布的时间，那就是更新的时间。好的，呃，考虑到现在的时间，我想我们将讨论一下构建客户端。我不确定我们是否有机会构建客户端，但我想再给你们展示一下更多关于呃，我将使用townnet来向你们展示。 '
- en: little bit more about how the internet works okay here's what i want to show
    you okay so。
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 了解更多关于互联网如何运作的知识。好的，这就是我想展示给你们的内容。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_153.png)'
  id: totrans-288
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_153.png)'
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_154.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_154.png)'
- en: we use town that to go to our server in fact it's still running town that uh
    myth 58。 one two three four five and maybe not hang on maybe oh maybe we have
    the oh i bet we still had the。
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们用townnet连接到我们的服务器，实际上它仍在运行townnet，呃，myth 58。一二三四五，也许没有，等一下，也许我们仍然有。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_156.png)'
  id: totrans-291
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_156.png)'
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_157.png)'
  id: totrans-292
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_157.png)'
- en: still have that we still have the delay in there probably and there we go there's
    still the delay in。 there um so we used town that to do that town that again simply
    opens a connection and then has a。 plain text communications with the server okay
    so you could do the following townnet google。com。 port 80 well we know that port
    the internet is on port 80 and if you do the following you do that。
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然可能有延迟，然后就这样吧，延迟还在。嗯，所以我们用townnet来做这个，townnet再次简单地打开连接，然后与服务器进行纯文本通信。好的，所以你可以这样做：townnet
    google.com，端口80。我们知道互联网是通过端口80的，如果你这样做，你就能做到。
- en: we are now connected to google okay now we're not connected to google's like
    pay server or whatever。 you know we're not connected like the internal network
    connected to the website just like your。 browser this is exactly what your browser
    does okay your browser says hey connect to google so。 that's that there's a bit
    of a timeout so hopefully i'll do the rest of it fast enough but how do you。
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已连接到谷歌。好的，现在我们并没有连接到谷歌的支付服务器或其他什么。你知道，我们没有连接到内部网络，而是连接到网站，就像你的浏览器一样，这正是你的浏览器做的事情。好的，所以就是这样，可能有一点超时，希望我能足够快地完成其余的部分，但你怎么做呢？
- en: do this uh if we want to actually request a web page you have to do a very particular
    protocol。 and the protocol is http which you may or may not have heard about before
    but it's the protocol。 which is talked by a talked on by the entire internet okay
    there's a few different versions。 of it as it turns out what you can say though
    is you can say get slash which means the home page。
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 做这个，如果我们真的想请求一个网页，你必须遵循一个非常特定的协议。而这个协议是HTTP，你或许听说过，但它是整个互联网都在使用的协议。好的，实际上它有几个不同的版本。你可以说的是你可以说“get
    /”，这意味着主页。
- en: and then you say i am using http slash 1。1 there's 1。0 there's 1。1 there's 2。0
    now， 2。0 you can't use tell that for anymore it's a binary format so that's too
    bad。 sad face but that's that and then if you hit return one more time there's
    google's home page。 okay so that's the home page for google that you've now that
    we've now got it's kind of it's。
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你说，我正在使用http/1.1，1.0有，1.1也有，2.0现在也有，2.0你不能再使用了，因为它是二进制格式，太糟糕了，伤心。但就是这样，如果你再按一次回车键，你就能看到谷歌的首页。好的，这就是我们现在获得的谷歌首页，它有点……
- en: it's actually believe it or not smaller than you might expect it's mostly javascript
    in there okay。 and it's it's kind of compressed all right you can see that google
    doesn't bother with new ones。 right why are they bother with new lines if you're
    program if google is sending every query new lines。 that don't that the browser
    doesn't care about the browser could care less about new lines it just。
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，信不信由你，它比你预期的要小，里面大部分是JavaScript。好的，它其实是被压缩过的。你可以看到谷歌不会在意换行符。对，为什么谷歌要在每个查询中加入换行符呢？浏览器并不在意换行符，浏览器对换行符毫不关心，它只是……
- en: knows go to the next thing right well if it sends a thousand new lines well
    that's a thousand。 bytes it needs to send to you and a billion other people that
    are requesting from google right now。 google wants to minimize the amount of stuff
    it sends you because it has to pay for bandwidth i。 mean it's not like free right
    it has to pay for bandwidth and a billion times a hundred is a。
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 知道，进入下一个环节。对吧，如果它发送了一千个换行符，那就意味着需要发送一千个字节给你以及现在正在请求谷歌的十亿其他人。谷歌希望最小化发送给你的内容，因为它必须支付带宽费用。我的意思是，这不是免费的，对吧，它必须支付带宽费用，而十亿次乘以一百就是一个非常大的数字。
- en: you know a lot of characters extra there's a send every you know day or whatever
    you know two hours。 or whatever it also wants to do it fast so the more new lines
    that get sent to your browser that。 don't matter are just wasted time sending
    you your query and you don't want to have to wait for your。 query so what does
    google do they get real new lines they run what's called a minifier on their。
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，很多字符被额外发送，每天或者每两小时发送一次，或者其他任何时间间隔。它还想要快速处理，所以越多的换行符发送到浏览器中，那些不重要的换行符只是浪费了时间，浪费了传送查询的时间，你不希望为查询等待。那么谷歌是怎么做的呢？它们删除了实际的换行符，运行了一个叫做“压缩器”的工具来处理它们。
- en: javascript which kind of takes it all does this for you like the programmers
    don't write like this。 right you don't go to google and write like i can not use
    new lines at google right they don't do that。 right you can use all new lines
    you want then when they run up to this minifier that actually。 produces this so
    that that's what you get okay but that's the um that's how you get the details
    from。
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript，某种程度上是将这一切为你做好的，像程序员并不会这么写。对吧，你不会去谷歌上写“我不能在谷歌上使用换行符”，对吧，他们是不会这么做的。对，你可以随意使用换行符，然后当它们遇到这个压缩器时，实际上会生成这样的代码，所以你得到的就是这个结果，好的，但这就是你获取细节的方式。
- en: from google okay we can also town that to web。stanford。edu port 80 right i'll
    do it up here okay same sort。 of thing this actually has a slightly smaller timeout
    um if we do get and then you can get the。 actual one class slash cs 110 it actually
    requires a slash at the end it's very particular you always。
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 来自谷歌的，好的，我们也可以切换到web.stanford.edu端口80，对，我在这里做。好的，差不多一样的事情，实际上这个有一个稍微小一点的超时。如果我们执行“get”然后你可以获取到实际的一个类，比如“/cs110”，它实际上要求在最后加一个斜杠，这非常讲究，你总是……
- en: wonder why in 106a they tell you fv exact or 106b it's gotta be the exact output
    this is why。 computers talk to each other it's exactly the reason let's make timeout
    um and then if we type it without。 the slash and say 1。1 most web servers require
    that you actually say which host do you actually want。 google for some reason
    didn't require that although we could have done it stanford。
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 想知道为什么在106a他们告诉你fv必须完全匹配，或者在106b它必须是完全的输出，这就是原因。计算机之间的通信正是这个原因，让我们设置超时，然后如果我们不加slash直接输入1.1，大多数网页服务器要求你必须明确指定你想要访问哪个主机。谷歌出于某种原因不要求这样做，尽管我们本可以在斯坦福做同样的事。
- en: edu and then one more， another there we go what does it say it says oh i'm sorry
    your document that you asked for which was。 the one without the slash on it slash
    class slash cs 110 without the slash has changed and gone to。 slash class slash
    cs 110 slash right it keeps us figured out for you which is says you did it wrong。
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: edu 然后再来一次，另一个，然后看它怎么说，它说，哦，对不起，你请求的文档，就是没有slash的那个，slash class slash cs 110没有slash的，已经变更并转移到了slash
    class slash cs 110 slash，它已经为你搞定了，告诉你你做错了。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_159.png)'
  id: totrans-304
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_159.png)'
- en: and so that's why we did so let's try it again and then this is still stanford
    we're going to get。 slash class slash cs 110 slash okay http slash 1。1 and then
    host web。stanford。edu and there we go。
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是为什么我们这样做的原因，我们再试一次，然后这仍然是斯坦福，我们要访问。slash class slash cs 110 slash 好的 http
    slash 1.1 然后是 host web.stanford.edu 然后就这样。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_161.png)'
  id: totrans-306
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_161.png)'
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_162.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_162.png)'
- en: there's our web page for the class right and that's uh you can look at exactly
    the html and like。 the job script and whatever for the class um it's probably
    actually it's probably not the。 JavaScript uh it many web pages load external
    resources too and your browser has to figure all。 this out your browser says let
    me load the main page oh is there anything else i need to load and。
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们课程的网页，对吧，你可以查看课程的具体html代码以及像JavaScript之类的内容，嗯，实际上可能并不是JavaScript，许多网页也会加载外部资源，你的浏览器必须把这一切都搞清楚。浏览器会说，让我加载主页，哦，还有什么需要加载的吗？
- en: it goes and loads that and then that tells you more stuff for loading it's this
    big that's why it。 takes some time sometimes for these web pages like cnn。com
    which has a billion different files that。 wants to load on your computer mostly
    ads i would say and then it uh and then it takes a while to。 do all that so uh
    that's that okay all right anybody have any questions about the protocol right
    now。
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 它会去加载网页，然后这会告诉你加载更多的内容，它很大，这就是为什么有时候这些网页加载起来会比较慢，比如cnn.com，加载了成千上万的不同文件，主要是广告，我想说，然后它需要一些时间来完成这些加载。好了，没问题，有人对这个协议有问题吗？
- en: you're gonna we're gonna build a little client to do this protocol in fact we
    might as well do do。 the client um this we're also going to start building a a
    program called wget which is built。 in your program if you do wget google。com
    what it does is it actually goes and requests the web page。
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将构建一个小客户端来执行这个协议，实际上我们不如直接做客户端，我们还将开始构建一个名为wget的程序，这是内置在你的程序中的，如果你输入wget google.com，它实际上会去请求网页。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_164.png)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_164.png)'
- en: just like we just did it's pretty simple as it turns out if we look at index。html
    there's the google， page again that we just did so you can do you can pull pages
    from the terminal all you want question。 when you type a URL in the web page it's
    doing exactly again。 okay well because when i leave out the slash in like cs 110
    figures out how do you get rid of it。
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 就像我们刚刚做的那样，实际上这很简单，如果我们查看index.html，那就是我们刚才做的谷歌页面，你可以从终端拉取网页，随便做。问题是，当你在网页中输入URL时，它实际上是做了相同的事情。好吧，因为我在cs
    110中省略了slash，它会自动搞定。
- en: anyway yeah well notice that that's good question the little message that came
    back and said your。 thing has permanently moved well your browser goes oh that
    was silly i need to put the slash on it just。 does another get request and gets
    it with the slash it's it's there are lots of error messages that come。 through
    uh your browser that are all hidden from you because your browser goes oh i can
    figure that out。
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 无论如何，是的，好问题，那个返回的消息说你的东西已经永久移动，浏览器会想，哦，这太傻了，我需要加上slash，结果它就发出了另一个get请求，并且加上了slash，问题解决了。浏览器会隐藏许多错误信息，因为它会自行解决这些问题。
- en: that's one of them good question okay uh what i'm going to do is client。starter
    oops to time client。cc， okay time client。cc this is actually relatively straightforward
    okay we don't have too much。 for the time this is just saying how to the first
    part is just saying how to actually get the information。 here or how to get the
    parameters for that from the uh from the command line okay what we're going to
    do。
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 这是其中之一，好问题。好的，呃，我要做的是客户端。starter 哦，转到 time client.cc，好的，time client.cc，这其实相对简单。我们没有太多内容。至于时间部分，第一部分只是说怎么从命令行获取信息，或者如何获取参数，好的，我们要做的是这个。
- en: is we're going to do it client socket this time not client if i could type right
    client socket equals。 create client socket rv1 and we're going to convert the
    other one to a rv2 convert to an integer。 okay that's going to create the client
    socket okay we're going to just assert that it actually worked。 client is greater
    than or equal to zero okay you could do some better error checking if you want
    to。
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我们要做的是客户端套接字，这次不是客户端，如果我能打对字的话，客户端套接字 =。创建客户端套接字 rv1，然后我们把另一个转换成 rv2，转成整数。好的，这样就创建了客户端套接字，好的，我们只需要断言它实际上成功了。客户端大于等于零，好的，如果你愿意，可以做更好的错误检查。
- en: on this uh the let's see um the client yeah you're right it should be client
    socket you're right。 i don't know why that's that's actually wrong so client socket
    thank you all right should be。 greater than zero uh okay and then we are going
    to do sock above and sb because this is what we're。 going to set up just like
    we did before because all we're going to do is we need to be able to get。
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个，呃，我们来看看，嗯，客户端，是的，你说得对，应该是客户端套接字，你说得对。我不知道为什么那个错了，应该是客户端套接字，谢谢，你说得对。应该大于零，呃，好的，然后我们要做
    sock 上面和 sb，因为这是我们要设置的，就像我们之前做的，因为我们所做的就是需要能够获取。
- en: the information from the server okay iosockstream and sb like that and then
    we're going to do string。 timeline we'll say and get line that's nice so we can
    just do get line takes the sockets over and。 then takes in timeline and it just
    basically reads it in okay and then we print out timeline nl and。 that's it so
    there's our first client okay if i didn't make a mistake that's what it should
    look like。
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 从服务器获取信息，好的，iosockstream 和 sb 就像那样，然后我们要做字符串。timeline，我们说，使用 get line，这很棒，所以我们只需要做
    get line，它接收套接字，然后接收 timeline，它基本上就是读取它，好的，然后我们打印出 timeline nl，嗯，就这样。那就是我们的第一个客户端，好的，如果我没有犯错，那应该是它的样子。
- en: okay make time client oh lots of hope anyway um， client and thread pool do we
    have their goal we shouldn't have their goal here hold on。 make time client oh
    no oh assert was not declared um and there's lots of other stuff in there too。
    let's see how about pound include assert how about c assert see if that works。
    nope did i do something else yeah let's see。
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，安排时间，客户端哦，希望很多，不管怎样，嗯，客户端和线程池，我们有他们的目标吗？我们不应该在这里有他们的目标，等一下。安排时间，客户端哦，不行，哦，断言没有声明，嗯，还有很多其他的东西。我们来看看，怎么用`#include
    assert`，怎么样，c 断言，看看能不能行。没错，我做错了什么吗？嗯，让我们看看。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_166.png)'
  id: totrans-319
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_166.png)'
- en: thank you right hang on see soft that。
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢，稍等，看看软的那个。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_168.png)'
  id: totrans-321
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_168.png)'
- en: i never declared s s you're right thank you very much how about we do that like
    oh no we do。 oh you're right thank you how about that we need to call the constructor
    i'm at the call it variable。 timeline， timeline timeline oh perfect okay thanks
    oh no same thing。 hang on well now it seems to say it's up to date oh maybe the
    other thing was not was broken。
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我从未声明过 s s，你说得对，非常感谢。那我们怎么做呢，哦，不，我们做这个。哦，你说得对，谢谢，怎么做呢，我们需要调用构造函数，我在调用它的变量。timeline，timeline，timeline，哦，完美，好的，谢谢。哦，不，还是一样。稍等，现在它似乎说是最新的，哦，也许之前的那个有问题。
- en: time client and then do we still run running we do myth 58。 one three four five
    and there we go now we got the time we made it but anyway the point is that a。
    client is actually not that hard to build right you uh all you really need to
    do is say create a。 client socket and to a particular machine on a particular
    port and then get the information。
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: time client，然后我们是不是还在运行，我们确实在运行 myth 58。12345，行了，现在我们得到了时间，我们做到了。但是不管怎样，重点是客户端实际上并不难构建，对吧？你，呃，你真正需要做的只是创建一个客户端套接字，连接到一个特定的机器，特定的端口，然后获取信息。
- en: sends you back right and that's that now you could connect up connection then
    have to send more。 information that's fine too but you can still do it this way
    so it's relatively straightforward to。 set up a client and now you have two different
    computers talking to uh up to in fact i think。 they're both on the same computer
    here but you could have to you could do this from your computer。
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它将信息发送回去，就这样。 现在你可以连接起来，然后再发送更多信息，这也没问题，但你仍然可以这样做。所以设置客户端相对简单。现在你有了两台不同的计算机进行通信，嗯，事实上我认为它们都在同一台计算机上，但你也可以从你的计算机上做这件事。
- en: as well at home and your parents could do it wherever yeah so when we set the
    client we're just。 like a server it seems like it's more or less the same thing
    it's a very um it's not perfectly symmetric。 but it's it's a relatively symmetric
    thing you're setting up the i'm going to listen server i'm setting。 up i just
    want to make a connection to you and say please give me please send me some details
    some。
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以在家里做，父母可以在任何地方做。是的，所以当我们设置客户端时，基本上就像是设置一个服务器，看起来它们差不多，虽然它并不完全对称。 但它是一个相对对称的东西，你设置了，我将设置监听服务器，我设置。
    我只想建立一个连接给你，并说请给我一些细节，发送一些。
- en: stuff that's the difference one is setting up a server and then waiting for
    connections the that's。 the server the client is saying i'm setting up this connection
    and then immediately connecting to it。 that's the difference to a particular one
    all right if there are other questions we'll see you all。
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是不同之处，一个是设置服务器，然后等待连接，而另一个是客户端设置连接，并立即连接上。这就是它们之间的区别。 好的，如果有其他问题，我们下次见。
- en: '![](img/cadd01ed9181ee7a91b8f70291dda578_170.png)'
  id: totrans-327
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cadd01ed9181ee7a91b8f70291dda578_170.png)'
- en: Wednesday。 Coq you。
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 星期三。Coq你。
