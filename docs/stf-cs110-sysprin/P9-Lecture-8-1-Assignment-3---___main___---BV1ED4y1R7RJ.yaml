- en: P9：Lecture 8-1 Assignment 3 - ___main___ - BV1ED4y1R7RJ
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P9：讲座 8-1 作业 3 - ___main___ - BV1ED4y1R7RJ
- en: Hi there， this is Chris and this is a video on assignment three and I apologize
    for being。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 大家好，我是克里斯，这是一段关于第三次作业的视频，我很抱歉今天在课堂上没能讲解完。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_1.png)'
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_2.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_2.png)'
- en: late and I apologize that I didn't get to it in class today。 So assignment three
    is。 as the title says， everything about multi-processing。 So you're going to have
    to do lots of multi-processing here。 Specifically。 you're going to use fork and
    exec CVP and you're going to use weight PID。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 很晚了，我很抱歉今天没有在课堂上讲解这个内容。所以，第三次作业是的，标题上写着，关于多进程的一切。所以你将不得不做很多多进程的工作。特别是，你将使用`fork`和`execvp`，并且会使用`waitpid`。
- en: and you're going to use pipe and you're going to use dupe or probably dupe two
    as it turns。 out and all the different things that we've learned about in order
    to do four different， programs。 The first two are relatively minor and the third
    one and fourth one are a little bit。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 你将使用管道，并且你会使用`dup`或者可能是`dup2`，正如我们所学的所有内容，来执行四个不同的程序。前两个比较简单，第三个和第四个稍微复杂一点。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_4.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_4.png)'
- en: bigger。 So let's dig right in。 So the first assignment is pipeline。 the first
    part of the assignment is pipeline。 Now pipeline does the following。 Pipeline
    takes in two parameters that are basically command line arguments that include
    the program。 name as the first argument and then all of its arguments after that
    and then a second。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 更大。所以我们直接开始吧。第一个任务是管道。任务的第一部分是管道。现在管道做以下事情。管道接受两个参数，它们基本上是命令行参数，其中第一个参数是程序的名称，然后是所有其他参数，之后还有第二个。
- en: argument list that's the same thing。 So basically。 and then it takes in an array
    of PIDs which is empty when you start， this。 will be filled when the pipeline
    function returns and we'll have two PIDs in it that。 are the two PIDs for the
    two children that your pipeline is going to create。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 参数列表是相同的。所以基本上。然后它接受一个空的PID数组，开始时为空，管道函数返回时这个数组将被填充，我们会有两个PID，它们是管道将创建的两个子进程的PID。
- en: The first of which will send its standard output into the second one's standard
    input。 So what does that actually mean？ Well， what you're basically doing is you're
    setting up a system like the following。 Okay， let me pull up a terminal here and
    show you what's going on here。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个将其标准输出发送到第二个的标准输入。那么这实际上意味着什么呢？嗯，基本上你在设置一个如下所示的系统。好的，让我打开一个终端，给你展示这里发生了什么。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_6.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_6.png)'
- en: So you're basically setting up a two programs that will basically do the following。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你基本上是设置了两个程序，它们将执行以下操作。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_8.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_8.png)'
- en: Okay， if you do something like the following。 Let's see。 let's just say I have
    a test file about TXT and inside it I'll put some fruit， name。 BANNA and apple
    and donut which is not a fruit at all。 And let's put in cantaloupe and so you
    have these sorts of fruits and other things in， your list。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，如果你做类似以下的事情。让我们看看。假设我有一个名为`test file.txt`的文件，里面写着一些水果名称，香蕉、苹果和甜甜圈（这显然不是水果）。然后我们再加上哈密瓜，所以你会在列表中看到这些水果和其他东西。
- en: Okay， and that is test file。 Let's say we wanted to cat test file， in other
    words printed out。 right？ And we wanted to then pipe it through sort which would
    sort the words in the list。 So what's happening here？ Well， cat is taking the
    file and inputting from the file and outputting through standard。 out， if you
    just type cat test file then it prints out to the terminal which is standard，
    out。 Okay。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这就是测试文件。假设我们想要显示测试文件的内容，换句话说，打印出来，对吧？然后我们想把它通过管道传递给排序，这样就可以对列表中的单词进行排序。那么这里发生了什么？嗯，`cat`命令从文件中输入内容，并通过标准输出输出，如果你只输入`cat
    test file`，它会打印到终端，也就是标准输出。好的。
- en: this is important。 And then sort is taking input from standard in。 How do I
    know it's standard in？
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这很重要。然后`sort`命令从标准输入接收输入。我怎么知道它是标准输入呢？
- en: If I just type sort and start typing things， right？
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我只是输入排序并开始输入内容，对吧？
- en: And if I type and then these are standard in and it's just accepting this。 And
    when I do control D it will actually end the input and it will sort it。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我输入，然后这些是标准输入，它只是接受这个。当我按下控制+D时，它实际上会结束输入，并且它会对其进行排序。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_10.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_10.png)'
- en: Sort it will actually sort it。 So sort is taking standard input and printing
    it to standard output and cat is taking input。 from this file as it turns out
    and printing it to standard output。 Alright。 so what does that actually mean in
    terms of your pipeline file？
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`Sort` 它实际上会排序。所以 `sort` 是接受标准输入并将其打印到标准输出，而 `cat` 则是从文件中接受输入并打印到标准输出。好的，那么这在你的管道文件中到底意味着什么呢？'
- en: When you do cat test file dot txt pipe through sort the standard out of cat，
    standard out。 of cat becomes the standard in of sort。 And how do we do that？ Well，
    we have to do that via a pipe。 Okay， so you have to say basically you have to
    pipe the output of test file that our cat。 test file txt into sort。 Okay， in fact
    later in the next assignment you'll be able to do it through more pipes。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当你执行 `cat test file dot txt` 通过管道传递给 `sort` 时，`cat` 的标准输出成为 `sort` 的标准输入。那我们是怎么做到的呢？嗯，我们必须通过管道来实现。好的，你基本上需要把
    `test file` 这个文件通过 `cat` 传递的输出管道传递到 `sort`。好的，实际上在下一个作业中，你将能够通过更多的管道来实现这一点。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_12.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_12.png)'
- en: as well。 Basically standard out of cat becomes standard in of sort。 standard
    out of sort becomes standard， in for word count。 Okay。 now pipeline is only two
    of these but that's how it works。 Okay。 now let's talk a little bit more about
    the actual pipeline itself。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，基本上 `cat` 的标准输出成为 `sort` 的标准输入，`sort` 的标准输出成为 `word count` 的标准输入。好的，现在管道只有两个这样的操作，但它就是这样工作的。好的，现在让我们稍微谈谈实际管道的工作原理。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_14.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_14.png)'
- en: Well， remember what pipe does。 Okay， pipe when you say FDS when you have an
    array of file descriptors basically like。 this int FDS 2， you have a 2。 And then
    you do that pipe creates two file descriptors。 FDS 0 is the reader and FDS 1 is
    the writer。 Okay。 when you write into FDS 1 you can read that text from FDS 0。
    Okay。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 好了，记住管道的作用。好的，管道当你说 FDS，当你有一个文件描述符数组时，比如这个 `int FDS 2`，你有一个 2。然后你执行管道时，它会创建两个文件描述符。FDS
    0 是读者，FDS 1 是写入者。好的，当你写入 FDS 1 时，你可以从 FDS 0 中读取文本。好的。
- en: now let's talk just briefly about the example we had before。 We had cat file
    test。txt or whatever it was。 Okay， well that is going to need to redirect its
    standard out。 Okay。 and then we also have the sort， right？ Well， and sort needs
    its standard in redirected。 Okay。 so basically standard， and I should do it this
    way I guess， we should say that， standard out。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们简要谈一下之前的例子。我们有 `cat file test.txt` 或者它是什么的。好的，那么它需要重定向其标准输出。好的，然后我们也有 `sort`，对吧？那么
    `sort` 需要其标准输入被重定向。好的。所以基本上标准，我想我应该这么做，应该说，标准输出。
- en: so basically FDS 1 which is the writer， okay， okay， needs to be kind of。 translated
    to SD standard out for file test and FDS 0 needs to be translated to SD standard。
    in for sort。 Okay， that's really all there is to it。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以基本上，FDS 1，即写入者，好的，好的，需要被转化为标准输出文件测试，而 FDS 0 需要被转化为标准输入 `sort`。好的，这就是所有的操作。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_16.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_16.png)'
- en: This is not a long program。 There will be two forks in this file。 One to fork
    the first program and one to fork the second program and up third program， in
    this case。 One to fork let's say one to fork cat and then one to fork sort in
    this case。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个长程序。这个文件里会有两个分叉，一个是分叉第一个程序，另一个是分叉第二个程序，再加上第三个程序，在这个例子中。一个是分叉 `cat`，然后一个是分叉
    `sort`。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_18.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_18.png)'
- en: Okay， so that's how pipeline works。 All right， the next part of the assignment
    is subprocess。 Now subprocess is， this one is C++ by the way， so make sure you
    get your C++ going。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这就是管道的工作原理。好了，作业的下一部分是子进程。现在子进程是，顺便说一下，这是 C++，所以确保你准备好你的 C++ 环境。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_20.png)'
  id: totrans-31
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_20.png)'
- en: It feels a lot like C still but it is technically C++。 Now this uses a struct
    called subprocess_t and this subprocess basically function does。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它感觉还是像 C，但从技术上讲它是 C++。现在这个使用了一个名为 `subprocess_t` 的结构体，这个子进程基本上执行的功能是。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_22.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_22.png)'
- en: the following。 It， the subprocess function creates one executable and it。 in
    fact here is the definition for。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是它，子进程函数创建一个可执行文件，实际上这里是它的定义。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_24.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_24.png)'
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_25.png)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_25.png)'
- en: it， creates one executable which is the same as the pipeline one by the way，
    it has a list。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 它创建一个可执行文件，顺便提一下，它和管道中的那个是相同的，它有一个列表。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_27.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_27.png)'
- en: command list in an array。 And it has two booleans which say do I want to provide
    the supply child input or do I。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个数组中列出命令。它有两个布尔值，表示我是否想提供子进程的输入，或者我是否想……
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_29.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_29.png)'
- en: want to ingest the child output。 Okay， so in other words， if it's true。 I want
    to get return to me in the subprocess_t struct。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 想要获取子进程的输出。好的，换句话说，如果它为真。我想在 subprocess_t 结构体中返回给我。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_31.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_31.png)'
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_32.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_32.png)'
- en: a file descriptor which I am allowed to write to which will be input into the
    subprocess。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 一个我可以写入的文件描述符，这将作为输入提供给子进程。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_34.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_34.png)'
- en: into the child。 Okay， if I have true for the second or the third parameter actually。
    the ingest child， output。 Okay， basically this one says I'm going to get a file
    descriptor such that if I read。 from it it is whatever the child produced on standard
    out。 Okay。 it's whatever the child produced on standard out。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 进入子进程。好的，如果我为第二个或第三个参数设置为 true，实际上就是 ingest child 输出。好的，基本上这个意思是说，我将获取一个文件描述符，这样如果我从中读取，它就是子进程在标准输出上产生的内容。好的，它就是子进程在标准输出上产生的内容。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_36.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_36.png)'
- en: And that's how it works。 Okay， so it's kind of similar to the。 it's similar
    to the pipeline in the sense that you've， got a pipe here or at least one pipe。
    I've probably said too much already。 You need to handle such that you will be
    able to get back the file descriptor such that。 you can either write to that subprocess
    or you can read from it。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是它的工作原理。好的，所以它有点类似于管道。它在某种意义上类似于管道，你看，至少这里有一根管道。或许我已经说得太多了。你需要处理这种情况，以便能够获取文件描述符，这样你就可以向该子进程写入数据，或者从中读取数据。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_38.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_38.png)'
- en: Okay， so that's basically the big idea。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以这基本上就是大致的想法。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_40.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_40.png)'
- en: I'm not sure there's much else to tell you about that one。 So the next one is
    a little more difficult to kind of understand。 This is the trace function。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我不确定关于那个问题还有什么更多要告诉你的。所以下一个问题稍微难一些，稍微难以理解。这就是 trace 函数。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_42.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_42.png)'
- en: Now basically in some sense you are writing a little bit of a debugger。 Okay。
    you're writing a debugger that captures all system calls and reports the output
    of。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从某种意义上说，你基本上是在写一个小型的调试器。好吧，你正在编写一个捕获所有系统调用并报告输出的调试器。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_44.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_44.png)'
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_45.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_45.png)'
- en: those system calls or actually the， not necessarily the output， it reports the
    details of those。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这些系统调用，实际上，不一定是输出，它报告了这些系统调用的细节。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_47.png)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_47.png)'
- en: system calls to you。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 系统调用到你这里。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_49.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_49.png)'
- en: Okay， so if we had a function like this main function， okay， and we used the
    trace function。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，如果我们有像这个主函数这样的函数，好的，我们使用 trace 函数。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_51.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_51.png)'
- en: to do it。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 去做吧。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_53.png)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_53.png)'
- en: Well， what it does is it says， okay， first we got a syscall 59 and it returns
    a little。 term 0 and then we have a syscall 12 and it returns 1， 4， 4， 3， 4， 3，
    4。 And by the way。 some of these numbers will be different for you than in the
    assignment， handout here。 Okay。 don't worry about some of the numbers。 Some of
    them are going to be the same。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，它的作用是这样：首先我们得到了系统调用 59，它返回了一个小的值。然后我们得到了系统调用 12，它返回了 1，4，4，3，4，3，4。顺便说一句，某些数字可能与你在作业手册中看到的不同。好的，不用担心这些数字中的一些。它们中有些会是一样的。
- en: Some of them are going to be different and sanity check will ignore values that
    are different。 It will just look for a value and then ignore it if it's different。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有些数字会有所不同，理智检查会忽略不同的值。它会查找一个值，然后如果值不同，就会忽略它。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_55.png)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_55.png)'
- en: Okay， and then there's lots of other things to happen and then we get a bunch
    more syscalls， here。 And then finally we get a syscall 231 here that does not
    return anything and then the。 program exits。 And that should be the output of
    your trace。 Okay， so again。 trace captures all the system calls from a program
    that it runs and it reports。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，然后有很多其他事情发生，接着我们会得到更多的系统调用，在这里。然后最后我们得到一个没有返回任何东西的系统调用 231，接着程序退出。这应该是你跟踪的输出。好的，所以再次强调。跟踪捕捉程序运行中所有的系统调用并报告。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_57.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_57.png)'
- en: those to you。 Okay， so it's an interesting way to see all the different system
    calls that your program。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 这些给你。好的，这是一个有趣的方式，可以查看程序中的所有不同系统调用。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_59.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_59.png)'
- en: is making。 In fact， there's more than you might think， right？
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 它所做的。事实上，比你想象的还要多，对吧？
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_61.png)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_61.png)'
- en: There's lots of different system calls for things here。 Some are by the way
    for opening and writing and closing and reading and closing and so。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有很多不同的系统调用。顺便提一下，有些是用来打开、写入、关闭、读取、关闭等操作的。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_63.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_63.png)'
- en: forth。 There's also a lot of other ones happening as well。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 等等。还有很多其他的也在发生。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_65.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_65.png)'
- en: Okay， that is the simple trace by the way。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，顺便说一下，这是简单的跟踪。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_67.png)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_67.png)'
- en: Then we have a full trace where it gives you much more information about that。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们有一个完整的跟踪，它会提供更多关于它的信息。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_69.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_69.png)'
- en: Okay， about the actual system calls。 Okay， it doesn't just say what the system
    calls are。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，关于实际的系统调用。好的，它不仅仅是说系统调用是什么。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_71.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_71.png)'
- en: It says syscall it actually says specifically which system call it is。 And you
    have to look this up in a map。 And in fact。 I think there's two maps here that
    you have to utilize to look the information， up。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 它说是系统调用，实际上它明确指出了是哪个系统调用。你需要在映射表中查找这个信息。事实上，我认为这里有两个映射表，你需要利用它们来查找信息。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_73.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_73.png)'
- en: Okay， there's also an error map as well that you have to look up。 So there's
    a few different maps here that you have to wrap your head around to get that。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，还有一个错误映射表，你需要查找它。所以这里有几个不同的映射表，你需要理解它们，才能搞明白。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_75.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_75.png)'
- en: Okay， trace is definitely more challenging because it has a lot more going on。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，跟踪（trace）肯定更具挑战性，因为它涉及的内容更多。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_77.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_77.png)'
- en: And so make sure you read through a lot of this here。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 所以确保你通读这一部分内容。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_79.png)'
  id: totrans-91
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_79.png)'
- en: The big thing to understand is a little bit anyway is how ptrace works。 ptrace
    is another system call and it allows a program to make another program stop at。
    various points， particularly after system calls and so forth。 And it allows it
    to capture that information。
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 要理解的关键是了解 `ptrace` 如何工作。`ptrace` 是另一个系统调用，它允许一个程序让另一个程序在特定点停下，特别是在系统调用之后等等。它允许捕捉这些信息。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_81.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_81.png)'
- en: Okay， so we give you a kind of a basic one that doesn't do much in the starter
    code。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们给了你一个基础的代码示例，它不会做太多事情。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_83.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_83.png)'
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_84.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_84.png)'
- en: Make sure you read through all the header files and make sure you understand
    the actual。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你阅读所有的头文件，并确保你理解实际的内容。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_86.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_86.png)'
- en: maps and things that we'll talk about in a few minutes。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 映射表和一些我们稍后会讨论的内容。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_88.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_88.png)'
- en: The initial starter code basically ignores a lot of things and then it ignores
    kind of。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 初始的代码示例基本上忽略了很多内容，然后它也忽略了一些。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_90.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_90.png)'
- en: the simple and rebuild and then it ends up using this process command line flags
    to actually。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的重建过程，最后它使用这个进程命令行标志来实际操作。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_92.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_92.png)'
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_93.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_93.png)'
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_94.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_94.png)'
- en: run the trace itself or actual well process and then it runs the trace based
    on those。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 执行追踪本身或者说实际的进程，然后根据这些内容执行追踪。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_96.png)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_96.png)'
- en: Okay， we in this case we fork off a child which is the name of the program that
    you've。
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，在这种情况下，我们会派生出一个子进程，这个子进程的名字就是你所指定的程序。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_98.png)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_98.png)'
- en: actually asked it to trace through。 And then it calls ptrace on ptrace trace
    me which basically says。 "Hey， I'm about to。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，它要求进行追踪。然后它调用ptrace中的ptrace trace me，这基本上是在说：“嘿，我马上要……”
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_100.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_100.png)'
- en: trace you。"， And then it raises a signal stop on itself。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 追踪你。然后它会在自身上引发一个停止信号。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_102.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_102.png)'
- en: So remember this is in the child and it starts the child running and then stops
    it。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 所以记住，这是在子进程中，它开始运行子进程然后暂停它。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_104.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_104.png)'
- en: Why？ Because we're in the process of tracing it so it's kind of like a debugger
    where it runs。 maybe one line and stops。 In this case it runs a couple lines of
    the actual or it stops it before it actually runs。 the program that we're trying
    to do。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为什么？因为我们正在追踪它，实际上它就像一个调试器，运行一行代码后暂停。在这种情况下，它会执行几行实际代码，或者在它真正执行之前暂停，我们要执行的程序。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_106.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_106.png)'
- en: Okay， why？ Because we still need to set some things up in the parent。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，为什么？因为我们仍然需要在父进程中设置一些内容。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_108.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_108.png)'
- en: Okay， so you can read through this about how it actually does its thing here。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，你可以阅读这部分内容，了解它是如何执行的。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_110.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_110.png)'
- en: Okay。 And then the tracer itself has to basically run a weight PID and another
    ptrace here to。 say what happens when the child actually stops。 So in this case
    when we do weight PID in this case well it ends up returning the PID of the。 child
    process that just stopped。 And so we know what the PID is and so forth。 Okay。
    And then it says， "Well yes it actually stopped。"。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，然后追踪器本身基本上需要运行一个`wait PID`，并且在这里再调用一次ptrace。就是说，当子进程实际上停止时会发生什么。所以，在这种情况下，当我们执行`wait
    PID`时，它最终返回的是刚刚停止的子进程的PID。这样我们就知道了PID等等。好的，然后它说：“是的，它确实停止了。”
- en: And then it sets some more tracing ability on the actual child process。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 然后它会在实际的子进程上设置更多的追踪能力。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_112.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_112.png)'
- en: Okay。 All right。 And then what do we have？ We have the。 this is basically a
    wild true loop that goes through and for the basic one。 anyway just keeps the
    program running okay until it gets to a system call。 All right。 And then that's
    what this does。 It says ptrace， ptrace until a system call and then wait until
    the function gets to it。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。好的，然后我们得到什么？基本上这是一个`while true`循环，它会不断执行，直到程序执行到一个系统调用。好的，然后这就是它的作用。它说ptrace，ptrace，直到遇到系统调用，然后等待直到函数执行到它。
- en: or the program gets to a system call and that's that。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 或者程序达到一个系统调用，然后就停止了。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_114.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_114.png)'
- en: Okay。 And you can read down through all the details of this as well。 A couple
    interesting things are that you need to find the opcode which is in percent。 RAX
    which is one of the registers as you know from 107。 107 E folks， RAX is one of
    the registers。 It's kind of like R0。 And then you end up getting the details of
    that register which by the way lives in the。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，你也可以查看这个过程的所有细节。有几个有趣的地方，你需要找到操作码，它在百分号后面。RAX是其中一个寄存器，正如你在107中知道的，107 E的朋友们，RAX就是其中一个寄存器，类似于R0。然后你会得到该寄存器的详细信息，顺便提一下，它位于……
- en: child process with another command called ptrace or with ptrace peak user。 This
    is reading the information from the actual program itself。 Okay。 That's where
    it stores that opcode。 Okay。 And then you have to do a couple of other things
    where you flush and so forth。 Okay。 And now you need to do another loop where
    you actually go ahead and print out the return。
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 使用另一个命令 ptrace 或 ptrace peak user 来处理子进程。这是在从实际程序本身读取信息。好的。那就是它存储操作码的地方。好的。然后你还需要做一些其他操作，如刷新等。好的。接下来你需要进行另一个循环，实际去打印返回值。
- en: value which you have to do by another ptrace function。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须通过另一个 ptrace 函数来获取该值。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_116.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_116.png)'
- en: Okay。 All of this is written for you。 Okay。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。这一切已经为你写好了。好的。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_118.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_118.png)'
- en: And what you're going to do is you are going to modify it to actually get more
    details out。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 你将修改它，以实际获取更多的细节。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_120.png)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_120.png)'
- en: of it。 Okay。 So you need to change trace。CC to support simple mode and print
    out these details like this。 Again， this one's not getting the names or using
    those maps at all。 It's just saying look a system call happened and the number
    was one here was the return。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 这样。所以你需要修改 trace.CC 以支持简单模式并打印出这些细节。再次提醒，这个没有获取名称或使用那些映射。它只是显示“系统调用发生了，号码是1，返回是这个。”
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_122.png)'
  id: totrans-138
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_122.png)'
- en: value。 Okay。 And that's what it was。 And then program exit。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 值。好的。就是这样。然后程序退出。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_124.png)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_124.png)'
- en: In fact there should be a new line right in there。 I have to fix the output
    here。
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，应该在这里加个新行。我得修复输出。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_126.png)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_126.png)'
- en: Okay。 All right， there's the words of wisdom and for the simple trace。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。好了，这就是智慧之言，简单跟踪的部分。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_128.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_128.png)'
- en: And again don't worry about the details of the numbers。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，别担心数字的细节。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_130.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_130.png)'
- en: They will， they're important but they're not specific。 Like they'll be different
    on different times through the program。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 它们很重要，但并不特定。比如它们在程序的不同阶段会有所不同。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_132.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_132.png)'
- en: Okay。 Then you have to go for full mode。 And full mode is basically the same
    idea。 Okay。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。然后你需要进行完整模式。完整模式基本上是相同的思路。好的。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_134.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_134.png)'
- en: Again， I have a missing new line here。 I'll have to fix that。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，这里我缺少一个换行符，我需要修复它。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_136.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_136.png)'
- en: It has a， it's basically the same idea except now you have to get the actual
    details of。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 它基本上是相同的思路，只是现在你需要获取实际的细节。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_138.png)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_138.png)'
- en: the， what function call it is。 And this is where you're going to read through
    the maps that get the error number and get。 the actual names of all the function
    calls。 We've actually pulled those from some header files but we've given those
    those details to。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 它是什么函数调用。这就是你要通过这些映射来获取错误号，并获取所有函数调用的实际名称的地方。我们实际上从一些头文件中提取了这些信息，但我们也将这些细节提供给了你。
- en: you。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 你。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_140.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_140.png)'
- en: Okay。 All right。 Let's see。 How do you actually get the argument， the argument
    list？ Another map。 So these are all the little maps you have to read through。
    I'll let you read the details of all of those there。
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。好了，来看一下。你如何获取参数列表呢？另一个映射。所以这些是你需要读取的所有小映射。我会让你自己阅读所有这些细节。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_142.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_142.png)'
- en: Okay。 This is pretty specific。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。这非常具体。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_144.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_144.png)'
- en: Again， I don't want to necessarily go through all the details because it's all
    written out。 for you here。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，我不想一定要讲解所有细节，因为这一切都已经写好，给你了。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_146.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_146.png)'
- en: But it's a matter of knowing the maps and knowing how to read through them。
    And actually get those details。 Okay。 All right。
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 但这其实是了解映射并知道如何读取它们，进而获取这些细节的问题。好的。好了。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_148.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_148.png)'
- en: It's more output here。 And again， we've talked a little bit about ptrace as
    you go through here。 The maps。 Here's where it talks about the different maps
    here that you have to use for getting。 the system call names and the error messages
    and so forth。 Okay。 Again。 lots of details here that you have to read through。
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 这是更多的输出。再次提醒，我们在这里讲解过 ptrace。这里谈到的是你需要使用的不同映射，获取系统调用名称、错误信息等。好吧。再次强调，这里有很多细节需要你仔细阅读。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_150.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_150.png)'
- en: Okay。 So basically， what's the takeaway on this？
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧。那么，究竟我们能从中得到什么结论呢？
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_152.png)'
  id: totrans-169
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_152.png)'
- en: This is one of the harder parts of this assignment。 I think it's challenging
    mainly because there's a lot going on and there's a lot of things。 like reading
    memory from another program through registers that seems tricky。
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 这是这个作业中较为困难的部分之一。我认为这主要是因为有很多事情在发生，而且有很多事情需要做。比如通过寄存器从另一个程序读取内存，这看起来很棘手。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_154.png)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_154.png)'
- en: And it's not easy， but it's not too too bad when you actually go and dig into
    the details。
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不容易，但当你真正深入细节时，发现它也不是太难。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_156.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_156.png)'
- en: Again， feel free to ask questions on Piazza come to us hours。 It will help you
    out if you have trouble understanding what you're trying to do。 Okay。 So the final
    part of assignment three is kind of a cool program called farm， which is basically。
    going to use all the cores on a particular myth machine to factor numbers for
    you。 Okay。
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，如果有任何问题，随时在 Piazza 上提问，或者来我们的答疑时间。如果你在理解你需要做的事情时遇到困难，我们会帮助你。好吧。第三个作业的最后部分是一个很酷的程序，叫做
    farm，它基本上会利用特定 Myth 机器上的所有核心来为你进行因式分解。好吧。
- en: And there's going to be all sorts of processes that you're going to launch onto
    the various。 processors of the myth machines。 And they are going to wait for your
    program to feed them numbers and they are going to。
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 会有各种各样的进程，你会把它们启动到 Myth 机器的不同处理器上。它们会等待你的程序提供数字，然后它们将开始处理这些数字。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_158.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_158.png)'
- en: factor those numbers。 Okay。 So here's how it actually works。
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 进行因式分解这些数字。好吧。现在我们来看看它是如何工作的。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_160.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_160.png)'
- en: Take a look at this Python program。 Now the actual factoring is going to be
    done by a Python program。 You don't really need to understand Python necessarily。
    It's although it's a fairly easy program here to understand。 But basically this
    Python program checks the command line arguments and see if it's self-haulting。
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 看一下这个 Python 程序。实际上，因式分解将由一个 Python 程序来完成。你不一定需要理解 Python，尽管这个程序很容易理解。但基本上，这个
    Python 程序会检查命令行参数，看看它是否是自我暂停的。
- en: or not。 And then it is self-haulting as it turns out when we run it。 And it
    is going to get its own PID。 And then it's going to go through this while loop。
    And in the while loop， the first thing it's going to do is it's going to stop
    itself。 In other words， it's going to pause itself to wait for input from your
    program。 Okay。
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 或者不。然后它会自我暂停，结果就是在运行时它会停下来。它会获得自己的 PID。然后它会进入这个 while 循环。在 while 循环中，它首先做的事情是，它会停止自己。换句话说，它会暂停自己，等待来自你程序的输入。好吧。
- en: so it's going to be a farm of all these different processes that are waiting
    for。 input from you as the coordinating process from your parent as it turns out。
    Okay。 Once your program continues this Python program， it is going to read in
    a number。 Okay。 And it's going to read the number and then start a timer immediately
    because we want a。
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这将是一个处理各种不同过程的“农场”，这些过程会等待来自你作为协调进程的输入，来自你的父进程，结果就是这样。好吧。一旦你的程序继续执行这个 Python
    程序，它将会读取一个数字。好吧。然后它会读取数字并立即启动一个计时器，因为我们需要一个计时器。
- en: time how long it takes to factor these。 And it's going to actually factor it。
    Then it is going to stop the timer。 And then it is going to print out the factorization。
    Okay。 And then it's going to continue back in the while loop and wait for another
    number。 Eventually you will close the input that you are sending to this Python
    program at which。
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 计时器将记录它因因式分解这些数字所花费的时间。然后它会实际进行因式分解。接着它会停止计时器，并打印出因式分解结果。好吧。然后它会继续回到 while 循环，等待下一个数字。最终，你将关闭发送给这个
    Python 程序的输入。
- en: point it will close the actual Python program。 Okay。
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 到那时，它会关闭实际的 Python 程序。好的。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_162.png)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_162.png)'
- en: So that's how the Python program does it。 It's the one doing the factoring。
    Okay。
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这就是 Python 程序是如何处理的。它是执行分解的部分。好的。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_164.png)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_164.png)'
- en: So what do you have to do for this？ Well this is how it works。 You say something
    like print F 1357 new line 13， works。
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 那么你需要为此做什么呢？这就是它的工作原理。你可以说类似 `print F 1357` 换行符 13，工作。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_166.png)'
  id: totrans-188
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_166.png)'
- en: Then you can send the kill system call which basically remember it doesn't necessarily，
    kill it。 It actually continues it。
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以发送 kill 系统调用，基本上记住它不一定会杀死它。它实际上会继续运行。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_168.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_168.png)'
- en: And then the number you want to actually factor gets printed out here and it
    tells you。 how long it takes and so forth。
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你想要实际分解的数字会在这里打印出来，并告诉你需要多少时间，等等。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_170.png)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_170.png)'
- en: Okay。 So that's how the actual Python program works。 Okay。 This factorization
    is not a fast factorization。
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。那么这就是实际的 Python 程序是如何工作的。好的，这个分解方法并不是一个快速的分解方法。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_172.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_172.png)'
- en: You will see that when you this is actually good for testing because you can
    test and see。 how long it takes to do these things。
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 你会看到，当你这样做时，这实际上适合测试，因为你可以测试并查看这些操作需要多长时间。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_174.png)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_174.png)'
- en: It's not not fast which is good。 Okay。 Your job is to write a program that runs
    on the myths and spawns several what we call。 workers one for each core and then
    of the self halting factor and then sends numbers。 to that program to be factored。
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 它并不快，这很好。好的，你的任务是编写一个程序，它运行在神话系统上，并生成多个我们所称为的 worker，每个核心一个，然后执行自我停止的分解任务，并将数字传送到该程序进行分解。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_176.png)'
  id: totrans-198
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_176.png)'
- en: Okay。 So here's how it might work。 You might say time print F and then this
    long string separated by new line number separated。 by new lines and then send
    it into farm。 It says if you typed those numbers on the standard in by the way
    and then it should say。
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。这就是它可能的工作方式。你可能会说 `time print F` 然后是这个长字符串，通过换行符分隔的数字，然后把它传送到 farm。顺便说一下，它会说你在标准输入中输入了那些数字，然后它应该会显示。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_178.png)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_178.png)'
- en: how many CPUs there are。 It should number the knowledge and send all the workers
    on different CPUs and then it should。 start factoring them。 Okay。 And it will
    factor all those numbers one and each core as it turns out and it will take。 about
    the same amount of time for each one but the total time is only going to be the。
    basically the time you want because they're all happening in parallel。
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该会显示有多少个 CPU。它应该对知识进行编号，并将所有 worker 分配到不同的 CPU 上，然后它应该开始进行分解。好的。它会分解所有这些数字，每个核心一个，事实证明，它会花差不多相同的时间，但总的时间只会是你想要的时间，因为它们都在并行运行。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_180.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_180.png)'
- en: Okay。 So that's the basic idea。 Of course there is a struct here that you have
    to understand called worker。 Okay。 And there's a let's see worker has a it is
    a C plus plus struct by the way so it has things。 like constructors in it。 So
    it's got a constructor that takes in an argument and the arguments for the constructor。
    are the parameters that end up getting processed for the constructor。
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。那么这就是基本的思路。当然，这里有一个结构体你需要理解，叫做 worker。好的。然后我们来看看，worker 是一个 C++ 结构体，顺便说一下，它有构造函数之类的东西。所以它有一个构造函数，它接受一个参数，构造函数的参数就是最终要处理的参数。
- en: It basically sets sp to be this guess what that's a subprocess which is from
    your other。 program and then it immediately sets it to be not available and it
    only becomes available。 when you actually allow it to become available you see
    that later。 Okay。 And then it has the two variables that it has inside the struct。
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 它基本上将 sp 设置为这个猜测，事实上，那是一个子进程，来自你的其他程序，然后它立刻将其设置为不可用，只有在你允许它变得可用时，它才会变得可用，你稍后会看到这一点。好的。然后它包含了它在结构体内部的两个变量。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_182.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_182.png)'
- en: Okay。 All right。 And there's a couple other constants in here and then in mean
    what we do is we have a signal。
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，明白了。这里还有一些其他常量，然后我们所做的是有一个信号。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_184.png)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_184.png)'
- en: okay which is SIGCHILD and mark workers is available。 Remember SIGCHILD gets
    SIGCHILD actually gets called or rather the signal handler for SIGCHILD。
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，SIGCHILD信号以及标记工人是否可用。记住，SIGCHILD信号会被触发，或者更确切地说，SIGCHILD的信号处理程序会被调用。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_186.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_186.png)'
- en: gets called when the your process continues or stops or halts。
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的进程继续、停止或暂停时，**该方法会被调用**。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_188.png)'
  id: totrans-211
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_188.png)'
- en: Okay。 All right。 And then you're going to spawn all the workers you're going
    to actually launch them all then。 you're going to send all the workers all the
    numbers to those workers then you're going。 to wait for them all to be done and
    then you're going to close them all。
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。好的。那么你将会生成所有工人进程，你会启动它们，然后将所有数字发送给这些工人，然后你会等待它们全部完成，最后关闭所有工人进程。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_190.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_190.png)'
- en: Okay。 That's the basic idea of this program。
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。这就是这个程序的基本思路。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_192.png)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_192.png)'
- en: Okay。 So you can read all the details about this as far as what is responsible
    what you're responsible。
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。你可以阅读所有这些细节，了解你负责的内容。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_194.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_194.png)'
- en: for there。 Okay。 But basically we have we've implanted a little bit of some
    of these things most of this in。 here to actually broadcast the numbers to workers。
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。基本上，我们已经实现了一些这些功能，主要是用来广播数字给工人进程的。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_196.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_196.png)'
- en: You have to write a couple more lines of code down here and basically this just
    kind of。
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在这里再写几行代码，基本上就是这些。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_198.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_198.png)'
- en: sets it up so that you can send the numbers to the to the workers。
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 它将会设置好，使你能够将数字发送给工人进程。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_200.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_200.png)'
- en: Okay。 And you also should make sure that you send you have a close all workers
    routine that sends。 that stops all those programs。 Remember how do you stop those
    Python programs you close the file that they are reading in。 from。 Okay。 So it's
    if you can control D on the command line or if it was reading from a file in the。
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。你还需要确保你有一个关闭所有工人进程的例程，用来停止所有这些程序。记住，你怎么停止这些Python程序呢？你可以通过关闭它们读取的文件来停止。好的，所以，如果你在命令行上按Ctrl+D，或者如果它们是从文件中读取的。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_202.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_202.png)'
- en: file ended。 Okay。
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 文件结束。好的。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_204.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_204.png)'
- en: All right。 So that's basically it。 We give you some details about farm here
    but for the most part got the main function you。
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。所以基本上就是这样。我们在这里给你提供一些关于农场的细节，但大部分情况下，你已经掌握了主要功能。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_206.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_206.png)'
- en: have to implement these functions here。
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要在这里实现这些功能。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_208.png)'
  id: totrans-231
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_208.png)'
- en: Okay。 Mark workers will be able to implement spawn all workers broadcast numbers
    to work with。 wait for all workers and close all workers。 Okay。 The basic idea
    is send all of these numbers to a bunch of Python processes that are waiting。
    for you to send them numbers。 All right。 That should do it。 Thanks。 And again。
    put your questions on Piazza or stop by office hours。
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 好的。标记工人将能够实现：生成所有工人、广播数字给工人、等待所有工人完成并关闭所有工人。基本思路是将所有这些数字发送给一堆正在等待的Python进程，让它们处理。好了，这样就完成了。谢谢大家。如果有问题，可以把问题发到Piazza上，或者在办公时间来找我。
- en: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_210.png)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4aaf83bd6fe015b6bc46385fddf81dff_210.png)'
- en: Thanks。 you。
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 谢谢你。
