- en: P1：Lecture 1 What is an Operating System - RubatoTheEmber - BV1L541117gr
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P1：第 1 讲 操作系统是什么 - RubatoTheEmber - BV1L541117gr
- en: Okay， well， welcome everybody to 162。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，欢迎大家来到 162。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_1.png)'
- en: I'm one of the lecturers this term and Anthony Joseph。 We'll hear from a little
    bit later is also one。 And it's unfortunate that we have to start off the term
    virtually。 But I guess that's the way it is。 So we will become a in person as
    soon as we can。 So， anyway。 let's go ahead。 For those of you that want to ask
    questions throughout the lecture。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我是这学期的讲师之一，稍后 Anthony Joseph 也会发言。我们很遗憾必须以虚拟的方式开始学期，但这就是现状。我们会尽快转为面对面授课。那么，话不多说。对于那些在讲座中有问题的人，可以随时提问。
- en: please put them in， the chat and I'll keep my eye on chat。 That way we make
    things work out properly。 But anyway， so welcome to CS162。 Let's talk a little
    bit about what we're going to do today。 We're going to talk about what an operating
    system is and what it's not。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 请把问题放在聊天框里，我会留意聊天。这么一来，我们就能确保一切正常进行。无论如何，欢迎来到 CS162。今天我们会聊一聊我们要做的事情。我们将讨论什么是操作系统，什么不是操作系统。
- en: And we're going to hopefully convince you why operating systems are so exciting
    to study。 And of course， we'll say something about how the class operates as well。
    And interaction here is important。 It is something that we try to encourage。 It's
    a little harder on Zoom and maybe it's a little harder on the first day where
    we're。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望能说服你们，为什么操作系统是如此令人兴奋的学习内容。当然，我们也会说一下这门课的运作方式。互动很重要，这是我们鼓励的。虽然在 Zoom 上有点难，特别是在第一天，大家都还在适应。
- en: kind of popping through what materials we're covering。 But especially when we
    get back in person。 I'm going to be encouraging and Anthony will， be encouraging
    as well。 You'd all ask questions。 Okay。 So let's start by this particular image
    here， which is already 20 years old。 A newer version would be even more crazy。
    But does anybody have any idea what this is？ Yeah。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们大致回顾一下我们将要涵盖的材料。但特别是当我们回到面对面授课时，我会鼓励大家，Anthony 也会鼓励大家。你们都可以提出问题。好了，我们从这张已经有
    20 年历史的图片开始。一个更新版的图片可能会更加疯狂。但有谁知道这是什么吗？是的。
- en: if you look carefully， you see that it says the internet， right？
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你仔细看，会看到它写着“互联网”，对吧？
- en: And so what's interesting is one could very easily argue that the internet is
    one of the。 greatest artifacts ever put together of human civilization。 And the
    reason for that is it basically ties together computer components throughout the。
    world into one huge system。 And as a result， the level of complexity there starts
    to lead to all sorts of interesting。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的是，人们可以很容易地认为，互联网是人类文明中最伟大的成果之一。其原因在于，它基本上将全球的计算机组件连接成了一个庞大的系统。因此，复杂度开始带来各种有趣的现象。
- en: emergent behaviors， which we'll talk about a little bit as we go on， but also
    obviously。 security concerns as well。 So the internet is really astonishing when
    you think about it。 It's basically all of these cars and phones and cloud computing
    and so on all tied together。 in one huge system and all of the people of course
    come with it。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这种新兴的行为，我们稍后会谈到，但显然，安全问题也是其中的一部分。所以，当你思考互联网时，它真的令人惊讶。它基本上将这些汽车、手机、云计算等所有东西联系在一个庞大的系统中，而所有的人当然也包括其中。
- en: And if you were to actually plot the number of people and number of IP addresses
    over time。 it's been growing essentially in this exponential form forever since
    the beginning， right？
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你真的绘制出随着时间推移的人数和 IP 地址的数量，会发现它基本上一直是以这种指数形式增长的，从一开始就是这样，对吧？
- en: 1995 or whatever， beginning of the web。 And it seems that it is going to only
    saturate when everybody has at least one internet address。 but probably many others。
    And of course， you're all probably well aware of IPv4。 which is the 32-bit address
    space， has been essentially saturated for a long time and IPv6 may finally be
    coming around。 But that may be a topic for another day。 So the other thing is
    that we have this huge system across the whole globe。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 1995 年左右，或者说是网络的起点。看起来，互联网地址将只有在每个人至少拥有一个地址时才会饱和，可能还会有很多个地址。当然，你们可能已经很熟悉 IPv4，这个
    32 位地址空间，实际上早已达到饱和状态，而 IPv6 可能终于会普及。这个话题可能是另一节课的内容。另一个值得注意的是，全球范围内有这个庞大的系统。
- en: lots of components， in it， but we also have an incredible diversity of different
    things， right？
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 它包含了许多组件，但我们也拥有各种不同的元素，对吧？
- en: We've got everything from mainframes to workstations to PCs and so on。 And this
    general trend has been very interesting。 It's been that we started out with kind
    of computers per person here。 like one computer， to a million people。 And we're
    now in the number of computers per person being。 you know， hundreds or thousands，
    for each person。 So that's sometimes called the internet of things where you have
    sensors in your cars。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们涵盖了从大型机到工作站，再到个人电脑等所有设备。这个普遍的趋势非常有趣。我们从每人一台计算机的情况开始，到现在每个人可能拥有数百或数千台计算机。所以，这有时被称为物联网，指的是你车上的传感器等。
- en: and in your walls and so on。 And this has really been an incredible change over
    the last couple of decades to the point。 now where， you know， we're not even aware
    of all of the things that are out there that。 are on the internet and monitoring
    us， which kind of leads to all sorts of privacy concerns。 But this astonishing
    curve on the sort of a log-linear scale moving downward in size is。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 还有你家中的墙壁等等。这在过去几十年里发生了令人难以置信的变化，现在我们甚至没有意识到互联网上的所有东西，它们在监控我们，这引发了各种隐私问题。但是，这个令人震惊的曲线，在对数线性尺度上向下移动的趋势，。
- en: something that often isn't pointed out to people when they're talking about
    how rapidly。 things are growing。 And there's a time scale range that's also astonishing
    as well， right？
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当人们谈论事物增长的速度时，这一点常常没有被指出。而且，时间尺度的范围也是令人吃惊的，对吧？
- en: Everything from CAF references in the half nanoseconds or picosecond range all
    the way。 up into times in milliseconds to send things across the globe and even
    seconds in some， instances。 And that wide range is something that， you know， the
    operating system ultimately， which。 is the top of this class， is going to have
    to deal with。 And so that's also very interesting。 Okay。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 从半纳秒或皮秒级别的CAF引用，到跨越全球传输所需的毫秒，甚至在某些情况下是秒级时间。这么广泛的时间范围，最终操作系统，作为这门课程的核心，将不得不处理这些问题。所以这也非常有趣。好的。
- en: so we're in a very exciting time frame now and you guys obviously pick the right。
    class to study this。 The operating system itself are really at the heart of all
    of this。 So they basically take all of these incredible advances。 I was showing
    you lots of little things。 many things， even also some very big things， all， tied
    together into one big system。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们现在正处于一个非常激动人心的时代，显然你们选了正确的课程来学习这个。操作系统本身正是这一切的核心。因此，它们基本上把所有这些令人难以置信的进步，我刚才展示给你们的那些小东西，许多东西，甚至一些非常大的东西，都整合成一个完整的系统。
- en: And it's really the operating system that makes us all manageable。 Because if
    it wasn't here。 you wouldn't actually be able to use these things。 Okay， and the
    operating system。 as we're going to learn over the term， pretty much provides。
    consistent abstractions to applications and programmers， even though the hardware
    is varying。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 正是操作系统让我们能够管理这一切。因为如果没有它，你实际上是无法使用这些东西的。好的，而操作系统，正如我们在本学期将要学习的，它几乎为应用程序和程序员提供了统一的抽象，尽管硬件各不相同。
- en: widely。 It allows you to manage resources that are shared among multiple applications
    and also。 deal with security concerns。 And some of the key building blocks。 which
    we're going to talk a lot about over the term， are things like processes， threads。
    concurrency， scheduling， coordination， all of these things， address spaces， protection，
    security。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 它被广泛应用。它使你能够管理在多个应用程序之间共享的资源，同时还能够处理安全问题。而一些关键的构建模块，我们将在本学期深入讨论的内容，诸如进程、线程、并发、调度、协调、所有这些内容、地址空间、保护和安全等。
- en: things that you've heard probably as words but haven't。 really had an in-depth
    understanding of what they really meant and how they were implemented。 And what's
    kind of exciting about this class for me is， since we're going to be working。
    with a real operating system， we'll get into this later in modifying a real operating
    system。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些你可能听过的词汇，你可能并没有深入理解它们真正的含义以及它们是如何实现的。对我来说，这门课程的一个令人兴奋的地方是，由于我们将与一个真实的操作系统一起工作，稍后我们会修改一个真正的操作系统。
- en: you get an up close and personal view of how all of these building blocks actually
    get。 implemented and then， of course， how they all tie together。 Okay。 So， for
    instance。 here's something you do every day。 You take your cell phone and you
    search for something。 Okay。 that's pretty common。 And however， what's happening
    under the covers。 Well， what's happening is。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 你会近距离观察到这些构建模块如何实际被实现，然后，当然，如何将它们整合在一起。好了，举个例子，你每天都做的事情。你拿出手机，搜索一些内容。好的，这很常见。然而，背后发生了什么呢？其实，发生的是：
- en: for instance， the cell phone reaches out to DNS services that， are hierarchical。
    so there may be many servers that are connected to get a response。 And what that
    does is it turns your human readable name of the service into an IP address。 which
    then can be used to route hop hop hop over the internet to somewhere which might。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，手机会连接到DNS服务，DNS是层级化的，因此可能有多个服务器连接以获取响应。它的作用是将你可读的人类服务名称转化为IP地址，之后可以用来通过互联网不断跳转到某个地方。
- en: be a data center and you're going to hit a load balancer at the entry point。
    And under the covers。 totally unaware to you that load balancer is then going
    to pick。 the next hop in which to forward this information。 And then maybe there's
    some customized servers that are busy performing your search or finding。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 可能是一个数据中心，你将在入口点遇到负载均衡器。你完全没有意识到，负载均衡器会选择下一个跳点来转发这个信息。然后，也许有一些定制的服务器在忙于执行你的搜索或寻找信息。
- en: out that information you're interested in。 And there's probably some ads that
    are being generated and other compositing that's happening。 on the final web page
    to create a result that includes your results， maybe some ads， which。 then get
    forwarded back along that same path， typically along the internet back to the
    cell， phone。 And so that very simple thing that you take advantage of every day
    actually has a lot of。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 找到你感兴趣的信息。可能会生成一些广告，并且其他的合成也会发生在最终网页上，生成一个包含你结果的页面，也许还有一些广告，然后这些结果会通过同样的路径回传，通常是通过互联网返回到手机。这件你每天都会利用的简单事情，实际上有很多非常有趣的环节。
- en: really interesting pieces。 And sometimes when I think too much in depth about
    what's going on。 I'm astonished that， it all works。 And I think getting a sense
    of wonder as we get through this term that all of the things。 that have to work
    together to actually get your queries to work properly or other more。 interesting
    things as we talk out through the net， I hope you'll get a little bit of。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，当我过于深入地思考发生了什么时，我会感到震惊，所有的东西竟然能正常运作。我认为，随着我们深入探讨这些内容，了解所有这些必须协调工作的事情以便你的查询能正常工作，或是其他更有趣的内容时，我希望你能感受到一些惊奇。
- en: wonder out of this as well。 I love systems and I think that the fact that a
    big system like this can actually function。 is amazing。 And I'll be hoping that
    Anthony and I can give you a bit of a flavor as to how that actually。 even happens。
    So what is an operating system？ Well。 it's not entirely clear to everybody exactly
    what it is。 And what do I mean by that？ I mean。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 我也从中感到惊奇。我喜欢系统，并且我认为像这样的一个大系统能够正常运作，实在是太神奇了。我希望安东尼和我能给你一些关于它如何运作的感觉。那么，操作系统是什么呢？嗯，这并不是每个人都能清楚理解的。那么我是什么意思呢？我指的是：
- en: different people have different ideas。 If you were to look at all of the ideas
    or all of the responses from a poll about what。 an operating system might be，
    you'll probably hear some pieces of it。 It does memory management。 It manages
    I/O， handles scheduling of the CPU。 Maybe it communicates。 Maybe it handles multitasking
    or multi-programming。 So there's a lot of pieces。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 不同的人有不同的看法。如果你查看关于操作系统是什么的所有想法或民意调查的所有回应，你可能会听到其中的一些内容。它进行内存管理，管理输入输出，调度CPU，也许它还进行通信，也许它处理多任务或多程序。所以，它有很多组成部分。
- en: but that's not so much what the operating system is。 It's what it does。 What
    about pieces like the file system or multimedia support for videos or video processing？
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 但这并不是操作系统的定义。它的作用是什么呢？像文件系统或多媒体支持，视频处理等功能，如何解释这些部分呢？
- en: What about the user interface？ What about the internet browser？
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 那么用户界面呢？互联网浏览器呢？
- en: Is that part of the operating system？ I have a little smiley face there because
    there was a time when Microsoft was claiming。 that the browser was a fundamental
    part of their operating system and there was all sorts。 of discussions about whether
    that was true or not。 And those kind of arguments come up all the time。 It's kind
    of interesting。 You might ask is this only interesting to academics？
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是操作系统的一部分吗？我这里有一个小小的笑脸，因为曾经微软宣称浏览器是他们操作系统的一个基本部分，引发了各种关于这一点是否成立的讨论。这种争论经常会出现，挺有意思的。你可能会问，这对于学术界的人才有趣吗？
- en: Well it's certainly interesting to academics， but sometimes antitrust comes
    into play and。 if Microsoft was claiming the internet browser was part of their
    operating system and as a。 result everybody was using their browser exclusively，
    there might be some antitrust issues there。 So be that as it may， I'm hoping to
    give you at least the right signpost as we go through。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于学术界的人来说肯定有趣，但有时反垄断问题也会介入。如果微软宣称互联网浏览器是他们操作系统的一部分，而结果每个人都只使用他们的浏览器，这可能会涉及一些反垄断问题。因此，不管怎样，我希望在接下来的讨论中至少能给你提供正确的指引。
- en: to figure out over time if somebody gives you a definition for an operating
    system， you。 at least will have a way to evaluate what they're saying here。 So
    really there's no universally accepted definition of what an operating system
    is。 Sometimes people say well everything a vendor ships when you order an operating
    system。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有人给你一个操作系统的定义，经过一段时间你至少会有一个评估他们说法的方法。所以，实际上并没有一个被普遍接受的操作系统定义。有时人们会说，操作系统就是厂商在你订购操作系统时提供的所有东西。
- en: One thing that people maybe will agree on is that there is something called
    a kernel which。 is typically the one program running at all times on the computer
    that's like the core。 of the operating system and maybe everything else is either
    a systems program that ships。 with the operating system or it's an application。
    This is not so bad of a definition but we'll get further on that as we go。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 也许人们会同意的一点是，操作系统有一个叫做内核的部分，通常是计算机上始终运行的唯一程序，它像是操作系统的核心，可能其他的东西要么是随操作系统一起发布的系统程序，要么就是应用程序。这种定义还不错，但我们会在后续进一步探讨。
- en: So a definition of operating systems could also include things like what's the
    layering。 So for instance they might say in operating systems that special layer
    of software that。 provides access to hardware resources through convenient abstractions
    so it takes complex。 hardware and makes it much easier to use。 Perhaps it protects
    access to the resources。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以操作系统的定义也可以包括像是层次结构。举个例子，他们可能会说操作系统中有一层特殊的软件，提供通过便捷的抽象访问硬件资源，这样复杂的硬件就变得容易使用了。也许它还保护对资源的访问。
- en: Perhaps it gives security and authentication of those resources so that only
    authorized。 people can use them。 Perhaps it gives communication so there are communication
    protocols like TCP/IP which you've。 doubtless heard about and we'll talk more
    about that as the term goes on but perhaps。 those kind of abstractions also are
    part of the operating system。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 也许它提供了这些资源的安全性和认证，确保只有授权的人可以使用它们。也许它提供了通信功能，例如TCP/IP协议，你肯定听说过，我们会在课程进行时进一步讨论，但也许这些抽象层次也是操作系统的一部分。
- en: So you could look at it this way that really there's the hardware underneath
    and this OS。 is a layer between applications which are what you want to get done
    and the complex messy。 hardware underneath。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可以这样看待，底层实际上是硬件，操作系统是介于应用程序（这些是你想要完成的任务）和复杂杂乱的底层硬件之间的一个层。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_3.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_3.png)'
- en: So what does the word operating mean？ Well back in the really old days this
    is how people made phone calls。 There was a switchboard operator that you talked
    to and she or he actually plugged into。 the plug board the right pieces。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 那么“操作”这个词是什么意思呢？在很久以前，人们打电话的方式是这样的。你会与一个总机接线员通话，他或她实际上会将电话插到接线板上。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_5.png)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_5.png)'
- en: There were computer operators once upon a time and perhaps that was what the
    word operator。 means but today probably people when they're talking about operating
    systems they are as。 we said talking about that piece of coordinating software
    that ties everything together and。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 曾经有计算机操作员，也许那就是“操作员”一词的来源，但今天，当人们谈论操作系统时，他们实际上是在谈论那种协调所有事物的软体，就像我们所说的那样。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_7.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_7.png)'
- en: that's going to pretty much be where we're going here。 Now what's the system
    portion？
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这基本上就是我们接下来要讨论的内容。那么，系统部分是什么呢？
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_9.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_9.png)'
- en: So operating here it's the thing that's operating the hardware。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在这里操作的是操作硬件的那个东西。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_11.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_11.png)'
- en: The system portion is also an interesting question so what makes a system？
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 系统部分也是一个有趣的问题，那么什么是一个系统呢？
- en: So many interrelated parts typically make a system。 Each potentially interacts
    with the others and when you get a big enough system sometimes。 the actual interactions
    that you end with are not what you expected。 And that's kind of one of the funny
    aspects of having a system is when it starts to get。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 许多相互关联的部分通常构成一个系统。每个部分都可能与其他部分互动，当系统足够庞大时，有时你最终得到的实际交互结果并不是你预期的。这也是拥有一个系统时的一个有趣方面，就是当它开始变得……
- en: emergent behavior and some of the things we're going to talk about in this class
    is really。 about taming that emergent behavior and really robustness requires
    an engineering mindset。 which I'm hoping that Anthony and I can give you a good
    taste of having an engineering， mindset。 So you've got to handle errors meticulously。
    You have to be careful about malicious or careless users and you have to be very
    careful。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 新兴行为是我们在这门课程中将要讨论的内容之一，实际上这与驯服这种新兴行为有关，真正的鲁棒性需要一种工程思维方式。我希望安东尼和我能够给你们提供一种工程思维的良好体验。所以你必须非常仔细地处理错误。你需要小心恶意或不小心的用户，而且你必须非常小心。
- en: when you start getting into locking which we will to design for correctness
    rather than。 designing something and testing it a bunch of times and hope that
    you got it correct。 So we're going to be designing for a correct system。 So system
    programming is going to be a very important part of this class and we're going。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始进入锁定机制时，我们将设计以确保正确性，而不是设计某个东西并多次测试，期望它是正确的。所以我们将设计一个正确的系统。所以系统编程将是这门课程中非常重要的一部分，我们将会……
- en: to start you out actually at the very beginning getting a flavor for instance
    how do you talk。 to something like Linux or a Unix style operating system from
    the user's standpoint just to。 give you a flavor of what it looks like coming
    from above and then we're going to dive in。 pretty deeply and pretty quickly into
    what is underneath。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 为了让你们从一开始就能有所了解，我们首先从用户的角度来看如何与像Linux或Unix风格的操作系统进行交互，给你们一种从上方看系统的感觉，然后我们将深入并迅速地探索系统底层的内容。
- en: So for instance we can talk about the hardware software interface which is really
    one would。 say a question of virtualization。 So we have this program up on top
    that's running and we have this complicated hardware underneath。 that we want
    to give access to the software so that something controlled happens right。 and
    so you know you've all been through 61C I'm assuming so what's in the hardware
    while。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，我们可以讨论硬件与软件的接口，这实际上可以被看作是虚拟化的问题。所以我们有一个在上面运行的程序，而下面有复杂的硬件，我们希望能让软件访问这个硬件，以便执行受控的操作。你们应该都已经学过61C了，假设你们都知道硬件里都包含了什么。
- en: there's a processor there's some memory which can store lots of different flavors
    of things。 maybe some of the memory is devoted to the operating system each of
    these different colors。 here potentially represents a different process and that
    processor has a set of registers and。 those registers can be used to access memory
    so that it might be addresses stored in there。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 系统中有一个处理器，有一些内存可以存储许多不同类型的数据。也许有一部分内存是专门为操作系统保留的，每个不同的颜色这里可能代表着一个不同的进程，而那个处理器有一组寄存器。这些寄存器可以用来访问内存，因此可能会存储地址。
- en: Those registers can also be stored out into memory so that we can suspend one
    process。 and run another thing and that's going to be part of the multiplexing
    multitasking that。 we're going to be talking about。 And of course there's a cache
    in the middle here that makes things fast and we'll talk。 a little bit about that。
    Page tables that let us do translation to get virtual memory and then you know
    once you。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这些寄存器也可以存储到内存中，以便我们可以暂停一个进程，运行另一个任务，这将是我们即将讨论的多路复用多任务的一部分。当然，这里有一个缓存，能加速处理，我们也会稍微谈一下这个。页面表让我们能够进行地址转换，从而获取虚拟内存，然后，你知道，一旦你……
- en: get sort of below the processor memory level all sorts of interesting hardware
    come into。 place you know storage devices networks displays all sorts of things
    there are buses okay with。 controllers that let you control all this stuff and
    so if you really just looked inside the。 computer you're going to see a lot of
    stuff and then when you extend it out into the internet。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 低于处理器内存级别的所有硬件都变得非常有趣。你知道存储设备、网络、显示器等各种设备，所有这些设备通过总线连接，控制器让你能够控制这一切。所以，如果你真正去看计算机内部，你会看到很多东西，然后当你将其扩展到互联网时……
- en: there's even more stuff and the interesting question is how do you even program
    this the。 level of complexity is so high and so you know that's the instructions
    that architecture。 really helps there okay that's going to be basically taking
    what's inside the processor。 and giving enough standardization that a program
    can hope to run on top of it but it's also。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有更多的东西，问题的关键是如何编程。复杂性太高了，你知道，这就是架构指令在这里发挥作用的地方。好吧，它基本上是在处理器内部进行操作，并提供足够的标准化，以便程序可以希望在其上运行，但它也……
- en: going to be the operating system which is going to give us nice clean boundaries
    and。 virtualized views of that underlying hardware in order to make things work
    okay so what you。 learned in 61c was machine structures the C language the OS
    is going to take all the。 things you learned in 61c and abstracted away to help
    the application be easier to write okay so。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是操作系统的作用，它将为我们提供干净的边界和虚拟化视图，以帮助应用程序更容易地编写。因此，你在61c课程中学到的是机器结构、C语言，而操作系统将会把你在61c中学到的所有内容抽象化，以帮助应用程序的编写更加简便。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_13.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_13.png)'
- en: really kind of if we were to talk more about what is in an operating system
    we might start with。 the notion that there's an illusionist aspect to it which
    is providing clean easy to use abstractions。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们进一步讨论操作系统中包含的内容，我们可能会从它的幻觉性质开始谈起，因为操作系统提供了清晰且易于使用的抽象。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_15.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_15.png)'
- en: of physical resources so if we look back at this previous slide all of these
    things okay many。 different devices different processors different capabilities
    some processors have GPU some don't。 all of that complexity needs to be virtualized
    in a nice clean way to make it possible to write。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 物理资源的管理。如果我们回看之前的幻灯片，所有这些内容——好吧，许多不同的设备，不同的处理器，不同的能力，有些处理器有GPU，有些没有——所有这些复杂性都需要以一种干净的方式进行虚拟化，使得编写程序变得可能。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_17.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_17.png)'
- en: programs and that's really the solution is thing so you're providing a clean
    easy to use abstraction。 of those resources and those abstractions are ones that
    you may use without thinking too much about。 them when you those of you that have
    written and compiled programs you might think of things like。 infinite memory
    because you're not worried about running out of memory right away you might think。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 程序，这实际上就是解决方案。操作系统提供了一种干净且易于使用的资源抽象，而这些抽象是你在使用时可能不太会考虑的。比如你们中那些写过并编译过程序的人，可能会想到像**无限内存**这样的东西，因为你们不太担心马上就会用完内存，你可能会觉得……
- en: of files and users and messages these are all things that don't actually exist
    in the underlying。 hardware they're they're put together by the operating system
    as abstractions that are easy to use okay。 so so how do we virtualize the machine
    well i've taken this machine here and squashed it out。 and the operating system
    is going to be that key piece of software running on top of the hardware。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 文件、用户和消息，这些都是在底层硬件中并不存在的东西，它们是由操作系统作为易于使用的抽象体组成的。那么，如何实现机器的虚拟化呢？我将这台机器给压缩成了一个模型，操作系统将在硬件之上运行，成为那一关键的软件部分。
- en: and making it easy for applications to work and so for instance what do we get
    out of the operating。 system well instead of an individual processor that is a
    CPU we get threads and instead of。 memory which is a bunch of bytes that aren't
    really tied together well we get address spaces。 which are have protection domains
    associated with them instead of random blocks in storage we get。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 并使得应用程序易于工作。例如，我们从操作系统中得到什么？好吧，取代单个处理器（即 CPU），我们得到线程；取代那些没有很好地绑定在一起的字节的内存，我们得到地址空间，并且它们有保护域；取代存储中的随机块，我们得到。
- en: files and there's going to be some interesting lectures that we have about storage
    devices and。 how we get a nice file system out of them so instead of random messages
    being sent over ethernet that。 can be dropped at any time we can get nice clean
    abstractions of sockets which are cues that you。 put messages in on one side and
    they show up on the other side guaranteed right and so on top of this。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 文件和一些有趣的讲座将会介绍存储设备，以及我们如何从中构建出一个良好的文件系统。这样，取而代之的是通过以太网发送的随机消息，这些消息可能随时丢失，我们可以获得干净的插座抽象，它们是消息队列，你可以将消息放入一侧，它们会保证在另一侧出现，等等。
- en: virtualized view of the hardware we can have a process which is an execution
    environment with。 restricted rights provided by the operating system and that
    process is a nice clean container okay。 it's got an address space that's a nice
    clean chunk of storage it's got multiple threads which。 will multiplex well on
    top of even a single CPU it's got those files it's got those sockets and。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 硬件的虚拟化视图是我们可以拥有一个进程，这是一个由操作系统提供的具有受限权限的执行环境，而这个进程是一个干净的容器。它有一个地址空间，这是一个干净的存储块；它有多个线程，即使在单个
    CPU 上也能很好地多路复用；它有这些文件，它有这些插座。
- en: when you write programs you're writing to a process abstraction not to these
    individual。 complicated hardware pieces so you take your compiled program you
    put it on top of a process。 okay it's it's got some system libraries linked in
    and once you compile it and link it and start。 running it it actually becomes
    the process okay and so um just to state that a little bit what。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写程序时，你是在写进程抽象，而不是这些复杂的硬件组件。所以你将编译后的程序放在进程上。好吧，它链接了一些系统库，一旦你编译、链接并开始运行，它实际上就变成了进程。所以，嗯，稍微阐述一下这个概念。
- en: as we go on you're going to get a better mental distinction between for instance
    the program。 and a process the program is a potential thing once it's instantiated
    and starts running it becomes。 a process okay so the application machine is the
    process abstraction provided by the OS。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 随着学习的深入，你将能够更清楚地区分程序和进程。例如，程序是一个潜在的东西，一旦实例化并开始运行，它就变成了进程。所以，应用程序机器就是操作系统提供的进程抽象。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_19.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_19.png)'
- en: each running programs in its own process and processes provide this nice interface。
    it's nicer than raw hardware so that's the takeaway from these last couple of
    slides here。 and what's kind of neat about this class i think is not only are
    we going to talk about。 these abstractions but we're going to show you how they're
    implemented and you get to see。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 每个正在运行的程序都有自己的进程，而进程提供了这个良好的接口。它比原始硬件要好，所以这就是我们从这些幻灯片中得到的结论。而这门课的一个有趣之处在于，我们不仅会讨论这些抽象概念，还会展示它们是如何实现的，你将亲眼看到。
- en: how we go from you know the underlying bits and blocks and complexity of the
    hardware。 into some programming environment that's actually usable across a variety
    of different machines。 and you know the programmer's view is that things are going
    to run into process and so they write。 some programs they compile them they link
    in some libraries and now as a result you've got。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将展示如何从硬件的底层位、块和复杂性，过渡到一个实际上可以在不同机器上使用的编程环境。程序员的视角是，程序将在进程中运行，因此他们编写一些程序，编译它们，链接一些库，结果就是你得到了。
- en: something that's going to run cleanly on top of the process abstraction for
    a variety of different。 hardware instances or even across different operating
    systems in some cases we'll talk about how that。 can work so and then of course
    the compiler is going to help us turn this kind of program this。 is see into a
    binary which is really kind of what the underlying machine really needs okay。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 进程是可以在各种硬件实例上，甚至在不同操作系统之间运行的程序的抽象。我们稍后会讨论如何实现这一点，然后，编译器将帮助我们把C语言程序转换为二进制，这实际上是底层机器所需要的。
- en: i'm hoping that many of you remember the C language and the notion of compiling
    and linking from 61 C。 you're going to need to get on board with that really rapidly
    we're going to start off at a fair。 clip here in this class we will have i'll
    mention this later we're going to have a review session。 on the C language it's
    still tba but coming up late this week or next week we're going to very。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我希望你们中的很多人还记得61C课程中的C语言以及编译和链接的概念。你们需要迅速掌握这些内容，因为我们将在这门课中以较快的节奏开始，稍后我会提到，我们将会有一个C语言复习环节，时间还未确定，但可能会在本周末或下周进行。
- en: quickly pop you in to start running basic programs and compiling things and
    building the operating。 system really early so that all of those easy things you're
    ready with so that when we start。 teaching you things you'll be able to move forward
    now there's good question in the chat about you。 know can i do well if i haven't
    taken 61 C you can it's a little challenging under some circumstances。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将尽快让你开始运行基本程序、编译代码并构建操作系统，以便你在学习其他内容时，能够顺利进行。现在在聊天中有个问题问到：如果没有上过61C，我能做得好吗？可以的，在某些情况下可能会有些挑战。
- en: you know if you're going to try to go at this without having taken 61 C i would
    do my best to。 to find a set of slides and review quickly okay because you're
    going to you're going to have to。 know some of the things about the way CPUs work
    and and the C language and so on right at the。 beginning it's not impossible it
    can be done and we also know in this class from years of teaching it。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，如果你没有上过61C课程并且打算直接学习这门课，我建议你尽量找到一套幻灯片并快速复习，因为你需要了解一些关于CPU如何工作、C语言的基础知识等等。这不是不可能完成的，过去几年的教学经验表明是可以做到的。
- en: that 61 C is not really enough of an introduction to the C language to really
    have a working knowledge。 and so that's why we give you lots of resources in the
    first couple of weeks and hope to get you up。 to speed quickly on the C language
    okay so i hope i answered that question。 so what's in a process so remember the
    process is kind of our virtualized environment so the process。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 61C课程并不足以让你真正掌握C语言的工作知识，因此我们在前几周为你们提供了大量资源，希望能够帮助你们迅速跟上C语言的进度。希望我已经回答了这个问题。那么，什么是进程呢？请记住，进程是我们的虚拟化环境，进程……
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_21.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_21.png)'
- en: consists of address spaces one or more threads of control executing in the address
    space。 and all sorts of additional system state like open files and sockets and
    so on and Anthony also。 mentioned you can find great ebooks on the course resources
    page that's true so one of the things。 thank you for bringing that up Anthony
    you you should all look at the resources page。
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 进程由地址空间、一个或多个控制线程在地址空间内执行，以及各种附加的系统状态（如打开的文件、套接字等）组成。安东尼也提到过，你可以在课程资源页面找到很棒的电子书，这是正确的。感谢安东尼提到这一点，大家应该去查看资源页面。
- en: Berkeley library digital library has a license to all of the O'Reilly books
    those are the cool ones。 with the animals on them and we posted a couple of good
    starter books on the C language and get。 off of the resources page that as long
    as you're coming in from a Berkeley IP address or you have a。 virtual VPN excuse
    me tied in to Berkeley to get to the library you should be able to access those。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 伯克利图书馆数字图书馆拥有所有O'Reilly书籍的授权，这些书籍很酷，封面上有动物图案。我们在C语言入门书籍上发布了几本不错的书，你可以从资源页面上找到它们，只要你是从伯克利的IP地址访问，或者你通过虚拟VPN连接到伯克利以进入图书馆，就应该能够访问这些资源。
- en: so for example so process is as we say an address space one or more threads
    of control and。 addition just additional system state and for example if you're
    on a Mac you might see this if。 you look at the set of all processes and or you
    can do the task manager if you're on windows or on。 Linux you can do ps uh a ux
    for instance we'll give you all the processes and what's interesting to note。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 举个例子，进程是由一个或多个控制线程和附加的系统状态组成的。例如，如果你使用的是Mac，查看所有进程的集合时可能会看到这样的情况，或者你可以在Windows上使用任务管理器，或者在Linux上运行`ps
    -aux`，这将列出所有进程。有趣的是要注意。
- en: here is uh even when idle there are a lot of things running on your machine
    and this is kind of fun。 you should take a look and see how many things are running
    on your machine okay many and most of。 those processes aren't running all the
    time they're mostly sleeping but then they wake up on some。 event and they run
    for a while and they go back to sleep and uh you'll get a much better idea of
    how。
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在空闲时，你的机器上也有很多进程在运行，这是很有趣的。你应该看看你的机器上到底有多少进程在运行。好的，很多，而且大部分进程并不是一直在运行，它们大部分时间处于休眠状态，但它们会在某些事件发生时被唤醒，运行一段时间后再回到休眠状态，这样你会更清楚了解它是如何工作的。
- en: that all works as we uh go forward in this class so the operating systems view
    of the world is really。
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都会在我们接下来的课程中讲解清楚，所以操作系统对世界的看法实际上是这样的。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_23.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_23.png)'
- en: that the operating system is uh got the hardware underneath that it controls
    and it's providing。 a series of processes each of which has um its own address
    space threads files sockets etc that are。 distinct from uh from other processes
    and so this is a virtualized environment um and uh we're。 going to tell you how
    that works as we go on okay are there any questions so far。
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统控制着下面的硬件，并提供了一系列进程，每个进程都有自己的地址空间、线程、文件、套接字等，彼此之间是**独立**的，因此这是一个虚拟化环境，我们将在接下来的讲解中告诉你它是如何工作的。好的，到目前为止有任何问题吗？
- en: okay so so the OS um so yeah good question our threads unique to processes so
    um each process。 has a set of threads running within them okay and the address
    space uh is referring to uh a。 the set of all addresses that uh can be accessed
    from within a process we'll make this a little。 more formal as we go on um and
    it's protected from the address space of uh other processes and uh so。
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，所以操作系统……好问题，线程是否唯一属于进程？每个进程都有一组线程在其中运行。地址空间指的是在进程内部可以访问的所有地址的集合。我们接下来会更加正式地说明这一点，它是与其他进程的地址空间相互**隔离**的。
- en: by default unless you go to the trouble of of uh opening up channels the the
    addresses and the。 underlying memory that process one can access is actually different
    from the underlying memory。 process two can access and so the address spaces are
    going to be one of our uh key ideas for protecting。 processes from one another
    okay and um so uh so there are each process has a set of threads。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，除非你特别打开通道，否则进程一可以访问的地址和底层内存实际上与进程二能够访问的内存是不同的，因此地址空间将成为我们保护进程之间相互隔离的关键概念之一。好的，每个进程都有一组线程。
- en: and address space uh that's unique from the other ones um there's another question
    can a single core。 machine run multiple processes absolutely okay so we will tell
    you we'll teach you how that happens。 so even if you had a single core processor
    you could have many processes that are all appearing。 to run simultaneously that's
    concurrency and we'll show you how that works adding multiple cores。
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 每个进程都有一个独特的地址空间。还有一个问题，单核机器能同时运行多个进程吗？完全可以。好的，我们会教你如何实现的。所以，即使你只有一个单核处理器，你仍然可以运行多个进程，它们看起来像是同时运行的，这就是并发，我们将展示如何通过添加多个核心来实现这一点。
- en: just allows more of them to be running truly at the same time rather than apparently
    at the same time。 okay um and so the what we're seeing here there's a question
    about are the process files different。 from the files that live on the disk the
    answer is uh what you're getting in a process is the set。 of open files that um
    the process has managed to talk to open those files are ultimately stored on。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是允许更多的进程真正同时运行，而不是看似同时运行。好的，所以我们看到这里有一个问题，进程中的文件是否与硬盘上的文件不同？答案是，你在进程中看到的是一组**打开**的文件，这些文件最终存储在磁盘上。
- en: disk and so you know any file that a process has is backed by the disk we'll
    talk more about that。 when we get into file systems so um so the OS translates
    from hardware interface to application。 interface provides running program uh
    within each of its own processes okay so another so we've。
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 磁盘上的任何进程文件都由磁盘支持，我们将在深入讨论文件系统时进一步探讨。嗯，操作系统将硬件接口转化为应用程序接口，为每个进程提供独立运行的程序。所以，接下来...
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_25.png)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_25.png)'
- en: sort of that's the illusionist idea we're virtualizing the underlying operating
    or the underlying hardware。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是所谓的虚拟化底层硬件的幻觉。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_27.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_27.png)'
- en: so that when um the program is running it's got a much cleaner uh container
    in which to run。
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，当程序运行时，它将有一个更加干净的容器来执行。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_29.png)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_29.png)'
- en: so um another thing that operating systems do in addition to providing that
    illusion of nice clean。 infinite memory etc is its acts as a referee and it manages
    the protection isolation sharing of。 resources um handles things like resource
    allocation and communication between processes okay and so。 this referee aspect
    is really uh one of the important aspects of what it is an operating system does。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，操作系统做的另一件事是，在提供干净、无限内存等虚拟化的同时，它充当了裁判的角色，管理资源的保护、隔离和共享，处理诸如资源分配和进程间通信等问题。嗯，所以这种裁判角色实际上是操作系统最重要的功能之一。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_31.png)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_31.png)'
- en: as i've said uh for instance it protects processes from from uh overriding each
    other's memory or。 interfering with each other okay and if certain files are only
    accessible to some user then the。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我所说，操作系统会保护进程，防止它们互相覆盖内存或干扰对方。好的，如果某些文件只有特定用户可以访问，那么...
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_33.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_33.png)'
- en: operating system is going to protect those files from other users etc okay so
    um what i'm showing。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统将保护那些文件不被其他用户访问等。所以，我展示的...
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_35.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_35.png)'
- en: here just to make it a little more clear is i sort of now have a brown process
    and a green process。 and just the the highlight and the color is really kind of
    showing that these are different。 protection domains and for instance right now
    back to that question of could a single core machine。 run uh multiple processes
    and then my answer was yes let's take a look at that idea so we have a。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更清楚地说明，我现在有一个棕色进程和一个绿色进程。高亮显示和颜色实际上在展示这些是不同的保护域。举个例子，现在回到那个问题，单核机器是否可以运行多个进程？我的回答是可以，我们来看看这个想法。所以我们有一个...
- en: single core for instance processor and it's currently running the brown uh in
    the brown uh domain here。 or process and so there's a particular thread that's
    currently executing and um that current thread。 is uh got some registers and it's
    got some memory and that's uh this protection domain and um。 that process right
    now since the brown process is the one that's active if it actually tries to reach。
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，单核处理器目前正在运行在棕色领域中。或者进程，所以现在有一个特定的线程正在执行，而当前的线程拥有一些寄存器和内存，这就是这个保护域。由于现在是棕色进程处于活动状态，如果它尝试访问...
- en: out the part of memory that's owned exclusively by process two it's not going
    to be allowed okay and。 that's part of the protection so if we wanted then to
    switch so we're busy running the brown。 uh brown thread in the brown process and
    we want to give the green a little time to run then what do。 we have to do well
    we have to basically package up all the state and was there from the brown and。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果某部分内存是进程二独占的，那就不允许访问。这是保护的一部分。因此，如果我们想切换，假设我们现在正在运行棕色线程在棕色进程中，我们想给绿色进程一些时间运行，我们该怎么办？我们基本上需要打包所有棕色进程的状态，...
- en: load the state from the green okay and so here i'm showing memory um remember
    the memory is the。 hardware piece down here and in addition there being brown
    exclusively owned blocks of memory。 there are some green ones that are owned exclusively
    by process two and so um if this brown。 thread tries to access those it's going
    to get what's called a segmentation fault or a page fault。
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 加载绿色进程的状态。这里我展示的是内存，记住，内存是硬件部分，除了由棕色进程独占的内存块之外，还有一些绿色内存块是由进程二独占的。所以，如果这个棕色线程试图访问这些内存，它将会遇到所谓的分段错误（segmentation
    fault）或页面错误（page fault）。
- en: we'll show you what the difference is and um they'll fail okay and so um really
    part of what the。 operating system is doing is keeping track of who owns what
    and if we're about to switch to let。 the green one run for a little while what
    do we have to do well we have to take the current versions。 of the registers and
    store them into memory in the o。s。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将展示它们之间的区别，然后它们会失败，好吧。因此，操作系统的一部分工作就是跟踪谁拥有什么资源，如果我们即将切换并让绿色进程运行一段时间，我们需要做什么呢？我们需要将当前的寄存器版本存储到操作系统内存中。
- en: memory probably in a in a thread uh basically， in a thread structure and then
    we have to load the green state in and we have to change the address。 space to
    be accessible to the green and then as we do all that in the operating system
    and then we。 let things run again and now after that's happened now the green
    process is uh running okay and so。 back to that question about could one single
    core on a on a processor do this yes that switching from。
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 内存可能处于一种线程结构中，然后我们需要加载绿色状态，并且我们必须更改地址空间，使其对绿色进程可访问，然后在操作系统中执行所有这些操作，之后让进程重新运行。现在，绿色进程已经运行了，好吧。关于一个处理器上的单核是否能做到这一点的问题，答案是：是的，切换操作就是指从。
- en: that core running the brown process to the core running the green process is
    part of what the。 operating system does okay we're gonna talk much more about
    that and so now let's talk about protection。 just to make this other thing clear
    so here's an example of the green process is running because。 it's loaded into
    the processor um and it's now trying to access a bunch of things including the
    brown。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 将处理器从运行棕色进程切换到运行绿色进程是操作系统的一部分。好吧，我们会更详细地讨论这一点，现在我们来谈谈保护机制。为了更清楚地说明这一点，举个例子，绿色进程正在运行，因为它被加载到处理器中，现在它试图访问许多资源，包括棕色资源。
- en: memory some of the o。s。 memory um maybe some storage notice that all of those
    things are probably or。 might be disallowed so the green thing shouldn't access
    brown memory the green thing shouldn't be。 able to go to o。s。 memory and modify
    it except for some exceptions we'll talk about later it shouldn't。 be able to
    go to disk uh unless it's really supposed to be owning that data and so in those。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 内存、部分操作系统内存，也许还有一些存储。注意，所有这些内容可能会被禁止访问，因此绿色进程不应该访问棕色进程的内存，绿色进程不应该能够修改操作系统内存，除非有一些后续会谈到的例外情况。绿色进程也不应该访问磁盘，除非它确实应该拥有那些数据。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_37.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_37.png)'
- en: instances what happens is the operating system kicks in and it will kill the
    process so that it。 doesn't get to do those uh misallowed accesses okay disallowed
    accesses and you'll get something。 called the segmentation fault and that process
    will also will actually be uh stopped and um。 typically some debugging state might
    be dumped out okay were there any questions on this。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，操作系统会介入并终止进程，以防它进行不允许的访问。你将得到一个叫做分段错误（segmentation fault）的错误，那个进程将会被停止，并且通常会输出一些调试状态。好吧，有人对此有问题吗？
- en: I see that Anthony's running a some answers to questions on the chat too that's
    great。 okay so um I guess the question is about virtual box we'll let Anthony
    keep going on those so um。
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 我看到Anthony也在聊天中回答一些问题，这很好。好吧，那么我猜问题是关于VirtualBox的，我们让Anthony继续处理这些问题。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_39.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_39.png)'
- en: so back to to our protection idea here so now i'm showing a bunch of processes
    um and uh one。 processor or one core let's say and now there's going to be a protection
    boundary uh and all of。 those things underneath the covers the disks the displays
    the networks the buses all of that stuff。 is going to have a protection boundary
    um put in put together by the operating system to make sure。
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 回到我们关于保护的讨论，现在我展示了一些进程，嗯，一个处理器或核心，我们称之为一个核心，现在会有一个保护边界，嗯，所有这些东西——磁盘、显示器、网络、总线，所有这些内容——都会有一个保护边界，由操作系统组成，以确保这些进程只访问它们应该访问的内容。
- en: that these processes only access the things that they're supposed to okay so
    the o。s。 isolates。 processes from each other it isolates itself from other processes
    okay so um that means that a。 process can't trash operating system memory and
    even though everything is running on one。 processor in this instance that i've
    shown you we can do all of this protection okay。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 也就是说，操作系统将进程彼此隔离，操作系统自己也会与其他进程隔离。嗯，这意味着一个进程不能破坏操作系统的内存，尽管在我展示的这个例子中，所有的内容都运行在同一个处理器上，我们仍然可以做到所有的保护。
- en: so um now moving right along。
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，嗯，现在继续前进。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_41.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_41.png)'
- en: that's the idea of a referee um finally an operating system uh yes is that's
    a good question there。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是裁判的概念，嗯，最终来说，操作系统，嗯，没错，这是一个好问题。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_43.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_43.png)'
- en: is the o。s。 a process in and of itself so um yes and no and that's one of those
    things where。 different people might disagree what it's meant by there being a
    process i will tell you that the o。s， has multiple threads that are running and
    they're at higher privilege than all of the process threads。 and so there there's
    a lot of different things going on in parallel in the o。s。
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统本身是否是一个进程呢？嗯，是也不是，这是一个不同的人可能会有不同看法的问题。所谓“进程”是什么意思呢？我可以告诉你，操作系统确实有多个线程在运行，并且它们的权限比所有进程线程都要高。因此，操作系统内部有很多不同的事情在并行发生。
- en: and they have control， of a lot more things um typically we don't call that
    a process that's part of the operating system。 but there certainly are o。s。 threads
    that are running um and you could ask me that question again。 in a week or two
    and maybe we could have more of an argument about that but just to close this
    out。 rather than saying that the o。s。 is a process um in this instance in way
    i'm talking about the o。s。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 它们对更多的内容有控制权，嗯，通常我们不称之为操作系统的一部分，但肯定有操作系统线程在运行，嗯，你可以在一两周后再问我这个问题，也许我们可以就此展开更多的讨论，但总的来说，为了结束这个话题，我不认为操作系统是一个进程，嗯，就我讨论的方式而言，操作系统是一个特殊的存在。
- en: has a bunch of threads that are all working at really high privilege inside
    um and helping to。 produce this virtual view to all of the processes above so
    finally this idea of o。s。 is glue so the。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 拥有一大堆线程，这些线程都在非常高的权限下工作，帮助生成对所有上层进程的虚拟视图，所以最终操作系统的概念就像是“胶水”一样，操作系统将这些东西连接在一起。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_45.png)'
  id: totrans-122
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_45.png)'
- en: operating system uh being an illusionist and a referee uh these things are often
    nobody would。 disagree with those being part of the operating system what's interesting
    is once we start talking。 about glue um that's when some of the disagreements
    come up glue is really things that help uh make it。 easy for programmers to use
    the underlying hardware okay and those glue glue is really about common。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统，嗯，像是一个魔术师和裁判，嗯，这些功能通常没有人会反对将其视为操作系统的一部分。真正有趣的是，一旦我们开始谈论“胶水”这个概念，嗯，这时候才会有一些分歧。胶水实际上是指那些帮助程序员更容易使用底层硬件的东西。嗯，胶水的真正意义是关于通用性的。
- en: services such as taking storage and turning it into files providing a windowing
    system providing。 networking uh where you can actually transmit bits from you
    know Berkeley to Beijing and back and。 they actually make it there these are services
    that programmers find useful um and uh different。 operating systems and even different
    versions of the same operating system might differ in what。
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 提供诸如存储和文件处理、提供窗口系统、提供网络等服务，嗯，你实际上可以从伯克利传输数据到北京然后再返回，并且它们实际上能成功传输。这些是程序员认为有用的服务，不同的操作系统，甚至相同操作系统的不同版本可能在这些服务上有所不同。
- en: services they'll provide okay but um in general o。s。 is provide libraries and
    running services that。 help to make things easier for programmers uh to use the
    system okay and um the question here about。 do cores have dedicated hardware to
    run o。s。 threads so typically not okay typically what happens is。 the same cores
    that we're running the user level processes will start running the o。s。 ones when
    a。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 提供的服务，好的，通常，操作系统提供库和运行中的服务，帮助程序员更容易地使用系统，好的，嗯，关于“核心是否有专用硬件来运行操作系统线程”的问题，答案通常是否定的，好的，通常发生的情况是，运行用户级进程的核心会在需要时开始运行操作系统的线程。
- en: timer goes off and things start running or when the o。s。 when the process uh
    that's running user code， or application code makes a system call into the kernel
    then things will start running uh the o。s。 threads will start running on the cores
    etc。 so um we will uh get into a lot more of these details。 okay so you'll you'll
    have a much better idea how this happens once we start diving into it um so。
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 定时器响起，程序开始运行，或者当操作系统中的进程（例如运行用户代码或应用程序代码的进程）进行系统调用时，事情就会开始运行，操作系统的线程会在核心上运行，等等。所以，我们会深入探讨更多细节，好的，一旦我们开始深入研究，你会对这一过程有更清晰的了解，嗯，所以……
- en: good question though one that i do want to answer right now which is how does
    the o。s。 trust a process， to return control to it and the answer is it doesn't
    okay and in fact what happens is the o。s。 has control， over timers that will go
    off and automatically transfer control back to the operating system。 regardless
    of what the user is doing and so the user program could be uh busy computing the
    last。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这是个好问题，我现在想回答一下，就是操作系统如何信任一个进程，确保它会将控制权返回给操作系统？答案是，它并不信任，好的，事实上，操作系统通过控制定时器来实现这一点，定时器会自动触发并将控制权转交给操作系统，无论用户在做什么。因此，用户程序可能正在忙于计算最后的……
- en: digit of pi which is one of my favorite things to do and um the operating system
    will still get uh。 to go again when the when the timer goes off okay and um we'll
    get into what syscalls and so on our。 later um but just as a quick answer here
    syscalls are not what timers are syscalls are when the uh。 user program actually
    accesses services so when it makes a file system read or write call that's a。
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 圆周率数字，这是我最喜欢做的事情之一，呃，操作系统仍然会在定时器响起时继续工作，好的，呃，我们稍后会详细讨论系统调用（syscalls）等内容，嗯，但在这里简单回答一下，系统调用不是定时器，系统调用是用户程序实际访问服务时发生的情况，所以当它进行文件系统的读写操作时，那就是系统调用。
- en: system call and we'll show you how that works so i。o as we've been alluding
    to is an important part。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 系统调用，我们会展示它是如何工作的，所以，I/O，正如我们一直提到的，是一个重要的部分。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_47.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_47.png)'
- en: of what an operating system handles and so really it's again turning the complexity
    of the hardware。 underneath into a nice clean abstraction layer okay and so for
    instance um when we start a program。 running uh we might pull parts of that program
    off of storage and bring it into memory so。 that it can start executing um or
    when we're um you know communicating remotely to Beijing say from。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是操作系统所处理的内容，实际上，它将底层硬件的复杂性转化为一个清晰的抽象层。好，比如，当我们启动一个程序时，呃，我们可能会从存储中提取程序的部分内容并将其加载到内存中，以便它可以开始执行，或者当我们与远程的北京进行通信时……
- en: Berkeley uh again the OS is going to help uh coordinate that i。o so that um
    the what we think we're doing， is sending a byte stream actually gets transmitted
    as a set of packets over wireless or wired networks。 many hops in the middle of
    the internet to the destination uh over in Beijing for instance that's。 all handled
    uh by the OS as well okay and so that's another one of those common services that
    is。
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 伯克利，呃，操作系统将帮助协调 I/O，这样我们认为我们在做的事情，发送的字节流，实际上会作为一组数据包通过无线或有线网络传输。中间经过许多网络跳跃，最终到达目的地，比如北京。这些都由操作系统处理，好吗？这就是操作系统提供的另一项常见服务。
- en: typical okay and uh there are many i。o services so um you know finally we've
    got the the look and feel。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 典型的，好的，呃，还有很多 I/O 服务，呃，最后我们有了外观和感觉。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_49.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_49.png)'
- en: uh of a typical machine you're all aware of you know you've got your cell phone
    you've got your。 laptop it provides a set of windows the ways to do cut and paste
    and so on that's typically the。 look and feel and in um many instances there are
    at least libraries that provide this windowing。 sometimes that windowing is in
    the operating system and um we will talk more about this as we go。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 一台典型的机器，你们都知道，你们有手机，有笔记本电脑，它提供了一组窗口、剪切和粘贴等功能，这通常是窗口的外观和感觉。在许多情况下，至少会有一些库提供这种窗口功能，有时这种窗口功能是在操作系统中实现的，我们将在课程中进一步讨论这一点。
- en: forward as well um just as an interesting little bit on that um windows NT back
    in the early 2000s。 was a micro kernel operating system that actually had windowing
    and everything outside the kernel。 and that ended up being too expensive and uh
    from a time standpoint and so as a result Microsoft。 moved its windowing back
    inside the kernel of the operating system and that actually uh for time。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，顺便说一下，Windows NT在2000年代初是一个微内核操作系统，实际上将窗口管理和所有其他内容放在了内核之外。最终这变得太昂贵，从时间的角度来看，结果微软将窗口管理重新放回了操作系统的内核中，这实际上对时间管理上有很大帮助。
- en: made it less stable and so sort of questions about whether something's in or
    outside the OS。 is an interesting question which we'll touch on as the term goes
    on as well。 there was a good question uh there about an alternative to time-based
    multiplexing。 um you should all look at the chat there Anthony's talking about
    the fact that OS is actually。
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 使其变得不太稳定，因此关于某些内容是否在操作系统内部或外部的问题是一个有趣的问题，我们将在本学期继续讨论这个问题。关于基于时间的多路复用的替代方案，提了一个很好的问题。嗯，你们都应该看看聊天，安东尼提到了操作系统实际上是。
- en: multiplex in time and space and the way to think about that is really that memory
    some notice this。 memory has some uh memory devoted to different processes and
    if we have more than one core。 then we can actually have different cores running
    on things that are in different parts of the。 memory or different parts of the
    storage simultaneously and the OS is going to manage that as well。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在时间和空间上进行多路复用，思考这一点的方式实际上是内存，注意到这一点。内存有一些专门分配给不同进程的部分，如果我们有多个核心，那么我们实际上可以让不同的核心同时处理内存或存储器的不同部分，操作系统将会管理这一切。
- en: okay um and by the way for those of you that are worried that this is getting
    too complex too quickly。 I will tell you that we're going to um sort of throw
    out multiple cores at the beginning and just。 think about one process running
    or excuse me one core with multiple processes running on top of it。 to get that
    really settled in your mind and then we'll bring in uh multi-core after that because。
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，顺便说一下，如果你们中的一些人担心这变得太复杂，太快了，我会告诉你们，我们一开始将抛开多核的概念，先考虑一个进程在一个核心上运行，或者说一个核心上运行多个进程，以帮助你们更好地理解这一点，之后我们再引入多核。
- en: it's really an easy addition once you understand how to make one core work um
    and then also uh the。 OS often handles battery management power managing so on
    okay so lots of management management。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你理解了如何让一个核心工作，添加其他核心其实是非常容易的，而且操作系统通常还会处理电池管理、电源管理等等。好吧，所以有很多管理工作需要做。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_51.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_51.png)'
- en: so if we were to put all these together you know what's an operating system
    it's a referee。 an illusionist and glue okay so those three things um will come
    up many times this term um as we talk。 about different aspects of operating systems
    and in many cases you're actually uh let's see here yeah。 you're actually going
    to implement parts of all three of these things uh in the operating system in。
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我们将这些放在一起，操作系统是什么？它是一个裁判，一个魔术师，还有粘合剂。好吧，这三样东西将在本学期多次出现，随着我们讨论操作系统的不同方面，很多情况下你们实际上是，嗯，让我看看，没错，你们实际上将实现这三者中的部分功能在操作系统中。
- en: your groups as the term goes on and so you're going to get a really nice internal
    view of how。 these things are provided by operating systems all right so why take
    61c other than the fact that。 it's cool and the faculty who teach it are cool
    there might be other reasons right so one of them is。 some of you might actually
    design and build operating systems uh in your career okay and。
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 你们的团队将在学期中继续开展工作，因此你们将获得一个非常好的内视图，了解这些东西是如何由操作系统提供的。好吧，那么为什么要选61c课程，除了它很酷，授课的教授也很酷之外，可能还有其他原因，对吧？其中之一是，你们中的一些人可能会在职业生涯中设计和构建操作系统。
- en: and it's possible more than ever now because we're getting these embedded uh
    internet of things。 style devices where in some cases people design their own
    little pieces of operating systems from。 the ground up uh just because these devices
    are limited um or you may end up uh working deep。 inside of Linux uh at a startup
    who knows so it's good to really have a good idea what's going on。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这种情况比以往任何时候都更为可能，因为我们正在获得这些嵌入式的物联网风格的设备，在某些情况下，人们从零开始设计自己的操作系统小模块，因为这些设备的资源有限，或者你可能会在初创公司深度参与Linux的开发。总之，了解它们的工作原理非常重要。
- en: certainly many if not all of you are going to be creating big systems that utilize
    some of。 the core concepts here okay and so when you're designing the next big
    thing uh cloud system whatever。 um you're going to uh basically want to know what's
    happening under the cover so you can do a better。 job of it okay doesn't matter
    whether you build hardware or software kind of the concepts you get。
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 你们中的许多人，甚至可以说所有人，都将会创建一些大型系统，这些系统将会运用到我们今天讨论的核心概念。所以当你们设计下一个大系统、云计算系统或其他项目时，了解底层发生了什么，对你们的工作将非常有帮助。无论你是从事硬件还是软件开发，掌握这些概念都会对你们有很大帮助。
- en: in 162 are really going to help out um there was a good question why not use
    rust uh rust has a very。 steep learning curve and is an awesome language but we're
    going to stick to see for now because it's。 more common so far in the operating
    system domain but i have to be happy to talk to you about rust。 in office hours
    if you want to come by and chat so all of you are certainly going to build。
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在162课程中，这将非常有帮助。有一个好问题是，为什么不使用Rust？Rust语言非常强大，但学习曲线较陡，它是一个非常棒的语言。不过我们现在还是决定使用C语言，因为它在操作系统领域更加常见。如果你们有兴趣，我非常乐意在办公时间和你们讨论Rust。
- en: applications that utilize operating systems okay and the better you understand
    them the better you。 will be able to use them okay so let me say now we'll say
    a little bit about who we are so whom i i'm。 john kubital it's most people call
    me uh kuby maybe because they can't pronounce my last name um。 it's uh i have
    a background in hardware design i was uh working on the alwatt project at mit
    um as a。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 充分理解操作系统的应用非常重要，理解得越透彻，你就能越好地使用它们。那么现在让我简单介绍一下我们自己。我是John Kubital，大多数人叫我Kuby，可能是因为他们不太能发我的姓。我有硬件设计的背景，曾在麻省理工学院参与过Alwatt项目的工作。
- en: graduate student here's my chip this was the communication and memory management
    unit that i。 designed and this was one of the first parallel systems that had
    both shared memory and message。 passing in one uh in one system i have a strong
    background in operating systems as well so i worked。 uh at project athena uh as
    an o。s developer at mit i did device drivers and network file systems。
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 研究生，给你看看我的芯片，这是我设计的通信和内存管理单元。这是最早的并行系统之一，集成了共享内存和消息传递两种技术。我有扎实的操作系统背景，因此曾在麻省理工学院的Athena项目中作为操作系统开发者工作，做过设备驱动和网络文件系统的开发。
- en: i worked on clustered high availability systems as well back in the day um。
    tessellation here is an operating system that um i helped develop uh for um the
    par lab here at。 berkeley um i did a lot of work on peer-to-peer systems um and
    uh one of the first things i did。 here at berkeley was the ocean store project
    uh where among other things we talked about storing。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我曾参与过集群高可用性系统的开发。Tessellation是我帮助开发的一个操作系统，属于伯克利大学的PAR实验室项目。我在这里做了很多对等系统的工作。我在伯克利的第一个项目是OceanStore项目，在这个项目中，我们讨论了如何存储。
- en: our data for thousands of years um and uh develop some uh different interesting
    peer-to-peer systems。 like tapestry and bamboo and it was one of the first cloud
    storage projects uh back before the。 cloud and athenaic has just uh popped on
    here he also was part of ocean store which was uh fun at。 the time um and um i'm
    also do quantum computing which is going to be less relevant to this particular。
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经存储了几千年的数据，并且开发了一些有趣的对等系统，例如Tapestry和Bamboo。这些系统在云存储领域具有开创意义，远在云计算兴起之前，Athenaic项目就已经出现了，他还参与了OceanStore项目，这在当时非常有趣。此外，我还从事量子计算的研究，尽管这与目前的内容关联不大。
- en: uh class but um we're exploring architectures for quantum computers and CAD
    tools for designing them。 um most recently i've been part of the swarm lab or
    berkeley lab for the intelligent edge uh and i。 have a project called global data
    plane um and uh storage uh containers called data capsules we'll。 talk a lot more
    about that uh anthony also works with me on that project um and we have some things。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在探索**量子计算机架构**以及为设计量子计算机而开发的CAD工具。最近，我参与了**伯克利实验室智能边缘**的**Swarm实验室**，我有一个名为**全球数据平面**的项目，此外还涉及到存储容器，即数据胶囊。我们将详细讨论这个项目，安东尼也参与了这个项目，我们有很多内容要分享。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_53.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_53.png)'
- en: that we look at uh robotics on the edge with a project we call fog robotics
    okay and um part of。 this data capsules uh the intuition here is really these
    storage containers that you see。 uh down at the port of oakland in which i've
    been sitting in ships uh for uh the last uh six months。 basically that's our inspiration
    behind these uh data capsules which are cryptographically。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在研究**边缘机器人学**，有一个项目我们称之为**雾计算机器人学**。这部分内容涉及到数据胶囊，直观的理解是这些存储容器，你可以看到它们出现在奥克兰港口，我在这里已经坐了六个月。基本上，这是我们设计数据胶囊的灵感来源，这些容器是经过**加密保护**的。
- en: hardened containers of data and um we'll definitely talk about that later in
    the term so uh go ahead。 anthony here's uh who is he there he is well who am i
    i'm anthony joseph i'm a chance。 was professor in ekes i sit in the rise lab i'm
    part of uh the rise lab and i recently took on the role。 of faculty director for
    the college of engineering's fung institute for engineering leadership。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的**硬化容器**，我们会在学期的后续讲座中详细讨论这个话题。那么，去吧。安东尼，他是谁？在那里，他就是我，我是安东尼·约瑟夫，我是**EKES**的教授，我坐在**RISE实验室**，是RISE实验室的一部分，我最近承担了**工程学院方学院工程领导力研究所**的院系主任角色。
- en: so i work on a number of different research areas as kuby mentioned i'm part
    of fog robotics。 and gdp i also work on machine learning and in particular secure
    machine learning so that's。 where you have machine learning in the presence of
    adversaries so you're trying to make decisions。 like for example of something
    uh malware or not and an adversary knows that you're using machine。
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 正如库比提到的，我在多个不同的研究领域工作，我是雾计算机器人学和**GDP**的一部分，我还从事**机器学习**，尤其是**安全机器学习**。这意味着你在面对敌对方的情况下使用机器学习，你需要做出决策，比如判断某个程序是否是**恶意软件**，而敌对方知道你正在使用机器学习。
- en: learning and they're trying to manipulate that answer so that for example their
    malware is classified。 as non-malicious i also cooperate the detour security cybersecurity
    test bed that's the world's。 largest public cybersecurity test bed and it's used
    by industry by government researchers and。 it's used to teach a lot of students
    at a lot of different universities and colleges。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 机器学习者正在尝试操控他们的答案，例如将**恶意软件**错误分类为**非恶意**，我还与**Detour Security**网络安全测试平台合作，这是全球最大的公共网络安全测试平台，行业、政府和研究人员都在使用它，而且它也被用于许多不同大学和学院的教学。
- en: previously i've worked on a bunch of different projects in the system space
    so for example。 moden which is a drop-in replacement for the pandas python library
    it delivers up to 100x。 performance and allows you to take advantage of the fact
    that modern CPUs are multi-core and we have。 tens to hundreds of gigabytes of
    memory available on machines i also work on cloud computing uh so。
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我之前参与过多个系统领域的项目。例如，**Moden**是一个替代**Pandas** Python库的工具，它提供了最高达100倍的性能提升，并且允许你利用现代**多核CPU**和我们机器上拥有的**数十到数百GB的内存**。我还从事**云计算**工作。
- en: patchy mesos was one of the projects we developed here at berkeley and it's
    a a project that lets you。 basically manage applications running on very large
    clusters of machines also i work in。 computational biology so we developed pipelines
    for being able to process whole human genome。 sequences at 250 gigabytes a pop
    that's a lot of data when you look at population scale numbers of。
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**Patchy Mesos**是我们在伯克利开发的一个项目，它是一个让你能够管理运行在**大型集群**上的应用程序的项目。我还从事**计算生物学**，我们开发了处理整个人类基因组序列的管道，每个序列的大小为250GB，这是一个庞大的数据量，尤其在你处理人口规模的数据时。'
- en: say 10，000 genomes you're talking about anywhere from terabytes to petabytes
    of data that you want。 to work with so we made it very efficient to be able to
    work with those large data sets also as。 could be mentioned we had a project together
    tapestry and peer-to-peer networking i've also worked on。 mobile computing and
    wireless and cellular networking some of the outside activities i've done so this。
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，10,000个基因组，你将会处理从千兆字节到太字节级别的数据。所以我们让处理这些大数据集变得非常高效，正如之前提到的，我们一起做了一个名为tapestry的项目，涉及到点对点网络，我还从事过移动计算、无线和蜂窝网络等方面的工作。此外，我也参与了一些外部活动。
- en: hybrid format is something i'm very familiar with so back in 2015 and 2016 we
    created a set of five。 different courses on working with big data and Apache spark
    we enrolled over 240，000 students and。 had completion rates of 11 to 15 percent
    which is pretty surprising because typical completion rates。 are around 3 percent
    i'm also co-founder of a startup in the life sciences space called。
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 混合授课模式是我非常熟悉的。2015年和2016年，我们开发了五门不同的课程，教授如何处理大数据和使用Apache Spark，注册人数超过24万人，完成率达到了11%到15%，这非常令人惊讶，因为通常完成率只有3%左右。我还是一家生命科学领域创业公司的联合创始人。
- en: in iGenomics and it's basically taking the work that we did in amp lab and rise
    around computational。 biology and commercializing that technology and so we work
    on treatments for rare diseases so with。 that i'll turn it back over to kuby and
    before we lose Anthony just so you know we're gonna we're。 gonna we haven't come
    up with the exact alternating plan here yet but you'll get to have some lectures。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在iGenomics工作，基本上是将我们在amp实验室和rise项目中所做的工作应用于计算生物学，并将这项技术商业化。我们致力于罕见病的治疗，所以接下来我将把话题转回给kuby，并且在我们失去Anthony之前，告诉你们，我们还没有确定具体的替代计划，但你们将会参加一些讲座。
- en: from Anthony as well so he'll be a great addition here a lot from me yes indeed。
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 这也是来自Anthony的，他将在这里提供很大的帮助，也会向我学习。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_55.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_55.png)'
- en: all right so we also have some tas that you're going to get to know very well。
    and rather than having them come today since everything's virtual i figure in
    our first in-person。 class they will come to there and we'll introduce them but
    you'll be interacting with them in these。
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们还安排了一些助教，你们将会非常熟悉他们。由于一切都转为虚拟形式，我想在我们第一次面对面的课程上，他们会到场，我们会介绍他们，你们将在这些课程中与他们互动。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_57.png)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_57.png)'
- en: first couple of weeks even already so about enrollment you know i figured i
    should say something about。 this we've gotten lots of email unfortunately this
    class is very limited this term more so than it has。 been in the past for various
    reasons right now the class is still paying at 327 students。 however we're working
    on securing another section which might let a few more students in。
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 课程的前几周已经过去了，我觉得应该提一下关于注册的事情，我们收到了很多电子邮件，不幸的是，这门课程这个学期的名额非常有限，比以往任何时候都要紧张。目前课程的报名人数是327人。然而，我们正在努力确保增加另一个班级，这样可能会允许更多的学生加入。
- en: so be watching that but please don't email us for special reordering on the
    waitlist or whatever。 because Anthony and i don't really have any control over
    what order people get in。 but it's it's extremely limited and like i said there
    may be another section we're putting together。 it's very important to note that
    this is an early drop deadline class which means that。
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 所以请注意观察，但请不要通过邮件联系我们要求特殊调整等待名单的顺序，因为Anthony和我其实并不控制人选的顺序。不过，这个名额非常有限，正如我之前说的，我们可能会再开设一个班级。需要特别注意的是，这是一门早期退课截止的课程。
- en: the drop day is the Friday of the second week okay so that's coming up on the
    28th。 if you know we have a lot of people trying to get in this class if you're
    not serious about taking。 the class please drop early because the department's
    going to continue to admit students as other。 students drop and so you'll let
    people that are trying to get in the class get in and we will close。
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 退课截止日是第二周的星期五，也就是28号。如果你知道自己不打算认真上这门课，请尽早退课，因为系里会继续招收其他学生填补空缺，这样就能让其他有意愿加入课程的同学进来，我们会关闭注册。
- en: off the waitlist sometime in the next couple weeks and you know we want to make
    sure that everybody who。 can get in can get in and in theory if you stick around
    for the first two weeks it's going to be。 heart much harder to drop and the reason
    we do that is because you're going to be part of project。 teams we're going to
    ask you at the beginning of the third week to put together your team and。
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 可能在接下来的几周内你会被从候补名单中移除，我们希望确保每个有机会的人都能进入课程。如果你在前两周坚持下来，理论上，退课就会更难了。我们这么做的原因是因为你会加入项目小组，第三周初我们会要求你组建你的团队并……
- en: we want to make sure that teams stay functional without losing members so think
    carefully about this。 and really only come to stick around the next two weeks
    and join up with project groups if you're。 really intending to be here for the
    long haul okay and you know with that being said we're going to。 keep trying to
    bring people in so if you're on the waitlist or your concurrent enrollment or
    whatever。
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望确保团队保持有效运作，同时避免成员流失，所以请仔细考虑这个问题。如果你打算在接下来的两周内加入项目小组并继续参与，确保你有长期参与的打算。好吧，话说回来，我们会继续努力让更多人加入，如果你在候补名单上，或者是并行注册，或者……
- en: you got to be doing the work because if you don't you know you might have us
    let you in the class。 and you'll be we'll be lost at that point every year that
    I teach this every term I teach this。 there is somebody who forgot that they were
    on the waitlist and weren't doing any work and kind。 of figured they weren't in
    the class and they discover sometimes not until you know weeks or。
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 你得做功课，因为如果你不做，可能就会被我们允许进入课程，但到时候你会跟不上进度。我每年教这门课，每学期都会有这样的人——他们忘记自己还在候补名单上，没做任何功课，而且有点以为自己不在班级里，直到有时几周后才发现……
- en: months into the term that they're still in the class and that gets tricky to
    drop at that point。 so just you know if you're on the waitlist do the work if
    you're not intending to keep the class。 make sure you get off the waitlist okay
    are there any questions on that。 and as far as the question about piazza so everybody
    who has the potential to get in the class。
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 课程进行到这个阶段时，如果你还在班级里，那时候想退课就有点麻烦了。所以如果你在候补名单上，而且不打算继续上这门课的话，记得完成任务，确保你能退出候补名单。好了，关于这个问题有没有什么疑问？至于关于
    Piazza 的问题，所有有机会进入课程的人……
- en: should potentially have been added to the class unless you're concurrent enrollment
    and we may be。 fixing that soon as well so just because you're able to access
    piazza and our autograder by the。 way doesn't mean you're in the class only the
    enrollment that's officially there you have to go to。 to the the university sites
    there to figure out whether you're in the class or not that tells you。
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你可以访问 Piazza 和我们的自动评分系统，顺便提一句，这并不意味着你已经在课程中，只有在正式注册的情况下，才算真正加入课程。你需要去大学的官方网站上查看自己是否已经注册上课，这能告诉你……
- en: whether you're actually in the class but if there's a potential for you to be
    in there please do the。 work okay are we good on that all right so infrastructure
    the website is cs162。ecs。berkeley。edu。 we also have cs162。org as well and the
    piazza is linked is linked off the home page we're going to。 be putting the lecture
    recordings tentatively up on the home page we hope to be able to maybe。
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你是否已经在课堂上，但如果有可能进入课程，请确保完成作业，好吗？我们对这个问题都清楚了吗？好了，关于基础设施，网站是 cs162.ecs.berkeley.edu，我们也有
    cs162.org，Piazza 链接可以从主页找到。我们会暂时将讲座录像放在主页上， 希望能够……
- en: continue with this throughout the term but you know we're all hoping that this
    everything becomes。 back in person shortly okay i see somebody asking about the
    course calendar so if you're。 are on the home page and you can't view the course
    calendar that's likely because you are in incognito。 mode you're going to need
    to be logged in as as a student okay so our textbook is uh。
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 课程会继续进行下去，但我们都希望很快能恢复面对面的授课。好了，我看到有人在问课程日历的事，如果你在主页上看不到课程日历，那很可能是因为你处于隐身模式，你需要以学生身份登录。好的，我们的教材是……
- en: Anderson and Dallin operating systems principles and practice the home page
    has our schedule on and。 also has suggested readings this is one of the better
    textbooks that we found and so。 i would say people learn in different ways reading
    the suggested chapters out of this book。 might be your thing and i would actually
    recommend it because it's a pretty good book。
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 《安德森与达林操作系统原理与实践》是一本非常不错的教科书，我们认为它是其中最好的之一。不同的人有不同的学习方式，阅读这本书的建议章节可能对你有帮助，我也会推荐它，因为它确实是一本很好的书。
- en: we also have some additional ones supplementary material that you could get
    at。 operating systems three easy pieces there's Linux development third edition
    by Robert Love。 we also have some other things that are linked off of the resources
    page some more Riley books。 to help you along as well okay and there's also the
    latter teaching of C which is available off。
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一些额外的补充材料，你可以在操作系统《三大难题》一书中找到，还有 Robert Love 编写的《Linux开发》第三版。我们还有一些其他内容，链接在资源页面上，还有一些
    Riley 的书籍，可以帮助你学习。好的，还有 C 语言教学的书籍，这些书也可以在页面上找到。
- en: the resources page as well okay and i even put up some research papers occasionally
    on resources。 and i'll reference them throughout the term to get a little bit
    of a flavor for where some of。 these ideas came from okay so our syllabus is the
    following we're going to talk a lot about。
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 资源页面也有，我偶尔还会放一些研究论文在资源页上，并在整个学期中引用它们，给你一点关于这些想法来源的背景。好的，我们的教学大纲如下，我们将会讨论很多内容。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_59.png)'
  id: totrans-179
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_59.png)'
- en: OS concepts how to navigate as a system programmer so we're going to start off
    with things like what's。 process IO networks virtual machines and then we're going
    to learn about concurrency so we had a。 lot of questions from people today about
    can one CPU can one CPU have multiple processes etc and the。 answer which we said
    many times was yes and we're going to show you basically how you can get。
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 操作系统概念如何作为系统程序员进行导航，所以我们将从像是什么的内容开始。进程、输入输出、网络、虚拟机，然后我们将学习并发性。今天我们收到很多问题，比如一个
    CPU 是否能同时运行多个进程等。我们已经多次回答这个问题，答案是肯定的，我们将向你展示基本上如何实现这一点。
- en: threads scheduling locks deadlock scalability fairness etc so from the one end
    of the spectrum。 is how to get one end of the spectrum is how to get concurrency
    out of a single processor the。 other end is how to program with locking and so
    on and so there's going to be a number of weeks where。 we where we work you through
    some of these ideas part of that's going to be what's the address space。
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 线程、调度、锁、死锁、可扩展性、公平性等。从一个极端来看，是如何在单个处理器上实现并发性，另一极端则是如何使用锁等进行编程。因此，将有几个星期，我们会带你走过这些概念，其中一部分内容是关于地址空间的。
- en: is really and we're going to talk about virtual memory and address translation。
    protection sharing these are all 61 C concepts which we're going to remind you
    of we're going to。 talk about file systems and fascinatingly you know how do you
    go from individual blocks on a disc to。 something you can think of as a file that
    contains a video or something and is in a you know a。
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将讨论虚拟内存和地址转换、保护与共享，这些都是操作系统中的 61 C 概念，我们将会提醒你这些内容。我们还将讨论文件系统，令人着迷的是，你知道如何从磁盘上的单个块转换到你可以认为是包含视频等内容的文件吗？这也涉及到如何在操作系统中处理这些。
- en: directory that has a long path name we're going to talk all through all those
    details and different。 file systems as well so we'll start with IO devices and
    then we'll work our way all the way up to files。 transactions databases etc okay
    and we're going to then toward the end of the class we'll start talking。 about
    big distributed systems so I started today talking about the wonders of the internet
    and。
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 目录具有长路径名的部分，我们将会详细讨论这些细节和不同的文件系统。所以我们将从输入输出设备开始，然后逐步讲解到文件、事务、数据库等内容。然后在学期的后期，我们将开始讨论大型分布式系统。我今天一开始就谈到了互联网的奇妙之处。
- en: tying you know sort of every device in the world into the internet and once
    you've got that that's a。 huge distributed system and while this class starts
    in the small we look at sort of small。 systems on single nodes we're going to
    expand our way way up to all sorts of distributed systems。 protocols RPC NFS distributed
    hash tables we'll talk about consistency scalability multicast。
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道将世界上每个设备都连接到互联网，一旦你完成了这个任务，那就是一个庞大的分布式系统。虽然这门课从小系统开始，我们会首先研究单节点的小系统，但我们将逐步扩展，涵盖各种分布式系统协议，如RPC、NFS、分布式哈希表，我们还将讨论一致性、可扩展性和多播等问题。
- en: and you know cloud computing and sprinkled in through all of this but especially
    as we get。 toward the end it's going to be things about reliability and security
    we'll talk about fault。 tolerance protection talk about logging and how that can
    help and so on for reliability okay and clouds。 all right this is a learn by doing
    class so be prepared to not only do your academic studies。
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，云计算贯穿其中，尤其是在学期结束时，我们将讨论关于可靠性和安全性的话题，涉及容错保护、日志记录以及这些如何帮助确保系统可靠性。此外，我们还将讨论云计算相关内容。好的，这是一门通过实践学习的课程，所以做好不仅要完成学术任务的准备。
- en: but you're going to be programming and working in team so we have both individual
    homeworks。 which are done by yourself which help teach you kind of tools of the
    trade and individual ideas。 sockets thread programming and so on and group projects
    okay and notice that there's a homework。 zero and a project zero these are very
    important because they you do these in the first couple of。
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 你们将进行编程并以团队形式工作，因此我们既有个人作业，要求你们单独完成，这有助于你们掌握行业工具和个人技术，例如套接字编程、线程编程等，也有小组项目。请注意，作业零和项目零非常重要，因为它们是在学期的前几周完成的。
- en: weeks so you should look at the schedule we're going to start you off by with
    homework zero right away。 and project zero which doesn't need a group yet it's
    going to be you done in your own and these。 in homework zero project zero are
    all about you learning our infrastructure so that you can hit。 the ground running
    and really get moving with this class okay and so the group projects are。
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你们应该查看课程安排，我们将立刻开始作业零，并且项目零不需要小组参与，它将由你们自己完成。这些作业零和项目零都是关于你们熟悉我们的基础设施，确保你们能快速适应并迅速开始这门课程。小组项目也是如此。
- en: going to be the other ones one two and three are actually going to be in groups
    of four and you're。 going to start off on the beginning of the third week by telling
    us what groups you know who's in。 your group and what your preferences are for
    sections and so on and then you're going to be。 working with your group the rest
    of the term to develop some things inside the operating system。
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 其他组的成员实际上将分为四人一组，你将在第三周开始时告诉我们你所在的组，组内成员是谁，以及你对分配小组的偏好等等。接着，你将与组员一起在整个学期内合作，开发操作系统内部的一些功能。
- en: okay and so these group projects have four members you know I like to think
    it's。 thou shalt only do four you should not do three and you should not do five
    right you're going to do。 four members and you're basically learning about how
    things work in the real world and we need to。 make sure that you're all in the
    same section or at least have the same TA so we have some。
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这些小组项目每组有四名成员，我通常认为应该是四人一组，不可以是三人，也不可以是五人。你们将组成四人小组，基本上是学习现实世界中事物如何运作。我们还需要确保你们所有人都在同一小组，或者至少有相同的TA，这样我们就能确保顺利进行。
- en: some cases in which we have to spread people out a little bit but really this
    is going to be about。 you making sure you should have one TA that was able to
    know how you guys are doing okay。 and communication and cooperation is going to
    be essential so you know I'm going to reiterate。 this and Anthony will reiterate
    this throughout the term but you need to set up regular meetings。
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们可能需要稍微分散一些人手，但其实这门课主要是关于确保你们每个人都有一个TA，TA能够了解你们的进度，确保沟通与合作顺畅。因此，我会不断强调这一点，Anthony也会在学期中不断提醒大家，你们需要定期举行会议。
- en: with your group and what's hopefully awesome about this term we will have to
    keep our fingers crossed。 as we'll be in person for the first time in almost two
    years and really sitting down at a cafe。 okay we've got that cool little cafe
    and ancivari these days or you know whatever and talking with。 your group members
    is going to be essential to having a smooth to have a smooth group interaction。
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 和你的小组一起工作，而本学期令人期待的是，我们希望一切顺利。我们将首次面对面见面，几乎已经有两年没有这样做了，真正坐在咖啡馆里。好吧，现在我们有那家很棒的小咖啡馆，或者你知道，类似的地方，和小组成员交流对于顺利的团队互动至关重要。
- en: okay and together you'll work on your design documents and really I really talk
    a lot about。 face-to-face because however good our social media apps are Slack，
    Messenger， Facebook。 whatever your， favorite thing is it really doesn't replace
    face-to-face and I've had many dysfunctional groups over the。 years and they were
    all people that somehow all groups that didn't meet regularly and you know。
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，你们将一起完成设计文档，实际上，我真的很强调面对面的交流。因为无论我们的社交媒体应用程序（Slack、Messenger、Facebook等）有多好，它们真的不能替代面对面的交流。我多年来遇到过很多不协调的团队，它们的共同点就是没有定期见面，你知道的。
- en: only used email and then got upset when things weren't understood by other partners
    and whatever so。 plan on really meeting your team regularly okay there's a question
    about discussion sessions。 are they only on Thursday and Friday well right now
    there's actually sections on Wednesday。 Thursday and Friday we are trying to fix
    that because we'd like everything to be on Friday。
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人仅仅使用电子邮件，然后当其他伙伴没有理解时就会感到沮丧等等。所以计划好定期与团队见面。好吧，有一个问题是，讨论课是不是只在周四和周五进行？实际上，现在周三、周四和周五都有讨论课，我们正在努力调整，因为我们希望所有内容都安排在周五。
- en: if we could because then it makes what you learn in section a little easier
    with respect to the。 lectures but certainly drop us a note on piazza if you have
    a strong preference for something other。 than Friday but right now we do have
    a few sections on Wednesday and Thursday everyone in these groups。 should have
    clear responsibilities you'll evaluate your teammates at the end of each project
    to kind。
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 如果可能的话，这样会让你在第一部分学到的内容更容易理解，特别是与讲座相关的内容。但如果你有强烈的偏好，想要选择其他时间而不是周五，请一定在 Piazza
    上给我们留言。现在我们确实有一些小组安排在周三和周四，每个小组成员都应该有明确的责任，你们将在每个项目结束时评估队友的表现。
- en: of say what your view was about how they do we'll talk more about that at the
    end of project one。 and you're going to learn basically about how to work as a
    team and typically people who try to。 divide things up by task oh yeah you do
    you know bullets one two and three and i'll do bullets four。 five and six really
    doesn't work well and you'll see why that is as we get a little further in。
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，大家没有表达清楚自己的观点或者怎么做，关于这个我们会在项目一结束时再讨论。你们将基本上学习如何作为一个团队合作，通常那些试图按任务分配的团队，哦，你做一二三，我做四五六，通常并不奏效，你们会看到为什么到了后面会这样。
- en: because you know you go off your separate ways and you come back and they don't
    integrate properly。 and you know then you got a panic and figure out what to do
    so there is a question about will。 things still be recorded if we're in person
    so we are set up for screencast so yes i think。 the other thing is we might do
    this zoom kind of thing even in person we're not quite sure yet that's。
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 因为你知道，你们会分开，各自走自己的路，然后回来时没有很好地融合在一起。然后你就会慌了，开始琢磨接下来该怎么办。所以有一个问题是：如果我们是面对面的，内容还会被录制吗？我们已经准备好了屏幕录制，所以是的，我认为没问题。还有一点是，即使我们面对面，我们可能还是会用类似
    Zoom 这样的方式，我们现在还不确定。
- en: going to depend on how resources go you should try even when things are recorded
    though to come to。 to lecture because then you can actually ask questions and
    see how things are going。 you know group projects are also about communicating
    with a supervisor like you wouldn't。 the real world and that's going to be your
    TA and so we'll talk more about how to make this work but。
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这将取决于资源的安排，即使内容已经录制，你也应该尽量参加讲座，因为那样你可以提问，了解进展情况。你知道，团队项目还涉及到与导师的沟通，就像你在真实世界中的工作一样，那将是你的助教。我们会进一步讨论如何使这一切顺利进行。
- en: the group projects are essential to this class and they are a little slice of
    reality okay。 so getting started everyone doesn't matter whether you're on the
    waitlist or in concurrent。 enrollment if you have the chance of getting into this
    class start homework zero right away。 okay if it's not up yet it's going to be
    up today i think um project zero will be early next week。
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 小组项目对于这门课至关重要，它们是现实的一小部分。好的，所以大家开始吧，不管你是在候补名单上还是在并行注册，只要有机会进入这门课，就立刻开始做作业零。如果现在还没有发布，它今天应该会发布，我想，项目零会在下周初开始。
- en: get going on that as well okay oh and uh hear from the TAs that homework zero
    is already out good。 it'll help you do things like get your github account set
    up the virtual machine environment。 get familiar with all the tools how to submit
    to the autograder etc okay um first two weeks you can。 attend any section you
    want i think we'll give more details on piazza about this but once we form。
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 也请尽早开始做这些，好的，哦，听说助教们已经发布了作业零，太好了。这将帮助你们做一些事情，比如设置 GitHub 账户、虚拟机环境、熟悉所有工具、如何提交给自动评分系统等。好的，前两周你们可以参加任何一个小组。我想我们会在
    Piazza 上提供更多细节，但一旦我们分组。
- en: groups then the section attendance is going to be mandatory um and because we
    want to make sure that。 again that your TA knows how you're doing and also it's
    important to go to section so you can get。 your questions answered because we
    don't want anybody lost this is the uh no student left behind。 kind of mode here
    okay um so projects are going to be choir uh programming in C and so you're going。
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 小组出勤将是强制性的，因为我们希望确保助教了解你们的进展，同时参加小组课也很重要，这样你们可以得到问题的解答，因为我们不希望有人迷失在课程中。这是我们“没有学生掉队”模式的核心，好的。项目将要求你们使用
    C 编程。
- en: to need to be comfortable with pointers you're going to be need to be comfortable
    with memory。 management and debugging with gdb um and so this is going to be a
    larger and more sophisticated。 code base than you ever ran into in 61c um so one
    of the things that we haven't posted exactly when。 yet but it's coming up in the
    next two weeks is a review session on the C language to kind of。
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 你们需要对指针感到舒适，必须对内存管理和使用 GDB 调试感到自如。所以这将比你们在 61C 课程中遇到的代码库要大得多、复杂得多。我们还没有准确发布具体时间，但它将在未来两周内发布，那就是关于
    C 语言的复习课程，旨在帮助你们。
- en: give you a bunch of things to think about but we also have uh resources on the
    course website。 we have ebooks on git and C there's a programming reference still
    in beta that was written by folks。 at Berkeley uh which is basically in the uh
    ladder uh slash ladder and uh first two uh sections are。 also going to have some
    dedication to programming and debugging review okay so the tentative breakdown。
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 给你们提供了一些需要思考的内容，但我们也在课程网站上提供了一些资源。我们有关于 Git 和 C 的电子书，还有一本仍在 Beta 阶段的编程参考手册，是由伯克利的同学们编写的。它基本上是在阶梯（ladder）和第一部分的两节内容上，也会涉及一些编程和调试的复习，好的，这是初步的安排。
- en: for grading is 36% uh over three midterms 12% each um the tentative days are
    thurs our thurs days。 two seventeen three seventeen four twenty eight um time
    is uh not quite yet set it's going to depend。 on when we can get rooms and uh
    the midterms are um mostly going to be focused on the piece that was。 in that
    midterm chunk so thinking this is dividing the term into three pieces but we're
    going to。
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 评分占比为 36%，包括三次期中考试，每次占 12%。初步安排的日期是星期四，分别是 2月17日、3月17日、4月28日。具体时间尚未确定，将根据我们能找到的教室安排。而期中考试主要会集中在那个时间段内的内容。所以可以理解为本学期将被分为三个部分，但我们还会进一步细分。
- en: assume that you remember everything from the previous midterm because uh there
    may be questions。 that have a context based on previous things so the midterms
    are certainly going to be focused on。 the new material but you uh maybe ask things
    having to do with previous material um all right and uh。 36% on projects 18% on
    homework etc okay um participation is going to matter so that's another。
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你们记得之前期中考试的所有内容，因为可能会有基于之前内容的背景问题。所以期中考试当然会集中在新材料上，但你们也可能会被问到和之前的材料相关的内容，好的。项目占
    36%，作业占 18%，等等。参与度也很重要，这也是另一个因素。
- en: reason for going to section okay etc so the other thing we always have to talk
    about is there is。 the personal integrity uh student honor code which is you know
    as a member of the UC Berkeley community。 I act with honesty integrity and respect
    for others okay so explaining it you got to be careful all。 right do not just
    give people your answers don't copy answers from other people because we're running。
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 参加课程的理由，好的，等等。所以我们总是必须谈到的另一件事是个人诚信和学生荣誉守则，作为加州大学伯克利分校社区的一员，我必须以诚实、正直和尊重他人的态度行事。好的，解释一下，你必须小心，明白吗？不要把你的答案直接给别人，也不要抄袭别人的答案，因为我们会对这些进行检查。
- en: software tools to catch that sort of thing and it's also very dishonest okay
    so explaining a concept。 somebody in another group uh might be okay conceptually
    discussing maybe algorithms or testing strategies。 might be okay discussing debugging
    approaches with other groups okay searching online for generic。 algorithms uh
    these things are probably okay okay what's not okay is sharing code or test cases
    with。
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有软件工具来发现这种情况，这也是非常不诚实的。好的，向另一个小组解释概念可能是可以的，概念性地讨论算法或测试策略可能是可以的，与其他小组讨论调试方法也许是可以的，在线搜索通用算法这些可能是可以的。好的，问题是共享代码或测试用例是不允许的。
- en: other groups uh copying or reading other groups okay copying or reading online
    code or test cases。 from prior years okay helping somebody in another group to
    debug their code okay we had we've had。 situations in the past where somebody
    from one group sat down with another group and helped them。 debug okay and the
    net effect was both groups got kind of tied into a into a cheating scandal okay。
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 其他小组，嗯，抄袭或查看其他小组的代码，好的，抄袭或查看往年在线的代码或测试用例，嗯，帮助其他小组调试代码，好的，我们过去曾遇到过这样的情况：一个小组的人坐下来帮助另一个小组调试代码，结果两个小组都卷入了作弊丑闻。
- en: so you do not want to do that um and it's it's not honest either okay。 so if
    you're not sure certainly ask your TA whether something's okay but we're going
    to be。 running comparisons of project submissions and homework submissions against
    prior years and so。 just do your own work thanks everything easier for everybody
    okay。
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你不想这么做，嗯，这也不诚实。好的，如果你不确定，当然可以问你的助教某些事情是否合适，但我们将对项目提交和作业提交与往年的进行对比。所以，做自己的工作吧，这样能让大家都更轻松，谢谢。
- en: you know and don't put a friend in a bad position by asking for help that they
    shouldn't give okay。 we've we've had you know students get tied up because they
    were gilted into giving somebody their。 answers we're just just don't do that
    to your friend okay so goals from lecture interactive okay。 ask questions in the
    chat for now but as we go forward um you'll get to actually hopefully ask。
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道，不要让朋友陷入不该帮忙的尴尬境地。好的，我们遇到过学生因为被强迫帮忙而陷入困境，因为他们把自己的答案给了别人。我们只是希望你不要这么做，好的，不要让朋友陷入这种境地。好，所以讲座的目标是互动的，好的，现在在聊天中提问，但随着我们继续进行，你将有机会，嗯，真正提问。
- en: them in person all right um you know let's finish up here we have a few more
    minutes but。 just uh unless they're actually i'm going to pause for a moment and
    see are there any more。 questions about adminest trivia there is somebody who
    asked should they start looking for a group。 even though they're on the waitlist
    you know i would watch where you are on the waitlist and maybe。
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，嗯，你知道，我们快结束了，还有几分钟。但，嗯，除非他们真的，我暂停一下，看看是否还有其他关于行政事务的问题。有一个人问他们是否应该开始寻找小组，尽管他们在等候名单上。你知道，我会关注你在等候名单的位置，也许。
- en: start thinking about who you might want to work with um you know we don't form
    our groups until after。 we close out the waitlist but um you know it wouldn't
    hurt to know somebody uh that you're thinking you。 might want to work with so
    if you're on the waitlist you're not in the class it's possible still that。 you
    could get in it's also possible you might not so um and the question is is the
    participation grade。
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 开始考虑一下你可能想要合作的伙伴，嗯，你知道我们直到等候名单关闭后才会形成小组。但是，嗯，认识一些你可能想要合作的人是没有坏处的。如果你在等候名单上，说明你还没有进入课堂，但仍有可能被选上，也有可能不会。所以，嗯，问题是参与分数。
- en: just from section attendance um it's section attendance it's uh office hours
    it's um potentially。 class attendance uh maybe we might do that um we'll let you
    know but just participate and we'll be。 watching okay so to close out today uh
    you know what makes an operating system is exciting and。
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 仅仅从课程出勤来看，嗯，就是课程出勤，嗯，是办公室时间，嗯，可能的话，课堂出勤，嗯，也许我们会做这个，嗯，我们会通知你们的，但只要参与，我们会在旁边观察，好吗？所以今天的总结，嗯，你知道，是什么让操作系统变得如此令人兴奋。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_61.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_61.png)'
- en: challenging um one of the things i like this picture okay because this is really
    talking about the world。 as a single huge system okay from little mem sensors
    this is a um a micro uh i don't know insect。 that can walk that was actually fabricated
    out of silicon um cars you know you start talking about。 Teslas these days that
    are constantly tied in all the time and getting updates continuously。
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 挑战性，嗯，我喜欢这张图片，因为这实际上是在谈论世界作为一个单一的巨大系统，嗯，从小型内存传感器开始，这是一只微型，嗯，我不知道算不算昆虫，但它可以行走，实际上是由硅制成的，嗯，汽车，你知道，最近在谈论特斯拉时，它们一直都在连接，并且不断接收更新。
- en: you've got big cloud systems you've got huge clusters really the world is one
    big system and。 that's exciting because uh there are first of all how do you make
    this work but secondly there are。 all these interesting emergent effects when
    lots of things are talking to other things and the。 complexity of the system starts
    giving an interesting behavior that you weren't expecting now sometimes。
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 你有大型云系统，你有巨大的集群，实际上，世界就是一个巨大的系统，这令人兴奋，因为，嗯，首先，如何让它运作，其次，随着大量事物相互连接，系统的复杂性开始呈现出一些你没有预料到的有趣行为。
- en: that behavior is good sometimes that behavior is not good um and so you know
    most of what we do in。 this class we'll be talking about how to um to uh rein
    in the complexity to try to get a predictive。 response out of things but um it's
    still quite interesting okay um you know the other thing is。
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 那种行为有时候是好的，有时候是不好的，嗯，所以你知道我们在这门课上做的大多数事情就是讨论如何控制复杂性，试图从中获得可预测的反应，但是，嗯，它依然非常有趣，好吗？嗯，你知道，另一件事是。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_63.png)'
  id: totrans-217
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_63.png)'
- en: really technology trends with Moore's law um here's a you've heard Moore's law
    probably from the day。 you got here to Berkeley and if you kind of look really
    what was interesting was if you look at。 this graph over in the left um Gordon
    Moore was asked at a conference back when the 4004 was the。 most sophisticated
    thing uh out there you know what's going to happen in the future and he drew a
    couple。
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，有时，真正的技术趋势与摩尔定律有关，嗯，你大概从你来到伯克利的那天就听说过摩尔定律，如果你仔细看看，真的很有意思，如果你看看左边的这张图，嗯，戈登·摩尔曾在4004芯片还是最先进的技术时，在一次会议上被问到，未来会发生什么，他画了几张图。
- en: of points on a log linear scale and he drew a line he said this is going to
    happen now that's。 on the one hand patently ridiculous because it's a couple of
    points on a log linear scale means。 that drawing a straight line was predicting
    exponential growth uh but it was true okay and for many many。 many years Moore's
    law was it okay which is pretty exciting uh that we've had this uh doubling in
    the。
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 在对数线性尺度上的几个点，他画了一条线，并说这将会发生。现在，从某种角度看，这显然是荒谬的，因为在对数线性尺度上的几个点意味着画一条直线就预测了指数增长，但它是对的，嗯，多年来，摩尔定律一直是它，嗯，这非常令人兴奋，因为我们经历了这种指数增长的翻倍。
- en: number of transistors that went on for years okay it's been slowing down of
    late but that means。 the complexity of the individual components growing at a
    rapid pace uh leading to the complexity of。 the world system growing at a at a
    rapid pace leading to a need for good operating systems design and。 you guys to
    be able to help with that okay um one of the big challenges that happened along。
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 晶体管的数量持续增长了很多年，嗯，最近有所放缓，但这意味着单个组件的复杂性正在以极快的速度增长，嗯，导致世界系统的复杂性也在快速增长，这就需要良好的操作系统设计，并且你们可以在这方面提供帮助，好吗？嗯，沿着这条线的一个大挑战。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_65.png)'
  id: totrans-221
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_65.png)'
- en: the years is you've probably seen this somewhere around 2002 we were taking
    Moore's law and turning。 it into constantly growing CPU performance and so you
    could be lazy and say well this the computers。 of this era are not fast enough
    for what I need uh but it's okay because I'll just wait a couple of。 years and
    um since performance was doubling every 18 months that was fine the interesting
    thing。
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能在2002年左右看到过这种情况，我们当时将摩尔定律转化为不断增长的CPU性能，所以你可以懒惰地说，嗯，这个时代的电脑对于我的需求来说不够快，但是没关系，因为我只需要再等几年。由于性能每18个月翻倍，这一切都可以接受。有趣的是。
- en: however is that uh around 2002 that stopped working for lots of reasons and
    we got multi-core now all。 of a sudden we had to figure out how to build big parallel
    systems okay and that uh that led to。 all sorts of interesting needs for new ways
    to program okay so， another problem was power density。 um if you look yeah so
    we don't have to worry about um Anthony just put you don't have to worry。
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，到了2002年左右，这种方式不再奏效，原因有很多，我们进入了多核时代。突然之间，我们不得不弄清楚如何构建大型并行系统，这也催生了对新编程方式的各种需求。因此，另一个问题就是功率密度。如果你看一下数据，实际上我们不必担心，安东尼刚刚说了，你不需要担心。
- en: about participation while we're virtual so another challenge here was power
    density and really if you。 didn't um slow down the way that uh things were getting
    faster you're gonna have to have uh the。 power of a rocket nozzle in laptops on
    your lap which is probably a bad idea so part of what。 happened with multi-core
    was really about uh coming up with another way of using all those transistors。
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 参与的方式虽然是虚拟的，但另一个挑战是功率密度。实际上，如果你不减缓硬件变得越来越快的速度，你可能就得在笔记本电脑上放置火箭喷嘴一样的功率，这显然不是一个好主意。因此，多核的出现实际上是在想方设法利用这些晶体管的另一种方式。
- en: okay and then in about 2007 people started talking about big chips with or many
    cores okay like this。 is the Intel 80 core chip that was in 2007 um 2010 had 24
    tiles of two cores each and now uh 56。 cores times two is certainly there in the
    high server end and so you know the question about how。 do you program these things
    standard joke for a long time was well i've got all these cores i'll use。
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 到2007年左右，人们开始讨论具有多个核心的大芯片。例如，这是2007年发布的英特尔80核芯片，2010年发布的芯片有24个模块，每个模块包含两个核心，现在56核乘以2的配置已经出现在高端服务器中。那么，问题就来了，如何编程这些东西呢？这是长期以来的一个笑话，我有这么多的核心，我该如何利用它们。
- en: two of them for video and audio one for word processing one for my browser and
    you know uh。 the rest of them for virus checking that's it yeah um you know so
    that really started bringing on。 the need for parallelism in this class we fully
    embrace parallelism um and um that's part of you。
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 用两个显示器来处理视频和音频，一个用于文字处理，一个用于浏览器，剩下的用来做病毒检查，就是这样。事实上，这开始推动了并行计算的需求。在这个阶段，我们完全拥抱了并行计算，这是你的一部分。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_67.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_67.png)'
- en: know the interesting parts here right okay so um Moore's law has been ending
    um we're no longer。 getting two times transistors every 18 months or even every
    24 months um and so that's actually。 changing things a little bit again uh in
    different ways and we'll have to see we'll talk more about。
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 有趣的地方在于，摩尔定律已经接近尾声，我们不再每18个月或甚至24个月就能获得两倍的晶体管数量了，这实际上改变了一些事情，方式也发生了变化。我们将讨论更多的内容，看看未来会发生什么。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_69.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_69.png)'
- en: that as we go storage capacity still growing drastically okay and this is sort
    of showing capacity。 on a log linear scale and so we're you know um one of my
    favorite SSD uh items that fits into a。 three and a half inch form factor is uh
    has a terror excuse me has um terabytes uh multi terabytes。 ssp okay hundred terabytes
    on one little uh three and a half inch drive okay and we'll talk about that。
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 随着存储容量的不断增长，这里展示的是存储容量的对数线性图。比如我最喜欢的SSD之一，适配三英寸半的形态因子，它的容量是，抱歉，应该是多达数TB，甚至上百TB的存储容量，百TB的存储，竟然可以放在一块三英寸半的硬盘里。我们将进一步讨论这个话题。
- en: but a hundred terabytes is not a small amount of memory and a three and a half
    inch drive is not。 very big so it's kind of we have a future of a ridiculous amount
    of storage and uh we'll talk。 a lot about how to protect that storage so it doesn't
    get lost um society is increasingly。
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 但百TB的存储容量可不是一个小数目，而三英寸半的硬盘也不大。所以可以说，我们正走向一个拥有巨量存储的未来，我们将深入讨论如何保护这些存储，以免它们丢失。随着社会日益数字化，存储变得越来越重要。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_71.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_71.png)'
- en: protected connected which means we have all of these security breaches going
    on we're gonna talk。
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 保护和连接，这意味着我们面临着所有这些安全漏洞，我们将讨论。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_73.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_73.png)'
- en: a lot about security as we go on okay um capacity the network keeps increasing
    okay um you know that's。 another interesting thing it means that we can communicate
    with the far reaches of the world。 ever faster which means that our system that
    we're tying together is doing ever more things ever。 quicker and uh that could
    either be really fast way of uh failing or uh very fast way of getting。
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 随着网络的容量不断增加，嗯，你知道，这意味着我们能够以更快的速度与世界的遥远角落进行通信。这也意味着我们所连接的系统做的事情会越来越多，速度也会越来越快，而这可能是一个非常快速的失败方式，或者是一个非常快速的成功方式。
- en: additional functionality depending on how you design things now the question
    here is do you need。 161 to take this class you do not um but uh 161 is a great
    class so i highly recommended either before。 or after this one okay um and uh
    we can talk more about that if you like so not only pcs are connected。
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 额外的功能取决于你现在的设计方式，问题是你是否需要。161这门课你不一定需要参加，但161是一门很棒的课程，所以我强烈推荐在这门课之前或之后参加。好吧，如果你愿意，我们可以再详细讨论一下。并且不仅仅是PC是连接的。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_75.png)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_75.png)'
- en: the internet of course um lots of uh phones but even phones aren't the big thing
    these days little。 devices um you know we all have a fit bit uh you know or an
    apple watch we all have little sensors。 everywhere okay so that's really this
    slide again okay we're down to the internet of things where。
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 当然是互联网，嗯，还有许多手机，但即使是手机也不是现在的主流，越来越多的小型设备，嗯，你知道，我们每个人都有一个Fitbit，或者Apple Watch，我们身边有各种小型传感器。好吧，这实际上又是这一张幻灯片。现在我们已经进入了物联网的时代。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_77.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_77.png)'
- en: every person has hundreds of CPUs working for them every day okay so what's
    an operating system。
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 每个人每天都有成百上千的CPU在为他们工作，好吧，那操作系统是什么呢？
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_79.png)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_79.png)'
- en: again well it's a referee managing resources protection isolation it's an illusionist
    providing。 clean easy to use abstractions it's glue with common services and throughout
    the term we're going to be。 thinking a lot about that okay and we're going to
    teach you a lot about that so i'm going to end。 there and um the thing to keep
    in mind uh is as we go forward when i say in conclusion okay typically。
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 再说一次，操作系统是资源管理的裁判，是保护和隔离的守护者，它是一个幻术师，提供简洁易用的抽象层，它是粘合剂，提供常见的服务。在整个学期中，我们会一直思考这一点，好吧，我们也将会教你很多相关的内容。那么我将在这里结束。嗯，请记住，在接下来的学习过程中，每当我说“总的来说”，通常是...
- en: people tune out but really what i'd like you to do at that point is bring your
    attention back。 so that i can give you a quick summary of what we talked about
    so in conclusion we want to talk。 about providing convenient abstractions to handle
    diverse hardware we're going to coordinate resources。 and protect users from each
    other using a few critical hardware mechanisms simplify application。
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 人们会走神，但实际上我希望你在那个时候重新集中注意力。这样我可以给你一个我们讨论内容的简短总结。所以，总的来说，我们想讨论的是提供方便的抽象层来处理多样化的硬件，我们将协调资源，并利用一些关键的硬件机制保护用户互不干扰，从而简化应用程序。
- en: development providing standard services we're going to provide fault container
    fault containment。 fault tolerance fault recovery and cs 162 is going to combine
    things from many different fields together。 and i'm looking forward to going through
    this with you and uh let's have a great term。 thank you thanks for posting thank
    you。
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 开发提供标准服务，我们将提供故障容器、故障隔离、故障恢复，而CS 162将会把许多不同领域的内容结合在一起。我期待和大家一起深入学习，也希望这学期我们能够度过一个美好的时光。谢谢，谢谢大家的发言，谢谢。
- en: '![](img/ae0f44ab6904d80ba96175b3495ad498_81.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ae0f44ab6904d80ba96175b3495ad498_81.png)'
- en: '[silence]。'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '[silence]。'
