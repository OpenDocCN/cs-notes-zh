- en: P3：02-02-querying-relational-databases.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P3：02-02-querying-relational-databases.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
- en: In this video we're going to learn about querying relational databases。 We're
    not going to focus on a specific query language， we'll do that later。 we're just
    going to talk about querying relational databases in general。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个视频中，我们将学习如何查询关系型数据库。我们不会专注于某个特定的查询语言，我们稍后会讲到，我们只会讨论如何一般性地查询关系型数据库。
- en: '![](img/c42faba186df53fface547542327f2cf_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c42faba186df53fface547542327f2cf_1.png)'
- en: Let's start by talking about the basic steps in creating and using a relational
    database。 So by the way I should mention that database people have this habit
    of。 drawing databases and database systems as gigantic disks， so I'll be using
    that same habit。 So the first step is to design the schema of the database and
    then create the schema。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先谈谈创建和使用关系型数据库的基本步骤。顺便提一下，我应该提到，数据库人员有个习惯，把数据库和数据库系统画成巨大的磁盘，所以我也会沿用这个习惯。第一步是设计数据库的模式，然后创建模式。
- en: using a data definition language。 So as we discussed in previous videos。 in
    a relational database the schema， considers the schema consists of the structure
    of the relations and the attributes of those relations。 So we set those up inside
    our big disk。 Once that's ready。 the next step is to load up the database with
    the initial data。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 使用数据定义语言。所以正如我们在之前的视频中讨论的，在关系型数据库中，模式考虑了关系的结构和这些关系的属性。因此，我们将在我们的大磁盘中设置这些内容。一旦准备好了，下一步就是用初始数据加载数据库。
- en: So it's fairly common for the database to be initially loaded from data that
    comes from an outside source。 Maybe the data is just stored in files of some type
    and then that data could be loaded into the database。 Once the data is loaded
    and we have a bunch of tuples in our relation。 now we're ready for the fun part，
    which is to query and modify the data。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 所以数据库通常会从外部来源的数据中初始化加载。可能这些数据只是存储在某种类型的文件中，然后这些数据可以被加载到数据库中。一旦数据加载完成，并且我们有了一堆元组在我们的关系中，我们就准备开始有趣的部分了——查询和修改数据。
- en: And so that happens continuously over time as long as the database is in existence。
    So let's just say for now that we're going to have human users that are directly
    querying the database。 In reality that typically happens through say an application
    or a website。 So a user will come along， we'll ask a question of the database
    and we'll get an answer。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，只要数据库存在，这个过程会不断发生。暂时假设我们有人工用户直接查询数据库。实际上，这通常是通过应用程序或网站来完成的。所以一个用户会过来，向数据库提一个问题，我们会得到一个答案。
- en: It might come along and ask another question， Q2， and get another answer back。
    The same human or maybe a different human might ask to modify the database so
    they might want to insert new data or update some of the data。 The database will
    come back and say， "Okay， I made that change for you。"。 So that's the basic paradigm
    of querying and updating relational databases。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 他可能会再问另一个问题，Q2，并得到另一个答案。相同的用户或也许是不同的用户可能会要求修改数据库，他们可能想插入新数据或更新一些数据。数据库会回应，“好的，我为你做了这个更改。”这就是查询和更新关系型数据库的基本模式。
- en: '![](img/c42faba186df53fface547542327f2cf_3.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c42faba186df53fface547542327f2cf_3.png)'
- en: Relational databases support ad hoc queries in high level languages。 By ad hoc。
    I mean that you can pose queries that you didn't think of in advance。 So it's
    not necessary to write long programs for specific queries。 Rather the language
    can be used to pose a query as you think about what you want to ask。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 关系型数据库支持高层次语言中的临时查询。所谓临时查询，意思是你可以提出你事先没有想到的问题。所以不需要为特定的查询编写冗长的程序。相反，这种语言可以用来在你想到想要询问的问题时，直接提出查询。
- en: And as mentioned in previous videos， the languages supported by relational systems
    are high level。 meaning you can write in a fairly compact fashion， rather complicated
    queries。 and you don't have to write the algorithms that get the data out of the
    database。 So let's look at an example of a few queries。 Let's go again to our
    imaginary database of students who are applying to colleges。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 如前面的视频所述，关系型系统支持的语言是高级语言。意味着你可以以相对紧凑的方式编写相当复杂的查询，而且你不需要编写从数据库中获取数据的算法。所以我们来看一个查询的例子。让我们再次回到我们虚构的学生数据库，他们正在申请大学。
- en: And here's just three examples of the types of things that you might ask of
    a relational database。 You might want to get all students whose GPA is greater
    than 3。7 who are applying to Stanford and MIT only。 You might want to get all
    engineering departments in California with fewer than 500 applicants。 Or you might
    ask for the college with the highest average except rate over the last five years。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有三个例子，展示了你可能会对关系数据库提出的查询类型。你可能想获取所有GPA大于3.7且只申请斯坦福和麻省理工学院的学生。你可能想查询所有在加利福尼亚的工程系，且申请人数少于500人的系。或者你可能会查询过去五年内，平均录取率最高的大学。
- en: Now these may seem like fairly complicated queries。 but all of these can be
    written in a few lines in， say， the SQL language。 or a pretty simple expression
    in relational algebra。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这些查询可能看起来有些复杂，但所有这些查询都可以用几行代码写成，比如用SQL语言，或者用关系代数表示则是相当简单的表达式。
- en: '![](img/c42faba186df53fface547542327f2cf_5.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c42faba186df53fface547542327f2cf_5.png)'
- en: So some queries are easier to pose than others。 That's certainly true。 The three
    queries you see here are， as I said， pretty easy to pose。 Now some queries are
    easier for the database system to execute efficiently than others。 And interestingly，
    it's not necessarily -- these two things aren't necessarily correlated。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，有些查询比其他的容易提出，这是肯定的。你看到的这三个查询，正如我所说，都相对容易提出。现在，有些查询对于数据库系统来说，比其他查询更容易高效执行。很有趣的是，这两者并不一定是相关的。
- en: There are some queries that are easy to pose， but hard to execute efficiently。
    and some that are vice versa。 Now just a bit about terminology。 It's frequently
    people talk about the query language of the database system。 That's usually used
    sort of synonymously with the DML or data manipulation language。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 有些查询容易提出，但很难高效执行；而有些查询则恰恰相反。现在稍微讲一下术语。通常人们会提到数据库系统的查询语言。这通常与DML（数据操控语言）或数据操作语言是同义的。
- en: which usually includes not only querying， but also data modifications。 In all
    relational query languages， when you ask a query over a set of relations。 you
    get a relation as a result。 So let's run a query queue， say。 over these three
    relations we've shown here， and what we'll get back is another relation。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常不仅包括查询，还包括数据修改。在所有关系查询语言中，当你对一组关系执行查询时，你会得到一个关系作为结果。所以让我们对这里展示的三组关系运行一个查询队列，假设是这样。我们得到的结果将是另一个关系。
- en: When you get back the same type of object that you query， that's known as closure
    of a language。 and it really is a nice feature。 For example， when I want to run
    another query， say， Q2。 that query could be posed over the answer in my first
    query。 and could even combine that answer with some of the existing relations
    in the database。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 当你得到的结果与查询对象类型相同时，这被称为语言的闭包特性，它确实是一个很好的功能。例如，当我想执行另一个查询，比如Q2时，那个查询可以基于我第一次查询的答案来执行，甚至可以将该答案与数据库中现有的关系结合。
- en: That's known as compositionality， the ability to run a query over the result
    of a previous query。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为组合性，指的是在一个查询的结果上再次执行查询的能力。
- en: '![](img/c42faba186df53fface547542327f2cf_7.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c42faba186df53fface547542327f2cf_7.png)'
- en: Now let me talk briefly about two query languages。 We'll be learning these languages
    in detail later。 but I'm just going to give the basic flavor of the languages
    here。 Relational algebra is a formal language。 Well， it's an algebra， as you can
    tell by its name。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我简要讲一下两种查询语言。我们稍后会详细学习这些语言，但在这里我只会简单介绍它们的基本特点。关系代数是一种形式语言，嗯，从它的名字就能看出它是一种代数。
- en: So it's very theoretically well-grounded。 SQL， by contrast。 is what I'll call
    an actual language or an implemented language。 That's the one you're going to
    run on an actual deployed database application。 But the SQL language does have，
    as is foundation， relational algebra。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 所以它在理论上是有坚实基础的。与此相比，SQL是我所说的实际语言或已实现的语言。那是你将在实际部署的数据库应用程序上运行的语言。但SQL语言的基础是关系代数。
- en: That's how the semantics of the SQL language are defined。 Now let me just give
    you a flavor of these two languages。 and I'm going to write one query in each
    of the two languages。 So let me get rid of this little line here。 Let's start
    in relational algebra。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是SQL语言语义的定义方式。现在让我给你们展示这两种语言的一个简单例子，我将在这两种语言中各写一个查询。所以让我先去掉这条小线。我们从关系代数开始。
- en: So we're looking for the IDs of students whose GPA is greater than 3。7。 and
    they've applied to Stanford。 In relational algebra。 the basic operators of the
    language are Greek symbols。 Again， we'll learn the details later。 but this particular
    expression would be written with a pi followed by a sigma。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们正在寻找那些GPA大于3.7并且申请了斯坦福大学的学生的ID。在关系代数中，语言的基本操作符是希腊字母。再说一遍，我们稍后会学习具体的细节，但这个特定的表达式会用一个pi符号，后跟一个sigma符号来表示。
- en: The pi says we're going to get the ID。 The sigma says we want students whose
    GPA is greater than 3。7， and the college that the students have applied to is
    Stanford。 And then that will operate on what's called the natural join of the
    student relation with the apply relation。 Again， we'll learn the details of that
    in a later video。 Now here's the same query in SQL。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: pi符号表示我们要获取ID。sigma符号表示我们想要那些GPA大于3.7，并且申请了斯坦福大学的学生。然后，这将作用于学生关系和申请关系的自然连接。再说一遍，我们会在后续的视频中学习这些细节。现在，这就是SQL中的相同查询。
- en: and this is something that you would actually run on a deployed database system。
    And the SQL query is in fact directly equivalent to the relational algebra query。
    Now pedagogically。 I would highly recommend that you learn the relational algebra
    by watching the relational algebra videos。 before you move on to the SQL videos，
    but I'm not going to absolutely require that。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 这是你实际在部署的数据库系统中运行的查询。SQL查询实际上与关系代数查询是直接等价的。从教学角度来看，我强烈建议你通过观看关系代数视频来学习关系代数，然后再学习SQL视频，但我并不会强制要求你这样做。
- en: So if you're in a big hurry to learn SQL right away， you may move ahead to the
    SQL videos。 If you're interested in the formal foundations and a deeper understanding。
    I recommend moving next to the relational algebra videos。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果你急于马上学习SQL，你可以直接跳到SQL视频。如果你对正式的基础和更深层次的理解感兴趣，我建议你接着观看关系代数的视频。
- en: '![](img/c42faba186df53fface547542327f2cf_9.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c42faba186df53fface547542327f2cf_9.png)'
