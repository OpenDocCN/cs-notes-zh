- en: P28：DBClass Office Hours 02_21_2013 - 哈库那玛塔塔i - BV1R4411u7dt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P28：DBClass办公时间 02_21_2013 - 哈库那玛塔塔i - BV1R4411u7dt
- en: Hello students， welcome to Office Hours for the Week。 So I will be doing this。
    video and also a video which goes through the midterm exam and explains the。 solutions
    to some of the trickier problems。 But this video is just to help。 you with XML
    querying and so what I'm going to do is much like my last office。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 同学们，欢迎来到这一周的办公时间。我将制作这个视频，同时还会有一个视频介绍期中考试并解释一些较难问题的解答。但这个视频主要是帮助你们进行XML查询，因此我将像上次的办公时间一样操作。
- en: hours I'm going to go through the extra practice exercises for XML querying。
    Actually I'm probably not going to go through every single extra practice。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 办公时间，我将一起完成XML查询的额外练习题。实际上，我可能不会逐一完成每一个额外练习。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_1.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_1.png)'
- en: exercise because the world countries have 12 extra practice exercises so I'm。
    going to get some variety。 I'm going to do the course catalog extra practice all，
    three of them。 Two of the world countries extra practice exercises and then I'm。
    going to do the XSLT for both countries and and the course catalog and that's。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 练习，因为各国有12个额外的练习题，我将做一些变化。我会做课程目录的额外练习，所有三个题目。做两道与各国有关的额外练习，然后做XSLT处理这两个国家和课程目录的数据。
- en: the extra practice set。 So first I'm just going to get started with the course。
    catalog X path and X query extra practice exercises and so we'll get started with。
    the first question which just asks you to return the course number of the course。
    that is cross-listed as linguistics 180 and so as a Stanford student who's taken。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 额外练习集。所以首先我将开始进行课程目录XPath和XQuery的额外练习题。我们将开始第一个问题，它要求返回被列为语言学180的课程编号。作为一名已修过课程的斯坦福学生。
- en: this course I remember that it's CS124 but I can show you how to do this， in
    in X path。 So all of these exercises are going to require you to refer to the。
    document and so you just do that with doccourses。xml and so we need to find。 out
    a little bit more about the structure of the data to know which course is。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 这门课我记得是CS124，但我可以展示如何在XPath中实现。所以这些练习都需要你们参考文档，你们只需要使用doccourses.xml。我们需要了解数据结构的一些细节，才能知道哪个课程是。
- en: cross-listed as linguistics 180 so let's just take a quick look at the data
    set。 So。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 跨列为语言学180，所以我们快速看一下数据集。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_3.png)'
  id: totrans-8
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_3.png)'
- en: let me see if I can get this in frame better。 So we see that it's structured。
    like this where we have a course catalog root element and then the。 department
    information and then information on the courses for each of。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 让我看看能否更好地将其放入框架中。所以我们看到它是这样结构化的，首先是课程目录的根元素，然后是部门信息，再往下是每个课程的信息。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_5.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_5.png)'
- en: the departments and so we want to find out where we have pre-requisite。 information
    and so actually if we look in here okay CS124 within the。 description field underneath
    that course we see that we have the text cross-listed。 as Ling 180 and so that's
    how cross-listed courses happen in this， dataset。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 各个部门，我们想要了解哪里有先决条件信息。所以如果我们在这里查看，好的，CS124课程的描述字段下，我们看到有跨列的文本，列为Ling 180，这就是在这个数据集中，跨列课程的方式。
- en: So we know that we need to return the course number which in this case is。 CS124
    of a course that just has it in its description cross-listed as Ling 180。 and
    so if we go back to our text box here so we see first that we're going to。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们知道，我们需要返回课程编号，在这种情况下是CS124，该课程在描述中列出为Ling 180。如果我们回到文本框中查看，我们首先会看到。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_7.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_7.png)'
- en: need a course and eventually we're going to need to return its number and if
    you。 remember the number was an attribute and not a child so we have to do that
    by。 doing data at number and so right now this will just give us the course numbers。
    of every course because this double slash will just double slash course will。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 需要找到一个课程，最终我们需要返回它的编号。如果你记得，编号是一个属性，而不是子元素，所以我们需要通过使用data@number来获取。因此，现在这将给我们返回每个课程的编号，因为这个双斜杠表示我们需要获取所有课程。
- en: match any element in the data which is a course and then it will just navigate。
    from there and pull out the number。 So that's not really what we want we want
    to。 do some filtering on the course itself and so what we typically do is do that。
    inside of brackets like this and if we remember it's that the description。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 匹配数据中的任何课程元素，然后它将从那里导航并提取出编号。所以这其实不是我们想要的，我们想要的是在课程本身上做一些筛选，通常我们会这样做，即在方括号中进行筛选。如果我们记得正确的话，就是描述。
- en: contains some text namely cross-listed as Ling 180 and so we can do that text。
    containment is really simple in XPath you just do contains and then you do what。
    the child element from here is so it's description and then the text that we。
    were after was cross-listed as Ling 180 and barring any typos this should be。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 包含一些文本，即"cross-listed as Ling 180"，所以我们可以进行文本包含的操作。在XPath中，文本包含操作非常简单，你只需要使用contains，然后输入子元素，这里是描述（description），然后我们要查找的文本是"cross-listed
    as Ling 180"，如果没有任何拼写错误，这应该是。
- en: correct so let's just check it out real quick。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 正确，所以让我们快速检查一下。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_9.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_9.png)'
- en: All right great it's correct it correctly returns to us CS 124 so awesome。 Now
    let's。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 很好，正确，它正确地返回了CS 124，太棒了。现在让我们。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_11.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_11.png)'
- en: move on to question two so return numbers of courses taught by an。 instructor
    with first name Daphne or Julie。 All right and so once once again。 we're going
    to need to start off with this dot courses。 Okay and so again we need。 we need
    to navigate down to courses as we can tell since we're doing our。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来是第二个问题，返回由名字是Daphne或Julie的讲师教授的课程编号。好的，所以我们再次需要从点（dot）课程开始。好的，所以再次强调，我们需要导航到课程，因为我们正在进行。
- en: filtering on courses and then we need to return course numbers so it's sort
    of。 the same basic paradigm here where we are navigating to a course and returning。
    its number and then within the course we'll do some more filtering that should
    be。 course not courses。 Okay so now is a little bit more tricky part so let's
    take a。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在课程上进行筛选，然后我们需要返回课程编号，所以这里的基本模式类似，我们在导航到课程并返回其编号，然后在课程内部，我们将进行更多的筛选，应该是课程而不是多个课程。好了，现在进入稍微复杂一点的部分，让我们来看看。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_13.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_13.png)'
- en: quick look at the data and to see how first names happen。 So we want first names。
    of Julie and Daphne so like this is an example where Julie Zielinski is the。 instructor
    for CS 107 and so we see that underneath course it's under the。 instructors element
    and then we have lecturer and then the first name of the。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 快速查看数据，看看名字如何出现。我们想要的是Daphne和Julie的名字，比如这是一个例子，Julie Zielinski是CS 107的讲师，我们看到在课程下面的讲师元素中，然后我们有讲座者和他们的名字。
- en: lecture or the last name of the lecture but it's not always the case that the。
    instructors the lecturer sometimes in the data they're a professor so sometimes。
    you have instructors professor and then their first name in this case。 Maron's
    Sahami and so we don't want to just match lecturers nor do we want to。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 讲座或讲师的姓氏，但并不是所有时候讲师就是讲座者，有时在数据中他们是教授，所以有时你会遇到讲师和教授，然后是他们的名字，在这个例子中是Maron Sahami。因此我们不仅仅想匹配讲师，也不希望。
- en: just match professors but what we can do is we can navigate down to the。 instructor's
    level and then match any child of instructors we do know that any。 child of instructors
    will either be a lecturer or a professor based on the data。 we have here and you
    can just go through the data to convince yourself of that so。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 只是匹配教授，但我们可以做的是我们可以导航到讲师的层级，然后匹配讲师的任何子元素。我们知道根据现有数据，讲师的任何子元素都会是讲座者或教授。你可以浏览数据来验证这一点。
- en: if we match instructors and then use the star operator the wildcard operator
    then。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们匹配讲师，然后使用星号操作符作为通配符。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_15.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_15.png)'
- en: it will match either lecturer or professor and then we can get the first。 name
    and so hopefully this is a little bit clearer when I actually do this。 okay so
    we've navigated down to our course and we know that we want instructors and。 then
    I claim that we can just use this wildcard operator which is the asterisk。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 它将匹配讲师或教授，然后我们可以获取第一个名字。希望这样做能让这个过程更清晰一些。好的，我们已经导航到课程并且知道我们想要的是讲师。然后我声称我们可以使用这个通配符操作符，即星号（*）。
- en: and that will match anything immediately below instructors which in this case
    is。 either lecturer or professor and so that will get us that and then we do some。
    filtering on either lecture or professor we need first name equal to Daphne or。
    first name is equal to Julie all right so again borrowing any typos this should。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这样就能立即匹配到位于“instructors”下方的任何内容，在这个例子中是讲师或者教授，因此我们能得到这些，然后我们在讲师或教授上做些筛选，要求名字是Daphne或者Julie。好，假设没有任何拼写错误，这应该是对的。
- en: do the trick and let's see great correct so we get CS 107 and CS 228 just as
    we。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 做个演示，看看是否正确，我们得到了CS 107和CS 228，正如我们所期望的那样。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_17.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_17.png)'
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_18.png)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_18.png)'
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_19.png)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_19.png)'
- en: want okay so now let's move on and take a look at question three okay return
    the。 titles of courses that have both a lecture and a professor as instructors。
    and return each title only once okay so this is actually a case where I'm not。
    going to do this in in expat what I'm going to do instead is is is go for an。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，现在让我们继续看一下第三个问题，返回同时拥有讲师和教授作为讲师的课程标题，并且每个标题只返回一次。好了，这实际上是一个我不会使用xpath的情况，相反，我会采取...
- en: x-query expression to do this and so return all titles of courses so in x-query。
    so we are going to want to refer to this document in x-query the sort of。 iteration
    that we tend to do is for each element in some set and then you do。 various operations
    on it so in this case we're returning titles of courses that。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用x-query表达式来实现这一点，所以返回所有课程的标题。在x-query中，我们需要引用这个文档，进行一种遍历操作，通常是对某个集合中的每个元素进行迭代，然后对其执行各种操作，所以在这种情况下，我们返回的是课程的标题。
- en: that have some some specifications and so what we really want to be doing is。
    looking at course elements and so for each course dollar sign C in our。 document
    navigating it down to the course level and this will create a loop。 which will
    just go across all course elements in the data and then we want。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 其中有一些具体的要求，真正需要做的是查看课程元素，因此对于每个课程`$C`，我们在文档中导航到课程级别，这样就能创建一个循环，遍历数据中的所有课程元素，然后我们需要...
- en: them to have both a lecture and a professor as instructors and so the way。 that
    you can tell that there's a lecture as an instructor is just with an。 expression
    like seed slash instructor slash lecturer if that expression is is。 non-empty
    then it will evaluate to true and so you will know that there is a。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 它们要求同时有讲师和教授作为讲师，所以你可以通过像`seed/instructor/lecturer`这样的表达式来判断是否有讲师作为讲师。如果该表达式非空，那么它将返回真值，你就知道存在讲师作为讲师。
- en: lecture as one of the instructors and so we can actually do where C slash。 instructor
    slash lecturer and that will get us every course where there's a。 lecturer's instructor
    but we also want a professor as an instructor and so we can。 just concatenate
    this and do an and and do the same thing with professor and then。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 讲师是其中一位讲师，因此我们可以通过`C/instructor/lecturer`来得到每一门包含讲师的课程，但我们也希望有教授作为讲师，因此我们可以将这两个条件拼接起来，使用`and`，并对教授进行相同的处理。
- en: we want to return the title of the course and so if you will recall from the
    data。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想要返回课程的标题，所以如果你还记得数据的话...
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_21.png)'
  id: totrans-41
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_21.png)'
- en: title is just a child of course and so we then return C slash title and again。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 课程标题是课程的子元素，所以我们返回`C/title`，再一次...
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_23.png)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_23.png)'
- en: this is assuming I haven't made any typographical errors and looks like I。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 这是假设我没有犯任何拼写错误，看起来我...
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_25.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_25.png)'
- en: haven't so we get the correct result and in this case we get two courses。 programming
    methodology and programming abstractions great so hopefully that。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 结果正确，这样我们得到了两门课程：编程方法论和编程抽象。很好，希望这个...
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_27.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_27.png)'
- en: gets you a little bit of familiarity with the course catalog data set and a
    little。 bit of familiarity with xpath and xquery so next I'm going to move on
    to some。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 让你稍微熟悉一下课程目录数据集，并且稍微了解一下xpath和xquery的使用，接下来我将进入一些...
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_29.png)'
  id: totrans-49
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_29.png)'
- en: world countries extra practice exercises and so I'm going to be doing some of
    the。 more challenging ones actually I'm going to be doing numbers 11 and 12 out
    of this。 set and so just to do a quick look at this data set so this has a bunch
    of。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 世界各国的额外练习题，因此我将做一些更具挑战性的题目，实际上，我将做这个集中的第 11 和第 12 题。稍微看一下这个数据集，它包含了一堆。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_31.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_31.png)'
- en: countries the rudelmen is countries and then each child is a country which has。
    name population area as attributes and then the major language is along with the。
    percentage of people who speak that language as attributes and then also。 possibly
    a list of cities for that country and so this question number 11 asks you。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 国家结构是 rudelmen 是国家，然后每个子元素是一个国家，拥有名称、人口、面积等属性，然后主要语言以及说这种语言的人口百分比作为属性，还可能包含该国家的城市列表，因此，第
    11 题要求你。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_33.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_33.png)'
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_34.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_34.png)'
- en: to return the names of all countries for which the data does not include any。
    languages or cities but the country has more than 10 million people okay so。 actually
    we can do this entirely in xpath and again we need to refer to the。 document so
    I'll just start off with that and so we want to be returning the name。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 返回所有没有语言或城市数据，但人口超过 1000 万的国家的名称。好的，实际上我们可以完全通过 xpath 来实现这一点，再次需要引用文档，所以我就从那里开始。因此，我们希望返回国家的名称。
- en: of countries so we go down to the country level and much much much as the xpath。
    query so we were doing before we're going to be returning the name of the。 country
    since if you remember name is an attribute of country we need to use。 this data
    construct so country slash data of of at name will give you the name。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们需要深入到国家级别，像我们之前做的那样查询 xpath。所以我们要返回国家的名称，因为如果你记得，名称是国家的一个属性，我们需要使用这个数据构造，所以国家斜杠数据的名称将给出国家的名称。
- en: of all countries and so we have that part done and then we just need to do our。
    filtering on the countries okay so all countries for which the data does not。
    include any languages or cities and so if you'll recall xpath has this count。
    operator which basically you can pass in at any any point and it will give you。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们已经完成了这部分，现在我们只需要对这些国家进行筛选。好的，所以所有国家的数据中没有语言或城市数据，因此，如果你还记得，xpath 有这个 count
    操作符，基本上你可以在任何地方使用它，它会给你。
- en: the number of elements with with that tag at the level so that's pretty。 convenient
    here so no data on languages or cities so we can just do a filter。 based on count
    language equals zero and so that'll give us all of the countries。 with with no
    data on languages and then we can just concatenate with and so we。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 带有该标签的元素数量，这样很方便。所以没有语言或城市数据，因此我们可以通过基于 count 语言等于零来进行过滤。这样，我们就能获得所有没有语言数据的国家，然后我们可以与之连接。
- en: also don't want any data on cities so we want count city to be zero and we also。
    want the country to have more than 10 million people and so we do that by。 referring
    to the attribute population and so we want population greater than 10。 million
    and then we have all of our conditions we have all countries with。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 另外，我们不希望有城市数据，所以我们希望城市计数为零，并且希望国家人口超过 1000 万。因此，我们通过引用属性人口来实现这一点。所以我们希望人口大于
    1000 万，然后我们就有了所有的条件，所有符合条件的国家。
- en: no languages no cities but greater than 10 million population and then we take。
    the name of that country so let's see what we get oh looks like I have a syntax。
    error here let me look at what this problem is。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 没有语言、没有城市数据，但人口超过 1000 万，然后我们获取该国家的名称。让我们看看结果，哦，看来我有一个语法错误，让我看看这个问题出在哪里。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_36.png)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_36.png)'
- en: ah looks like I didn't include another and her population yeah you got to be。
    careful with your boolean logic operators so count language equals zero and count。
    city equals zero and population is greater than 10 million great we get the。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 啊，看来我没有包括另一个人口数据，是的，你必须小心你的布尔逻辑运算符。所以语言计数等于零，城市计数等于零，而且人口大于 1000 万，太棒了，我们得到了。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_38.png)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_38.png)'
- en: correct countries which is just this yeah just this list of countries and next。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 正确的国家就是这些，是的，就是这份国家列表，接下来。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_40.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_40.png)'
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_41.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_41.png)'
- en: we're going to be doing question 12 and so this is a query that requires some。
    fairly intricate x-query operations so return the name of the country。 that has
    the city with the highest population out of any city so we want the。 city with
    the maximum population we want to return the country that that city is。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要做的是第 12 题，这个查询需要一些相当复杂的 XQuery 操作，所以我们要返回那个拥有最大城市人口的国家的名称。我们要找的是拥有最大人口的城市，然后返回该城市所在的国家。
- en: in and as a hint you may need to explicitly cast population numbers as。 integers
    with excess int to get the correct answer so we'll deal with that。 after we have
    like the main logic of this setup but anyway we want the name。 of a country so
    it's dense reason following basic flower operations that。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 作为提示，你可能需要显式地将人口数字转换为整数，并加上额外的 int 才能得到正确的答案，因此我们将在有了主要逻辑之后再处理这个问题。无论如何，我们需要的是一个国家的名称，所以这密集的原因是基于基本的花式操作。
- en: we're going to want to loop through every country in the document so for all。
    countries in countries。xml/country and then we want the city that。 has the highest
    population of all cities in any country so we have this loop。 around the countries
    and then we can do another loop just around the cities in。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将要遍历文档中的每个国家，所以对于 countries.xml/country 中的所有国家，然后我们需要的是所有城市中人口最多的城市。因此我们在国家之间循环，然后可以在城市之间再做一次循环。
- en: in this country that we're currently considering in the loop so for city in。
    c/city so this will loop us across every city in every country in the。 document
    and so now that we have this city here we can just do a comparison and see。 if
    its population is higher than the population for every other city and so。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 当前我们在循环中考虑的国家，所以对于每个城市，在 c/city 中，这将使我们遍历文档中每个国家的所有城市。现在我们有了这个城市，可以进行比较，看看它的人口是否高于其他每个城市的人口。
- en: indeed what we're going to want to do is compare this city to every city in
    in。 the database and we don't want to return it if its population is less than
    some。 other population but ultimately we're going to be returning the name of
    the。 country so we know that we're going to have returns the c/data of so the
    name the。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 确实，我们要做的是将这个城市与数据库中的每个城市进行比较。如果它的人口少于其他城市的人口，我们就不返回它，最终我们将返回国家的名称。所以我们知道返回的数据将包括这个国家的名称。
- en: name of the country so we're going to be returning this country's name once
    once。 we filter out and decide that this city has the highest population of every。
    city so now we need our where statement and so as I was saying a bit earlier we。
    need to compare this city to every other city so we'll make up a second city。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这个国家的名称，所以我们将在筛选出并确认这个城市是所有城市中人口最多的之后返回该国家的名称。现在我们需要一个 where 子句，正如我刚才提到的，我们需要将这个城市与其他每个城市进行比较，所以我们将定义一个第二个城市。
- en: to every other city and so if you recall XQuery has this every construct where
    you。 can basically loop across everything in a list from within the where statement
    so。 it's convenient in this case so so what we've done here is we've just gotten。
    every every city in in this document and every tends to come along with a。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他每个城市进行比较，所以如果你记得的话，XQuery 有一个 every 构造，允许你在 where 子句中遍历列表中的每个元素。这样在这里就非常方便了。所以我们做的是获取这个文档中的每一个城市，every
    通常会跟随一个。
- en: satisfies and so where every satisfies just means that every everything in this。
    loop satisfies some condition and we're going to type out that condition now。
    and so we want we want it to be the case that city to's population is less than。
    or equal to cities population so hopefully that makes sense we're just。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 满足条件，所以这里的每个满足条件意味着这个循环中的每个元素都满足某个条件，我们现在将写出这个条件。我们希望是这样的：城市二的人口小于或等于城市一的人口，希望这个能让你理解，我们只是想确保这个条件成立。
- en: doing a point wise comparison and checking that for every city to in the document。
    city to's population is at most cities population and so that guarantees that。
    city is the max and so this hint about using excess int to get the correct。 answer
    is about to come into play so I'm actually going to check this answer and。
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 进行逐个比较，并检查文档中每个城市二的总人口是否不超过城市一的人口，这样可以保证城市一是最大人口的城市。因此，使用额外 int 获取正确答案的提示将会发挥作用，所以我现在将检查这个答案。
- en: it should fail and so it gives in this case India instead of South Korea and
    so。
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 它应该失败，因此在这种情况下，它会返回印度，而不是南韩。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_43.png)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_43.png)'
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_44.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_44.png)'
- en: it's it's kind of funny I think it's because it's it explicitly does a string。
    comparison between these two populations but we need it to be an integer。 comparison
    and so that's why this typing is needed so we just do a typecast。 actually I guess
    I can just do it there a typecast of both of these cities。
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这有点搞笑，我觉得是因为它显式地做了这两个数字的字符串比较，但我们需要它做整数比较，所以才需要这个类型转换。实际上，我想我可以直接在这里做类型转换，两个城市的类型转换。
- en: population to integers and then we should get the correct result and we do and
    so。
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将人口数据转换为整数，然后我们应该能得到正确的结果，果然如此。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_46.png)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_46.png)'
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_47.png)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_47.png)'
- en: in this case we get South Korea correctly so awesome so that wraps up the。 extra
    practice expat and exquary exercises that I'm going to run over and so now。
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们正确地获取了韩国，所以太棒了，这就结束了额外的练习和练习题，我将要浏览的内容，现在开始。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_49.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_49.png)'
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_50.png)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_50.png)'
- en: I'm going to get on to everyone's favorite which is XSLT X extra practice。
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 我要开始讲大家最喜欢的部分，那就是XSLT和额外练习。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_52.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_52.png)'
- en: exercises so XSLT is pretty challenging to get right it's really syntax heavy
    so。 what is sort of dive into it and use some of the lessons that Jennifer taught
    in。 the lecture videos to help us along the way and so these extra practice。 exercises
    so we're starting up with the courses extra practice exercises use。
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: XSLT的练习真的很有挑战性，要做对很难，它的语法比较复杂，所以我们要深入学习，运用Jennifer在讲座视频中教的内容帮助我们，特别是这些额外的练习题。所以我们从课程的额外练习题开始，使用和之前完全相同的数据集，我们只是在用不同的语言写查询。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_54.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_54.png)'
- en: exactly the same data set as before we just are writing the queries in a。 different
    language and so this first question is just again on the course。 catalog to return
    all courses with enrollment greater than 500 and to retain。 the structure of course
    elements from the original data okay so one nice thing is。
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个问题还是关于课程目录，要求返回所有入学人数大于500的课程，并保留原始数据中的课程元素结构。好了，有一件好事是。
- en: that they do give us a template style sheet here and so your solution should。
    fill in the following style sheet and so whoops we will just copy and paste that。
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 他们确实给了我们一个模板样式表，所以你的解决方案应该填充以下样式表，然后，哎呀，我们只需要复制并粘贴它。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_56.png)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_56.png)'
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_57.png)'
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_57.png)'
- en: in as a good starting point and so all courses with enrollment greater than。
    500 so that's a query that's really easy to do in XPath if we remember and so
    if。 you recall from the video so we have like our style sheet and then a template
    and。 so we're just going to want to be matching courses with enrollment greater。
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一个很好的起点，所有入学人数大于500的课程查询其实在XPath中非常简单，如果我们记得的话。如果你回想一下视频内容，我们有样式表，然后是模板。所以我们只需要匹配入学人数大于500的课程。
- en: than 500 and so that's pretty straightforward here we can match any。 course
    element just by doing a XSL template match equals course and so that。 will match
    every course and then we can embed X XPath in here and just as we。 would have
    done in the X XPath exercises we can do enrollment greater than 500 and。
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 超过500，所以这里非常直接，我们只需要通过做一个XSL模板匹配`equals course`，就能匹配任何课程元素。这样就会匹配每个课程，然后我们可以在这里嵌入XPath，就像我们在XPath练习中做的那样，我们可以做`enrollment
    greater than 500`。
- en: then we need to do some other matching and so it says retain this structure
    of。 course elements from the original data and so if you'll recall from the lecture。
    the way that you do that is by just copying this exact course element which。 you
    do by XSL copy of and select equals dot where dot is the current element and。
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们需要做一些其他匹配，所以它说保留原始数据中课程元素的结构。如果你还记得讲座的内容，你可以通过简单地复制这个精确的课程元素来做到这一点，你可以通过XSL
    `copy of` 和 `select equals dot` 来实现，`dot`是当前元素。
- en: it turns out that that that is the entire query in this case so there is。
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 结果发现这就是整个查询，所以没有其他的了。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_59.png)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_59.png)'
- en: more templates is needed but we don't need any more templates here so we should。
    be good with just this we've matched all courses with enrollment greater than
    500。 and we copied their exact element and then we close off the template and
    let's。 check that answer oh that was incorrect let's do a quick check of why okay
    so。
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 需要更多的模板，但这里不需要更多的模板，所以我们只需要这个模板就行。我们已经匹配了所有注册人数大于500的课程，并复制了它们的精确元素，然后我们关闭模板。让我们检查一下答案，哦，那是错误的，快速检查一下原因。好吧，所以。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_61.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_61.png)'
- en: we're getting a lot of junk in here and this actually was an expected area error。
    where we're just getting all of this text from elements that didn't match。 anything
    so just all of all of the text gets spit out if you don't。 explicitly match it
    and Jennifer did discuss this in the video and there is a。
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在这里得到了很多垃圾数据，这实际上是一个预期的错误区域。我们只是从未匹配到的元素中提取所有文本。如果没有明确匹配它，它就会被输出。所以所有的文本都会被输出。如果没有匹配条件，所有的内容都会被打印出来，Jennifer在视频中讨论过这一点，且已经有了一个。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_63.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_63.png)'
- en: workaround so we actually do need another template here so we need just to match。
    text and so the way you do that is you just match text like that and then we can。
    close off that element we don't want to copy it we just want to match it and do。
    nothing with it and now let's see how we do now we get the correct result and。
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方法是，我们确实需要一个额外的模板，在这里，我们只需要匹配文本。所以你可以通过匹配文本的方式来做，接着关闭那个元素。我们不想复制它，只是想匹配它并且不做任何处理。现在让我们看看结果，看看是否正确。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_65.png)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_65.png)'
- en: you can see we just get all of these courses with enrollments that are greater。
    than 500 and I apologize for the lack of readability in the way that this result。
    is displayed there's like no indentation or anything I'm sorry about that so cool。
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所看到的，我们只得到了所有注册人数超过500的课程。对于这种结果的显示方式没有缩进，我为此感到抱歉，确实不太易读。对此表示抱歉，但没关系，很酷。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_67.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_67.png)'
- en: that should give you an idea where you return the exact structure of a course。
    element and then you just match all of the text and do nothing with it cool and。
    so let's just move on to the next so delete from the data all courses with。 enrollment
    greater than 60 or with no enrollment listed and otherwise the。
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 这应该能给你一个关于如何返回课程的精确结构的概念。然后你只需匹配所有文本，并且不做任何处理，很酷。那么我们继续，接下来从数据中删除所有**注册人数大于60**或没有列出注册人数的课程。
- en: structure of the data should be the same and okay so we'll again start off with。
    our template and so we want to keep keep the structure of the data the same as。
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 数据的结构应该保持一致。好吧，所以我们再次从模板开始，我们希望保持数据结构的一致性。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_69.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_69.png)'
- en: before so if we'll recall that just means that we we still want to like have
    this。 root element course catalog and then the departments and all their courses
    listed。 in in this same way and so if you remember the best way to retain the。
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，如果我们回忆一下，这意味着我们仍然希望保留这个**根元素课程目录**，然后列出所有的部门及其所有课程，保持同样的方式。因此，如果你记得，保持数据结构的一致性是最有效的方式。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_71.png)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_71.png)'
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_72.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_72.png)'
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_73.png)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_73.png)'
- en: structure of the overall data like that is to match absolutely everything and。
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 整体数据的结构就是要匹配所有内容并。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_75.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_75.png)'
- en: then delete what you need to delete so it's it's it comes back to that kind
    of。 tricky looking regular expression that Jennifer went over in the lecture video。
    where you do this match star bar at star or text and so that will match。 everything
    in in the XML and what we do with that is we then apply that template。
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 然后删除你需要删除的内容。所以，问题又回到了那个看起来有些复杂的正则表达式，Jennifer在讲座视频中讲解过这个表达式，它是`match star bar
    at star or text`，这个正则表达式会匹配XML中的所有内容。接着，我们应用这个模板。
- en: so this is exactly what Jennifer did in lecture to retain this the structure
    of。 data and just remove certain things and so we do that inside of a copy。 and
    inside of this copy statement we apply template， [ silence ]。 And so what we've
    done so far is we have matched and copied the entire dataset into our result。
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 这正是詹妮弗在讲座中所做的，保留数据的结构并只删除特定内容，我们就在一个复制语句中做了这个操作。在这个复制语句中，我们应用了模板，[ silence ]。到目前为止，我们所做的就是将整个数据集匹配并复制到结果中。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_77.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_77.png)'
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_78.png)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_78.png)'
- en: And let me just make this box a little bit bigger for readability。 And Jennifer
    went over how that works in lecture。 So that just matches everything and copies
    it to the result。 And then what we need to do is match our courses with enrollment
    greater than 60 or no enrollment listed and delete them from the dataset。 And
    so this is actually the easy part where we can just do this with a simple x-path
    expression。
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 让我把这个框框稍微放大一点，以便更容易阅读。詹妮弗在讲座中讲解了这个过程。所以它会匹配所有内容并复制到结果中。接下来我们需要做的是匹配那些注册人数大于60或没有列出注册人数的课程，并将它们从数据集中删除。所以这部分其实很简单，我们可以通过一个简单的
    x-path 表达式来实现。
- en: And so we'll match what we need and then just do nothing with it。 We'll just
    close it off。 And so recall we can just go to course and much， much like in one
    of the previous problems we will be accessing the enrollment field。 So we want
    enrollment greater than 60 or if no enrollment listed。 And so we do that the same
    way as we did previously where we want the count of the number of enrollments
    listed underneath this element to equal 0。
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将匹配所需的内容，然后什么都不做。我们就这样关闭它。回想一下，我们可以直接进入课程，就像在之前的某个问题中一样，我们会访问注册人数字段。所以我们想要的是注册人数大于60，或者如果没有列出注册人数。我们通过之前的方式来实现，在这个元素下列出的注册人数计数为0。
- en: Phew， so I know that that's a lot but hopefully it makes sense where we've copied
    everything and then just matched these courses with enrollment greater than 60
    or no enrollment listed which we wanted to delete。 So we just after we've copied
    everything we matched these and just do nothing with them。
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 呼，虽然这很复杂，但希望能理解我们已经复制了所有内容，然后匹配那些注册人数大于60或没有列出注册人数的课程，这些课程是我们想要删除的。所以在复制完所有内容后，我们只匹配这些课程，并且对它们不做任何操作。
- en: And so that should remove them from the data and let's see how this works out。
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这应该可以把它们从数据中移除，让我们看看这个方法如何运作。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_80.png)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_80.png)'
- en: Alright， so looks like I am getting an error。 So element of type XSL copy must
    be terminated by the matching end tag。 Okay， so that looks like it's a problem
    here。 And I think it may have been as simple as a white space error。 So yeah。
    So now something interesting is happening。
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，看起来我遇到了一个错误。所以 XSL 复制元素必须由匹配的结束标签结束。好的，看起来这里有个问题。我认为这可能只是一个简单的空格错误。所以是的。现在发生了一些有趣的事情。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_82.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_82.png)'
- en: So I'm getting a result but it's not quite correct and I'm trying to see what's
    wrong with it。
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我得到了一个结果，但它并不完全正确，我正在尝试找出问题出在哪里。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_84.png)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_84.png)'
- en: Okay， so I believe what's happening is I am。
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我相信发生的情况是……
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_86.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_86.png)'
- en: Hmm。 Now this is mysterious。 Ah， I see what's happening here。 So I'm not returning。
    I am returning courses that have no enrollment listed and that is my mistake up
    here。 I have enrollments in this count of enrollment equals zero instead of enrollment。
    So I just get rid of that S and this should be good。
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 嗯，现在这个有点神秘。啊，我明白发生了什么了。所以我没有返回结果。我正在返回没有列出注册人数的课程，这是我之前的错误。我在“注册人数计数等于零”上用了复数形式，而应该用“注册人数”。所以我只需要去掉那个
    S，这样应该就没问题了。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_88.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_88.png)'
- en: Maybe not。 So as we say， X query expressions are difficult to get right。 So
    here's the problem。 I'm trying to do enrollment greater than 60 and count of enrollment
    equals zero。 That should be an or。 And hopefully that makes sense why。 So we want
    enrollment greater than 60 deleted or no enrollment listed。
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 可能不是。正如我们所说，X 查询表达式很难写对。问题就在这里。我试图做的是注册人数大于60并且注册人数计数等于零。这应该是一个“或”条件。希望这样能让你理解为什么。我们希望删除的是注册人数大于60的课程，或者是没有列出注册人数的课程。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_90.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_90.png)'
- en: Because otherwise that would just return everything。 And finally we get the
    correct result。 So some takeaways。 One it's just tricky to get all of the syntax
    correct in XSLT。 We had like this extra white space before the closing tag of
    copy and that causes syntax error。 So you need to not have that white space。 And
    then just something as small as having an S here misspelling something will make
    your query wrong。
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 因为否则它会返回所有内容。最后我们得到了正确的结果。所以一些要点。第一，XSLT中语法的正确性确实很难掌握。我们在`copy`结束标签前有多余的空格，这会导致语法错误。所以你需要确保没有空格。然后就像是这里多了一个“S”这种小的拼写错误也会导致查询错误。
- en: And then you also have to worry about your standard Boolean logic。 So having
    and here instead of or is a problem。
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你还得考虑标准的布尔逻辑。所以在这里用and而不是or就是一个问题。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_92.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_92.png)'
- en: So hopefully that is an instructive example and everything now makes sense with
    it。
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 所以希望这能作为一个有指导意义的例子，现在一切都能理解了。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_94.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_94.png)'
- en: And just one more question here。
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 还有一个问题。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_96.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_96.png)'
- en: So this is the world countries XSLT extra practice where we want to remove from
    the data all countries with area greater than 40。000。
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这是世界各国XSLT额外练习，我们想从数据中移除所有面积大于40,000的国家。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_98.png)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_98.png)'
- en: And all countries with no cities listed。 Otherwise structure of the data should
    be the same。 Okay。 so actually this is incredibly similar to the last problem
    that we did with the course catalog。
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 而且所有没有列出城市的国家。否则数据结构应该是一样的。好吧，实际上这和我们之前做的课程目录问题非常相似。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_100.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_100.png)'
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_101.png)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_101.png)'
- en: So I am just going to copy that answer over。
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我将直接复制那个答案过来。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_103.png)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_103.png)'
- en: So we see we want countries with area greater than 40。000 or no cities listed
    to be removed from the data。
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们看到，我们想从数据中移除所有面积大于40,000或没有列出城市的国家。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_105.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_105.png)'
- en: And so this is exactly like what we have here。
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这完全就像我们这里所做的一样。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_107.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_107.png)'
- en: So it is kind of nice。 We have our matching everything template which still
    works regardless of the data set。 And then we just had this one line that was
    specific to the course catalog。 And so we can just change this to country instead
    of course。 And instead of enrollment population and instead of greater than 60，
    greater than 40，000。
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这挺好的。我们有适用于所有数据集的匹配模板，它无论数据集如何都能正常工作。然后我们只需要这一行特定于课程目录。所以我们可以把“course”改为“country”，把“enrollment
    population”改为“greater than 40,000”。
- en: And instead of count enrollment equals zero， we want count of city sub elements
    to be equal to zero。 And that should be it。 Okay， so that is incorrect。 Something
    went wrong there。 Oh right。 we wanted area greater than 40，000 not population
    greater than 40，000。 So it is perfect。
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是`count enrollment equals zero`，我们想要的是`count of city sub elements`等于零。这样就对了。好吧，这个不正确。出问题了。哦，没错，我们想要的是区域大于40,000，而不是人口大于40,000。所以现在是完美的。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_109.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_109.png)'
- en: Okay， and so we see that that was pretty much exactly the same problem that
    we had last time。
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，我们看到这个问题几乎和我们上次做的完全一样。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_111.png)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_111.png)'
- en: And so that should give you a good idea of some XSLT and some of the trickiness
    that goes into getting the queries correct。
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 所以这应该能让你对一些XSLT以及其中涉及的获取查询正确的复杂性有个不错的了解。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_113.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_113.png)'
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_114.png)'
  id: totrans-160
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_114.png)'
- en: And hopefully you've learned something in this session。 I'm going to sign off。
    Thank you all for watching。 And I hope this video has been useful。 I will be posting
    a video on the midterm questions very soon。 Thank you。
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你们在这个环节中学到了东西。我现在要下线了。感谢大家观看。我希望这个视频对你们有帮助。我很快会发布关于期中问题的视频。谢谢。
- en: '![](img/efd01bb0d4d6e4eea8c18808748a281d_116.png)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![](img/efd01bb0d4d6e4eea8c18808748a281d_116.png)'
