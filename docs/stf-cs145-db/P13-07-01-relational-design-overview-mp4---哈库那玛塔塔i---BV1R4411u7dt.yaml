- en: P13：07-01-relational-design-overview.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P13：07-01-relational-design-overview.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
- en: In this sequence of videos， we'll learn about designing good schemas for relational
    databases。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一系列视频中，我们将学习如何为关系数据库设计良好的模式。
- en: '![](img/08c656414c2b104a8091d239884ef9ca_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08c656414c2b104a8091d239884ef9ca_1.png)'
- en: So let's suppose we're building a database for an application or set of applications。
    and we have to figure out what schema we want to store our data。 Usually。 there
    are many different possible schema designs for a database。 and databases do tend
    to get quite complicated， and some designs are much better than others。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 所以假设我们正在为一个应用程序或一组应用程序构建数据库，并且我们需要弄清楚我们希望存储数据的模式是什么。通常，数据库有很多不同的可能模式设计，而且数据库确实会变得相当复杂，一些设计远比其他设计更好。
- en: So how do we choose what design to use？ Now， the reality is that people often
    use higher level tools。 to design relational databases， and don't design the schemas
    directly themselves。 But some designers do go straight to relations， and furthermore。
    it's useful to understand why the relations that are produced by design tools，
    are what they are。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们如何选择使用什么设计呢？实际上，人们通常使用更高层次的工具来设计关系数据库，而不是直接设计模式本身。但是有些设计师确实会直接进入关系设计，此外，理解由设计工具生成的关系为何会是那样，也是很有用的。
- en: Furthermore， from an academic point of view， it turns out there's a very nice
    theory。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，从学术角度来看，事实证明有一个非常好的理论。
- en: '![](img/08c656414c2b104a8091d239884ef9ca_3.png)'
  id: totrans-6
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08c656414c2b104a8091d239884ef9ca_3.png)'
- en: for relational database design。 So let's consider the process of designing the
    schema for our database about students applying to colleges。 Specifically， for
    a given student， let's suppose we have their social security number。 and their
    name， the colleges that student is applying to。 the high schools they attended
    and what city those high schools were in， and the students' hobbies。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这是关于关系数据库设计的理论。所以让我们考虑一下为我们关于申请大学的学生数据库设计模式的过程。具体来说，对于一个给定的学生，假设我们有他们的社会安全号码，他们的名字，他们申请的大学，学生就读的高中及这些高中的所在城市，还有学生的爱好。
- en: So if that's what we want， we can create a single relation called apply。 that
    has one attribute for each of those pieces of information。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果这就是我们想要的，我们可以创建一个叫做apply的单一关系，它有一个属性来表示每一项信息。
- en: '![](img/08c656414c2b104a8091d239884ef9ca_5.png)'
  id: totrans-9
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08c656414c2b104a8091d239884ef9ca_5.png)'
- en: Now let's take a look at how that database would be populated。 Let's suppose
    that we have a student and with Social Security number 123。 she went to two different
    high schools in Palo Alto， she plays tennis and the trumpet。 and she's applying
    to Stanford， Berkeley， and MIT。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看这个数据库如何填充数据。假设我们有一个学生，社会安全号码是123，她去了帕洛阿尔托的两所不同的高中，她打网球和吹小号，并且她正在申请斯坦福、伯克利和麻省理工学院。
- en: So let's look at some of the tuples that we would be having in the apply relation。
    to represent this information about Anne。 So we'll have 123 Anne， her name。 she's
    applying to Stanford， she went to Palo Alto High School and that's in Palo Alto。
    and one of her hobbies is tennis。 And then we also have 123 Anne， she applied
    to Berkeley。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们看看我们将在apply关系中使用的一些元组，以表示关于Anne的信息。所以我们将有123 Anne，她的名字，她正在申请斯坦福，她去了帕洛阿尔托高中，位于帕洛阿尔托，她的一个爱好是打网球。然后我们还会有123
    Anne，她申请了伯克利。
- en: and went to Palo Alto High School in Palo Alto， and tennis there as well。 Of
    course。 she also has a tuple representing the fact that she's applying to Berkeley。
    and we'll stick with Palo Alto High School and she played the trumpet。 And as
    you can see。 we'll have more tuples， we'll have various Stanford and Berkeley's。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 并且她去了帕洛阿尔托的帕洛阿尔托高中，在那里打网球。当然，她还有一个元组，表示她正在申请伯克利，我们依旧保持帕洛阿尔托高中，并且她吹小号。正如你所看到的，我们会有更多的元组，我们会有各种斯坦福和伯克利的记录。
- en: we'll have some for her other high school， it's called Gun High School， also
    in Palo Alto。 and so on。 So if we think about it， we will need a total of 12 tuples。
    to represent this information about Anne。 Now， do we think that's a good design？
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为她的另一所高中设计一个数据库，叫做Gun High School，也在帕洛阿尔托。等等。所以如果我们考虑这个问题，我们需要12个元组来表示有关Anne的信息。那么，我们认为这是一个好的设计吗？
- en: I'm going to argue no， it's not a good design。 There are several types of anomalies
    in that design。 First of all， we capture information multiple times in that design。
    and I'll give some examples of that。 For example， how many times do we capture
    the fact that 123。 the Social Security number， is associated with a student named
    Anne。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我会反驳，这不是一个好的设计。这个设计中有几种异常类型。首先，我们在设计中多次记录信息，我将举几个例子。例如，我们记录123这个社会保障号码与名为安妮的学生关联的次数有多少次。
- en: we capture that 12 times in our 12 tuples。 How many times do we capture that
    Anne went to Palo Alto High School？
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在12个元组中记录了12次这个事实。我们记录安妮上过帕洛阿尔托高中的次数有多少次？
- en: We're going to capture that six times， and we're going to capture the fact that
    she plays 10 as six times。 and we're going to capture the fact that she went to，
    applied to MIT four times。 So for each piece of information， in fact， we're capturing
    it many， many times。 So that doesn't seem like a good feature of a design。 The
    second type is an update anomaly。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将记录六次，并且记录她演奏10次的事实也会有六次，我们会记录她申请MIT的事实四次。所以对于每一条信息，实际上我们会记录很多次。所以这似乎不是设计的一个好特性。第二种异常是更新异常。
- en: and that's really a direct effect of redundancy。 What update anomalies say is
    that you can update facts in some places。 but not all， or differently in different
    places。 So let's take the fact， for example。 that Anne plays the trumpet。 I might
    decide to call that the cornet instead。 but I can go ahead and I can modify， say，
    three of the instances。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这实际上是冗余的直接影响。更新异常的意思是你可以在某些地方更新事实，但并不是所有地方都更新，或者在不同的地方更新的方式不同。举个例子，假设安妮吹奏小号。我可能决定改为称之为短号，但我可以继续修改，比如修改其中三处记录。
- en: where we capture the fact about her playing the trumpet， and not the fourth
    one。 and then we end up with what's effectively， an inconsistent database。 And
    the third type of anomaly that can occur is called the deletion anomaly。 And there
    is a case where we can inadvertently， completely do a complete deletion of somebody
    in the database。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们记录她吹奏小号的事实，而不是第四个事实。结果我们得到的实际上是一个不一致的数据库。而第三种可能发生的异常被称为删除异常。这里有一种情况，我们可能会不小心完全删除数据库中的某个人。
- en: Let's say， for example， that we decide that surfing is an unacceptable hobby。
    for our college applicants， and we go ahead and we delete the tuples about surfing。
    If we have students who have surfing as their only hobby。 then those students
    will be deleted completely。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 比如说，我们决定冲浪是不被接受的爱好，针对我们的大学申请者，我们删除了关于冲浪的元组。如果有学生的唯一爱好是冲浪，那么这些学生将被完全删除。
- en: '![](img/08c656414c2b104a8091d239884ef9ca_7.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08c656414c2b104a8091d239884ef9ca_7.png)'
- en: Now you may argue that's the right thing to do， but probably that isn't what
    was intended。 So now let's take a look at a very different design for the same
    data。 Here we have five different relations， one with the information， about students
    and their names。 one where they've applied to colleges， one where they went to
    high school。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会认为这是正确的做法，但可能这并不是原本的意图。所以现在让我们来看一下同一数据的一个完全不同的设计。这里我们有五个不同的关系，一个是关于学生及其姓名的信息，一个是他们申请的大学，一个是他们上过的高中。
- en: where their high schools are located， and what hobbies the student has。 In this
    case。 we have no anomalies。 If we go back and look at the three different types。
    they don't occur in this design。 We don't have redundant information。 we don't
    have the update anomaly， or the deletion anomaly。 Furthermore。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 关于他们高中的位置，以及学生有哪些爱好。在这种情况下，我们没有异常。如果我们回头看看这三种不同的类型，在这个设计中它们不会发生。我们没有冗余信息，没有更新异常，也没有删除异常。除此之外。
- en: we can reconstruct all of the original data from our first design。 So we haven't
    lost any information by breaking it up this way。 So in fact。 this looks like a
    much better design。 Now let me mention a couple of modifications to this design
    that might occur。 Let's suppose， for example， that the high school name alone
    is not a key。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从我们最初的设计中重建所有原始数据。所以通过这种方式拆分，我们没有丢失任何信息。所以实际上，这看起来是一个更好的设计。现在让我提几个可能会发生的设计修改。例如，假设仅凭高中名称并不能作为唯一标识。
- en: So when we break up the high school name in high school city。 we no longer can
    identify the high school。 In that case。 the preferred design would be to move
    the high school city up here。 So we'll have that together with the high school
    name， and then we don't need this relation here。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，当我们把高中名称和高中城市拆开时，我们就无法再仅凭这些信息来识别高中。在这种情况下，优选的设计是将高中城市移到这里。这样我们就能把它和高中名称放在一起，而不再需要这里的关系。
- en: And actually， that's a fine design。 It does not introduce any anomalies。 That's
    just based on the fact that we need the name of the high school together。 with
    the city to identify it。 As another example， suppose a student doesn't want all
    of their hobbies revealed。 to all of the colleges that they're applying to。 For
    example。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，这是一个很好的设计。它没有引入任何异常。这只是基于我们需要将高中名称和城市一起使用来进行标识这一事实。举个例子，假设一个学生不希望所有的爱好都被透露给他们申请的所有大学。例如。
- en: maybe they don't want Stanford to know about their surfing。 If that's the case。
    then we can modify the design again。 And in that case。 we would put the hobby
    up here with where they're applying to college。 And so that would include the
    hobbies that they want to reveal， to those particular colleges。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 也许他们不希望斯坦福知道他们喜欢冲浪。如果是这样的话，我们可以再次修改设计。在这种情况下，我们会将爱好放到这里，并标明他们申请的大学。这样就可以包含他们希望透露给特定大学的爱好。
- en: and we'll take away this one。 So it looked like we were taking our nice small
    relations and moving back to a design。 that had bigger relations。 But in this
    case， it was very well motivated。 We needed these attributes together to identify
    the high school。 and we wanted to have our hobbies specific to the colleges。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将去掉这个。因此，看起来我们是把之前的小关系再合并回了一个包含更大关系的设计。但在这种情况下，这一设计是非常有理由的。我们需要这些属性一起使用来识别高中，并且我们希望能够将爱好与特定大学对应。
- en: So what that shows is that the best design for an application of relational
    databases。 depends not only on constructing the relations well， but also in what
    the data。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，这表明，关系数据库应用的最佳设计，不仅仅依赖于如何构建关系，还取决于数据的实际需求。
- en: '![](img/08c656414c2b104a8091d239884ef9ca_9.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08c656414c2b104a8091d239884ef9ca_9.png)'
- en: is representing in the real world。 So the basic idea of what we're going to
    do is design by decomposition。 Specifically， we're going to do what we did at
    the very beginning of this example。 which is start by creating mega relations
    that just contain attributes。 for everything that we want to represent in our
    database。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这在现实世界中所表示的含义。所以我们接下来要做的基本思路是通过分解来设计。具体来说，我们将从一开始就做我们在这个例子中所做的事情，首先创建包含所有我们想要在数据库中表示的属性的大关系。
- en: Then we're going to decompose those mega relations into smaller ones。 that are
    better but still capture the same information。 And most importantly。 we can do
    this decomposition automatically。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们将把这些大的关系分解成更小的关系，它们更好，但仍能捕捉到相同的信息。最重要的是，我们可以自动完成这个分解过程。
- en: '![](img/08c656414c2b104a8091d239884ef9ca_11.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08c656414c2b104a8091d239884ef9ca_11.png)'
- en: So how does automatic decomposition work？ In addition to the mega relations。
    we're going to specify formally properties of the data。 The system is going to
    use the properties to decompose the relations。 and then it's going to guarantee
    that the final set of relations satisfy what's。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 那么自动分解是如何工作的呢？除了这些大的关系，我们还将正式指定数据的属性。系统将利用这些属性来分解关系，然后保证最终的关系集满足要求。
- en: called a normal form， and we'll be formalizing all of this。 But the basic idea
    behind normal forms is that they don't have any of those anomalies。 that I showed，
    and they don't lose any information。 So specifically。 for specification of properties，
    we're going to begin by looking at something called functional dependencies。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 这叫做规范化形式，我们将正式化这一切。但规范化形式背后的基本理念是，它们没有我之前展示的那些异常，而且不会丢失任何信息。所以，特别是对于属性的规范化，我们将从查看一个叫做函数依赖的概念开始。
- en: And once we specify functional dependencies， the system will generate relations
    that are in what's called Boyce-Codd normal form。 And Boyce-Codd， by the way，
    were two early pioneers in relational databases in general。 Then we're going to
    look at another type of specification called multi-value dependencies。 which will
    add to functional dependencies。 And when we have both functional and multi-value
    dependencies。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们指定了函数依赖，系统将生成符合博伊斯-科得范式的关系。顺便提一下，博伊斯和科得是关系数据库领域的两位早期先驱。接下来我们将查看另一种叫做多值依赖的规范，它将与函数依赖结合使用。当我们同时拥有函数依赖和多值依赖时。
- en: then we can have what's called fourth normal form。 And again。 that would be
    relations that are generated by the system that satisfy the normal form。 Boyce-Codd
    normal form is stricter than fourth normal form。 Specifically。 if we make a big
    Venn diagram here of all the relational designs。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们可以得到所谓的第四范式。同样，这将是由系统生成的、符合范式的关系。博伊斯-科得范式比第四范式更严格。具体来说，如果我们在这里绘制一个包含所有关系设计的大维恩图。
- en: that satisfy Boyce-Codd normal form， which， by the way， is very often abbreviated
    B， C， and F。 then that contains all of the relations that satisfy fourth normal
    form。 normally abbreviated four and F。 So every relation that's in fourth normal
    form is also in Boyce-Codd normal form。 but not vice versa。 Now you might be wondering
    what happened to first， second。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 这些符合博伊斯-科得范式，顺便说一下，博伊斯-科得范式通常缩写为B、C和F，它包含了所有符合第四范式的关系，通常缩写为四和F。所以，所有符合第四范式的关系也符合博伊斯-科得范式，但反之则不然。现在你可能会想，第一范式和第二范式去了哪里？
- en: and third normal forms。 So first normal form is pretty much just a specification
    that relations are real relations。 with atomic values in each cell。 Second normal
    form is specifying something about the way relations are structured。 with respect
    to their keys。 Neither of those is discussed very much anymore。 Third normal form
    is a slight weakening of Boyce-Codd normal form。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 和第三范式。所以，第一范式基本上只是一个规范，要求关系必须是真正的关系，每个单元格中都有原子值。第二范式是指定关系结构的一种方式，涉及到它们的主键。如今，这两个范式已经不太被讨论了。第三范式是对博伊斯-科得范式的轻微弱化。
- en: And sometimes people do like to talk about third normal form。 So you can think
    of third normal form as a little bit of an even bigger circle here。 We're not
    going to cover third normal form in this video。 because Boyce-Codd normal form
    is the most common normal form used。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 有时人们确实喜欢讨论第三范式。你可以把第三范式想象成一个稍微更大的圆圈。我们在这个视频中不会讲解第三范式，因为博伊斯-科得范式是最常用的范式。
- en: if we have functional dependencies only and fourth normal form。 if we have functional
    and multi-dependence。 So what's going to happen next is I'm going to give some
    examples。 to motivate these four concepts， functional dependencies， Boyce-Codd
    normal form。 multi-value dependencies in fourth normal form， and then later videos
    will go into each one in much greater depth。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们只有函数依赖并且符合第四范式，那么如果我们有函数依赖和多重依赖。那么接下来我要给出一些例子，以激发对这四个概念的理解：函数依赖、博伊斯-科得范式、多值依赖以及第四范式，之后的视频将更深入地讲解每一个概念。
- en: So let me just give the general idea of functional dependencies and Boyce-Codd
    normal form。 And we'll use a very simple example， an abbreviated version of our
    apply relation。 that has student social security numbers， the student's name。
    and their colleges that the student is applying to。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我先简单介绍一下函数依赖和博伊斯-科得范式。我们将使用一个非常简单的例子，一个简化版本的申请关系，其中包含学生的社会安全号码、学生的姓名以及他们申请的大学。
- en: Even this small relation actually has redundancy and update and deletion anomalies。
    Specifically。 let's say that our student 123-AN applies to seven colleges。 then
    there will be seven tuples and there will be seven instances。 where we know that
    the student with social security number 123 is named AN。 Specifically。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 即使是这个小关系，实际上也存在冗余和更新、删除异常。具体来说，假设我们的学生123-AN申请了七所大学，那么将会有七个元组，每个元组都表示学生123的社会安全号码和名字为AN。具体地说。
- en: we're going to store for every student the name， and social security number
    pair once for each college that they apply to。 So now let me explain what a functional
    dependency is。 and then we'll see how functional dependencies are used to recognize。
    when we have a bad design like this one and to see how we can fix it。 A functional
    dependency。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为每个学生存储一次他们的姓名和社会保障号码对，每次他们申请的大学都有记录。所以现在让我解释一下什么是功能依赖，然后我们将看到如何使用功能依赖来识别像这样的设计缺陷，以及我们如何修正它。功能依赖。
- en: in this case from social security number to name， and we're saying social security
    number functionally determines。 to the student name， says that the same social
    security number always has the same name。 In other words， every time we see 123，
    we're going to see AN。 Now。 it doesn't necessarily go in the other direction。
    It might not be that whenever we see AN it's 123。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，从社会保障号码到名字，表示社会保障号码功能性地决定学生名字，意味着相同的社会保障号码总是对应相同的名字。换句话说，每次看到123，我们都会看到AN。现在，这不一定适用于反向。也许不是每当我们看到AN时，都会是123。
- en: but whenever we see 123 it is AN。 And so what we'd like to do is store that
    relationship just one time。 one time say that for 123 the name is AN。 Now what
    Boyce-Codd Normal form says is that whenever we have one of these functional dependencies。
    then the left-hand side of that functional dependency must be a key。 And think
    about what that's saying。 Remember， a key says that we have just one tuple with
    each value for that attribute。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 但是每当我们看到123，它就是AN。所以我们希望做的是只存储一次这个关系，举例来说，记录123对应的名字是AN。Boyce-Codd范式所说的是，每当我们有一个这样的功能依赖时，该功能依赖的左侧必须是一个关键。想一想这意味着什么。记住，一个关键意味着我们对每个属性的值都有唯一的一个元组。
- en: So if we have say social security number to name as a functional dependency。
    and we satisfy Boyce-Codd Normal form， then we're going to say that social security
    number has to be a key in our relation。 and we'll only have one tuple for each
    social security number。 Specifically。 we can go back to our original relation。
    We have this functional dependency。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果我们有例如社会保障号码到姓名的功能依赖，并且满足Boyce-Codd范式，那么我们就会说社会保障号码必须是我们关系中的一个关键，而且每个社会保障号码只会有一个元组。具体来说，我们可以回到原始关系。我们有这个功能依赖。
- en: Social security number here is not a key， right？ So then we know that this is
    not in Boyce-Codd Normal form。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的社会保障号码不是一个关键，对吧？所以我们知道这不符合Boyce-Codd范式。
- en: '![](img/08c656414c2b104a8091d239884ef9ca_13.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08c656414c2b104a8091d239884ef9ca_13.png)'
- en: So we're going to use functional dependencies to help us decompose our relation。
    so that the decompose relations are in Boyce-Codd Normal form。 And here's what
    would happen in this example。 Our functional dependency would tell us to pull
    out the social security number and student name。 into its own relation where the
    social security number is a key。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将使用功能依赖来帮助我们分解我们的关系，使得分解后的关系符合Boyce-Codd范式。在这个例子中，我们的功能依赖会告诉我们将社会保障号码和学生姓名提取到一个新的关系中，在这个关系中，社会保障号码是关键。
- en: and then we have just one time for each social security number， that student's
    name。 and then separately we'll have the information about the students and which
    colleges they applied to。 Again， we'll completely formalize this whole idea， the
    definition of functional dependencies。 their properties， the normal form， and
    how we do the decomposition in a later video。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们每个社会保障号码只记录一次，学生的名字也是。接着，我们会单独记录学生的信息以及他们申请了哪些大学。再次强调，我们将完全形式化这个概念，功能依赖的定义，它们的属性，范式，以及我们如何在后续的视频中进行分解。
- en: Now let's similarly motivate the concept of multi-value dependencies and fourth
    normal form。 It is actually a little bit more complicated， but follows the same
    rough outline。 Now let's look at a different portion of the information about
    applying。 and let's suppose for now that we're just concerned about students。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们类似地说明多值依赖和第四范式的概念。其实这个稍微复杂一点，但仍然遵循大致相同的框架。现在让我们来看一下申请信息的另一个部分，假设现在我们只关心学生信息。
- en: what colleges they're applying to， and what high schools they went to。 We still
    have redundancy and update and deletion anomalies。 For example。 a student who
    applies to Stanford is going to have that fact captured once for every。 high school
    that they went to。 A student who went to Palo Alto High School will have that
    fact captured once for every college they apply to。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 他们申请的大学以及他们曾就读的高中。我们仍然会有冗余和更新、删除异常。例如，一个申请斯坦福大学的学生将会为每一所他/她曾就读的高中记录一次该信息。一个曾就读于帕洛阿尔托高中的学生，将会为他/她申请的每一所大学记录一次该信息。
- en: In addition， we get a kind of multiplicative effect here。 because let's say
    a student applies to C colleges and they went to H high schools。 I know students
    don't go to a lot of high schools， but let's suppose this is one who moved a lot。
    In that case， we're going to have C times H tuples。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们还会遇到一种乘法效应。假设一个学生申请了C所大学并曾就读于H所高中。虽然我知道学生通常不会上很多所高中，但假设这是一个经常转学的学生。在这种情况下，我们将得到C乘以H的元组。
- en: What we'd really like to have is something more on the order of C plus H。 because
    then we'd be capturing each piece of information just once。 Now the interesting
    thing is that the badness of this particular design is not addressed by。 Boy's
    Cod Normal form。 In fact， this relation is in Boy's Cod Normal form because it
    has no。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真正想要的，是类似C与H的关系，因为那样我们只会存储每条信息一次。现在有趣的是，这种特定设计的缺陷并没有被博伊斯-科得范式解决。事实上，这个关系符合博伊斯-科得范式，因为它没有。
- en: functional dependencies。 It's not the case that every instance of a social security
    number is。 associated with a single college name or a single high school。 As we'll
    see later。 if there are no functional dependencies， then the relation is automatically
    in Boy's Cod Normal form。 But it's not in fourth normal form。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 功能依赖。并不是每一个社会安全号码实例都与一个特定的大学名称或一个特定的高中名称相关。如我们稍后将看到的，如果没有功能依赖关系，那么该关系会自动符合博伊斯-科得范式（Boyce-Codd
    Normal Form），但它并不符合第四范式。
- en: '![](img/08c656414c2b104a8091d239884ef9ca_15.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08c656414c2b104a8091d239884ef9ca_15.png)'
- en: So fourth normal form is associated with what are called multi-value dependencies。
    When we specify a multi-value dependency， as we've done here with the double arrow。
    what this is saying is that if we take a particular social security number， in
    the relation。 we will have every combination of college names that are associated
    with that。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 所以第四范式与所谓的多值依赖有关。当我们指定一个多值依赖时，就像我们这里使用双箭头所做的那样，这意味着如果我们在关系中取一个特定的社会安全号码，我们将会得到与之关联的每一个大学名称的组合。
- en: social security number with every high school that's associated with that social
    security number。 We'll actually see that when we have this multi-value dependency。
    we automatically have this one too。 You know， it seems a bit complicated。 We will
    formalize it completely， but for now， just think about the English statement that
    multi-value dependency is saying that we're。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 每个社会安全号码与所有与该社会安全号码相关的高中一起存储。当我们有这个多值依赖时，我们实际上也会自动拥有这种关系。你知道，这看起来有点复杂。我们会完全形式化它，但现在，只需考虑多值依赖的英文陈述：它表明我们。
- en: going to have every combination of those two attributes or the values in those
    attributes。 for a given social security number。 In other words。 those values are
    really independent of each other。 So if we have that situation。 then what we should
    really do is store each college name in each high。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 将会得到每一个给定社会安全号码下的这两个属性或属性值的所有组合。换句话说，这些值实际上是相互独立的。所以，如果我们遇到这种情况，那么我们真正应该做的是将每个大学名称与每个高中名称分开存储。
- en: school for each social security number one time。 And that's what fourth normal
    form will do with that。 do for us。 Fourth normal form， similarly to Boyzka normal
    form， says if we have a dependency。 then the left hand side must be a key。 In
    this case， it's a multi-value dependency we're looking at。 so it's really saying
    something different。 But the basic idea is the same， which is that we want。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 每个社会安全号码只记录一次与每个高中的关联。这就是第四范式将为我们做的事情。与博伊斯-科得范式类似，第四范式也要求如果我们有依赖关系，那么依赖关系的左侧必须是一个关键字。在这种情况下，我们正在查看的是多值依赖，所以它实际上表达的是不同的意思。但基本思想是一样的，那就是我们希望。
- en: only one tuple that has each value that appears on the left hand side of a multi-value
    dependency。 So let's see what would happen in this example。 If we use our multi-value
    dependencies。 to decompose the relation based on the idea of fourth normal form，
    well it is the intuitive。 thing that happens。 We separate the information about
    the college names that a student applies to。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 只有一个元组包含在多值依赖的左侧出现的每个值。那么我们来看一下在这个示例中会发生什么。如果我们使用多值依赖根据第四范式的思路来分解关系，那么直观的结果是显而易见的。我们将学生申请的大学名称信息与高中本身的信息分开。
- en: from the information about the high schools themselves。 and then we'll see that
    we only store each fact， once and we do get the behavior of having C plus H tuples
    instead of C times H tuples。 Like with functional dependencies in Boyzka normal
    form will be completely formalizing all of this。 reasoning and the definitions
    in later videos。 To summarize， we're going to do relational design。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们会看到，每个事实只会存储一次，并且我们确实实现了存储C加H个元组，而不是C乘H个元组。就像在Boyzka范式中的函数依赖一样，我们将在后续的视频中完全形式化所有这些推理和定义。总结一下，我们将进行关系设计。
- en: by decomposition。 We're going to start by specifying mega-relations that contain
    all the。 information that we want to capture， as well as specifying properties
    of the data， usually。 reflecting the real world in some fashion。 The system can
    automatically decompose the mega-relations。 into smaller relations based on the
    properties we specified and guarantee that the final set of。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 通过分解。我们将从指定包含所有我们想要捕捉的信息的超级关系开始，并指定数据的属性，这些属性通常以某种方式反映现实世界。系统可以根据我们指定的属性自动将超级关系分解成更小的关系，并保证最终的关系集。
- en: relations have certain good properties captured in a normal form。 They will
    have no anomalies and。 they'll be guaranteed not to lose information。 We'll start
    by specifying properties as functional。 dependencies and from there the system
    will guarantee Boyzka normal form。 and then we'll add to that， property specified
    as multi-valued dependencies and from there the system will guarantee fourth normal。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 关系具有某些良好的属性，这些属性在一个标准化形式中被捕捉。它们不会出现异常，并且保证不会丢失信息。我们将从指定属性作为函数依赖开始，系统会保证Boyzka范式，然后我们会在此基础上添加作为多值依赖指定的属性，从而保证第四范式。
- en: form which is even stronger than Boyzka normal form and is generally thought
    to be good relational design。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这种形式比Boyzka范式更强，并且通常被认为是良好的关系设计。
- en: '![](img/08c656414c2b104a8091d239884ef9ca_17.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![](img/08c656414c2b104a8091d239884ef9ca_17.png)'
