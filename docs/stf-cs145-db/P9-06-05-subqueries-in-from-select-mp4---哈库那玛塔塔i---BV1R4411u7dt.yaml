- en: P9：06-05-subqueries-in-from-select.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P9：06-05-子查询-in-from-select.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
- en: In the next set of SQL queries， we'll see examples of using subqueries in the
    from and the select clauses。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的SQL查询集中，我们将看到在`from`和`select`子句中使用子查询的示例。
- en: '![](img/7b5613e8e603a195cba10b0a69c34cff_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b5613e8e603a195cba10b0a69c34cff_1.png)'
- en: In the previous video， we introduced subqueries， but we only used them in the
    wear clause。 In the condition of queries， we wrote subqueries that generated sets
    that we used for comparisons。 In the next set of queries， we're going to see that
    we can also use subqueries， select expressions。 in the from clause of queries，
    as well as in the select clause。 If we use a subqueries in the from。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一个视频中，我们介绍了子查询，但仅仅在`where`子句中使用了它们。在查询条件中，我们写了生成集合的子查询，用于比较。在接下来的查询集中，我们将看到，我们还可以在查询的`from`子句和`select`子句中使用子查询的选择表达式。如果我们在`from`子句中使用子查询。
- en: what we're really doing is running an nested select statement that's going to
    generate one of the tables that we use in the rest of the query。 If we use a subqueries
    in the select， then what we're doing is writing a select expression。 a sub-select
    expression that produces the value that comes out of the query。 So let's see this
    in action， and as usual， we'll be using our simple college admissions database
    with the college student and apply tables。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们真正做的是运行一个嵌套的`select`语句，它将生成一个我们在后续查询中使用的表格。如果我们在`select`中使用子查询，那么我们做的就是写一个选择表达式，一个子选择表达式，它产生查询结果中的值。让我们看看这个在实际操作中的表现，像往常一样，我们将使用我们简单的大学招生数据库，其中包含`college
    student`和`apply`表格。
- en: '![](img/7b5613e8e603a195cba10b0a69c34cff_3.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b5613e8e603a195cba10b0a69c34cff_3.png)'
- en: Our first query is going to lead to demonstrating the use of a subquery in the
    from clause。 You might remember from a previous video that we had the concept
    of scaling a student's GPA based on the size of their high school。 Specifically，
    we took the GPA and multiplied by the size of high school divided by a thousand。
    What we're going to do in this query is we're going to return all students where
    scaling their GPA changes its value by more than one。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第一个查询将演示如何在`from`子句中使用子查询。你可能还记得在前一个视频中，我们曾讨论过根据高中规模来缩放学生的GPA。具体来说，我们将GPA乘以高中规模除以1000的值。我们在这个查询中要做的是，返回所有通过缩放其GPA使其值发生超过1的变化的学生。
- en: specifically either the scale GPA minus the GPA is greater than one。 or the
    GPA minus the scale GPA is greater than one。 So let's run the query。 and we find
    a number of students whose GPA is modified by more than one by scaling it。 Now
    let's take a look at this query。 We have this expression that scales the GPA。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，要么是“规模GPA减去GPA大于1”，要么是“GPA减去规模GPA大于1”。所以让我们运行这个查询。我们会找到一些学生，他们的GPA通过缩放被修改了超过1。现在让我们来看一下这个查询。我们有一个表达式，它将GPA进行缩放。
- en: and we actually had to write the expression out three times。 Now remember this
    could in fact be a much more complicated calculation。 A smart database system
    might look at the query and recognize that it can do the computation once and
    use it in all three places。 but maybe we're not using a smart database system，
    and furthermore for the query itself。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: '而且我们实际上需要将表达式写三次。现在记住，实际上这个计算可能会更复杂。一个智能的数据库系统可能会查看查询并意识到，它可以只计算一次并在所有三个地方使用，但也许我们并没有使用一个智能的数据库系统，此外，对查询本身而言。 '
- en: we might like to simplify things and only write that expression once。 So simplifying
    the WHERE clause is actually fairly easy。 We can just use the absolute value function
    that's built into most SQL implementations。 So we write absolute value function，
    and we apply it to this computation here。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可能想要简化一些，仅仅写出这个表达式一次。所以，简化`WHERE`子句其实是相当容易的。我们只需要使用大多数SQL实现中内置的绝对值函数。我们写出绝对值函数，并将它应用于这个计算。
- en: We delete the second clause of the query， and we run the query and we should
    get exactly the same result。 and we do。 So that's good， but we still have two
    computations here of the scale GPA。 So what I'm going to do now is I'm going to
    put in the FROM clause a subquery。 and that subquery is going to among things
    compute the scale GPA。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 我们删除查询的第二个子句，运行查询，结果应该和之前完全相同。果然如此。所以这很好，但我们仍然在这里进行了两次GPA缩放计算。那么我现在要做的，是在`FROM`子句中加入一个子查询。这个子查询将计算出缩放后的GPA。
- en: When we put a subquery in the FROM clause， what we're doing is creating a select
    FROM WHERE statement that produces a relation。 but in the rest of the query we
    can treat that just like a relation。 so we can refer to the scale GPA in the rest
    of the query。 Alright。 so let me just do a little editing here。 So I'm going to
    take this select from here。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在 FROM 子句中使用子查询时，我们其实是在创建一个 select FROM WHERE 语句，它产生一个关系。在查询的其他部分，我们可以像处理一个关系一样处理这个结果。因此，我们可以在查询的其余部分引用该关系中的
    GPA。好了，让我稍微编辑一下。所以我将从这里开始写 select。
- en: this portion of the query， like that， and I'm going to turn it into its own
    subquery and put it in the FROM clause。 Now I'm going to give it a name G， and
    technically I might be able to leave that out。 but most SQL implementations require
    it。 This says compute the select FROM WHERE expression and call the result G。
    and now in the rest of the query， any time I refer to G。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 这部分查询，如此，我将其转化为自己的子查询，并放入 FROM 子句中。现在我给它起个名字 G，技术上来说我可能可以省略它，但大多数 SQL 实现都要求必须指定。这个意思是计算
    select FROM WHERE 表达式并将结果命名为 G。在查询的其他部分，每当我提到 G 时，它就代表着这个子查询的结果。
- en: I'm referring to the result of this subquery in the FROM。 Specifically， I now
    have scale GPA。 and if I want， I can put that it comes from G， although I don't
    need to， since it's not ambiguous。 and I can use that scale GPA in the rest of
    my query。 Now I'm still missing a select。 so I'll just put select star here， and
    I'll get all attributes back。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 我在 FROM 子句中引用了这个子查询的结果。具体来说，我现在有了 GPA，如果需要，我可以加上它来自 G，尽管不加也没问题，因为它并不模糊不清。我可以在查询的其余部分使用这个
    GPA。现在我还是缺少一个 select，所以我就加上了 select star，这样就可以把所有属性都返回了。
- en: and now I have a complete query where I computed the scale GPA in the FROM clause
    and used it elsewhere in the query。 I run this one， and I get， again， the exact
    same result。 We're going to see more examples of using subqueries in the FROM
    clause in the later video on aggregation。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我有了一个完整的查询，其中我在 FROM 子句中计算了 GPA，并在查询的其他地方使用了它。我运行这个查询，结果再次完全相同。在后续的聚合视频中，我们将看到更多在
    FROM 子句中使用子查询的例子。
- en: '![](img/7b5613e8e603a195cba10b0a69c34cff_5.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b5613e8e603a195cba10b0a69c34cff_5.png)'
- en: Our second major example is going to lead to using a subquery in the SELECT
    clause。 Let's start by explaining what this query does。 What we're going to do
    is we're going to find colleges。 and we're going to pair those colleges with the
    highest GPA among their applicants。 So this requires joining all three of our
    relations， college， apply， and student。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的第二个主要示例将涉及在 SELECT 子句中使用子查询。首先，我们来解释一下这个查询是做什么的。我们要做的是找到大学，并将这些大学与它们申请者中的最高
    GPA 配对。所以这需要将我们三个表——college、apply 和 student——进行连接。
- en: We have here the JOIN conditions。 We always need to remember to include those。
    We're going to return those college names， states， and GPAs， where the GPA is
    the highest。 and I'm using the greater than or equal to all construct here。 among
    the GPAs of the students who applied to that same college。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是我们的 JOIN 条件。我们始终需要记住包括这些条件。我们将返回大学名称、州和 GPA，其中 GPA 是最高的。我在这里使用了 "greater
    than or equal to all" 结构，来比较申请该大学的学生的 GPA。
- en: You might want to pause the video and just make sure you understand what the
    query is doing。 but again， what it's going to return is colleges with the highest
    GPA among their applicants。 Let's run the query， and we see that most colleges，
    all of the colleges in fact。 have a applicant with a 3。9 GPA。 That happens to
    be the highest in the database。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想暂停视频，确保你理解查询在做什么。但再说一遍，它会返回那些在申请者中拥有最高 GPA 的大学。我们运行查询后，看到大多数大学，实际上所有大学，都有一位
    GPA 为 3.9 的申请者。这恰好是数据库中的最高 GPA。
- en: and all of the colleges have an applicant with that GPA。 Now we see some duplicates
    here。 If we don't like duplicates， we use our usual trick of putting distinct。
    and now we have our four colleges in our database and the highest GPA of their
    applicants。 Now let's see how we can write this query using a subquery in the
    Select clause。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 所有的大学都有一位 GPA 达到该水平的申请者。现在我们看到一些重复的结果。如果我们不喜欢重复数据，我们可以使用我们通常的技巧——加上 distinct。现在我们得到了数据库中四所大学以及它们申请者的最高
    GPA。现在让我们看看如何通过在 SELECT 子句中使用子查询来编写这个查询。
- en: What a subquery in the Select clause does is performs a computation。 and as
    long as that computation returns exactly one value， that value is used in the
    result tuple。 So let me just start typing here a little bit。 What we're going
    to do here is we're going to select the college name and state from the college。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Select 子句中，子查询的作用是执行计算。只要该计算返回的正好是一个值，该值就会被用在结果元组中。所以让我开始在这里稍微输入一些。我们将在这里做的是从大学中选择大学名称和州。
- en: '![](img/7b5613e8e603a195cba10b0a69c34cff_7.png)'
  id: totrans-21
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b5613e8e603a195cba10b0a69c34cff_7.png)'
- en: Let me just pull this down here from the college， and then we're going to use
    a modified version of this query to compute the highest GPA for that particular
    college。 So we're going to have college name， state， and here comes the subquery
    in the From clause。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我从大学那里把它拉下来，然后我们将使用这个查询的修改版来计算该特定大学的最高 GPA。所以我们将有大学名称、州，然后是 From 子句中的子查询。
- en: So let's just put parens around there。 And we're going to， in the subquery，
    just compute the GPA。 and it's going to be the highest GPA for this college。 So
    we don't need to include college in our From list， and now we have college here。
    and the rest of this is the same query precisely。 The last thing we're going to
    do is label this attribute as GPA。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们在这里加上括号。然后在子查询中，我们只计算 GPA，它将是这个大学的最高 GPA。所以我们不需要在 From 列表中包含大学，现在我们这里有大学，剩下的部分是完全相同的查询。我们要做的最后一件事是将这个属性标记为
    GPA。
- en: and now we're all set。 You may want to pause the video and look carefully to
    make sure you understand how the query works。 but again， it's taking the， for
    each college， the name， and the rest of the class。 So we're going to use the same
    query， and we're going to use the same query。 and we're going to use the same
    query。 So we're going to use the same query。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们一切就绪。你可能想暂停视频，仔细查看，确保你理解查询是如何工作的。但再次强调，这对于每个大学，获取名称以及其余的班级。所以我们将使用相同的查询，并且我们将使用相同的查询。我们将使用相同的查询。所以我们将使用相同的查询。
- en: and we're going to use the same query， and we're going to use the same query。
    So we're going to use the same query， and we're going to use the same query。 and
    we're going to use the same query。 So we're going to use the same query。 and we're
    going to use the same query， and we're going to use the same query。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用相同的查询，并且我们将使用相同的查询。所以我们将使用相同的查询，并且我们将使用相同的查询。我们将使用相同的查询。我们将使用相同的查询，并且我们将使用相同的查询，和我们将使用相同的查询。
- en: The names of the students who applied to that college。 So everything looks pretty
    much the same。 except we don't need this big sub query， this big portion here。
    We write it like this。 we'll call it the student name， and that looks pretty similar。
    Again。 we've got the college name state， and then all the students who applied
    to that college。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 申请该大学的学生姓名。所以一切看起来差不多。除了我们不需要这个大的子查询，这一大部分。我们像这样写。我们称它为学生姓名，这看起来非常相似。再一次，我们得到了大学名称、州，以及所有申请该大学的学生。
- en: we run the query， and we get an error。 The error was expected。 and I'm using
    it to illustrate a point。 When you write a sub query in the Select clause。 it's
    critical that that sub query returned exactly one value。 because the result of
    that is being used to fill in just one cell of the result。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行查询，得到了一个错误。这个错误是预期的，我用它来说明一个问题。当你在 Select 子句中写子查询时，至关重要的是该子查询必须返回恰好一个值。因为它的结果将用于填充结果中的一个单元格。
- en: In our earlier example， we were computing the highest GPA for each college。
    and there's exactly one of those。 In this case， we have several students applying
    to colleges。 so we wouldn't know when we get a bunch of values in the result。
    which one to put in the tuple that's being constructed。 And in fact。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的例子中，我们计算了每个大学的最高 GPA，且正好有一个值。在这个情况下，我们有几个学生申请大学。所以当我们在结果中得到一堆值时，我们无法知道该选择哪个值来填充正在构造的元组。事实上。
- en: our result here says sub query returns more than one row， and that's the error。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的结果表明子查询返回了多行，这是错误的。
- en: '![](img/7b5613e8e603a195cba10b0a69c34cff_9.png)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![](img/7b5613e8e603a195cba10b0a69c34cff_9.png)'
