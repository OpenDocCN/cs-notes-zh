- en: P20：11-03-referential-integrity.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P20：11-03-referential-integrity.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
- en: This video introduces a very important type of constraint known as referential
    integrity。 As a reminder， integrity constraints in a database restrict the allowable
    data beyond。 what's already restricted by the structure and types of the database。
    Now the term referential integrity refers to integrity of references that appear
    in， the database。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这个视频介绍了一种非常重要的约束类型，叫做参照完整性。作为提醒，数据库中的完整性约束限制了允许的数据范围，超出了数据库结构和数据类型本身所限制的范围。现在，参照完整性这个术语是指数据库中出现的引用的完整性。
- en: In a relational database， a reference from one tuple to another occurs through
    specifying， values。 The referential integrity says that those values are valid。
    It's sort of equivalent to having no dangling pointers if we used pointers in
    the database。 We'll see a number of examples。
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在关系型数据库中，一个元组到另一个元组的引用通过指定值来实现。参照完整性规定这些值必须有效。这有点类似于如果我们在数据库中使用指针时，没有悬空指针的情况。我们将看到一些例子。
- en: '![](img/c5ce711d5929e2bef0a7f5441f6e5ab4_1.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5ce711d5929e2bef0a7f5441f6e5ab4_1.png)'
- en: So let's look at our simple example database with the students， colleges and
    students applying。 to colleges that we've been using for all of our demos。 Let's
    suppose for example that we had a student 123 who had applied to Stanford for
    some major。 let's say CS， with a decision of yes。 When we have this tuple。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们看一下我们用来做所有演示的简单示例数据库，包含学生、大学和申请大学的学生。假设比如我们有一位学生123，他申请了斯坦福大学的某个专业，假设是计算机科学专业，决定为“通过”。当我们有这个元组时。
- en: the value in the SID field here of 123 presumably refers to a， value here of
    an actual student。 So maybe 123 is student Mary with some GPA and some high school。
    And furthermore。 the Stanford value in the C name or college name attribute is
    presumably。 referring to the college name in the college table。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 这里SID字段中的值123可能指的是一位实际学生的值。例如，123可能是学生Mary，拥有某个GPA和高中记录。此外，C名称或大学名称属性中的Stanford值，可能是指大学表中的大学名称。
- en: So we would expect to have a Stanford value here。 So this little integrity talks
    about these values here referencing the corresponding values。 in the other tables。
    Specifically， if we have referential integrity from a attribute A say of a relation
    R to。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们应该期望在这里有一个斯坦福的值。这个小的完整性讨论的是这些值如何引用其他表中的相应值。具体来说，如果我们有从关系R的属性A到。
- en: an attribute B of another relation S， what that's saying is that every value
    that appears。 in the A column of relation R must have some corresponding value
    in the B column of relation， S。 So if we take a look at our example， we would
    say then that we would have referential integrity。 from the SID column of apply
    to the SID column of student。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个关系S的属性B，这表示关系R中的A列中的每个值必须在关系S的B列中有对应的值。所以，如果我们查看我们的示例，我们会说我们将拥有来自apply表的SID列到学生表的SID列的参照完整性。
- en: We would expect every value that appears in this column to also have a value
    in the， other column。 And similarly， we'll have referential integrity from the
    college name attribute and apply。 to the college name attribute in college。 Again，
    we want every value that appears in this column to also appear in this column。
    Now we might have a violation for example， if we had a say 555 applying to Stanford
    for。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我们期望出现在这个列中的每个值在另一个列中也有对应的值。同样，我们将从大学名称属性到大学表中的大学名称属性拥有参照完整性。同样，我们希望每个出现在此列中的值也出现在那一列中。现在我们可能会有一个违规情况，例如，如果我们有一个555申请斯坦福大学的。
- en: some major and some decision， if we have no 555 over in the student table， then
    this。 here would be considered a referential integrity violation。 Finally we might
    have 123 which is valid because we have 123 student here， but if 123 is applying。
    to Yale and we don't have Yale over here， then again we have a referential integrity
    violation。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一些专业和一些决定，如果我们在学生表中没有555，那么这里就会被视为参照完整性违规。最后，我们可能有123，它是有效的，因为在这里我们有123号学生，但如果123正在申请耶鲁大学，而我们在这里没有耶鲁大学，那么我们同样会有参照完整性违规。
- en: Now let me mention that referential integrity is directional。 So we talk about
    this SID here referencing the SID in the student table。 We could have referential
    integrity in the other direction but that's saying something， different。 That
    would be saying that every student must apply somewhere， every value for student
    ID。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我提到，引用完整性是有方向性的。所以我们谈到这个SID引用学生表中的SID。我们也可以有引用完整性反向的情况，但那是不同的情况。那意味着每个学生必须申请某个地方，每个学生ID的值。
- en: must appear in the apply table。 In this particular example。 we probably would
    not have that be the case。 We would probably be able to have students who hadn't
    yet applied anywhere or colleges。 where no one had applied yet。 And the most sensible
    direction for this referential integrity in this case is from the apply to。 the
    student and the apply to the college。 But again。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 必须出现在申请表中。在这个特定的例子中，我们可能不会这么做。我们可能允许学生还没有申请任何地方，或者允许学院没有人申请的情况。而在这种情况下，引用完整性的最合理方向是从申请到学生，以及从申请到学院。但这也只是其中之一。
- en: we could have it in both directions if we so wished。 Now just a few more details
    of referential integrity constraints。 The referencing attribute。 in this case
    the referencing attribute is A， is often called， the foreign key。 And in fact
    referential integrity is often referred to as foreign key constraints。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们愿意的话，也可以在两个方向上都有外键。现在，来看看关于引用完整性约束的更多细节。引用属性，在这个例子中引用属性是A，通常被称为外键。实际上，引用完整性常常被称为外键约束。
- en: And even in the SQL syntax we'll see that the term foreign key is used。 Second。
    when we have a referential attribute， in this case now we're talking about attribute，
    B。 so we have R dot A to S dot B。 The reference to attribute is usually required
    to be the primary key for its table or at least。 specified as unique。 And that's
    more about efficient implementation than anything else。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 即使在SQL语法中，我们也会看到使用外键这个术语。第二，当我们有一个引用属性，在这个例子中我们谈的是属性B，因此我们有R.A到S.B。引用属性通常要求是其表的主键，或者至少被指定为唯一。这个要求更多的是为了高效实现，而不是别的原因。
- en: But it is a requirement in the SQL standard and in most systems。 Third。 it is
    possible to have foreign keys that consist of multiple attributes， just like。
    keys themselves can be multiple attributes。 Let's say for example that in our
    college relation。 the college named together with the， state for my key， not the
    college name individually。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 但这是SQL标准和大多数系统中的要求。第三，可能存在由多个属性组成的外键，就像键本身可以由多个属性组成一样。例如，在我们的学院关系中，学院名称与州名一起构成主键，而不是单独的学院名称。
- en: If that were the case then our apply table would presumably have one more column
    that。 specified the state， so we know which college a student was applying to。
    And in that case we would have these two attributes together as the foreign key
    referencing the。 college name and state together in the college table。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果是这种情况，那么我们的申请表可能会多出一列，指定州名，这样我们就知道学生申请的是哪个学院。在这种情况下，我们会将这两个属性一起作为外键，引用学院表中的学院名称和州名。
- en: And we'll see an example of multi-attribute foreign key constraints in our demo。
    Now let's talk about the enforcement of referential integrity constraints。 First
    let's think about what operations can occur to the database to violate a constraint。
    It's not every possible modification。 So again let's suppose we have R dot A referencing
    S dot B。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在演示中看到多属性外键约束的例子。现在，让我们来讨论如何强制执行引用完整性约束。首先，想想哪些操作可能会违反约束。并不是所有可能的修改都会违反约束。再举个例子，假设我们有R.A引用S.B。
- en: So for example here we have apply referencing student and we have apply referencing
    college。 So certainly if we insert a tuple into the referencing relation， so if
    we insert it a。 tuple into the apply relation that could potentially violate the
    referential integrity。 if the values say an SID or C name didn't have matching
    values in the reference relations。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 比如在这里，我们有申请表引用学生，申请表引用学院。所以，确实，如果我们向引用关系中插入元组，例如在申请表中插入元组，这可能会违反引用完整性。如果SID或C
    name的值在引用关系中没有匹配的值。
- en: Sort of conversely if we delete from a reference relation， say we delete a student
    then that。 could cause a violation because say we have the one two three value
    here and the apply。 tuple that was referring to one two three after this is gone
    would then have effectively。 a dangling pointer。 And of course if we updated the
    referencing value either of these columns that could cause。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 反过来说，如果我们从引用关系中删除数据，例如删除某个学生，那么这可能会导致违反约束。比如说我们有值1 2 3，这个值在应用记录中引用了它，一旦这个元组被删除，引用1
    2 3的记录就会成为一个悬空指针。当然，如果我们更新引用的值，任何一个列的更新都有可能导致违反约束。
- en: a violation if the new value didn't exist in the reference table or if we update
    the referenced。 values that could also cause a violation。 In the SQL standard
    and in all implementations if we have an insertion into the referencing。 table
    or an update to the referencing table that causes a violation to the integrity
    constraint。 the referential integrity constraint then an error is generated and
    that modification is。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 如果新值在参考表中不存在，或者我们更新了被引用的值，这也可能导致违反约束。在SQL标准中，以及所有实现中，如果我们向引用表插入数据或更新引用表的数据，导致违反引用完整性约束，那么会生成一个错误，并且该修改会被禁止。
- en: not allowed just like the violation of other types of constraints。 For the reference
    table however table S or in our case table student and table college。 if there
    are modifications that violate the constraint if the referential integrity was。
    defined initially with some special options that is possible for the database
    system to。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 就像违反其他类型的约束一样，修改是被禁止的。然而，对于参考表，如表S，或者在我们的案例中是表student和表college，如果有违反约束的修改，如果引用完整性最初是使用一些特殊选项定义的，那么数据库系统是可能允许的。
- en: automatically modify the referencing table so that the constraint is not violated。
    So let's talk about that in a little more detail。 Let's start by talking about
    deletions from the referenced table。 So let's say we have our student one two
    three here maybe one two three is applied a。 couple of places and then we have
    our student one two three here in the student table so。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 自动修改引用表，以确保约束不被违反。让我们更详细地讨论一下这个问题。首先讨论从被引用表中删除数据。假设我们有学生编号1 2 3，可能在几个地方都有该学生的记录，然后我们在学生表中也有学生编号1
    2 3。
- en: right now referential integrity is good everything's okay but let's suppose
    that we delete the。 tuple with one two three。 So there's actually three possible
    things that can happen depending on how we set up the。 referential integrity constraint
    in the first place。 So the default behavior is what's called restrict so restrict
    is actually a keyword but that's。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 目前引用完整性是好的，一切正常，但假设我们删除了编号为1 2 3的元组。实际上，依赖于我们最初设置引用完整性约束的方式，可能会发生三种不同的情况。默认行为叫做“restrict”，这实际上是一个关键字。
- en: the default and it says that if we do a deletion to the reference table and
    a constraint becomes。 violated then we generate an error just like I said before
    and the modification is disallowed。 The two other options are a little bit more
    interesting。 One of them is called set null and what set null says is if we delete
    a tuple in a reference。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，如果我们对参考表进行删除操作并导致约束违反，那么我们会生成一个错误，就像我之前说的那样，修改会被禁止。另有两个选项稍微有点不同。其中一个叫做“set
    null”，它的意思是如果我们删除参考表中的某个元组。
- en: table then we don't generate an error rather we take the referencing tuples
    in this case。 these two tuples with one two three and we take away their SID's
    and we replace those。 SID's with null and this is considered acceptable from a
    referential integrity point of view to。 have nulls in the foreign key column so
    that will occur automatically。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有生成错误，而是把引用元组（在这个案例中是这两个带有1 2 3的元组）的SID去掉，并且用null替代这些SID，这在引用完整性角度上是被认为可以接受的，外键列中可以存在null值，这将自动发生。
- en: The third possibility is what's called cascade so let's set up a little more
    data let's say。 we have two three four who's applied to Stanford and we have Stanford
    over here and now let's。 say that we again delete this tuple so that would leave
    us with a referential integrity。 constraint violation here with the Stanford value。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种可能性被称为级联删除（cascade）。让我们设置一些数据，假设我们有两个三四，申请了斯坦福大学，斯坦福大学在这里。现在假设我们再次删除这个元组，那么这将导致一个引用完整性约束的违反，涉及到斯坦福值。
- en: So what cascade says for the on delete case is that if we delete this tuple
    then we'll。 simply delete any tuple that has a referencing value so this tuple
    will be deleted as well。 Now the reason it's called cascade is because sometimes
    you can actually set up a whole。 chain of referential integrity constraints so
    we have apply a referencing college here。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以级联在删除操作中的含义是，如果我们删除了这个元组，那么我们将简单地删除所有有引用值的元组。因此，这个元组也会被删除。之所以叫级联，是因为有时候你可以设置一个完整的引用完整性约束链，所以我们在这里有apply表引用college表。
- en: but maybe we'd have some other table referencing apply and maybe even another
    table referencing。 that one and if we say deleted a tuple from college that caused
    us to delete a tuple from。 apply if there was a tuple up here referencing that
    we might get a delete there and then a。 further delete and so on。 Typically cascading
    will only go one step but we'll see an example in our demo where we'll。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 但也许我们有其他表格引用了apply表，甚至还有其他表格引用了这个表。如果我们从college表删除了一个元组，导致我们从apply表删除一个元组，如果这里有一个引用该元组的元组，我们可能会在这里进行删除，然后继续删除，依此类推。通常，级联更新只会进行一步，但我们将在演示中看到一个例子，它会。
- en: set it up where a cascade will go some distance。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 设置一个级联更新，它会传播到某个距离。
- en: '![](img/c5ce711d5929e2bef0a7f5441f6e5ab4_3.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5ce711d5929e2bef0a7f5441f6e5ab4_3.png)'
- en: Now updates have a similar three options let's erase all this stuff here let's
    again set up。 some example data so let's say we have our student one two three
    who was applied to Stanford。 and we have one two three over here if we tried to
    update say this one two three to be。 the value four five six the restrict command
    would say that's not allowed because that would。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，更新有类似的三种选项。让我们清空这些内容，重新设置一些示例数据。假设我们有学生一二三申请了斯坦福大学，我们这里有一二三。如果我们尝试更新这个一二三为四五六，restrict命令会说这是不允许的，因为这样会。
- en: leave us with this dangling pointer and it will generate an error the set null
    command。 will similar to the delete if this is changed to four five six set any
    one two three values。 to null so in this case we change one two three to four
    five six in the student and then。 we would change one two three over here to null。
    Probably the most interesting case is the cascade case for the update。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 留下一个悬挂指针，并生成一个错误。set null命令类似于删除，如果这个值被更改为四五六，任何一二三的值都会被设置为null。所以在这种情况下，我们将学生表中的一二三更改为四五六，然后这里的一二三将被更改为null。最有趣的情况可能是更新的级联情况。
- en: It says that if we update a reference value then we'll make the same update
    to the referencing。 value so let's say we have Stanford over here in fact we have
    to if we have the value the。 referential integrity constraint being correct and
    now let's say that somebody comes along。 and says I think Stanford is spelled
    wrong it's actually Stanford well that's actually。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 它说，如果我们更新一个引用值，那么我们也会更新所有引用该值的地方。所以假设我们这里有斯坦福大学，实际上我们必须保证引用完整性约束是正确的。现在假设有人过来，说我认为斯坦福拼写错了，应该是Stanford，其实这就是。
- en: a common misspelling for Stanford the first one was correct but if someone makes
    this change。 if we have the cascade option for the referential integrity constraint
    between apply C name and。 college C name then that update will be propagated to
    any referencing values so in that case automatically。 this Stanford and any other
    Stanford's in the apply table will be updated automatically。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 斯坦福常见的拼写错误，第一个拼写是正确的，但是如果有人做了这个更改，如果我们在引用完整性约束中设置了级联选项，适用于apply C name和college
    C name之间，那么这个更新会传播到所有引用值的地方。所以在这种情况下，自动更新apply表中所有的Stanford。
- en: to Stanford。 Now let's take a look at referential integrity in action。 Let's
    create our three tables we create the college table with the college name as primary。
    key in the student table with the student ID as primary key that allows us to
    have referential。 integrity constraints in the apply table that reference those
    two attributes。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 到斯坦福。现在让我们看看引用完整性是如何实际运作的。我们创建我们的三个表，创建college表，以college name作为主键；创建student表，以student
    ID作为主键，这样我们就可以在apply表中引用这两个属性，确保引用完整性约束。
- en: When we create the table apply now we're going to specify the attributes and
    the keyword。 references says that we're setting up a referential integrity constraint
    from attribute student ID。 to the student ID attribute of the student table and
    similarly we extend the declaration。 of the college name attribute to have a referential
    integrity constraint to the college name attribute。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建申请表时，我们将指定属性和关键字。`references`表示我们正在为学生表中的学生 ID 属性设置一个引用完整性约束，类似地，我们将声明学院名称属性，设置一个引用完整性约束指向学院表的学院名称属性。
- en: of the college table。 We'll go ahead and create those tables。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续创建这些表格。
- en: '![](img/c5ce711d5929e2bef0a7f5441f6e5ab4_5.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5ce711d5929e2bef0a7f5441f6e5ab4_5.png)'
- en: Now let's try to populate our tables。 If we make a mistake we try to put our
    apply values in first but there's no data in the。 student table or the college
    table so when we try to insert for example student 123 applying。 to Stanford we'll
    get a referential integrity violation because there's no student 123 and。 there's
    no college Stanford and similarly for student 234 applying to Berkeley。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们尝试填充我们的表格。如果我们犯了个错误，尝试先插入申请记录，但学生表或学院表没有数据，那么当我们尝试插入例如学生 123 申请斯坦福时，我们会遇到引用完整性违规，因为没有学生
    123，也没有学院斯坦福，同样，学生 234 申请伯克利时也是如此。
- en: So we see the errors and what we need to do is first insert the tuples for the
    students。 and the colleges and then insert the apply tuples afterwards。 So let's
    insert the two students 123 and 234 and the two colleges Stanford and Berkeley。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们看到错误，接下来我们需要做的是首先插入学生的元组，然后插入学院的元组，最后插入申请的元组。所以我们先插入两个学生，123 和 234，以及两个学院，斯坦福和伯克利。
- en: '![](img/c5ce711d5929e2bef0a7f5441f6e5ab4_7.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5ce711d5929e2bef0a7f5441f6e5ab4_7.png)'
- en: No problem doing that and now we'll go ahead and again insert the apply tuples
    and this。 time everything should work just fine and it does。 In addition to inserts
    into the referencing table we also have to worry about updates。 So as a reminder
    let's take a look at the students that we have。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这样做没问题，现在我们继续插入申请的元组。这次一切应该都能正常工作，确实如此。除了插入引用表，我们还需要关注更新操作。所以作为提醒，让我们来看一下我们已经有的学生。
- en: We have students 123 and 234 and in the apply we have students 123 and 234 each
    applying。 to one college。 Now we're going to update our apply tuple that has student
    ID 123。 Our first update tries to set the student ID to 345 but we'll get a referential
    integrity。 violation because there's no student with ID 345。 Our second update
    will be more successful。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有学生 123 和 234，并且在申请表中，学生 123 和 234 各自申请了一所学院。现在我们将更新学生 ID 为 123 的申请记录。第一次更新尝试将学生
    ID 设置为 345，但会出现引用完整性违规，因为没有学生 ID 为 345。第二次更新将会更成功。
- en: It will update 123's application to have student ID 234。 We'll go ahead and
    execute the updates and we see that the second one did succeed。 So far we've looked
    at modifications to the referencing table but we also have to worry。 about modifications
    to the reference to tables。 In our case that's the student table and the college
    table。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 它将更新学生 ID 为 234 的申请记录。我们将执行这些更新操作，并看到第二个更新操作成功了。到目前为止，我们查看了对引用表的修改，但我们也需要关注对被引用表的修改。在我们的例子中，指的就是学生表和学院表。
- en: For example let's suppose we try to delete from the college table where the
    college name。 is Stanford。 If we try to delete that tuple we'll get an error because
    we do have an apply tuple that。 has the value Stanford and is therefore referencing
    the tuple we're trying to delete。 Similarly we can try to delete some student
    tuples。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，假设我们尝试从学院表中删除学院名称为斯坦福的记录。如果我们试图删除该元组，我们将得到一个错误，因为我们确实有一个申请记录，其中包含斯坦福的值，并且因此引用了我们试图删除的元组。同样，我们也可以尝试删除一些学生的元组。
- en: Let's go back and look at our apply relation and we now see that both of the
    student IDs。 in apply are 234。 So it should be okay to delete the student tuple
    with 123。 Nothing is referencing it but it should not be okay to delete the tuple
    with student ID。 234 and indeed when we run the commands we see that the first
    one generated an error。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回过头来看一下我们的申请关系，现在我们看到在申请表中的学生 ID 都是 234。所以删除学生 ID 为 123 的记录应该没问题，因为没有任何记录引用它，但删除学生
    ID 为 234 的记录就不行，实际上，当我们运行命令时，我们看到第一个删除操作生成了错误。
- en: and the second one succeeded。 How about updating a reference table？
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个更新操作成功了。那么更新引用表呢？
- en: Let's say that we decide we'd rather have Berkeley called berserkly。 So we try
    to update that college name but when we run the command we get an error because。
    we do have an apply tuple that's referencing the value as Berkeley。 And finally
    although we've been talking about data level modifications， referential integrity。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: constraints also place restrictions on dropping tables。 For example if we tried
    to drop the student table we would again get a referential integrity。 constraint
    because that would leave data in the apply table referencing non-existent data。
    in what would now be a non-existing table。 You can see that the error says you
    cannot drop a table student because other objects。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: are currently depending on it。 So when we have referential integrity constraints
    if we wanted to drop the tables we'd have to。 first drop the apply table and then
    drop the tables that it's referencing。 Now we're going to set up the apply table
    to experiment with some of the automatic mechanisms。 for handling referential
    integrity violations。 Specifically we still have the same referential integrity
    constraints from student ID to the。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: student table and from college name to the college table but for the student
    ID referential。 integrity constraint we're going to specify that if a student
    is deleted then we're going。 to set any referencing values to null and we do that
    with the keywords on delete which。 tells us what to do when there's a delete to
    the referenced table we use the set null， option。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: For the college name reference we're going to specify that if the college is
    updated。 in the college table and that says on update we'll use the cascade option。
    As a reminder what that says is if we change the college name then we'll propagate
    that。 change to any college names that reference it in the apply table。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Now I could have specified two more options。 I could have specified an on update
    option for the student ID and an on delete option。 for the college name so there
    could be four altogether because I let those out those will。 both use the default
    which is the restrict option which says if you perform a modification that。 generates
    a referential integrity violation then an error will be generated and the modification。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: will not be performed just as we saw in the previous examples。 So let's go ahead
    and let's create the table and then let's experiment with some modifications。
    Let's start by adding a couple more students to our student table。 So then if
    we take a look our replay table is currently empty because we just created。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: our college table has Stanford and Berkeley and our student table now has three
    tuples。 student IDs one two three two three four and two three five。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c5ce711d5929e2bef0a7f5441f6e5ab4_9.png)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: We'll insert five tuples into the apply table and all of them are going to be
    valid with。 respect to referential integrity。 We're only going to insert students
    that are one two three two three four three four five。 and they're only going
    to apply to Stanford or Berkeley。 So we've inserted those values and now we'll
    perform some modifications to see what happens。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将向申请表插入五个元组，并且所有元组都将符合引用完整性约束。我们只会插入学生一二三、二三四、三四五，他们只能申请斯坦福或伯克利。所以我们已经插入了这些值，现在我们将进行一些修改，看看会发生什么。
- en: '![](img/c5ce711d5929e2bef0a7f5441f6e5ab4_11.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5ce711d5929e2bef0a7f5441f6e5ab4_11.png)'
- en: We're going to delete from the student table all students whose ID is greater
    than 200。 Going back and looking at that table we'll see that student two three
    four and three four。 five are going to be deleted。 Now remember we specified on
    delete set null for the apply referential integrity constraint。 Specifically when
    we look at our apply table the references to the students that are about。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从学生表中删除所有ID大于200的学生。回头看那个表，我们会看到学生二三四和三四五将被删除。现在记住，我们已经指定了“删除时设置为null”的应用表的引用完整性约束。具体来说，当我们查看应用表时，关于这些学生的引用将会是。
- en: to be deleted should be automatically set to null when we run the update and
    when we。 run the delete command。 So we'll go ahead and we'll perform the deletion。
    We'll take a look at the apply table when we refresh we see that those values
    haven't。 been set to null and if we take a look at the student table we'll see
    that we only have。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 删除的记录应该在我们执行更新时自动设置为null，并且在我们执行删除命令时也是如此。我们将继续进行删除操作。刷新后，我们查看申请表，发现这些值并没有被设置为null。如果我们查看学生表，我们将看到只剩下。
- en: student one two three left。 Now let's test our cascade update。 As a reminder
    when we set up the college name referential integrity constraint we said。 that
    if we update the college name in the college table we should propagate those updates。
    using cascade to any references in the apply table。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 学生一二三离开了。现在让我们测试一下级联更新。作为提醒，当我们设置大学名称的引用完整性约束时，我们提到过，如果我们更新大学表中的大学名称，我们应该使用级联将这些更新传播到申请表中的所有引用。
- en: So we're once again going to attempt to change the name of Berkeley to berserkley
    this time。 it should allow us to do it and it should change any applications to
    Berkeley to now。 specify berserkley。 So we'll go ahead and run the command and
    we'll look at the apply and we will see once we。 refresh that indeed Berkeley
    has now been changed to berserkley。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们再次尝试将伯克利的名称改为“berserkley”，这次它应该允许我们这样做，并且应该将所有指向伯克利的申请更新为“berserkley”。我们将继续执行命令，查看申请表，并且一刷新，我们就会看到伯克利已经变更为berserkley。
- en: '![](img/c5ce711d5929e2bef0a7f5441f6e5ab4_13.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5ce711d5929e2bef0a7f5441f6e5ab4_13.png)'
- en: This example is a doozy it's going to show a whole bunch of features that we
    haven't。 seen in previous examples。 We're going to use a simple table T with just
    three attributes A。 B and C and we're going， to say that A and B together are
    a primary key for the table。 In the example we're going to demonstrate referential
    integrity within a single table。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子相当复杂，它将展示我们在之前的例子中没有看到的一些功能。我们将使用一个简单的表T，只有三个属性A、B和C，并且我们将说A和B一起是该表的主键。在这个例子中，我们将演示表内引用完整性。
- en: so intra table referential integrity。 We're going to demonstrate referential
    integrity involving multiple attribute foreign keys and。 primary keys and we're
    going to demonstrate a real cascading where we're going to have。 a cascaded delete
    that's going to propagate across numerous tuples。 So typically one thing of referential
    integrity is having a referencing table and then the。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，表内引用完整性。我们将演示涉及多个属性外键和主键的引用完整性，并且我们将演示一个真正的级联操作，其中包括级联删除，这将传播到多个元组。因此，引用完整性通常意味着有一个引用表，然后。
- en: reference value exists in a different table but there's nothing wrong with having
    referential。 integrity within a single table。 For example in the one attribute
    case I might have attribute B where every value in B must。 also appear in value
    A and that would be a referential integrity constraint within the， table。 In this
    case things are slightly more complicated because I'm using pairs of attributes
    for。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 引用值存在于不同的表中，但在单个表内实现引用完整性并没有问题。例如，在一个属性的情况下，我可能有属性B，其中B中的每个值必须出现在A的值中，这就会是一个表内的引用完整性约束。在这种情况下，事情稍微复杂一些，因为我使用的是属性对。
- en: my referential integrity constraint。 So specifically I'm going to have attributes
    B and C together reference attributes A and。 B together。 Syntactically to declare
    a multi-attribute referential integrity constraint in a table。 definition I have
    to put it at the end because I can't attach it to a single attribute just。 like
    I do when I have say multi-attribute keys which is also demonstrated here。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我的引用完整性约束。具体来说，我将让属性B和C一起引用属性A和B。语法上，要在表定义中声明多属性的引用完整性约束，我必须将其放在最后，因为我不能像声明多属性键那样，将其附加到单个属性上，正如这里也展示的那样。
- en: The syntax is that at the end of the table definition I say that I'm going to
    have a。 foreign key constraint and attributes B and C together have a referential
    integrity constraint。 to attributes A and B of the same table。 Then in addition
    I'm going to specify on delete cascade。 That means if I delete a attribute if
    I delete a tuple then any other tuple that's referencing。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 语法是在表定义的末尾，我声明将使用外键约束，并且属性B和C一起具有引用完整性约束，引用同一表中的属性A和B。然后我将指定“删除级联”选项。意味着如果我删除一个元组，如果删除某个元组，那么任何其他引用该元组的元组也会被删除。
- en: the AB values of that tuple with its BC values will automatically be deleted。
    So let's run the table creation， insert our data and then let's take a look at
    the table。
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 该元组的AB值及其BC值将被自动删除。所以让我们创建表格，插入数据，然后看看表格。
- en: '![](img/c5ce711d5929e2bef0a7f5441f6e5ab4_15.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5ce711d5929e2bef0a7f5441f6e5ab4_15.png)'
- en: and predict what's going to happen when we actually delete a tuple。 So here's
    the contents of table T after the insertions。 So we see that A and B together
    do form a key， all of the AB pairs are unique and furthermore。 every BC pair has
    a corresponding AB value in the same table。
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 并预测当我们实际删除一个元组时会发生什么。以下是插入操作后表T的内容。我们可以看到A和B组合在一起确实构成了一个键，所有的AB组合都是唯一的，此外，每个BC组合在同一个表中都有相应的AB值。
- en: So every tuple except the first the BC pair references the AB pair of the preceding
    tuples。 So we have 1 1 here referencing 1 1 in table 1 or 2 1 here references
    the 2 1 in tuple 2， and so on。 So our referential integrity constraints are intact
    for this table。 What we're going to do is we're going to delete the first tuple
    by running a command。
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 所以除了第一个元组外，每个BC组合都会引用前一个元组的AB组合。因此，这里有1 1引用表1中的1 1，或2 1引用元组2中的2 1，依此类推。所以我们表中的引用完整性约束保持完好。接下来，我们将通过运行一个命令来删除第一个元组。
- en: that says delete the tuple whose A value is 1。 When we delete tuple 1 because
    we have the cascaded delete set up we will need to delete。 any tuple whose reference
    values are 1 1。 So that will be tuple 2。 So after deleting tuple 1 the referential
    integrity constraint enforcement will delete， tuple 2。 When tuple 2 is deleted
    the 2 1 value will be gone so tuple 3 which references tuple 2。
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 这表示删除A值为1的元组。当我们删除元组1时，因为我们已经设置了级联删除，我们将需要删除任何引用1 1的元组。所以将是元组2。所以在删除元组1之后，引用完整性约束的执行将删除元组2。当元组2被删除时，2
    1的值将消失，因此引用元组2的元组3也会被删除。
- en: will be deleted then tuple 4 which references 3 will be deleted and so on until
    the entire。 table is empty。 So here's our delete command to delete the first tuple。
    We run the command。 we go back and we look at the table and when we refresh we
    see that， the table is indeed empty。 That concludes our demonstration of referential
    integrity constraints。
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 然后元组4（引用3的元组）将被删除，以此类推，直到整个表为空。所以这是我们删除第一个元组的删除命令。我们运行命令后，返回查看表格，刷新后我们会看到表格确实为空。这样，我们就完成了引用完整性约束的演示。
- en: Referential integrity is actually extremely common in deployments of relational
    databases。 The natural way to design a relational schema often has values in columns
    of one table referring。 to values in columns of another and by setting up referential
    integrity constraints the system。 itself will monitor the database and make sure
    that it always remains consistent。
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 引用完整性在关系数据库的部署中其实是非常常见的。设计关系模式的自然方式通常是一个表的列中的值引用另一个表的列中的值，通过设置引用完整性约束，系统本身会监控数据库，确保其始终保持一致性。
- en: '![](img/c5ce711d5929e2bef0a7f5441f6e5ab4_17.png)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c5ce711d5929e2bef0a7f5441f6e5ab4_17.png)'
