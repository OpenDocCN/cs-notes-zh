- en: P2：02-01-relational-model - 哈库那玛塔塔i - BV1R4411u7dt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P2：02-01-relational-model - 哈库那玛塔塔i - BV1R4411u7dt
- en: In this video， we'll learn about the relational model。 The relational model
    is more than 35 years old， and it's really the foundation of database。 management
    systems。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在这段视频中，我们将学习关系模型。关系模型已有35年以上的历史，它实际上是数据库管理系统的基础。
- en: '![](img/234987299992842518521b18d863f910_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/234987299992842518521b18d863f910_1.png)'
- en: It spawned a many billion dollar industry。 The relational model underlies all
    commercial database systems at this point in time。 It's actually an extremely
    simple model， and that's one of its benefits。 Furthermore。 it can be queried by
    that I mean we can ask questions of databases in the。 model using high level languages。
    High level languages are simple yet extremely expressive for asking questions
    over the database。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 它催生了一个数十亿美元的产业。目前，所有商业数据库系统都基于关系模型。它实际上是一个极其简单的模型，这也是它的优势之一。此外，它可以通过查询来使用，也就是说，我们可以通过高级语言向数据库提问。高级语言既简单又能高效表达查询。
- en: And finally， very importantly， there are extremely efficient implementations
    of the relational。 model and of the query languages on that model。 So let's move
    ahead and understand the basic constructs in the relational model。 So the primary
    construct is in fact the relation。 A database consists of a set of relations or
    sometimes referred to as tables。 each of。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，非常重要的是，关系模型及其查询语言的实现是极其高效的。那么，接下来我们将继续前进，了解关系模型中的基本构造。其实，最基本的构造就是关系。一个数据库由一组关系组成，或者有时称之为表格。
- en: '![](img/234987299992842518521b18d863f910_3.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/234987299992842518521b18d863f910_3.png)'
- en: which has a name。 So we're going to use two relations in our example。 And our
    example is going to be a fictitious database about students applying to colleges。
    For now。 we're just going to look at the students and colleges themselves。 So
    we're going to have two tables and let's call those tables the student table and
    the。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 每个表都有一个名称。我们将在示例中使用两个关系。我们的示例将是一个关于学生申请大学的虚构数据库。现在，我们只关注学生和大学本身。所以我们将有两个表格，分别称为学生表和大学表。
- en: college table。 Now as an aside， there's a healthy debate in the database world
    about whether tables。 relations ought to be named using the singular or the plural。
    I personally don't have a stake in that debate。 I'm going to use the singular。
    Next we have the concept of attributes。 So every relation in a relational database
    has a predefined set of columns or attributes。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 大学表格。顺便提一下，数据库界对表格（关系）应该使用单数还是复数的命名方式有一个广泛的争论。我个人对此争论并不关心。我将使用单数形式。接下来我们来看属性的概念。所以，在关系型数据库中，每个关系都有一组预定义的列或属性。
- en: each of which has a name。 So for our student table。 let's say that each student
    is going to have an ID， a name， a GPA， and a photo。 And for our college table，
    let's say that every college is going to have a name， a state。 and an enrollment。
    We'll just abbreviate that E and R。 So those are the labeled columns。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 每个表都有一个名称。对于我们的学生表格，假设每个学生会有一个ID，一个姓名，一个GPA和一张照片。而对于我们的大学表格，假设每个大学会有一个名称、一个州和一个注册人数。我们将用E和R来缩写注册人数。因此，这些就是标注好的列。
- en: Now the actual data itself is stored in what are called the tuples or the rows
    in the tables。 So let's put a couple of the data tuples in our tables。 So let's
    start with the students and let's say that our first student has ID123。 Name is
    Amy， GPA 3。9， and she's happy with that。 So she has a smiley photo。 And our second
    student is 234。 It's Bob。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，实际的数据本身存储在称为元组（或表格中的行）中。那么让我们把一些数据元组放入我们的表格中。首先是学生表，假设我们的第一个学生ID是123，姓名是Amy，GPA是3.9，她对这个成绩感到满意，所以她的照片是微笑的。我们的第二个学生是234，名字是Bob。
- en: His GPA is 3。4。 He's not quite as happy。 And typically of course a table will
    have thousands。 maybe millions， even sometimes billions， of rows， each row containing
    a value for each attribute。 In our college table， let's suppose we have， well
    of course we're going to start with。 Stanford in the state of California and Stanford's
    enrollment is 15，000。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 他的GPA是3.4，他不是特别满意。通常，一个表格会有成千上万，甚至数百万，甚至有时数十亿行，每一行都包含每个属性的一个值。在我们的大学表中，假设我们有，当然，我们将从斯坦福大学开始，它位于加利福尼亚州，斯坦福大学的注册人数是15,000。
- en: We'll include our cross bay rival Berkeley。 Again in the state of California。
    Berkeley's enrollment is a whopping 36，000。 And last of all。 we are going to not
    be West Coast biased。 We'll include MIT in the state of Massachusetts with an
    enrollment of 10。000。 Now of course there's going to be again many more tuples
    in the college table and many。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将包括我们的湾区对手伯克利。再次位于加利福尼亚州。伯克利的招生人数高达36,000人。最后，我们将避免西海岸偏见。我们将包括位于马萨诸塞州的麻省理工学院，招生人数为10,000人。现在，当然，大学表中将会有更多的元组，且其中许多元组的照片字段将为null。所以再次说明，null值可以出现在任何地方。
- en: more tuples in the student table。 Okay next let me mention that in a relational
    database typically each attribute or column。 has a type sometimes referred to
    as a domain。 For example the ID might be an integer。 the name might be a string，
    GPA might be a float， photo might be a jpeg file。 We do also in most relational
    databases have a concept of enumerated domain。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 学生表中的更多元组。好了，接下来我要提到，在关系型数据库中，通常每个属性或列都有一个类型，有时称为领域。例如，ID可能是整数，姓名可能是字符串，GPA可能是浮点数，照片可能是jpeg文件。在大多数关系型数据库中，我们也有枚举类型的概念。
- en: So for example the state might be an enumerated domain for the 50 abbreviations
    for states。 Now it's typical for relational databases to have just atomic types
    in their attributes。 as we have here but many database systems do also support
    structured types inside attributes。 Okay a little bit more terminology。 The schema
    of a database is the structure of the relation。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，州名可能是一个枚举类型，包含50个州的缩写。通常，关系型数据库中的属性是原子类型，就像我们这里的例子，但许多数据库系统也支持在属性中使用结构化类型。好了，再介绍一些术语。数据库的模式是关系的结构。
- en: So the schema includes the name of the relation and the attributes of the relation
    and the。 types of those attributes where the instance is the actual contents of
    the table at a given。 point in time。 So typically you set up the schema in advance
    then the instances of the data will change。 over time。 Now I mentioned that most
    columns have types but there's also a special value that's in。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，模式包括关系的名称、关系的属性以及这些属性的类型，而实例是给定时间点表格中的实际内容。通常，您会提前设置好模式，然后数据实例会随着时间变化。现在，我提到大多数列都有类型，但也有一个特殊的值，那就是。
- en: any type of any column and that's a special value known as null。 And those are
    actually quite important in relational databases。 Null values are used to denote
    that a particular value is maybe unknown or undefined。 And so let's suppose let's
    add another temple to our database。 Let's say three， four。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 任何类型的列中都会有一个特殊值，称为null。而这些值在关系型数据库中非常重要。null值用于表示某个特定值可能是未知的或未定义的。那么，假设我们向数据库中添加另一个元组。假设是三、四。
- en: five another student named Craig and for whatever reason Craig doesn't， have
    a GPA。 Maybe Craig is homeschooled， maybe Craig doesn't want to reveal his GPA。
    So then the database would contain a null value for Craig and we'll just put a
    neutral face， there。 Or for example maybe Bob doesn't want to have his photo in
    the database so then Bob would。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 另外一名学生名叫Craig，出于某种原因，Craig没有GPA。也许Craig是自学的，也许Craig不想透露自己的GPA。那么，数据库中就会为Craig存储一个null值，我们就用一个中性表情符号表示这个情况。又或者，假设Bob不想在数据库中上传自己的照片，那么Bob的照片字段就会。
- en: have a null value for his photo。 So again nulls can go anywhere。 Now null values
    are useful but one has to be very careful in a database system when you。 run queries
    over relations that have null values。 Now later video will go into this in more
    detail but I just wanted to give a sort of。 example of what can happen。 So let's
    suppose we're asking a query over our student table of all students whose GPA。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: null值是有用的，但在数据库系统中使用时必须非常小心，尤其是在执行包含null值的关系查询时。稍后的影片将更详细地讲解这一点，但我只是想举个例子，说明可能发生的情况。假设我们在查询学生表中所有GPA大于3.5的学生。
- en: is greater than 3。5。 So when we run that query on our database obviously we'll
    get Amy out。 Obviously we won't get Bob out but should we get Craig？
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: GPA大于3.5。所以当我们在数据库中运行这个查询时，显然我们会得到Amy的结果，显然不会得到Bob的结果，但Craig会出现在结果中吗？
- en: The answer is no we don't know for a fact that Craig's GPA is greater than 3。5。
    So we'll only get one student out from that query。 Now let's suppose we had another
    query where we're going to ask for the GPA less than or。 equal to 3。5。 So similarly
    we would not be in the result and we would certainly have Bob in the result。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 答案是否定的，我们无法确认Craig的GPA是否大于3.5。所以在那个查询中我们只会得到一个学生的结果。现在假设我们有另一个查询，我们要求GPA小于或等于3.5。那么类似地，Craig就不会出现在结果中，而Bob肯定会出现在结果中。
- en: and similarly we would not have Craig in the result because we don't know that
    his GPA。 is less than or equal to 3。5。 So far so good what gets a little weird
    is when we add an or here in our query and we。 say I want everyone whose GPA is
    greater than 3。5 or whose GPA is less than or equal to 3。5。 and even though it
    looks like every tuple should satisfy this condition that it's always true。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 同样地，我们不会在结果中看到Craig，因为我们不知道他的GPA是否小于或等于3.5。到目前为止还好，接下来的情况有点奇怪，我们在查询中加上了“or”并且我们说：“我想要所有GPA大于3.5的人，或者GPA小于或等于3.5的人。”即使看起来每个元组都应该满足这个条件——它似乎总是成立的。
- en: that's not the case when we have null values。 So that's why one has to be careful
    when one uses null values in relational databases。 Let me erase this now and let's
    move on to our next concept which is the concept of key。 Key is again another
    important concept in relational databases and a key is an attribute。 of a relation
    where every value for that attribute is unique。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这在我们使用空值时就不是这样了。所以这就是为什么在关系型数据库中使用空值时必须小心的原因。让我现在擦掉这些内容，接下来我们要讲解下一个概念——键的概念。键是关系型数据库中的另一个重要概念，键是一个属性，在这个属性中，每个值都是唯一的。
- en: So if we look at the student relation we can feel pretty confident that the
    ID is going。 to be a key。 In other words every tuple is going to have a unique
    value for ID。 Thinking about the college relation it's a little less clear。 We
    might be tempted to say that the name of the college is an ID but actually college。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果我们查看学生关系，我们可以相当有信心地认为ID将是一个键。换句话说，每个元组都会有一个唯一的ID值。考虑到大学关系，这就没那么清楚了。我们可能会倾向于认为大学的名称是ID，但实际上，大学...
- en: names probably are not unique across the country。 There's probably a lot of
    or several colleges named Washington College for example。 You know what we're
    allowed to have sets of attributes that are unique and that makes。 sense in the
    college relation。 Most likely the combination of the name and state of a college
    is unique and that's what。 we would identify as the key for the college relation。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 名字在全国范围内可能并不唯一。例如，可能有很多或者几个大学叫做Washington College。你知道，我们允许有一组属性是唯一的，这在大学关系中是有意义的。最有可能的是，大学的名称和州的组合是唯一的，这就是我们会把它作为大学关系的键来识别。
- en: Now you might wonder why it's even important to have attributes that are identified
    as， keys。 There's actually several uses for them。 One of them is just to identify
    specific tuples。 So if you want to run a query to get a specific tuple out of
    the database you would do that。 by asking for that tuple by its key。 And related
    to that database systems for efficiency tend to build special index structures
    or store。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你可能会想，为什么识别为键的属性如此重要。实际上，它们有几个用途。其一就是用来标识特定的元组。因此，如果你想执行一个查询来从数据库中提取特定的元组，你可以通过键来查找该元组。而与此相关的是，数据库系统为了提高效率，通常会构建特殊的索引结构或存储。
- en: the database in a particular way so it's very fast to find a tuple based on
    its key。 And lastly if one relation in a relational database wants to refer to
    tuples of another。 there's no concept of pointer in relational databases therefore
    the first relation will。 typically refer to a tuple in the second relation by
    its unique key。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库以一种特定的方式存储，因此基于其键可以非常快速地查找元组。而最后，如果一个关系型数据库中的关系想要引用另一个关系的元组，关系型数据库中没有指针的概念，因此第一个关系通常会通过唯一键引用第二个关系中的元组。
- en: '![](img/234987299992842518521b18d863f910_5.png)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![](img/234987299992842518521b18d863f910_5.png)'
- en: As our videos develop we'll see the importance of keys。 Okay just to wrap up
    I'll mention how one creates relations or tables in the SQL language。 It's very
    simple you just say create table give the name of the relation and a list of。
    the attributes。 And if you want to give types for the attributes it's similar
    except you follow each attribute。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 随着我们的视频内容发展，我们将看到键的重要性。好了，最后我提一下如何在SQL语言中创建关系或表。其实非常简单，你只需要说“create table”，给出关系的名称以及属性列表。如果你想为属性指定类型，类似地，你也可以指定类型，区别在于你需要为每个属性后面加上类型。
- en: name with its type。 So to wrap up the relational model has been around a long
    time has started a huge industry。 it's used by all database systems。 As you've
    seen it's a very simple model and we'll shortly see that it can be queried with。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 名字及其类型。所以总结一下，关系模型已经存在很长时间了，它催生了一个庞大的行业。它被所有数据库系统使用。如你所见，它是一个非常简单的模型，我们很快会看到，它可以用来查询。
- en: '![](img/234987299992842518521b18d863f910_7.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![](img/234987299992842518521b18d863f910_7.png)'
- en: very nice languages and finally it's been implemented very efficiently。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 非常不错的语言，最终它被高效地实现了。
