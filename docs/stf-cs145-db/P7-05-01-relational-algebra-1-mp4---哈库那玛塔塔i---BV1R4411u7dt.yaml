- en: P7：05-01-relational-algebra-1.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P7：05-01-relational-algebra-1.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
- en: This is the first of two videos where we learn about relational algebra。 Relational
    algebra is a formal language。 It's an algebra that forms the underpinnings of
    implemented languages like SQL。 In this video， we're going to learn the basics
    of the relational algebra query language and a few of the most popular operators。
    In the second video， we'll learn some additional operators and some alternate
    notations for relational algebra。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们学习关系代数的两部视频中的第一部。关系代数是一种形式化语言，它是一种代数，构成了像SQL这样的实现语言的基础。在这部视频中，我们将学习关系代数查询语言的基础知识，以及一些最常用的操作符。在第二部视频中，我们将学习一些额外的操作符和关系代数的其他表示法。
- en: '![](img/735696dfc3f70f4297457a50431c1618_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/735696dfc3f70f4297457a50431c1618_1.png)'
- en: Now， let's just review first from our previous video on relational querying
    that queries over relational databases。 operate on relations and they also produce
    relations as a result。 So if we write a query that operates， say， on the three
    relations depicted here。 the result of that query is going to be a new relation。
    And in fact。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们先回顾一下我们之前视频中关于关系查询的内容，查询关系型数据库时，查询操作是作用于关系的，并且查询的结果也会是一个关系。所以，如果我们写一个查询，假设是作用于这里描绘的三个关系，那么这个查询的结果将会是一个新的关系。事实上，
- en: we can pose queries on that new relation or combine that new relation with our
    previous relations。 So let's start out with relational algebra。 For the examples
    in this video。 we're going to be using a simple college admissions database with
    three relations。 The first relation， the college relation， contains information
    about the college name， state。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以对这个新关系提出查询，或者将这个新关系与我们之前的关系进行组合。所以让我们从关系代数开始。在本视频中的示例中，我们将使用一个简单的大学招生数据库，包含三个关系。第一个关系是大学关系，包含大学名称、州等信息。
- en: and enrollment of the college。 The second relation， the student relation。 contains
    an ID for each student， the student's name， GPA。 and the size of the high school
    they attended。 And finally。 the third relation contains information about students
    applying to colleges。 Specifically。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 和大学的注册信息。第二个关系是学生关系，包含每个学生的ID、姓名、GPA以及他们所就读高中的规模。最后，第三个关系包含关于学生申请大学的信息。具体来说，
- en: the student's ID， the college name where they're applying， the major they're
    applying for。 and the decision of that application。 I've underlined the keys for
    these three relations。 As a reminder， a key is an attribute or a set of attributes
    whose value is guaranteed to be unique。 So for our examples， we're going to assume
    that college names are unique， student IDs are unique。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 学生的ID、他们申请的大学名称、他们申请的专业，以及该申请的决策。我已经在这三个关系中标出了键。提醒一下，键是一个属性或一组属性，其值是唯一的。所以在我们的示例中，我们假设大学名称是唯一的，学生ID是唯一的，
- en: and that students will only apply to each college for a particular major one
    time。 So we're going to have a picture of these three relations at the bottom
    of the slides throughout the video。 The simplest query in relational algebra is
    a query that is simply the name of a relation。 So。 for example， we can write a
    query， student， and that's a valid expression in relational algebra。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 并且学生只会在某个特定专业上申请每所大学一次。所以在整个视频中，我们会在幻灯片的底部展示这三个关系的图示。关系代数中最简单的查询是仅仅查询一个关系的名称。所以，例如，我们可以写一个查询，student，这在关系代数中是一个有效的表达式。
- en: If we run that query on our database， we'll get， as a result， a copy of the
    student relation。 Pretty straightforward。 Now， what happens next is that we're
    going to use operators of the relational algebra to filter relations。 slice relations，
    and combine relations。 So let's go through those operators。 The first operator
    is the select operator。 So the select operator is used to pick certain rows out
    of a relation。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在数据库上运行这个查询，我们将得到学生关系的副本，作为查询的结果。非常简单。接下来发生的事情是，我们将使用关系代数的操作符来过滤关系、切片关系和组合关系。接下来，让我们通过这些操作符。第一个操作符是选择操作符。选择操作符用于从关系中选择某些行。
- en: The select operator is denoted by a sigma with a subscript that's the condition
    that's used to filter the rows。 that we extract from the relations。 So we're just
    going to go through three examples here。 The first example says that we want to
    find the students whose GPA is greater than 3。7。 So to write that expression in
    relational algebra， we write the sigma。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 选择操作符用希腊字母σ表示，带有一个下标，表示用于过滤行的条件。我们从关系中提取数据。这里我们通过三个示例来说明。第一个示例表示我们要找出GPA大于3.7的学生。要用关系代数表示这个表达式，我们写出σ。
- en: which is the selection operator， as a subscript that we're filtering for， GPA
    greater than 3。7。 and the relation over which we're applying that selection predicate。
    So this expression will return a subset of the student table containing those
    rows where the GPA is greater than 3。7。 If we want to filter for two conditions，
    we just do an AND of the conditions in the subscript of the sigma。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 这是选择操作符，带有我们要过滤的下标：GPA大于3.7，以及我们应用该选择谓词的关系。因此，这个表达式将返回一个包含GPA大于3.7的行的学生表子集。如果我们要筛选两个条件，只需将条件在σ的下标中进行与运算（AND）。
- en: So if we want， say， students whose GPA is greater than 3。7 and its high school
    size is less than 1。000， we'll write select GPA greater than 3。7。 We'll use the
    logical AND operator， a carrot。 High school size is less than 1，000。 And again，
    we'll apply that to the student relation。 And once again， the result of that will
    be a subset of the student relation containing the rows that satisfy the condition。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 所以，如果我们想找出GPA大于3.7且高中规模小于1000的学生，我们会写：选择GPA大于3.7。我们使用逻辑与操作符（^），高中规模小于1000。然后我们将其应用于学生关系。最终结果将是一个包含满足条件的行的学生关系的子集。
- en: If we want to find the applications to Stanford for a CS major。 then we'll be
    applying a selection condition to the apply relation。 Again， we write the sigma。
    and now the subscript is going to say that the college name is Stanford。 And the
    major is CS， again。 the AND operator。 And that will be applied to the apply relation。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想找出申请斯坦福大学计算机科学专业的学生，我们将对申请关系应用选择条件。我们再次写出σ，接下来下标会是学院名为斯坦福，专业是计算机科学，再次使用与操作符（AND）。这个条件将应用于申请关系。
- en: And it will return as a result a subset of the apply relation。 So the general
    case of the select operator is that we have the sigma。 we have a condition as
    a subscript， and then we have a relation name。 and we return as a result the subset
    of the relation。 Our next operator is the project operator。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 它将返回作为结果的申请关系的子集。选择操作符的一般形式是我们有σ，一个条件作为下标，然后是关系名。结果返回的是关系的子集。接下来是投影操作符。
- en: So the select operator picks certain rows and the project operator picks certain
    columns。 So let's say we're interested in the applications。 but all we wanted
    to know is the list of IDs and the decisions for those applications。 The project
    operator is written using the Greek pi symbol。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 所以选择操作符挑选出某些行，而投影操作符挑选出某些列。假设我们对申请感兴趣，但我们只想知道这些申请的ID列表和决策。投影操作符是用希腊字母π符号表示的。
- en: And now the subscript is a list of the column names that we would like to extract。
    So we write ID。 sorry， student ID， and decision， and we apply that to the apply
    relation again。 And now what we'll get back is a relation that has just two rows。
    It's going to have all the tuples of apply， but it's only going to have the student
    ID and the decision columns。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，下标是我们想提取的列名列表。我们写出ID，抱歉，是学生ID和决策，然后我们再次应用于申请关系。最终返回的将是一个只包含两列的关系。它将包含所有申请的元组，但仅包含学生ID和决策这两列。
- en: So the general case of a project operator is the projection and then a list
    of attributes can be any number and then a relation name。 Now what if we're interested
    in picking both rows and columns at the same time？
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 所以投影操作符的一般形式是投影符号，后面跟着一系列属性，可以是任意数量，然后是关系名。如果我们想同时选择行和列呢？
- en: So we want only some of the rows and we want only some of the columns。 Now we're
    going to compose operators。 Remember that relational queries produce relations。
    So we can write a query， say， with a select operator of the students whose GPA
    is greater than 3。7。 This is how we do that。 And now we can take that whole expression
    which produces a relation and we can apply the project operator to that and we
    can get out the student ID and the student name。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们只想要一些行，也只想要一些列。现在我们将组合运算符。记住，关系查询会产生关系。所以我们可以写一个查询，例如，使用选择运算符选择那些GPA大于3.7的学生。这就是我们如何操作的。现在我们可以取出整个表达式，它会产生一个关系，然后我们可以对其应用投影运算符，从中提取出学生ID和学生姓名。
- en: Okay， so what we actually see now is that the general case of the selection
    of projection operators weren't quite what I told you at first。 I was deceiving
    you slightly。 When we write the select operator。 it's a select with a condition
    on any expression of the relational algebra。 And if it's an big one。 we might
    want to put parens on it。 And similarly， the project operator is a list of attributes
    from any expression of the relational algebra。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，实际上我们现在看到的是选择和投影运算符的一般情况，并不完全是我最初告诉你的那样。我稍微欺骗了你。当我们写选择运算符时，它是一个带有条件的选择，适用于关系代数的任何表达式。如果它是一个大的表达式，我们可能需要加上括号。类似地，投影运算符是从关系代数的任何表达式中提取出的属性列表。
- en: And we can compose these as much as we want。 We can have select over project
    over select， select。 project and so on。 Now let's talk about duplicate values
    in the results of relational algebra queries。 Let's suppose we ask for a list
    of the majors that people have applied for and the decision for those majors。
    So we write that as the project of the major and the decision on the apply relation。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以根据需要随意组合这些运算符。我们可以有选择运算符叠加在投影运算符上，选择，选择，投影，等等。现在让我们来谈谈关系代数查询结果中的重复值。假设我们请求一个列出所有申请过的专业及其决策的列表。那么我们将它写作在申请关系中投影专业和决策。
- en: You might think that when we get the result of this query。 we're going to have
    a lot of duplicate values。 So we'll have CS， yes， CS， yes， CS， no， E， E， S， E。
    E， no and so on。 You can imagine in a large realistic database of applications。
    there's going to be hundreds of people applying for majors and having a yes or
    a no decision。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会认为，当我们得到这个查询的结果时，我们会有很多重复的值。所以我们会有CS，yes，CS，yes，CS，no，E，E，S，E，E，no，等等。你可以想象，在一个大型现实的申请数据库中，会有成百上千的人申请专业并且有yes或no的决策。
- en: The semantics of relational algebra says that duplicates are always eliminated。
    So if you run a query that would logically have a lot of duplicate values。 you
    just get one value for each result。 That's actually a bit of a difference with
    the SQL language。 So SQL is based on what's known as multi sets or bags and that
    means that we don't eliminate duplicates。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 关系代数的语义规定，重复项总是会被消除。所以如果你运行一个查询，结果中逻辑上会有很多重复值，你只会得到每个结果的一个值。这实际上与SQL语言有所不同。SQL基于所谓的多重集合或袋（multi
    sets or bags），这意味着我们不会消除重复项。
- en: whereas relational algebra is based on sets themselves and duplicates are eliminated。
    There is a multi set or bag relational algebra defined as well。 but we'll be fine
    by just considering the set relational algebra in these videos。 Our first operator
    that combines two relations is the cross product operator。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 而关系代数基于集合本身，重复项会被消除。也有定义多重集合或袋式关系代数，但我们在这些视频中只需考虑集合关系代数即可。我们用来组合两个关系的第一个运算符是叉积运算符。
- en: also known as the Cartesian product。 What this operator does is it takes two
    relations and it kind of glues them together so that their schema of the result
    is the union of the schemas of the two relations。 and the contents of the result
    are every combination of tuples from those relations。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 也被称为笛卡尔积。这个运算符的作用是它接受两个关系，并将它们“粘合”在一起，使得结果的模式是两个关系模式的并集，而结果的内容是来自这两个关系的每一对元组的所有组合。
- en: This is in fact the normal set cross product that you might have learned way
    back in elementary school。 So let's talk about， say， doing the cross product of
    student and apply。 So if we do this cross product， just to save drawing。 I'm going
    to just kind of glue these two relations together here。 So if we do the cross
    product。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 事实上，这就是你可能在小学时学过的普通集合叉积。所以我们来谈谈，例如，做学生和申请的叉积。如果我们做这个叉积，为了节省画图时间，我就把这两个关系粘在一起。所以如果我们做叉积。
- en: we'll get as a result a big relation here， which is going to have eight attributes。
    the eight attributes across the student and apply。 Now the only small little trick
    is that when we glue two relations together。 sometimes they'll have the same attribute
    name。 We can see we have SID on both sides。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 结果会是一个大关系，包含八个属性。学生和apply关系中的八个属性。现在唯一的小技巧是，当我们将两个关系连接在一起时，有时它们会有相同的属性名。我们可以看到，SID在两边都有。
- en: So just as a notational convention， when cross product is done and there's two
    attributes that are named。 they're prefaced with the name of the relation they
    came from。 So this one would be referred to in the cross product as the student。SID。
    where this one over here would be referred to as the apply。SID。 So again。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 作为一种记号约定，当进行笛卡尔积操作并且有两个同名属性时，它们会加上它们来源关系的前缀。因此，这个会被称为student.SID，而这个则会被称为apply.SID。所以，再次。
- en: we glue together in the Cartesian product， the two relations with four attributes
    each。 we get a result with eight attributes。 Now let's talk about the contents
    of these。 So let's suppose that the student relation had S tuples in it， that's
    how many tuples。 while the apply had A tuples in it， the result of the Cartesian
    product is going to have S times A tuples。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将两个具有四个属性的关系通过笛卡尔积连接在一起，得到一个具有八个属性的结果。现在让我们谈谈这些内容。所以假设学生关系中有S个元组，那就是有多少个元组。而apply关系中有A个元组，笛卡尔积的结果将包含S乘A个元组。
- en: It's going to have one tuple for every combination of tuples from the student
    relation and the apply relation。 Now the cross product seems like it might not
    be that helpful。 but what is interesting is when we use the cross product together
    with other operators。 And let's see a big example of that。 Let's suppose that
    we want to get the names and GPAs of students with a high school size greater
    than 1000 who applied to CS and were rejected。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 它会为学生关系和apply关系中的每一对元组组合生成一个元组。现在笛卡尔积看起来可能没有太大帮助，但有趣的是当我们将笛卡尔积与其他操作符一起使用时。让我们来看一个大的例子。假设我们想要获取高中规模大于1000、申请了计算机科学专业并被拒绝的学生的名字和GPA。
- en: Okay， so let's take a look。 We're going to have to access the students and the
    apply records in order to run this query。 So what we'll do is we'll take student
    cross apply as our starting point。 So now we have a big relation that contains
    eight attributes and all of those tuples that we described previously。 But now
    we're going to start making things more interesting because what we're going to
    do is a big selection over this relation。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，来看看。为了运行这个查询，我们必须访问学生和apply记录。所以我们将以student和apply的笛卡尔积作为起点。现在我们有了一个包含八个属性的大关系，以及之前描述的所有元组。但现在我们要开始让事情变得更有趣，因为我们要对这个关系进行一个大的选择操作。
- en: And that selection is first of all going to make sure that it only combines
    student and apply tuples that are referring to the same student。 So to do that
    we write student dot SID equals apply dot SID。 So now we've filtered the result
    of that cross product to only include combinations of student and apply tuples
    that make sense。 Now we have to do a little bit of additional filtering。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 选择操作首先会确保它只连接那些指向同一个学生的学生和apply元组。所以为了做到这一点，我们写出student.SID等于apply.SID。这样，我们就把笛卡尔积的结果过滤掉，只保留那些有意义的学生和apply元组的组合。现在我们需要做一点额外的过滤。
- en: We said that we want the high school size to be greater than 1000 so we do an
    operator in the high school。 We want them to have applied to CS so that's and
    major equals CS。 We're getting a nice big query here。 And finally we want them
    to have been rejected so and decision equals we'll just use an R for reject。 So
    now we've got that gigantic query but that gives us exactly what we want except
    for one more thing which is I said all we want is their names and GPAs。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们说过我们希望高中规模大于1000，所以我们在高中中做了一个操作。我们希望他们申请了计算机科学专业，所以条件是major等于CS。我们得到了一条很大的查询。最后，我们希望他们被拒绝，所以条件是decision等于，我们就用R表示拒绝。现在我们有了这个巨大的查询，但这正是我们想要的，除了还有一件事，那就是我说我们只想要他们的名字和GPA。
- en: So finally we take a big parentheses around here and we apply to that the projection
    operator getting the student name and the GPA。 And that is the relational algebra
    expression that produces the query that we've written in English。 Now we've seen
    how the cross product allows us to combine tuples and then apply selection conditions
    to get meaningful combinations of tuples。 It turns out that relational algebra
    includes an operator called the natural join that is used pretty much for the
    exact purpose。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 所以最终我们在这里加上一个大括号，并应用投影算符来获取学生姓名和 GPA。这就是关系代数表达式，它生成了我们用英文编写的查询。现在我们已经看到，笛卡尔积允许我们组合元组，然后应用选择条件以获得有意义的元组组合。事实证明，关系代数包含一个称为自然连接的算符，它基本上用于完全相同的目的。
- en: What the natural join does is it performs a cross product but then it enforces
    equality on all of the attributes with the same name。 So if we set up our schema
    properly for example we have student ID and student ID here meaning the same thing
    then when the cross product is created it's only going to combine tuples where
    the student ID is the same。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 自然连接的作用是执行笛卡尔积，但它会对所有同名的属性强制执行相等性条件。因此，如果我们正确设置了模式，例如我们有学生 ID 和学生 ID，它们的含义相同，那么在创建笛卡尔积时，它只会组合那些学生
    ID 相同的元组。
- en: And furthermore if we add collagen we can see that we have the college name
    here and the college name here。 If we combine collagen apply tuples we'll only
    combine tuples that are talking about the same college。 Now in addition one more
    thing that it does is it gets rid of these pesky attributes that have the same
    names。 So since when we combine for example student and apply with the natural
    join we're only combining tuples where the student SID is the same as the apply
    SID then we don't need to keep two columns。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果我们添加大学关系，我们可以看到这里有大学名称和这里的大学名称。如果我们将大学关系和申请关系的元组合并，它只会合并那些描述相同大学的元组。再者，自然连接还会去除这些烦人的同名属性。所以，当我们将学生和申请通过自然连接合并时，我们只会合并那些学生
    SID 与申请 SID 相同的元组，因此不需要保留两列。
- en: Two copies of that column because the values are always going to be equal。 So
    the natural join operator is written using a bow tie that's just the convention。
    You will find that in your text editing programs if you look carefully。 So let's
    do some examples now。 Let's go back to our same query where we were finding the
    names and GPA's of students from large high schools who applied to CS and were
    rejected。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 这两列是重复的，因为它们的值始终相等。所以自然连接算符是使用蝴蝶结符号表示的，这只是一个约定。如果你仔细查看文本编辑器中的内容，你会发现这个符号。现在让我们做一些例子。让我们回到之前的查询，查找那些来自大高中、申请计算机科学专业并被拒绝的学生的姓名和
    GPA。
- en: So now instead of using the cross product we're going to use the natural join
    which as I said was written with a bow tie。 What that allows us to do once we
    do that natural join is we don't have to write that condition that informs equality
    on those two attributes because it's going to do it itself。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 所以现在，我们不再使用笛卡尔积，而是使用自然连接，就像我之前说的那样，它是用蝴蝶结符号表示的。这样一来，我们在进行自然连接时，就不需要再写出那些强制相等的条件，因为它会自动处理。
- en: And once we've done that then all we need to do is apply the rest of our conditions
    which were that the high school is greater than 1000 and the major is CS and the
    decision is reject。 Again we'll call that R and then since we're only getting
    the names and GPA's we write the student name and the GPA。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们完成了这一点，我们需要做的就是应用其余的条件，即高中人数大于 1000、专业为计算机科学且决定为拒绝。我们再次称这个查询为 R，然后由于我们只需要获取姓名和
    GPA，我们会写出学生姓名和 GPA。
- en: Okay and that's the result of the query using a natural join。 So as you can
    see that's a little bit simpler than the original with the cross product and by
    setting up schemas correctly natural join can be very useful。 Now let's add one
    more complication to our query。 Let's suppose that we're only interested in applications
    to colleges where the enrollment is greater than 20。000。 So so far in our expression
    we've referred to the student relation and the apply relation but we haven't used
    the college relation。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，这是使用自然连接查询的结果。所以如你所见，这比原始的笛卡尔积查询要简单一些，通过正确设置模式，自然连接非常有用。现在，让我们给查询增加一个复杂条件。假设我们只关心那些申请了大学且录取人数超过
    20,000 的应用程序。因此，在我们的表达式中，我们引用了学生关系和申请关系，但尚未使用大学关系。
- en: But if we want to have a filter on enrollment we're going to have to bring the
    college the college relation into the picture。 This turns out to perhaps be easier
    than you think。 Let's just erase a couple of our parentheses here and what we're
    going to do is we're going to join in the college relation with the two relations
    we have already。 Now technically the natural join is a binary operator。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，如果我们想在注册表上进行筛选，就需要将学院（college）关系引入其中。结果证明，这可能比你想象的更容易。我们只需要删去一些括号，接下来我们将把学院关系与我们已经拥有的两个关系进行连接。现在，技术上来说，自然连接是一个二元操作符。
- en: People often use it without parentheses because it's associative but if we get
    pedantic about it we could add that and then we're in good shape。 Now we've joined
    all three relations together and remember automatically the natural join enforces
    equality on the shared attributes。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 人们经常在没有括号的情况下使用它，因为它是结合性的，但如果我们较为严格地讨论这个问题，我们可以加上括号，这样就没有问题了。现在我们已经将三个关系结合在一起，并且要记住，自然连接强制要求共享属性相等。
- en: Very specifically the college name here is going to be set equal to the apply
    college name as well。 Now once we've done that we've got all the information we
    need。 We just need to add one more filtering condition which is that the college
    enrollment is greater than 20。000 and with that we've solved our query。 So to
    summarize the natural join we the natural join combines relations。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 更具体地说，这里的学院名称将被设置为与应用的学院名称相等。现在，一旦我们完成了这个操作，我们就得到了所有需要的信息。我们只需要添加一个额外的筛选条件，即学院的注册人数大于20,000。通过这个条件，我们就解决了查询问题。总之，自然连接将关系结合起来。
- en: It automatically sets values equal when the attribute names are the same and
    then it removes the duplicate columns。 The natural join actually does not add
    any expressive power to relational algebra。 We can rewrite the natural join without
    it using the cross product。 So let me just show that rewrite here。 If we have
    and now I'm going to use the general case of two expressions。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 它会自动设置相同名称的属性值相等，然后删除重复的列。实际上，自然连接并没有为关系代数增加任何表达能力。我们可以通过笛卡尔积来重写自然连接。让我在这里展示一下这个重写过程。如果我们有，并且现在我将使用两个表达式的一般情况。
- en: One expression natural join with another expression that is actually equivalent
    to doing a projection on the schema of the first expression。 I'll just call it
    E1。 Now union the schema of the second expression that's a real union。 So that
    means if we have two copies we just keep one of them。 Over the selection of now
    we're going to set all the shared attributes of the first expression to be equal
    to the shared attributes of the second。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一个表达式的自然连接与另一个表达式实际上等同于对第一个表达式的模式进行投影。我就称它为E1。现在将第二个表达式的模式联合起来，这才是真正的联合。意味着如果我们有两个副本，我们只保留其中一个。现在在选择操作上，我们将设置所有共享属性，使得第一个表达式的共享属性等于第二个表达式的共享属性。
- en: So I'll just write E1 A1 equals E2 A1 and E1 A2 equals E2 A2。 Now these are
    the cases where again the attributes have the same names and so on。 So we're setting
    all those equal and that is applied over expression one cross product expression
    two。 So again the natural join is not giving us additional expressive power but
    it is very convenient notationally。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我会写成E1 A1等于E2 A1，并且E1 A2等于E2 A2。现在这些是属性名称相同的情况。我们将这些属性设置为相等，并且这是应用于表达式一与表达式二的笛卡尔积。所以，虽然自然连接没有提供额外的表达能力，但它在符号表示上非常方便。
- en: The last operator that I'm going to cover in this video is the theta join operator。
    Like natural join theta join is actually an abbreviation that doesn't add expressive
    power to the language。 Let me just write it。 The theta join operator takes two
    expressions and combines them with the bow tie looking operator but with the subscript
    theta。 That theta is a condition。 It's a condition in the style of the condition
    in the selection operator and what this actually says it's pretty simple is it's
    equivalent to applying the theta condition to the cross product of the two expressions。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 我将在本视频中讲解的最后一个操作符是θ连接操作符。与自然连接类似，θ连接实际上是一个缩写，它并没有为语言增加额外的表达能力。让我写一下。θ连接操作符接受两个表达式，并通过一个像蝴蝶结的操作符将它们结合在一起，不过是带有下标θ。这个θ是一个条件，它与选择操作符中的条件风格相似，实际上这就是说，它等同于对两个表达式的笛卡尔积应用θ条件。
- en: So you might wonder why I even mentioned the theta join operator and the reason
    I mention it is that most database management systems implement the theta join
    as their basic operation for combining relations。 So the basic operation is take
    two relations combine all tuples but then only keep the combinations that pass
    the theta condition often when you talk to people who build database systems or
    use databases when they use the word join they really mean the theta join。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 所以你可能会想，为什么我会提到 theta 连接操作符，原因是大多数数据库管理系统将 theta 连接实现为组合关系的基本操作。因此，基本操作是取两个关系，组合所有元组，然后只保留那些满足
    theta 条件的组合。通常，当你与构建数据库系统或使用数据库的人交谈时，当他们使用“连接”这个词时，他们实际上指的是 theta 连接。
- en: So in conclusion relational algebra is a formal language it operates on sets
    of relations and produces relations as a result。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，关系代数是一种形式化的语言，它操作关系的集合，并生成关系作为结果。
- en: '![](img/735696dfc3f70f4297457a50431c1618_3.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![](img/735696dfc3f70f4297457a50431c1618_3.png)'
- en: The simplest query is just the name of a relation and then operators are used
    to filter relations slice them and combine them。 So far we've learned the select
    operator for selecting rows the project operator for selecting columns the cross
    product operator for combining every possible pair of tuples from two relations
    and then two abbreviations。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最简单的查询只是关系的名称，然后使用操作符来筛选、切片和组合关系。到目前为止，我们已经学习了选择操作符，用于选择行；投影操作符，用于选择列；笛卡尔积操作符，用于组合来自两个关系的所有可能元组对；以及两个缩写。
- en: The natural join which is a very useful way to combine relations by enforcing
    equality on certain columns and the theta join operator。 In the next video we'll
    learn some additional operators of relational algebra and also some alternative
    notations for relational algebra expressions。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 自然连接是通过对某些列施加相等性来组合关系的一种非常有用的方式，以及 theta 连接操作符。在下一个视频中，我们将学习关系代数的一些附加操作符以及关系代数表达式的一些替代表示法。
- en: '![](img/735696dfc3f70f4297457a50431c1618_5.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/735696dfc3f70f4297457a50431c1618_5.png)'
