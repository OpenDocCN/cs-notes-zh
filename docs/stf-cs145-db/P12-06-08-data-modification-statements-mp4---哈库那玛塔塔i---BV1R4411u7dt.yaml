- en: P12：06-08-data-modification-statements.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P12：06-08-data-modification-statements.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
- en: In this final video， we'll learn the modification statements of SQL。 There are
    statements for inserting data， for deleting data， and for updating existing data。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在最后一个视频中，我们将学习 SQL 的修改语句。包括插入数据、删除数据和更新现有数据的语句。
- en: '![](img/ab0f0335a6c4ca1215b811cb8be15663_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab0f0335a6c4ca1215b811cb8be15663_1.png)'
- en: For inserting data， there are two methods。 The first method allows us to insert
    one tuple into the database by specifying its actual value。 So that's the command
    here。 We say "Insert into a table。"， We specify the values of a tuple。 and the
    result of that command will be to insert one new tuple into the table with that
    value。 The other possibility is to run a query over the database as a select statement。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 插入数据有两种方法。第一种方法允许我们通过指定实际值将一个元组插入到数据库中。就是这里的命令。我们说“插入到一个表中”，我们指定元组的值，命令的结果将是将一个新元组插入到表中并赋予该值。另一种方法是通过数据库上的查询运行
    SELECT 语句。
- en: That select statement will produce a set of tuples。 and as long as that set
    of tuples has the same schema as the table。 we can insert all of the tuples into
    the table。 So those are the two methods of inserting data。 and we'll see those
    shortly in our demo。 To delete data， we have a fairly simple command。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 该 SELECT 语句将生成一组元组，只要这组元组的模式与表相同，我们就可以将所有元组插入到表中。所以这就是插入数据的两种方法，我们很快会在演示中看到它们。要删除数据，我们有一个相对简单的命令。
- en: It says we delete from table where a certain condition is true。 So this condition
    is similar to the conditions that we see in the select statement。 and every tuple
    in the table that satisfies this condition will be deleted。 Now this condition
    can be fairly complicated。 It can include subqueries。
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 它说我们从表中删除，条件为真的时候。所以这个条件与我们在 SELECT 语句中看到的条件类似，表中满足此条件的每个元组都会被删除。现在这个条件可能相当复杂，它可以包含子查询。
- en: It can include aggregation over other tables， and so on， again to be seen in
    our demo。 Finally。 we're interested in updating existing data。 And that's done
    through a command。 Similar to the delete command， it similarly operates on one
    table。 It evaluates a condition over each tuple of the table， and now when the
    condition is true。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以包括对其他表的聚合等等，我们将在演示中看到。最后，我们感兴趣的是更新现有数据。这是通过一个命令完成的。与删除命令类似，它也只作用于一个表。它对表中的每个元组进行条件评估，当条件为真时。
- en: we don't delete the tuple。 Instead， we modify the tuple。 We take the attribute
    that's specified here， and we reassign it to have the value that's the result
    of the expression。 As we'll see in the demo， this condition here can be fairly
    complicated。 It can have subqueries and so on。 And this expression can also be
    quite complicated。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会删除元组，而是修改元组。我们取这里指定的属性，然后将其重新赋值为该表达式的结果。正如我们在演示中看到的，这里的条件可以非常复杂。它可以包含子查询等等。而这个表达式也可以相当复杂。
- en: It can involve queries over other tables or the same table in the database。
    Finally。 I wanted to mention that we can actually update multiple attributes in
    a tuple。 So if we're updating a table， again exactly the same， a single table。
    a condition identified with the tuples update， but now we can update simultaneously
    any number of attributes。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以涉及对其他表或同一表的查询。最后，我想提到的是，我们实际上可以更新元组中的多个属性。所以如果我们正在更新一个表，仍然是完全相同的，单个表，通过条件来识别需要更新的元组，但现在我们可以同时更新任意数量的属性。
- en: each by evaluating an expression and assigning the result of that expression
    to the attribute。 As always， our demos will use the simple college admissions
    database with colleges， students。 and applications。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 每个通过评估表达式并将该表达式的结果赋给属性。像往常一样，我们的演示将使用简单的学院招生数据库，包括学院、学生和申请。
- en: '![](img/ab0f0335a6c4ca1215b811cb8be15663_3.png)'
  id: totrans-10
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab0f0335a6c4ca1215b811cb8be15663_3.png)'
- en: As usual， we have four colleges， a bunch of students。 and a bunch of applications
    for the students to the colleges。 We'll first see some insert commands。 then some
    delete commands， and finally some update commands。 As I mentioned。 there's two
    different forms of insert command。 One that inserts a tuple at a time by specifying
    the values。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，我们有四个学院，一堆学生，还有一堆学生申请到这些学院。我们将首先看到一些插入命令，然后是一些删除命令，最后是一些更新命令。正如我提到的，插入命令有两种不同的形式。一种是通过指定值一次插入一个元组。
- en: and another that uses subqueries to insert tuples。 So let's start with the simple
    one。 Let's add a new college Carnegie Mellon to our database。 We do that by saying
    we want to insert into college， we use the keyword values。 and we simply list
    the values we want to insert。 The name of the college， the state。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 另外一个是使用子查询插入元组的方式。所以我们先从简单的开始。让我们向数据库中添加一所新的大学——卡内基梅隆大学。我们通过说我们要插入到大学表，使用关键字values，然后简单列出我们要插入的值：大学的名称，所在州。
- en: and the enrollment。 We run the query， and we go take a look now at the college
    relation。 Let's go to college。 Here we go， and we see now that Carnegie Mellon
    has been added to our database。
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 然后是注册情况。我们运行查询，现在来查看大学关系。我们去大学表。好了，现在我们看到卡内基梅隆大学已经被添加到我们的数据库中。
- en: '![](img/ab0f0335a6c4ca1215b811cb8be15663_5.png)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab0f0335a6c4ca1215b811cb8be15663_5.png)'
- en: Now let's do a little more complicated insert commands。 Now that Carnegie Mellon
    is in our database。 let's have some students apply。 What we're going to do is
    have those students who haven't applied anywhere yet。 apply to Carnegie Mellon
    to be a computer science major。 Let me take it step by step。 Let's start by finding
    those students who haven't applied anywhere。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们进行一些更复杂的插入命令。既然卡内基梅隆大学已经在我们的数据库中，我们就让一些学生进行申请。我们将让那些尚未申请过任何学校的学生，申请卡内基梅隆大学的计算机科学专业。让我一步一步来。我们首先找出那些还没有申请任何学校的学生。
- en: So this is a review of what we saw earlier。 We're going to find those students
    whose ID is not in the subqueries that selects all of the IDs in the apply relation。
    We run the query， and we discover that we have four students who haven't yet applied
    anywhere。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 这回顾了我们之前看到的内容。我们将找到那些ID不在子查询中、子查询选择了所有在申请关系中的ID的学生。我们运行查询，发现有四个学生还没有申请任何学校。
- en: The next thing we're going to do is turn this query into something that constructs
    the tuples that we want to insert into the apply relation。 As a reminder， the
    apply relation has the student's ID， the name of the college。 the major that they're
    applying for， and the decision。 So we'll construct the student's ID。 of course。
    We want them to apply to Carnegie Mellon。 We want them to major in CS。 And for
    now。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们要做的是将这个查询转化为构造我们想要插入到申请关系中的元组的查询。提醒一下，申请关系包含学生的ID、大学名称、申请的专业和决策。所以我们将构造学生的ID，当然，我们希望他们申请卡内基梅隆大学，申请计算机科学专业。目前先这样做。
- en: let's say that we don't know what the decision is， so we'll put a no value in
    for the decision。 So let's run this query， and now we see for our four students，
    we've constructed a tuple。 four tuples， that are ready to be inserted into the
    apply relation。 They have the appropriate schema。 So now that we have that query
    all ready to go。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们不知道决策是什么，所以我们会为决策设置一个空值。现在运行这个查询，我们可以看到对于四个学生，我们已经构建了一个元组。四个元组，准备插入到申请关系中。它们具有适当的模式。现在我们已经准备好运行这个查询了。
- en: we say insert into apply， and we run the query， and we'll see that four tuples
    are inserted into the apply relation。 Let's go take a look at the relation。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们说插入到申请表，然后运行查询，我们将看到四个元组被插入到申请关系中。我们去查看这个关系。
- en: '![](img/ab0f0335a6c4ca1215b811cb8be15663_7.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab0f0335a6c4ca1215b811cb8be15663_7.png)'
- en: Let's try again。 Here we've got apply， and now we see we have our four new tuples。
    and as a reminder， in this user interface， a blank cell is what's used for a null
    value。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 再试一次。这里我们有申请表，现在我们看到我们有了四个新的元组，提醒一下，在这个用户界面中，空白单元格用来表示空值。
- en: '![](img/ab0f0335a6c4ca1215b811cb8be15663_9.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab0f0335a6c4ca1215b811cb8be15663_9.png)'
- en: Now let's see a little more action for Carnegie Mellon。 Let's find students
    who have applied for an EE major at other colleges， and have been turned down。
    and let's have them apply to Carnegie Mellon， and let's accept them right away。
    So again。 I'm going to do this step by step。 The first thing we'll do is we will
    find students who have applied for EE at another college。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们为卡内基梅隆大学做点更多的操作。我们找到那些已经在其他大学申请了电气工程专业，并且被拒绝的学生，让他们申请卡内基梅隆大学，并且立刻接受他们。所以，我会一步一步地操作。首先，我们会找到那些在其他大学申请电气工程专业的学生。
- en: So we'll change this to N， where the major equals EE。 And we want students who
    are rejected。 so the decision equals no。 So we have YN for our decision。 and let's
    just check how many students we have in that category。 Let's run the query here。
    and now we see there's two students， and if we went back and looked at the apply
    relation。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将其改为 N，其中主修专业为 EE。我们希望那些被拒绝的学生，所以决策为 no。这样我们就有了 YN 作为我们的决策。现在让我们检查一下这类学生有多少。我们在这里运行查询。现在我们看到有两个学生，如果我们回去查看申请关系。
- en: we would find indeed they'd apply to EE and been rejected。 Now let's turn this
    into a query that constructs tuples that we'd like to insert into the apply relation。
    So we need the student ID。 We want them to apply to Carnegie Mellon。 Excuse my
    slow typing as usual。 This time they're going to apply to EE， and we're going
    to accept them right away。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们会发现，确实他们申请了 EE 并且被拒绝了。现在让我们将这个转换为一个查询，构造出我们想要插入到申请关系中的元组。我们需要学生ID，我们希望他们申请卡内基梅隆大学。请原谅我一贯的打字速度。这次他们将申请
    EE，并且我们会立即接受他们。
- en: So let's just check that query。 So now we've produced two tuples that are ready
    to be inserted into the apply relation。 We say insert into apply with the subquery。
    We run it。 and we see that two rows of an insert into apply。 Let's go take a look
    at that。 and we need to refresh here。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 所以让我们检查一下那个查询。现在我们已经生成了两个元组，准备插入到申请关系中。我们说 insert into apply，使用子查询。我们运行它，看到插入了两行。让我们去查看一下，并且我们需要刷新。
- en: '![](img/ab0f0335a6c4ca1215b811cb8be15663_11.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab0f0335a6c4ca1215b811cb8be15663_11.png)'
- en: and we look down and we see that indeed the two students have applied to EE。
    and they've been accepted。 Now let's explore the delete command。 What we're going
    to do in this example is we're going to find all students who have applied to
    more than two different majors。 and we're going to decide those are unreliable
    students。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们往下看，发现这两位学生确实申请了 EE，并且已经被接受。现在让我们来探讨一下 delete 命令。在这个例子中，我们将找到所有申请了超过两个不同专业的学生，并且我们将决定这些学生是不可靠的。
- en: and we're going to entirely delete them from the database。 So let's start by
    forming the query that finds the students who have applied to more than two majors。
    Here it is。 You may want to remember the group by and the having clause。 So it
    says we go to the apply relation。 We form groups or partitions by SID。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将完全从数据库中删除他们。现在让我们首先形成一个查询，找到那些申请超过两个专业的学生。就是这个查询。你可能要记住 group by 和 having
    子句。所以说，我们去申请关系表，按照 SID 分组或分区。
- en: so we're going to consider the set of applications for each student individually。
    We're going to count how many distinct majors there are in each group。 and if
    that number is greater than two， we're going to return the student's ID。 and for
    now let's look at how many majors they applied for。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将考虑每个学生的申请集。我们将统计每个组中不同专业的数量。如果这个数量大于二，我们将返回该学生的 ID。现在我们来看一下他们申请了多少个专业。
- en: So we find in our database that there are two students who have applied for
    three majors。 and we don't like those students， so we're just going to get rid
    of them。 Here's how we do it。 We say delete from student where， and as a reminder。
    the delete command is of the form delete from the table where。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们在数据库中找到有两个学生申请了三个专业。我们不喜欢这些学生，所以我们要把他们删除掉。这是我们操作的方式。我们说从学生表中删除，其中，提醒一下，删除命令的格式是
    delete from 表 where。
- en: and then you can have a simple condition or a complicated condition。 so this
    is a sort of complicated condition。 We're going to say where their SID is in。
    and we're going to turn this into a subquery。 We don't need to count the distinct
    here。 In。 let me just format this a little better， is in the set of student IDs
    who have applied to more than two majors。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你可以有一个简单的条件，也可以有一个复杂的条件。这个是一个复杂的条件。我们将说他们的 SID 在……并且我们将其转化为一个子查询。这里我们不需要进行去重计数。在……，让我稍微把这个格式调整得更好，表示在申请超过两个专业的学生ID集合中。
- en: So we should be deleting student 345 and 876 if all goes well。 Let's run the
    query。 We did delete two rows。 Let's go back and take a look at the students。
    and we should find that 345 and 876 are gone， and indeed they are。 Now we've deleted
    them from the students， but we haven't deleted them from the apply relation。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 所以如果一切顺利，我们应该删除学生 345 和 876。让我们运行查询。我们确实删除了两行。让我们回去看看学生记录，我们应该发现 345 和 876 已经没有了，确实如此。现在我们从学生表中删除了他们，但我们还没有从申请关系中删除他们。
- en: so we can write the same deletion statement exactly as a matter of fact， and
    just delete from apply。 Now I want to mention that not all database systems allow
    this particular deletion。 Some database systems don't allow the， they'll allow
    deletion commands where the subquery includes the same relation that you're deleting
    from。 and it can be a little tricky， but some do postgres does。 That's what we're
    running today。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们可以完全照原样写出相同的删除语句，只需从apply中删除即可。现在我想提到的是，并非所有数据库系统都允许这种特定的删除。有些数据库系统不允许这样的删除，它们只允许删除命令，其中子查询包含你正在删除的相同关系。虽然这可能有些棘手，但有些数据库系统允许，例如Postgres就是支持的。这就是我们今天运行的系统。
- en: and so we'll run the query， and this time 8 rows were affected。 so we had 8
    applications for students who had applied to more than two distinct majors。 And
    again。 it will be those same students， but we could go back and check if we want
    to look in the apply relation。 We'll see that 876 and 345 are now gone from the
    apply relation as well。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们将运行查询，这次影响了8行数据。我们发现有8个申请来自那些申请了两个以上不同专业的学生。再次强调，这些仍然是相同的学生，但我们可以返回并检查apply关系。如果我们检查，我们会发现876和345已经从apply关系中消失。
- en: Now going back to our query， as I mentioned， some database systems don't support
    this form of deletion。 and so it's a bit more complicated to do this exact deletion
    in those systems。 The way to do it would typically be to create a temporary table。
    put in the results of this subquery， and then delete from apply where the student
    ID is present in that temporary table。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在回到我们的查询，正如我之前提到的，有些数据库系统不支持这种形式的删除，因此在这些系统中执行这种删除操作会更为复杂。通常的做法是创建一个临时表，将这个子查询的结果放入临时表中，然后从apply中删除学生ID存在于临时表中的记录。
- en: You could give that a try on SQLite or MySQL， and see if you get the same result
    you ought to。 Let's see one more deletion。 In this example， we've decided that
    any college that doesn't have a CS applicant is probably not worth keeping in
    the database and will delete it。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以尝试在SQLite或MySQL中运行这个操作，看看是否能得到相同的结果。让我们再看一个删除的例子。在这个例子中，我们决定删除任何没有计算机科学专业申请者的学院，因为它们可能不值得保留在数据库中。
- en: We'll start by doing the select command， and then we'll translate it to a delete。
    So this select command finds colleges where their college name is not among the
    college names in the apply relation where the major is CS。 In other words， this
    finds all colleges where nobody has applied for CS。 We run the query and we discover
    that nobody's applied for CS at Cornell。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先执行select命令，然后将其转化为delete命令。因此，这个select命令会查找那些其学院名称不在apply关系中，且专业是计算机科学的学院。换句话说，这会找到所有没有人申请计算机科学的学院。我们运行查询后发现，康奈尔大学没有人申请计算机科学。
- en: If we want to now delete the tuple， what we do， it's very simple transformation
    here。 We just say delete from college， and then the rest is the same where the
    college name is not among those where someone's applied to CS。 We run the query，
    it's successful， and if we go back and now we look at our college relation。 we
    will see that Cornell is indeed gone。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在想删除元组，操作非常简单。我们只需要说从college中删除，然后其余部分与之前一样，即查找那些没有人申请计算机科学的学院。我们运行查询，成功执行，如果我们现在回去查看我们的college关系，我们会看到康奈尔大学已经消失。
- en: '![](img/ab0f0335a6c4ca1215b811cb8be15663_13.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab0f0335a6c4ca1215b811cb8be15663_13.png)'
- en: Finally， let's take a look at some update commands。 In this first command。 we're
    going to find students whose GPA is less than 3。6 and who have applied to Carnegie
    Mellon。 We're going to accept those students， but we're going to turn them into
    economics majors。 Let's start by finding the students who have applied to Carnegie
    Mellon with a GPA less than 3。6。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，让我们来看一些更新命令。在第一个命令中，我们将找到那些GPA低于3.6并且申请了卡内基梅隆大学的学生。我们将接受这些学生，但他们的专业将变为经济学专业。让我们首先找到那些申请了卡内基梅隆大学且GPA低于3.6的学生。
- en: Here's the query。 Again， this is a review from previous videos。 We find in the
    apply relation where the college is Carnegie Mellon and where the student ID is
    among those students whose GPA is less than 3。6。 We run the query and we find
    that there are two such applications。 Now what we want to do is update the apply
    relation and we're going to accept these students but for an economics major。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 这是查询。再一次，这是之前视频的回顾。我们在apply关系中查找，其中学院是卡内基梅隆大学，且学生ID属于那些GPA低于3.6的学生。我们运行查询后发现有两个这样的申请。现在我们要做的是更新apply关系，并且我们将接受这些学生，但他们的专业将是经济学。
- en: We change the select to an update and this is we're going to update the apply
    relation。 We're going to update every tuple that satisfies the condition。 We happen
    to know it's these two tuples and we're going to set the decision for these students
    to be equal to yes and we're going to set the major to be equal to economics。
    We run the query。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将select改为update，这是我们将更新apply关系。我们将更新每个满足条件的元组。我们知道正是这两个元组，我们将这些学生的decision字段设置为yes，并将major字段设置为经济学。我们运行查询。
- en: '![](img/ab0f0335a6c4ca1215b811cb8be15663_15.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab0f0335a6c4ca1215b811cb8be15663_15.png)'
- en: It's succeeded and we go now and we look at the apply relation and we find these
    two students have now applied to economics and they've been accepted。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 更新成功，现在我们查看apply关系，发现这两名学生已经申请了经济学专业，并且已经被接受。
- en: '![](img/ab0f0335a6c4ca1215b811cb8be15663_17.png)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab0f0335a6c4ca1215b811cb8be15663_17.png)'
- en: Here's a more complicated and highly motivated update command。 In this command
    we're going to find the students who have the highest GPA and has applied to major
    in EE and we're going to change them from an EE major to a CSE major。 a computer
    science and engineering rather than just having them waste their time on electrical
    engineering。 All right， so let's take a look at this query which is going to find
    the applications that we're going to modify。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个更复杂且具有高度动机的更新命令。在这个命令中，我们将找到那些GPA最高并且申请EE专业的学生，然后把他们的专业从EE改为CSE，即计算机科学与工程，而不是让他们浪费时间在电气工程上。好了，让我们来看一下这个查询，它将找到我们要修改的申请记录。
- en: This query is an excellent review from previous videos because it has triply
    nested subqueries。 So again our goal is to find students who have applied to major
    in EE。 So here are students who have applied to major in EE but we want them to
    have the highest GPA of anybody who's applied to major in EE。 So in the innermost
    we found this find the students who have applied to EE， their student-90s。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询是之前视频的一个优秀复习示例，因为它包含了三层嵌套子查询。所以我们的目标再次是找到那些申请EE专业的学生。这里是那些申请EE专业的学生，但我们希望他们的GPA是所有申请EE专业的学生中最高的。所以在最里面，我们找到了这些申请EE的学生，他们的学生ID为90的学生。
- en: then moving out one level we find the GPA's of all the students who have applied
    to major in EE。 Now we find all students whose GPA is at least as high as the
    highest EE major， EE applicant。 And finally we find all students who have applied
    to EE and have that highest GPA。 Phew， okay。 let's run the query and see who this
    is。 We discover that it's student one， two。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们向外展开一层，找出所有申请EE专业的学生的GPA。现在我们找出所有GPA至少与最高EE专业申请者相等的学生。最后，我们找出所有申请EE且GPA最高的学生。呼，好了，让我们运行查询，看看是谁。我们发现是学生1和学生2。
- en: three and that student has applied three times actually to EE to Stanford。 Cornell
    and Carnegie Mellon。 So now that we have identified those students transforming
    this command to do the update is actually relatively simple。 We update apply and
    instead of having the major be EE we have the major be CSEE。 That major equals。
    sorry， CSEE。 That's it。 We run the query and it's succeeded and we go back and
    we look at the apply relation and we refresh。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个学生实际上已经申请了三次EE（电气工程）专业，分别是斯坦福大学、康奈尔大学和卡内基梅隆大学。所以现在我们已经识别出了这些学生，将这个命令转换为更新操作其实相对简单。我们更新了apply，并且将专业从EE改为CSEE。CSEE就是计算机科学与电子工程专业。就是这样。我们运行查询，成功执行，然后返回并查看apply关系，刷新数据。
- en: '![](img/ab0f0335a6c4ca1215b811cb8be15663_19.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab0f0335a6c4ca1215b811cb8be15663_19.png)'
- en: And here we see that student one to three has now applied to CSEE rather than
    EE at those three universities。 Let's see a couple more updates that are a little
    silly but demonstrate some features。 In this example we're going to give every
    student the highest GPA and the smallest high school in the database。 So what
    it's demonstrating is that in the set command the right hand side of the equals
    can itself be a sub query。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们看到学生1到3现在已经申请了CSEE专业，而不是EE专业，在这三所大学中。让我们再来看几个稍显愚蠢，但展示一些功能的更新示例。在这个例子中，我们将给每个学生一个最高的GPA，并且选择数据库中最小的高中。这展示了在set命令中，等号右侧可以是一个子查询。
- en: Here we're updating every student， there's no where clause。 so that means every
    table is going to satisfy the condition。 And for each student we're going to set
    their GPA to the result of finding the maximum GPA in the database。 And we're
    going to set their size high school to the result of finding the minimum size
    high school。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里我们正在更新每个学生，没有where子句。这意味着每个表都将满足条件。对于每个学生，我们将他们的GPA设置为数据库中最大GPA的值。同时，我们将他们的高中规模设置为数据库中最小高中规模的值。
- en: We run the query and we go take a look at the student relation and we will see
    now that every student has a GPA of 3。9， and every student has a size high school
    of 200。 What we're formerly the largest and smallest values in the database。 Our
    very last query says we're in a great mood today。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们运行查询，然后查看学生关系，现在我们会看到每个学生的GPA是3.9，每个学生的高中规模是200。这就是我们之前数据库中的最大值和最小值。我们最后的查询表明我们今天心情很好。
- en: let's go to our apply relation and let's accept everybody。 Very simple query
    just says update apply。 there's no where condition so every couple satisfies the
    query。 We set the decision equal y。 here we go make a lot of students happy， let's
    take a look at the apply relation and we will see now that everybody has been
    accepted。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进入我们的申请关系，并接受所有人。这个非常简单的查询只需要执行更新操作，apply表没有where条件，所以每个学生都会满足查询条件。我们将决策设为y。这样我们就能让许多学生开心了。接下来让我们查看apply关系，现在我们会看到所有人都已经被接受。
- en: '![](img/ab0f0335a6c4ca1215b811cb8be15663_21.png)'
  id: totrans-56
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ab0f0335a6c4ca1215b811cb8be15663_21.png)'
- en: it。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 它。
