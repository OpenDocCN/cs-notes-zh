- en: P8：06-04-subqueries-in-where.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: P8：06-04-subqueries-in-where.mp4 - 哈库那玛塔塔i - BV1R4411u7dt
- en: This SQL video， which as usual， will consist mostly of running live queries。
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 这个SQL视频，和往常一样，主要包括运行实时查询。
- en: '![](img/3f7a592b952283e868e586835ed9d075_1.png)'
  id: totrans-2
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f7a592b952283e868e586835ed9d075_1.png)'
- en: introduces sub queries in the WHERE clause。 As usual， we start with our basic。
    select from WHERE expression， and we're going to add to it now the ability in
    the。 condition part of the select from WHERE expression to include sub queries。
    Sub queries。 are nested select statements within the condition and we'll see they're，
    actually quite powerful。
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 介绍了WHERE子句中的子查询。像往常一样，我们从基本的select from WHERE表达式开始，现在我们将在条件部分添加子查询的能力。子查询是在条件部分内的嵌套select语句，我们将看到它们实际上非常强大。
- en: As usual， we'll be using a sample demonstration database， that consists of colleges，
    students。 and students applying to colleges。 As always。
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 和往常一样，我们将使用一个示范数据库，包含大学、学生和学生申请大学的数据。像往常一样。
- en: '![](img/3f7a592b952283e868e586835ed9d075_3.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f7a592b952283e868e586835ed9d075_3.png)'
- en: we'll have our four colleges， a bunch of students， and a bunch of records that。
    show students applying to colleges。 So let's launch right into our first query。
    that shows a sub query in the WHERE clause。 What this query finds is the。 IDs
    and names of all students who have applied to major in CS to some college。
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将有四所大学，一堆学生，以及一些记录，显示学生们申请大学的情况。那么让我们直接进入第一个查询，展示WHERE子句中的子查询。这个查询找到了所有申请计算机科学专业的学生的ID和姓名。
- en: So here's the sub query in the WHERE clause。 This expression right here in。
    the WHERE clause finds the IDs of all students who have applied to major in CS。
    So now we have that set of IDs。 Our outer query says let's take from the。 students
    those students whose ID is in that set and let's select their ID and， their name。
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是WHERE子句中的子查询。这个表达式在WHERE子句中查找所有申请计算机科学专业的学生ID。所以现在我们得到了这组ID。我们的外部查询是说，选择那些ID在这个集合中的学生，并选择他们的ID和姓名。
- en: So we go ahead and execute the query and we find out that five。 students have
    applied to major in CS。 Now we actually can do this query without a。 sub query
    in the WHERE clause。 So let's take a look。 We can do it instead by。 joining the
    student relation with the apply relation。 So here we do what we。
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们执行查询后发现，五个学生申请了计算机科学专业。现在其实我们可以不使用WHERE子句中的子查询来完成这个查询。我们来看看。我们可以通过将学生关系与申请关系连接来完成。因此，我们所做的就是这样。
- en: learned in previous videos。 We take student and apply， we write the join。 condition
    to make sure we're talking about the same student， we make sure they're， majoring
    in CS。 and we get their ID and their name。 Let's run the query。 Whoops， an， error。
    I knew that was coming。 This is just to remind you about disambiguating， attributes。
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的视频中学过的内容。我们将学生和申请连接，写出连接条件，确保我们讨论的是同一个学生，确保他们主修的是计算机科学专业，并获取他们的ID和姓名。让我们执行查询。哎呀，出错了。我就知道会出现这个问题。这只是为了提醒你关于消除歧义的属性。
- en: The ID here in the select clause could have come from student or。 apply and
    even though the value is equal we do have to disambiguate by putting one， of those。
    So let's put student。sid and let's run the query。 Okay， now we see we got。 more
    students back than we got back when we ran the query using the sub query。 Let's。
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在select子句中的ID可以来自学生或申请，尽管值相同，我们仍然需要通过指定其中一个来消除歧义。所以我们写student.sid，然后执行查询。好，现在我们看到返回的学生比使用子查询时更多了。让我们。
- en: go back and look。 We got five results here and we got several more here but
    the。 additional results are actually duplicate values。 So we have two copies for
    example， of one， two。 three， Amy。 The reason for that is that Amy actually applied
    to major in， CS at multiple colleges。 So if we go back and we look at the apply
    data we'll see， that Amy was one， two。
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 回去看看。我们这里有五个结果，还有更多的结果，但是这些额外的结果实际上是重复的。例如，我们有两个相同的记录，一个是1，2，3，Amy。原因是Amy实际上申请了多个大学的计算机科学专业。所以如果我们回去查看申请数据，我们会看到，Amy的记录有两条，分别是1，2。
- en: three applied to major in CS at Stanford as well as， Berkeley。 Let's hope she
    selects Stanford。 In any case that's why we got Amy twice。
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 三个学生同时申请了斯坦福和伯克利的计算机科学专业。希望她选择斯坦福。无论如何，这就是为什么Amy的记录出现了两次。
- en: '![](img/3f7a592b952283e868e586835ed9d075_5.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f7a592b952283e868e586835ed9d075_5.png)'
- en: in the join because she applied twice。 Back here where we use the sub query
    we。 were just looking at students and whether their ID was in the set。 Okay so
    when we。 do the join we get basically the same answer but we have some duplicate
    values。 Of course we can fix that by adding distinct。 We run the query and now
    we have。
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在连接中，因为她申请了两次。回到我们使用子查询的地方，我们只是看学生的ID是否在集合中。好吧，所以当我们使用`join`时，得到的答案基本相同，但我们有一些重复的值。当然，我们可以通过添加`distinct`来解决这个问题。我们运行查询，现在得到的结果和使用子查询时一样。
- en: the same result that we got when we used the sub query。 Let's look at some other。
    similar queries and let's focus again on the duplicates issue because it gets
    a。 little tricky as we'll see。 This query is very similar to the previous one
    finding。 students who are applying to major in CS but this time we're only getting
    the。
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些其他类似的查询，再次关注重复项的问题，因为这会变得有点棘手，正如我们将要看到的那样。这个查询与之前的非常相似，查找那些申请计算机科学专业的学生，但这次我们只获取学生的。
- en: names of the students and not their IDs。 So we run the query and we find our
    same， five students。 Just want to mention that these two craigs are two different
    craigs。 if we go back to our original result there's three four five Craig and
    five four， three Craig。 So coming back here we find the names of the students
    who majored in， CS。
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 学生的姓名而不是他们的ID。所以我们执行查询，找到了我们之前的五个学生。我只想提到这两个Craig是两个不同的Craig。如果我们回到原始结果，会看到三个四五Craig和五四三Craig。所以回到这里，我们找到了那些计算机科学专业的学生的姓名。
- en: Now similarly to what we did previously let's write this query using a join。
    instead of using the sub query in the WHERE clause。 So here's the join we're。
    joining student and apply on the students ID majoring in CS as always the only。
    difference is that we're just selecting the name。 We run the query and we get
    again。
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，和我们之前做的类似，让我们用`join`来写这个查询，而不是在`WHERE`子句中使用子查询。所以这里是`join`，我们将学生和申请表通过学生ID连接，计算机科学专业照常，唯一的不同是我们只选择了姓名。我们执行查询，结果又是这样。
- en: many more results than we got previously because we get two copies when a student。
    has applied to major in CS at two different places。 And just as we did before。
    we can add distinct to get rid of the duplicates。 Well something different happened
    this time。 This time when we get rid of the， duplicates we only have four results
    where previously we had five and the。
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 我们得到了比之前更多的结果，因为当一个学生同时申请了两个不同的地方的计算机科学专业时，我们会得到两份副本。就像之前做的那样，我们可以通过添加`distinct`来去除重复项。不过这次发生了一些不同的情况。这次，当我们去除重复项时，结果只有四个，而之前有五个。
- en: reason is that previously we included the student ID in the result and so the。
    two instances of Craig were two different craigs and didn't cause， duplicates
    to be eliminated。 We can see that back here Craig and Craig but in this。 result
    because we only kept the names the two copies of Craig turned into one， result。
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们之前将学生ID包含在结果中，所以Craig的两个实例被认为是不同的Craig，并没有导致重复项被删除。我们可以看到回到这里，Craig和Craig，但在这个结果中，因为我们只保留了姓名，这两个Craig的副本合并成了一个结果。
- en: Now we might wonder why do we care about duplicates so much。 Let's see。 an example
    where duplicates really do matter quite a bit。 We're going to do。 exactly the
    same query again finding students who have applied to major in CS。 but now we're
    not retrieving the IDs or names or we're retrieving the GPAs of， those students。
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们可能会想，为什么我们这么在意重复项呢？让我们来看一个例子，看看重复项到底有多重要。我们将再次执行完全相同的查询，查找申请计算机科学专业的学生，但这次我们检索的是这些学生的GPA，而不是他们的ID或姓名。
- en: Presumably what we're interested in doing is some analysis of。 the GPAs of students
    who choose to apply for CS。 So let's run the query as always。 we get our five
    results and here's the GPAs of the five students who have applied， to major in
    CS。 Once again this will be the last time I promise we'll do this。
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们感兴趣的是分析选择申请计算机科学专业学生的GPA。那么，像往常一样，我们运行查询，得到五个结果，这五个学生的GPA如下。再一次，我保证这将是最后一次，我们使用`join`而不是子查询来做这个查询。
- en: query using a join instead of the sub query。 So here we go we've got student。
    and applied and joined on SAD majoring in CS and returning the GPA。 Once again。
    because we have students who applied multiple times for CS we're getting。 more
    than our five results so we get a rather large number of results here and。
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我们已经有了学生和申请的连接，基于学生ID，计算机科学专业，返回GPA。再次强调，由于有学生申请计算机科学专业多次，我们得到了比五个结果更多的结果，数量相当大。
- en: again we have duplicates。 So here's where the problem comes in。 If we use this。
    result to compute the average GPA we'll be counting some students multiple times。
    and presumably that's not what we want to do。 Presumably we want to count each。
    student who's applied to CS once in the computation of say the average GPA。 That。
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们再次遇到重复的情况。那么问题就出在这里。如果我们用这个结果来计算平均 GPA，我们会把一些学生算多次，显然这不是我们想要的。显然，我们希望每个申请了计算机科学（CS）的学生只算一次，在计算平均
    GPA 时就应该是这样。
- en: worked in the previous query when we got the five results for the five students，
    who applied to CS。 When we do the join we get too many results but this time again。
    we're gonna have a problem when we do select distinct because some of these。 students
    have the same GPA and now we only have four GPAs instead of the five。
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的查询中，得到了五个结果，代表五个申请了计算机科学（CS）的学生。当我们进行连接时，我们得到了太多结果，但这次当我们使用 `select distinct`
    时，又会遇到问题，因为其中一些学生的 GPA 是相同的，现在我们只有四个 GPA，而不是五个。
- en: that we should have and if we compute the average GPA now then we're not。 factoring
    in one of the students GPAs。 So in this case neither the version with。 distinct
    nor the version without distinct gives us the right number of。 GPAs and neither
    of those will give us the correct average。 The only way to get。
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 所以我们应该这样做，如果现在计算平均 GPA，就会出现问题，因为我们没有将某个学生的 GPA 考虑进去。所以在这种情况下，无论是使用 `distinct`
    版本，还是不使用 `distinct` 的版本，都无法给出正确的 GPA 数量，两个版本都无法给出正确的平均值。唯一的方法是：
- en: the correct number of duplicates is to use the version of the query that has
    the。 subquery in the WHERE clause。 Now let's move to some different examples that
    also。 use subqueries in the WHERE clause。 You might remember from the previous
    video。 when we were learning the difference operator that we had a query that
    we。
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 要得到正确的重复数，我们应该使用包含子查询的 `WHERE` 子句版本。接下来我们将移到一些不同的例子，这些例子同样使用了 `WHERE` 子句中的子查询。你可能还记得在上一段视频中，我们学习了差集运算符，当时我们有一个查询。
- en: could write using the difference operator which in SQL is called accept but
    we。 were unable to write that query without the difference operator and the query
    we。 were trying to write is to find students who have applied to major in CS but
    have。 not applied to major in EE。 Now that we have subqueries in the WHERE clause
    we。
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用差集运算符来写这条查询，在 SQL 中叫做 `except`，但没有差集运算符我们是无法写出这个查询的。我们尝试写的查询是：找出那些申请计算机科学（CS）专业但没有申请电子工程（EE）专业的学生。现在我们在
    `WHERE` 子句中使用了子查询。
- en: can write that query without using the accept operator and here it is。 The。
    query looks for students where their ID is among the set of IDs of students who。
    have applied to CS but their ID is not among the set of IDs of students who。 are
    applying to major in EE。 So let's run the query and we discovered that there。
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在不使用 `except` 运算符的情况下写这个查询，这就是它。这个查询查找那些其 ID 在申请计算机科学（CS）专业的学生 ID 集合中，但其
    ID 不在申请电子工程（EE）专业的学生 ID 集合中的学生。我们来运行一下查询，结果发现：
- en: are three students who have applied to major in CS but not applied anywhere
    in， EE。 By the way let me just show you a different slightly different way to
    write， exactly the same query。 You can see that we use this keyword combination
    not in to， specify that the ID is not in the set。 We can actually write it by
    writing the， SID is in the set and then applying a not to that result。
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 有三名学生申请了计算机科学（CS），但没有申请电子工程（EE）。顺便说一下，让我向你展示一个稍微不同的写法，实际上是完全相同的查询。你可以看到，我们使用了
    `not in` 关键字组合，指定 ID 不在这个集合中。实际上我们可以通过写 `SID` 在集合中，然后对结果应用 `not` 来达到相同效果。
- en: Well execute will get， exactly the same result。 It's fairly common in SQL for
    there to be multiple。 ways to write the same query and we'll see more examples
    of that later in this， video。 So far our examples of subqueries have used in and
    not in for testing。 membership in the sets that are produced by subqueries。 Our
    next examples are going。
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，执行后，我们得到了完全相同的结果。在 SQL 中，写同一查询有多种方式是很常见的，稍后我们将看到更多的例子。到目前为止，我们的子查询示例使用了 `in`
    和 `not in` 来测试子查询生成的集合中的成员资格。接下来的例子将会...
- en: to show that we can apply the EXISTS operator to subqueries just to test。 whether
    they're empty or not empty。 Here's the query。 This query uses EXISTS to。 check
    whether a subquery is empty or not empty rather than checking whether。 values
    are in the subquery。 The other new construct that's being introduced here。
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 现在展示的是我们可以如何在子查询中应用 `EXISTS` 运算符，仅仅是为了测试它是否为空。这里是查询。这条查询使用 `EXISTS` 来检查子查询是否为空或非空，而不是检查某些值是否存在于子查询中。这里引入的另一个新结构是：
- en: is what's known as a correlated reference。 So inside the subquery we're。 going
    to refer to a value C1 that comes from outside the subquery。 So let's talk。 about
    exactly how this query works。 First let me tell you what the query is， trying
    to return。 The query is going to find all colleges such that there's some。
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这被称为关联引用。在子查询内部，我们将引用一个来自子查询外部的值C1。那么我们来谈谈这个查询是如何工作的。首先，让我告诉你这个查询试图返回的内容。这个查询将找到所有符合某些条件的大学。
- en: other college that is in the same state。 So in our example just a reminder we
    have， Stanford。 Berkeley， MIT and Cornell。 So the two colleges we should get back
    are。 Stanford and Berkeley because in each case there's another college in the
    same， state。 So how does this query work？ It says we're going to take the colleges
    and。
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，提醒一下，我们有斯坦福、伯克利、麻省理工学院和康奈尔。所以我们应该返回的两个大学是斯坦福和伯克利，因为在每种情况下，都有另一所大学位于同一个州。那么这个查询是如何工作的呢？它表示我们将先获取大学，然后。
- en: for each college we're going to check whether there exists another college and。
    we're going to call that one C2 where the state of C2 is the same as the state
    of C1。 This is sort of similar to what we saw when we were doing self-joints with
    table。 variables but now the variables are appearing in the outer query and the，
    inner query。
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每所大学，我们将检查是否存在另一所大学，并且我们将称之为C2，其中C2的州与C1的州相同。这有点类似于我们在处理自连接和表变量时看到的情况，但现在变量出现在外部查询和内部查询中。
- en: So let's run the query and we see that we get the wrong answer。 That， was again
    intentional。 Well here's the problem。 When we run this query C1 and C2， could
    be bound to the same college。 So every college is in the same state as， another
    college if the other college can be the same college。 What we need to do is， add
    inside the subquery a further condition that says C1 and C2 are。
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们执行查询并看到得到了错误的答案。那是故意的。问题出在哪里呢？当我们执行这个查询时，C1和C2可能会绑定到同一所大学。所以每个大学都有其他大学在同一个州，如果另一个大学是同一所大学的话。我们需要做的是，在子查询中添加一个进一步的条件，要求C1和C2是。
- en: different colleges。 Specifically C1。c name is not equal to C2。c name。 Let's
    run。 the query and now we get the correct answer。 Now let's look at some other。
    uses of the exists construct in subqueries。 If you happen to already know。 C2
    a little bit and someone asked you to write a query where you were going to。
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，C1.c_name不等于C2.c_name。让我们执行查询，现在我们得到了正确的答案。现在，让我们看看在子查询中使用exists构造的其他用途。如果你已经对C2有所了解，并且有人要求你编写一个查询，用来。
- en: get a largest value of some type。 The first thing you'd think of is probably。
    using the max operator but we don't know max yet。 We'll be learning that in later。
    videos and as it happens a number of queries that are effectively computing a。
    max can be written using subqueries and here's our first example。 This example
    is。
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 获取某种类型的最大值。你可能首先想到的是使用max操作符，但我们还不知道max是什么。我们将在后续的视频中学习这一内容，事实上，许多计算最大值的查询可以通过子查询来实现，这是我们的第一个例子。这个例子是。
- en: finding the college that has the largest enrollment and we're going to do that。
    with a subquery and with the not exists operator。 Specifically we're going to。
    find all colleges where there does not exist another college whose enrollment。
    is higher than the first college。 So let's go ahead and run the query and not。
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 寻找具有最大入学人数的大学，我们将通过子查询和not exists操作符来实现。具体来说，我们将找到所有大学，其中不存在入学人数比第一所大学更多的其他大学。那么我们继续执行查询并。
- en: surprisingly we get Berkeley as a result。 So this is a form of query that we
    can。 write anytime we're looking for something that's the largest or the smallest。
    Let's。 for example look for the student with the highest GPA。 So we'll change
    it to the。 student name and we'll be looking instead of colleges at students。
    Otherwise the。
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 出人意料的是，我们得到了伯克利作为结果。所以这是我们可以在寻找最大或最小值时编写的一种查询形式。让我们举个例子，寻找GPA最高的学生。所以我们将其修改为学生姓名，而不是大学，我们将关注学生而不是大学。否则，查询将会找出同一州内的另一所大学。
- en: form of this query is going to stay very similar。 We're going to look for students。
    here as well and finally we're going to have GPA instead of enrollment。 So the。
    way this query works is it says I want to find all students such that it says
    that。 there does not exist another student whose GPA is higher。 We run the query
    and， we get four results。
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 这个查询的形式将保持非常相似。我们也将查询学生，最终我们将以GPA替代入学情况。因此，这个查询的工作方式是，它表示我想找到所有学生，条件是没有其他学生的GPA比该学生高。我们执行查询并得到四个结果。
- en: Well that seems odd。 Actually it's not that odd。 Let's just add。 the GPA to
    our query and we'll see exactly what happened。 We can see that。 these four students
    all have a GPA of 3。9 so they're all tied for having the。 highest GPA and very
    specifically it faithfully runs the query that it does。
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: not exist another student whose GPA is higher than these students。 Now let's
    see。 if we can write this same query without using a sub query。 So as usual if
    we want。 to write a query without a sub query we'll need to do some type of join。
    So we're。 looking for students with the highest GPAs so we need to join two instances
    of the。
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: student relation as we've done here and then we'll apply a condition that the
    GPA。 of the first one is greater than the GPA of the second one。 We run the query
    wow we。 got a lot of answers there。 Maybe our problem is just one of duplicates。
    So。 first thing we do when it looks too big is we add to select this thing。 Nope
    that。
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: doesn't solve the problem either。 Actually this query is fundamentally wrong
    and we。 cannot write the query that finds the student with the highest GPA just
    by， using joins。 What this query actually does is it finds all students such that。
    there is some other student whose GPA is lower。 In other words it's finding all。
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: students except those who have the lowest GPA。 Now let's see another new。 construct
    we can use with sub queries in the WHERE clause and we'll continue with。 the same
    query of finding the student with the highest GPA。 This query uses the， all keyword。
    What all tells us is that instead of checking whether a value is。
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: either in or not in the result of a sub query we're going to check whether the。
    value has a certain relationship with all the results of the sub query。 In here
    in。 this case we're checking to see if the GPA is greater than or equal to all。
    elements of the sub query that returns the GPA's of all students。 If a student's
    GPA。
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: is indeed greater than or equal to all GPA's then the student has the highest，
    GPA in the database。 We'll run the query and we'll get the same four students
    with， the 3。9 GPA。 Now let's try writing this in a slightly different fashion
    just for。 fun to illustrate some concepts。 Once again we're going to try to find
    the。
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: students whose GPA is highest in the database。 Here's how we're going to do
    it， this time。 Instead of using greater than or equal to all we're going to use
    greater， than all。 So we're going to find all students where their GPA is higher
    than。 every other student by saying GPA is greater than all GPA's of students
    in。
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: the database who are not the student we're looking at by saying that the IDs
    are， not equal。 Let's run the query。 Well we get an empty result。 Let's think
    about it， for a second。 That is actually the correct result to the query。 The
    query itself was， incorrect。 The query is looking for all students where nobody
    else has the same。
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: GPA's that student everybody else's GPA is lower。 Well remember we had four，
    students with a 3。9 GPA so none of those students are going to satisfy the query，
    and nor will any other students。 So this is an incorrect formulation of the， query
    that we wanted。 Now this query would be correct if we knew that every。
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 这个学生的 GPA 高于所有其他人的 GPA。记得我们有四个学生的 GPA 是 3.9，所以这些学生都不符合查询条件，其他任何学生也都不符合。所以这是我们想要的查询的错误写法。现在，如果我们知道每个学生的
    GPA 都是唯一的，这个查询就是正确的。
- en: student had the same GPA I'm sorry this query would be correct if we knew that。
    every student's GPA was unique because there would be then one student who had，
    the highest GPA。 So let's modify the query to instead look for the colleges that。
    have the highest enrollment because it turns out in our database every college。
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 学生有相同的 GPA，抱歉，如果我们知道每个学生的 GPA 都是唯一的，这个查询才是正确的，因为那时会有一个学生拥有最高的 GPA。那么我们就修改查询改为寻找那些拥有最高入学人数的学院，因为在我们的数据库中，每个学院的入学人数是唯一的。
- en: has a unique enrollment。 So we'll change it to getting the C-name of college
    instead。 of student and we'll want the enrollment to be greater than or greater
    than all， other enrollments。 So we'll enrollment college almost done here grab
    a cup of。 coffee if you want I just have to make this be C-name and this one be
    C-name and， we're all set。
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 具有唯一入学人数。所以我们将查询修改为获取学院的 C-name，而不是学生的 C-name，并且我们希望入学人数大于或等于所有其他学院的入学人数。我们接近完成了，只要把这部分修改为
    C-name，把另一个修改为 C-name，就完成了。
- en: So what are we asking for here we're asking for all colleges whose。 enrollment
    is greater than all of the enrollments of colleges that are。 different than the
    one we're looking at。 We run the query and we get Berkeley as a。 result which
    is exactly what we'd expect。 So far we've seen the keyword all for。
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们在这里问的是什么呢？我们在寻找所有那些入学人数大于所有其他不同学院的入学人数的学院。我们运行查询，结果显示伯克利，这正是我们预期的结果。到目前为止，我们已经看到了关键词
    all 的用法。
- en: checking whether a value has a relationship with all of the results of a， subquery。
    There's also a keyword any that is a companion but instead of having to。 satisfy
    a condition with all of the elements of a set any says you must。 satisfy the condition
    with at least one element of the set。 So what we're going to。
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 检查一个值是否与子查询的所有结果有关系。还有一个关键词 any，它是 all 的伴侣，不过它不是要求必须满足所有集合元素的条件，而是要求至少满足集合中一个元素的条件。所以我们现在要做的是，执行相同的查询，但我们会稍微修改一下写法。让我先输入代码，然后再解释。
- en: do now is we're going to do the same query but we're going to write it a little，
    differently。 Let me just type it in and then explain。 Here what we're going to
    say。 is get me all colleges where it's not the case that the enrollment is less
    than or。 equal to any other college。 So in other words there's no other college
    with a， bigger enrollment。
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这里我们要说的是，获取所有学院，这些学院的入学人数不小于任何其他学院。换句话说，没有其他学院的入学人数比它大。我们运行查询，得到伯克利作为结果，这正是我们预期的结果。
- en: Just think about it for a second this is if you happen to know。 predicate logic
    this is a equivalence where when you say for all it's。 equivalent to not exist
    not in any case if you didn't follow that don't let that。 bother you let's run
    the query and we see we again get the result Berkeley。 So。
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 想一想，这如果你熟悉谓词逻辑的话，就是一个等价式，当你说“for all”时，它等价于“不存在”，在任何情况下都不成立。如果你没有跟上，不用担心，继续运行查询，我们再次得到结果，伯克利。
- en: again all tests a condition against every element in the result of a subquery
    and。 the condition is true if it's satisfied with every element whereas any is
    true if。 the condition is satisfied with one or more elements of the subquery。
    Let's use。 any for another query。 This query finds all students who are not from
    the smallest。
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，all 是对子查询结果中的每个元素进行条件测试，只有当条件满足每个元素时才为真，而 any 则只要求条件满足一个或多个子查询中的元素。让我们用
    any 再做一个查询。这个查询找到所有不是来自最小学院的学生。
- en: high school in the database。 So what we're looking for here is all students
    where。 the size of their high school is greater than any high school size in other
    words。 a student is going to be returned if there's some other student whose size。
    high school is smaller than this student we run the query and there's the result。
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库中的高中。那么我们在这里要查找的是所有学生，其中他们的高中规模大于其他任何高中的规模。换句话说，如果有其他学生的高中规模比这个学生的小，那么这个学生会被返回。我们运行查询，结果就出来了。
- en: and you can verify if you look back at the data that there is in fact a few
    there。 are students who are from high schools that have 200 students so here we
    have。 in our result every student who comes from a high school bigger than that。
    Some。 systems notably at the current time SQL light do not support the any and
    the all， operators。
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回顾数据，你会发现，确实有些学生来自人数为200人的高中，所以在我们的结果中，每个来自比这个更大高中的学生都会被包含在内。某些系统，尤其是当前的SQL
    Light，不支持`any`和`all`操作符。
- en: We do not lose expressive power we just have to write those queries a。 little
    differently typically using exists or not exists so let's look at the same。 query
    written without using any。 Here's what we do we look for students where。 there
    exists some other student okay whose high school is smaller than the。
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们并没有失去表达能力，我们只是需要以稍微不同的方式来写这些查询，通常使用`exists`或`not exists`。那么让我们看看不使用`any`的同一个查询。我们这样做：我们寻找那些存在某个其他学生的记录，那个学生的高中人数比该学生的小。
- en: student we return so this is going to give us exactly the same result and we
    will。 see we get the same set of students no students from a high school with
    200 but。 we get all the rest of the students without using any or all and just
    to。 emphasize any or all are very convenient for writing queries but they aren't。
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给我们完全相同的结果，我们会看到，得到的学生集合是相同的，没有来自200人以上高中的学生，但我们得到了其余所有学生，而没有使用`any`或`all`。仅为了强调，`any`或`all`在写查询时非常方便，但它们并不是必须的。
- en: necessary it turns out we can always write a query that would use any or all
    by。 using the exists operator or not exists instead。 As a grand finale query let's。
    revisit the query that finds students who have applied to major in CS and have
    not。 applied to major in EE and now we're going to write that query using the
    any。
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 事实证明，我们总是可以写一个查询，使用`any`或`all`中的任何一个，或者都不使用。通过使用`exists`操作符或`not exists`来代替。作为一个压轴查询，让我们重新审视一下这个查询，找出那些已经申请了计算机科学（CS）专业的学生，且没有申请电气工程（EE）专业的学生，现在我们将使用`any`来写这个查询。
- en: operator two instances of it now let's go back and look when we wrote the query。
    using in and not in and we see that there are three results Helen Irene and Craig。
    and now let's look at our query using any and not equal to any so we find。 students
    where their SID is in the set of SID's of students who have applied to。
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 操作符有两个实例，现在让我们回顾一下我们使用`in`和`not in`写的查询，看看我们得到了三个结果：Helen，Irene和Craig。现在，让我们看看使用`any`和`not
    equal to any`的查询结果。我们发现，这些学生的SID属于那些申请CS的学生的SID集合。
- en: major in CS and their SID is not equal to any of the students who have applied
    to。 major in EE and let's run the query。 Well we got the wrong answer and that
    was。 once again intentional let's look very closely at what this query asked for。
    This。 query asked for students where their ID is in the set of IDs who applied
    for CS。
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这些学生已经申请了CS专业，且他们的SID不等于任何已经申请EE专业的学生SID，现在让我们运行这个查询。好吧，我们得到了错误的答案，而这次也是故意的，让我们仔细看一下这个查询请求的内容。这个查询要求找出那些他们的ID在申请CS的学生ID集合中的学生。
- en: that's all fine and good but this is where things got tricky。 What happens。
    here is what we're saying here is that we want the condition to check whether。
    there's any element in the set of EE's that are not equal to this SID so in fact。
    this second condition is satisfied as long as there's anybody who applied to EE。
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 这一切都很好，但问题出在这里。这里发生的是，我们的意思是我们希望条件检查EE学生集合中是否有任何元素不等于这个SID，因此，实际上，只要有任何一个人申请了EE，第二个条件就成立。
- en: that's not equal to the student we're looking at and that of course is。 commonly
    the case so we made a mistake here and it's actually quite tricky to。 use the
    any and all operators and always get the right answer it's especially。 tricky
    when you can't just eyeball the answer and check but the correct。
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 这与我们正在查找的学生不同，当然这种情况是常见的，因此我们在这里犯了一个错误，实际上使用`any`和`all`操作符并总是得到正确的答案是非常棘手的，尤其是在你不能直接通过目测结果来检查时，正确的答案。
- en: formulation that we want here is that it's not the case that the SID is equal
    to。 any member of the set in other words for each member of this set of the EE。
    applications that value is not equal to the SID of the student we're going to。
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望的公式是，这个SID不等于该集合中的任何成员，换句话说，对于这个EE申请集合中的每个成员，那个值不等于我们将要返回的学生的SID。
- en: '![](img/3f7a592b952283e868e586835ed9d075_7.png)'
  id: totrans-68
  prefs: []
  type: TYPE_IMG
  zh: '![](img/3f7a592b952283e868e586835ed9d075_7.png)'
- en: retreat and now we run the query and we get the right answer。
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们运行查询，得到了正确的答案。
